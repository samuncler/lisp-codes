;;;-*-Mode: LISP; Package: CCL -*-;;	Change History (most recent first):;;  5 10/22/97 akh  fix for alias target is gonzo;;  3 4/8/97   akh  resolve aliases;;  2 6/8/95   akh  choose-directory-dialog returns directory path;;  (do not edit before this line!!);; new-file-dialogs.lisp - System 7 compatible file dialogs;; Copyright 1995 Digitool, Inc. The 'tool rules!;; 10/17/97 akh  choose-file-dialog also cancels as below;; 05/27/97 bill choose-new-file-dialog cancels if the StandardFileReply.sfGood field;;               is not true.;; 04/24/97 bill Change $rGetDirectoryDLOG from 128 to 129 so it doesn't collide with the;;               splash screen resource ID.;; ------------  4.1f1;; 03/04/97 akh  sf-choose-file-hook deal with aliases#| Note for MCL users:The three functions choose-file-dialog, choose-new-file-dialog, andchoose-directory-dialog and their support functions which would normallybe part of MCL 3.0 have been moved to this file because of bugs in SystemSoftware Version 7.5.1 that can cause crashes. Apple has said that they willbe fixed in an patch called "System 7.5 Update 2" expected in thefall of 1995; until that time, we have reverted the built-in filedialog functions (in l1-files.lisp) to the older code (which canbe found in the file "Library;old-file-dialogs.lisp").If you are using System 7.5 (not 7.5.1) or have the Update 2 patch, thenyou should install the newer functions defined here. To install theminto your MCL environment, you can either load this file and then usesave-application to create a new Lisp image, or you can put this formin your init.lisp file:(require 'new-file-dialogs)|#(in-package "CCL"); Modification History;; 02/03/97 bill  Remove consing from sf-choose-file-filter;                defeat-easy-open-dwim keyword arg to choose-file-dialog; -------------  4.0;  9/11/96 slh   preserve dead-keys state like old-file-dialogs does; 09/06/96 gb    declaim specials special.; 08/27/96 bill  without-event-processing => with-foreign-window in;                choose-file-dialog, choose-new-file-dialog, choose-directory-dialog.; -------------  4.0b1;  8/05/96 slh   bind redefine warning vars; choose-file-dialog,;                choose-new-file-dialog: fixes from A. Ogus;  5/31/96 slh   in-package AGAIN; 04/24/96 bill  put-external-scrap in choose-new-file-dialog;  5/24/96 slh   Select button reflects pulldown name now; simple desktop check;  5/23/96 slh   _EqualString -> IUCompPString for PPC; -------------  MCL-PPC 3.9; 02/23/96 bill  "wither" -> "either" in note above.; 02/09/96 bill  Wrap (without-event-processing ...) around calls to;                #_CustomGetFile & friends.; 12/10/95 slh   updated trap calls etc. for PPC;  6/07/95 slh   new file(eval-when (:compile-toplevel :execute)  (require "LISPEQU")  (require "SYSEQU")    (defconstant $getDirBtn 10)  (defconstant $rGetDirectoryDLOG 129)    ; RREF would coerce to a STRING  (defmacro stdfreply-filename-ptr (stdfreply)    `(%inc-ptr ,stdfreply #.(get-field-offset :StandardFileReply.sfFile.name)))    (defmacro pascal-pred (pred)    `(if ,pred #$true #$false))    (defmacro restoring-dead-keys (&body body)    (let ((dead-state (gensym)))      `(let ((,dead-state (get-dead-keys-state)))         (unwind-protect           (progn ,@body)           (set-dead-keys ,dead-state)))))  )(declaim (special sf-choose-file-filter sf-choose-file-hook *get-folder-select-char*                  sf-choose-dir-filter sf-choose-dir-hook sf-choose-dir-modal-filter                  *get-folder-select-char*))(defpascal sf-choose-file-filter (:ptr cinfopb :ptr data :word)  (declare (ignore data)           (special %creator% %types%))  (pascal-pred (not (or (%ilogbitp $ioDirFlg (rref cinfopb :CInfoPBRec.ioFlAttrib))                        (flet ((same-type-p (type-string cinfopb-offset)                                 (rlet ((ostype :ostype))                                   (setf (%get-ostype ostype) type-string)                                   (and (eql (the fixnum (%get-word ostype))                                             (the fixnum (%get-word (%inc-ptr cinfopb cinfopb-offset))))                                        (eql (the fixnum (%get-word ostype 2))                                             (the fixnum (%get-word (%inc-ptr cinfopb cinfopb-offset) 2)))))))                          (and (or (null %creator%)                                   (same-type-p %creator% $fdCreator))                               (or (null %types%)                                   (if (listp %types%)                                     (dolist (type %types%)                                       (when (same-type-p type $fdType)                                         (return t)))                                     (same-type-p %types% $fdType)))))))))(defpascal sf-choose-file-hook (:word item :ptr dialog :ptr stdfreply :word)  (declare (special %selectedp% %button-string%))  (%run-masked-periodic-tasks)  (when (rlet ((ostype-ptr :ostype (#_GetWRefCon dialog)))          (%equal-ostype ostype-ptr #$sfMainDialogRefCon))    (case item      (#.#$sfHookFirstCall       (when %button-string%         (rlet ((type     :integer)                (item-ptr :handle)                (rect     :pointer))           (#_GetDialogItem dialog #$sfItemOpenButton type item-ptr rect)           (#_SetControlTitle (%get-ptr item-ptr) %button-string%)))       (unless (zerop *ddir-dirid*)         (setf (rref stdfreply StandardFileReply.sfFile.parID)   *ddir-dirid*               (rref stdfreply StandardFileReply.sfFile.vRefNum) *ddir-vrefnum*)         (when *ddir-name*           ; storing any string except "" seems to make it go to the END of the list           (%put-string (stdfreply-filename-ptr stdfreply) "" 0 64))    ; "" -> *ddir-name*         (setq item #$sfHookChangeSelection)))      (#.#$sfHookOpenAlias       (setq %selectedp% t))      (#.#$sfItemOpenButton       (setq %selectedp% t))))  item)(defun dialog-fg-check (what)  (unless *foreground*    (error "Attempt to invoke ~A dialog in background" what)))(defvar *get-folder-select-char* #\Return)(defun flash-button (dialog id)  (rlet ((button-type :signed-integer)         (button-handle :handle)         (button-rect :rect)         (final-ticks :signed-long))    (#_GetDialogItem dialog id button-type button-handle button-rect)    (#_HiliteControl (%get-ptr button-handle) #$inButton)    (#_Delay 8 final-ticks)    (#_HiliteControl (%get-ptr button-handle) 0))); thanks Dan Camper for this(defpascal sf-choose-dir-modal-filter (:ptr dialog :ptr myEvtRec :ptr item :ptr myDataPtr :word)  (declare (ignore myDataPtr))  (cond ((and (rlet ((ostype-ptr :ostype (#_GetWRefCon dialog)))                (%equal-ostype ostype-ptr #$sfMainDialogRefCon))              (= (rref myEvtRec :EventRecord.What) #$keyDown)              (not (zerop (logand (rref myEvtRec :EventRecord.Modifiers) #$cmdKey)))              (equalp (code-char (logand (pref myEvtRec :EventRecord.Message) #$CharCodeMask))                      *get-folder-select-char*))         (%put-word item $getDirBtn)         (flash-button dialog $getDirBtn)         #$true)        (t #$false)))(defpascal sf-choose-dir-filter (:ptr cinfopb :ptr data :word)  (declare (ignore data))  (pascal-pred (not (%ilogbitp $ioDirFlg (rref cinfopb :CInfoPBRec.ioFlAttrib)))))(defun set-button-title (hdl np rect)  (declare (special *prev-selected-str255*))  (#_BlockMove np *prev-selected-str255* 256)  (#_TruncString (- (rref rect rect.right) (rref rect rect.left)                    #-ppc-target #.(+ (string-width "Select \"\"") (#_CharWidth #\Space))                    #+ppc-target (+ (string-width "Select \"\"") (#_CharWidth #\Space))                    )                 np #$smTruncMiddle)  (with-pstr (np2 (format nil "Select \"~A\"" (%get-string np)))    (#_SetControlTitle hdl np2))  (#_ValidRect rect))(defpascal sf-choose-dir-hook (:word item :ptr dialog :ptr stdfreply :word)  (declare (special *prev-selected-str255* %selectedp%))  (%run-masked-periodic-tasks)  (when (rlet ((ostype-ptr :ostype (#_GetWRefCon dialog)))          (%equal-ostype ostype-ptr #$sfMainDialogRefCon))    (%stack-iopb (pb np)      (rlet ((type     :integer)             (item-ptr :handle)             (rect     :pointer))        (#_GetDialogItem dialog $getDirBtn type item-ptr rect)        (case item          (#.#$sfHookFirstCall           (unless (zerop *ddir-dirid*)             (setf (rref stdfreply StandardFileReply.sfFile.parID)   *ddir-dirid*                   (rref stdfreply StandardFileReply.sfFile.vRefNum) *ddir-vrefnum*)             (when *ddir-name*               (%put-string (stdfreply-filename-ptr stdfreply) *ddir-name* 0 64))             (setq item #$sfHookChangeSelection))           (%put-word pb (- (#_LMGetSFSaveDisk)) $ioVRefNum)           (%put-word pb -1 $ioFDirIndex)           (%put-long pb (#_LMGetCurDirStore) $ioDirID)           (when (%izerop (#_PBGetCatInfoSync pb))             (set-button-title (%get-ptr item-ptr) np rect)))          (t (%put-word pb (rref stdfreply StandardFileReply.sfFile.vRefNum) $ioVRefNum)             (%put-word pb -1 $ioFDirIndex)             (%put-long pb (rref stdfreply StandardFileReply.sfFile.parID)   $ioDrDirID)             (#_PBGetCatInfoSync pb)             (when (zerop (%get-byte np))               (%put-string np "Desktop Folder"))             (unless #+ppc-target (zerop (#_IUCompPString np *prev-selected-str255* (%null-ptr)))                     #-ppc-target (#_EqualString np *prev-selected-str255*)                     (set-button-title (%get-ptr item-ptr) np rect))             (when (= item #.$getDirBtn)               (setq %selectedp% t                     item #$sfItemCancelButton)))))))  item)#| easier to just check for empty name(defun check-desktop (stdfreply)  (declare (special *prev-selected-str255*))  (rlet ((desktopVRefNum :signed-integer)         (desktopDirID   :longint))    (let ((vrefnum (rref stdfreply StandardFileReply.sfFile.vRefNum)))      (#_FindFolder vrefnum #$kDesktopFolderType #$kDontCreateFolder desktopVRefNum desktopDirID)      (if (and (= (%get-signed-word desktopVRefNum) vrefnum)               (= (%get-signed-long desktopDirID)   (rref stdfreply StandardFileReply.sfFile.parID)))        (%put-string *prev-selected-str255* "Desktop Folder")))))|#(let ((*warn-if-redefine* nil)      (*warn-if-redefine-kernel* nil)); Note the difference between :directory "vol:dir:", :directory "vol:dir", and; :directory "vol:dir:file". I think it's doing the right thing for all three.(defun choose-file-dialog (&rest args                                 &key directory                                 mac-file-type                                 mac-file-creator                                 defeat-easy-open-dwim                                 (button-string "Open"))  (dialog-fg-check "Choose File")  (cond (*custom-getfile-present*         (when (or (and directory                        (setq directory (directory-namestring (full-pathname directory))))                   (setq directory (choose-file-default-directory)))           (set-choose-file-default-directory directory))         (let* ((typesp (listp mac-file-type))                (ntypes (if defeat-easy-open-dwim                          0                          (if typesp (length mac-file-type) 1)))                (%types% (and defeat-easy-open-dwim mac-file-type))                (%creator% (if mac-file-creator (string mac-file-creator)))                (%selectedp% nil))           (declare (special %types% %creator% %selectedp%))           (restoring-dead-keys             (rlet ((stdfreply :StandardFileReply))               (%stack-block ((typelist (%ilsl 2 ntypes)))                 (cond (defeat-easy-open-dwim)                       (typesp (let ((offset 0))                                 (dolist (type mac-file-type)                                   (%put-ostype typelist type offset)                                   (setq offset (%i+ offset 4)))))                       (t (%put-ostype typelist mac-file-type)))                 (with-pstr (%button-string% button-string)                   (declare (special %button-string%))                   (with-foreign-window                     (#_CustomGetFile sf-choose-file-filter                      (if (zerop ntypes) -1 ntypes) typelist stdfreply                      #$sfGetDialogID #@(-1 -1) sf-choose-file-hook                      *null-ptr* *null-ptr* *null-ptr*                      stdfreply))))               (unless (and %selectedp% (rref stdfreply standardfilereply.sfgood))                 (cancel))               (let ((path (%path-from-params (rref stdfreply StandardFileReply.sfFile.vRefNum)                                              (rref stdfreply StandardFileReply.sfFile.parID)                                              (stdfreply-filename-ptr stdfreply))))                 (set-choose-file-default-directory path)                 path)))))        (t (load-alternate :old-file-dialogs 'choose-file-dialog args))))(defun choose-new-file-dialog (&rest args                                     &key directory                                     (prompt "As...")                                     (button-string "Save")                                     &aux name)  (dialog-fg-check "Choose New File")  (cond (*custom-getfile-present*         (when (get-scrap-p :text nil)           (put-external-scrap))         (when directory            (setq name (mac-file-namestring (file-namestring directory)))           (setq directory (full-pathname directory)))         (when (or (and directory                        (pathname-directory directory)                        (setq directory (directory-namestring directory)))                   (setq directory (choose-file-default-directory)))           (set-choose-file-default-directory directory t))         (let ((%selectedp% nil))           (declare (special %selectedp%))           (restoring-dead-keys             (rlet ((stdfreply :StandardFileReply))               (with-pstrs ((pp prompt)                            (np (or name "")))                 (with-pstr (%button-string% button-string)                   (declare (special %button-string%))                   (put-external-scrap)                   (with-foreign-window                     (#_CustomPutFile pp np stdfreply 0 #@(-1 -1)                      sf-choose-file-hook                      *null-ptr* *null-ptr* *null-ptr*                      stdfreply))))               (unless (and %selectedp% (pref stdfreply StandardFileReply.sfGood))                 (cancel))               (let ((path (%path-from-params (rref stdfreply StandardFileReply.sfFile.vRefNum)                                              (rref stdfreply StandardFileReply.sfFile.parID)                                              (stdfreply-filename-ptr stdfreply))))                 (set-choose-file-default-directory path)                 path)))))        (t (load-alternate :old-file-dialogs 'choose-new-file-dialog args)))); Note the difference between :directory "vol:dir:", :directory "vol:dir", and; :directory "vol:dir:file". I think it's doing the right thing for all three.(defun choose-directory-dialog (&rest args &key directory)  (cond (*custom-getfile-present*         (dialog-fg-check "Choose Directory")         (when (or (and directory (setq directory (full-pathname directory)))                   (setq directory (choose-file-default-directory)))           (set-choose-file-default-directory directory))         (restoring-dead-keys           (rlet ((stdfreply :StandardFileReply)                  (typelist  :SFTypeList)                  (str255    (:string 255)))             (%put-byte str255 0)             (let ((*prev-selected-str255* str255)                   (%selectedp% nil))               (declare (special *prev-selected-str255* %selectedp%))               (with-foreign-window                 (#_CustomGetFile sf-choose-dir-filter 0 typelist stdfreply                  $rGetDirectoryDLOG (make-point -1 -1) sf-choose-dir-hook                  (if *get-folder-select-char*                    sf-choose-dir-modal-filter                    *null-ptr*)                  *null-ptr* *null-ptr* stdfreply))               (unless %selectedp%                 (cancel))               (let ((path (%path-from-params (rref stdfreply StandardFileReply.sfFile.vRefNum)                                              (rref stdfreply StandardFileReply.sfFile.parID)                                              (%null-ptr))))                 (when (not (directory-pathname-p path))                   (setq path (filepath-to-dirpath path)))                 (set-choose-file-default-directory path)                 path)))))        (t (load-alternate :old-file-dialogs 'choose-directory-dialog args))))) ; (let ((*warn-...))); End of new-file-dialogs.lisp