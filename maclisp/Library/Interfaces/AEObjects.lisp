(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:AEObjects.p"; at Tuesday June 6,1995 2:04:04 pm.; ;  	File:		AEObjects.p;  ;  	Contains:	AppleEvents Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __AEOBJECTS__; $SETC __AEOBJECTS__ := 1; $I+; $SETC AEObjectsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __MEMORY__|#(require-interface 'Memory)#|                                              ; $I Memory.p |#                                             ; $ENDC; 	Types.p														; 		ConditionalMacros.p										; 	MixedMode.p													#|                                              ; $IFC UNDEFINED __OSUTILS__|#(require-interface 'OSUtils)#|                                              ; $I OSUtils.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	QuickdrawText.p												#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __EPPC__|#(require-interface 'EPPC)#|                                              ; $I EPPC.p |#                                             ; $ENDC; 	Errors.p													; 	AppleTalk.p													; 	Files.p														; 	PPCToolbox.p												; 	Processes.p													#|                                              ; $IFC UNDEFINED __APPLEEVENTS__|#(require-interface 'AppleEvents)#|                                              ; $I AppleEvents.p |#                                             ; $ENDC; 	Notification.p												#|                                              ; $IFC UNDEFINED __ERRORS__|#(require-interface 'Errors)#|                                              ; $I Errors.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kAEAND :|AND |)                   ;   0x414e4420  (defconstant $kAEOR :|OR  |)                    ;   0x4f522020  (defconstant $kAENOT :|NOT |)                   ;   0x4e4f5420  ; ***	ABSOLUTE ORDINAL CONSTANTS	***(defconstant $kAEFirst :|firs|)                 ;   0x66697273  (defconstant $kAELast :|last|)                  ;   0x6c617374  (defconstant $kAEMiddle :|midd|)                ;   0x6d696464  (defconstant $kAEAny :|any |)                   ;   0x616e7920  (defconstant $kAEAll :|all |)                   ;   0x616c6c20  ; ***	RELATIVE ORDINAL CONSTANTS	***(defconstant $kAENext :|next|)                  ;   0x6e657874  (defconstant $kAEPrevious :|prev|)              ;   0x70726576  ; ***	KEYWORD CONSTANT 	***(defconstant $keyAECompOperator :|relo|)        ;   0x72656c6f  (defconstant $keyAELogicalTerms :|term|)        ;   0x7465726d  (defconstant $keyAELogicalOperator :|logc|)     ;   0x6c6f6763  (defconstant $keyAEObject1 :|obj1|)             ;   0x6f626a31  (defconstant $keyAEObject2 :|obj2|)             ;   0x6f626a32  ; 	... for Keywords for getting fields out of object specifier records. (defconstant $keyAEDesiredClass :|want|)        ;   0x77616e74  (defconstant $keyAEContainer :|from|)           ;   0x66726f6d  (defconstant $keyAEKeyForm :|form|)             ;   0x666f726d  (defconstant $keyAEKeyData :|seld|); 	... for Keywords for getting fields out of Range specifier records. (defconstant $keyAERangeStart :|star|)          ;   0x73746172  (defconstant $keyAERangeStop :|stop|)           ;   0x73746f70  ; 	... special handler selectors for OSL Callbacks. (defconstant $keyDisposeTokenProc :|xtok|)      ;   0x78746f6b  (defconstant $keyAECompareProc :|cmpr|)         ;   0x636d7072  (defconstant $keyAECountProc :|cont|)           ;   0x636f6e74  (defconstant $keyAEMarkTokenProc :|mkid|)       ;   0x6d6b6964  (defconstant $keyAEMarkProc :|mark|)            ;   0x6d61726b  (defconstant $keyAEAdjustMarksProc :|adjm|)     ;   0x61646a6d  (defconstant $keyAEGetErrDescProc :|indc|); ***	VALUE and TYPE CONSTANTS	***; 	... possible values for the keyAEKeyForm field of an object specifier. (defconstant $formAbsolutePosition :|indx|)     ;   0x696e6478  (defconstant $formRelativePosition :|rele|)     ;   0x72656c65  (defconstant $formTest :|test|)                 ;   0x74657374  (defconstant $formRange :|rang|)                ;   0x72616e67  (defconstant $formPropertyID :|prop|)           ;   0x70726f70  (defconstant $formName :|name|)                 ;   0x6e616d65  ; 	... relevant types (some of these are often pared with forms above). (defconstant $typeObjectSpecifier :|obj |)      ;   0x6f626a20  (defconstant $typeObjectBeingExamined :|exmn|)  ;   0x65786d6e  (defconstant $typeCurrentContainer :|ccnt|)     ;   0x63636e74  (defconstant $typeToken :|toke|)                ;   0x746f6b65  (defconstant $typeRelativeDescriptor :|rel |)   ;   0x72656c20  (defconstant $typeAbsoluteOrdinal :|abso|)      ;   0x6162736f  (defconstant $typeIndexDescriptor :|inde|)      ;   0x696e6465  (defconstant $typeRangeDescriptor :|rang|)      ;   0x72616e67  (defconstant $typeLogicalDescriptor :|logi|)    ;   0x6c6f6769  (defconstant $typeCompDescriptor :|cmpd|)       ;   0x636d7064  (defconstant $typeOSLTokenList :|ostl|);  Possible values for flags parameter to AEResolve.  They're additive (defconstant $kAEIDoMinimum #x0)(defconstant $kAEIDoWhose #x1)(defconstant $kAEIDoMarking #x4)(defconstant $kAEPassSubDescs #x8)(defconstant $kAEResolveNestedLists #x10)(defconstant $kAEHandleSimpleRanges #x20)(defconstant $kAEUseRelativeIterators #x40); *** SPECIAL CONSTANTS FOR CUSTOM WHOSE-CLAUSE RESOLUTION (defconstant $typeWhoseDescriptor :|whos|)      ;   0x77686f73  (defconstant $formWhose :|whos|)                ;   0x77686f73  (defconstant $typeWhoseRange :|wrng|)           ;   0x77726e67  (defconstant $keyAEWhoseRangeStart :|wstr|)     ;   0x77737472  (defconstant $keyAEWhoseRangeStop :|wstp|)      ;   0x77737470  (defconstant $keyAEIndex :|kidx|)               ;   0x6b696478  (defconstant $keyAETest :|ktst|); *; 	used for rewriting tokens in place of 'ccnt' descriptors; 	This record is only of interest to those who, when they...; 	...get ranges as key data in their accessor procs, choose; 	...to resolve them manually rather than call AEResolve again.; *(defrecord ccntTokenRecord    (tokenClass :ostype)   (token :aedesc)   )(def-mactype :ccnttokenrecptr (find-mactype '(:pointer :ccnttokenrecord)))(def-mactype :ccnttokenrechandle (find-mactype '(:handle :ccnttokenrecord)))(def-mactype :descptr (find-mactype '(:pointer :aedesc)))(def-mactype :deschandle (find-mactype '(:handle :aedesc)));  typedefs providing type checking for procedure pointers (def-mactype :oslaccessorprocptr (find-mactype ':pointer));  FUNCTION OSLAccessor(desiredClass: DescType; (CONST)VAR container: AEDesc; containerClass: DescType; form: DescType; (CONST)VAR selectionData: AEDesc; value: DescPtr; accessorRefcon: LONGINT): OSErr; (def-mactype :oslcompareprocptr (find-mactype ':pointer));  FUNCTION OSLCompare(oper: DescType; (CONST)VAR obj1: AEDesc; (CONST)VAR obj2: AEDesc; VAR result: BOOLEAN): OSErr; (def-mactype :oslcountprocptr (find-mactype ':pointer));  FUNCTION OSLCount(desiredType: DescType; containerClass: DescType; (CONST)VAR container: AEDesc; VAR result: LONGINT): OSErr; (def-mactype :osldisposetokenprocptr (find-mactype ':pointer));  FUNCTION OSLDisposeToken(unneededToken: DescPtr): OSErr; (def-mactype :oslgetmarktokenprocptr (find-mactype ':pointer));  FUNCTION OSLGetMarkToken((CONST)VAR dContainerToken: AEDesc; containerClass: DescType; result: DescPtr): OSErr; (def-mactype :oslgeterrdescprocptr (find-mactype ':pointer));  FUNCTION OSLGetErrDesc(VAR appDescPtr: DescPtr): OSErr; (def-mactype :oslmarkprocptr (find-mactype ':pointer));  FUNCTION OSLMark((CONST)VAR dToken: AEDesc; (CONST)VAR markToken: AEDesc; index: LONGINT): OSErr; (def-mactype :osladjustmarksprocptr (find-mactype ':pointer));  FUNCTION OSLAdjustMarks(newStart: LONGINT; newStop: LONGINT; (CONST)VAR markToken: AEDesc): OSErr; (def-mactype :oslaccessorupp (find-mactype ':pointer))(def-mactype :oslcompareupp (find-mactype ':pointer))(def-mactype :oslcountupp (find-mactype ':pointer))(def-mactype :osldisposetokenupp (find-mactype ':pointer))(def-mactype :oslgetmarktokenupp (find-mactype ':pointer))(def-mactype :oslgeterrdescupp (find-mactype ':pointer))(def-mactype :oslmarkupp (find-mactype ':pointer))(def-mactype :osladjustmarksupp (find-mactype ':pointer))(defconstant $uppOSLAccessorProcInfo #xFFFE0)   ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppOSLCompareProcInfo #x3FE0)     ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppOSLCountProcInfo #x3FE0)       ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppOSLDisposeTokenProcInfo #xE0)  ;  FUNCTION (4 byte param): 2 byte result; (defconstant $uppOSLGetMarkTokenProcInfo #xFE0) ;  FUNCTION (4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppOSLGetErrDescProcInfo #xE0)    ;  FUNCTION (4 byte param): 2 byte result; (defconstant $uppOSLMarkProcInfo #xFE0)         ;  FUNCTION (4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppOSLAdjustMarksProcInfo #xFE0)  ;  FUNCTION (4 byte param, 4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewOSLAccessorProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewOSLCompareProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewOSLCountProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewOSLDisposeTokenProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewOSLGetMarkTokenProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewOSLGetErrDescProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewOSLMarkProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewOSLAdjustMarksProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallOSLAccessorProc" ((desiredClass :ostype) (container (:pointer :aedesc)) (containerClass :ostype) (form :ostype) (selectionData (:pointer :aedesc)) (value (:pointer :aedesc)) (accessorRefcon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallOSLCompareProc" ((oper :ostype) (obj1 (:pointer :aedesc)) (obj2 (:pointer :aedesc)) (result (:pointer :boolean)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallOSLCountProc" ((desiredType :ostype) (containerClass :ostype) (container (:pointer :aedesc)) (result (:pointer :signed-long)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallOSLDisposeTokenProc" ((unneededToken (:pointer :aedesc)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallOSLGetMarkTokenProc" ((dContainerToken (:pointer :aedesc)) (containerClass :ostype) (result (:pointer :aedesc)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallOSLGetErrDescProc" ((appDescPtr (:pointer (:pointer :aedesc))) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallOSLMarkProc" ((dToken (:pointer :aedesc)) (markToken (:pointer :aedesc)) (index :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallOSLAdjustMarksProc" ((newStart :signed-long) (newStop :signed-long) (markToken (:pointer :aedesc)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC;  Not done by inline, but by direct linking into code.  It sets up the pack;   such that further calls can be via inline ;; Warning: No calling method defined for this trap(deftrap-inline "_AEObjectInit" ()   :signed-integer   () )                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AESetObjectCallbacks" ((myCompareProc :pointer) (myCountProc :pointer) (myDisposeTokenProc :pointer) (myGetMarkTokenProc :pointer) (myMarkProc :pointer) (myAdjustMarksProc :pointer) (myGetErrDescProcPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 3637 myCompareProc myCountProc myDisposeTokenProc myGetMarkTokenProc myMarkProc myAdjustMarksProc myGetErrDescProcPtr)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEResolve" ((objectSpecifier (:pointer :aedesc)) (callbackFlags :signed-integer) (theToken (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1334 objectSpecifier callbackFlags theToken)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEInstallObjectAccessor" ((desiredClass :ostype) (containerType :ostype) (theAccessor :pointer) (accessorRefcon :signed-long) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2359 desiredClass containerType theAccessor accessorRefcon isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AERemoveObjectAccessor" ((desiredClass :ostype) (containerType :ostype) (theAccessor :pointer) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1848 desiredClass containerType theAccessor isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetObjectAccessor" ((desiredClass :ostype) (containerType :ostype) (accessor (:pointer :pointer)) (accessorRefcon (:pointer :signed-long)) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2361 desiredClass containerType accessor accessorRefcon isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEDisposeToken" ((theToken (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 570 theToken)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AECallObjectAccessor" ((desiredClass :ostype) (containerToken (:pointer :aedesc)) (containerClass :ostype) (keyForm :ostype) (keyData (:pointer :aedesc)) (token (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 3131 desiredClass containerToken containerClass keyForm keyData token)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := AEObjectsIncludes; $ENDC                                         ; __AEOBJECTS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'AEObjects)