(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:GXTypes.p"; at Tuesday June 6,1995 2:10:01 pm.; ;  	File:		GXTypes.p;  ;  	Contains:	QuickDraw GX object and constant definitions;  ;  	Version:	Technology:	Quickdraw GX 1.1;  				Package:	Universal Interfaces 2.1ß1 in “MPW Prerelease” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __GXTYPES__; $SETC __GXTYPES__ := 1; $I+; $SETC GXTypesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $IFC UNDEFINED __GXMATH__(require-interface 'GXMath)                     ; $I GXMath.p; $ENDC; 	FixMath.p													; $PUSH; $ALIGN MAC68K; $LibExport+; $SETC graphicsTypesIncludes := 1(def-mactype :gxshape (find-mactype ':pointer))(def-mactype :gxstyle (find-mactype ':pointer))(def-mactype :gxink (find-mactype ':pointer))(def-mactype :gxtransform (find-mactype ':pointer))(def-mactype :gxtag (find-mactype ':pointer))(def-mactype :gxcolorset (find-mactype ':pointer))(def-mactype :gxcolorprofile (find-mactype ':pointer))(def-mactype :gxgraphicsclient (find-mactype ':pointer))(def-mactype :gxviewgroup (find-mactype ':pointer))(def-mactype :gxviewport (find-mactype ':pointer))(def-mactype :gxviewdevice (find-mactype ':pointer))(def-mactype :gxcolorspace (find-mactype ':signed-long));  gxShape enumerations (defconstant $gxEmptyType 1)(defconstant $gxPointType 2)(defconstant $gxLineType 3)(defconstant $gxCurveType 4)(defconstant $gxRectangleType 5)(defconstant $gxPolygonType 6)(defconstant $gxPathType 7)(defconstant $gxBitmapType 8)(defconstant $gxTextType 9)(defconstant $gxGlyphType 10)(defconstant $gxLayoutType 11)(defconstant $gxFullType 12)(defconstant $gxPictureType 13)(def-mactype :gxshapetype (find-mactype ':signed-long))(defconstant $gxNoFill 0)(defconstant $gxOpenFrameFill 1)(defconstant $gxFrameFill #$gxOpenFrameFill)(defconstant $gxClosedFrameFill 2)(defconstant $gxHollowFill #$gxClosedFrameFill)(defconstant $gxEvenOddFill 3)(defconstant $gxSolidFill #$gxEvenOddFill)(defconstant $gxWindingFill 4)(defconstant $gxInverseEvenOddFill 5)(defconstant $gxInverseSolidFill #$gxInverseEvenOddFill)(defconstant $gxInverseFill #$gxInverseEvenOddFill)(defconstant $gxInverseWindingFill 6)(def-mactype :gxshapefill (find-mactype ':signed-long))(defconstant $gxNoAttributes 0)(defconstant $gxDirectShape #x1)(defconstant $gxRemoteShape #x2)(defconstant $gxCachedShape #x4)(defconstant $gxLockedShape #x8)(defconstant $gxGroupShape #x10)(defconstant $gxMapTransformShape #x20)(defconstant $gxUniqueItemsShape #x40)(defconstant $gxIgnorePlatformShape #x80)(defconstant $gxNoMetricsGridShape #x100)(defconstant $gxDiskShape #x200)(defconstant $gxMemoryShape #x400)(def-mactype :gxshapeattribute (find-mactype ':signed-long));  gxShape editing enumerations (defconstant $gxBreakNeitherEdit 0)(defconstant $gxBreakLeftEdit #x1)(defconstant $gxBreakRightEdit #x2)(defconstant $gxRemoveDuplicatePointsEdit #x4);  if the new first (or last) point exactly matches the point before it in ;  the same contour, then remove it) (def-mactype :gxeditshapeflag (find-mactype ':signed-long))(defconstant $gxSelectToEnd -1)(defconstant $gxAnyNumber 1)(defconstant $gxSetToNil -1)(defconstant $gxCounterclockwiseDirection 0)(defconstant $gxClockwiseDirection 1)(def-mactype :gxcontourdirection (find-mactype ':signed-long));  gxShape structures ;  The type 'gxPoint' is defined in "GXMath.h" (defrecord gxLine    (first :gxpoint)   (last :gxpoint)   )(defrecord gxCurve    (first :gxpoint)   (control :gxpoint)   (last :gxpoint)   )(defrecord gxRectangle    (left :signed-long)   (top :signed-long)   (right :signed-long)   (bottom :signed-long)   )(defrecord gxPolygon    (vectors :signed-long)   (vector (:array :gxpoint 1))   )(defrecord gxPolygons    (contours :signed-long)   (contour (:array :gxpolygon 1))   )(defrecord gxPath    (vectors :signed-long)   (controlBits (:array :signed-long 1))   (vector (:array :gxpoint 1))   )(defrecord gxPaths    (contours :signed-long)   (contour (:array :gxpath 1))   )(defrecord gxBitmap    (image (:pointer :character))                ;  pointer to pixels    (width :signed-long)                         ;  width in pixels    (height :signed-long)                        ;  height in pixels    (rowBytes :signed-long)                      ;  width in bytes    (pixelSize :signed-long)                     ;  physical bits per pixel    (space :signed-long)   (colorSet :pointer)   (profile :pointer)   )(defrecord gxLongRectangle    (left :signed-long)   (top :signed-long)   (right :signed-long)   (bottom :signed-long)   );  gxStyle enumerations (defconstant $gxCenterFrameStyle 0)(defconstant $gxSourceGridStyle #x1)(defconstant $gxDeviceGridStyle #x2)(defconstant $gxInsideFrameStyle #x4)(defconstant $gxOutsideFrameStyle #x8)(defconstant $gxAutoInsetStyle #x10)(def-mactype :gxstyleattribute (find-mactype ':signed-long))(defconstant $gxBendDash #x1)(defconstant $gxBreakDash #x2)(defconstant $gxClipDash #x4)(defconstant $gxLevelDash #x8)(defconstant $gxAutoAdvanceDash #x10)(def-mactype :gxdashattribute (find-mactype ':signed-long))(defconstant $gxPortAlignPattern #x1)(defconstant $gxPortMapPattern #x2)(def-mactype :gxpatternattribute (find-mactype ':signed-long))(defconstant $gxSharpJoin #x0)(defconstant $gxCurveJoin #x1)(defconstant $gxLevelJoin #x2)(def-mactype :gxjoinattribute (find-mactype ':signed-long))(defconstant $gxLevelStartCap #x1)(defconstant $gxLevelEndCap #x2)(def-mactype :gxcapattribute (find-mactype ':signed-long))(defconstant $gxAutoAdvanceText #x1)(defconstant $gxNoContourGridText #x2)(defconstant $gxNoMetricsGridText #x4)(defconstant $gxAnchorPointsText #x8)(defconstant $gxVerticalText #x10)(defconstant $gxNoOpticalScaleText #x20)(def-mactype :gxtextattribute (find-mactype ':signed-long))(defconstant $gxLeftJustify 0)(defconstant $gxCenterJustify (truncate #$fract1 2))(defconstant $gxRightJustify #$fract1)(defconstant $gxFillJustify -1)(defconstant $gxUnderlineAdvanceLayer #x1)      ;  a gxLine is drawn through the advances (defconstant $gxSkipWhiteSpaceLayer #x2)        ;  except characters describing white space (defconstant $gxUnderlineIntervalLayer #x4)     ;  (+ gxStringLayer) a gxLine is drawn through the gaps between advances (defconstant $gxUnderlineContinuationLayer #x8) ;  (+ gxStringLayer) join this underline with another face (defconstant $gxWhiteLayer #x10)                ;  the layer draws to white instead of black (defconstant $gxClipLayer #x20)                 ;  the characters define a clip (defconstant $gxStringLayer #x40)               ;  all characters in run are combined (def-mactype :gxlayerflag (find-mactype ':signed-long));  gxStyle structures (defrecord gxFaceLayer    (outlineFill :signed-long)                   ;  outline framed or filled    (flags :signed-long)                         ;  various additional effects    (outlineStyle :pointer)                      ;  outline    (outlineTransform :pointer)                  ;  italic, condense, extend    (boldOutset :gxpoint)                        ;  bold    )(defrecord gxTextFace    (faceLayers :signed-long)                    ;  layer to implement shadow    (advanceMapping :gxmapping)                  ;  algorithmic change to advance width    (faceLayer (:array :gxfacelayer 1))          ;  zero or more face layers describing the face    )(defrecord gxJoinRecord    (attributes :signed-long)   (join :pointer)   (miter :signed-long)   )(defrecord gxDashRecord    (attributes :signed-long)   (dash :pointer)                              ;  similar to pattern, except rotated to gxLine slope    (advance :signed-long)                       ;  specifies repeating frequency of dash    (phase :signed-long)                         ;  specifies offset into the gxPath to start dashing    (scale :signed-long)                         ;  specifies height of dash to be mapped to penWidth    )(defrecord gxPatternRecord    (attributes :signed-long)   (pattern :pointer)   (u :gxpoint)   (v :gxpoint)   )(defrecord gxCapRecord    (attributes :signed-long)   (startCap :pointer)   (endCap :pointer)   );  gxInk enumerations (defconstant $gxPortAlignDitherInk #x1)(defconstant $gxForceDitherInk #x2)(defconstant $gxSuppressDitherInk #x4)(defconstant $gxSuppressHalftoneInk #x8)(def-mactype :gxinkattribute (find-mactype ':signed-long))(defconstant $gxNoMode 0)(defconstant $gxCopyMode 1)(defconstant $gxAddMode 2)(defconstant $gxBlendMode 3)(defconstant $gxMigrateMode 4)(defconstant $gxMinimumMode 5)(defconstant $gxMaximumMode 6)(defconstant $gxHighlightMode 7)(defconstant $gxAndMode 8)(defconstant $gxOrMode 9)(defconstant $gxXorMode 10)(defconstant $gxRampAndMode 11)(defconstant $gxRampOrMode 12)(defconstant $gxRampXorMode 13)(defconstant $gxOverMode 14)                    ;  Alpha channel modes				(defconstant $gxAtopMode 15)                    ;  Note: In England = Beta channel modes		(defconstant $gxExcludeMode 16)(defconstant $gxFadeMode 17)(def-mactype :gxcomponentmode (find-mactype ':signed-byte))(defconstant $gxRejectSourceTransfer #x1)       ;  at least one component must be out of range		(defconstant $gxRejectDeviceTransfer #x2)       ;  at least one component must be out of range		(defconstant $gxSingleComponentTransfer #x4)    ;  duplicate gxTransferComponent[0] for all components in transfer (def-mactype :gxtransferflag (find-mactype ':signed-long))(defconstant $gxOverResultComponent #x1)        ;  & result gxColor with 0xFFFF before clamping	(defconstant $gxReverseComponent #x2)           ;  reverse source and device before moding		(def-mactype :gxcomponentflag (find-mactype ':signed-byte))(defrecord gxTransferComponent    (mode :signed-byte)                          ;  how the component is operated upon    (flags :signed-byte)                         ;  flags for each component	   (sourceMinimum :signed-integer)   (sourceMaximum :signed-integer)              ;  input filter range    (deviceMinimum :signed-integer)   (deviceMaximum :signed-integer)              ;  output filter range    (clampMinimum :signed-integer)   (clampMaximum :signed-integer)               ;  output clamping range    (operand :signed-integer)                    ;  ratio for blend, step for migrate, gxColor for highlight	   )(defrecord gxTransferMode    (space :signed-long)                         ;  the gxColor-space the transfer mode is to operate in	   (colorSet :pointer)   (profile :pointer)   (sourceMatrix (:array :signed-long 5 4))   (deviceMatrix (:array :signed-long 5 4))   (resultMatrix (:array :signed-long 5 4))   (flags :signed-long)   (component (:array :gxtransfercomponent 4))  ;  how each component is operated upon			   );  gxColor space enumerations (defconstant $gxNoColorPacking #x0)             ;  16 bits per channel (defconstant $gxAlphaSpace #x80)                ;  space includes alpha channel (defconstant $gxWord5ColorPacking #x500)        ;  5 bits per channel, right-justified (defconstant $gxLong8ColorPacking #x800)        ;  8 bits per channel, right-justified (defconstant $gxLong10ColorPacking #xA00)       ;  10 bits per channel, right-justified (defconstant $gxAlphaFirstPacking #x1000)       ;  alpha channel is the first field in the packed space (defconstant $gxNoSpace 0)(defconstant $gxRGBSpace 1)(defconstant $gxCMYKSpace 2)(defconstant $gxHSVSpace 3)(defconstant $gxHLSSpace 4)(defconstant $gxYXYSpace 5)(defconstant $gxXYZSpace 6)(defconstant $gxLUVSpace 7)(defconstant $gxLABSpace 8)(defconstant $gxYIQSpace 9)(defconstant $gxNTSCSpace #$gxYIQSpace)(defconstant $gxPALSpace #$gxYIQSpace)(defconstant $gxGraySpace 10)(defconstant $gxIndexedSpace 11)(defconstant $gxRGBASpace (+ #$gxRGBSpace #$gxAlphaSpace))(defconstant $gxGrayASpace (+ #$gxGraySpace #$gxAlphaSpace))(defconstant $gxRGB16Space (+ #$gxWord5ColorPacking #$gxRGBSpace))(defconstant $gxRGB32Space (+ #$gxLong8ColorPacking #$gxRGBSpace))(defconstant $gxARGB32Space (+ #$gxLong8ColorPacking (+ #$gxAlphaFirstPacking #$gxRGBASpace)))(defconstant $gxCMYK32Space (+ #$gxLong8ColorPacking #$gxCMYKSpace))(defconstant $gxHSV32Space (+ #$gxLong10ColorPacking #$gxHSVSpace))(defconstant $gxHLS32Space (+ #$gxLong10ColorPacking #$gxHLSSpace))(defconstant $gxYXY32Space (+ #$gxLong10ColorPacking #$gxYXYSpace))(defconstant $gxXYZ32Space (+ #$gxLong10ColorPacking #$gxXYZSpace))(defconstant $gxLUV32Space (+ #$gxLong10ColorPacking #$gxLUVSpace))(defconstant $gxLAB32Space (+ #$gxLong10ColorPacking #$gxLABSpace))(defconstant $gxYIQ32Space (+ #$gxLong10ColorPacking #$gxYIQSpace))(defconstant $gxNTSC32Space #$gxYIQ32Space)(defconstant $gxPAL32Space #$gxYIQ32Space);  gxColor space structures (defrecord gxRGBColor    (red :signed-integer)   (green :signed-integer)   (blue :signed-integer)   )(defrecord gxRGBAColor    (red :signed-integer)   (green :signed-integer)   (blue :signed-integer)   (alpha :signed-integer)   )(defrecord gxHSVColor    (hue :signed-integer)   (saturation :signed-integer)   (value :signed-integer)   )(defrecord gxHLSColor    (hue :signed-integer)   (lightness :signed-integer)   (saturation :signed-integer)   )(defrecord gxCMYKColor    (cyan :signed-integer)   (magenta :signed-integer)   (yellow :signed-integer)   (black :signed-integer)   )(defrecord gxXYZColor    (x :signed-integer)   (y :signed-integer)   (z :signed-integer)   )(defrecord gxYXYColor    (capY :signed-integer)   (x :signed-integer)   (y :signed-integer)   )(defrecord gxLUVColor    (l :signed-integer)   (u :signed-integer)   (v :signed-integer)   )(defrecord gxLABColor    (l :signed-integer)   (a :signed-integer)   (b :signed-integer)   )(defrecord gxYIQColor    (y :signed-integer)   (i :signed-integer)   (q :signed-integer)   )(defrecord gxGrayAColor    (gray :signed-integer)   (alpha :signed-integer)   )(def-mactype :gxcolorindex (find-mactype ':signed-long))(defrecord gxIndexedColor    (index :signed-long)   (colorSet :pointer)   )(defrecord gxColor    (space :signed-long)   (profile :pointer)   (:variant       (      (cmyk :gxcmykcolor)      )      (      (rgb :gxrgbcolor)      )      (      (rgba :gxrgbacolor)      )      (      (hsv :gxhsvcolor)      )      (      (hls :gxhlscolor)      )      (      (xyz :gxxyzcolor)      )      (      (yxy :gxyxycolor)      )      (      (luv :gxluvcolor)      )      (      (lab :gxlabcolor)      )      (      (yiq :gxyiqcolor)      )      (      (gray :signed-integer)      )      (      (graya :gxgrayacolor)      )      (      ;;Changing field pixel16 from signed-integer to unsigned-word to match C header (pretty-darn-sure)      (pixel16 :unsigned-word)      )      (      ;;Changing field pixel32 from signed-long to unsigned-long to match C header (pretty-darn-sure)      (pixel32 :unsigned-long)      )      (      (indexed :gxindexedcolor)      )      (      (component (:array :signed-integer 4))      )      )   );  gxColorSet structures (defrecord gxSetColor    (:variant       (      (cmyk :gxcmykcolor)      )      (      (rgb :gxrgbcolor)      )      (      (rgba :gxrgbacolor)      )      (      (hsv :gxhsvcolor)      )      (      (hls :gxhlscolor)      )      (      (xyz :gxxyzcolor)      )      (      (yxy :gxyxycolor)      )      (      (luv :gxluvcolor)      )      (      (lab :gxlabcolor)      )      (      (yiq :gxyiqcolor)      )      (      (gray :signed-integer)      )      (      (graya :gxgrayacolor)      )      (      ;;Changing field pixel16 from signed-integer to unsigned-word to match C header (pretty-darn-sure)      (pixel16 :unsigned-word)      )      (      ;;Changing field pixel32 from signed-long to unsigned-long to match C header (pretty-darn-sure)      (pixel32 :unsigned-long)      )      (      (component (:array :signed-integer 4))      )      )   );  gxTransform enumerations ;  parts of a gxShape considered in hit testing: (defconstant $gxNoPart 0)                       ;  (in order of evaluation) (defconstant $gxBoundsPart #x1)(defconstant $gxGeometryPart #x2)(defconstant $gxPenPart #x4)(defconstant $gxCornerPointPart #x8)(defconstant $gxControlPointPart #x10)(defconstant $gxEdgePart #x20)(defconstant $gxJoinPart #x40)(defconstant $gxStartCapPart #x80)(defconstant $gxEndCapPart #x100)(defconstant $gxDashPart #x200)(defconstant $gxPatternPart #x400)(defconstant $gxGlyphBoundsPart #$gxJoinPart)(defconstant $gxGlyphFirstPart #$gxStartCapPart)(defconstant $gxGlyphLastPart #$gxEndCapPart)(defconstant $gxSideBearingPart #$gxDashPart)(defconstant $gxAnyPart (+ #$gxBoundsPart (+ #$gxGeometryPart (+ #$gxPenPart (+ #$gxCornerPointPart (+ #$gxControlPointPart (+ #$gxEdgePart (+ #$gxJoinPart (+ #$gxStartCapPart (+ #$gxEndCapPart (+ #$gxDashPart #$gxPatternPart)))))))))))(def-mactype :gxshapepart (find-mactype ':signed-long));  gxTransform structures (defrecord gxHitTestInfo    (what :signed-long)                          ;  which part of gxShape    (index :signed-long)                         ;  control gxPoint index    (distance :signed-long)                      ;  how far from gxPoint or outside of area click was ;  these fields are only set by GXHitTestPicture    (which :pointer)   (containerPicture :pointer)                  ;  picture which contains gxShape hit    (containerIndex :signed-long)                ;  the index within that picture     (totalIndex :signed-long)                    ;  the total index within the root picture    );  gxViewPort enumerations (defconstant $gxGrayPort #x1)(defconstant $gxAlwaysGridPort #x2)(defconstant $gxEnableMatchPort #x4)(def-mactype :gxportattribute (find-mactype ':signed-long));  gxViewDevice enumerations (defconstant $gxDirectDevice #x1)               ;  for the device gxBitmap baseAddr pointer (defconstant $gxRemoteDevice #x2)(defconstant $gxInactiveDevice #x4)(def-mactype :gxdeviceattribute (find-mactype ':signed-long))(defconstant $gxRoundDot 1)(defconstant $gxSpiralDot 2)(defconstant $gxSquareDot 3)(defconstant $gxLineDot 4)(defconstant $gxEllipticDot 5)(defconstant $gxTriangleDot 6)(defconstant $gxDispersedDot 7)(defconstant $gxCustomDot 8)(def-mactype :gxdottype (find-mactype ':signed-long));  gxViewPort structures (defconstant $gxNoTint 0)(defconstant $gxLuminanceTint 1)                ;  use the luminance of the gxColor (defconstant $gxAverageTint 2)                  ;  add all the components and divide by the number of components (defconstant $gxMixtureTint 3)                  ;  find the closest gxColor on the axis between the foreground and background (defconstant $gxComponent1Tint 4)               ;  use the value of the first component of the gxColor (defconstant $gxComponent2Tint 5)               ;  ... etc. (defconstant $gxComponent3Tint 6)(defconstant $gxComponent4Tint 7)(def-mactype :gxtinttype (find-mactype ':signed-long))(defrecord gxHalftone    (angle :signed-long)   (frequency :signed-long)   (method :signed-long)   (tinting :signed-long)   (dotColor :gxcolor)   (backgroundColor :gxcolor)   (tintSpace :signed-long)   )(defrecord gxHalftoneMatrix    (dpiX :signed-long)                          ;  intended resolution    (dpiY :signed-long)   (width :signed-long)                         ;  width of matrix (in device pixels)    (height :signed-long)                        ;  height of matrix (in device pixels)    (tileShift :signed-long)                     ;  shift amount (in samples) for rectangular tiling    ;;Changing field samples from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (samples (:array :unsigned-word 1))          ;  samples from 0..MAX(halftone tintSpace)    );  gxViewGroup enumerations (defconstant $gxAllViewDevices 0)(defconstant $gxScreenViewDevices 1)(defconstant $gxOpenReadSpool 1)(defconstant $gxOpenWriteSpool 2)(defconstant $gxReadSpool 3)(defconstant $gxWriteSpool 4)(defconstant $gxCloseSpool 5)(def-mactype :gxspoolcommand (find-mactype ':signed-long))(def-mactype :gxgraphicsopcode (find-mactype ':signed-byte))(def-mactype :gxspoolprocptr (find-mactype ':pointer));  FUNCTION gxSpool(command: gxSpoolCommand; VAR block: gxSpoolBlock): LONGINT; (def-mactype :gxspoolupp (find-mactype ':pointer))(defrecord gxSpoolBlock    (spoolProcedure :pointer)                    ;  these fields are read only    (buffer :pointer)                            ;  source/destination pointer to data    (bufferSize :signed-long)                    ;  how many bytes for the system to read (flatten) / write (unflatten) ;  these fields are written to (but are not read from)    (count :signed-long)                         ;  how many bytes for the caller to read (unflatten) /write (flatten)    (operationSize :signed-long)                 ;  operation size (including operand byte)    (operationOffset :signed-long)               ;  the data offset, if any, within the current operation    (lastTypeOpcode :signed-byte)                ;  type of last created object    (currentOperation :signed-byte)              ;  operation emitted by flatten, or intrepreted by last unflatten    (currentOperand :signed-byte)                ;  e.g., gxTransformTypeOpcode, gxInkTagOpcode    ;;Changing field compressed from signed-byte to unsigned-byte to match C header (educated-guess)   (compressed :unsigned-byte)                  ;  unsigned char ;  one of: gxTwoBitCompressionValues    )(defconstant $uppgxSpoolProcInfo #x3F1)         ;  FUNCTION (4 byte param, 4 byte param): 4 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewgxSpoolProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallgxSpoolProc" ((command :signed-long) (block (:pointer :gxspoolblock)) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC(defconstant $gxFontListFlatten #x1)            ;  if set, generate a gxTag containing list of each gxFont referenced (defconstant $gxFontGlyphsFlatten #x2)          ;  if set, generate a gxTag containing the list of glyphs referenced inside the gxFont (defconstant $gxFontVariationsFlatten #x4)      ;  if set, append the gxTag with separate [variation] coordinates (defconstant $gxBitmapAliasFlatten #x8)         ;  if set, open bitmap alias files and flatten out their image data (def-mactype :gxflattenflag (find-mactype ':signed-long));  gxGraphicsClient constants (defconstant $gxGraphicsSystemClient -1)(defconstant $gxStaticHeapClient #x1)(def-mactype :gxclientattribute (find-mactype ':signed-long));  graphics patching constants (defconstant $gxOriginalGraphicsFunction -1)(defconstant $gxOriginalGraphicsIdentifier :|grfx|)(defrecord gxBitmapDataSourceAlias    ;;Changing field fileoffset from signed-long to unsigned-long to match C header (pretty-darn-sure)   (fileOffset :unsigned-long)                  ;  file offset (in bytes) of top-left pixel    ;;Changing field aliasrecordsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (aliasRecordSize :unsigned-long)             ;  size of alias record below    ;;Changing field aliasrecord from signed-byte to unsigned-byte to match C header (educated-guess)   (aliasRecord (:array :unsigned-byte 1))      ;  unsigned char ;  the actual alias record data    )(defconstant $gxBitmapFileAliasTagType :|bfil|)(defconstant $gxBitmapFileAliasImageValue 1); $SETC fontTypesIncludes := 1(def-mactype :gxfont (find-mactype '(:pointer :pointer)))(defconstant $gxNoPlatform 0)(defconstant $gxNoScript 0)(defconstant $gxNoLanguage 0)(defconstant $gxNoFontName 0)(defconstant $gxGlyphPlatform -1)(defconstant $gxUnicodePlatform 1)(defconstant $gxMacintoshPlatform 2)(defconstant $gxReservedPlatform 3)(defconstant $gxMicrosoftPlatform 4)(defconstant $gxCustomPlatform 5)(def-mactype :gxfontplatform (find-mactype ':signed-long))(defconstant $gxUnicodeDefaultSemantics 1)(defconstant $gxUnicodeV1_1Semantics 2)(defconstant $gxISO10646_1993Semantics 3)(defconstant $gxRomanScript 1)(defconstant $gxJapaneseScript 2)(defconstant $gxTraditionalChineseScript 3)(defconstant $gxChineseScript #$gxTraditionalChineseScript)(defconstant $gxKoreanScript 4)(defconstant $gxArabicScript 5)(defconstant $gxHebrewScript 6)(defconstant $gxGreekScript 7)(defconstant $gxCyrillicScript 8)(defconstant $gxRussian #$gxCyrillicScript)(defconstant $gxRSymbolScript 9)(defconstant $gxDevanagariScript 10)(defconstant $gxGurmukhiScript 11)(defconstant $gxGujaratiScript 12)(defconstant $gxOriyaScript 13)(defconstant $gxBengaliScript 14)(defconstant $gxTamilScript 15)(defconstant $gxTeluguScript 16)(defconstant $gxKannadaScript 17)(defconstant $gxMalayalamScript 18)(defconstant $gxSinhaleseScript 19)(defconstant $gxBurmeseScript 20)(defconstant $gxKhmerScript 21)(defconstant $gxThaiScript 22)(defconstant $gxLaotianScript 23)(defconstant $gxGeorgianScript 24)(defconstant $gxArmenianScript 25)(defconstant $gxSimpleChineseScript 26)(defconstant $gxTibetanScript 27)(defconstant $gxMongolianScript 28)(defconstant $gxGeezScript 29)(defconstant $gxEthiopicScript #$gxGeezScript)(defconstant $gxAmharicScript #$gxGeezScript)(defconstant $gxSlavicScript 30)(defconstant $gxEastEuropeanRomanScript #$gxSlavicScript)(defconstant $gxVietnameseScript 31)(defconstant $gxExtendedArabicScript 32)(defconstant $gxSindhiScript #$gxExtendedArabicScript)(defconstant $gxUninterpretedScript 33)(defconstant $gxMicrosoftSymbolScript 1)(defconstant $gxMicrosoftStandardScript 2)(defconstant $gxCustom8BitScript 1)(defconstant $gxCustom816BitScript 2)(defconstant $gxCustom16BitScript 3)(def-mactype :gxfontscript (find-mactype ':signed-long))(defconstant $gxEnglishLanguage 1)(defconstant $gxFrenchLanguage 2)(defconstant $gxGermanLanguage 3)(defconstant $gxItalianLanguage 4)(defconstant $gxDutchLanguage 5)(defconstant $gxSwedishLanguage 6)(defconstant $gxSpanishLanguage 7)(defconstant $gxDanishLanguage 8)(defconstant $gxPortugueseLanguage 9)(defconstant $gxNorwegianLanguage 10)(defconstant $gxHebrewLanguage 11)(defconstant $gxJapaneseLanguage 12)(defconstant $gxArabicLanguage 13)(defconstant $gxFinnishLanguage 14)(defconstant $gxGreekLanguage 15)(defconstant $gxIcelandicLanguage 16)(defconstant $gxMalteseLanguage 17)(defconstant $gxTurkishLanguage 18)(defconstant $gxCroatianLanguage 19)(defconstant $gxTradChineseLanguage 20)(defconstant $gxUrduLanguage 21)(defconstant $gxHindiLanguage 22)(defconstant $gxThaiLanguage 23)(defconstant $gxKoreanLanguage 24)(defconstant $gxLithuanianLanguage 25)(defconstant $gxPolishLanguage 26)(defconstant $gxHungarianLanguage 27)(defconstant $gxEstonianLanguage 28)(defconstant $gxLettishLanguage 29)(defconstant $gxLatvianLanguage #$gxLettishLanguage)(defconstant $gxSaamiskLanguage 30)(defconstant $gxLappishLanguage #$gxSaamiskLanguage)(defconstant $gxFaeroeseLanguage 31)(defconstant $gxFarsiLanguage 32)(defconstant $gxPersianLanguage #$gxFarsiLanguage)(defconstant $gxRussianLanguage 33)(defconstant $gxSimpChineseLanguage 34)(defconstant $gxFlemishLanguage 35)(defconstant $gxIrishLanguage 36)(defconstant $gxAlbanianLanguage 37)(defconstant $gxRomanianLanguage 38)(defconstant $gxCzechLanguage 39)(defconstant $gxSlovakLanguage 40)(defconstant $gxSlovenianLanguage 41)(defconstant $gxYiddishLanguage 42)(defconstant $gxSerbianLanguage 43)(defconstant $gxMacedonianLanguage 44)(defconstant $gxBulgarianLanguage 45)(defconstant $gxUkrainianLanguage 46)(defconstant $gxByelorussianLanguage 47)(defconstant $gxUzbekLanguage 48)(defconstant $gxKazakhLanguage 49)(defconstant $gxAzerbaijaniLanguage 50)(defconstant $gxAzerbaijanArLanguage 51)(defconstant $gxArmenianLanguage 52)(defconstant $gxGeorgianLanguage 53)(defconstant $gxMoldavianLanguage 54)(defconstant $gxKirghizLanguage 55)(defconstant $gxTajikiLanguage 56)(defconstant $gxTurkmenLanguage 57)(defconstant $gxMongolianLanguage 58)(defconstant $gxMongolianCyrLanguage 59)(defconstant $gxPashtoLanguage 60)(defconstant $gxKurdishLanguage 61)(defconstant $gxKashmiriLanguage 62)(defconstant $gxSindhiLanguage 63)(defconstant $gxTibetanLanguage 64)(defconstant $gxNepaliLanguage 65)(defconstant $gxSanskritLanguage 66)(defconstant $gxMarathiLanguage 67)(defconstant $gxBengaliLanguage 68)(defconstant $gxAssameseLanguage 69)(defconstant $gxGujaratiLanguage 70)(defconstant $gxPunjabiLanguage 71)(defconstant $gxOriyaLanguage 72)(defconstant $gxMalayalamLanguage 73)(defconstant $gxKannadaLanguage 74)(defconstant $gxTamilLanguage 75)(defconstant $gxTeluguLanguage 76)(defconstant $gxSinhaleseLanguage 77)(defconstant $gxBurmeseLanguage 78)(defconstant $gxKhmerLanguage 79)(defconstant $gxLaoLanguage 80)(defconstant $gxVietnameseLanguage 81)(defconstant $gxIndonesianLanguage 82)(defconstant $gxTagalogLanguage 83)(defconstant $gxMalayRomanLanguage 84)(defconstant $gxMalayArabicLanguage 85)(defconstant $gxAmharicLanguage 86)(defconstant $gxTigrinyaLanguage 87)(defconstant $gxGallaLanguage 88)(defconstant $gxOromoLanguage #$gxGallaLanguage)(defconstant $gxSomaliLanguage 89)(defconstant $gxSwahiliLanguage 90)(defconstant $gxRuandaLanguage 91)(defconstant $gxRundiLanguage 92)(defconstant $gxChewaLanguage 93)(defconstant $gxMalagasyLanguage 94)(defconstant $gxEsperantoLanguage 95)(defconstant $gxWelshLanguage 129)(defconstant $gxBasqueLanguage 130)(defconstant $gxCatalanLanguage 131)(defconstant $gxLatinLanguage 132)(defconstant $gxQuechuaLanguage 133)(defconstant $gxGuaraniLanguage 134)(defconstant $gxAymaraLanguage 135)(defconstant $gxTatarLanguage 136)(defconstant $gxUighurLanguage 137)(defconstant $gxDzongkhaLanguage 138)(defconstant $gxJavaneseRomLanguage 139)(defconstant $gxSundaneseRomLanguage 140)(def-mactype :gxfontlanguage (find-mactype ':signed-long))(defconstant $gxCopyrightFontName 1)(defconstant $gxFamilyFontName 2)(defconstant $gxStyleFontName 3)(defconstant $gxUniqueFontName 4)(defconstant $gxFullFontName 5)(defconstant $gxVersionFontName 6)(defconstant $gxPostscriptFontName 7)(defconstant $gxTrademarkFontName 8)(defconstant $gxManufacturerFontName 9)(defconstant $gxLastReservedFontName 256)(def-mactype :gxfontname (find-mactype ':signed-long))(def-mactype :gxfonttabletag (find-mactype ':signed-long))(def-mactype :gxfontvariationtag (find-mactype ':signed-long))(def-mactype :gxfontformattag (find-mactype ':signed-long))(def-mactype :gxfontstoragetag (find-mactype ':signed-long))(def-mactype :gxfontdescriptortag (find-mactype ':signed-long))(defrecord gxFontVariation    ;;Changing field name from signed-long to unsigned-long to match C header (educated-guess)   (name :unsigned-long)   (value :signed-long)   )(%define-record :gxfontdescriptor (find-record-descriptor :gxfontvariation))(defrecord gxFontFeatureSetting    ;;Changing field setting from signed-integer to unsigned-word to match C header (pretty-sure)   (setting :unsigned-word)   ;;Changing field nameid from signed-integer to unsigned-word to match C header (pretty-sure)   (nameID :unsigned-word)   )(defconstant $gxSystemFontAttribute #x1)(defconstant $gxReadOnlyFontAttribute #x2)(def-mactype :gxfontattribute (find-mactype ':signed-long))(defconstant $gxMutuallyExclusiveFeature #x8000)(def-mactype :gxfontfeatureflag (find-mactype ':signed-long))(def-mactype :gxfontfeature (find-mactype ':signed-long))(defconstant $gxResourceFontStorage :|rsrc|)(defconstant $gxHandleFontStorage :|hndl|)(defconstant $gxFileFontStorage :|bass|)(defconstant $gxNfntFontStorage :|nfnt|)(def-mactype :gxfontstoragereference (find-mactype ':pointer)); $SETC layoutTypesIncludes := 1(def-mactype :gxglyphcode (find-mactype ':signed-integer));  single glyph in a font ;  byte offset within backing store (def-mactype :gxbyteoffset (find-mactype ':signed-long));  The actual constants for feature types and selectors have been moved to a library. (def-mactype :gxrunfeaturetype (find-mactype ':signed-integer))(def-mactype :gxrunfeatureselector (find-mactype ':signed-integer));  If tracking is not desired, specify the following value in the track field in the; 		gxRunControls record (note that a track of 0 does *not* mean to turn tracking off;; 		rather, it means to use normal tracking). (defconstant $gxNoTracking #$gxNegativeInfinity);  The special "gxNoStake" value is returned by the GXGetLayoutBreakOffset call to; 		indicate the absence of a character offset that is stable with respect to; 		metamorphosis and contextual kerning. (defconstant $gxNoStake -1);  A glyph's behavior with respect to other glyphs on its line is defined in part by its; 		gxBaselineType. These types allow correct alignment of the baselines of all glyphs on; 		the line. (defconstant $gxRomanBaseline 0)(defconstant $gxIdeographicCenterBaseline 1)(defconstant $gxIdeographicLowBaseline 2)(defconstant $gxHangingBaseline 3)(defconstant $gxMathBaseline 4)(defconstant $gxLastBaseline 31)(defconstant $gxNumberOfBaselineTypes (+ #$gxLastBaseline 1))(defconstant $gxNoOverrideBaseline 255)(def-mactype :gxbaselinetype (find-mactype ':signed-long));; hand-hacked;; (defrecord gxBaselineDeltas (array (array :signed-long (- (- (value 'gxnumberofbaselinetypes) 1) 0 -1))))(defrecord gxBaselineDeltas (array (array :signed-long 32)));  gxJustificationPriority defines the point during the justification process at which a; 	glyph will begin to receive deltas before and after itself. (defconstant $gxKashidaPriority 0)(defconstant $gxWhiteSpacePriority 1)(defconstant $gxInterCharPriority 2)(defconstant $gxNullJustificationPriority 3)(defconstant $gxNumberOfJustificationPriorities 4)(def-mactype :gxjustificationpriority (find-mactype ':character));  gxJustificationFlags are used to control which fields of a gxWidthDeltaRecord are to; 		be overridden and which are not if a gxPriorityJustificationOverride or; 		gxGlyphJustificationOverride (qq.v.) is specified. (defconstant $gxOverridePriority #x8000)        ;  use priority value from override (defconstant $gxOverrideLimits #x4000)          ;  use limits values from override (defconstant $gxOverrideUnlimited #x2000)       ;  use unlimited flag from override (defconstant $gxUnlimitedGapAbsorption #x1000)  ;  glyph can take unlimited gap (defconstant $gxJustificationPriorityMask #xF)  ;  justification priority (defconstant $gxAllJustificationFlags (+ 0 (+ #$gxOverridePriority (+ #$gxOverrideLimits (+ #$gxOverrideUnlimited (+ #$gxUnlimitedGapAbsorption #$gxJustificationPriorityMask))))))(def-mactype :gxjustificationflags (find-mactype ':signed-integer));  The directional behavior of a glyph can be overridden using a gxDirectionOverride. (defconstant $gxNoDirectionOverride 0)(defconstant $gxImposeLeftToRight 1)(defconstant $gxImposeRightToLeft 2)(defconstant $gxImposeArabic 3)(def-mactype :gxdirectionoverride (find-mactype ':signed-integer));  gxRunControlFlags describe the nonparametric layout options contained in a gxStyle. (defconstant $gxNoLigatureSplits #x80000000)(defconstant $gxNoCaretAngle #x40000000)(defconstant $gxImposeWidth #x20000000)(defconstant $gxNoCrossKerning #x10000000)(defconstant $gxNoOpticalAlignment #x8000000)(defconstant $gxForceHanging #x4000000)(defconstant $gxNoSpecialJustification #x2000000)(defconstant $gxDirectionOverrideMask #x3)(defconstant $gxAllRunControlFlags (+ 0 (+ #$gxNoLigatureSplits (+ #$gxNoCaretAngle (+ #$gxImposeWidth (+ #$gxNoCrossKerning (+ #$gxNoOpticalAlignment (+ #$gxForceHanging (+ #$gxNoSpecialJustification #$gxDirectionOverrideMask)))))))))(def-mactype :gxruncontrolflags (find-mactype ':signed-long));  gxHighlightType is used to distinguish various highlighting methods, both in terms of; 		character offset based vs. visual based, and in terms of angled sides vs. non-angled; 		sides. (defconstant $gxHighlightStraight 0)            ;  straight-edged simple highlighting (defconstant $gxHighlightAverageAngle 1)        ;  takes average of two edge angles (def-mactype :gxhighlighttype (find-mactype ':signed-long));  gxCaretType is used to control whether the caret that is returned from GXGetLayoutCaret; 		is a split caret or a (keyboard-syncronized) single caret. (defconstant $gxSplitCaretType 0)               ;  returns Mac-style split caret (default) (defconstant $gxLeftRightKeyboardCaret 1)       ;  single caret in left-right position (defconstant $gxRightLeftKeyboardCaret 2)       ;  single caret in right-left position (def-mactype :gxcarettype (find-mactype ':signed-long));  gxLayoutOffsetState describes the characteristics of a given gxByteOffset in some; 		layout. It is returned by the GXGetOffsetGlyphs call. Note that the; 		gxOffsetInsideLigature value is returned in addition to the 8/16 (or invalid); 		indication. (defconstant $gxOffset8_8 0)(defconstant $gxOffset8_16 1)(defconstant $gxOffset16_8 2)(defconstant $gxOffset16_16 3)(defconstant $gxOffsetInvalid 4)(defconstant $gxOffsetInsideLigature #x8000)(def-mactype :gxlayoutoffsetstate (find-mactype ':signed-integer));  gxLayoutOptionsFlags are single-bit flags contained in a gxLayoutOptions record. We; 		also define here some utility constants that are useful in setting various fields in; 		the gxLayoutOptions record. (defconstant $gxNoLayoutOptions 0)(defconstant $gxLineIsDisplayOnly #x1)(defconstant $gxAllLayoutOptionsFlags #$gxLineIsDisplayOnly)(defconstant $gxMaxRunLevel 15)(defconstant $gxFlushLeft 0)(defconstant $gxFlushCenter (truncate #$fract1 2))(defconstant $gxFlushRight #$fract1)(defconstant $gxNoJustification 0)(defconstant $gxFullJustification #$fract1)(def-mactype :gxlayoutoptionsflags (find-mactype ':signed-long));  A gxRunFeature describes a feature and a level for that feature. (defrecord gxRunFeature    (featureType :unsigned-short)   (featureSelector :unsigned-short)   );; changed record to correct types :unsigned-byte;  A gxWidthDeltaRecord contains all of the information needed to describe the behavior of one; 		class of glyphs during the justification process. (defrecord gxWidthDeltaRecord    (beforeGrowLimit :signed-long)               ;  ems AW can grow by at most on LT    (beforeShrinkLimit :signed-long)             ;  ems AW can shrink by at most on LT    (afterGrowLimit :signed-long)                ;  ems AW can grow by at most on RB    (afterShrinkLimit :signed-long)              ;  ems AW can shrink by at most on RB    (growFlags :signed-integer)                  ;  flags controlling grow case    (shrinkFlags :signed-integer)                ;  flags controlling shrink case    );  A gxPriorityJustificationOverride contains an array of WidthDeltaRecords, one for each; 		gxJustificationPriority. (defrecord gxPriorityJustificationOverride    (deltas (:array :gxwidthdeltarecord (- (- #$gxNumberOfJustificationPriorities 1) 0 -1)));  overrides for each of the priorities    );  A gxGlyphJustificationOverride contains a gxWidthDeltaRecord that is to be used for a; 		specific glyph in a specific run (this limitation is because glyphcodes vary by font). (defrecord gxGlyphJustificationOverride    (glyph :signed-integer)   (override :gxwidthdeltarecord)   );  gxRunControls contains flags, shifts, imposed widths and overrides for a run. ;  NOTE: a value of "gxNoTracking" (see above) in track disables tracking (defrecord gxRunControls    (flags :signed-long)   (beforeWithStreamShift :signed-long)   (afterWithStreamShift :signed-long)   (crossStreamShift :signed-long)   (imposedWidth :signed-long)   (track :signed-long)   (hangingInhibitFactor :signed-long)   (kerningInhibitFactor :signed-long)   (decompositionAdjustmentFactor :signed-long)   (baselineType :signed-long)   );  A gxGlyphSubstitution describes one client-provided substitution that occurs after all; 		other automatic glyph changes have happened. (defrecord gxGlyphSubstitution    (originalGlyph :signed-integer)              ;  Whenever you see this glyph...    (substituteGlyph :signed-integer)            ;  ...change it to this one.    );  gxKerningAdjustmentFactors specify an adjustment to automatic kerning. The adjustment; 		is ax + b where x is the automatic kerning value, a is scaleFactor, and b is; 		adjustmentPointSizeFactor times the run's point size. (defrecord gxKerningAdjustmentFactors    (scaleFactor :signed-long)   (adjustmentPointSizeFactor :signed-long)   );  A gxKerningAdjustment identifies with- and cross-stream kerning adjustments; 		for specific glyph pairs. (defrecord gxKerningAdjustment    (firstGlyph :signed-integer)   (secondGlyph :signed-integer)   (withStreamFactors :gxkerningadjustmentfactors)   (crossStreamFactors :gxkerningadjustmentfactors)   );  A value of gxResetCrossStreamFactor in crossStreamFactors.adjustmentPointSizeFactor; 		will reset the cross-stream kerning to the baseline. (defconstant $gxResetCrossStreamFactor #$gxNegativeInfinity);  gxLayoutHitInfo contains the output from the GXHitTestLayout call. (defrecord gxLayoutHitInfo    (firstPartialDist :signed-long)   (lastPartialDist :signed-long)   (hitSideOffset :signed-long)   (nonHitSideOffset :signed-long)   (leadingEdge :boolean)   (inLoose :boolean)   );  A gxLineBaselineRecord contains the deltas from 0 to all the different baselines for; 		the layout. It can be filled via a call to GetBaselineDeltas (q.v.). (defrecord gxLineBaselineRecord    (deltas :gxbaselinedeltas)   );  The gxLayoutOptions type contains information about the layout characteristics of the; 		whole line. (defrecord gxLayoutOptions    (width :signed-long)   (flush :signed-long)   (just :signed-long)   (flags :signed-long)   (baselineRec (:pointer :gxlinebaselinerecord))   ); $SETC graphicsStreamTypesIncludes := 1(defconstant $gxNewObjectOpcode #x0)            ;  create new object (defconstant $gxSetDataOpcode #x40)             ;  add reference to current object (defconstant $gxSetDefaultOpcode #x80)          ;  replace current default with this object (defconstant $gxReservedOpcode #xC0)            ;  (may be used in future expansion) (defconstant $gxNextOpcode #xFF)                ;  used by currentOperand field to say opcode is coming ;  new object types (new object opcode) (defconstant $gxHeaderTypeOpcode #x0)           ;  byte following new object uses bottom 6 bits for type ;  gxShape types use values 1 (gxEmptyType) through 13 (gxPictureType) (defconstant $gxStyleTypeOpcode #x28)(defconstant $gxInkTypeOpcode #x29)(defconstant $gxTransformTypeOpcode #x2A)(defconstant $gxColorProfileTypeOpcode #x2B)(defconstant $gxColorSetTypeOpcode #x2C)(defconstant $gxTagTypeOpcode #x2D)(defconstant $gxBitImageOpcode #x2E)(defconstant $gxFontNameTypeOpcode #x2F)(defconstant $gxTrailerTypeOpcode #x3F);  fields of objects (set data opcodes) (defconstant $gxShapeAttributesOpcode 0)(defconstant $gxShapeTagOpcode 1)(defconstant $gxShapeFillOpcode 2)(defconstant $gxOmitPathPositionXMask #xC0)(defconstant $gxOmitPathPositionYMask #x30)(defconstant $gxOmitPathDeltaXMask #xC)(defconstant $gxOmitPathDeltaYMask #x3)(defconstant $gxOmitPathPositionXShift 6)(defconstant $gxOmitPathPositionYShift 4)(defconstant $gxOmitPathDeltaXShift 2)(defconstant $gxOmitPathDeltaYShift 0)(defconstant $gxOmitBitmapImageMask #xC0)(defconstant $gxOmitBitmapWidthMask #x30)(defconstant $gxOmitBitmapHeightMask #xC)(defconstant $gxOmitBitmapRowBytesMask #x3)(defconstant $gxOmitBitmapImageShift 6)(defconstant $gxOmitBitmapWidthShift 4)(defconstant $gxOmitBitmapHeightShift 2)(defconstant $gxOmitBitmapRowBytesShift 0)(defconstant $gxOmitBitmapPixelSizeMask #xC0)(defconstant $gxOmitBitmapSpaceMask #x30)(defconstant $gxOmitBitmapSetMask #xC)(defconstant $gxOmitBitmapProfileMask #x3)(defconstant $gxOmitBitmapPixelSizeShift 6)(defconstant $gxOmitBitmapSpaceShift 4)(defconstant $gxOmitBitmapSetShift 2)(defconstant $gxOmitBitmapProfileShift 0)(defconstant $gxOmitBitmapPositionXMask #xC0)(defconstant $gxOmitBitmapPositionYMask #x30)(defconstant $gxOmitBitmapPositionXShift 6)(defconstant $gxOmitBitmapPositionYShift 4)(defconstant $gxOmitBitImageRowBytesMask #xC0)(defconstant $gxOmitBitImageHeightMask #x30)(defconstant $gxOmitBitImageDataMask #x8)(defconstant $gxOmitBitImageRowBytesShift 6)(defconstant $gxOmitBitImageHeightShift 4)(defconstant $gxOmitBitImageDataShift 3)(defconstant $gxCopyBitImageBytesOpcode #x0)(defconstant $gxRepeatBitImageBytesOpcode #x40)(defconstant $gxLookupBitImageBytesOpcode #x80)(defconstant $gxRepeatBitImageScanOpcode #xC0)(defconstant $gxOmitTextCharactersMask #xC0)(defconstant $gxOmitTextPositionXMask #x30)(defconstant $gxOmitTextPositionYMask #xC)(defconstant $gxOmitTextDataMask #x2)(defconstant $gxOmitTextCharactersShift 6)(defconstant $gxOmitTextPositionXShift 4)(defconstant $gxOmitTextPositionYShift 2)(defconstant $gxOmitTextDataShift 1)(defconstant $gxOmitGlyphCharactersMask #xC0)(defconstant $gxOmitGlyphLengthMask #x30)(defconstant $gxOmitGlyphRunNumberMask #xC)(defconstant $gxOmitGlyphOnePositionMask #x2)(defconstant $gxOmitGlyphDataMask #x1)(defconstant $gxOmitGlyphCharactersShift 6)(defconstant $gxOmitGlyphLengthShift 4)(defconstant $gxOmitGlyphRunNumberShift 2)(defconstant $gxOmitGlyphOnePositionShift 1)(defconstant $gxOmitGlyphDataShift 0)(defconstant $gxOmitGlyphPositionsMask #xC0)(defconstant $gxOmitGlyphAdvancesMask #x20)(defconstant $gxOmitGlyphTangentsMask #x18)(defconstant $gxOmitGlyphRunsMask #x4)(defconstant $gxOmitGlyphStylesMask #x3)(defconstant $gxOmitGlyphPositionsShift 6)(defconstant $gxOmitGlyphAdvancesShift 5)(defconstant $gxOmitGlyphTangentsShift 3)(defconstant $gxOmitGlyphRunsShift 2)(defconstant $gxOmitGlyphStylesShift 0)(defconstant $gxOmitLayoutLengthMask #xC0)(defconstant $gxOmitLayoutPositionXMask #x30)(defconstant $gxOmitLayoutPositionYMask #xC)(defconstant $gxOmitLayoutDataMask #x2)(defconstant $gxOmitLayoutLengthShift 6)(defconstant $gxOmitLayoutPositionXShift 4)(defconstant $gxOmitLayoutPositionYShift 2)(defconstant $gxOmitLayoutDataShift 1)(defconstant $gxOmitLayoutWidthMask #xC0)(defconstant $gxOmitLayoutFlushMask #x30)(defconstant $gxOmitLayoutJustMask #xC)(defconstant $gxOmitLayoutOptionsMask #x3)(defconstant $gxOmitLayoutWidthShift 6)(defconstant $gxOmitLayoutFlushShift 4)(defconstant $gxOmitLayoutJustShift 2)(defconstant $gxOmitLayoutOptionsShift 0)(defconstant $gxOmitLayoutStyleRunNumberMask #xC0)(defconstant $gxOmitLayoutLevelRunNumberMask #x30)(defconstant $gxOmitLayoutHasBaselineMask #x8)(defconstant $gxOmitLayoutStyleRunsMask #x4)(defconstant $gxOmitLayoutStylesMask #x3)(defconstant $gxOmitLayoutStyleRunNumberShift 6)(defconstant $gxOmitLayoutLevelRunNumberShift 4)(defconstant $gxOmitLayoutHasBaselineShift 3)(defconstant $gxOmitLayoutStyleRunsShift 2)(defconstant $gxOmitLayoutStylesShift 0)(defconstant $gxOmitLayoutLevelRunsMask #x80)(defconstant $gxOmitLayoutLevelsMask #x40)(defconstant $gxOmitLayoutLevelRunsShift 7)(defconstant $gxOmitLayoutLevelsShift 6)(defconstant $gxInkAttributesOpcode 0)(defconstant $gxInkTagOpcode 1)(defconstant $gxInkColorOpcode 2)(defconstant $gxInkTransferModeOpcode 3)(defconstant $gxOmitColorsSpaceMask #xC0)(defconstant $gxOmitColorsProfileMask #x30)(defconstant $gxOmitColorsComponentsMask #xF)(defconstant $gxOmitColorsIndexMask #xC)(defconstant $gxOmitColorsIndexSetMask #x3)(defconstant $gxOmitColorsSpaceShift 6)(defconstant $gxOmitColorsProfileShift 4)(defconstant $gxOmitColorsComponentsShift 0)(defconstant $gxOmitColorsIndexShift 2)(defconstant $gxOmitColorsIndexSetShift 0)(defconstant $gxOmitTransferSpaceMask #xC0)(defconstant $gxOmitTransferSetMask #x30)(defconstant $gxOmitTransferProfileMask #xC)(defconstant $gxOmitTransferSpaceShift 6)(defconstant $gxOmitTransferSetShift 4)(defconstant $gxOmitTransferProfileShift 2)(defconstant $gxOmitTransferSourceMatrixMask #xC0)(defconstant $gxOmitTransferDeviceMatrixMask #x30)(defconstant $gxOmitTransferResultMatrixMask #xC)(defconstant $gxOmitTransferFlagsMask #x3)(defconstant $gxOmitTransferSourceMatrixShift 6)(defconstant $gxOmitTransferDeviceMatrixShift 4)(defconstant $gxOmitTransferResultMatrixShift 2)(defconstant $gxOmitTransferFlagsShift 0)(defconstant $gxOmitTransferComponentModeMask #x80)(defconstant $gxOmitTransferComponentFlagsMask #x40)(defconstant $gxOmitTransferComponentSourceMinimumMask #x30)(defconstant $gxOmitTransferComponentSourceMaximumMask #xC)(defconstant $gxOmitTransferComponentDeviceMinimumMask #x3)(defconstant $gxOmitTransferComponentModeShift 7)(defconstant $gxOmitTransferComponentFlagsShift 6)(defconstant $gxOmitTransferComponentSourceMinimumShift 4)(defconstant $gxOmitTransferComponentSourceMaximumShift 2)(defconstant $gxOmitTransferComponentDeviceMinimumShift 0)(defconstant $gxOmitTransferComponentDeviceMaximumMask #xC0)(defconstant $gxOmitTransferComponentClampMinimumMask #x30)(defconstant $gxOmitTransferComponentClampMaximumMask #xC)(defconstant $gxOmitTransferComponentOperandMask #x3)(defconstant $gxOmitTransferComponentDeviceMaximumShift 6)(defconstant $gxOmitTransferComponentClampMinimumShift 4)(defconstant $gxOmitTransferComponentClampMaximumShift 2)(defconstant $gxOmitTransferComponentOperandShift 0)(defconstant $gxStyleAttributesOpcode 0)(defconstant $gxStyleTagOpcode 1)(defconstant $gxStyleCurveErrorOpcode 2)(defconstant $gxStylePenOpcode 3)(defconstant $gxStyleJoinOpcode 4)(defconstant $gxStyleDashOpcode 5)(defconstant $gxStyleCapsOpcode 6)(defconstant $gxStylePatternOpcode 7)(defconstant $gxStyleTextAttributesOpcode 8)(defconstant $gxStyleTextSizeOpcode 9)(defconstant $gxStyleFontOpcode 10)(defconstant $gxStyleTextFaceOpcode 11)(defconstant $gxStylePlatformOpcode 12)(defconstant $gxStyleFontVariationsOpcode 13)(defconstant $gxStyleRunControlsOpcode 14)(defconstant $gxStyleRunPriorityJustOverrideOpcode 15)(defconstant $gxStyleRunGlyphJustOverridesOpcode 16)(defconstant $gxStyleRunGlyphSubstitutionsOpcode 17)(defconstant $gxStyleRunFeaturesOpcode 18)(defconstant $gxStyleRunKerningAdjustmentsOpcode 19)(defconstant $gxStyleJustificationOpcode 20)(defconstant $gxOmitDashAttributesMask #xC0)(defconstant $gxOmitDashShapeMask #x30)(defconstant $gxOmitDashAdvanceMask #xC)(defconstant $gxOmitDashPhaseMask #x3)(defconstant $gxOmitDashAttributesShift 6)(defconstant $gxOmitDashShapeShift 4)(defconstant $gxOmitDashAdvanceShift 2)(defconstant $gxOmitDashPhaseShift 0)(defconstant $gxOmitDashScaleMask #xC0)(defconstant $gxOmitDashScaleShift 6)(defconstant $gxOmitPatternAttributesMask #xC0)(defconstant $gxOmitPatternShapeMask #x30)(defconstant $gxOmitPatternUXMask #xC)(defconstant $gxOmitPatternUYMask #x3)(defconstant $gxOmitPatternAttributesShift 6)(defconstant $gxOmitPatternShapeShift 4)(defconstant $gxOmitPatternUXShift 2)(defconstant $gxOmitPatternUYShift 0)(defconstant $gxOmitPatternVXMask #xC0)(defconstant $gxOmitPatternVYMask #x30)(defconstant $gxOmitPatternVXShift 6)(defconstant $gxOmitPatternVYShift 4)(defconstant $gxOmitJoinAttributesMask #xC0)(defconstant $gxOmitJoinShapeMask #x30)(defconstant $gxOmitJoinMiterMask #xC)(defconstant $gxOmitJoinAttributesShift 6)(defconstant $gxOmitJoinShapeShift 4)(defconstant $gxOmitJoinMiterShift 2)(defconstant $gxOmitCapAttributesMask #xC0)(defconstant $gxOmitCapStartShapeMask #x30)(defconstant $gxOmitCapEndShapeMask #xC)(defconstant $gxOmitCapAttributesShift 6)(defconstant $gxOmitCapStartShapeShift 4)(defconstant $gxOmitCapEndShapeShift 2)(defconstant $gxOmitFaceLayersMask #xC0)(defconstant $gxOmitFaceMappingMask #x30)(defconstant $gxOmitFaceLayersShift 6)(defconstant $gxOmitFaceMappingShift 4)(defconstant $gxOmitFaceLayerFillMask #xC0)(defconstant $gxOmitFaceLayerFlagsMask #x30)(defconstant $gxOmitFaceLayerStyleMask #xC)(defconstant $gxOmitFaceLayerTransformMask #x3)(defconstant $gxOmitFaceLayerFillShift 6)(defconstant $gxOmitFaceLayerFlagsShift 4)(defconstant $gxOmitFaceLayerStyleShift 2)(defconstant $gxOmitFaceLayerTransformShift 0)(defconstant $gxOmitFaceLayerBoldXMask #xC0)(defconstant $gxOmitFaceLayerBoldYMask #x30)(defconstant $gxOmitFaceLayerBoldXShift 6)(defconstant $gxOmitFaceLayerBoldYShift 4)(defconstant $gxColorSetReservedOpcode 0)(defconstant $gxColorSetTagOpcode 1)(defconstant $gxColorProfileReservedOpcode 0)(defconstant $gxColorProfileTagOpcode 1)(defconstant $gxTransformReservedOpcode 0)(defconstant $gxTransformTagOpcode 1)(defconstant $gxTransformClipOpcode 2)(defconstant $gxTransformMappingOpcode 3)(defconstant $gxTransformPartMaskOpcode 4)(defconstant $gxTransformToleranceOpcode 5)(defconstant $gxTypeOpcode 0)(defconstant $gxSizeOpcode 1);  used by currentOperand when currentOperation is gxNextOpcode ; 	format of top byte:; xx yyyyyy	xx == 0x00, 0x40, 0x80, 0xC0: defines graphics operation (see gxGraphicsOperationOpcode); 			yyyyyy == size of operation in bytes; 			if (yyyyyy == 0), byte size follows. If byte following == 0, word size follows; if == 0, long follows; 			word and long, if present, are specified in high-endian order (first byte is largest magnitude); 			; format of byte following size specifiers, if any:; xx yyyyyy	xx == 0x00, 0x40, 0x80, 0xC0: defines compression level (0 == none, 0xC0 == most); 			exact method of compression is defined by type of data; 			yyyyyy == data type selector (0 to 63): see gxGraphicsNewOpcode, __DataOpcode; (defconstant $gxOpcodeShift 6)(defconstant $gxObjectSizeMask #x3F)(defconstant $gxCompressionShift 6)(defconstant $gxObjectTypeMask #x3F)(defconstant $gxBitImageOpcodeMask #xC0)(defconstant $gxBitImageCountMask #x3F)(defconstant $gxBitImageOpcodeShift 6)(defconstant $gxNoCompression 0)(defconstant $gxWordCompression 1)(defconstant $gxByteCompression 2)(defconstant $gxOmitCompression 3)(defconstant $gxCompressionMask #x3); 	the following structures define how primitives without a public geometry; 	are stored (their format mirrors that of the New call to create them)	(defrecord gxFlatFontName    ;;Changing field name from signed-byte to unsigned-byte to match C header (educated-guess)   (name :unsigned-byte)                        ;  unsigned char ;  gxFontName    ;;Changing field platform from signed-byte to unsigned-byte to match C header (educated-guess)   (platform :unsigned-byte)                    ;  unsigned char ;  gxFontPlatform    ;;Changing field script from signed-byte to unsigned-byte to match C header (educated-guess)   (script :unsigned-byte)                      ;  unsigned char ;  gxFontScript    ;;Changing field language from signed-byte to unsigned-byte to match C header (educated-guess)   (language :unsigned-byte)                    ;  unsigned char ;  gxFontLanguage    (length :signed-integer)                     ;  byte length    )(defconstant $gxFlatFontListItemTag :|flst|)(defrecord gxFlatFontListItem    (fontID (:pointer :pointer))                 ; ** if we get rid of this, remove #include "font types.h", above    ;;Changing field name from signed-byte to unsigned-byte to match C header (educated-guess)   (name :unsigned-byte)                        ;  unsigned char ;  gxFontName    ;;Changing field platform from signed-byte to unsigned-byte to match C header (educated-guess)   (platform :unsigned-byte)                    ;  unsigned char ;  gxFontPlatform    ;;Changing field script from signed-byte to unsigned-byte to match C header (educated-guess)   (script :unsigned-byte)                      ;  unsigned char ;  gxFontScript    ;;Changing field language from signed-byte to unsigned-byte to match C header (educated-guess)   (language :unsigned-byte)                    ;  unsigned char ;  gxFontLanguage    (length :signed-integer)                     ;  byte length of the name that follows    ;;Changing field glyphcount from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (glyphCount :unsigned-word)                  ;  CountFontGlyphs or 0 if gxFontGlyphsFlatten is false    ;;Changing field axiscount from signed-integer to unsigned-word to match C header (pretty-sure)   (axisCount :unsigned-word)                   ;  CountFontVariations or 0 if gxFontVariationsFlatten is false    ;;Changing field variationcount from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (variationCount :unsigned-word)              ;  number of bitsVariationPairs that follow the (optional) glyphBits    )(defrecord gxFlatFontList    (count :signed-long)   (items (:array :gxflatfontlistitem 1))   )(defrecord gxFlattenHeader    (version :signed-long)   ;;Changing field flatflags from signed-byte to unsigned-byte to match C header (educated-guess)   (flatFlags :unsigned-byte)                   ;  unsigned char    (padding :signed-byte)   )(defconstant $gxOmitPictureShapeMask #xC0)(defconstant $gxOmitOverrideStyleMask #x30)(defconstant $gxOmitOverrideInkMask #xC)(defconstant $gxOmitOverrideTransformMask #x3)(defconstant $gxOmitPictureShapeShift #x6)(defconstant $gxOmitOverrideStyleShift #x4)(defconstant $gxOmitOverrideInkShift #x2)(defconstant $gxOmitOverrideTransformShift #x0); $SETC gxSynonymTags := 1(defconstant $gxPostScriptTag :|post|)(defconstant $gxPostControlTag :|psct|)(defconstant $gxNoSave 1)                       ;  don't do save-restore around PS data (defrecord gxPostControl    (flags :signed-long)                         ;  PostScript state flags    )(defconstant $gxDashSynonymTag :|sdsh|)(defrecord gxDashSynonym    (size :signed-long)                          ;  number of elements in array    (dashLength (:array :signed-long 1))         ;  Array of dash lengths    )(defconstant $gxLineCapSynonymTag :|lcap|)(defconstant $gxButtCap 0)(defconstant $gxRoundCap 1)(defconstant $gxSquareCap 2)(defconstant $gxTriangleCap 3);  gxLine cap type (def-mactype :gxlinecapsynonym (find-mactype ':signed-long))(defconstant $gxCubicSynonymTag :|cubx|)(defconstant $gxIgnoreFlag #x0)                 ;  Ignore this word, get next one (defconstant $gxLineToFlag #x1)                 ;  Draw a gxLine to gxPoint following this flag (defconstant $gxCurveToFlag #x2)                ;  Draw a gxCurve through the 3 points following this flag (defconstant $gxMoveToFlag #x3)                 ;  Start a new contour at the gxPoint following this flag (defconstant $gxClosePathFlag #x4)              ;  Close the contour (defconstant $gxCubicInstructionMask #xF)       ;  low four bits are gxPoint instructions ;  Low four bits are instruction (moveto, lineto, curveto, closepath) (def-mactype :gxcubicsynonymflags (find-mactype ':signed-integer))(defconstant $gxPatternSynonymTag :|ptrn|)(defconstant $gxHatch 0)(defconstant $gxCrossHatch 1)(defrecord gxPatternSynonym    (patternType :signed-long)                   ;  one of the gxPatterns: gxHatch or gxCrossHatch    (angle :signed-long)                         ;  angle at which pattern is drawn    (spacing :signed-long)                       ;  distance between two parallel pattern lines    (thickness :signed-long)                     ;  thickness of the pattern    (anchorPoint :gxpoint)                       ;  gxPoint with with respect to which pattern position is calculated    ); $ALIGN RESET; $POP; $SETC UsingIncludes := GXTypesIncludes; $ENDC                                         ; __GXTYPES__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'GXTypes)