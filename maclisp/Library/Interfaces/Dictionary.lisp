(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Dictionary.p"; at Tuesday June 6,1995 2:07:40 pm.; ;  	File:		Dictionary.p;  ;  	Contains:	Dictionary Manager Interfaces;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __DICTIONARY__; $SETC __DICTIONARY__ := 1; $I+; $SETC DictionaryIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC; 	MixedMode.p													; 	OSUtils.p													; 		Memory.p												; $PUSH; $ALIGN MAC68K; $LibExport+;  Dictionary data insertion modes (defconstant $kInsert 0)                        ;  Only insert the input entry if there is nothing in the dictionary that matches the key. (defconstant $kReplace 1)                       ;  Only replace the entries which match the key with the input entry. (defconstant $kInsertOrReplace 2)               ;  Insert the entry if there is nothing in the dictionary which matches the key. ; 						   If there is already matched entries, replace the existing matched entries with the input entry. ;  This Was InsertMode (def-mactype :dictionarydatainsertmode (find-mactype ':signed-integer));  Key attribute constants (defconstant $kIsCaseSensitive #x10)            ;  case sensitive = 16		(defconstant $kIsNotDiacriticalSensitive #x20)  ;  diac not sensitive = 32	;  Registered attribute type constants.	(defconstant $kNoun -1)(defconstant $kVerb -2)(defconstant $kAdjective -3)(defconstant $kAdverb -4);  This Was AttributeType (def-mactype :dictionaryentryattribute (find-mactype ':signed-byte));  Dictionary information record (defrecord DictionaryInformation    (dictionaryFSSpec :fsspec)   (numberOfRecords :signed-long)   (currentGarbageSize :signed-long)   (script :signed-integer)   (maximumKeyLength :signed-integer)   (keyAttributes :signed-byte)   )(defrecord DictionaryAttributeTable    (datSize :unsigned-byte)   (datTable (:array :signed-byte 1 :packed))   )(def-mactype :dictionaryattributetableptr (find-mactype '(:pointer :dictionaryattributetable))); CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_InitializeDictionary" ((theFsspecPtr (:pointer :fsspec)) (maximumKeyLength :signed-integer) (keyAttributes :signed-byte) (script :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAA53 :d0 1280 theFsspecPtr maximumKeyLength keyAttributes script)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_OpenDictionary" ((theFsspecPtr (:pointer :fsspec)) (accessPermission :signed-byte) (dictionaryReference (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAA53 :d0 1281 theFsspecPtr accessPermission dictionaryReference)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_CloseDictionary" ((dictionaryReference :signed-long))   (:stack :signed-integer)   (:stack-trap #xAA53 :d0 514 dictionaryReference)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_InsertRecordToDictionary" ((dictionaryReference :signed-long) (key (:string 255)) (recordDataHandle :handle) (whichMode :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAA53 :d0 1795 dictionaryReference key recordDataHandle whichMode)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DeleteRecordFromDictionary" ((dictionaryReference :signed-long) (key (:string 255)))   (:stack :signed-integer)   (:stack-trap #xAA53 :d0 1028 dictionaryReference key)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_FindRecordInDictionary" ((dictionaryReference :signed-long) (key (:string 255)) (requestedAttributeTablePointer (:pointer :dictionaryattributetable)) (recordDataHandle :handle))   (:stack :signed-integer)   (:stack-trap #xAA53 :d0 2053 dictionaryReference key requestedAttributeTablePointer recordDataHandle)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_FindRecordByIndexInDictionary" ((dictionaryReference :signed-long) (recordIndex :signed-long) (requestedAttributeTablePointer (:pointer :dictionaryattributetable)) (recordKey (:pointer (:string 255))) (recordDataHandle :handle))   (:stack :signed-integer)   (:stack-trap #xAA53 :d0 2566 dictionaryReference recordIndex requestedAttributeTablePointer recordKey recordDataHandle)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetDictionaryInformation" ((dictionaryReference :signed-long) (theDictionaryInformation (:pointer :dictionaryinformation)))   (:stack :signed-integer)   (:stack-trap #xAA53 :d0 1031 dictionaryReference theDictionaryInformation)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_CompactDictionary" ((dictionaryReference :signed-long))   (:stack :signed-integer)   (:stack-trap #xAA53 :d0 520 dictionaryReference)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := DictionaryIncludes; $ENDC                                         ; __DICTIONARY__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Dictionary)