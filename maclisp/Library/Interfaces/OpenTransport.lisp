(in-package :TRAPS)             ; ;  	File:		OpenTransport.p;  ;  	Contains:	OpenTransport interfaces;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Modification History;;;;;; 03/11/97 bill  _OTGetIndexedPort is in "OTClientUtilLib";;;; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __OPENTRANSPORT__; $SETC __OPENTRANSPORT__ := 1; $I+; $SETC OpenTransportIncludes := UsingIncludes; $SETC UsingIncludes := 1; $SETC SystemSevenOrLater := 1; $IFC UNDEFINED __TYPES__; $I Types.p; $ENDC; 	ConditionalMacros.p											; $IFC UNDEFINED __MIXEDMODE__; $I MixedMode.p; $ENDC; $IFC UNDEFINED __STRINGS__; $I Strings.p; $ENDC(def-mactype :SIZE_T (find-mactype :SIGNED-LONG)); $SETC NULL := 0; $PUSH; $ALIGN MAC68K; $LibExport+(def-mactype :UCHAR_P (find-mactype :SIGNED-LONG))(def-mactype :USHORT_P (find-mactype :SIGNED-LONG))(def-mactype :SHORT_P (find-mactype :SIGNED-LONG))(def-mactype :CHAR_P (find-mactype :SIGNED-LONG))(def-mactype :BOOLEAN_P (find-mactype :SIGNED-LONG)); $IFC UNDEFINED OTKERNEL ; $SETC OTKERNEL := 0; $ENDC(defconstant $gestaltOpenTptVersions :|otvr|)(defconstant $gestaltOpenTpt :|otan|)(defconstant $gestaltOpenTptPresent #X1)(defconstant $gestaltOpenTptLoaded #X2)(defconstant $gestaltOpenTptAppleTalkPresent #X4)(defconstant $gestaltOpenTptAppleTalkLoaded #X8)(defconstant $gestaltOpenTptTCPPresent #X10)(defconstant $gestaltOpenTptTCPLoaded #X20)(defconstant $gestaltOpenTptIPXSPXPresent #X40)(defconstant $gestaltOpenTptIPXSPXLoaded #X80); ******************************************************************************; ** Some prefixes for shared libraries; *******************************************************************************(defconstant $kOTLibraryVersion "1.0")(defconstant $kOTLibraryPrefix "OTLib$")(defconstant $kOTModulePrefix "OTModl$")(defconstant $kOTKernelPrefix "OTKrnl$")(defconstant $kOTClientPrefix "OTClnt$")(defconstant $kOTSupportPrefix "OTSupp$"); ******************************************************************************; ** Some typedefs used by the OpenTransport system; *******************************************************************************; 	-------------------------------------------------------------------------; 	Miscellaneous typedefs; 	------------------------------------------------------------------------- (def-mactype :OTTIMEOUT (find-mactype :UINT32))(def-mactype :OTSEQUENCE (find-mactype :SIGNED-LONG))(def-mactype :OTNAMEID (find-mactype :SIGNED-LONG))(def-mactype :OTREASON (find-mactype :SINT32))(def-mactype :OTQLEN (find-mactype :UINT32))(def-mactype :OTCLIENT (find-mactype :POINTER))(def-mactype :OTCLIENTNAME (find-mactype :POINTER))(def-mactype :OTOPENFLAGS (find-mactype :UINT32))(defconstant $O_ASYNC #X1)(defconstant $O_NDELAY #X4)(defconstant $O_NONBLOCK #X4); 	-------------------------------------------------------------------------; 	StdCLib-style Error codes; 	------------------------------------------------------------------------- (def-mactype :OTUNIXERR (find-mactype :UINT16)); ; 		 * There may be some error code confusions with other compiler vendor header; 		 * files - However, these match both MPW and AIX definitions.; 		 * We undefine the #defined ones we know about so that we can put them; 		 * in an enum.; 		 (defconstant $EPERM 1)          ;  Permission denied					(defconstant $ENOENT 2)         ;  No such file or directory			(defconstant $ENORSRC 3)        ;  No such resource						(defconstant $EINTR 4)          ;  Interrupted system service			(defconstant $EIO 5)            ;  I/O error							(defconstant $ENXIO 6)          ;  No such device or address			(defconstant $EBADF 9)          ;  Bad file number						(defconstant $EAGAIN 11)        ;  Try operation again later			(defconstant $ENOMEM 12)        ;  Not enough space						(defconstant $EACCES 13)        ;  Permission denied					(defconstant $EFAULT 14)        ;  Bad address							(defconstant $EBUSY 16)         ;  Device or resource busy				(defconstant $EEXIST 17)        ;  File exists							(defconstant $ENODEV 19)        ;  No such device						(defconstant $EINVAL 22)        ;  Invalid argument						(defconstant $ENOTTY 25)        ;  Not a character device				(defconstant $EPIPE 32)         ;  Broken pipe							(defconstant $ERANGE 34)        ;  Math result not representable		(defconstant $EDEADLK 35)       ;  Call would block so was aborted		(defconstant $EWOULDBLOCK #$EDEADLK);  Or a deadlock would occur			(defconstant $EALREADY 37)(defconstant $ENOTSOCK 38)      ;  Socket operation on non-socket		(defconstant $EDESTADDRREQ 39)  ;  Destination address required			(defconstant $EMSGSIZE 40)      ;  Message too long						(defconstant $EPROTOTYPE 41)    ;  Protocol wrong type for socket		(defconstant $ENOPROTOOPT 42)   ;  Protocol not available				(defconstant $EPROTONOSUPPORT 43);  Protocol not supported				(defconstant $ESOCKTNOSUPPORT 44);  Socket type not supported			(defconstant $EOPNOTSUPP 45)    ;  Operation not supported on socket	(defconstant $EADDRINUSE 48)    ;  Address already in use				(defconstant $EADDRNOTAVAIL 49) ;  Can't assign requested address		(defconstant $ENETDOWN 50)      ;  Network is down						(defconstant $ENETUNREACH 51)   ;  Network is unreachable				(defconstant $ENETRESET 52)     ;  Network dropped connection on reset	(defconstant $ECONNABORTED 53)  ;  Software caused connection abort		(defconstant $ECONNRESET 54)    ;  Connection reset by peer				(defconstant $ENOBUFS 55)       ;  No buffer space available			(defconstant $EISCONN 56)       ;  Socket is already connected			(defconstant $ENOTCONN 57)      ;  Socket is not connected				(defconstant $ESHUTDOWN 58)     ;  Can't send after socket shutdown		(defconstant $ETOOMANYREFS 59)  ;  Too many references: can't splice	(defconstant $ETIMEDOUT 60)     ;  Connection timed out					(defconstant $ECONNREFUSED 61)  ;  Connection refused					(defconstant $EHOSTDOWN 64)     ;  Host is down							(defconstant $EHOSTUNREACH 65)  ;  No route to host						(defconstant $EPROTO 70)(defconstant $ETIME 71)(defconstant $ENOSR 72)(defconstant $EBADMSG 73)(defconstant $ECANCEL 74)(defconstant $ENOSTR 75)(defconstant $ENODATA 76)(defconstant $EINPROGRESS 77)(defconstant $ESRCH 78)(defconstant $ENOMSG 79)(defconstant $ELASTERRNO 79); 	-------------------------------------------------------------------------; 	Open Transport/XTI Error codes; 	------------------------------------------------------------------------- (def-mactype :OTXTIERR (find-mactype :UINT16))(defconstant $TSUCCESS 0)       ;  No Error occurred						(defconstant $TBADADDR 1)       ;  A Bad address was specified				(defconstant $TBADOPT 2)        ;  A Bad option was specified				(defconstant $TACCES 3)         ;  Missing access permission				(defconstant $TBADF 4)          ;  Bad provider reference					(defconstant $TNOADDR 5)        ;  No address was specified					(defconstant $TOUTSTATE 6)      ;  Call issued in wrong state				(defconstant $TBADSEQ 7)        ;  Sequence specified does not exist		(defconstant $TSYSERR 8)        ;  A system error occurred					(defconstant $TLOOK 9)          ;  An event occurred - call Look()			(defconstant $TBADDATA 10)      ;  An illegal amount of data was specified	(defconstant $TBUFOVFLW 11)     ;  Passed buffer not big enough				(defconstant $TFLOW 12)         ;  Provider is flow-controlled				(defconstant $TNODATA 13)       ;  No data available for reading			(defconstant $TNODIS 14)        ;  No disconnect indication available		(defconstant $TNOUDERR 15)      ;  No Unit Data Error indication available	(defconstant $TBADFLAG 16)      ;  A Bad flag value was supplied			(defconstant $TNOREL 17)        ;  No orderly release indication available	(defconstant $TNOTSUPPORT 18)   ;  Command is not supported					(defconstant $TSTATECHNG 19)    ;  State is changing - try again later		(defconstant $TNOSTRUCTYPE 20)  ;  Bad structure type requested for OTAlloc	(defconstant $TBADNAME 21)      ;  A bad endpoint name was supplied			(defconstant $TBADQLEN 22)      ;  A Bind to an in-use address with qlen > 0(defconstant $TADDRBUSY 23)     ;  Address requested is already in use		(defconstant $TINDOUT 24)       ;  Accept failed because of pending listen	(defconstant $TPROVMISMATCH 25) ;  Tried to accept on incompatible endpoint	(defconstant $TRESQLEN 26)(defconstant $TRESADDR 27)(defconstant $TQFULL 28)(defconstant $TPROTO 29)        ;  An unspecified provider error occurred	(defconstant $TBADSYNC 30)      ;  A synchronous call at interrupt time		(defconstant $TCANCELED 31)     ;  The command was cancelled				(defconstant $TLASTXTIERROR 31); 	-------------------------------------------------------------------------; 	Standard negative error codes conforming to both the Open Transport/XTI; 	errors and the Exxxxx StdCLib errors.; 	These are returned as OSStatus' from functions, and to the OTResult parameter; 	of a notification function or method.  However, OTResult may sometimes; 	contain other values depending on the notification.; 	------------------------------------------------------------------------- (def-mactype :OTRESULT (find-mactype :SINT32)); ; 		 * These map the Open Transport/XTI errors (the Txxxx error codes), and the; 		 * StdCLib Exxxx error codes into unique spaces in the Apple OSStatus space.; 		 (defconstant $kOTNoError 0)     ;  No Error occurred						(defconstant $kOTOutOfMemoryErr (+ 0 (- -3199 #$ENOMEM)))(defconstant $kOTNotFoundErr (+ 0 (- -3199 #$ENOENT)))(defconstant $kOTDuplicateFoundErr (+ 0 (- -3199 #$EEXIST))); ; 			 * Remapped XTI error codes; 			 (defconstant $kOTBadAddressErr (+ 0 (- -3149 #$TBADADDR)));  A Bad address was specified				(defconstant $kOTBadOptionErr (+ 0 (- -3149 #$TBADOPT)));  A Bad option was specified				(defconstant $kOTAccessErr (+ 0 (- -3149 #$TACCES)));  Missing access permission				(defconstant $kOTBadReferenceErr (+ 0 (- -3149 #$TBADF)));  Bad provider reference					(defconstant $kOTNoAddressErr (+ 0 (- -3149 #$TNOADDR)));  No address was specified					(defconstant $kOTOutStateErr (+ 0 (- -3149 #$TOUTSTATE)));  Call issued in wrong state				(defconstant $kOTBadSequenceErr (+ 0 (- -3149 #$TBADSEQ)));  Sequence specified does not exist		(defconstant $kOTSysErrorErr (+ 0 (- -3149 #$TSYSERR)));  A system error occurred					(defconstant $kOTLookErr (+ 0 (- -3149 #$TLOOK)));  An event occurred - call Look()			(defconstant $kOTBadDataErr (+ 0 (- -3149 #$TBADDATA)));  An illegal amount of data was specified	(defconstant $kOTBufferOverflowErr (+ 0 (- -3149 #$TBUFOVFLW)));  Passed buffer not big enough				(defconstant $kOTFlowErr (+ 0 (- -3149 #$TFLOW)));  Provider is flow-controlled				(defconstant $kOTNoDataErr (+ 0 (- -3149 #$TNODATA)));  No data available for reading			(defconstant $kOTNoDisconnectErr (+ 0 (- -3149 #$TNODIS)));  No disconnect indication available		(defconstant $kOTNoUDErrErr (+ 0 (- -3149 #$TNOUDERR)));  No Unit Data Error indication available	(defconstant $kOTBadFlagErr (+ 0 (- -3149 #$TBADFLAG)));  A Bad flag value was supplied			(defconstant $kOTNoReleaseErr (+ 0 (- -3149 #$TNOREL)));  No orderly release indication available	(defconstant $kOTNotSupportedErr (+ 0 (- -3149 #$TNOTSUPPORT)));  Command is not supported					(defconstant $kOTStateChangeErr (+ 0 (- -3149 #$TSTATECHNG)));  State is changing - try again later		(defconstant $kOTNoStructureTypeErr (+ 0 (- -3149 #$TNOSTRUCTYPE)));  Bad structure type requested for OTAlloc	(defconstant $kOTBadNameErr (+ 0 (- -3149 #$TBADNAME)));  A bad endpoint name was supplied			(defconstant $kOTBadQLenErr (+ 0 (- -3149 #$TBADQLEN)));  A Bind to an in-use addr with qlen > 0	(defconstant $kOTAddressBusyErr (+ 0 (- -3149 #$TADDRBUSY)));  Address requested is already in use		(defconstant $kOTIndOutErr (+ 0 (- -3149 #$TINDOUT)));  Accept failed because of pending listen	(defconstant $kOTProviderMismatchErr (+ 0 (- -3149 #$TPROVMISMATCH)));  Tried to accept on incompatible endpoint	(defconstant $kOTResQLenErr (+ 0 (- -3149 #$TRESQLEN)))(defconstant $kOTResAddressErr (+ 0 (- -3149 #$TRESADDR)))(defconstant $kOTQFullErr (+ 0 (- -3149 #$TQFULL)))(defconstant $kOTProtocolErr (+ 0 (- -3149 #$TPROTO)));  An unspecified provider error occurred	(defconstant $kOTBadSyncErr (+ 0 (- -3149 #$TBADSYNC)));  A synchronous call at interrupt time		(defconstant $kOTCanceledErr (+ 0 (- -3149 #$TCANCELED)));  The command was cancelled				; ; 			 * Remapped StdCLib error codes. %%% Remove ones we don't actually return.; 			 (defconstant $kEPERMErr (+ 0 (- -3199 #$EPERM)));  Permission denied					(defconstant $kENOENTErr (+ 0 (- -3199 #$ENOENT)));  No such file or directory			(defconstant $kENORSRCErr (+ 0 (- -3199 #$ENORSRC)));  No such resource						(defconstant $kEINTRErr (+ 0 (- -3199 #$EINTR)));  Interrupted system service			(defconstant $kEIOErr (+ 0 (- -3199 #$EIO)));  I/O error							(defconstant $kENXIOErr (+ 0 (- -3199 #$ENXIO)));  No such device or address			(defconstant $kEBADFErr (+ 0 (- -3199 #$EBADF)));  Bad file number						(defconstant $kEAGAINErr (+ 0 (- -3199 #$EAGAIN)));  Try operation again later			(defconstant $kENOMEMErr (+ 0 (- -3199 #$ENOMEM)));  Not enough space						(defconstant $kEACCESErr (+ 0 (- -3199 #$EACCES)));  Permission denied					(defconstant $kEFAULTErr (+ 0 (- -3199 #$EFAULT)));  Bad address							(defconstant $kEBUSYErr (+ 0 (- -3199 #$EBUSY)));  Device or resource busy				(defconstant $kEEXISTErr (+ 0 (- -3199 #$EEXIST)));  File exists							(defconstant $kENODEVErr (+ 0 (- -3199 #$ENODEV)));  No such device						(defconstant $kEINVALErr (+ 0 (- -3199 #$EINVAL)));  Invalid argument						(defconstant $kENOTTYErr (+ 0 (- -3199 #$ENOTTY)));  Not a character device				(defconstant $kEPIPEErr (+ 0 (- -3199 #$EPIPE)));  Broken pipe							(defconstant $kERANGEErr (+ 0 (- -3199 #$ERANGE)));  Message size too large for STREAM	(defconstant $kEWOULDBLOCKErr (+ 0 (- -3199 #$EWOULDBLOCK)));  Call would block, so was aborted		(defconstant $kEDEADLKErr (+ 0 (- -3199 #$EDEADLK)));  or a deadlock would occur			(defconstant $kEALREADYErr (+ 0 (- -3199 #$EALREADY)))(defconstant $kENOTSOCKErr (+ 0 (- -3199 #$ENOTSOCK)));  Socket operation on non-socket		(defconstant $kEDESTADDRREQErr (+ 0 (- -3199 #$EDESTADDRREQ)));  Destination address required			(defconstant $kEMSGSIZEErr (+ 0 (- -3199 #$EMSGSIZE)));  Message too long						(defconstant $kEPROTOTYPEErr (+ 0 (- -3199 #$EPROTOTYPE)));  Protocol wrong type for socket		(defconstant $kENOPROTOOPTErr (+ 0 (- -3199 #$ENOPROTOOPT)));  Protocol not available				(defconstant $kEPROTONOSUPPORTErr (+ 0 (- -3199 #$EPROTONOSUPPORT)));  Protocol not supported				(defconstant $kESOCKTNOSUPPORTErr (+ 0 (- -3199 #$ESOCKTNOSUPPORT)));  Socket type not supported			(defconstant $kEOPNOTSUPPErr (+ 0 (- -3199 #$EOPNOTSUPP)));  Operation not supported on socket	(defconstant $kEADDRINUSEErr (+ 0 (- -3199 #$EADDRINUSE)));  Address already in use				(defconstant $kEADDRNOTAVAILErr (+ 0 (- -3199 #$EADDRNOTAVAIL)));  Can't assign requested address		(defconstant $kENETDOWNErr (+ 0 (- -3199 #$ENETDOWN)));  Network is down						(defconstant $kENETUNREACHErr (+ 0 (- -3199 #$ENETUNREACH)));  Network is unreachable				(defconstant $kENETRESETErr (+ 0 (- -3199 #$ENETRESET)));  Network dropped connection on reset	(defconstant $kECONNABORTEDErr (+ 0 (- -3199 #$ECONNABORTED)));  Software caused connection abort		(defconstant $kECONNRESETErr (+ 0 (- -3199 #$ECONNRESET)));  Connection reset by peer				(defconstant $kENOBUFSErr (+ 0 (- -3199 #$ENOBUFS)));  No buffer space available			(defconstant $kEISCONNErr (+ 0 (- -3199 #$EISCONN)));  Socket is already connected			(defconstant $kENOTCONNErr (+ 0 (- -3199 #$ENOTCONN)));  Socket is not connected				(defconstant $kESHUTDOWNErr (+ 0 (- -3199 #$ESHUTDOWN)));  Can't send after socket shutdown		(defconstant $kETOOMANYREFSErr (+ 0 (- -3199 #$ETOOMANYREFS)));  Too many references: can't splice	(defconstant $kETIMEDOUTErr (+ 0 (- -3199 #$ETIMEDOUT)));  Connection timed out					(defconstant $kECONNREFUSEDErr (+ 0 (- -3199 #$ECONNREFUSED)));  Connection refused					(defconstant $kEHOSTDOWNErr (+ 0 (- -3199 #$EHOSTDOWN)));  Host is down							(defconstant $kEHOSTUNREACHErr (+ 0 (- -3199 #$EHOSTUNREACH)));  No route to host						(defconstant $kEPROTOErr (+ 0 (- -3199 #$EPROTO)))(defconstant $kETIMEErr (+ 0 (- -3199 #$ETIME)))(defconstant $kENOSRErr (+ 0 (- -3199 #$ENOSR)))(defconstant $kEBADMSGErr (+ 0 (- -3199 #$EBADMSG)))(defconstant $kECANCELErr (+ 0 (- -3199 #$ECANCEL)))(defconstant $kENOSTRErr (+ 0 (- -3199 #$ENOSTR)))(defconstant $kENODATAErr (+ 0 (- -3199 #$ENODATA)))(defconstant $kEINPROGRESSErr (+ 0 (- -3199 #$EINPROGRESS)))(defconstant $kESRCHErr (+ 0 (- -3199 #$ESRCH)))(defconstant $kENOMSGErr (+ 0 (- -3199 #$ENOMSG)))(defconstant $kOTClientNotInittedErr (+ 0 (- -3199 (+ #$ELASTERRNO 1))))(defconstant $kOTPortHasDiedErr (+ 0 (- -3199 (+ #$ELASTERRNO 2))))(defconstant $kOTPortWasEjectedErr (+ 0 (- -3199 (+ #$ELASTERRNO 3))))(defconstant $kOTBadConfigurationErr (+ 0 (- -3199 (+ #$ELASTERRNO 4))))(defconstant $kOTConfigurationChangedErr (+ 0 (- -3199 (+ #$ELASTERRNO 5))))(defconstant $kOTUserRequestedErr (+ 0 (- -3199 (+ #$ELASTERRNO 6))))(defconstant $kOTPortLostConnection (+ 0 (- -3199 (+ #$ELASTERRNO 7)))); 	-------------------------------------------------------------------------; 	OTAddressType - defines the address type for the OTAddress; 	------------------------------------------------------------------------- (def-mactype :OTADDRESSTYPE (find-mactype :UINT16))(defconstant $kOTGenericName 0); 	-------------------------------------------------------------------------; 	OTAddress - Generic OpenTransport protocol address; 	------------------------------------------------------------------------- (defrecord OTAddress    (fAddressType :UINT16)   (fAddress (:ARRAY :SINT8 1)) ;  UInt8    ); 	-------------------------------------------------------------------------; 	OTStructType - defines the structure type for the OTAlloc call; 	------------------------------------------------------------------------- (def-mactype :OTSTRUCTTYPE (find-mactype :UINT32))(defconstant $T_BIND 1)(defconstant $T_OPTMGMT 2)(defconstant $T_CALL 3)(defconstant $T_DIS 4)(defconstant $T_UNITDATA 5)(defconstant $T_UDERROR 6)(defconstant $T_INFO 7)(defconstant $T_REPLYDATA 8)(defconstant $T_REQUESTDATA 9)(defconstant $T_UNITREQUEST 10)(defconstant $T_UNITREPLY 11); 	-------------------------------------------------------------------------; 	OTFlags - flags for sending and receiving data; 	------------------------------------------------------------------------- (def-mactype :OTFLAGS (find-mactype :UINT32))(defconstant $T_MORE #X1)       ;  More data to come in message		(defconstant $T_EXPEDITED #X2)  ;  Data is expedited, if possible	(defconstant $T_ACKNOWLEDGED #X4);  Acknowledge transaction			(defconstant $T_PARTIALDATA #X8);  Partial data - more coming		(defconstant $T_NORECEIPT #X10) ;  No event on transaction done		; 	-------------------------------------------------------------------------; 	OTBand - a band value when reading priority messages; 	------------------------------------------------------------------------- (def-mactype :OTBAND (find-mactype :UINT32)); 	-------------------------------------------------------------------------; 	Reference values; 	------------------------------------------------------------------------- (def-mactype :STREAMREF (find-mactype :POINTER))(def-mactype :PROVIDERREF (find-mactype :POINTER))(def-mactype :ENDPOINTREF (find-mactype :POINTER))(def-mactype :MAPPERREF (find-mactype :POINTER))(defconstant $kOTInvalidRef 0)(defconstant $kOTInvalidStreamRef 0)(defconstant $kOTInvalidProviderRef 0)(defconstant $kOTInvalidEndpointRef 0)(defconstant $kOTInvalidMapperRef 0); 	-------------------------------------------------------------------------; 	OTEventCode values for Open Transport - These are the event codes that; 	are sent to notification routine during asynchronous processing.; 	------------------------------------------------------------------------- (def-mactype :OTEVENTCODE (find-mactype :UINT32)); ; 	 * Function definition to handle notification from providers; 	 (def-mactype :OTNOTIFYPROCPTR (find-mactype :POINTER));  PROCEDURE (contextPtr: UNIV Ptr; code: OTEventCode; result: OTResult; cookie: UNIV Ptr); ; ; 		 * These will be returned by the T_LOOK function, or will be returned; 		 * if asynchronous notification is used.; 		 (defconstant $T_LISTEN #X1)     ;  An connection request is available 	(defconstant $T_CONNECT #X2)    ;  Confirmation of a connect request	(defconstant $T_DATA #X4)       ;  Standard data is available			(defconstant $T_EXDATA #X8)     ;  Expedited data is available			(defconstant $T_DISCONNECT #X10);  A disconnect is available			(defconstant $T_ERROR #X20)     ;  obsolete/unused in library			(defconstant $T_UDERR #X40)     ;  A Unit Data Error has occurred		(defconstant $T_ORDREL #X80)    ;  An orderly release is available		(defconstant $T_GODATA #X100)   ;  Flow control lifted on standard data	(defconstant $T_GOEXDATA #X200) ;  Flow control lifted on expedited data(defconstant $T_REQUEST #X400)  ;  An Incoming request is available		(defconstant $T_REPLY #X800)    ;  An Incoming reply is available		(defconstant $T_PASSCON #X1000) ;  State is now T_DATAXFER				(defconstant $T_RESET #X2000)   ;  Protocol has been reset				; ; 		 * kPRIVATEEVENT + 1 through kPRIVATEEVENT + 0xffff; 		 *		may be used for any private event codes desired.; 		 *		All other event codes are reserved for Apple Computer, Inc.; 		 *		use only.; 		 (defconstant $kPRIVATEEVENT #X10000000); ; 		 * These are only returned if asynchronous notification is being used; 		 (defconstant $kCOMPLETEEVENT #X20000000)(defconstant $T_BINDCOMPLETE #X20000001);  Bind call is complete				(defconstant $T_UNBINDCOMPLETE #X20000002);  Unbind call is complete				(defconstant $T_ACCEPTCOMPLETE #X20000003);  Accept call is complete				(defconstant $T_REPLYCOMPLETE #X20000004);  SendReply call is complete			(defconstant $T_DISCONNECTCOMPLETE #X20000005);  Disconnect call is complete			(defconstant $T_OPTMGMTCOMPLETE #X20000006);  OptMgmt call is complete				(defconstant $T_OPENCOMPLETE #X20000007);  An Open call is complete				(defconstant $T_GETPROTADDRCOMPLETE #X20000008);  GetProtAddress call is complete		(defconstant $T_RESOLVEADDRCOMPLETE #X20000009);  A ResolveAddress call is complet		(defconstant $T_GETINFOCOMPLETE #X2000000A);  A GetInfo call is complete			(defconstant $T_SYNCCOMPLETE #X2000000B);  A Sync call is complete				(defconstant $T_MEMORYRELEASED #X2000000C);  No-copy memory was released			(defconstant $T_REGNAMECOMPLETE #X2000000D);  A RegisterName call is complete		(defconstant $T_DELNAMECOMPLETE #X2000000E);  A DeleteName call is complete		(defconstant $T_LKUPNAMECOMPLETE #X2000000F);  A LookupName call is complete		(defconstant $T_LKUPNAMERESULT #X20000010);  A LookupName is returning a name		(defconstant $kOTSyncIdleEvent #X20000011); Synchronous call Idle event; ; 		 * Events for streams - not normally seen by clients.; 		 (defconstant $kSTREAMEVENT #X21000000)(defconstant $kOTDisablePortEvent #X21000001);  this line deleted for release disk	(defconstant $kGetmsgEvent #X21000002);  A GetMessage call is complete		(defconstant $kStreamReadEvent #X21000003);  A Read call is complete				(defconstant $kStreamWriteEvent #X21000004);  A Write call is complete				(defconstant $kStreamIoctlEvent #X21000005);  An Ioctl call is complete			(defconstant $kStreamOpenEvent #X21000007);  An OpenStream call is complete		(defconstant $kPollEvent #X21000008);  A Poll call is complete				(defconstant $kSIGNALEVENT #X22000000);  A signal has arrived from the STREAM	(defconstant $kPROTOCOLEVENT #X23000000);  Some event from the protocols		(defconstant $kIMMEDIATEEVENT #X80000000);  This bit or'd in makes it "immediate"; ; 		 * These are miscellaneous events that could be sent to a provider; 		 (defconstant $kOTProviderIsDisconnected #X23000001);  Provider is temporarily off-line		(defconstant $kOTProviderIsReconnected #X23000002);  Provider is now back on-line			; ; 		 * These are system events sent to each provider.; 		 (defconstant $kOTProviderWillClose #X24000001);  Provider will close immediately		(defconstant $kOTProviderIsClosed #X24000002);  Provider was closed					; ; 		 * These are system events sent to registered clients; 		 	*; 			* result code is 0, cookie is the OTPortRef; 		 (defconstant $kOTPortDisabled #X25000001);  Port is now disabled					(defconstant $kOTPortEnabled #X25000002);  Port is now enabled					(defconstant $kOTPortOffline #X25000003);  Port is now offline						(defconstant $kOTPortOnline #X25000004);  Port is now online		; ;;	 * result is a reason for the close request, cookie is a pointer to the ;	 * OTPortCloseStruct structure.;(defconstant $kOTClosePortRequest #X25000005); Request to close/yield(defconstant $kOTYieldPortRequest #X25000005); Request to close/yield; 			 * A new port has been registered, cookie is the OTPortRef; 			 (defconstant $kOTNewPortRegistered #X25000006);  New port has been registered			; ; 		 * These are events sent to the configuration management infrastructure ; 		 (defconstant $kOTConfigurationChanged #X26000001);  Protocol configuration changed		(defconstant $kOTSystemSleep #X26000002)(defconstant $kOTSystemShutdown #X26000003)(defconstant $kOTSystemAwaken #X26000004)(defconstant $kOTSystemIdle #X26000005)(defconstant $kOTSystemSleepPrep #X26000006)(defconstant $kOTSystemShutdownPrep #X26000007)(defconstant $kOTSystemAwakenPrep #X26000008)(defconstant $SIGHUP 1)(defconstant $SIGURG 16)(defconstant $SIGPOLL 30); 	-------------------------------------------------------------------------; 	Option Management equates; 	------------------------------------------------------------------------- ; ; 	** The XTI Level number of a protocol; 	(def-mactype :OTXTILEVEL (find-mactype :UINT32))(defconstant $XTI_GENERIC #XFFFF);  level to match any protocol	; ; 	** The XTI name of a protocol option; 	(def-mactype :OTXTINAME (find-mactype :UINT32)); ; 		 * XTI names for options used with XTI_GENERIC above; 		 (defconstant $XTI_DEBUG #X1)(defconstant $XTI_LINGER #X80)(defconstant $XTI_RCVBUF #X1002)(defconstant $XTI_RCVLOWAT #X1004)(defconstant $XTI_SNDBUF #X1001)(defconstant $XTI_SNDLOWAT #X1003)(defconstant $XTI_PROTOTYPE #X1005); ; 		 * Generic options that can be used with any protocol; 		 * that understands them; 		 (defconstant $OPT_CHECKSUM #X600);  Set checksumming = UInt32 - 0 or 1)(defconstant $OPT_RETRYCNT #X601);  Set a retry counter = UInt32 (0 = infinite)(defconstant $OPT_INTERVAL #X602);  Set a retry interval = UInt32 milliseconds(defconstant $OPT_ENABLEEOM #X603);  Enable the EOM indication = UInt8 (0 or 1)(defconstant $OPT_SELFSEND #X604);  Enable Self-sending on broadcasts = UInt32 (0 or 1)(defconstant $OPT_SERVERSTATUS #X605);  Set Server Status (format is proto dependent)(defconstant $OPT_KEEPALIVE #X8);  See t_keepalive structure; ******************************************************************************; ** Definitions not associated with a Typedef; *******************************************************************************; 	-------------------------------------------------------------------------; 	IOCTL values for the OpenTransport system; 	------------------------------------------------------------------------- (defconstant $MIOC_STREAMIO "A");  Basic Stream ioctl() cmds - I_PUSH, I_LOOK, etc. (defconstant $MIOC_STRLOG "b")  ;  ioctl's for Mentat's log device (defconstant $MIOC_SAD "g")     ;  ioctl's for Mentat's sad module (defconstant $MIOC_ARP "h")     ;  ioctl's for Mentat's arp module (defconstant $MIOC_TCP "k")     ;  tcp.h ioctl's (defconstant $MIOC_DLPI "l")    ;  dlpi.h additions (defconstant $MIOC_OT "O")      ;  ioctls for Open Transport	(defconstant $MIOC_ATALK "T")   ;  ioctl's for AppleTalk	(defconstant $MIOC_SRL "U")     ;  ioctl's for Serial		(defconstant $MIOC_SRL_HIGH #X5400);  ioctls for Serial			'U' << 8 (defconstant $MIOC_OT_HIGH #X4F00);  ioctls for Open Transport	'O' << 8 (defconstant $MIOC_SIO_HIGH #X4100);  ioctls for StreamIO			'A' << 8 (defconstant $I_STR #X4108)(defconstant $I_FIND #X410B)(defconstant $I_LIST #X4116)(defconstant $I_OTGetMiscellaneousEvents #X4F01)(defconstant $I_OTSetFramingType #X4F02)(defconstant $kOTGetFramingValue #XFFFFFFFF)(defconstant $I_OTSetRawMode #X4F03)(defconstant $I_OTConnect #X4F04)(defconstant $I_OTDisconnect #X4F05)(defconstant $I_OTScript #X4F06);  ; 	 * structure for the I_OTScript Ioctl.; 	 (defrecord OTScriptInfo  (fScriptType :uint32)  (fTheScript :ptr)  (fScriptLength :uint32)  );  ; 	 * structure of ioctl data for I_STR IOCtls; 	 (defrecord strioctl    (ic_cmd :SIGNED-LONG)        ;  downstream command	   (ic_timout :SIGNED-LONG)     ;  ACK/NAK timeout		   (ic_len :SIGNED-LONG)        ;  length of data arg	   (ic_dp (:POINTER :CHARACTER));  ptr to data arg		   ); 	-------------------------------------------------------------------------; 	Maximum size of a provider name, and maximum size of a STREAM module name.; 	This module name is smaller than the maximum size of a TProvider to allow; 	for 4 characters of extra "minor number" information that might be ; 	potentially in a TProvider name; 	------------------------------------------------------------------------- (defconstant $kMaxModuleNameLength 31)(defconstant $kMaxModuleNameSize 32)(defconstant $kMaxProviderNameLength 35)(defconstant $kMaxProviderNameSize 36)(defconstant $kMaxSlotIDLength 7)(defconstant $kMaxSlotIDSize 8)(defconstant $kMaxResourceInfoLength 31)(defconstant $kMaxResourceInfoSize 32); 	-------------------------------------------------------------------------; 	These values are used in the "fields" parameter of the OTAlloc call; 	to define which fields of the structure should be allocated.; 	------------------------------------------------------------------------- (defconstant $T_ADDR #X1)(defconstant $T_OPT #X2)(defconstant $T_UDATA #X4)(defconstant $T_ALL #XFFFF); 	-------------------------------------------------------------------------; 	These are the potential values returned by OTGetEndpointState and OTSync; 	which represent the state of an endpoint; 	------------------------------------------------------------------------- (defconstant $T_UNINIT 0)       ;  addition to standard xti.h	(defconstant $T_UNBND 1)        ;  unbound						(defconstant $T_IDLE 2)         ;  idle							(defconstant $T_OUTCON 3)       ;  outgoing connection pending	(defconstant $T_INCON 4)        ;  incoming connection pending	(defconstant $T_DATAXFER 5)     ;  data transfer				(defconstant $T_OUTREL 6)       ;  outgoing orderly release		(defconstant $T_INREL 7)        ;  incoming orderly release		; 	-------------------------------------------------------------------------; 	Flags used by option management calls to request services; 	------------------------------------------------------------------------- (defconstant $T_NEGOTIATE #X4)(defconstant $T_CHECK #X8)(defconstant $T_DEFAULT #X10)(defconstant $T_CURRENT #X80); 	-------------------------------------------------------------------------; 	Flags used by option management calls to return results; 	------------------------------------------------------------------------- (defconstant $T_SUCCESS #X20)(defconstant $T_FAILURE #X40)(defconstant $T_PARTSUCCESS #X100)(defconstant $T_READONLY #X200)(defconstant $T_NOTSUPPORT #X400); 	-------------------------------------------------------------------------; 	General definitions; 	------------------------------------------------------------------------- (defconstant $T_YES 1)(defconstant $T_NO 0)(defconstant $T_UNUSED -1)(defconstant $T_NULL 0)(defconstant $T_ABSREQ #X8000); 	-------------------------------------------------------------------------; 	Option Management definitions; 	------------------------------------------------------------------------- (defconstant $T_UNSPEC (+ 0 (- #XFFFFFFFF 2)))(defconstant $T_ALLOPT 0); ;  This macro will align return the value of "len", rounded up to the next;  4-byte boundary.; (defrecord OTConfiguration    )(def-mactype :OTCONFIGURATIONPTR (find-mactype :POINTER))(defrecord t_kpalive    (kp_onoff :SIGNED-LONG)      ;  option on/off		   (kp_timeout :SIGNED-LONG)    ;  timeout in minutes	   ); ; 	 * Structure used with XTI_LINGER option; 	 (defrecord t_linger    (l_onoff :SIGNED-LONG)       ;  option on/off    (l_linger :SIGNED-LONG)      ;  linger time    ); 	-------------------------------------------------------------------------; 	TEndpointInfo - this structure is returned from the GetEndpointInfo call; 	and contains information about an endpoint; 	------------------------------------------------------------------------- (defrecord TEndpointInfo    (addr :SINT32)               ;  Maximum size of an address			   (options :SINT32)            ;  Maximum size of options				   (tsdu :SINT32)               ;  Standard data transmit unit size		   (etsdu :SINT32)              ;  Expedited data transmit unit size	   (connect :SINT32)            ;  Maximum data size on connect			   (discon :SINT32)             ;  Maximum data size on disconnect		   (servtype :UINT32)           ;  service type (see below for values)	   (flags :UINT32)              ;  Flags (see below for values)			   ); ; 	 * Values returned in servtype field of TEndpointInfo; 	 (defconstant $T_COTS 1)         ;  Connection-mode service								(defconstant $T_COTS_ORD 2)     ;  Connection service with orderly release				(defconstant $T_CLTS 3)         ;  Connectionless-mode service							(defconstant $T_TRANS 5)        ;  Connection-mode transaction service					(defconstant $T_TRANS_ORD 6)    ;  Connection transaction service with orderly release	(defconstant $T_TRANS_CLTS 7)   ;  Connectionless transaction service					; ; 	 * Values returned in flags field of TEndpointInfo; 	 (defconstant $T_SENDZERO #X1)   ;  supports 0-length TSDU's			(defconstant $T_XPG4_1 #X2)     ;  supports the GetProtAddress call	(defconstant $T_CAN_SUPPORT_MDATA #X10000000);  support M_DATAs on packet protocols	(defconstant $T_CAN_RESOLVE_ADDR #X40000000);  Supports ResolveAddress call			(defconstant $T_CAN_SUPPLY_MIB #X20000000);  Supports SNMP MIB data				; ; 	 * Values returned in tsdu, etsdu, connect, and discon fields of TEndpointInfo; 	 (defconstant $T_INFINITE -1)    ;  supports infinit amounts of data		(defconstant $T_INVALID -2)     ;  Does not support data transmission	; 	-------------------------------------------------------------------------; 	OTPortRecord; 	------------------------------------------------------------------------- ; ; 	 * Unique identifier for a port; 	 (def-mactype :OTPORTREF (find-mactype :UINT32)); ; 	 * A couple of special values for the "port type" in an OTPortRef.; 	 * See OpenTptLinks.h for other values.; 	 * The device kOTPseudoDevice is used where no other defined; 	 * device type will work.; 	 (defconstant $kOTNoDeviceType 0)(defconstant $kOTPseudoDevice 1023)(defconstant $kOTLastDeviceIndex 1022)(defconstant $kOTLastSlotNumber 255)(defconstant $kOTLastOtherNumber 255); ; 	 * kMaxPortNameLength is the maximum size allowed to define; 	 * a port; 	 (defconstant $kMaxPortNameLength 35)(defconstant $kMaxPortNameSize 36)(defconstant $kOTInvalidPortRef 0); ; 	 * Equates for the legal Bus-type values; 	 (defconstant $kOTUnknownBusPort 0)(defconstant $kOTMotherboardBus 1)(defconstant $kOTNuBus 2)(defconstant $kOTPCIBus 3)(defconstant $kOTGeoPort 4)(defconstant $kOTPCCardBus 5)(defconstant $kOTFireWireBus 6)(defconstant $kOTLastBusIndex 15)(defrecord OTPortCloseStruct    (fPortRef :UINT32)           ;  The port requested to be closed.   (fTheProvider :POINTER)      ;  The provider using the port.   (fDenyReason :OSSTATUS)      ;  Set to a negative number to deny the request   )(deftrap ("_OTCreatePortRef" ("OTUtilityLib")) ((bustype :byteparameter) (devtype :uint16) (slot :uint16) (other :uint16))   (:no-trap :uint32)   (:no-trap))(deftrap ("_OTGetDeviceTypeFromPortRef" ("OTUtilityLib")) ((ref :uint32))   (:no-trap :uint16)   (:no-trap))(deftrap ("_OTGetBusTypeFromPortRef" ("OTUtilityLib")) ((ref :uint32))   (:no-trap :uint16)   (:no-trap))(deftrap ("_OTGetSlotFromPortRef" ("OTUtilityLib")) ((ref :uint32) (other (:pointer :uint16)))   (:no-trap :uint16)   (:no-trap))(deftrap ("_OTSetDeviceTypeInPortRef" ("OTUtilityLib")) ((ref :uint32) (devtype :uint16))   (:no-trap :uint32)   (:no-trap))(deftrap ("_OTSetBusTypeInPortRef" ("OTUtilityLib")) ((ref :uint32) (bustype :byteparameter))   (:no-trap :uint32)   (:no-trap))(defrecord OTPortRecord    (fRef :UINT32)   (fPortFlags :UINT32)   (fInfoFlags :UINT32)   (fCapabilities :UINT32)   (fNumChildPorts :SIGNED-LONG)   (fChildPorts (:POINTER :UINT32))   (fPortName (:ARRAY :CHARACTER 36))   (fModuleName (:ARRAY :CHARACTER 31))   (fSlotID (:ARRAY :CHARACTER 8))   (fResourceInfo (:ARRAY :CHARACTER 31))   (fReserved (:ARRAY :CHARACTER 164))   ); ; 	 * Values for the fInfoFlags field of OTPortRecord; 	 (defconstant $kOTPortIsDLPI #X1)(defconstant $kOTPortIsTPI #X2)(defconstant $kOTPortCanYield #X4)(defconstant $kOTPortCanArbitrate #x8)(defconstant $kOTPortIsTransitory #x10)(defconstant $kOTPortAutoConnects #x20)(defconstant $kOTPortIsSystemRegistered #X4000)(defconstant $kOTPortIsPrivate #X8000)(defconstant $kOTPortIsAlias #X80000000); ; 	 * Values for the fPortFlags field of TPortRecord; 	 * If no bits are set, the port is currently inactive.; 	 * kOTPortIsDisabled and kOTPortIsUnavailable may be set; 	 * at the same time.  ; 	 (defconstant $kOTPortIsActive #X1)(defconstant $kOTPortIsDisabled #X2)(defconstant $kOTPortIsUnavailable #X4)(defconstant $kOTPortIsOffline #X8); 	-------------------------------------------------------------------------; 	TOptionHeader and TOption; 	; 	This structure describes the contents of a single option in a buffer; 	------------------------------------------------------------------------- (defrecord TOptionHeader    (len :UINT32)                ;  total length of option				;  = sizeof(TOptionHeader) + length		; 	 of option value in bytes			   (level :UINT32)              ;  protocol affected					   (optName :UINT32)            ;  option name							   (status :UINT32)             ;  status value							   )(defrecord TOption    (len :UINT32)                ;  total length of option				;  = sizeof(TOption) + length	; 	 of option value in bytes			   (level :UINT32)              ;  protocol affected					   (optName :UINT32)            ;  option name							   (status :UINT32)             ;  status value							   (value (:ARRAY :UINT32 1))   ;  data goes here						   )(defconstant $kOTOptionHeaderSize (RECORD-LENGTH TOPTIONHEADER))(defconstant $kOTBooleanOptionDataSize (RECORD-LENGTH UINT32))(defconstant $kOTBooleanOptionSize (+ #$KOTOPTIONHEADERSIZE #$KOTBOOLEANOPTIONDATASIZE))(defconstant $kOTOneByteOptionSize (+ #$KOTOPTIONHEADERSIZE 1))(defconstant $kOTTwoByteOptionSize (+ #$KOTOPTIONHEADERSIZE 2))(defconstant $kOTFourByteOptionSize (+ #$KOTOPTIONHEADERSIZE (RECORD-LENGTH UINT32))); 	-------------------------------------------------------------------------; 	PollRef structure; 	; 	This is used with the OTStreamPoll function; 	------------------------------------------------------------------------- (defrecord PollRef    (filler :SIGNED-LONG)   (events :SIGNED-INTEGER)   (revents :SIGNED-INTEGER)   (ref :POINTER)   ); 	-------------------------------------------------------------------------; 	OTClientList structure; 	; 	This is used with the OTYieldPortRequest function.; 	------------------------------------------------------------------------- (defrecord OTClientList    (fNumClients :SIGNED-LONG)   (fBuffer (:ARRAY :SINT8 4))  ;  UInt8    ); 	-------------------------------------------------------------------------; 	OTData; 	; 	This is a structure that may be used in a TNetbuf or netbuf to send; 	non-contiguous data.  Set the 'len' field of the netbuf to the; 	constant kNetbufDataIsOTData to signal that the 'buf' field of the; 	netbuf actually points to one of these structures instead of a; 	memory buffer.; 	------------------------------------------------------------------------- (defrecord OTData    (fNext :POINTER)   (fData :POINTER)   (fLen :SIGNED-LONG)   )(defconstant $kNetbufDataIsOTData #XFFFFFFFE); 	-------------------------------------------------------------------------; 	OTBuffer; ; 	This is the structure that is used for no-copy receives.; 	When you are done with it, you must call the OTReleaseBuffer function.; 	For best performance, you need to call OTReleaseBuffer quickly.  Only; 	data netbufs may use this - no netbufs for addresses or options, or the like.; 	------------------------------------------------------------------------- (defrecord OTBuffer    (fLink :POINTER)             ;  b_next & b_prev   (fLink2 :POINTER)   (fNext (:POINTER :OTBUFFER)) ;  b_cont   (fData (:POINTER :UINT8))    ;  b_rptr   (fLen :SIGNED-LONG)          ;  b_wptr   (fSave :POINTER)             ;  b_datap   (fBand :SINT8)               ;  UInt8 ;  b_band   (fType :SINT8)               ;  UInt8 ;  b_pad1   (fPad1 :SINT8)               ;  UInt8    (fFlags :SINT8)              ;  UInt8 ;  b_flag   ); 	-------------------------------------------------------------------------; 	OTBufferInfo; 	; 	This structure is used with OTReadBuffer to keep track of where you; 	are in the buffer, since the OTBuffer is "read-only".; 	------------------------------------------------------------------------- (defrecord OTBufferInfo    (fBuffer (:POINTER :OTBUFFER))   (fOffset :SIGNED-LONG)   (fPad :SINT8)                ;  UInt8    (fFiller :SINT8)             ;  UInt8    )(defconstant $kOTNetbufDataIsOTBufferStar #XFFFFFFFD); 	-------------------------------------------------------------------------; 	TNetbuf; 	; 	This structure is the basic structure used to pass data back and forth; 	between the Open Transport protocols and their clients; 	------------------------------------------------------------------------- (defrecord TNetbuf    (maxlen :SIGNED-LONG)   (len :SIGNED-LONG)   (buf :POINTER)   ); 	-------------------------------------------------------------------------; 	TBind; 	; 	Structure passed to GetProtAddress, ResolveAddress and Bind; 	------------------------------------------------------------------------- (defrecord TBind    (addr :TNETBUF)   (qlen :UINT32)   )(def-mactype :TBINDPTR (find-mactype :POINTER)); 	-------------------------------------------------------------------------; 	TDiscon; 	; 	Structure passed to RcvDisconnect to find out additional information; 	about the disconnect; 	------------------------------------------------------------------------- (defrecord TDiscon    (udata :TNETBUF)   (reason :SINT32)   (sequence :SIGNED-LONG)   )(def-mactype :TDISCONPTR (find-mactype :POINTER)); 	-------------------------------------------------------------------------; 	TCall; 	; 	Structure passed to Connect, RcvConnect, Listen, Accept, and; 	SndDisconnect to describe the connection.; 	------------------------------------------------------------------------- (defrecord TCall    (addr :TNETBUF)   (opt :TNETBUF)   (udata :TNETBUF)   (sequence :SIGNED-LONG)   ); 	-------------------------------------------------------------------------; 	TUnitData; 	; 	Structure passed to SndUData and RcvUData to describe the datagram; 	------------------------------------------------------------------------- (defrecord TUnitData    (addr :TNETBUF)   (opt :TNETBUF)   (udata :TNETBUF)   ); 	-------------------------------------------------------------------------; 	TUDErr; 	; 	Structure passed to RcvUDErr to find out about a datagram error; 	------------------------------------------------------------------------- (defrecord TUDErr    (addr :TNETBUF)   (opt :TNETBUF)   (error :SINT32)   ); 	-------------------------------------------------------------------------; 	TOptMgmt; 	; 	Structure passed to the OptionManagement call to read or set protocol; 	options.; 	------------------------------------------------------------------------- (defrecord TOptMgmt    (opt :TNETBUF)   (flags :UINT32)   ); 	-------------------------------------------------------------------------; 	TRequest; 	; 	Structure passed to SndRequest and RcvRequest that contains the information; 	about the request; 	------------------------------------------------------------------------- (defrecord TRequest    (data :TNETBUF)   (opt :TNETBUF)   (sequence :SIGNED-LONG)   ); 	-------------------------------------------------------------------------; 	TReply; 	; 	Structure passed to SndReply to send a reply to an incoming request; 	------------------------------------------------------------------------- (defrecord TReply    (data :TNETBUF)   (opt :TNETBUF)   (sequence :SIGNED-LONG)   ); 	-------------------------------------------------------------------------; 	TUnitRequest; 	; 	Structure passed to SndURequest and RcvURequest that contains the information; 	about the request; 	------------------------------------------------------------------------- (defrecord TUnitRequest    (addr :TNETBUF)   (opt :TNETBUF)   (udata :TNETBUF)   (sequence :SIGNED-LONG)   ); 	-------------------------------------------------------------------------; 	TUnitReply; 	; 	Structure passed to SndUReply to send a reply to an incoming request; 	------------------------------------------------------------------------- (defrecord TUnitReply    (opt :TNETBUF)   (udata :TNETBUF)   (sequence :SIGNED-LONG)   ); 	-------------------------------------------------------------------------; 	TRegisterRequest; 	------------------------------------------------------------------------- (defrecord TRegisterRequest    (name :TNETBUF)   (addr :TNETBUF)   (flags :UINT32)   ); 	-------------------------------------------------------------------------; 	TRegisterReply; 	------------------------------------------------------------------------- (defrecord TRegisterReply    (addr :TNETBUF)   (nameid :SIGNED-LONG)   ); 	-------------------------------------------------------------------------; 	TLookupRequest; 	------------------------------------------------------------------------- (defrecord TLookupRequest    (name :TNETBUF)   (addr :TNETBUF)   (maxcnt :UINT32)   (timeout :UINT32)   (flags :UINT32)   ); 	-------------------------------------------------------------------------; 	TLookupReply ; 	; 	Structure used by Mapper protocols to return the results of name Lookups; 	------------------------------------------------------------------------- ; ; 	 * This is the structure returned by the mapper for names that are; 	 * looked up.  ; 	 (defrecord TLookupBuffer    (fAddressLength :UINT16)   (fNameLength :UINT16)   (fAddressBuffer (:ARRAY :SINT8 1));  UInt8    )(defrecord TLookupReply    (names :TNETBUF)   (rspcount :UINT32)   ); ******************************************************************************; ** C Interfaces to Open Transport; *******************************************************************************; 	-------------------------------------------------------------------------; 	Initializing and shutting down Open Transport; 	------------------------------------------------------------------------- ; $IFC NOT OTKERNEL #|Some of these things need to be implemented as glue code; they aren'tin the OT CFM/ASLM libraries.|#(deftrap  ("_InitOpenTransport" ("OpenTransportSupport")) nil   (:no-trap :osstatus)   (:no-trap))(deftrap  ("_InitOpenTransportUtilities" ("OpenTransportSupport")) nil   (:no-trap :osstatus)   (:no-trap))(deftrap  ("_CloseOpenTransport" ("OpenTransportSupport")) nil    nil   (:no-trap))(deftrap  ("_OTRegisterAsClient" ("OpenTransportSupport")) ((name (:pointer :uint8)) (proc :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTUnregisterAsClient" ("OpenTransportSupport")) nil   (:no-trap :osstatus)   (:no-trap ))(deftrap ("_OTEnterInterrupt" ("OTUtilityLib")) nil   nil   (:no-trap))(deftrap ("_OTLeaveInterrupt" ("OTUtilityLib")) nil   nil   (:no-trap))(def-mactype :OTPROCESSPROCPTR (find-mactype :POINTER));  PROCEDURE (arg: UNIV Ptr); (deftrap ("_OTCreateDeferredTask" ("OTKernelUtilLib")) ((proc :pointer) (arg :pointer))   (:no-trap :signed-long)   (:no-trap))(deftrap ("_OTScheduleDeferredTask" ("OTUtilityLib")) ((dtcookie :signed-long))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTScheduleInterruptTask" ("OTUtilityLib")) ((dtcookie :signed-long))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTDestroyDeferredTask" ("OTUtilityLib")) ((dtcookie :signed-long))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTCreateSystemTask" ("OpenTransportSupport")) ((proc :pointer) (arg :pointer))   (:no-trap :signed-long)   (:no-trap))(deftrap ("_OTDestroySystemTask" ("OTUtilityLib")) ((stcookie :signed-long))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTScheduleSystemTask" ("OTUtilityLib")) ((stcookie :signed-long))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTCancelSystemTask" ("OTUtilityLib")) ((stcookie :signed-long))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTCanMakeSyncCall" ("OTUtilityLib")) nil   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTIsAtInterruptLevel" ("OTUtilityLib")) nil   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTCanLoadLibraries" ("OTUtilityLib")) nil   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTGetIndexedPort" ("OTClientUtilLib")) ((record1 (:pointer :otportrecord)) (index :signed-long))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTFindPort" ("OTClientUtilLib"))((record1 (:pointer :otportrecord)) (portname :constcstringptr))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTFindPortByRef" ("OTClientUtilLib")) ((record1 (:pointer :otportrecord)) (ref :uint32))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTRegisterPort" ("OTClientUtilLib")) ((record1 (:pointer :otportrecord)) (ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTUnRegisterPort" ("OTClientUtilLib")) ((portname :constcstringptr) (cookieptrptr :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTChangePortState" ("OTClientUtilLib")) ((ref :uint32) (thechange :oteventcode) (why :otresult))   (:no-trap :osstatus)   (:no-trap))(defrecord strbuf    (maxlen :SIGNED-LONG)        ;  max buffer length    (len :SIGNED-LONG)           ;  length of data    (buf (:POINTER :CHARACTER))  ;  pointer to buffer    ); $IFC NOT OTKERNEL (deftrap ("_OTCloseProvider" ("OpenTransportSupport"))((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTTransferProviderOwnership" ("OpenTransportSupport"))((ref :pointer) (prevowner :pointer) (errptr (:pointer :osstatus)))   (:no-trap :pointer)   (:no-trap))(deftrap ("_OTWhoAmI" ("OpenTransportSupport")) nil   (:no-trap :pointer)   (:no-trap))(deftrap ("_OTGetProviderPortRef" ("OTClientLib"))((ref :pointer))   (:no-trap :uint32)   (:no-trap))(deftrap ("_OTIOCtl" ("OTClientLib")) ((ref :pointer) (cmd :uint32) (data :pointer))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTGetMessage" ("OTClientLib")) ((ref :pointer) (ctlbuf (:pointer :strbuf)) (databuf (:pointer :strbuf)) (flagptr (:pointer :uint32)))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTGetPriorityMessage" ("OTClientLib")) ((ref :pointer) (ctlbuf (:pointer :strbuf)) (databuf (:pointer :strbuf)) (bandptr (:pointer :uint32)) (flagptr (:pointer :uint32)))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTPutMessage" ("OTClientLib")) ((ref :pointer) (ctlbuf (:pointer :strbuf)) (databuf (:pointer :strbuf)) (flags :uint32))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTPutPriorityMessage" ("OTClientLib")) ((ref :pointer) (ctlbuf (:pointer :strbuf)) (databuf (:pointer :strbuf)) (band :uint32) (flags :uint32))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTSetAsynchronous" ("OTClientLib")) ((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTSetSynchronous" ("OTClientLib")) ((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTIsSynchronous" ("OTClientLib")) ((ref :pointer))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTSetBlocking" ("OTClientLib")) ((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTSetNonBlocking" ("OTClientLib")) ((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTIsBlocking" ("OTClientLib")) ((ref :pointer))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTInstallNotifier" ("OTClientLib")) ((ref :pointer) (proc :pointer) (contextptr :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTUseSyncIdleEvents" ("OTClientLib")) ((ref :pointer) (useevents :boolean))  (:no-trap :osstatus)  (:no-trap))(deftrap ("_OTRemoveNotifier" ("OTClientLib")) ((ref :pointer))   nil   (:no-trap))(deftrap ("_OTLeaveNotifier" ("OTClientLib")) ((ref :pointer))   nil   (:no-trap))(deftrap ("_OTEnterNotifier" ("OTClientLib")) ((ref :pointer))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTAckSends" ("OTClientLib")) ((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTDontAckSends" ("OTClientLib")) ((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTIsAckingSends" ("OTClientLib")) ((ref :pointer))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTCancelSynchronousCalls" ("OTClientLib")) ((ref :pointer) (err :osstatus))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTOpenEndpoint" ("OpenTransportSupport"))((config (:pointer :otconfiguration)) (oflag :uint32) (info (:pointer :tendpointinfo)) (err (:pointer :osstatus)))   (:no-trap :pointer)   (:no-trap))(deftrap ("_OTAsyncOpenEndpoint" ("OpenTransportSupport"))((config (:pointer :otconfiguration)) (oflag :uint32) (info (:pointer :tendpointinfo)) (proc :pointer) (contextptr :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTGetEndpointInfo" ("OTClientLib")) ((ref :pointer) (info (:pointer :tendpointinfo)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTGetEndpointState" ("OTClientLib")) ((ref :pointer))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTLook" ("OTClientLib")) ((ref :pointer))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTSync" ("OTClientLib")) ((ref :pointer))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTCountDataBytes" ("OTClientLib")) ((ref :pointer) (countptr (:pointer :signed-long)))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTGetProtAddress" ("OTClientLib")) ((ref :pointer) (boundaddr (:pointer :tbind)) (peeraddr (:pointer :tbind)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTResolveAddress" ("OTClientLib")) ((ref :pointer) (reqaddr (:pointer :tbind)) (retaddr (:pointer :tbind)) (timeout :uint32))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTAlloc" ("OpenTransportSupport")) ((ref :pointer) (structtype :uint32) (fields :uint32) (err (:pointer :osstatus)))   (:no-trap :pointer)   (:no-trap))(deftrap ("_OTFree" ("OTClientLib")) ((ptr :pointer) (structtype :uint32))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTOptionManagement" ("OTClientLib")) ((ref :pointer) (req (:pointer :toptmgmt)) (ret (:pointer :toptmgmt)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTBind" ("OTClientLib")) ((ref :pointer) (reqaddr (:pointer :tbind)) (retaddr (:pointer :tbind)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTUnbind" ("OTClientLib")) ((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTConnect" ("OTClientLib")) ((ref :pointer) (sndcall (:pointer :tcall)) (rcvcall (:pointer :tcall)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvConnect" ("OTClientLib")) ((ref :pointer) (call (:pointer :tcall)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTListen" ("OTClientLib")) ((ref :pointer) (call (:pointer :tcall)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTAccept" ("OTClientLib")) ((ref :pointer) (resref :pointer) (call (:pointer :tcall)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTSndDisconnect" ("OTClientLib")) ((ref :pointer) (call (:pointer :tcall)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTSndOrderlyDisconnect" ("OTClientLib")) ((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvDisconnect" ("OTClientLib")) ((ref :pointer) (discon (:pointer :tdiscon)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvOrderlyDisconnect" ("OTClientLib")) ((ref :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcv" ("OTClientLib")) ((ref :pointer) (buf :pointer) (nbytes :signed-long) (flags (:pointer :uint32)))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTSnd" ("OTClientLib")) ((ref :pointer) (buf :pointer) (nbytes :signed-long) (flags :uint32))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTSndUData" ("OTClientLib")) ((ref :pointer) (udata (:pointer :tunitdata)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvUData" ("OTClientLib")) ((ref :pointer) (udata (:pointer :tunitdata)) (flags (:pointer :uint32)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvUDErr" ("OTClientLib")) ((ref :pointer) (uderr (:pointer :tuderr)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvSndRequest" ("OTClientLib")) ((ref :pointer) (req (:pointer :trequest)) (reqflags :uint32))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvReply" ("OTClientLib")) ((ref :pointer) (reply (:pointer :treply)) (replyflags (:pointer :uint32)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTSndReply" ("OTClientLib")) ((ref :pointer) (reply (:pointer :treply)) (replyflags :uint32))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvRequest" ("OTClientLib")) ((ref :pointer) (req (:pointer :trequest)) (reqflags (:pointer :uint32)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTCancelRequest" ("OTClientLib")) ((ref :pointer) (sequence :signed-long))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTCancelReply" ("OTClientLib")) ((ref :pointer) (sequence :signed-long))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTSndURequest" ("OTClientLib")) ((ref :pointer) (req (:pointer :tunitrequest)) (reqflags :uint32))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvUReply" ("OTClientLib")) ((ref :pointer) (reply (:pointer :tunitreply)) (replyflags (:pointer :uint32)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTSndUReply" ("OTClientLib")) ((ref :pointer) (reply (:pointer :tunitreply)) (replyflags :uint32))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTRcvURequest" ("OTClientLib")) ((ref :pointer) (req (:pointer :tunitrequest)) (reqflags (:pointer :uint32)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTCancelURequest" ("OTClientLib")) ((ref :pointer) (seq :signed-long))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTCancelUReply" ("OTClientLib")) ((ref :pointer) (seq :signed-long))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTAsyncOpenMapper" ("OpenTransportSupport")) ((config (:pointer :otconfiguration)) (oflag :uint32) (proc :pointer) (contextptr :pointer))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTOpenMapper" ("OpenTransportSupport"))((config (:pointer :otconfiguration)) (oflag :uint32) (err (:pointer :osstatus)))   (:no-trap :pointer)   (:no-trap))(deftrap ("_OTRegisterName" ("OTClientLib")) ((ref :pointer) (req (:pointer :tregisterrequest)) (reply (:pointer :tregisterreply)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTDeleteName" ("OTClientLib")) ((ref :pointer) (name (:pointer :tnetbuf)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTDeleteNameByID" ("OTClientLib")) ((ref :pointer) (nameid :signed-long))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTLookupName" ("OTClientLib")) ((ref :pointer) (req (:pointer :tlookuprequest)) (reply (:pointer :tlookupreply)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTAllocMem" ("OpenTransportSupport"))((size :signed-long))   (:no-trap :pointer)   (:no-trap))(deftrap ("_OTFreeMem" ("OpenTransportSupport"))((memptr :pointer))   nil   (:no-trap))(deftrap ("_OTDelay" ("OTClientLib")) ((seconds :uint32))   nil   (:no-trap))(deftrap ("_OTIdle" ("OTClientLib")) nil   nil   (:no-trap))(deftrap ("_OTCreateConfiguration" ("OTClientUtilLib")) ((path :constcstringptr))   (:no-trap (:pointer :otconfiguration))   (:no-trap))(deftrap ("_OTCloneConfiguration" ("OTClientUtilLib")) ((cfig (:pointer :otconfiguration)))   (:no-trap (:pointer :otconfiguration))   (:no-trap))(deftrap ("_OTDestroyConfiguration" ("OTClientUtilLib")) ((cfig (:pointer :otconfiguration)))   nil   (:no-trap))(deftrap ("_OTCreateOptions" ("OTClientUtilLib")) ((endptname :constcstringptr) (strptr :cstringptr) (buf (:pointer :tnetbuf)))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTCreateOptionString" ("OTClientUtilLib")) ((endptname :constcstringptr) (opt (:pointer :toption)) (bufend :pointer) (strptr :cstringptr) (stringsize :signed-long))   (:no-trap :osstatus)   (:no-trap))(deftrap ("_OTNextOption" ("OTClientUtilLib")) ((buffer (:pointer :uint8)) (buflen :uint32) (prevoptptr (:pointer :toption)))   (:no-trap :osstatus)   (:no-trap))(def-mactype :TOPTIONPTR (find-mactype :POINTER))(deftrap ("_OTFindOption" ("OTClientLib")) ((buffer (:pointer :uint8)) (buflen :uint32) (level :uint32) (name :uint32))   (:no-trap (:pointer :toption))   (:no-trap))(deftrap ("_OTMemcpy" ("OTUtilityLib")) ((dest :pointer) (src :pointer) (nbytes :signed-long))   nil   (:no-trap))(deftrap ("_OTMemcmp" ("OTUtilityLib")) ((mem1 :pointer) (mem2 :pointer) (nbytes :signed-long))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTMemmove" ("OTUtilityLib")) ((dest :pointer) (src :pointer) (nbytes :signed-long))   nil   (:no-trap))(deftrap ("_OTMemzero" ("OTUtilityLib")) ((dest :pointer) (nbytes :signed-long))   nil   (:no-trap))(deftrap ("_OTMemset" ("OTUtilityLib")) ((dest :pointer) (toset :signed-long) (nbytes :signed-long))   nil   (:no-trap))(deftrap ("_OTStrLength" ("OTUtilityLib")) ((strptr :constcstringptr))   (:no-trap :signed-long)   (:no-trap))(deftrap ("_OTStrCopy" ("OTUtilityLib")) ((strto :cstringptr) (strfrom :constcstringptr))   nil   (:no-trap))(deftrap ("_OTStrCat" ("OTUtilityLib")) ((strto :cstringptr) (strfrom :constcstringptr))   nil   (:no-trap))(deftrap ("_OTStrEqual" ("OTUtilityLib")) ((strptr1 :constcstringptr) (strptr2 :constcstringptr))   (:no-trap :boolean)   (:no-trap)); 	-------------------------------------------------------------------------; 	** Time functions; 	**	; 	**	OTGetTimeStamp returns time in "tick" numbers, stored in 64 bits.; 	**	This timestamp can be used as a base number for calculating elapsed ; 	**	time.; 	**	OTSubtractTimeStamps returns a pointer to the "result" parameter.; 	**		; 	**	OTGetClockTimeInSecs returns time since Open Transport was initialized; 	**		in seconds.; 	------------------------------------------------------------------------- ;(def-mactype :OTTIMESTAMP (find-mactype :UNSIGNEDWIDE))(def-mactype :OTTIMESTAMPPTR (find-mactype :POINTER))(deftrap ("_OTGetTimeStamp" ("OTUtilityLib")) ((stamp (:pointer :unsignedwide)))   nil   (:no-trap))(deftrap ("_OTSubtractTimeStamps" ("OTUtilityLib")) ((result (:pointer :unsignedwide)) (starttime (:pointer :unsignedwide)) (endtime (:pointer :unsignedwide)))   (:no-trap (:pointer :unsignedwide))   (:no-trap))(deftrap ("_OTTimeStampInMilliseconds" ("OTUtilityLib")) ((delta (:pointer :unsignedwide)))   (:no-trap :uint32)   (:no-trap))(deftrap ("_OTTimeStampInMicroseconds" ("OTUtilityLib")) ((delta (:pointer :unsignedwide)))   (:no-trap :uint32)   (:no-trap))(deftrap ("_OTElapsedMilliseconds" ("OTUtilityLib")) ((starttime (:pointer :unsignedwide)))   (:no-trap :uint32)   (:no-trap))(deftrap ("_OTElapsedMicroseconds" ("OTUtilityLib")) ((starttime (:pointer :unsignedwide)))   (:no-trap :uint32)   (:no-trap))(deftrap ("_OTGetClockTimeInSecs" ("OTUtilityLib")) nil   (:no-trap :uint32)   (:no-trap)); 	-------------------------------------------------------------------------; 	** OTLIFO; 	**; 	** These are functions to implement a LIFO list that is interrupt-safe.; 	** The only function which is not is OTReverseList.  Normally, you create; 	** a LIFO list, populate it at interrupt time, and then use OTLIFOStealList; 	** to atomically remove the list, and OTReverseList to flip the list so that; 	** it is a FIFO list, which tends to be more useful.; 	------------------------------------------------------------------------- (def-mactype :OTLINKPTR (find-mactype :POINTER))(defrecord OTLIFO    (fHead (:POINTER :OTLINK))   )(defrecord OTLink    (fNext (:POINTER :OTLINK))   ); ;  This function puts "object" on the listHead, and places the;  previous value at listHead into the pointer at "object" plus;  linkOffset.; (deftrap ("_OTEnqueue" ("OTUtilityLib")) ((listhead :pointer) (object :pointer) (linkoffset :signed-long))   nil   (:no-trap)); ;  This function returns the head object of the list, and places;  the pointer at "object" + linkOffset into the listHead; (deftrap ("_OTDequeue" ("OTUtilityLib")) ((listhead :pointer) (linkoffset :signed-long))   (:no-trap :pointer)   (:no-trap)); ;  This function atomically enqueues the link onto the list; (deftrap ("_OTLIFOEnqueue" ("OTUtilityLib")) ((list (:pointer :otlifo)) (link (:pointer :otlink)))   nil   (:no-trap)); ;  This function atomically dequeues the first element;  on the list; (deftrap ("_OTLIFODequeue" ("OTUtilityLib")) ((list (:pointer :otlifo)))   (:no-trap (:pointer :otlink))   (:no-trap))(deftrap ("_OTLIFOStealList" ("OTUtilityLib")) ((list (:pointer :otlifo)))   (:no-trap (:pointer :otlink))   (:no-trap))(deftrap ("_OTReverseList" ("OTUtilityLib")) ((list (:pointer :otlink)))   (:no-trap (:pointer :otlink))   (:no-trap))(defrecord OTList    (fHead (:POINTER :OTLINK))   )(def-mactype :OTLISTSEARCHPROCPTR (find-mactype :POINTER));  FUNCTION (ref: UNIV Ptr; VAR linkToCheck: OTLink): BOOLEAN; ; ;  Add the link to the list at the front; (deftrap ("_OTAddFirst" ("OTUtilityLib")) ((list (:pointer :otlist)) (link (:pointer :otlink)))   nil   (:no-trap)); ;  Add the link to the list at the end; (deftrap ("_OTAddLast" ("OTUtilityLib")) ((list (:pointer :otlist)) (link (:pointer :otlink)))   nil   (:no-trap)); ;  Remove the first link from the list; (deftrap ("_OTRemoveFirst" ("OTUtilityLib")) ((list (:pointer :otlist)))   (:no-trap (:pointer :otlink))   (:no-trap))(deftrap ("_OTRemoveLast" ("OTUtilityLib")) ((list (:pointer :otlist)))   (:no-trap (:pointer :otlink))   (:no-trap))(deftrap ("_OTGetFirst" ("OTUtilityLib")) ((list (:pointer :otlist)))   (:no-trap (:pointer :otlink))   (:no-trap))(deftrap ("_OTGetLast" ("OTUtilityLib")) ((list (:pointer :otlist)))   (:no-trap (:pointer :otlink))   (:no-trap))(deftrap ("_OTIsInList" ("OTUtilityLib")) ((list (:pointer :otlist)) (link (:pointer :otlink)))   (:no-trap :boolean)   (:no-trap)); ;  Find a link in the list which matches the search criteria;  established by the search proc and the refPtr.  This is done;  by calling the search proc, passing it the refPtr and each;  link in the list, until the search proc returns true.;  NULL is returned if the search proc never returned true.; (deftrap ("_OTFindLink" ("OTUtilityLib")) ((listptr (:pointer :otlist)) (procptr :pointer) (refptr :pointer))   (:no-trap :otlink)   (:no-trap)); ;  Remove the specified link from the list, returning true if it was found; (deftrap ("_OTremovelink" ("OTUtilityLib")) ((listptr (:pointer :otlist)) (linkptr (:pointer :otlink)))   (:no-trap :boolean)   (:no-trap)); ;  Similar to OTFindLink, but it also removes it from the list.; (deftrap ("_OTFindAndRemoveLink" ("OTUtilityLib")) ((list (:pointer :otlist)) (proc :pointer) (refptr :pointer))   (:no-trap (:pointer :otlink))   (:no-trap))(deftrap ("_OTGetIndexedLink" ("OTUtilityLib")) ((list (:pointer :otlist)) (index :signed-long))   (:no-trap (:pointer :otlink))   (:no-trap))(def-mactype :OTLOCK (find-mactype :UINT8))(deftrap ("_OTAtomicSetBit" ("OTUtilityLib")) ((ptr (:pointer :uint8)) (len :signed-long))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTAtomicClearBit" ("OTUtilityLib")) ((ptr (:pointer :uint8)) (len :signed-long))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTAtomicTestBit" ("OTUtilityLib")) ((ptr (:pointer :uint8)) (len :signed-long))   (:no-trap :boolean)   (:no-trap)); ;  WARNING! void* and UInt32 locations MUST be on 4-byte boundaries.; 			UInt16 locations must not cross a 4-byte boundary.; (deftrap ("_OTCompareAndSwapPtr" ("OTUtilityLib")) ((oldvalue :pointer) (newvalue :pointer) (location :pointer))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTCompareAndSwap32" ("OTUtilityLib")) ((oldvalue :uint32) (newvalue :uint32) (location (:pointer :uint32)))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTCompareAndSwap16" ("OTUtilityLib")) ((oldvalue :uint32) (newvalue :uint32) (location (:pointer :uint16)))   (:no-trap :boolean)   (:no-trap))(deftrap ("_OTCompareAndSwap8" ("OTUtilityLib")) ((oldvalue :uint32) (newvalue :uint32) (location (:pointer :uint8)))   (:no-trap :boolean)   (:no-trap)); ;  WARNING! UInt32 locations MUST be on 4-byte boundaries.; 			UInt16 locations must not cross a 4-byte boundary.; (deftrap ("_OTAtomicAdd32" ("OTUtilityLib")) ((val :sint32) (ptr (:pointer :sint32)))   (:no-trap :sint32)   (:no-trap))(deftrap ("_OTAtomicAdd16" ("OTUtilityLib")) ((val :sint16) (ptr (:pointer :sint16)))   (:no-trap :sint16)   (:no-trap))(deftrap ("_OTAtomicadd8" ("OTUtilityLib")) ((val :byteparameter) (ptr (:pointer :sint8)))   (:no-trap :sint8)   (:no-trap))(deftrap ("_OTReleaseBuffer" ("OTUtilityLib")) ((buf :pointer))   nil   (:no-trap))(deftrap ("_OTBufferDataSize" ("OTUtilityLib")) ((buf :pointer))   (:no-trap :unsigned-long)   (:no-trap))(deftrap ("_OTReadBuffer" ("OTUtilityLib")) ((info :pointer)                                             (databuf :pointer)                                             (countp :pointer))   (:no-trap :boolean)   (:no-trap)); $ALIGN RESET; $POP; $SETC UsingIncludes := OpenTransportIncludes; $ENDC                         ; __OPENTRANSPORT__; $IFC NOT UsingIncludes; $ENDC(export '($KOTNETBUFDATAISOTBUFFERSTAR $KNETBUFDATAISOTDATA          $KOTFOURBYTEOPTIONSIZE $KOTTWOBYTEOPTIONSIZE $KOTONEBYTEOPTIONSIZE          $KOTBOOLEANOPTIONSIZE $KOTBOOLEANOPTIONDATASIZE $KOTOPTIONHEADERSIZE          $KOTPORTISUNAVAILABLE $KOTPORTISDISABLED $KOTPORTISACTIVE          $KOTPORTISALIAS $KOTPORTISPRIVATE $KOTPORTISSYSTEMREGISTERED          $KOTPORTCANYIELD $KOTPORTISTPI $KOTPORTISDLPI $KOTLASTBUSINDEX          $KOTPCMCIABUS $KOTGEOPORT $KOTPCIBUS $KOTNUBUS $KOTMOTHERBOARDBUS          $KOTUNKNOWNBUSPORT $KOTINVALIDPORTREF $KINVALIDPORTREF          $KMAXPORTNAMESIZE $KMAXPORTNAMELENGTH $KOTLASTOTHERNUMBER          $KOTLASTSLOTNUMBER $KOTLASTDEVICEINDEX $KOTPSEUDODEVICE          $KOTNODEVICETYPE $T_INVALID $T_INFINITE $T_CAN_SUPPLY_MIB          $T_CAN_RESOLVE_ADDR $T_CAN_SUPPORT_MDATA $T_XPG4_1 $T_SENDZERO          $T_TRANS_CLTS $T_TRANS_ORD $T_TRANS $T_CLTS $T_COTS_ORD $T_COTS          $T_ALLOPT $T_UNSPEC $T_ABSREQ $T_NULL $T_UNUSED $T_NO $T_YES          $T_NOTSUPPORT $T_READONLY $T_PARTSUCCESS $T_FAILURE $T_SUCCESS          $T_CURRENT $T_DEFAULT $T_CHECK $T_NEGOTIATE $T_INREL $T_OUTREL          $T_DATAXFER $T_INCON $T_OUTCON $T_IDLE $T_UNBND $T_UNINIT $T_ALL          $T_UDATA $T_OPT $T_ADDR $KMAXRESOURCEINFOSIZE $KMAXRESOURCEINFOLENGTH          $KMAXSLOTIDSIZE $KMAXSLOTIDLENGTH $KMAXPROVIDERNAMESIZE          $KMAXPROVIDERNAMELENGTH $KMAXMODULENAMESIZE $KMAXMODULENAMELENGTH          $I_OTSETRAWMODE $KOTGETFRAMINGVALUE $I_OTSETFRAMINGTYPE          $I_OTGETMISCELLANEOUSEVENTS $I_LIST $I_FIND $I_STR $MIOC_SIO_HIGH          $MIOC_OT_HIGH $MIOC_SRL_HIGH $MIOC_SRL $MIOC_ATALK $MIOC_OT          $MIOC_DLPI $MIOC_TCP $MIOC_ARP $MIOC_SAD $MIOC_STRLOG $MIOC_STREAMIO          $OPT_KEEPALIVE $OPT_SERVERSTATUS $OPT_SELFSEND $OPT_ENABLEEOM          $OPT_INTERVAL $OPT_RETRYCNT $OPT_CHECKSUM $XTI_PROTOTYPE          $XTI_SNDLOWAT $XTI_SNDBUF $XTI_RCVLOWAT $XTI_RCVBUF $XTI_LINGER          $XTI_DEBUG $XTI_GENERIC $SIGPOLL $SIGURG $SIGHUP $KOTSYSTEMIDLE          $KOTSYSTEMAWAKEN $KOTSYSTEMSHUTDOWN $KOTSYSTEMSLEEP          $KOTCONFIGURATIONCHANGED $KOTCLOSEPORTREQUEST $KOTNEWPORTREGISTERED          $KOTHARDWAREISFREE $KOTRELEASEHARDWARE $KOTHARDWAREINUSE          $KOTREQUESTHARDWARE $KOTPORTENABLED $KOTPORTDISABLED          $KOTPROVIDERISCLOSED $KOTPROVIDERWILLCLOSE $KOTPROVIDERISRECONNECTED          $KOTPROVIDERISDISCONNECTED $KIMMEDIATEEVENT $KPROTOCOLEVENT          $KSIGNALEVENT $KPOLLEVENT $KSTREAMOPENEVENT $KSTREAMIOCTLEVENT          $KSTREAMWRITEEVENT $KSTREAMREADEVENT $KGETMSGEVENT          $KOTDISABLEPORTEVENT $KSTREAMEVENT $T_LKUPNAMERESULT          $T_LKUPNAMECOMPLETE $T_DELNAMECOMPLETE $T_REGNAMECOMPLETE          $T_MEMORYRELEASED $T_SYNCCOMPLETE $T_GETINFOCOMPLETE          $T_RESOLVEADDRCOMPLETE $T_GETPROTADDRCOMPLETE $T_OPENCOMPLETE          $T_OPTMGMTCOMPLETE $T_DISCONNECTCOMPLETE $T_REPLYCOMPLETE          $T_ACCEPTCOMPLETE $T_UNBINDCOMPLETE $T_BINDCOMPLETE $KCOMPLETEEVENT          $KPRIVATEEVENT $T_RESET $T_PASSCON $T_REPLY $T_REQUEST $T_GOEXDATA          $T_GODATA $T_ORDREL $T_UDERR $T_ERROR $T_DISCONNECT $T_EXDATA $T_DATA          $T_CONNECT $T_LISTEN $KOTINVALIDMAPPERREF $KOTINVALIDENDPOINTREF          $KOTINVALIDPROVIDERREF $KOTINVALIDSTREAMREF $KOTINVALIDREF          $T_NORECEIPT $T_PARTIALDATA $T_ACKNOWLEDGED $T_EXPEDITED $T_MORE          $T_UNITREPLY $T_UNITREQUEST $T_REQUESTDATA $T_REPLYDATA $T_INFO          $T_UDERROR $T_UNITDATA $T_DIS $T_CALL $T_OPTMGMT $T_BIND          $KOTGENERICNAME $KOTPORTLOSTCONNECTION $KOTUSERREQUESTEDERR          $KOTCONFIGURATIONCHANGEDERR $KOTBADCONFIGURATIONERR          $KOTPORTWASEJECTEDERR $KOTPORTHASDIEDERR $KOTCLIENTNOTINITTEDERR          $KENOMSGERR $KESRCHERR $KEINPROGRESSERR $KENODATAERR $KENOSTRERR          $KECANCELERR $KEBADMSGERR $KENOSRERR $KETIMEERR $KEPROTOERR          $KEHOSTUNREACHERR $KEHOSTDOWNERR $KECONNREFUSEDERR $KETIMEDOUTERR          $KETOOMANYREFSERR $KESHUTDOWNERR $KENOTCONNERR $KEISCONNERR          $KENOBUFSERR $KECONNRESETERR $KECONNABORTEDERR $KENETRESETERR          $KENETUNREACHERR $KENETDOWNERR $KEADDRNOTAVAILERR $KEADDRINUSEERR          $KEOPNOTSUPPERR $KESOCKTNOSUPPORTERR $KEPROTONOSUPPORTERR          $KENOPROTOOPTERR $KEPROTOTYPEERR $KEMSGSIZEERR $KEDESTADDRREQERR          $KENOTSOCKERR $KEALREADYERR $KEDEADLKERR $KEWOULDBLOCKERR $KERANGEERR          $KEPIPEERR $KENOTTYERR $KEINVALERR $KENODEVERR $KEEXISTERR $KEBUSYERR          $KEFAULTERR $KEACCESERR $KENOMEMERR $KEAGAINERR $KEBADFERR $KENXIOERR          $KEIOERR $KEINTRERR $KENORSRCERR $KENOENTERR $KEPERMERR          $KOTCANCELEDERR $KOTBADSYNCERR $KOTPROTOCOLERR $KOTQFULLERR          $KOTRESADDRESSERR $KOTRESQLENERR $KOTPROVIDERMISMATCHERR          $KOTINDOUTERR $KOTADDRESSBUSYERR $KOTBADQLENERR $KOTBADNAMEERR          $KOTNOSTRUCTURETYPEERR $KOTSTATECHANGEERR $KOTNOTSUPPORTEDERR          $KOTNORELEASEERR $KOTBADFLAGERR $KOTNOUDERRERR $KOTNODISCONNECTERR          $KOTNODATAERR $KOTFLOWERR $KOTBUFFEROVERFLOWERR $KOTBADDATAERR          $KOTLOOKERR $KOTSYSERRORERR $KOTBADSEQUENCEERR $KOTOUTSTATEERR          $KOTNOADDRESSERR $KOTBADREFERENCEERR $KOTACCESSERR $KOTBADOPTIONERR          $KOTBADADDRESSERR $KOTDUPLICATEFOUNDERR $KOTNOTFOUNDERR          $KOTOUTOFMEMORYERR $KOTNOERROR $TLASTXTIERROR $TCANCELED $TBADSYNC          $TPROTO $TQFULL $TRESADDR $TRESQLEN $TPROVMISMATCH $TINDOUT          $TADDRBUSY $TBADQLEN $TBADNAME $TNOSTRUCTYPE $TSTATECHNG $TNOTSUPPORT          $TNOREL $TBADFLAG $TNOUDERR $TNODIS $TNODATA $TFLOW $TBUFOVFLW          $TBADDATA $TLOOK $TSYSERR $TBADSEQ $TOUTSTATE $TNOADDR $TBADF $TACCES          $TBADOPT $TBADADDR $TSUCCESS $ELASTERRNO $ENOMSG $ESRCH $EINPROGRESS          $ENODATA $ENOSTR $ECANCEL $EBADMSG $ENOSR $ETIME $EPROTO          $EHOSTUNREACH $EHOSTDOWN $ECONNREFUSED $ETIMEDOUT $ETOOMANYREFS          $ESHUTDOWN $ENOTCONN $EISCONN $ENOBUFS $ECONNRESET $ECONNABORTED          $ENETRESET $ENETUNREACH $ENETDOWN $EADDRNOTAVAIL $EADDRINUSE          $EOPNOTSUPP $ESOCKTNOSUPPORT $EPROTONOSUPPORT $ENOPROTOOPT          $EPROTOTYPE $EMSGSIZE $EDESTADDRREQ $ENOTSOCK $EALREADY $EWOULDBLOCK          $EDEADLK $ERANGE $EPIPE $ENOTTY $EINVAL $ENODEV $EEXIST $EBUSY          $EFAULT $EACCES $ENOMEM $EAGAIN $EBADF $ENXIO $EIO $EINTR $ENORSRC          $ENOENT $EPERM $O_NONBLOCK $O_NDELAY $O_ASYNC $KOTSUPPORTPREFIX          $KOTCLIENTPREFIX $KOTKERNELPREFIX $KOTMODULEPREFIX $KOTLIBRARYPREFIX          $KOTLIBRARYVERSION $GESTALTOPENTPTIPXSPXLOADED          $GESTALTOPENTPTIPXSPXPRESENT $GESTALTOPENTPTTCPLOADED          $GESTALTOPENTPTTCPPRESENT $GESTALTOPENTPTAPPLETALKLOADED          $GESTALTOPENTPTAPPLETALKPRESENT $GESTALTOPENTPTLOADED          $GESTALTOPENTPTPRESENT $GESTALTOPENTPT $GESTALTOPENTPTVERSIONS))(provide-interface 'opentransport)