(in-package :TRAPS);;;;;;;;;;;;;;;;;;;;;;;;;;; Modification History;;;; 03/06/96 bill Map old names to new names;;; Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:QuickdrawText.p"; at Tuesday June 6,1995 2:00:44 pm.; ;  	File:		QuickdrawText.p;  ;  	Contains:	QuickDraw Text Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __QUICKDRAWTEXT__; $SETC __QUICKDRAWTEXT__ := 1; $I+; $SETC QuickdrawTextIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+;  CharToPixel directions (defconstant $leftCaret 0)                      ; Place caret for left block(defconstant $rightCaret -1)                    ; Place caret for right block(defconstant $hilite 1)                         ; Direction is SysDirection(defconstant $smLeftCaret 0)                    ; Place caret for left block - obsolete (defconstant $smRightCaret -1)                  ; Place caret for right block - obsolete (defconstant $smHilite 1)                       ; Direction is TESysJust - obsolete ; Constants for styleRunPosition argument in PortionLine, DrawJustified,;  MeasureJustified, CharToPixel, and PixelToChar.(defconstant $onlyStyleRun 0)                   ;  This is the only style run on the line (defconstant $leftStyleRun 1)                   ;  This is leftmost of multiple style runs on the line (defconstant $rightStyleRun 2)                  ;  This is rightmost of multiple style runs on the line (defconstant $middleStyleRun 3)                 ;  There are multiple style runs on the line and this ;  is neither the leftmost nor the rightmost. (defconstant $smOnlyStyleRun 0)                 ;  obsolete (defconstant $smLeftStyleRun 1)                 ;  obsolete (defconstant $smRightStyleRun 2)                ;  obsolete (defconstant $smMiddleStyleRun 3)               ;  obsolete ;  type for styleRunPosition parameter in PixelToChar etc. (def-mactype :juststylecode (find-mactype ':signed-integer))(defrecord FormatOrder (array (array :signed-integer 1)))(def-mactype :formatorderptr (find-mactype '(:pointer :formatorder)))(defrecord OffPair    (offFirst :signed-integer)   (offSecond :signed-integer)   )(defrecord OffsetTable (array (array :offpair 3)))(def-mactype :stylerundirectionprocptr (find-mactype ':pointer));  FUNCTION StyleRunDirection(styleRunIndex: INTEGER; dirParam: UNIV Ptr): BOOLEAN; (def-mactype :stylerundirectionupp (find-mactype ':pointer))(defconstant $uppStyleRunDirectionProcInfo #x390);  FUNCTION (2 byte param, 4 byte param): 1 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewStyleRunDirectionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallStyleRunDirectionProc" ((styleRunIndex :signed-integer) (dirParam :pointer) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_Pixel2Char" ((textBuf :pointer) (textLen :signed-integer) (slop :signed-integer) (pixelWidth :signed-integer) (leadingEdge (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textLen slop pixelWidth leadingEdge ((+ (ash 33294 16) 20) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_Char2Pixel"         ((textBuf :pointer) (textLen :signed-integer) (slop :signed-integer) (offset :signed-integer) (direction :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textLen slop offset direction ((+ (ash 33292 16) 22) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_PixelToChar" ((textBuf :pointer) (textLength :signed-long) (slop :signed-long) (pixelWidth :signed-long) (leadingEdge (:pointer :boolean)) (widthRemaining (:pointer :signed-long)) (styleRunPosition :signed-integer) (numer :point) (denom :point))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textLength slop pixelWidth leadingEdge widthRemaining styleRunPosition numer denom ((+ (ash 33314 16) 46) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_CharToPixel" ((textBuf :pointer) (textLength :signed-long) (slop :signed-long) (offset :signed-long) (direction :signed-integer) (styleRunPosition :signed-integer) (numer :point) (denom :point))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textLength slop offset direction styleRunPosition numer denom ((+ (ash 33308 16) 48) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_DrawJustified" ((textPtr :pointer) (textLength :signed-long) (slop :signed-long) (styleRunPosition :signed-integer) (numer :point) (denom :point))   nil   (:stack-trap #xA8B5 textPtr textLength slop styleRunPosition numer denom ((+ (ash 32790 16) 50) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MeasureJustified" ((textPtr :pointer) (textLength :signed-long) (slop :signed-long) (charLocs :pointer) (styleRunPosition :signed-integer) (numer :point) (denom :point))   nil   (:stack-trap #xA8B5 textPtr textLength slop charLocs styleRunPosition numer denom ((+ (ash 32794 16) 52) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_PortionLine" ((textPtr :pointer) (textLen :signed-long) (styleRunPosition :signed-integer) (numer :point) (denom :point))   (:stack :signed-long)   (:stack-trap #xA8B5 textPtr textLen styleRunPosition numer denom ((+ (ash 33810 16) 54) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_HiliteText" ((textPtr :pointer) (textLength :signed-integer) (firstOffset :signed-integer) (secondOffset :signed-integer) (offsets (:pointer :offsettable)))   nil   (:stack-trap #xA8B5 textPtr textLength firstOffset secondOffset offsets ((+ (ash 32782 16) 28) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_DrawJust" ((textPtr :pointer) (textLength :signed-integer) (slop :signed-integer))   nil   (:stack-trap #xA8B5 textPtr textLength slop ((+ (ash 32776 16) 30) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MeasureJust" ((textPtr :pointer) (textLength :signed-integer) (slop :signed-integer) (charLocs :pointer))   nil   (:stack-trap #xA8B5 textPtr textLength slop charLocs ((+ (ash 32780 16) 32) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_PortionText" ((textPtr :pointer) (textLength :signed-long))   (:stack :signed-long)   (:stack-trap #xA8B5 textPtr textLength ((+ (ash 33800 16) 36) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_VisibleLength" ((textPtr :pointer) (textLength :signed-long))   (:stack :signed-long)   (:stack-trap #xA8B5 textPtr textLength ((+ (ash 33800 16) 40) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_GetFormatOrder" ((ordering (:pointer :formatorder)) (firstFormat :signed-integer) (lastFormat :signed-integer) (lineRight :boolean) (rlDirProc :pointer) (dirParam :pointer))   nil   (:stack-trap #xA8B5 ordering firstFormat lastFormat lineRight rlDirProc dirParam ((+ (ash 32786 16) 65532) :signed-longint))); $ENDC; $IFC OLDROUTINENAMES ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_NPixel2Char" "PixelToChar")         ((textBuf :pointer) (textLength :signed-long) (slop :signed-long) (pixelWidth :signed-long) (leadingEdge (:pointer :boolean)) (widthRemaining (:pointer :signed-long)) (styleRunPosition :signed-integer) (numer :point) (denom :point))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textLength slop pixelWidth leadingEdge widthRemaining styleRunPosition numer denom ((+ (ash 33314 16) 46) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_NChar2Pixel" "CharToPixel")         ((textBuf :pointer) (textLength :signed-long) (slop :signed-long) (offset :signed-long) (direction :signed-integer) (styleRunPosition :signed-integer) (numer :point) (denom :point))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textLength slop offset direction styleRunPosition numer denom ((+ (ash 33308 16) 48) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_NDrawJust" "DrawJustified")         ((textPtr :pointer) (textLength :signed-long) (slop :signed-long) (styleRunPosition :signed-integer) (numer :point) (denom :point))   nil   (:stack-trap #xA8B5 textPtr textLength slop styleRunPosition numer denom ((+ (ash 32790 16) 50) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_NMeasureJust" "MeasureJustified")         ((textPtr :pointer) (textLength :signed-long) (slop :signed-long) (charLocs :pointer) (styleRunPosition :signed-integer) (numer :point) (denom :point))   nil   (:stack-trap #xA8B5 textPtr textLength slop charLocs styleRunPosition numer denom ((+ (ash 32794 16) 52) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_NPortionText" "PortionLine")         ((textPtr :pointer) (textLen :signed-long) (styleRunPosition :signed-integer) (numer :point) (denom :point))   (:stack :signed-long)   (:stack-trap #xA8B5 textPtr textLen styleRunPosition numer denom ((+ (ash 33810 16) 54) :signed-longint))); $ENDC; $ENDC(defrecord FontInfo    (ascent :signed-integer)   (descent :signed-integer)   (widMax :signed-integer)   (leading :signed-integer)   )(def-mactype :formatstatus (find-mactype ':signed-integer)); $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TextFont" ((font :signed-integer))   nil   (:stack-trap #xA887)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TextFace" ((face (:unsigned-byte :set (#:bold #:italic #:underline #:outline shadow #:condense #:extend))))   nil   (:stack-trap #xA888)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TextMode" ((mode :signed-integer))   nil   (:stack-trap #xA889)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TextSize" ((size :signed-integer))   nil   (:stack-trap #xA88A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SpaceExtra" ((extra :signed-long))   nil   (:stack-trap #xA88E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DrawChar" ((ch :character))   nil   (:stack-trap #xA883)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DrawString" ((s (:string 255)))   nil   (:stack-trap #xA884)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DrawText" ((textBuf :pointer) (firstByte :signed-integer) (byteCount :signed-integer))   nil   (:stack-trap #xA885)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CharWidth" ((ch :character))   (:stack :signed-integer)   (:stack-trap #xA88D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StringWidth" ((s (:string 255)))   (:stack :signed-integer)   (:stack-trap #xA88C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TextWidth" ((textBuf :pointer) (firstByte :signed-integer) (byteCount :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA886)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MeasureText" ((count :signed-integer) (textAddr :pointer) (charLocs :pointer))   nil   (:stack-trap #xA837)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetFontInfo" ((info (:pointer :fontinfo)))   nil   (:stack-trap #xA88B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CharExtra" ((extra :signed-long))   nil   (:stack-trap #xAA23)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdText" ((count :signed-integer) (textAddr :pointer) (numer :point) (denom :point))   nil   (:stack-trap #xA882)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdTxMeas" ((byteCount :signed-integer) (textAddr :pointer) (numer (:pointer :point)) (denom (:pointer :point)) (info (:pointer :fontinfo)))   (:stack :signed-integer)   (:stack-trap #xA8ED)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := QuickdrawTextIncludes; $ENDC                                         ; __QUICKDRAWTEXT__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'QuickdrawText)