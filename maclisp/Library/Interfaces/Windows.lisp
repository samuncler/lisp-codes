(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Windows.p"; at Tuesday June 6,1995 2:05:24 pm.; ;  	File:		Windows.p;  ;  	Contains:	Window Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __WINDOWS__; $SETC __WINDOWS__ := 1; $I+; $SETC WindowsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MEMORY__|#(require-interface 'Memory)#|                                              ; $I Memory.p |#                                             ; $ENDC; 	MixedMode.p													#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	QuickdrawText.p												#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC; 	OSUtils.p													; $IFC UNDEFINED __CONTROLS__(require-interface 'Controls)                   ; $I Controls.p; $ENDC; 	Menus.p														; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kStandardWindowDefinition 0)      ;  for document windows and dialogs(defconstant $kRoundWindowDefinition 1)         ;  old da-style window(defconstant $kFloatingWindowDefinition 124)    ;  for floating windows; ####################################################################################; ;  Window Variant Codes; ; ####################################################################################;  for use with kStandardWindowDefinition (defconstant $kModalDialogVariantCode 1)(defconstant $kMovableModalDialogVariantCode 5);  for use with kFloatingWindowDefinition (defconstant $kSideFloaterVariantCode 8); ####################################################################################; ;  Old-style procIDs.  For use only with New(C)Window; ; ####################################################################################(defconstant $documentProc 0)(defconstant $dBoxProc 1)(defconstant $plainDBox 2)(defconstant $altDBoxProc 3)(defconstant $noGrowDocProc 4)(defconstant $movableDBoxProc 5)(defconstant $zoomDocProc 8)(defconstant $zoomNoGrow 12)(defconstant $rDocProc 16);  floating window defproc ids (defconstant $floatProc 1985)(defconstant $floatGrowProc 1987)(defconstant $floatZoomProc 1989)(defconstant $floatZoomGrowProc 1991)(defconstant $floatSideProc 1993)(defconstant $floatSideGrowProc 1995)(defconstant $floatSideZoomProc 1997)(defconstant $floatSideZoomGrowProc 1999); ####################################################################################; ;  Standard window kinds; ; ####################################################################################(defconstant $dialogKind 2)(defconstant $userKind 8)(defconstant $kDialogWindowKind 2)(defconstant $kApplicationWindowKind 8); ####################################################################################; ;  FindWindow result codes; ; ####################################################################################(defconstant $inDesk 0)(defconstant $inMenuBar 1)(defconstant $inSysWindow 2)(defconstant $inContent 3)(defconstant $inDrag 4)(defconstant $inGrow 5)(defconstant $inGoAway 6)(defconstant $inZoomIn 7)(defconstant $inZoomOut 8)(defconstant $wDraw 0)(defconstant $wHit 1)(defconstant $wCalcRgns 2)(defconstant $wNew 3)(defconstant $wDispose 4)(defconstant $wGrow 5)(defconstant $wDrawGIcon 6)(defconstant $deskPatID 16); ####################################################################################; ;  Window Definition hit test result codes ("WindowPart"); ; ####################################################################################(defconstant $wNoHit 0)(defconstant $wInContent 1)(defconstant $wInDrag 2)(defconstant $wInGrow 3)(defconstant $wInGoAway 4)(defconstant $wInZoomIn 5)(defconstant $wInZoomOut 6)(def-mactype :windowdefprocptr (find-mactype ':pointer));  FUNCTION WindowDef(varCode: INTEGER; theWindow: WindowRef; message: INTEGER; param: LONGINT): LONGINT; ; ; 		DeskHookProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => mouseClick  	D0.B; 		 => *theEvent   	A0.L; 	(def-mactype :deskhookprocptr (find-mactype ':pointer));  register PROCEDURE DeskHook(mouseClick: BOOLEAN; VAR theEvent: EventRecord); (def-mactype :windowdefupp (find-mactype ':pointer))(def-mactype :deskhookupp (find-mactype ':pointer))(defconstant $uppWindowDefProcInfo #x3BB0)      ;  FUNCTION (2 byte param, 4 byte param, 2 byte param, 4 byte param): 4 byte result; (defconstant $uppDeskHookProcInfo #x130802)     ;  Register PROCEDURE (1 byte in D0, 4 bytes in A0); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewWindowDefProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDeskHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallWindowDefProc" ((varCode :signed-integer) (theWindow (:pointer :windowrecord)) (message :signed-integer) (param :signed-long) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM                        ; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallDeskHookProc" ((mouseClick :boolean) (theEvent (:pointer :eventrecord)) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT CFMSYSTEMCALLS;; Generated by translator read-long-from-memory(deftrap "_GetGrayRgn" ()   (:no-trap (:handle :region))   (:no-trap (%get-ptr (%int-to-ptr 2542))))    ;  MOVE.l $09EE,(SP) ; $ENDC(defrecord (WinCTab :handle)    (wCSeed :signed-long)                        ; reserved   (wCReserved :signed-integer)                 ; reserved   (ctSize :signed-integer)                     ; usually 4 for windows   (ctTable (:array :colorspec 5))   )(def-mactype :wctabptr (find-mactype '(:pointer :winctab)))(def-mactype :wctabhandle (find-mactype '(:handle :winctab))); $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InitWindows" ()   nil   (:stack-trap #xA912)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetWMgrPort" ((wPort (:pointer (:pointer :grafport))))   nil   (:stack-trap #xA910)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_NewWindow" ((wStorage :pointer) (boundsRect (:pointer :rect)) (title (:string 255)) (visible :boolean) (theProc :signed-integer) (behind (:pointer :windowrecord)) (goAwayFlag :boolean) (refCon :signed-long))   (:stack (:pointer :windowrecord))   (:stack-trap #xA913)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetNewWindow" ((windowID :signed-integer) (wStorage :pointer) (behind (:pointer :windowrecord)))   (:stack (:pointer :windowrecord))   (:stack-trap #xA9BD)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CloseWindow" ((theWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA92D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposeWindow" ((theWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA914)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetWTitle" ((theWindow (:pointer :windowrecord)) (title (:pointer (:string 255))))   nil   (:stack-trap #xA919)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SelectWindow" ((theWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA91F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_HideWindow" ((theWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA916)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ShowWindow" ((theWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA915)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ShowHide" ((theWindow (:pointer :windowrecord)) (showFlag :boolean))   nil   (:stack-trap #xA908)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_HiliteWindow" ((theWindow (:pointer :windowrecord)) (fHilite :boolean))   nil   (:stack-trap #xA91C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_BringToFront" ((theWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA920)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SendBehind" ((theWindow (:pointer :windowrecord)) (behindWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA921)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FrontWindow" ()   (:stack (:pointer :windowrecord))   (:stack-trap #xA924)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DrawGrowIcon" ((theWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA904)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MoveWindow" ((theWindow (:pointer :windowrecord)) (hGlobal :signed-integer) (vGlobal :signed-integer) (front :boolean))   nil   (:stack-trap #xA91B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SizeWindow" ((theWindow (:pointer :windowrecord)) (w :signed-integer) (h :signed-integer) (fUpdate :boolean))   nil   (:stack-trap #xA91D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ZoomWindow" ((theWindow (:pointer :windowrecord)) (partCode :signed-integer) (front :boolean))   nil   (:stack-trap #xA83A)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InvalRect" ((badRect (:pointer :rect)))   nil   (:stack-trap #xA928)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InvalRgn" ((badRgn (:handle :region)))   nil   (:stack-trap #xA927)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ValidRect" ((goodRect (:pointer :rect)))   nil   (:stack-trap #xA92A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ValidRgn" ((goodRgn (:handle :region)))   nil   (:stack-trap #xA929)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_BeginUpdate" ((theWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA922)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EndUpdate" ((theWindow (:pointer :windowrecord)))   nil   (:stack-trap #xA923)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetWRefCon" ((theWindow (:pointer :windowrecord)) (data :signed-long))   nil   (:stack-trap #xA918)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetWRefCon" ((theWindow (:pointer :windowrecord)))   (:stack :signed-long)   (:stack-trap #xA917)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetWindowPic" ((theWindow (:pointer :windowrecord)) (pic (:handle :picture)))   nil   (:stack-trap #xA92E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetWindowPic" ((theWindow (:pointer :windowrecord)))   (:stack (:handle :picture))   (:stack-trap #xA92F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CheckUpdate" ((theEvent (:pointer :eventrecord)))   (:stack :boolean)   (:stack-trap #xA911)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ClipAbove" ((window (:pointer :windowrecord)))   nil   (:stack-trap #xA90B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SaveOld" ((window (:pointer :windowrecord)))   nil   (:stack-trap #xA90E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DrawNew" ((window (:pointer :windowrecord)) (update :boolean))   nil   (:stack-trap #xA90F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PaintOne" ((window (:pointer :windowrecord)) (clobberedRgn (:handle :region)))   nil   (:stack-trap #xA90C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PaintBehind" ((startWindow (:pointer :windowrecord)) (clobberedRgn (:handle :region)))   nil   (:stack-trap #xA90D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CalcVis" ((window (:pointer :windowrecord)))   nil   (:stack-trap #xA909)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CalcVisBehind" ((startWindow (:pointer :windowrecord)) (clobberedRgn (:handle :region)))   nil   (:stack-trap #xA90A)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GrowWindow" ((theWindow (:pointer :windowrecord)) (startPt :point) (bBox (:pointer :rect)))   (:stack :signed-long)   (:stack-trap #xA92B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FindWindow" ((thePoint :point) (theWindow (:pointer (:pointer :windowrecord))))   (:stack :signed-integer)   (:stack-trap #xA92C)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PinRect" ((theRect (:pointer :rect)) (thePt :point))   (:stack :signed-long)   (:stack-trap #xA94E)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DragGrayRgn" ((theRgn (:handle :region)) (startPt :point) (limitRect (:pointer :rect)) (slopRect (:pointer :rect)) (axis :signed-integer) (actionProc :pointer))   (:stack :signed-long)   (:stack-trap #xA905)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DragTheRgn" ((theRgn (:handle :region)) (startPt :point) (limitRect (:pointer :rect)) (slopRect (:pointer :rect)) (axis :signed-integer) (actionProc :pointer))   (:stack :signed-long)   (:stack-trap #xA926)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TrackBox" ((theWindow (:pointer :windowrecord)) (thePt :point) (partCode :signed-integer))   (:stack :boolean)   (:stack-trap #xA83B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetCWMgrPort" ((wMgrCPort (:pointer (:pointer :cgrafport))))   nil   (:stack-trap #xAA48)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetWinColor" ((theWindow (:pointer :windowrecord)) (newColorTable (:handle :winctab)))   nil   (:stack-trap #xAA41)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetDeskCPat" ((deskPixPat (:handle :pixpat)))   nil   (:stack-trap #xAA47)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_NewCWindow" ((wStorage :pointer) (boundsRect (:pointer :rect)) (title (:string 255)) (visible :boolean) (procID :signed-integer) (behind (:pointer :windowrecord)) (goAwayFlag :boolean) (refCon :signed-long))   (:stack (:pointer :windowrecord))   (:stack-trap #xAA45)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetNewCWindow" ((windowID :signed-integer) (wStorage :pointer) (behind (:pointer :windowrecord)))   (:stack (:pointer :windowrecord))   (:stack-trap #xAA46)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetWVariant" ((theWindow (:pointer :windowrecord)))   (:stack :signed-integer)   (:stack-trap #xA80A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetWTitle" ((theWindow (:pointer :windowrecord)) (title (:string 255)))   nil   (:stack-trap #xA91A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TrackGoAway" ((theWindow (:pointer :windowrecord)) (thePt :point))   (:stack :boolean)   (:stack-trap #xA91E)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DragWindow" ((theWindow (:pointer :windowrecord)) (startPt :point) (boundsRect (:pointer :rect)))   nil   (:stack-trap #xA925)); $ENDC; $IFC NOT STRICT_WINDOWS (def-mactype :windowpeek (find-mactype '(:pointer :windowrecord)));; This form has been patched from HD:CCL3.0d17:Interface Translator:Patches:Windows.patch#|(defrecord WindowRecord    (port :grafport)   (windowKind :signed-integer)   (visible :boolean)   (hilited :boolean)   (goAwayFlag :boolean)   (spareFlag :boolean)   (strucRgn (:handle :region))   (contRgn (:handle :region))   (updateRgn (:handle :region))   (windowDefProc :handle)   (dataHandle :handle)   (titleHandle (:handle (:string 255)))   (titleWidth :signed-integer)   (controlList (:handle :controlrecord))   (nextWindow (:pointer :windowrecord))   (windowPic (:handle :picture))   (refCon :signed-long)   )|#;;; needs the :include keyword added(defrecord WindowRecord    (port :grafport :include t)   (windowKind :signed-integer)   (visible :boolean)   (hilited :boolean)   (goAwayFlag :boolean)   (spareFlag :boolean)   (strucRgn (:handle :region))   (contRgn (:handle :region))   (updateRgn (:handle :region))   (windowDefProc :handle)   (dataHandle :handle)   (titleHandle (:handle (:string 255)))   (titleWidth :signed-integer)   (controlList (:handle :controlrecord))   (nextWindow (:pointer :windowrecord))   (windowPic (:handle :picture))   (refCon :signed-long)   )(def-mactype :cwindowpeek (find-mactype '(:pointer :cwindowrecord)))(defrecord CWindowRecord    (port :cgrafport)   (windowKind :signed-integer)   (visible :boolean)   (hilited :boolean)   (goAwayFlag :boolean)   (spareFlag :boolean)   (strucRgn (:handle :region))   (contRgn (:handle :region))   (updateRgn (:handle :region))   (windowDefProc :handle)   (dataHandle :handle)   (titleHandle (:handle (:string 255)))   (titleWidth :signed-integer)   (controlList (:handle :controlrecord))   (nextWindow (:pointer :cwindowrecord))   (windowPic (:handle :picture))   (refCon :signed-long)   )(defrecord (WStateData :handle)    (userState :rect)                            ; user state   (stdState :rect)                             ; standard state   )(def-mactype :wstatedataptr (find-mactype '(:pointer :wstatedata)))(def-mactype :wstatedatahandle (find-mactype '(:handle :wstatedata)))(def-mactype :auxwinptr (find-mactype '(:pointer :auxwinrec)))(def-mactype :auxwinhandle (find-mactype '(:handle :auxwinrec)))(defrecord (AuxWinRec :handle)    (awNext (:handle :auxwinrec))                ; handle to next AuxWinRec   (awOwner (:pointer :windowrecord))           ; ptr to window    (awCTable (:handle :colortable))             ; color table for this window   (reserved :unsigned-long)                    ;      (awFlags :signed-long)                       ; reserved for expansion   (awReserved (:handle :colortable))           ; reserved for expansion   (awRefCon :signed-long)                      ; user Constant   ); $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetAuxWin" ((theWindow (:pointer :windowrecord)) (awHndl (:pointer (:handle :auxwinrec))))   (:stack :boolean)   (:stack-trap #xAA42)); $ENDC(defconstant $wContentColor 0)(defconstant $wFrameColor 1)(defconstant $wTextColor 2)(defconstant $wHiliteColor 3)(defconstant $wTitleBarColor 4); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := WindowsIncludes; $ENDC                                         ; __WINDOWS__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'Windows);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:WINDOWS.patch(DEFCONSTANT $DRAGPATTERN 2612)