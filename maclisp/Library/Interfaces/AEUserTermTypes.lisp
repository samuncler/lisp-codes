(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:AEUserTermTypes.p"; at Tuesday June 6,1995 2:04:19 pm.; ;  	File:		AEUserTermTypes.p;  ;  	Contains:	AppleEvents AEUT resource format Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __AEUSERTERMTYPES__; $SETC __AEUSERTERMTYPES__ := 1; $I+; $SETC AEUserTermTypesIncludes := UsingIncludes; $SETC UsingIncludes := 1; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kAEUserTerminology :|aeut|)       ;   0x61657574  (defconstant $kAETerminologyExtension :|aete|)  ;   0x61657465  (defconstant $kAEScriptingSizeResource :|scsz|)(defconstant $kAEUTHasReturningParam 31)        ;  if event has a keyASReturning param (defconstant $kAEUTOptional 15)                 ;  if something is optional (defconstant $kAEUTlistOfItems 14)              ;  if property or reply is a list. (defconstant $kAEUTEnumerated 13)               ;  if property or reply is of an enumerated type. (defconstant $kAEUTReadWrite 12)                ;  if property is writable. (defconstant $kAEUTChangesState 12)             ;  if an event changes state. (defconstant $kAEUTTightBindingFunction 12)     ;  if this is a tight-binding precedence function. (defconstant $kAEUTApostrophe 3)                ;  if a term contains an apostrophe. (defconstant $kAEUTFeminine 2)                  ;  if a term is feminine gender. (defconstant $kAEUTMasculine 1)                 ;  if a term is masculine gender. (defconstant $kAEUTPlural 0)                    ;  if a term is plural. (defrecord TScriptingSizeResource    (scriptingSizeFlags :signed-integer)   ;;Changing field minstacksize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (minStackSize :unsigned-long)   ;;Changing field preferredstacksize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (preferredStackSize :unsigned-long)   ;;Changing field maxstacksize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (maxStackSize :unsigned-long)   ;;Changing field minheapsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (minHeapSize :unsigned-long)   ;;Changing field preferredheapsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (preferredHeapSize :unsigned-long)   ;;Changing field maxheapsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (maxHeapSize :unsigned-long)   ); 	If kLaunchToGetTerminology is 0, 'aete' is read directly from res file.  If set; 		to 1, then launch and use 'gdut' to get terminology. (defconstant $kLaunchToGetTerminology 32768); 	If kDontFindAppBySignature is 0, then find app with signature if lost.  If 1, ; 		then don't (defconstant $kDontFindAppBySignature 16384);  	If kAlwaysSendSubject 0, then send subject when appropriate. If 1, then every ; 		event has Subject Attribute (defconstant $kAlwaysSendSubject 8192);  old names for above bits. (defconstant $kReadExtensionTermsMask 32768); $ALIGN RESET; $POP; $SETC UsingIncludes := AEUserTermTypesIncludes; $ENDC                                         ; __AEUSERTERMTYPES__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'AEUserTermTypes)