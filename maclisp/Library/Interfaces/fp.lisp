(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:fp.p"; at Tuesday June 6,1995 2:09:21 pm.; ;  	File:		fp.p;  ;  	Copyright:	© 1994-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Version:	Universal Pascal, March 29, 1995 ; 	; 	Note:		The following file was hand converted from fp.h; 				See fp.h for more information and comments.; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Modification History;;;; 10/28/97 bill  Merge back in changes that shipped with 4.0;; -------------  4.1b1;; 10/11/96 bill  The first arg to #_modff is a :single-float, not an :unsigned-long;; -------------  4.0f1;; 03/27/96 bill  Uncomment the long double traps;;                x80tod returns a :double-float;;#|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __FP__; $SETC __FP__ := 1; $I+; $SETC fpIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC(defconstant $DOUBLE_SIZE 8)#|                                              ; $IFC GENERATINGPOWERPC (defconstant $LONG_DOUBLE_SIZE 16)(defconstant $DECIMAL_DIG 17)                   ;  does not exist for double-double  |#                                             ; $ELSEC(defconstant $DECIMAL_DIG 21)#|                                              ; $IFC GENERATING68881(defconstant $LONG_DOUBLE_SIZE 12) |#                                             ; $ELSEC(defconstant $LONG_DOUBLE_SIZE 10); $ENDC; $ENDC; ;                             Trigonometric functions                           ; ;; Warning: No calling method defined for this trap(deftrap-inline "_cos" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_sin" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_tan" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_acos" ((x :double-float))   :double-float   () )                                         ;   result is in [0,pi]          ;; Warning: No calling method defined for this trap(deftrap-inline "_asin" ((x :double-float))   :double-float   () )                                         ;   result is in [-pi/2,pi/2]    ;; Warning: No calling method defined for this trap(deftrap-inline "_atan" ((x :double-float))   :double-float   () )                                         ;   result is in [-pi/2,pi/2]    ;     atan2 computes the arc tangent of y/x in [-pi,pi] using the sign of;       both arguments to determine the quadrant of the computed value.         ;; Warning: No calling method defined for this trap(deftrap-inline "_atan2" ((y :double-float) (x :double-float))   :double-float   () ); ;                               Hyperbolic functions                            ; ;; Warning: No calling method defined for this trap(deftrap-inline "_cosh" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_sinh" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_tanh" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_acosh" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_asinh" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_atanh" ((x :double-float))   :double-float   () ); ;                               Exponential functions                           ; ;; Warning: No calling method defined for this trap(deftrap-inline "_exp" ((x :double-float))   :double-float   () );     expm1 computes the base e exponential of the argument minus 1,;       i. e., exp(x) - 1.  For small enough arguments, expm1 is expected;       to be more accurate than the straight forward computation of exp(x) - 1.;; Warning: No calling method defined for this trap(deftrap-inline "_expm1" ((x :double-float))   :double-float   () );       exp2 computes the base 2 exponential.                                 ;; Warning: No calling method defined for this trap(deftrap-inline "_exp2" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_frexp" ((x :double-float) (exponent (:pointer :signed-long)))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_ldexp" ((x :double-float) (n :signed-long))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_log" ((x :double-float))   :double-float   () );       log2 computes the base 2 logarithm.                                   ;; Warning: No calling method defined for this trap(deftrap-inline "_log2" ((x :double-float))   :double-float   () );     log1p computes the base e logorithm of 1 plus the argument,;       i. e., log (1 x).  For small enough arguments, log1p is expected;       to be more accurate than the straightforward computation of log (1+x).  ;; Warning: No calling method defined for this trap(deftrap-inline "_log1p" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_log10" ((x :double-float))   :double-float   () );     logb extracts the exponent of its argument, as a signed integral;       value. A subnormal argument is treated as though it were first;       normalized. Thus; ;       1 <= x  2^( - Logb ( x ) ) < 2                                         ;; Warning: No calling method defined for this trap(deftrap-inline "_logb" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_modf" ((x :double-float) (iptr (:pointer :double-float)))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_modff" ((x :single-float) (iptrf (:pointer :single-float)))   :single-float   () );     scalb computes x  2^n efficently.  This is not normally done by;       computing 2^n explicitly.                                               ;; Warning: No calling method defined for this trap(deftrap-inline "_scalb" ((x :double-float) (n :signed-long))   :double-float   () ); ;                      Power and absolute value functions                       ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fabs" ((x :double-float))   :double-float   () );     hypot computes the square root of the sum of the squares of its;       arguments, without undue overflow or underflow.                         ;; Warning: No calling method defined for this trap(deftrap-inline "_hypot" ((x :double-float) (y :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_pow" ((x :double-float) (y :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_sqrt" ((x :double-float))   :double-float   () ); ;                         Gamma and Error functions                             ; ;; Warning: No calling method defined for this trap(deftrap-inline "_erf" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_erfc" ((x :double-float))   :double-float   () )                                         ;    complementary error function   ;; Warning: No calling method defined for this trap(deftrap-inline "_gamma" ((x :double-float))   :double-float   () );     lgamma computes the base-e logarithm of the absolute value of;       gamma of its argument x, for x > 0.                                     ;; Warning: No calling method defined for this trap(deftrap-inline "_lgamma" ((x :double-float))   :double-float   () ); ;                         Nearest integer functions                             ; ;; Warning: No calling method defined for this trap(deftrap-inline "_ceil" ((x :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_floor" ((x :double-float))   :double-float   () );     the rint function rounds its argument to an integral value in floating;       point format, honoring the current rounding direction.                  ;; Warning: No calling method defined for this trap(deftrap-inline "_rint" ((x :double-float))   :double-float   () );     nearbyint differs from rint only in that it does not raise the;       inexact exception. It is the nearbyint function recommended by the;       IEEE floating-point standard 854.                                       ;; Warning: No calling method defined for this trap(deftrap-inline "_nearbyint" ((x :double-float))   :double-float   () );     the function rinttol rounds its argument to the nearest long using;       the current rounding direction.;       >>Note that if the rounded value is outside the range of long, then;       the result is undefined.                                                ;; Warning: No calling method defined for this trap(deftrap-inline "_rinttol" ((x :double-float))   :signed-long   () );     the round function rounds the argument to the nearest integral value;       in double format similar to the Fortran "anint" function.  That is:;       add half to the magnitude and chop.                                     ;; Warning: No calling method defined for this trap(deftrap-inline "_round" ((x :double-float))   :double-float   () );     roundtol is similar to the Fortran function nint or to the Pascal round;       >>Note that if the rounded value is outside the range of long, then;       the result is undefined.                                                ;; Warning: No calling method defined for this trap(deftrap-inline "_roundtol" ((round :double-float))   :signed-long   () );     trunc computes the integral value, in floating format, nearest to;       but no larger in magnitude than its argument.                           ;; Warning: No calling method defined for this trap(deftrap-inline "_trunc" ((x :double-float))   :double-float   () ); ;                             Remainder functions                               ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fmod" ((x :double-float) (y :double-float))   :double-float   () );     the following two functions compute the remainder.  remainder is required;       by the IEEE 754 floating point standard. The second form correponds to the;       SANE remainder; it stores into 'quotient' the 7 low-order bits of the;       integer quotient x/y, such that -127 <= quotient <= 127.                ;; Warning: No calling method defined for this trap(deftrap-inline "_remainder" ((x :double-float) (y :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_remquo" ((x :double-float) (y :double-float) (quo (:pointer :signed-long)))   :double-float   () ); ;                              Auxiliary functions                              ; ;; Warning: No calling method defined for this trap(deftrap-inline "_copysign" ((x :double-float) (y :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_nan" ((tagp :pointer))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_nanf" ((tagp :pointer))   :single-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_nextafterd" ((x :double-float) (y :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_nextafterf" ((x :single-float) (y :single-float))   :single-float   () ); ;                       Max, Min and Positive Difference                        ; ;      These extension functions correspond to the standard functions, dim;       max and min.; ;       The fdim function determines the 'positive difference' between its;       arguments: ( x - y, if x > y ), ( +0, if x <= y ).  If one argument is;       NaN, then fdim returns that NaN.  if both arguments are NaNs, then fdim;       returns the first argument.                                             ;; Warning: No calling method defined for this trap(deftrap-inline "_fdim" ((x :double-float) (y :double-float))   :double-float   () );     max and min return the maximum and minimum of their two arguments,;       respectively.  They correspond to the max and min functions in FORTRAN.;       NaN arguments are treated as missing data.  If one argument is NaN and;       the other is a number, then the number is returned.  If both are NaNs;       then the first argument is returned.                                    ;; Warning: No calling method defined for this trap(deftrap-inline "_fmax" ((x :double-float) (y :double-float))   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_fmin" ((x :double-float) (y :double-float))   :double-float   () ); ;                               Inquiry functions                               ; (defconstant $FP_SNAN 0)                        ;       signaling NaN                         (defconstant $FP_QNAN 1)                        ;       quiet NaN                             (defconstant $FP_INFINITE 2)                    ;       + or - infinity                       (defconstant $FP_ZERO 3)                        ;       + or - zero                           (defconstant $FP_NORMAL 4)                      ;       all normal numbers                    (defconstant $FP_SUBNORMA 5)                    ;       denormal numbers                      ;; Warning: No calling method defined for this trap(deftrap-inline "___fpclassifyd" ((x :double-float))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "___fpclassifyf" ((x :single-float))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "___isnormald" ((x :double-float))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "___isnormalf" ((x :single-float))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "___isfinited" ((x :double-float))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "___isfinitef" ((x :single-float))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "___isnand" ((x :double-float))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "___isnanf" ((x :single-float))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "___signbitd" ((x :double-float))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "___signbitf" ((x :single-float))   :signed-long   () ); ;                               Non NCEG extensions                             ;                                               ; $IFC UNDEFINED __NOEXTENSIONS__ ; ;                               Financial functions                             ;                                               ;      compound computes the compound interest factor "(1 + rate) ^ periods";       more accurately than the straightforward computation with the Power;       function.  This is SANE's compound function.                            ;; Warning: No calling method defined for this trap(deftrap-inline "___inf" ()   :double-float   () );; Warning: No calling method defined for this trap(deftrap-inline "_compound" ((rate :double-float) (periods :double-float))   :double-float   () );     The function annuity computes the present value factor for an annuity ;       "( 1 - ( 1 + rate ) ^ ( - periods ) ) / rate" more accurately than the;       straightforward computation with the Power function. This is SANE's ;       annuity function.                                                       ;; Warning: No calling method defined for this trap(deftrap-inline "_annuity" ((rate :double-float) (periods :double-float))   :double-float   () ); ;                               Random function                                 ; ;; Warning: No calling method defined for this trap(deftrap-inline "_randomx" ((x (:pointer :double-float)))   :double-float   () ); ;                               Relational operator                             ; (def-mactype :relop (find-mactype ':signed-integer));       relational operator      (defconstant $GREATERTHAN 0)(defconstant $LESSTHAN 1)(defconstant $EQUALTO 2)(defconstant $UNORDERED 3);; Warning: No calling method defined for this trap(deftrap-inline "_relation" ((x :double-float) (y :double-float))   :signed-integer   () ); ;                          Binary to decimal conversions                        ; #|                                              ; $IFC GENERATINGPOWERPC (defconstant $SIGDIGLEN 36)                     ;  significant decimal digits  |#                                             ; $ELSEC(defconstant $SIGDIGLEN 20)                     ;  significant decimal digits ; $ENDC(defconstant $DECSTROUTLEN 80)                  ;  max length for dec2str output (def-mactype :decimalkind (find-mactype ':unsigned-byte))(defconstant $FloatDecimal 0)(defconstant $FixedDecimal 1);      The decimal record type provides an intermediate unpacked form for;       programmers who wish to do their own parsing of numeric input or;       formatting of numeric output.                                         ; $ALIGN MAC68K(defrecord Decimal    (sgn (:unsigned-integer :range 0 1))         ;  sign 0 for +, 1 for -     (exp :signed-integer)   (sig (:string #$SIGDIGLEN))   ); $ALIGN RESET;     Each conversion to a decimal string is controlled by a decform;       structure.  The style is either FLOATDECIMAL or FIXEDDECIMAL defined;       above.  The value of digits is the number of significant digits for;       FLOATDECIMAL.  The value of digits for FIXEDDECIMAL is the number of;       digits to the right of the decimal point.                               ; $ALIGN MAC68K(defrecord Decform    (style :unsigned-byte)   (digits :signed-integer)   ); $ALIGN RESET;     Each conversion to a decimal record d via the function call num2dec is ;       controlled by a decform record f (defined earlier), to a double_t x.    ; CONST;; Warning: No calling method defined for this trap(deftrap-inline "_num2dec" ((f (:pointer :decform)) (x :double-float) (d (:pointer :decimal)))   nil   () );  dec2num converts a decimal record d to a double_t value.          ; CONST;; Warning: No calling method defined for this trap(deftrap-inline "_dec2num" ((d (:pointer :decimal)))   :double-float   () );     The MathLib formatter dec2str is controlled by a decform f.  Input d is;       a decimal record.                                                       ; CONST                                         ; CONST;; Warning: No calling method defined for this trap(deftrap-inline "_dec2str" ((f (:pointer :decform)) (d (:pointer :decimal)) (s :pointer))   nil   () );     The function str2dec is the MathLib scanner.                            ;; Warning: No calling method defined for this trap(deftrap-inline "_str2dec" ((s :pointer) (ix (:pointer :signed-integer)) (d (:pointer :decimal)) (vp (:pointer :signed-integer)))   nil   () ); $IFC GENERATING68K ;     dec2d is similar to dec2num except a double is returned on 68k platforms ; CONST;; Warning: No calling method defined for this trap(deftrap-inline "_dec2d" ((d (:pointer :decimal)))   :double-float   () ); $ENDC;     dec2f is similar to dec2num except a float is returned.                 ; CONST;; Warning: No calling method defined for this trap(deftrap-inline "_dec2f" ((d (:pointer :decimal)))   :single-float   () );     dec2s is similar to dec2num except a short is returned.                 ; CONST;; Warning: No calling method defined for this trap(deftrap-inline "_dec2s" ((d (:pointer :decimal)))   :signed-integer   () );     dec2l is similar to dec2num except a long is returned.                  ; CONST;; Warning: No calling method defined for this trap(deftrap-inline "_dec2l" ((d (:pointer :decimal)))   :signed-long   () ); ;                     68k-only Transfer Function Prototypes                     ; ; $IFC GENERATING68K ; CONST;; Warning: No calling method defined for this trap(deftrap-inline "_x96tox80" ((x96 (:pointer :_extended96)) (x80 (:pointer :pointer)))   nil   () ); CONST;; Warning: No calling method defined for this trap(deftrap-inline "_x80tox96" ((x80 (:pointer :pointer)) (x96 (:pointer :_extended96)))   nil   () ); $ENDC                                         ;  GENERATING68K ; $ENDC                                         ; __NOEXTENSIONS__; ;                          PowerPC-only Function Prototypes                     ;                                               ; $IFC GENERATINGPOWERPC ;; No calling method defined for this trap(deftrap-inline "_cosl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_sinl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_tanl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_acosl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_asinl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_atanl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_atan2l" ((y :longdouble) (x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_coshl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_sinhl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_tanhl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_acoshl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_asinhl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_atanhl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_expl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_expm1l" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_exp2l" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_frexpl" ((x :longdouble) (exponent (:pointer :signed-long)))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_ldexpl" ((x :longdouble) (n :signed-long))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_logl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_log1pl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_log10l" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_log2l" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_logbl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_scalbl" ((x :longdouble) (n :signed-long))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_fabsl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_hypotl" ((x :longdouble) (y :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_powl" ((x :longdouble) (y :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_sqrtl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_erfl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_erfcl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_gammal" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_lgammal" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_ceill" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_floorl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_rintl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_nearbyintl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_rinttoll" ((x :longdouble))   :signed-long   () );; No calling method defined for this trap(deftrap-inline "_roundl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_roundtoll" ((round :longdouble))   :signed-long   () );; No calling method defined for this trap(deftrap-inline "_truncl" ((x :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_remainderl" ((x :longdouble) (y :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_remquol" ((x :longdouble) (y :longdouble) (quo (:pointer :signed-long)))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_copysignl" ((x :longdouble) (y :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_fdiml" ((x :longdouble) (y :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_fmaxl" ((x :longdouble) (y :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_fminl" ((x :longdouble) (y :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_modfl" ((x :longdouble) (iptrl (:pointer :longdouble)))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_nanl" ((tagp :pointer))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "_nextafterl" ((x :longdouble) (y :longdouble))   :longdouble   () );; No calling method defined for this trap(deftrap-inline "___fpclassify" ((x :longdouble))   :signed-long   () );; No calling method defined for this trap(deftrap-inline "___isnormal" ((x :longdouble))   :signed-long   () );; No calling method defined for this trap(deftrap-inline "___isfinite" ((x :longdouble))   :signed-long   () );; No calling method defined for this trap(deftrap-inline "___isnan" ((x :longdouble))   :signed-long   () );; No calling method defined for this trap(deftrap-inline "___signbit" ((x :longdouble))   :signed-long   () ); $IFC UNDEFINED __NOEXTENSIONS__ ;; No calling method defined for this trap(deftrap-inline "_relationl" ((x :longdouble) (y :longdouble))   :signed-integer   () );; No calling method defined for this trap(deftrap-inline "_x80told" ((x80 :pointer) (x (:pointer :longdouble)))   nil   () );; No calling method defined for this trap(deftrap-inline "_ldtox80" ((x :longdouble) (x80 (:pointer :pointer)))   nil   () );     MathLib v2 has two new transfer functions: x80tod and dtox80.  They can ;       be used to directly transform 68k 80-bit extended data types to double;       and back for PowerPC based machines without using the functions;       x80told or ldtox80.  Double rounding may occur.                         ; ; CONST;; No calling method defined for this trap(deftrap-inline "_x80tod" ((x80 (:pointer :pointer)))   :double-float   () ); CONST;; No calling method defined for this trap(deftrap-inline "_dtox80" ((x (:pointer :pointer)) (x80 (:pointer :pointer)))   nil   () ); CONST;; No calling method defined for this trap(deftrap-inline "_num2decl" ((f (:pointer :decform)) (x :longdouble) (d (:pointer :decimal)))   nil   () ); CONST;; No calling method defined for this trap(deftrap-inline "_dec2numl" ((d (:pointer :decimal)))   :longdouble   () ); $ENDC                                         ;  __NOEXTENSIONS__                                              ; $ENDC;  GENERATINGPOWERPC ; $SETC UsingIncludes := fpIncludes; $ENDC                                         ; __FP__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'fp); Warning: Did not recognize these types or records: (longdouble)