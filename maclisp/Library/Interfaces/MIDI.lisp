(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:MIDI.p"; at Tuesday June 6,1995 2:13:55 pm.; ;  	File:		MIDI.p;  ;  	Contains:	MIDI Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __MIDI__; $SETC __MIDI__ := 1; $I+; $SETC MIDIIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __ERRORS__|#(require-interface 'Errors)#|                                              ; $I Errors.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $midiToolNum 4)                    ; tool number of MIDI Manager for SndDispVersion call(defconstant $midiMaxNameLen 31)                ; maximum number of characters in port and client names;  Time formats (defconstant $midiFormatMSec 0)                 ; milliseconds(defconstant $midiFormatBeats 1)                ; beats(defconstant $midiFormat24fpsBit 2)             ; 24 frames/sec.(defconstant $midiFormat25fpsBit 3)             ; 25 frames/sec.(defconstant $midiFormat30fpsDBit 4)            ; 30 frames/sec. drop-frame(defconstant $midiFormat30fpsBit 5)             ; 30 frames/sec.(defconstant $midiFormat24fpsQF 6)              ; 24 frames/sec. longInt format (defconstant $midiFormat25fpsQF 7)              ; 25 frames/sec. longInt format (defconstant $midiFormat30fpsDQF 8)             ; 30 frames/sec. drop-frame longInt format (defconstant $midiFormat30fpsQF 9)              ; 30 frames/sec. longInt format (defconstant $midiInternalSync 0)               ; internal sync(defconstant $midiExternalSync 1)               ; external sync;  Port types(defconstant $midiPortTypeTime 0)               ; time port(defconstant $midiPortTypeInput 1)              ; input port(defconstant $midiPortTypeOutput 2)             ; output port(defconstant $midiPortTypeTimeInv 3)            ; invisible time port;  OffsetTimes  (defconstant $midiGetEverything #x7FFFFFFF)     ; get all packets, regardless of time stamps(defconstant $midiGetNothing #x80000000)        ; get no packets, regardless of time stamps(defconstant $midiGetCurrent #x0)               ; get current packets only;     MIDI data and messages are passed in MIDIPacket records (see below).;     The first byte of every MIDIPacket contains a set of flags; ;     bits 0-1    00 = new MIDIPacket, not continued;                      01 = begining of continued MIDIPacket;                      10 = end of continued MIDIPacket;                      11 = continuation;     bits 2-3     reserved; ;     bits 4-6      000 = packet contains MIDI data; ;                   001 = packet contains MIDI Manager message; ;     bit 7         0 = MIDIPacket has valid stamp;                   1 = stamp with current clock; (defconstant $midiContMask #x3)(defconstant $midiNoCont #x0)(defconstant $midiStartCont #x1)(defconstant $midiMidCont #x3)(defconstant $midiEndCont #x2)(defconstant $midiTypeMask #x70)(defconstant $midiMsgType #x0)(defconstant $midiMgrType #x10)(defconstant $midiTimeStampMask #x80)(defconstant $midiTimeStampCurrent #x80)(defconstant $midiTimeStampValid #x0);  MIDIPacket command words (the first word in the data field for midiMgrType messages) (defconstant $midiOverflowErr #x1)(defconstant $midiSCCErr #x2)(defconstant $midiPacketErr #x3); all command words less than this value are error indicators(defconstant $midiMaxErr #xFF);  Valid results to be returned by readHooks (defconstant $midiKeepPacket 0)(defconstant $midiMorePacket 1)(defconstant $midiNoMorePacket 2);  Driver calls (defconstant $midiOpenDriver 1)(defconstant $midiCloseDriver 2)(defrecord MIDIPacket    (flags :unsigned-byte)   (len :unsigned-byte)   (tStamp :signed-long)   (data (:array :unsigned-byte 249))   )(def-mactype :midipacketptr (find-mactype '(:pointer :midipacket)))(def-mactype :midireadhookprocptr (find-mactype ':pointer));  FUNCTION MIDIReadHook(myPacket: MIDIPacketPtr; myRefCon: LONGINT): INTEGER; (def-mactype :miditimeprocptr (find-mactype ':pointer));  PROCEDURE MIDITime(curTime: LONGINT; myRefCon: LONGINT); (def-mactype :midireadhookupp (find-mactype ':pointer))(def-mactype :miditimeupp (find-mactype ':pointer))(defrecord MIDIClkInfo    (syncType :signed-integer)                   ; synchronization external/internal   (curTime :signed-long)                       ; current value of port's clock   (format :signed-integer)                     ; time code format   )(defrecord MIDIIDRec    (clientID :ostype)   (portID :ostype)   )(defrecord (MIDIPortInfo :handle)    (portType :signed-integer)                   ; type of port   (timeBase :midiidrec)                        ; MIDIIDRec for time base   (numConnects :signed-integer)                ; number of connections   (cList (:array :midiidrec 1))                ; ARRAY [1..numConnects] of MIDIIDRec   )(def-mactype :midiportinfoptr (find-mactype '(:pointer :midiportinfo)))(def-mactype :midiportinfohdl (find-mactype '(:handle :midiportinfo)))(def-mactype :midiportinfohandle (find-mactype '(:handle :midiportinfo)))(defrecord MIDIPortParams    (portID :ostype)                             ; ID of port, unique within client   (portType :signed-integer)                   ; Type of port - input, output, time, etc.   (timeBase :signed-integer)                   ; refnum of time base, 0 if none   (offsetTime :signed-long)                    ; offset for current time stamps   (readHook :pointer)                          ; routine to call when input data is valid   (refCon :signed-long)                        ; refcon for port (for client use)   (initClock :midiclkinfo)                     ; initial settings for a time base   (name (:string 255))                         ; name of the port, This is a real live string, not a ptr.   )(def-mactype :midiportparamsptr (find-mactype '(:pointer :midiportparams)))(defrecord (MIDIIDList :handle)    (numIDs :signed-integer)   (list (:array :ostype 1))   )(def-mactype :midiidlistptr (find-mactype '(:pointer :midiidlist)))(def-mactype :midiidlisthdl (find-mactype '(:handle :midiidlist)))(def-mactype :midiidlisthandle (find-mactype '(:handle :midiidlist))); $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIVersion" ()   (:stack :numversion)   (:stack-trap #xA800 :d0 (+ (ash 0 16) 4))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISignIn" ((clientID :ostype) (refCon :signed-long) (icon :handle) (name (:string 255)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 4 16) 4) clientID refCon icon name)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISignOut" ((clientID :ostype))   nil   (:stack-trap #xA800 :d0 (+ (ash 8 16) 4) clientID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetClients" ()   (:stack (:handle :midiidlist))   (:stack-trap #xA800 :d0 (+ (ash 12 16) 4))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetClientName" ((clientID :ostype) (name (:pointer (:string 255))))   nil   (:stack-trap #xA800 :d0 (+ (ash 16 16) 4) clientID name)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetClientName" ((clientID :ostype) (name (:string 255)))   nil   (:stack-trap #xA800 :d0 (+ (ash 20 16) 4) clientID name)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetPorts" ((clientID :ostype))   (:stack (:handle :midiidlist))   (:stack-trap #xA800 :d0 (+ (ash 24 16) 4) clientID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIAddPort" ((clientID :ostype) (BufSize :signed-integer) (refnum (:pointer :signed-integer)) (init (:pointer :midiportparams)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 28 16) 4) clientID BufSize refnum init)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetPortInfo" ((clientID :ostype) (portID :ostype))   (:stack (:handle :midiportinfo))   (:stack-trap #xA800 :d0 (+ (ash 32 16) 4) clientID portID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIConnectData" ((srcClID :ostype) (srcPortID :ostype) (dstClID :ostype) (dstPortID :ostype))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 36 16) 4) srcClID srcPortID dstClID dstPortID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIUnConnectData" ((srcClID :ostype) (srcPortID :ostype) (dstClID :ostype) (dstPortID :ostype))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 40 16) 4) srcClID srcPortID dstClID dstPortID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIConnectTime" ((srcClID :ostype) (srcPortID :ostype) (dstClID :ostype) (dstPortID :ostype))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 44 16) 4) srcClID srcPortID dstClID dstPortID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIUnConnectTime" ((srcClID :ostype) (srcPortID :ostype) (dstClID :ostype) (dstPortID :ostype))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 48 16) 4) srcClID srcPortID dstClID dstPortID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIFlush" ((refnum :signed-integer))   nil   (:stack-trap #xA800 :d0 (+ (ash 52 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetReadHook" ((refnum :signed-integer))   (:stack :pointer)   (:stack-trap #xA800 :d0 (+ (ash 56 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetReadHook" ((refnum :signed-integer) (hook :pointer))   nil   (:stack-trap #xA800 :d0 (+ (ash 60 16) 4) refnum hook)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetPortName" ((clientID :ostype) (portID :ostype) (name (:pointer (:string 255))))   nil   (:stack-trap #xA800 :d0 (+ (ash 64 16) 4) clientID portID name)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetPortName" ((clientID :ostype) (portID :ostype) (name (:string 255)))   nil   (:stack-trap #xA800 :d0 (+ (ash 68 16) 4) clientID portID name)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIWakeUp" ((refnum :signed-integer) (time :signed-long) (period :signed-long) (timeProc :pointer))   nil   (:stack-trap #xA800 :d0 (+ (ash 72 16) 4) refnum time period timeProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIRemovePort" ((refnum :signed-integer))   nil   (:stack-trap #xA800 :d0 (+ (ash 76 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetSync" ((refnum :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 80 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetSync" ((refnum :signed-integer) (sync :signed-integer))   nil   (:stack-trap #xA800 :d0 (+ (ash 84 16) 4) refnum sync)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetCurTime" ((refnum :signed-integer))   (:stack :signed-long)   (:stack-trap #xA800 :d0 (+ (ash 88 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetCurTime" ((refnum :signed-integer) (time :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 92 16) 4) refnum time)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIStartTime" ((refnum :signed-integer))   nil   (:stack-trap #xA800 :d0 (+ (ash 96 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIStopTime" ((refnum :signed-integer))   nil   (:stack-trap #xA800 :d0 (+ (ash 100 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIPoll" ((refnum :signed-integer) (offsetTime :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 104 16) 4) refnum offsetTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIWritePacket" ((refnum :signed-integer) (packet (:pointer :midipacket)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 108 16) 4) refnum packet)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIWorldChanged" ((clientID :ostype))   (:stack :boolean)   (:stack-trap #xA800 :d0 (+ (ash 112 16) 4) clientID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetOffsetTime" ((refnum :signed-integer))   (:stack :signed-long)   (:stack-trap #xA800 :d0 (+ (ash 116 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetOffsetTime" ((refnum :signed-integer) (offsetTime :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 120 16) 4) refnum offsetTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIConvertTime" ((srcFormat :signed-integer) (dstFormat :signed-integer) (time :signed-long))   (:stack :signed-long)   (:stack-trap #xA800 :d0 (+ (ash 124 16) 4) srcFormat dstFormat time)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetRefCon" ((refnum :signed-integer))   (:stack :signed-long)   (:stack-trap #xA800 :d0 (+ (ash 128 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetRefCon" ((refnum :signed-integer) (refCon :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 132 16) 4) refnum refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetClRefCon" ((clientID :ostype))   (:stack :signed-long)   (:stack-trap #xA800 :d0 (+ (ash 136 16) 4) clientID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetClRefCon" ((clientID :ostype) (refCon :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 140 16) 4) clientID refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetTCFormat" ((refnum :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 144 16) 4) refnum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetTCFormat" ((refnum :signed-integer) (format :signed-integer))   nil   (:stack-trap #xA800 :d0 (+ (ash 148 16) 4) refnum format)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDISetRunRate" ((refnum :signed-integer) (rate :signed-integer) (time :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 152 16) 4) refnum rate time)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MIDIGetClientIcon" ((clientID :ostype))   (:stack :handle)   (:stack-trap #xA800 :d0 (+ (ash 156 16) 4) clientID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndDispVersion" ((toolnum :signed-integer))   (:stack :signed-long)   (:stack-trap #xA800 :d0 (+ (ash 0 16) 0) toolnum)); $ENDC(defconstant $uppMIDIReadHookProcInfo #x3E0)    ;  FUNCTION (4 byte param, 4 byte param): 2 byte result; (defconstant $uppMIDITimeProcInfo #x3C0)        ;  PROCEDURE (4 byte param, 4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewMIDIReadHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewMIDITimeProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallMIDIReadHookProc" ((myPacket (:pointer :midipacket)) (myRefCon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallMIDITimeProc" ((curTime :signed-long) (myRefCon :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := MIDIIncludes; $ENDC                                         ; __MIDI__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'MIDI)