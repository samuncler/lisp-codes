(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:CodeFragments.p"; at Tuesday June 6,1995 2:06:30 pm.; ;  	File:		CodeFragments.p;  ;  	Contains:	Code Fragment Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __CODEFRAGMENTS__; $SETC __CODEFRAGMENTS__ := 1; $I+; $SETC CodeFragmentsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC; 	MixedMode.p													; 	OSUtils.p													; 		Memory.p												; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kCFragResourceType :|cfrg|)(defconstant $kCFragResourceID 0)(defconstant $kCFragLibraryFileType :|shlb|)(def-mactype :cfragarchitecture (find-mactype ':ostype))(defconstant $kPowerPCCFragArch :|pwpc|)(defconstant $kMotorola68KCFragArch :|m68k|)(defconstant $kAnyCFragArch #x3F3F3F3F)#|                                              ; $IFC GENERATINGPOWERPC (defconstant $kCurrentCFragArch #$kPowerPCCFragArch) |#                                             ; $ENDC; $IFC GENERATING68K (defconstant $kCurrentCFragArch #$kMotorola68KCFragArch); $ENDC(def-mactype :cfragconnectionid (find-mactype ':unsigned-long))(def-mactype :cfragclosureid (find-mactype ':unsigned-long))(def-mactype :cfragcontextid (find-mactype ':unsigned-long))(def-mactype :cfragcontainerid (find-mactype ':unsigned-long))(def-mactype :cfragloadoptions (find-mactype ':unsigned-long))(defconstant $kLoadCFrag #x1)                   ;  Try to use existing copy, load if not found.(defconstant $kFindCFrag #x2)                   ;  Try find an existing copy, don't load if not found.(defconstant $kNewCFragCopy #x5)                ;  Load a new copy whether one already exists or not.(defconstant $kInplaceCFrag #x80)               ;  Use data sections directly in the container.(defconstant $kUnresolvedCFragSymbolAddress 0)(def-mactype :cfragsymbolclass (find-mactype ':unsigned-byte))(defconstant $kCodeCFragSymbol 0)(defconstant $kDataCFragSymbol 1)(defconstant $kTVectorCFragSymbol 2)(defconstant $kTOCCFragSymbol 3)(defconstant $kGlueCFragSymbol 4)(def-mactype :cfragusage (find-mactype ':unsigned-byte))(defconstant $kImportLibraryCFrag 0)            ;  Standard CFM import library.(defconstant $kApplicationCFrag 1)              ;  Macintosh application.(defconstant $kDropInAdditionCFrag 2)           ;  Private extension to an application or library.(defconstant $kIsCompleteCFrag 0)               ;  A "base" fragment, not an update.(defconstant $kFirstCFragUpdate 1)              ;  The first update, others are numbered 2, 3, ...(def-mactype :cfraglocatorkind (find-mactype ':unsigned-byte))(defconstant $kMemoryCFragLocator 0)            ;  Container is already addressable.(defconstant $kDataForkCFragLocator 1)          ;  Container is in a file's data fork.(defconstant $kResourceCFragLocator 2)          ;  Container is in a file's resource fork.(defconstant $kByteStreamCFragLocator 3)        ;  Container is in a given file fork as a byte stream.(defconstant $kCFragGoesToEOF 0)(defrecord CFragOldMemoryLocator    (address :pointer)   (length :unsigned-long)   (inPlace :boolean)   (reserved3a (:array :unsigned-byte 3))       ;  ! Do not use this!   )(defrecord CFragHFSDiskFlatLocator    (fileSpec (:pointer :fsspec))   (offset :unsigned-long)   (length :unsigned-long)   );  ! This must have a file specification at the same offset as a data fork locator!(defrecord CFragHFSSegmentedLocator    (fileSpec (:pointer :fsspec))   (rsrcType :ostype)   (rsrcID :signed-integer)   (reserved2a :unsigned-integer)               ;  ! Do not use this!   )(defrecord CFragHFSLocator    (where :signed-long)                         ;  Really of type CFragLocatorKind.   (:variant       (      (onDisk :cfraghfsdiskflatlocator)         ;  First so debugger shows this form.      )      (      (inMem :cfragoldmemorylocator)      )      (      (inSegs :cfraghfssegmentedlocator)      )      )   )(def-mactype :cfraghfslocatorptr (find-mactype '(:pointer :cfraghfslocator)));  -------------------------------------------------------------------------------------------;  The parameter block passed to fragment initialization functions.  The locator and name;  pointers are valid only for the duration of the initialization routine.  I.e. if you want;  to save the locator or name, save the contents, not the pointers.  Initialization routines;  take one parameter, a pointer to the parameter block, and return a success/failure result.;  ! Note that the initialization function returns an OSErr.  Any result other than noErr will;  ! cause the entire load to be aborted at that point.(defrecord CFragInitBlock    (contextID :unsigned-long)   (closureID :unsigned-long)   (connectionID :unsigned-long)   (fragLocator :cfraghfslocator)   (libName (:pointer (:string 255)))   (reserved4a :unsigned-long)                  ;  ! Do not use this!   (reserved4b :unsigned-long)                  ;  ! Do not use this!   (reserved4c :unsigned-long)                  ;  ! Do not use this!   (reserved4d :unsigned-long)                  ;  ! Do not use this!   )(def-mactype :cfraginitblockptr (find-mactype '(:pointer :cfraginitblock)))(def-mactype :cfraginitfunction (find-mactype ':pointer));  FUNCTION ((CONST)VAR theInitBlock: CFragInitBlock): OSErr; (def-mactype :cfragtermroutine (find-mactype ':pointer));  PROCEDURE ; (def-mactype :cfraginitfunctionptr (find-mactype '(:pointer :pointer)))(def-mactype :cfragtermroutineptr (find-mactype '(:pointer :pointer)));  §;  ===========================================================================================;  Routines;  ========; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetSharedLibrary" ((libName (:string 63)) (archType :ostype) (loadFlags :unsigned-long) (connID (:pointer :unsigned-long)) (mainAddr (:pointer :pointer)) (errMessage (:pointer (:string 255))))   (:stack :signed-integer)   (:stack-trap #xAA5A libName archType loadFlags connID mainAddr errMessage (1 :signed-integer))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetDiskFragment" ((fileSpec (:pointer :fsspec)) (offset :unsigned-long) (length :unsigned-long) (fragName (:string 63)) (loadFlags :unsigned-long) (connID (:pointer :unsigned-long)) (mainAddr (:pointer :pointer)) (errMessage (:pointer (:string 255))))   (:stack :signed-integer)   (:stack-trap #xAA5A fileSpec offset length fragName loadFlags connID mainAddr errMessage (2 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetMemFragment" ((memAddr :pointer) (length :unsigned-long) (fragName (:string 63)) (loadFlags :unsigned-long) (connID (:pointer :unsigned-long)) (mainAddr (:pointer :pointer)) (errMessage (:pointer (:string 255))))   (:stack :signed-integer)   (:stack-trap #xAA5A memAddr length fragName loadFlags connID mainAddr errMessage (3 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_CloseConnection" ((connID (:pointer :unsigned-long)))   (:stack :signed-integer)   (:stack-trap #xAA5A connID (4 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_FindSymbol" ((connID :unsigned-long) (symName (:string 255)) (symAddr (:pointer :pointer)) (symClass (:pointer :unsigned-byte)))   (:stack :signed-integer)   (:stack-trap #xAA5A connID symName symAddr symClass (5 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_CountSymbols" ((connID :unsigned-long) (symCount (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAA5A connID symCount (6 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetIndSymbol" ((connID :unsigned-long) (symIndex :signed-long) (symName (:pointer (:string 255))) (symAddr (:pointer :pointer)) (symClass (:pointer :unsigned-byte)))   (:stack :signed-integer)   (:stack-trap #xAA5A connID symIndex symName symAddr symClass (7 :signed-integer))); $ENDC; $IFC OLDROUTINENAMES (def-mactype :connectionid (find-mactype ':unsigned-long))(def-mactype :loadflags (find-mactype ':unsigned-long))(def-mactype :symclass (find-mactype ':unsigned-byte))(%define-record :memfragment (find-record-descriptor :cfragoldmemorylocator))(%define-record :diskfragment (find-record-descriptor :cfraghfsdiskflatlocator))(%define-record :segmentedfragment (find-record-descriptor :cfraghfssegmentedlocator))(%define-record :fragmentlocator (find-record-descriptor :cfraghfslocator))(def-mactype :fragmentlocatorptr (find-mactype '(:pointer :cfraghfslocator)))(%define-record :initblock (find-record-descriptor :cfraginitblock))(def-mactype :initblockptr (find-mactype '(:pointer :cfraginitblock)))(def-mactype :connectioninitializationroutine (find-mactype ':pointer))(def-mactype :connectionterminationroutine (find-mactype ':pointer))(defconstant $kPowerPCArch #$kPowerPCCFragArch)(defconstant $kMotorola68KArch #$kMotorola68KCFragArch)(defconstant $kAnyArchType #$kAnyCFragArch)(defconstant $kNoLibName 0)(defconstant $kNoConnectionID 0)(defconstant $kLoadLib #$kLoadCFrag)(defconstant $kFindLib #$kFindCFrag)(defconstant $kLoadNewCopy #$kNewCFragCopy)(defconstant $kUseInPlace #$kInplaceCFrag)(defconstant $kCodeSym #$kCodeCFragSymbol)(defconstant $kDataSym #$kDataCFragSymbol)(defconstant $kTVectSym #$kTVectorCFragSymbol)(defconstant $kTOCSym #$kTOCCFragSymbol)(defconstant $kGlueSym #$kGlueCFragSymbol)(defconstant $kInMem #$kMemoryCFragLocator)(defconstant $kOnDiskFlat #$kDataForkCFragLocator)(defconstant $kOnDiskSegmented #$kResourceCFragLocator)(defconstant $kIsLib #$kImportLibraryCFrag)(defconstant $kIsApp #$kApplicationCFrag)(defconstant $kIsDropIn #$kDropInAdditionCFrag)(defconstant $kFullLib #$kIsCompleteCFrag)(defconstant $kUpdateLib #$kFirstCFragUpdate)(defconstant $kWholeFork #$kCFragGoesToEOF)(defconstant $kCFMRsrcType #$kCFragResourceType)(defconstant $kCFMRsrcID #$kCFragResourceID)(defconstant $kSHLBFileType #$kCFragLibraryFileType)(defconstant $kUnresolvedSymbolAddress #$kUnresolvedCFragSymbolAddress)(defconstant $kPowerPC #$kPowerPCCFragArch)(defconstant $kMotorola68K #$kMotorola68KCFragArch); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := CodeFragmentsIncludes; $ENDC                                         ; __CODEFRAGMENTS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'CodeFragments)