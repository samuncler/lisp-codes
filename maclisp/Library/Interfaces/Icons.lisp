(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Icons.p"; at Tuesday June 6,1995 2:11:36 pm.; ;  	File:		Icons.p;  ;  	Contains:	Icon Utilities Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __ICONS__; $SETC __ICONS__ := 1; $I+; $SETC IconsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	MixedMode.p													; 	QuickdrawText.p												; $PUSH; $ALIGN MAC68K; $LibExport+;  The following are icons for which there are both icon suites and SICNs. (defconstant $genericDocumentIconResource -4000)(defconstant $genericStationeryIconResource -3985)(defconstant $genericEditionFileIconResource -3989)(defconstant $genericApplicationIconResource -3996)(defconstant $genericDeskAccessoryIconResource -3991)(defconstant $genericFolderIconResource -3999)(defconstant $privateFolderIconResource -3994)(defconstant $floppyIconResource -3998)(defconstant $trashIconResource -3993);  The following are icons for which there are SICNs only. (defconstant $desktopIconResource -3992)(defconstant $openFolderIconResource -3997)(defconstant $genericHardDiskIconResource -3995)(defconstant $genericFileServerIconResource -3972)(defconstant $genericSuitcaseIconResource -3970)(defconstant $genericMoverObjectIconResource -3969);  The following are icons for which there are icon suites only. (defconstant $genericPreferencesIconResource -3971)(defconstant $genericQueryDocumentIconResource -16506)(defconstant $genericExtensionIconResource -16415)(defconstant $systemFolderIconResource -3983)(defconstant $appleMenuFolderIconResource -3982)(defconstant $startupFolderIconResource -3981)(defconstant $ownedFolderIconResource -3980)(defconstant $dropFolderIconResource -3979)(defconstant $sharedFolderIconResource -3978)(defconstant $mountedFolderIconResource -3977)(defconstant $controlPanelFolderIconResource -3976)(defconstant $printMonitorFolderIconResource -3975)(defconstant $preferencesFolderIconResource -3974)(defconstant $extensionsFolderIconResource -3973)(defconstant $fontsFolderIconResource -3968)(defconstant $fullTrashIconResource -3984)(defconstant $large1BitMask :|ICN#|)(defconstant $large4BitData :|icl4|)(defconstant $large8BitData :|icl8|)(defconstant $small1BitMask :|ics#|)(defconstant $small4BitData :|ics4|)(defconstant $small8BitData :|ics8|)(defconstant $mini1BitMask :|icm#|)(defconstant $mini4BitData :|icm4|)(defconstant $mini8BitData :|icm8|);   alignment type values  (defconstant $atNone #x0)(defconstant $atVerticalCenter #x1)(defconstant $atTop #x2)(defconstant $atBottom #x3)(defconstant $atHorizontalCenter #x4)(defconstant $atAbsoluteCenter (+ #$atVerticalCenter #$atHorizontalCenter))(defconstant $atCenterTop (+ #$atTop #$atHorizontalCenter))(defconstant $atCenterBottom (+ #$atBottom #$atHorizontalCenter))(defconstant $atLeft #x8)(defconstant $atCenterLeft (+ #$atVerticalCenter #$atLeft))(defconstant $atTopLeft (+ #$atTop #$atLeft))(defconstant $atBottomLeft (+ #$atBottom #$atLeft))(defconstant $atRight #xC)(defconstant $atCenterRight (+ #$atVerticalCenter #$atRight))(defconstant $atTopRight (+ #$atTop #$atRight))(defconstant $atBottomRight (+ #$atBottom #$atRight))(def-mactype :iconalignmenttype (find-mactype ':signed-integer));   transform type values  (defconstant $ttNone #x0)(defconstant $ttDisabled #x1)(defconstant $ttOffline #x2)(defconstant $ttOpen #x3)(defconstant $ttLabel1 #x100)(defconstant $ttLabel2 #x200)(defconstant $ttLabel3 #x300)(defconstant $ttLabel4 #x400)(defconstant $ttLabel5 #x500)(defconstant $ttLabel6 #x600)(defconstant $ttLabel7 #x700)(defconstant $ttSelected #x4000)(defconstant $ttSelectedDisabled (+ #$ttSelected #$ttDisabled))(defconstant $ttSelectedOffline (+ #$ttSelected #$ttOffline))(defconstant $ttSelectedOpen (+ #$ttSelected #$ttOpen))(def-mactype :icontransformtype (find-mactype ':signed-integer));   Selector mask values  (defconstant $svLarge1Bit #x1)(defconstant $svLarge4Bit #x2)(defconstant $svLarge8Bit #x4)(defconstant $svSmall1Bit #x100)(defconstant $svSmall4Bit #x200)(defconstant $svSmall8Bit #x400)(defconstant $svMini1Bit #x10000)(defconstant $svMini4Bit #x20000)(defconstant $svMini8Bit #x40000)(defconstant $svAllLargeData #xFF)(defconstant $svAllSmallData #xFF00)(defconstant $svAllMiniData #xFF0000)(defconstant $svAll1BitData (+ #$svLarge1Bit (+ #$svSmall1Bit #$svMini1Bit)))(defconstant $svAll4BitData (+ #$svLarge4Bit (+ #$svSmall4Bit #$svMini4Bit)))(defconstant $svAll8BitData (+ #$svLarge8Bit (+ #$svSmall8Bit #$svMini8Bit)))(defconstant $svAllAvailableData #xFFFFFFFF)(def-mactype :iconselectorvalue (find-mactype ':signed-long))(def-mactype :iconactionprocptr (find-mactype ':pointer));  FUNCTION IconAction(theType: ResType; VAR theIcon: Handle; yourDataPtr: UNIV Ptr): OSErr; (def-mactype :iconactionupp (find-mactype ':pointer))(defconstant $uppIconActionProcInfo #xFE0)      ;  FUNCTION (4 byte param, 4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewIconActionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallIconActionProc" ((theType :ostype) (theIcon (:pointer :handle)) (yourDataPtr :pointer) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC(def-mactype :iconaction (find-mactype ':pointer))(def-mactype :icongetterprocptr (find-mactype ':pointer));  FUNCTION IconGetter(theType: ResType; yourDataPtr: UNIV Ptr): Handle; (def-mactype :icongetterupp (find-mactype ':pointer))(defconstant $uppIconGetterProcInfo #x3F0)      ;  FUNCTION (4 byte param, 4 byte param): 4 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewIconGetterProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallIconGetterProc" ((theType :ostype) (yourDataPtr :pointer) (userRoutine :pointer))   :handle   (#x205F #x4E90) ); $ENDC(def-mactype :icongetter (find-mactype ':pointer))#|                                              ; $IFC NOT OLDROUTINELOCATIONS (defrecord (CIcon :handle)    (iconPMap :pixmap)                           ; the icon's pixMap   (iconMask :bitmap)                           ; the icon's mask   (iconBMap :bitmap)                           ; the icon's bitMap   (iconData :handle)                           ; the icon's data   (iconMaskData (:array :signed-integer 1))    ; icon's mask and BitMap data   )(def-mactype :ciconptr (find-mactype '(:pointer :cicon)))(def-mactype :ciconhandle (find-mactype '(:handle :cicon))); $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetCIcon" ((iconID :signed-integer))   (:stack (:handle :cicon))   (:stack-trap #xAA1E)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PlotCIcon" ((theRect (:pointer :rect)) (theIcon (:handle :cicon)))   nil   (:stack-trap #xAA1F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposeCIcon" ((theIcon (:handle :cicon)))   nil   (:stack-trap #xAA25)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetIcon" ((iconID :signed-integer))   (:stack :handle)   (:stack-trap #xA9BB)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PlotIcon" ((theRect (:pointer :rect)) (theIcon :handle))   nil   (:stack-trap #xA94B)); $ENDC |#                                             ; $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PlotIconID" ((theRect (:pointer :rect)) (align :signed-integer) (transform :signed-integer) (theResID :signed-integer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1280 theRect align transform theResID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_NewIconSuite" ((theIconSuite (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 519 theIconSuite)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AddIconToSuite" ((theIconData :handle) (theSuite :handle) (theType :ostype))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1544 theIconData theSuite theType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetIconFromSuite" ((theIconData (:pointer :handle)) (theSuite :handle) (theType :ostype))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1545 theIconData theSuite theType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_ForEachIconDo" ((theSuite :handle) (selector :signed-long) (action :pointer) (yourDataPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 2058 theSuite selector action yourDataPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetIconSuite" ((theIconSuite (:pointer :handle)) (theResID :signed-integer) (selector :signed-long))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1281 theIconSuite theResID selector)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DisposeIconSuite" ((theIconSuite :handle) (disposeData :boolean))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 770 theIconSuite disposeData)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PlotIconSuite" ((theRect (:pointer :rect)) (align :signed-integer) (transform :signed-integer) (theIconSuite :handle))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1539 theRect align transform theIconSuite)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_MakeIconCache" ((theHandle (:pointer :handle)) (makeIcon :pointer) (yourDataPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1540 theHandle makeIcon yourDataPtr)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_LoadIconCache" ((theRect (:pointer :rect)) (align :signed-integer) (transform :signed-integer) (theIconCache :handle))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1542 theRect align transform theIconCache)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PlotIconMethod" ((theRect (:pointer :rect)) (align :signed-integer) (transform :signed-integer) (theMethod :pointer) (yourDataPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 2053 theRect align transform theMethod yourDataPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetLabel" ((labelNumber :signed-integer) (labelColor (:pointer :rgbcolor)) (labelString (:pointer (:string 255))))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1291 labelNumber labelColor labelString)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PtInIconID" ((testPt :point) (iconRect (:pointer :rect)) (align :signed-integer) (iconID :signed-integer))   (:stack :boolean)   (:stack-trap #xABC9 :d0 1549 testPt iconRect align iconID)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PtInIconSuite" ((testPt :point) (iconRect (:pointer :rect)) (align :signed-integer) (theIconSuite :handle))   (:stack :boolean)   (:stack-trap #xABC9 :d0 1806 testPt iconRect align theIconSuite)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PtInIconMethod" ((testPt :point) (iconRect (:pointer :rect)) (align :signed-integer) (theMethod :pointer) (yourDataPtr :pointer))   (:stack :boolean)   (:stack-trap #xABC9 :d0 2319 testPt iconRect align theMethod yourDataPtr)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_RectInIconID" ((testRect (:pointer :rect)) (iconRect (:pointer :rect)) (align :signed-integer) (iconID :signed-integer))   (:stack :boolean)   (:stack-trap #xABC9 :d0 1552 testRect iconRect align iconID)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_RectInIconSuite" ((testRect (:pointer :rect)) (iconRect (:pointer :rect)) (align :signed-integer) (theIconSuite :handle))   (:stack :boolean)   (:stack-trap #xABC9 :d0 1809 testRect iconRect align theIconSuite)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_RectInIconMethod" ((testRect (:pointer :rect)) (iconRect (:pointer :rect)) (align :signed-integer) (theMethod :pointer) (yourDataPtr :pointer))   (:stack :boolean)   (:stack-trap #xABC9 :d0 2322 testRect iconRect align theMethod yourDataPtr)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_IconIDToRgn" ((theRgn (:handle :region)) (iconRect (:pointer :rect)) (align :signed-integer) (iconID :signed-integer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1555 theRgn iconRect align iconID)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_IconSuiteToRgn" ((theRgn (:handle :region)) (iconRect (:pointer :rect)) (align :signed-integer) (theIconSuite :handle))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1812 theRgn iconRect align theIconSuite)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_IconMethodToRgn" ((theRgn (:handle :region)) (iconRect (:pointer :rect)) (align :signed-integer) (theMethod :pointer) (yourDataPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 2325 theRgn iconRect align theMethod yourDataPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetSuiteLabel" ((theSuite :handle) (theLabel :signed-integer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 790 theSuite theLabel)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetSuiteLabel" ((theSuite :handle))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 535 theSuite)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetIconCacheData" ((theCache :handle) (theData :pointer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1049 theCache theData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetIconCacheData" ((theCache :handle) (theData :pointer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1050 theCache theData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetIconCacheProc" ((theCache :handle) (theProc (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1051 theCache theProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetIconCacheProc" ((theCache :handle) (theProc :pointer))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1052 theCache theProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PlotIconHandle" ((theRect (:pointer :rect)) (align :signed-integer) (transform :signed-integer) (theIcon :handle))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1565 theRect align transform theIcon)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PlotSICNHandle" ((theRect (:pointer :rect)) (align :signed-integer) (transform :signed-integer) (theSICN :handle))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1566 theRect align transform theSICN)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PlotCIconHandle" ((theRect (:pointer :rect)) (align :signed-integer) (transform :signed-integer) (theCIcon (:handle :cicon)))   (:stack :signed-integer)   (:stack-trap #xABC9 :d0 1567 theRect align transform theCIcon)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := IconsIncludes; $ENDC                                         ; __ICONS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Icons)