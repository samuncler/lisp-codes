(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:ScalerTypes.p"; at Tuesday June 6,1995 2:10:45 pm.; ;  	File:		ScalerTypes.p;  ;  	Contains:	Apple public font scaler object and constant definitions;  ;  	Version:	Technology:	Quickdraw GX 1.1;  				Package:	Universal Interfaces 2.1§1 in ÒMPW PrereleaseÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __SCALERTYPES__; $SETC __SCALERTYPES__ := 1; $I+; $SETC ScalerTypesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __GXMATH__|#(require-interface 'GXMath)#|                                              ; $I GXMath.p |#                                             ; $ENDC; 	FixMath.p													; $IFC UNDEFINED __SFNTTYPES__(require-interface 'SFNTTypes)                  ; $I SFNTTypes.p; $ENDC; 	GXTypes.p													; $PUSH; $ALIGN MAC68K; $LibExport+; $SETC scalerTypeIncludes := 1(defconstant $truetypeFontFormatTag :|true|)(defconstant $type1FontFormatTag :|typ1|)(defconstant $nfntFontFormatTag :|nfnt|)(defconstant $scaler_first_error 1)(defconstant $scaler_first_warning 1024)(defconstant $kOFAVersion1Dot0 #x10000)(defconstant $kOFAVersion1Dot1 #x10100)         ;  added scalerVariationInfo (defconstant $scaler_no_problem 0)              ;  Everything went OK (defconstant $scaler_null_context #$scaler_first_error);  Client passed a null context pointer (defconstant $scaler_null_input (+ #$scaler_first_error 1));  Client passed a null input pointer (defconstant $scaler_invalid_context (+ #$scaler_first_error 2));  There was a problem with the context (defconstant $scaler_invalid_input (+ #$scaler_first_error 3));  There was a problem with an input (defconstant $scaler_invalid_font_data (+ #$scaler_first_error 4));  A portion of the font was corrupt (defconstant $scaler_new_block_failed (+ #$scaler_first_error 5));  A call to NewBlock() failed (defconstant $scaler_get_font_table_failed (+ #$scaler_first_error 6));  The table was present (length > 0) but couldn't be read (defconstant $scaler_bitmap_alloc_failed (+ #$scaler_first_error 7));  Call to allocate bitmap permanent block failed (defconstant $scaler_outline_alloc_failed (+ #$scaler_first_error 8));  Call to allocate outline permanent block failed (defconstant $scaler_required_table_missing (+ #$scaler_first_error 9));  A needed font table was not found (defconstant $scaler_unsupported_outline_format (+ #$scaler_first_error 10));  Couldn't create an outline of the desired format (defconstant $scaler_unsupported_stream_format (+ #$scaler_first_error 11));  ScalerStreamFont() call can't supply any requested format (defconstant $scaler_unsupported_font_format (+ #$scaler_first_error 12));  No scaler supports the font format (defconstant $scaler_hinting_error (+ #$scaler_first_error 13));  An error occurred during hinting (defconstant $scaler_scan_error (+ #$scaler_first_error 14));  An error occurred in scan conversion (defconstant $scaler_internal_error (+ #$scaler_first_error 15));  Scaler has a bug (defconstant $scaler_invalid_matrix (+ #$scaler_first_error 16));  The transform matrix was unusable (defconstant $scaler_fixed_overflow (+ #$scaler_first_error 17));  An overflow ocurred during matrix operations (defconstant $scaler_API_version_mismatch (+ #$scaler_first_error 18));  Scaler requires a newer/older version of the scaler API (defconstant $scaler_streaming_aborted (+ #$scaler_first_error 19));  StreamFunction callback indicated that streaming should cease (defconstant $scaler_last_error #$scaler_streaming_aborted)(defconstant $scaler_no_output #$scaler_first_warning);  Couldn't fulfill any glyph request. (defconstant $scaler_fake_metrics #$scaler_first_warning);  Returned metrics aren't based on information in the font (defconstant $scaler_fake_linespacing #$scaler_first_warning);  Linespacing metrics not based on information in the font (defconstant $scaler_glyph_substitution #$scaler_first_warning);  Requested glyph out of range, a substitute was used (defconstant $scaler_last_warning #$scaler_glyph_substitution)(def-mactype :scalererror (find-mactype ':signed-long));  ScalerOpen output type (defrecord scalerInfo    (format :signed-long)                        ;  Font format supported by this scaler    (scalerVersion :signed-long)                 ;  Version number of the scaler    (APIVersion :signed-long)                    ;  Version of API implemented (compare with version in scalerContext)    );  ScalerNewFont output type (defconstant $requiresLayoutFont 1)(defconstant $hasNormalLayoutFont 2)(defconstant $canReorderFont 4)(defconstant $canRearrangeFont 8)(defconstant $hasOutlinesFont 16)(def-mactype :scalerfontflag (find-mactype ':signed-long))(defrecord scalerFontInfo    ;;Changing field unitsperem from signed-long to unsigned-long to match C header (pretty-darn-sure)   (unitsPerEm :unsigned-long)   (flags :signed-long)   ;;Changing field numglyphs from signed-long to unsigned-long to match C header (pretty-darn-sure)   (numGlyphs :unsigned-long)   );  ScalerNewTransform input types ;  ScalerNewVariation1Dot1 output type (defrecord scalerFixedRectangle    (left :signed-long)   (top :signed-long)   (right :signed-long)   (bottom :signed-long)   )(defrecord scalerVariationInfo    (bounds :scalerfixedrectangle)   );  ScalerNewTransform input types (defconstant $applyHintsTransform 1)            ;  Execute hinting instructions (grid fit) (defconstant $exactBitmapTransform 2)           ;  Use embedded gxBitmap iff exact size (defconstant $useThresholdTransform 4)          ;  Use scaled gxBitmap (if any) if below outline threshold (defconstant $verticalTransform 8)              ;  Glyphs will be in vertical orientation (defconstant $deviceMetricsTransform 16)        ;  All metrics should be device (vs. fractional) (defconstant $allScalerTransformFlags (+ #$applyHintsTransform (+ #$exactBitmapTransform (+ #$useThresholdTransform (+ #$verticalTransform #$deviceMetricsTransform)))))(def-mactype :scalertransformflag (find-mactype ':signed-long))(defrecord scalerTransform    (flags :signed-long)                         ;  Hint, embedded gxBitmap control, etc.    (pointSize :signed-long)                     ;  The desired pointsize    (fontMatrix (:pointer :gxmapping))           ;  The 3x3 matrix to apply to glyphs    (resolution :gxpoint)                        ;  2D device resolution    (spotSize :gxpoint)                          ;  2D pixel size    );  ScalerNewTransform output type (defrecord scalerTransformInfo    (before :gxpoint)                            ;  Spacing of the line before    (after :gxpoint)                             ;  Spacing of the line after    (caretAngle :gxpoint)                        ;  Rise (y) and run (x) of the insertion caret    (caretOffset :gxpoint)                       ;  Adjustment to caret for variants like italic    );  ScalerNewGlyph input types (defconstant $noImageGlyph 1)                   ;  Don't return the bitmap image for this glyph (def-mactype :scalerglyphflag (find-mactype ':signed-long));  QuickDraw GX outline (defconstant $pathOutlineFormat :|path|)(def-mactype :scaleroutlineformat (find-mactype ':signed-long))(defrecord scalerGlyph    (glyphIndex :signed-long)                    ;  Index of the glyph to be considered    (bandingTop :signed-long)                    ;  Banding controls (scanline numbers) top=bottom=0 means no banding    (bandingBottom :signed-long)   (format :signed-long)                        ;  Format of outline to return, ignored if no outline desired    (flags :signed-long)                         ;  Control generation of image representation    );  ScalerNewGlyph output types (defrecord scalerMetrics    (advance :gxpoint)   (sideBearing :gxpoint)   (otherSideBearing :gxpoint)   )(defrecord scalerRectangle    (xMin :signed-long)   (yMin :signed-long)   (xMax :signed-long)   (yMax :signed-long)   );  ScalerKernGlyphs input/output types (defconstant $lineStartKerning 1)               ;  Array of glyphs starts a line (defconstant $lineEndKerning 2)                 ;  Array of glyphs ends a line (defconstant $noCrossKerning 4)                 ;  Prohibit cross kerning (defconstant $allScalerKerningFlags (+ #$lineStartKerning (+ #$lineEndKerning #$noCrossKerning)))(def-mactype :scalerkerningflag (find-mactype ':signed-long))(defconstant $noStakeKerningNote 1)             ;  Indicates a glyph was involver in a kerning pair/group (defconstant $crossStreamResetKerningNote 2)    ;  Indicates a return-to-baseline in cross-stream kerning (def-mactype :scalerkerningnote (find-mactype ':signed-integer))(defconstant $noKerningAppliedOutput #x1)       ;  All kerning values were zero, kerning call had no effect ;  These are bit-fields (def-mactype :scalerkerningoutput (find-mactype ':signed-long))(defrecord scalerKerning    ;;Changing field numglyphs from signed-long to unsigned-long to match C header (pretty-darn-sure)   (numGlyphs :unsigned-long)                   ;  Number of glyphs in the glyphs array    (scaleFactor :signed-long)                   ;  Amount of kerning to apply (0 == none, fract1 == all)    (flags :signed-long)                         ;  Various control flags    (glyphs (:pointer :signed-integer))          ;  Pointer to the array of glyphs to be kerned    (info :signed-long)                          ;  Qualitative results of kerning    );  ScalerStream input/output types (defconstant $cexec68K #x1)(defconstant $truetypeStreamType #x1)(defconstant $type1StreamType #x2)(defconstant $type3StreamType #x4)(defconstant $type42StreamType #x8)(defconstant $type42GXStreamType #x10)(defconstant $portableStreamType #x20)(defconstant $flattenedStreamType #x40)(defconstant $evenOddModifierStreamType #x8000);  Possible streamed font formats ; Warning: Patching def of type scalerStreamTypeFlag from translator table: was :signed-long, is now :unsigned-word(def-mactype :scalerstreamtypeflag (find-mactype :unsigned-word))#| (def-mactype :scalerstreamtypeflag (find-mactype ':signed-long)) |#(defconstant $downloadStreamAction 0)           ;  Transmit the (possibly sparse) font data (defconstant $asciiDownloadStreamAction 1)      ;  Transmit font data to a 7-bit ASCII destination (defconstant $fontSizeQueryStreamAction 2)      ;  Estimate in-printer memory used if the font were downloaded (defconstant $encodingOnlyStreamAction 3)       ;  Transmit only the encoding for the font (defconstant $prerequisiteQueryStreamAction 4)  ;  Return a list of prerequisite items needed for the font (defconstant $prerequisiteItemStreamAction 5)   ;  Transmit a specified prerequisite item (defconstant $variationQueryStreamAction 6)     ;  Return information regarding support for variation streaming (defconstant $variationPSOperatorStreamAction 7);  Transmit Postscript code necessary to effect variation of a font (def-mactype :scalerstreamaction (find-mactype ':signed-long))(defconstant $selectAllVariations -1)           ;  Special variationCount value meaning include all variation data (defrecord scalerPrerequisiteItem    (enumeration :signed-long)                   ;  Shorthand tag identifying the item    (size :signed-long)                          ;  Worst case vm in printer item requires    ;;Changing field name from signed-byte to unsigned-byte to match C header (educated-guess)   (name (:array :unsigned-byte 1))             ;  unsigned char ;  Name to be used by the client when emitting the item (Pascal string)    )(defrecord scalerStream    (streamRefCon :pointer)                      ;  <-	private reference for client    (targetVersion (:pointer :character))        ;  <-	e.g. Postscript printer name (C string)    (types :unsigned-word)                       ;  <->	Data stream formats desired/supplied    (action :signed-long)                        ;  <- 	What action to take    ;;Changing field memorysize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (memorySize :unsigned-long)                  ;  ->	Worst case memory use (vm) in printer or as sfnt    (variationCount :signed-long)                ;  <-	The number of variations, or selectAllVariations    (variations (:pointer :gxfontvariation))     ;  <-	A pointer to an array of the variations    (:variant       (      (encoding (:pointer :signed-integer))     ;  <-	Intention is * unsigned short[256]       (glyphBits (:pointer :signed-long))       ;  <->	Bitvector: a bit for each glyph, 1 = desired/supplied       (name (:pointer :character))              ;  <->	The printer font name to use/used (C string)       )      (      (size :signed-long)                       ;  -> 	Size of the prereq. list in bytes (0 indicates no prerequisites)      (list :pointer)                           ;  <-	Pointer to client block to hold list (nil = list size query only)       )      (      (prerequisiteItem :signed-long)           ;  <- 	Enumeration value for the prerequisite item to be streamed.      )      (      (variationQueryResult :signed-long)       ;  ->	Output from the variationQueryStreamAction       )      )   )(defrecord scalerStreamData    (hexFlag :signed-long)                       ;  Indicates that the data is to be interpreted as hex, versus binary    (byteCount :signed-long)                     ;  Number of bytes in the data being streamed    (data :pointer)                              ;  Pointer to the data being streamed    )(defconstant $scalerScratchBlock -1)            ;  Scaler alloced/freed temporary memory (defconstant $scalerOpenBlock 0)                ;  Five permanent input/state block types (defconstant $scalerFontBlock 1)(defconstant $scalerVariationBlock 2)(defconstant $scalerTransformBlock 3)(defconstant $scalerGlyphBlock 4)(defconstant $scalerBlockCount 5)               ;  Number of permanent block types (defconstant $scalerOutlineBlock #$scalerBlockCount);  Two output block types (defconstant $scalerBitmapBlock (+ #$scalerBlockCount 1))(def-mactype :scalerblocktype (find-mactype ':signed-long));  special tag used only by scalers to access an sfnt's directory (defconstant $sfntDirectoryTag :|dir |);  Type definitions for function pointers used with the scalerContext structure (def-mactype :getfonttableprocptr (find-mactype ':pointer));  FUNCTION GetFontTable(VAR context: scalerContext; tableTag: gxFontTableTag; offset: LONGINT; length: LONGINT; data: UNIV Ptr): LONGINT; (def-mactype :releasefonttableprocptr (find-mactype ':pointer));  PROCEDURE ReleaseFontTable(VAR context: scalerContext; fontData: UNIV Ptr); (def-mactype :newblockprocptr (find-mactype ':pointer));  FUNCTION NewBlock(VAR context: scalerContext; size: LONGINT; theType: scalerBlockType; oldBlock: UNIV Ptr): Ptr; (def-mactype :disposeblockprocptr (find-mactype ':pointer));  PROCEDURE DisposeBlock(VAR context: scalerContext; scratchData: UNIV Ptr; theType: scalerBlockType); (def-mactype :streamfunctionprocptr (find-mactype ':pointer));  FUNCTION StreamFunction(VAR context: scalerContext; VAR streamInfo: scalerStream; (CONST)VAR dataInfo: scalerStreamData): LONGINT; (def-mactype :scanlinefunctionprocptr (find-mactype ':pointer));  PROCEDURE ScanLineFunction(VAR context: scalerContext; (CONST)VAR scanLine: scalerBitmap); (def-mactype :posterrorfunctionprocptr (find-mactype ':pointer));  PROCEDURE PostErrorFunction(VAR context: scalerContext; theProblem: scalerError); (def-mactype :scalerfunctionprocptr (find-mactype ':pointer));  PROCEDURE ScalerFunction(VAR context: scalerContext; data: UNIV Ptr); (def-mactype :getfonttableupp (find-mactype ':pointer))(def-mactype :releasefonttableupp (find-mactype ':pointer))(def-mactype :newblockupp (find-mactype ':pointer))(def-mactype :disposeblockupp (find-mactype ':pointer))(def-mactype :streamfunctionupp (find-mactype ':pointer))(def-mactype :scanlinefunctionupp (find-mactype ':pointer))(def-mactype :posterrorfunctionupp (find-mactype ':pointer))(def-mactype :scalerfunctionupp (find-mactype ':pointer))(defrecord scalerBitmap    (image (:pointer :character))                ;  Pointer to pixels    (topLeft :gxpoint)                           ;  Bitmap positioning relative to client's origin    (bounds :scalerrectangle)                    ;  Bounding box of bitmap    (rowBytes :signed-long)                      ;  Width in bytes    );  scalerContext: the vehicle with which the caller and scaler communicate (defrecord scalerContext    (version :signed-long)                       ;  Version of the scaler API implemented by the caller    (theFont :pointer)                           ;  Caller's private reference to the font being processed    (format :signed-long)                        ;  Format of the sfnt font data, corresponds to the scaler    (GetFontTable :pointer)                      ;  Callback for accessing sfnt tables or portions thereof    (ReleaseFontTable :pointer)                  ;  Callback for releasing sfnt tables    (NewBlock :pointer)                          ;  Callback for allocating and/or growing permanent and scratch blocks    (DisposeBlock :pointer)                      ;  Callback for freeing permanent and scratch blocks    (StreamFunction :pointer)                    ;  Callback for transmitting blocks of data during streaming    (ScanLineFunction :pointer)                  ;  Callback for emitting individual bitmap scanlines during scan conversion    (PostErrorFunction :pointer)                 ;  Callback for posting errors and warnings    (scalerBlocks (:array :pointer (- (- #$scalerBlockCount 1) 0 -1)));  Array of permanent scaler blocks    (ScalerFunction :pointer)                    ;  Callback for scaler-specific tracing, debugging, etc.    )(defconstant $uppGetFontTableProcInfo #xFFF1)   ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param): 4 byte result; (defconstant $uppReleaseFontTableProcInfo #x3C1);  PROCEDURE (4 byte param, 4 byte param); (defconstant $uppNewBlockProcInfo #x3FF1)       ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param): 4 byte result; (defconstant $uppDisposeBlockProcInfo #xFC1)    ;  PROCEDURE (4 byte param, 4 byte param, 4 byte param); (defconstant $uppStreamFunctionProcInfo #xFF1)  ;  FUNCTION (4 byte param, 4 byte param, 4 byte param): 4 byte result; (defconstant $uppScanLineFunctionProcInfo #x3C1);  PROCEDURE (4 byte param, 4 byte param); (defconstant $uppPostErrorFunctionProcInfo #x3C1);  PROCEDURE (4 byte param, 4 byte param); (defconstant $uppScalerFunctionProcInfo #x3C1)  ;  PROCEDURE (4 byte param, 4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewGetFontTableProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewReleaseFontTableProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewNewBlockProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDisposeBlockProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewStreamFunctionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewScanLineFunctionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewPostErrorFunctionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewScalerFunctionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallGetFontTableProc" ((context (:pointer :scalercontext)) (tableTag :signed-long) (offset :signed-long) (length :signed-long) (data :pointer) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallReleaseFontTableProc" ((context (:pointer :scalercontext)) (fontData :pointer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallNewBlockProc" ((context (:pointer :scalercontext)) (size :signed-long) (theType :signed-long) (oldBlock :pointer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDisposeBlockProc" ((context (:pointer :scalercontext)) (scratchData :pointer) (theType :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallStreamFunctionProc" ((context (:pointer :scalercontext)) (streamInfo (:pointer :scalerstream)) (dataInfo (:pointer :scalerstreamdata)) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallScanLineFunctionProc" ((context (:pointer :scalercontext)) (scanLine (:pointer :scalerbitmap)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallPostErrorFunctionProc" ((context (:pointer :scalercontext)) (theProblem :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallScalerFunctionProc" ((context (:pointer :scalercontext)) (data :pointer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := ScalerTypesIncludes; $ENDC                                         ; __SCALERTYPES__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'ScalerTypes)