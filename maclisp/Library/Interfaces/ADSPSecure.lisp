(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:ADSPSecure.p"; at Tuesday June 6,1995 2:00:42 pm.; ;  	File:		ADSPSecure.p;  ;  	Contains:	Secure AppleTalk Data Stream Protocol Interfaces.;  ;  	Version:	Technology:	AOCE Toolbox 1.02;  				Package:	Universal Interfaces 2.1§1 in ÒMPW PrereleaseÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __ADSPSECURE__; $SETC __ADSPSECURE__ := 1; $I+; $SETC ADSPSecureIncludes := UsingIncludes; $SETC UsingIncludes := 1; $IFC UNDEFINED __EVENTS__(require-interface 'Events)                     ; $I Events.p; $ENDC; 	Types.p														; 		ConditionalMacros.p										; 	Quickdraw.p													; 		MixedMode.p												; 		QuickdrawText.p											; 	OSUtils.p													; 		Memory.p												; $IFC UNDEFINED __NOTIFICATION__(require-interface 'Notification)               ; $I Notification.p; $ENDC; $IFC UNDEFINED __APPLEEVENTS__(require-interface 'AppleEvents)                ; $I AppleEvents.p; $ENDC; 	Errors.p													; 	EPPC.p														; 		AppleTalk.p												; 		Files.p													; 		PPCToolbox.p											; 		Processes.p												#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __ADSP__|#(require-interface 'ADSP)#|                                              ; $I ADSP.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC; $IFC UNDEFINED __OCE__(require-interface 'OCE)                        ; $I OCE.p; $ENDC; 	Aliases.p													; 	Script.p													; 		IntlResources.p											; $IFC UNDEFINED __OCEAUTHDIR__(require-interface 'OCEAuthDir)                 ; $I OCEAuthDir.p; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $sdspOpen 229); ; For secure connections, the eom field of ioParams contains two single-bit flags; (instead of a zero/non-zero byte). They are an encrypt flag (see below), and an; eom flag.  All other bits in that field should be zero.; ; To write an encrypted message, you must set an encrypt bit in the eom field of; the ioParams of your write call. Note: this flag is only checked on the first; write of a message (the first write on a connection, or the first write following; a write with eom set.; (defconstant $dspEOMBit 0)                      ;  set if EOM at end of write (defconstant $dspEncryptBit 1)                  ;  set to encrypt message (defconstant $dspEOMMask (* 1 (expt 2 #$dspEOMBit)))(defconstant $dspEncryptMask (* 1 (expt 2 #$dspEncryptBit)))(defconstant $sdspWorkSize 2048)(defrecord TRSecureParams    ;;Changing field localcid from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (localCID :unsigned-word)                    ;  local connection id    ;;Changing field remotecid from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (remoteCID :unsigned-word)                   ;  remote connection id    (remoteAddress :addrblock)                   ;  address of remote end    (filterAddress :addrblock)                   ;  address filter    ;;Changing field sendseq from signed-long to unsigned-long to match C header (pretty-darn-sure)   (sendSeq :unsigned-long)                     ;  local send sequence number    ;;Changing field sendwindow from signed-integer to unsigned-word to match C header (pretty-sure)   (sendWindow :unsigned-word)                  ;  send window size    ;;Changing field recvseq from signed-long to unsigned-long to match C header (pretty-darn-sure)   (recvSeq :unsigned-long)                     ;  receive sequence number    ;;Changing field attnsendseq from signed-long to unsigned-long to match C header (pretty-darn-sure)   (attnSendSeq :unsigned-long)                 ;  attention send sequence number    ;;Changing field attnrecvseq from signed-long to unsigned-long to match C header (pretty-darn-sure)   (attnRecvSeq :unsigned-long)                 ;  attention receive sequence number    ;;Changing field ocmode from signed-byte to unsigned-byte to match C header (educated-guess)   (ocMode :unsigned-byte)                      ;  unsigned char ;  open connection mode    ;;Changing field ocinterval from signed-byte to unsigned-byte to match C header (educated-guess)   (ocInterval :unsigned-byte)                  ;  unsigned char ;  open connection request retry interval    ;;Changing field ocmaximum from signed-byte to unsigned-byte to match C header (educated-guess)   (ocMaximum :unsigned-byte)                   ;  unsigned char ;  open connection request retry maximum    (secure :boolean)                            ;   --> TRUE if session was authenticated    (sessionKey (:pointer :authkey))             ;  <--> encryption key for session    ;;Changing field credentialssize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (credentialsSize :unsigned-long)             ;   --> length of credentials    (credentials :pointer)                       ;   --> pointer to credentials    (workspace :pointer)                         ;   --> pointer to workspace for connection; 										   align on even boundary and length = sdspWorkSize    (recipient :signed-long)                     ;   --> identity of recipient (or initiator if active mode    (issueTime :signed-long)                     ;   --> when credentials were issued    (expiry :signed-long)                        ;   --> when credentials expiry    (initiator (:pointer :recordid))             ;  <--  RecordID of initiator returned here.; 											Must give appropriate Buffer to hold RecordID; 											(Only for passive or accept mode)    (hasIntermediary :boolean)                   ;  <--  will be set if credentials has an intermediary    (filler1 :boolean)   (intermediary (:pointer :recordid))          ;  <--  RecordID of intermediary returned here.; 											(If intermediary is found in credentials; 											Must give appropriate Buffer to hold RecordID; 											(Only for passive or accept mode)    ); $ALIGN RESET; $POP; $SETC UsingIncludes := ADSPSecureIncludes; $ENDC                                         ; __ADSPSECURE__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'ADSPSecure)