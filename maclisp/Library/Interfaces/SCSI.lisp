(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:SCSI.p"; at Tuesday June 6,1995 2:19:58 pm.; ;  	File:		SCSI.p;  ;  	Contains:	SCSI Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __SCSI__; $SETC __SCSI__ := 1; $I+; $SETC SCSIIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $scInc 1)(defconstant $scNoInc 2)(defconstant $scAdd 3)(defconstant $scMove 4)(defconstant $scLoop 5)(defconstant $scNop 6)(defconstant $scStop 7)(defconstant $scComp 8);  SCSI Manager errors (defconstant $scCommErr 2)                      ;  communications error, operation timeout (defconstant $scArbNBErr 3)                     ;  arbitration timeout waiting for not BSY (defconstant $scBadParmsErr 4)                  ;  bad parameter or TIB opcode (defconstant $scPhaseErr 5)                     ;  SCSI bus not in correct phase for attempted operation (defconstant $scCompareErr 6)                   ;  data compare error (defconstant $scMgrBusyErr 7)                   ;  SCSI Manager busy  (defconstant $scSequenceErr 8)                  ;  attempted operation is out of sequence (defconstant $scBusTOErr 9)                     ;  CPU bus timeout (defconstant $scComplPhaseErr 10)               ;  SCSI bus wasn't in Status phase ;  Signatures (defconstant $sbSIGWord #x4552)                 ;  signature word for Block 0 ('ER') (defconstant $sbMac 1)                          ;  system type for Mac (defconstant $pMapSIG #x504D)                   ;  partition map signature ('PM') (defconstant $pdSigWord #x5453)(defconstant $oldPMSigWord #$pdSigWord)(defconstant $newPMSigWord #$pMapSIG);  Driver Descriptor Map (defrecord Block0    ;;Changing field sbsig from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (sbSig :unsigned-word)                       ;  unique value for SCSI block 0    ;;Changing field sbblksize from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (sbBlkSize :unsigned-word)                   ;  block size of device    ;;Changing field sbblkcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (sbBlkCount :unsigned-long)                  ;  number of blocks on device    ;;Changing field sbdevtype from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (sbDevType :unsigned-word)                   ;  device type    ;;Changing field sbdevid from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (sbDevId :unsigned-word)                     ;  device id    ;;Changing field sbdata from signed-long to unsigned-long to match C header (pretty-darn-sure)   (sbData :unsigned-long)                      ;  not used    ;;Changing field sbdrvrcount from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (sbDrvrCount :unsigned-word)                 ;  driver descriptor count    ;;Changing field ddblock from signed-long to unsigned-long to match C header (pretty-darn-sure)   (ddBlock :unsigned-long)                     ;  1st driver's starting block    ;;Changing field ddsize from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (ddSize :unsigned-word)                      ;  size of 1st driver (512-byte blks)    ;;Changing field ddtype from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (ddType :unsigned-word)                      ;  system type (1 for Mac+)    ;;Changing field ddpad from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (ddPad (:array :unsigned-word 243))          ;  ARRAY[0..242] OF INTEGER; not used    );  Partition Map Entry (defrecord Partition    ;;Changing field pmsig from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (pmSig :unsigned-word)                       ;  unique value for map entry blk    ;;Changing field pmsigpad from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (pmSigPad :unsigned-word)                    ;  currently unused    ;;Changing field pmmapblkcnt from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmMapBlkCnt :unsigned-long)                 ;  # of blks in partition map    ;;Changing field pmpypartstart from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmPyPartStart :unsigned-long)               ;  physical start blk of partition    ;;Changing field pmpartblkcnt from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmPartBlkCnt :unsigned-long)                ;  # of blks in this partition    (pmPartName (:array :character 32 :packed))  ;  ASCII partition name    (pmParType (:array :character 32 :packed))   ;  ASCII partition type    ;;Changing field pmlgdatastart from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmLgDataStart :unsigned-long)               ;  log. # of partition's 1st data blk    ;;Changing field pmdatacnt from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmDataCnt :unsigned-long)                   ;  # of blks in partition's data area    ;;Changing field pmpartstatus from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmPartStatus :unsigned-long)                ;  bit field for partition status    ;;Changing field pmlgbootstart from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmLgBootStart :unsigned-long)               ;  log. blk of partition's boot code    ;;Changing field pmbootsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmBootSize :unsigned-long)                  ;  number of bytes in boot code    ;;Changing field pmbootaddr from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmBootAddr :unsigned-long)                  ;  memory load address of boot code    ;;Changing field pmbootaddr2 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmBootAddr2 :unsigned-long)                 ;  currently unused    ;;Changing field pmbootentry from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmBootEntry :unsigned-long)                 ;  entry point of boot code    ;;Changing field pmbootentry2 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmBootEntry2 :unsigned-long)                ;  currently unused    ;;Changing field pmbootcksum from signed-long to unsigned-long to match C header (pretty-darn-sure)   (pmBootCksum :unsigned-long)                 ;  checksum of boot code    (pmProcessor (:array :character 16 :packed)) ;  ASCII for the processor type    ;;Changing field pmpad from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (pmPad (:array :unsigned-word 188))          ;  512 bytes long currently unused    );  TIB instruction (defrecord SCSIInstr    ;;Changing field scopcode from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (scOpcode :unsigned-word)   (scParam1 :signed-long)   (scParam2 :signed-long)   ); $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SCSIReset" ()   :signed-integer   (#x4267 #xA815) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSIGet" ()   (:stack :signed-integer)   (:stack-trap #xA815 (1 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSISelect" ((targetID :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA815 targetID (2 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSICmd" ((buffer :pointer) (count :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA815 buffer count (3 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSIRead" ((tibPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xA815 tibPtr (5 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSIRBlind" ((tibPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xA815 tibPtr (8 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSIWrite" ((tibPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xA815 tibPtr (6 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSIWBlind" ((tibPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xA815 tibPtr (9 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSIComplete" ((stat (:pointer :signed-integer)) (message (:pointer :signed-integer)) (wait :signed-long))   (:stack :signed-integer)   (:stack-trap #xA815 stat message wait (4 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSIStat" ()   (:stack :signed-integer)   (:stack-trap #xA815 (10 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSISelAtn" ((targetID :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA815 targetID (11 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSIMsgIn" ((message (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xA815 message (12 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SCSIMsgOut" ((message :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA815 message (13 :signed-integer))); $ENDC; ——————————————————————— New SCSI Manager Interface ———————————————————————(defconstant $scsiVERSION 43);  SCSI Manager function codes (defconstant $SCSINop #x0)                      ;  Execute nothing 										(defconstant $SCSIExecIO #x1)                   ;  Execute the specified IO 							(defconstant $SCSIBusInquiry #x3)               ;  Get parameters for entire path of HBAs 				(defconstant $SCSIReleaseQ #x4)                 ;  Release the frozen SIM queue for particular LUN 		(defconstant $SCSIAbortCommand #x10)            ;  Abort the selected Control Block  					(defconstant $SCSIResetBus #x11)                ;  Reset the SCSI bus  									(defconstant $SCSIResetDevice #x12)             ;  Reset the SCSI device  								(defconstant $SCSITerminateIO #x13)             ;  Terminate any pending IO  							(defconstant $SCSIGetVirtualIDInfo #x80)        ;  Find out which bus old ID is on 						(defconstant $SCSILoadDriver #x82)              ;  Load a driver for a device ident 					(defconstant $SCSIOldCall #x84)                 ;  XPT->SIM private call for old-API 					(defconstant $SCSICreateRefNumXref #x85)        ;  Register a DeviceIdent to drvr RefNum xref 			(defconstant $SCSILookupRefNumXref #x86)        ;  Get DeviceIdent to drvr RefNum xref 					(defconstant $SCSIRemoveRefNumXref #x87)        ;  Remove a DeviceIdent to drvr RefNum xref 			(defconstant $SCSIRegisterWithNewXPT #x88)      ;  XPT has changed - SIM needs to re-register itself 	(defconstant $vendorUnique #xC0)                ;  0xC0 thru 0xFF ;  SCSI Callback Procedure Prototypes ;  SCSIInterruptPollProcPtr is obsolete (use SCSIInterruptProcPtr) but still here for compatibility (def-mactype :scsicallbackprocptr (find-mactype ':pointer));  PROCEDURE SCSICallback(scsiPB: UNIV Ptr); (def-mactype :aencallbackprocptr (find-mactype ':pointer));  PROCEDURE AENCallback; (def-mactype :siminitprocptr (find-mactype ':pointer));  FUNCTION SIMInit(SIMinfoPtr: Ptr): OSErr; (def-mactype :simactionprocptr (find-mactype ':pointer));  PROCEDURE SIMAction(scsiPB: UNIV Ptr; SIMGlobals: Ptr); (def-mactype :scsiprocptr (find-mactype ':pointer));  PROCEDURE SCSI; (def-mactype :scsimakecallbackprocptr (find-mactype ':pointer));  PROCEDURE SCSIMakeCallback(scsiPB: UNIV Ptr); (def-mactype :scsiinterruptpollprocptr (find-mactype ':pointer));  FUNCTION SCSIInterruptPoll(SIMGlobals: Ptr): LONGINT; (def-mactype :scsiinterruptprocptr (find-mactype ':pointer));  FUNCTION SCSIInterrupt(SIMGlobals: Ptr): LONGINT; (def-mactype :scsicallbackupp (find-mactype ':pointer))(def-mactype :aencallbackupp (find-mactype ':pointer))(def-mactype :siminitupp (find-mactype ':pointer))(def-mactype :simactionupp (find-mactype ':pointer))(def-mactype :scsiupp (find-mactype ':pointer))(def-mactype :scsimakecallbackupp (find-mactype ':pointer))(def-mactype :scsiinterruptpollupp (find-mactype ':pointer))(def-mactype :scsiinterruptupp (find-mactype ':pointer))(defconstant $uppSCSICallbackProcInfo #xC0)     ;  PROCEDURE (4 byte param); (defconstant $uppAENCallbackProcInfo #x1)       ;  PROCEDURE ; (defconstant $uppSIMInitProcInfo #xE1)          ;  FUNCTION (4 byte param): 2 byte result; (defconstant $uppSIMActionProcInfo #x3C1)       ;  PROCEDURE (4 byte param, 4 byte param); (defconstant $uppSCSIProcInfo #x1)              ;  PROCEDURE ; (defconstant $uppSCSIMakeCallbackProcInfo #xC1) ;  PROCEDURE (4 byte param); (defconstant $uppSCSIInterruptPollProcInfo #xF1);  FUNCTION (4 byte param): 4 byte result; (defconstant $uppSCSIInterruptProcInfo #xF1)    ;  FUNCTION (4 byte param): 4 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSCSICallbackProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewAENCallbackProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSIMInitProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSIMActionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSCSIProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSCSIMakeCallbackProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSCSIInterruptPollProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSCSIInterruptProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSCSICallbackProc" ((scsiPB :pointer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-no-return(deftrap "_CallAENCallbackProc" ((userRoutine :pointer))   nil   (:register-trap #x4E90 :a0 userRoutine)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSIMInitProc" ((SIMinfoPtr :pointer) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSIMActionProc" ((scsiPB :pointer) (SIMGlobals :pointer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-no-return(deftrap "_CallSCSIProc" ((userRoutine :pointer))   nil   (:register-trap #x4E90 :a0 userRoutine)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSCSIMakeCallbackProc" ((scsiPB :pointer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSCSIInterruptPollProc" ((SIMGlobals :pointer) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSCSIInterruptProc" ((SIMGlobals :pointer) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC(defconstant $handshakeDataLength 8)            ;  Handshake data length (defconstant $maxCDBLength 16)                  ;  Space for the CDB bytes/pointer (defconstant $vendorIDLength 16)                ;  ASCII string len for Vendor ID  ;  Define DeviceIdent structure (defrecord DeviceIdent    (diReserved :unsigned-byte)                  ;  reserved 				   (bus :unsigned-byte)                         ;  SCSI - Bus Number		   (targetID :unsigned-byte)                    ;  SCSI - Target SCSI ID	   (LUN :unsigned-byte)                         ;  SCSI - LUN  				   );  Command Descriptor Block structure ;; hand-hacked;; (defrecord CDB (array (array :unsigned-byte (- (- (value 'maxcdblength) 1) 0 -1))))(defrecord CDB (array (array :unsigned-byte 16)))(defrecord SGRecord    (SGAddr :pointer)   (SGCount :unsigned-long)   );  SCSI Phases (used by SIMs to support the Original SCSI Manager (defconstant $kDataOutPhase 0)                  ;  Encoded MSG, C/D, I/O bits (defconstant $kDataInPhase 1)(defconstant $kCommandPhase 2)(defconstant $kStatusPhase 3)(defconstant $kPhaseIllegal0 4)(defconstant $kPhaseIllegal1 5)(defconstant $kMessageOutPhase 6)(defconstant $kMessageInPhase 7)(defconstant $kBusFreePhase 8)                  ;  Additional Phases (defconstant $kArbitratePhase 9)(defconstant $kSelectPhase 10)(defconstant $kMessageInPhaseNACK 11)           ;  Message In Phase with ACK hanging on the bus (defrecord SCSIHdr    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   )(defrecord SCSI_PB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   )(defrecord SCSI_IO    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   (scsiResultFlags :unsigned-integer)   (scsiReserved3pt5 :unsigned-integer)   (scsiDataPtr (:pointer :unsigned-byte))   (scsiDataLength :unsigned-long)   (scsiSensePtr (:pointer :unsigned-byte))   (scsiSenseLength :signed-byte)               ;  UInt8    (scsiCDBLength :signed-byte)                 ;  UInt8    (scsiSGListCount :unsigned-integer)   (scsiReserved4 :unsigned-long)   (scsiSCSIstatus :signed-byte)                ;  UInt8    (scsiSenseResidual :signed-byte)   (scsiReserved5 :unsigned-integer)   (scsiDataResidual :signed-long)   (scsiCDB :cdb)   (scsiTimeout :signed-long)   (scsiReserved5pt5 (:pointer :unsigned-byte))   (scsiReserved5pt6 :unsigned-integer)   (scsiIOFlags :unsigned-integer)   (scsiTagAction :signed-byte)                 ;  UInt8    (scsiReserved6 :signed-byte)                 ;  UInt8    (scsiReserved7 :unsigned-integer)   (scsiSelectTimeout :unsigned-integer)   (scsiDataType :signed-byte)                  ;  UInt8    (scsiTransferType :signed-byte)              ;  UInt8    (scsiReserved8 :unsigned-long)   (scsiReserved9 :unsigned-long)   (scsiHandshake (:array :unsigned-integer (- (- #$handshakeDataLength 1) 0 -1)))   (scsiReserved10 :unsigned-long)   (scsiReserved11 :unsigned-long)   (scsiCommandLink (:pointer :scsi_io))   (scsiSIMpublics (:array :signed-byte 8))     ;  UInt8    (scsiAppleReserved6 (:array :signed-byte 8)) ;  UInt8    (scsiCurrentPhase :unsigned-integer)   (scsiSelector :signed-integer)   (scsiOldCallResult :signed-integer)   (scsiSCSImessage :signed-byte)               ;  UInt8    (XPTprivateFlags :signed-byte)               ;  UInt8    (XPTextras (:array :signed-byte 12))         ;  UInt8    )(%define-record :scsiexeciopb (find-record-descriptor :scsi_io));  Bus inquiry PB (defrecord SCSIBusInquiryPB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   (scsiEngineCount :unsigned-integer)          ;  <- Number of engines on HBA 						   (scsiMaxTransferType :unsigned-integer)      ;  <- Number of transfer types for this HBA			   (scsiDataTypes :unsigned-long)               ;  <- which data types are supported by this SIM 	   (scsiIOpbSize :unsigned-integer)             ;  <- Size of SCSI_IO PB for this SIM/HBA 			   (scsiMaxIOpbSize :unsigned-integer)          ;  <- Size of max SCSI_IO PB for all SIM/HBAs 		   (scsiFeatureFlags :unsigned-long)            ;  <- Supported features flags field 				   (scsiVersionNumber :signed-byte)             ;  UInt8 ;  <- Version number for the SIM/HBA 				   (scsiHBAInquiry :signed-byte)                ;  UInt8 ;  <- Mimic of INQ byte 7 for the HBA 				   (scsiTargetModeFlags :signed-byte)           ;  UInt8 ;  <- Flags for target mode support 				   (scsiScanFlags :signed-byte)                 ;  UInt8 ;  <- Scan related feature flags 					   (scsiSIMPrivatesPtr :unsigned-long)          ;  <- Ptr to SIM private data area 					   (scsiSIMPrivatesSize :unsigned-long)         ;  <- Size of SIM private data area 				   (scsiAsyncFlags :unsigned-long)              ;  <- Event cap. for Async Callback 				   (scsiHiBusID :signed-byte)                   ;  UInt8 ;  <- Highest path ID in the subsystem  			   (scsiInitiatorID :signed-byte)               ;  UInt8 ;  <- ID of the HBA on the SCSI bus 				   (scsiBIReserved0 :unsigned-integer)          ; 													   (scsiBIReserved1 :unsigned-long)             ;  <-  												   (scsiFlagsSupported :unsigned-long)          ;  <- which scsiFlags are supported 				   (scsiIOFlagsSupported :unsigned-integer)     ;  <- which scsiIOFlags are supported 				   (scsiWeirdStuff :unsigned-integer)           ;  <- 												   (scsiMaxTarget :unsigned-integer)            ;  <- maximum Target number supported 				   (scsiMaxLUN :unsigned-integer)               ;  <- maximum Logical Unit number supported 		   (scsiSIMVendor (:array :character (- (- #$vendorIDLength 1) 0 -1) :packed));  <- Vendor ID of SIM (or XPT if bus<FF) 		   (scsiHBAVendor (:array :character (- (- #$vendorIDLength 1) 0 -1) :packed));  <- Vendor ID of the HBA 						   (scsiControllerFamily (:array :character (- (- #$vendorIDLength 1) 0 -1) :packed));  <- Family of SCSI Controller 				   (scsiControllerType (:array :character (- (- #$vendorIDLength 1) 0 -1) :packed));  <- Specific Model of SCSI Controller used 	   (scsiXPTversion (:array :character 4 :packed));  <- version number of XPT 						   (scsiSIMversion (:array :character 4 :packed));  <- version number of SIM 						   (scsiHBAversion (:array :character 4 :packed));  <- version number of HBA 						   (scsiHBAslotType :signed-byte)               ;  UInt8 ;  <- type of "slot" that this HBA is in			   (scsiHBAslotNumber :signed-byte)             ;  UInt8 ;  <- slot number of this HBA 						   (scsiSIMsRsrcID :unsigned-integer)           ;  <- resource ID of this SIM 						   (scsiBIReserved3 :unsigned-integer)          ;  <- 												   (scsiAdditionalLength :unsigned-integer)     ;  <- additional BusInquiry PB len					   );  Abort SIM Request PB (defrecord SCSIAbortCommandPB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   (scsiIOptr (:pointer :scsi_io))              ;  Pointer to the PB to abort						   );  Terminate I/O Process Request PB (defrecord SCSITerminateIOPB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   (scsiIOptr (:pointer :scsi_io))              ;  Pointer to the PB to terminate 					   );  Reset SCSI Bus PB (defrecord SCSIResetBusPB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   );  Reset SCSI Device PB (defrecord SCSIResetDevicePB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   );  Release SIM Queue PB (defrecord SCSIReleaseQPB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   );  SCSI Get Virtual ID Info PB (defrecord SCSIGetVirtualIDInfoPB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   (scsiOldCallID :unsigned-integer)            ;  -> SCSI ID of device in question 			   (scsiExists :boolean)                        ;  <- true if device exists 					   );  Create/Lookup/Remove RefNum for Device PB (defrecord SCSIDriverPB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   (scsiDriver :signed-integer)                 ;  -> DriverRefNum, For SetDriver, <- For GetNextDriver    (scsiDriverFlags :unsigned-integer)          ;  <> Details of driver/device 					   (scsiNextDevice :deviceident)                ;  <- DeviceIdent of the NEXT Item in the list     );  Load Driver PB (defrecord SCSILoadDriverPB    (qLink (:pointer :scsihdr))   (scsiReserved1 :signed-integer)   (scsiPBLength :unsigned-integer)   (scsiFunctionCode :signed-byte)              ;  UInt8    (scsiReserved2 :signed-byte)                 ;  UInt8    (scsiResult :signed-integer)   (scsiDevice :deviceident)   (scsiCompletion :pointer)   (scsiFlags :unsigned-long)   (scsiDriverStorage (:pointer :unsigned-byte))   (scsiXPTprivate :pointer)   (scsiReserved3 :signed-long)   (scsiLoadedRefNum :signed-integer)           ;  <- SIM returns refnum of driver 					   (scsiDiskLoadFailed :boolean)                ;  -> if true, indicates call after failure to load    );  Defines for the scsiTransferType field (defconstant $scsiTransferBlind 0)(defconstant $scsiTransferPolled 1);  Defines for the scsiDataType field (defconstant $scsiDataBuffer 0)                 ;  single contiguous buffer supplied  				(defconstant $scsiDataTIB 1)                    ;  TIB supplied (ptr in scsiDataPtr) 				(defconstant $scsiDataSG 2)                     ;  scatter/gather list supplied  					;  Defines for the SCSIMgr scsiResult field in the PB header. ;   $E100 thru  E1FF ;  -$1EFF thru -1E00 ;  -#7935 thru -7681  ;  = 0xE100 (defconstant $scsiErrorBase -7936)(defconstant $scsiRequestInProgress 1)          ;  1	 = PB request is in progress 			;  Execution failed  00-2F (defconstant $scsiRequestAborted (+ #$scsiErrorBase 2));  -7934 = PB request aborted by the host 		(defconstant $scsiUnableToAbort (+ #$scsiErrorBase 3));  -7933 = Unable to Abort PB request 			(defconstant $scsiNonZeroStatus (+ #$scsiErrorBase 4));  -7932 = PB request completed with an err 	(defconstant $scsiUnused05 (+ #$scsiErrorBase 5));  -7931 =  									(defconstant $scsiUnused06 (+ #$scsiErrorBase 6));  -7930 =  									(defconstant $scsiUnused07 (+ #$scsiErrorBase 7));  -7929 =  									(defconstant $scsiUnused08 (+ #$scsiErrorBase 8));  -7928 =  									(defconstant $scsiUnableToTerminate (+ #$scsiErrorBase 9));  -7927 = Unable to Terminate I/O PB req 		(defconstant $scsiSelectTimeout (+ #$scsiErrorBase 10));  -7926 = Target selection timeout 			(defconstant $scsiCommandTimeout (+ #$scsiErrorBase 11));  -7925 = Command timeout  					(defconstant $scsiIdentifyMessageRejected (+ #$scsiErrorBase 12));  -7924 =  									(defconstant $scsiMessageRejectReceived (+ #$scsiErrorBase 13));  -7923 = Message reject received 				(defconstant $scsiSCSIBusReset (+ #$scsiErrorBase 14));  -7922 = SCSI bus reset sent/received 		(defconstant $scsiParityError (+ #$scsiErrorBase 15));  -7921 = Uncorrectable parity error occured 	(defconstant $scsiAutosenseFailed (+ #$scsiErrorBase 16));  -7920 = Autosense: Request sense cmd fail 	(defconstant $scsiUnused11 (+ #$scsiErrorBase 17));  -7919 =  									(defconstant $scsiDataRunError (+ #$scsiErrorBase 18));  -7918 = Data overrun/underrun error  		(defconstant $scsiUnexpectedBusFree (+ #$scsiErrorBase 19));  -7917 = Unexpected BUS free 					(defconstant $scsiSequenceFailed (+ #$scsiErrorBase 20));  -7916 = Target bus phase sequence failure 	(defconstant $scsiWrongDirection (+ #$scsiErrorBase 21));  -7915 = Data phase was in wrong direction 	(defconstant $scsiUnused16 (+ #$scsiErrorBase 22));  -7914 =  									(defconstant $scsiBDRsent (+ #$scsiErrorBase 23));  -7913 = A SCSI BDR msg was sent to target 	(defconstant $scsiTerminated (+ #$scsiErrorBase 24));  -7912 = PB request terminated by the host 	(defconstant $scsiNoNexus (+ #$scsiErrorBase 25));  -7911 = Nexus is not established 			(defconstant $scsiCDBReceived (+ #$scsiErrorBase 26));  -7910 = The SCSI CDB has been received 		;  Couldn't begin execution  30-3F (defconstant $scsiTooManyBuses (+ #$scsiErrorBase 48));  -7888 = Register failed because we're full	(defconstant $scsiBusy (+ #$scsiErrorBase 49))  ;  -7887 = SCSI subsystem is busy 				(defconstant $scsiProvideFail (+ #$scsiErrorBase 50));  -7886 = Unable to provide requ. capability	(defconstant $scsiDeviceNotThere (+ #$scsiErrorBase 51));  -7885 = SCSI device not installed/there  	(defconstant $scsiNoHBA (+ #$scsiErrorBase 52)) ;  -7884 = No HBA detected Error 				(defconstant $scsiDeviceConflict (+ #$scsiErrorBase 53));  -7883 = sorry, max 1 refNum per DeviceIdent 	(defconstant $scsiNoSuchXref (+ #$scsiErrorBase 54));  -7882 = no such RefNum xref 					(defconstant $scsiQLinkInvalid (+ #$scsiErrorBase 55));  -7881 = pre-linked PBs not supported			; 																   (The QLink field was nonzero)		;  Parameter errors  40-7F (defconstant $scsiPBLengthError (+ #$scsiErrorBase 64));  -7872 = (scsiPBLength is insuf'ct/invalid 	(defconstant $scsiFunctionNotAvailable (+ #$scsiErrorBase 65));  -7871 = The requ. func is not available  	(defconstant $scsiRequestInvalid (+ #$scsiErrorBase 66));  -7870 = PB request is invalid 				(defconstant $scsiBusInvalid (+ #$scsiErrorBase 67));  -7869 = Bus ID supplied is invalid  			(defconstant $scsiTIDInvalid (+ #$scsiErrorBase 68));  -7868 = Target ID supplied is invalid 		(defconstant $scsiLUNInvalid (+ #$scsiErrorBase 69));  -7867 = LUN supplied is invalid  			(defconstant $scsiIDInvalid (+ #$scsiErrorBase 70));  -7866 = The initiator ID is invalid  		(defconstant $scsiDataTypeInvalid (+ #$scsiErrorBase 71));  -7865 = scsiDataType requested not supported (defconstant $scsiTransferTypeInvalid (+ #$scsiErrorBase 72));  -7864 = scsiTransferType field is too high 	(defconstant $scsiCDBLengthInvalid (+ #$scsiErrorBase 73));  -7863 = scsiCDBLength field is too big 		(defconstant $scsiExecutionErrors #$scsiErrorBase)(defconstant $scsiNotExecutedErrors #$scsiTooManyBuses)(defconstant $scsiParameterErrors #$scsiPBLengthError);  Defines for the scsiResultFlags field (defconstant $scsiSIMQFrozen #x1)               ;  The SIM queue is frozen w/this err			(defconstant $scsiAutosenseValid #x2)           ;  Autosense data valid for target  			(defconstant $scsiBusNotFree #x4)               ;  At time of callback, SCSI bus is not free	;  Defines for the bit numbers of the scsiFlags field in the PB header for the SCSIExecIO function (defconstant $kbSCSIDisableAutosense 29)        ;  Disable auto sense feature 					(defconstant $kbSCSIFlagReservedA 28)           ;   											(defconstant $kbSCSIFlagReserved0 27)           ;   											(defconstant $kbSCSICDBLinked 26)               ;  The PB contains a linked CDB					(defconstant $kbSCSIQEnable 25)                 ;  Target queue actions are enabled				(defconstant $kbSCSICDBIsPointer 24)            ;  The CDB field contains a pointer				(defconstant $kbSCSIFlagReserved1 23)           ;  												(defconstant $kbSCSIInitiateSyncData 22)        ;  Attempt Sync data xfer and SDTR				(defconstant $kbSCSIDisableSyncData 21)         ;  Disable sync, go to async					(defconstant $kbSCSISIMQHead 20)                ;  Place PB at the head of SIM Q				(defconstant $kbSCSISIMQFreeze 19)              ;  Return the SIM Q to frozen state				(defconstant $kbSCSISIMQNoFreeze 18)            ;  Disallow SIM Q freezing						(defconstant $kbSCSIDoDisconnect 17)            ;  Definitely do disconnect						(defconstant $kbSCSIDontDisconnect 16)          ;  Definitely don't disconnect					(defconstant $kbSCSIDataReadyForDMA 15)         ;  Data buffer(s) are ready for DMA				(defconstant $kbSCSIFlagReserved3 14)           ;  												(defconstant $kbSCSIDataPhysical 13)            ;  SG/Buffer data ptrs are physical				(defconstant $kbSCSISensePhysical 12)           ;  Autosense buffer ptr is physical				(defconstant $kbSCSIFlagReserved5 11)           ;  												(defconstant $kbSCSIFlagReserved6 10)           ;  												(defconstant $kbSCSIFlagReserved7 9)            ;  												(defconstant $kbSCSIFlagReserved8 8)            ;  												(defconstant $kbSCSIDataBufferValid 7)          ;  Data buffer valid							(defconstant $kbSCSIStatusBufferValid 6)        ;  Status buffer valid 							(defconstant $kbSCSIMessageBufferValid 5)       ;  Message buffer valid							(defconstant $kbSCSIFlagReserved9 4)            ;   											;  Defines for the bit masks of the scsiFlags field (defconstant $scsiDirectionMask #xC0000000)     ;  Data direction mask						(defconstant $scsiDirectionNone #xC0000000)     ;  Data direction (11: no data)				(defconstant $scsiDirectionReserved #x0)        ;  Data direction (00: reserved)			(defconstant $scsiDirectionOut #x80000000)      ;  Data direction (10: DATA OUT)			(defconstant $scsiDirectionIn #x40000000)       ;  Data direction (01: DATA IN)				(defconstant $scsiDisableAutosense #x20000000)  ;  Disable auto sense feature				(defconstant $scsiFlagReservedA #x10000000)     ;  											(defconstant $scsiFlagReserved0 #x8000000)      ;  											(defconstant $scsiCDBLinked #x4000000)          ;  The PB contains a linked CDB				(defconstant $scsiQEnable #x2000000)            ;  Target queue actions are enabled			(defconstant $scsiCDBIsPointer #x1000000)       ;  The CDB field contains a pointer			(defconstant $scsiFlagReserved1 #x800000)       ;  											(defconstant $scsiInitiateSyncData #x400000)    ;  Attempt Sync data xfer and SDTR			(defconstant $scsiDisableSyncData #x200000)     ;  Disable sync, go to async				(defconstant $scsiSIMQHead #x100000)            ;  Place PB at the head of SIM Q			(defconstant $scsiSIMQFreeze #x80000)           ;  Return the SIM Q to frozen state			(defconstant $scsiSIMQNoFreeze #x40000)         ;  Disallow SIM Q freezing					(defconstant $scsiDoDisconnect #x20000)         ;  Definitely do disconnect					(defconstant $scsiDontDisconnect #x10000)       ;  Definitely don't disconnect				(defconstant $scsiDataReadyForDMA #x8000)       ;  Data buffer(s) are ready for DMA			(defconstant $scsiFlagReserved3 #x4000)         ;   (defconstant $scsiDataPhysical #x2000)          ;  SG/Buffer data ptrs are physical			(defconstant $scsiSensePhysical #x1000)         ;  Autosense buffer ptr is physical			(defconstant $scsiFlagReserved5 #x800)          ;   										(defconstant $scsiFlagReserved6 #x400)          ;  											(defconstant $scsiFlagReserved7 #x200)          ;  											(defconstant $scsiFlagReserved8 #x100)          ;  											;  bit masks for the scsiIOFlags field in SCSIExecIOPB (defconstant $scsiNoParityCheck #x2)            ;  disable parity checking 							(defconstant $scsiDisableSelectWAtn #x4)        ;  disable select w/Atn  							(defconstant $scsiSavePtrOnDisconnect #x8)      ;  do SaveDataPointer upon Disconnect msg 			(defconstant $scsiNoBucketIn #x10)              ;  don’t bit bucket in during this I/O 				(defconstant $scsiNoBucketOut #x20)             ;  don’t bit bucket out during this I/O 			(defconstant $scsiDisableWide #x40)             ;  disable wide transfer negotiation 				(defconstant $scsiInitiateWide #x80)            ;  initiate wide transfer negotiation 				(defconstant $scsiRenegotiateSense #x100)       ;  renegotiate sync/wide before issuing autosense 	(defconstant $scsiDisableDiscipline #x200)      ;  disable parameter checking on SCSIExecIO calls	(defconstant $scsiIOFlagReserved0080 #x80)      ;   												(defconstant $scsiIOFlagReserved8000 #x8000)    ;  													;  Defines for the SIM/HBA queue actions.  These values are used in the ;  SCSIExecIOPB, for the queue action field. [These values should match the ;  defines from some other include file for the SCSI message phases.  We may ;  not need these definitions here. ] (defconstant $scsiSimpleQTag #x20)              ;  Tag for a simple queue 								(defconstant $scsiHeadQTag #x21)                ;  Tag for head of queue  								(defconstant $scsiOrderedQTag #x22)             ;  Tag for ordered queue 								;  Defines for the Bus Inquiry PB fields. ;  scsiHBAInquiry field bits (defconstant $scsiBusMDP #x80)                  ;  Supports Modify Data Pointer message						(defconstant $scsiBusWide32 #x40)               ;  Supports 32 bit wide SCSI								(defconstant $scsiBusWide16 #x20)               ;  Supports 16 bit wide SCSI								(defconstant $scsiBusSDTR #x10)                 ;  Supports Sync Data Transfer Req message					(defconstant $scsiBusLinkedCDB #x8)             ;  Supports linked CDBs										(defconstant $scsiBusTagQ #x2)                  ;  Supports tag queue message								(defconstant $scsiBusSoftReset #x1)             ;  Supports soft reset										;  scsiDataTypes field bits  ; 	bits 0->15 Apple-defined, 16->30 3rd-party unique, 31 = reserved (defconstant $scsiBusDataTIB (+ 0 (* 1 (expt 2 #$scsiDataTIB))));  TIB supplied (ptr in scsiDataPtr)		(defconstant $scsiBusDataBuffer (+ 0 (* 1 (expt 2 #$scsiDataBuffer))));  single contiguous buffer supplied 		(defconstant $scsiBusDataSG (+ 0 (* 1 (expt 2 #$scsiDataSG))));  scatter/gather list supplied 			(defconstant $scsiBusDataReserved #x80000000)   ;    										;  scsiScanFlags field bits (defconstant $scsiBusScansDevices #x80)         ;  Bus scans for and maintains device list			(defconstant $scsiBusScansOnInit #x40)          ;  Bus scans performed at power-up/reboot			(defconstant $scsiBusLoadsROMDrivers #x20)      ;  may load ROM drivers to support targets 			;  scsiFeatureFlags field bits (defconstant $scsiBusInternalExternalMask #xC0) ;  bus internal/external mask					(defconstant $scsiBusInternalExternalUnknown #x0);  not known whether bus is inside or outside 	(defconstant $scsiBusInternalExternal #xC0)     ;  bus goes inside and outside the box 			(defconstant $scsiBusInternal #x80)             ;  bus goes inside the box 						(defconstant $scsiBusExternal #x40)             ;  bus goes outside the box 					(defconstant $scsiBusCacheCoherentDMA #x20)     ;  DMA is cache coherent 						(defconstant $scsiBusOldCallCapable #x10)       ;  SIM is old call capable 						(defconstant $scsiBusDifferential #x4)          ;  Single Ended (0) or Differential (1) 		(defconstant $scsiBusFastSCSI #x2)              ;  HBA supports fast SCSI 						(defconstant $scsiBusDMAavailable #x1)          ;  DMA is available 							;  scsiWeirdStuff field bits (defconstant $scsiOddDisconnectUnsafeRead1 #x1) ;  Disconnects on odd byte boundries are unsafe with DMA and/or blind reads (defconstant $scsiOddDisconnectUnsafeWrite1 #x2);  Disconnects on odd byte boundries are unsafe with DMA and/or blind writes (defconstant $scsiBusErrorsUnsafe #x4)          ;  Non-handshaked delays or disconnects during blind transfers may cause a crash (defconstant $scsiRequiresHandshake #x8)        ;  Non-handshaked delays or disconnects during blind transfers may cause data corruption (defconstant $scsiTargetDrivenSDTRSafe #x10)    ;  Targets which initiate synchronous negotiations are supported ;  scsiHBAslotType values (defconstant $scsiMotherboardBus #x1)           ;  A built in Apple supplied bus 					(defconstant $scsiNuBus #x2)                    ;  A SIM on a NuBus card 							(defconstant $scsiPDSBus #x3)                   ;     "  on a PDS card								(defconstant $scsiPCIBus #x4)                   ;     "  on a PCI bus card							(defconstant $scsiPCMCIABus #x5)                ;     "  on a PCMCIA card							(defconstant $scsiFireWireBridgeBus #x6)        ;     "  connected through a FireWire bridge		;  Defines for the scsiDriverFlags field (in SCSIDriverPB) (defconstant $scsiDeviceSensitive #x1)          ;  Only driver should access this device				(defconstant $scsiDeviceNoOldCallAccess #x2)    ;  no old call access to this device 					;   SIMInitInfo PB ;  directions are for SCSIRegisterBus call ( -> parm, <- result) 			(defrecord SIMInitInfo    (SIMstaticPtr (:pointer :unsigned-byte))     ;  <- alloc. ptr to the SIM's static vars 				   (staticSize :signed-long)                    ;  -> num bytes SIM needs for static vars 				   (SIMInit :pointer)                           ;  -> pointer to the SIM init routine 					   (SIMAction :pointer)                         ;  -> pointer to the SIM action routine 				   (SIM_ISR :pointer)                           ;  	  reserved 											   (SIMInterruptPoll :pointer)                  ;  -> pointer to the SIM interrupt poll routine			   (NewOldCall :pointer)                        ;  -> pointer to the SIM NewOldCall routine				   (ioPBSize :unsigned-integer)                 ;  -> size of SCSI_IO_PBs required for this SIM			   (oldCallCapable :boolean)                    ;  -> true if this SIM can handle old-API calls			   (simInfoUnused1 :signed-byte)                ;  UInt8 ;  	  reserved											   (simInternalUse :signed-long)                ;  xx not affected or viewed by XPT						   (XPT_ISR :pointer)                           ;     reserved											   (EnteringSIM :pointer)                       ;  <- ptr to the EnteringSIM routine					   (ExitingSIM :pointer)                        ;  <- ptr to the ExitingSIM routine						   (MakeCallback :pointer)                      ;  <- the XPT layer’s SCSIMakeCallback routine	           (busID :unsigned-integer)                    ;  <- bus number for the registered bus					   (simInfoUnused3 :unsigned-integer)           ;  <- reserved											   (simInfoUnused4 :signed-long)                ;  <- reserved											   );  Glue between SCSI calls and SCSITrap format (defconstant $xptSCSIAction #x1)(defconstant $xptSCSIRegisterBus #x2)(defconstant $xptSCSIDeregisterBus #x3)(defconstant $xptSCSIReregisterBus #x4)(defconstant $xptSCSIKillXPT #x5)               ;  kills Mini-XPT after transition (defconstant $xptSCSIInitialize #xA)            ;  Initialize the SCSI manager ;  SCSI status(defconstant $scsiStatGood #x0)                 ;  Good Status(defconstant $scsiStatCheckCondition #x2)       ;  Check Condition(defconstant $scsiStatConditionMet #x4)         ;  Condition Met(defconstant $scsiStatBusy #x8)                 ;  Busy(defconstant $scsiStatIntermediate #x10)        ;  Intermediate(defconstant $scsiStatIntermedMet #x14)         ;  Intermediate - Condition Met(defconstant $scsiStatResvConflict #x18)        ;  Reservation conflict(defconstant $scsiStatTerminated #x20)          ;  Command terminated(defconstant $scsiStatQFull #x28)               ;  Queue full;  SCSI messages(defconstant $kCmdCompleteMsg 0)(defconstant $kExtendedMsg 1)                   ;  0x01(defconstant $kSaveDataPointerMsg 2)            ;  0x02(defconstant $kRestorePointersMsg 3)            ;  0x03(defconstant $kDisconnectMsg 4)                 ;  0x04(defconstant $kInitiatorDetectedErrorMsg 5)     ;  0x05(defconstant $kAbortMsg 6)                      ;  0x06(defconstant $kMsgRejectMsg 7)                  ;  0x07(defconstant $kNoOperationMsg 8)                ;  0x08(defconstant $kMsgParityErrorMsg 9)             ;  0x09(defconstant $kLinkedCmdCompleteMsg 10)         ;  0x0a(defconstant $kLinkedCmdCompleteWithFlagMsg 11) ;  0x0b(defconstant $kBusDeviceResetMsg 12)            ;  0x0c(defconstant $kAbortTagMsg 13)                  ;  0x0d(defconstant $kClearQueueMsg 14)                ;  0x0e(defconstant $kInitiateRecoveryMsg 15)          ;  0x0f(defconstant $kReleaseRecoveryMsg 16)           ;  0x10(defconstant $kTerminateIOProcessMsg 17)        ;  0x11(defconstant $kSimpleQueueTag #x20)             ;  0x20(defconstant $kHeadOfQueueTagMsg 33)            ;  0x21(defconstant $kOrderedQueueTagMsg 34)           ;  0x22(defconstant $kIgnoreWideResidueMsg 35)         ;  0x23;  moveq #kSCSIx, D0;  _SCSIAtomic ; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SCSIAction" ((parameterBlock (:pointer :scsi_pb)))   (:d0 :signed-integer)   (:register-trap #xA089 :a0 parameterBlock :d0 1)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SCSIRegisterBus" ((parameterBlock (:pointer :siminitinfo)))   (:d0 :signed-integer)   (:register-trap #xA089 :a0 parameterBlock :d0 2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SCSIDeregisterBus" ((parameterBlock (:pointer :scsi_pb)))   (:d0 :signed-integer)   (:register-trap #xA089 :a0 parameterBlock :d0 3)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SCSIReregisterBus" ((parameterBlock (:pointer :siminitinfo)))   (:d0 :signed-integer)   (:register-trap #xA089 :a0 parameterBlock :d0 4)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SCSIKillXPT" ((parameterBlock (:pointer :siminitinfo)))   (:d0 :signed-integer)   (:register-trap #xA089 :a0 parameterBlock :d0 5)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := SCSIIncludes; $ENDC                                         ; __SCSI__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'SCSI)