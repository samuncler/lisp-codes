(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Unmangler.p"; at Tuesday June 6,1995 2:23:47 pm.; ---------------------------------------------------------------------------;  |                                                                           |;  |                            <<< Unmangler.p >>>                            |;  |                                                                           |;  |                         C++ Function Name Decoding                        |;  |                                                                           |;  |                 Copyright Apple Computer, Inc. 1988-1995                  |;  |                           All rights reserved.                            |;  |                                                                           |;  ---------------------------------------------------------------------------#|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED UsingUnmangler AND UNDEFINED __UNMANGLER__; $SETC UsingUnmangler := 1; $SETC __UNMANGLER__ := 1; $I+; $SETC UnmanglerIncludes := UsingIncludes; $SETC UsingIncludes := 1; $IFC UNDEFINED UsingTypes AND UNDEFINED __TYPES__(require-interface 'Types)                      ; $I Types.p; $ENDC; $SETC UsingIncludes := UnmanglerIncludes; ; 		FUNCTION unmangle(dst: UNIV Ptr; src: UNIV Ptr; limit: LongInt): LongInt; C;; 			{This function unmangles C++ mangled symbols (i.e. a symbol with a type signature).; 			 The mangled C string is passed in ÒsrcÓ and the unmangled C string is returned in; 			 ÒdstÓ.  Up to ÒlimitÓ characters (not including terminating null) may be retured; 			 in ÒdstÓ.; 		 ; 			 The function returns,; 		 ; 				 -1 ==> error, probably because symbol was not mangled, but looked like it was; 					0 ==> symbol wasn't mangled; not copied either; 					1 ==> symbol was mangled; unmangled result fit in buffer; 					2 ==> symbol was mangled; unmangled result truncated to fit in buffer}; 		; $IFC UNDEFINED __CFM68K__; $PUSH; $LibExport+; $ENDC; This function unmangles C++ mangled symbols (i.e. a symbol with a type signature).; 			 The mangled Pascal string is passed in ÒsrcÓ and the unmangled Pascal string is; 			 returned in ÒdstÓ.  Up to ÒlimitÓ characters may be retured in ÒdstÓ.; 			; 			 The function returns,; 			 ; 				 -1 ==> error, probably because symbol was not mangled, but looked like it was; 					0 ==> symbol wasn't mangled; not copied either; 					1 ==> symbol was mangled; unmangled result fit in buffer; 					2 ==> symbol was mangled; unmangled result truncated to fit in buffer; 					 ; 			 This function is identical to unmangle() above except that all the strings are; 			 Pascal instead of C strings.; 			                                           ; $IFC UNDEFINED __CFM68K__; $POP; $ENDC; $ENDC;  UsingUnmangler ; $IFC NOT UsingIncludes;; Warning: No calling method defined for this trap(deftrap-inline "_Unmangle" ((dst (:pointer (:string 255))) (src (:pointer (:string 255))) (limit :signed-long))   :signed-long   () ); $ENDC(provide-interface 'Unmangler)