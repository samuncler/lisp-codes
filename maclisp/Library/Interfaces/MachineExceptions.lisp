(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:MachineExceptions.p"; at Tuesday June 6,1995 2:13:34 pm.; ;  	File:		MachineExceptions.p;  ;  	Contains:	Processor Exception Handling Interfaces .;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __MACHINEEXCEPTIONS__; $SETC __MACHINEEXCEPTIONS__ := 1; $I+; $SETC MachineExceptionsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											; $PUSH; $ALIGN MAC68K; $LibExport+(def-mactype :areaid (find-mactype ':pointer));  Machine Dependent types for PowerPC: (defrecord MachineInformationPowerPC    (CTR :unsignedwide)   (LR :unsignedwide)   (PC :unsignedwide)   ;;Changing field cr from signed-long to unsigned-long to match C header (pretty-darn-sure)   (CR :unsigned-long)   ;;Changing field xer from signed-long to unsigned-long to match C header (pretty-darn-sure)   (XER :unsigned-long)   ;;Changing field msr from signed-long to unsigned-long to match C header (pretty-darn-sure)   (MSR :unsigned-long)   )(defrecord RegisterInformationPowerPC    (R0 :unsignedwide)   (R1 :unsignedwide)   (R2 :unsignedwide)   (R3 :unsignedwide)   (R4 :unsignedwide)   (R5 :unsignedwide)   (R6 :unsignedwide)   (R7 :unsignedwide)   (R8 :unsignedwide)   (R9 :unsignedwide)   (R10 :unsignedwide)   (R11 :unsignedwide)   (R12 :unsignedwide)   (R13 :unsignedwide)   (R14 :unsignedwide)   (R15 :unsignedwide)   (R16 :unsignedwide)   (R17 :unsignedwide)   (R18 :unsignedwide)   (R19 :unsignedwide)   (R20 :unsignedwide)   (R21 :unsignedwide)   (R22 :unsignedwide)   (R23 :unsignedwide)   (R24 :unsignedwide)   (R25 :unsignedwide)   (R26 :unsignedwide)   (R27 :unsignedwide)   (R28 :unsignedwide)   (R29 :unsignedwide)   (R30 :unsignedwide)   (R31 :unsignedwide)   )(defrecord FPUInformationPowerPC    (Registers (:array :unsignedwide 32))   ;;Changing field fpscr from signed-long to unsigned-long to match C header (pretty-darn-sure)   (FPSCR :unsigned-long)   (Reserved :signed-long)   )(defconstant $writeReference 0)(defconstant $readReference 1)(defconstant $fetchReference 2)(def-mactype :memoryreferencekind (find-mactype ':signed-long))(defrecord MemoryExceptionInformation    (theArea :pointer)   (theAddress :pointer)   (theError :signed-long)   (theReference :signed-long)   )(defconstant $unknownException 0)(defconstant $illegalInstructionException 1)(defconstant $trapException 2)(defconstant $accessException 3)(defconstant $unmappedMemoryException 4)(defconstant $excludedMemoryException 5)(defconstant $readOnlyMemoryException 6)(defconstant $unresolvablePageFaultException 7)(defconstant $privilegeViolationException 8)(defconstant $traceException 9)(defconstant $instructionBreakpointException 10)(defconstant $dataBreakpointException 11)(defconstant $integerException 12)(defconstant $floatingPointException 13)(defconstant $stackOverflowException 14)(defconstant $terminationException 15)(def-mactype :exceptionkind (find-mactype ':signed-long))(defrecord ExceptionInfo    (:variant       (      (memoryInfo (:pointer :memoryexceptioninformation))      )      )   )(defrecord ExceptionInformationPowerPC    (theKind :signed-long)   (machineState (:pointer :machineinformationpowerpc))   (registerImage (:pointer :registerinformationpowerpc))   (FPUImage (:pointer :fpuinformationpowerpc))   (info :exceptioninfo)   )#|                                              ; $IFC GENERATINGPOWERPC (%define-record :exceptioninformation (find-record-descriptor :exceptioninformationpowerpc))(%define-record :machineinformation (find-record-descriptor :machineinformationpowerpc))(%define-record :registerinformation (find-record-descriptor :registerinformationpowerpc))(%define-record :fpuinformation (find-record-descriptor :fpuinformationpowerpc)) |#                                             ; $ENDC;  Note:	An ExceptionHandler is NOT a UniversalProcPtr.; 			It must be a native function pointer with NO routine descriptor. (def-mactype :exceptionhandler (find-mactype ':pointer));  FUNCTION (VAR theException: ExceptionInformationPowerPC): OSStatus; ;  Routine for installing per-process exception handlers ; $ALIGN RESET                                  ; $POP; $SETC UsingIncludes := MachineExceptionsIncludes; $ENDC; __MACHINEEXCEPTIONS__; $IFC NOT UsingIncludes;; Warning: No calling method defined for this trap(deftrap-inline "_InstallExceptionHandler" ((theHandler :pointer))   :pointer   () ); $ENDC(provide-interface 'MachineExceptions)