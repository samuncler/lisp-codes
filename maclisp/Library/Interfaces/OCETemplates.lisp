(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:OCETemplates.p"; at Tuesday June 6,1995 2:15:41 pm.; ;  	File:		OCETemplates.p;  ;  	Contains:	Apple Open Collaboration Environment Templates Interfaces.;  ;  	Version:	Technology:	AOCE Toolbox 1.02;  				Package:	Universal Interfaces 2.1ß1 in “MPW Prerelease” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __OCETEMPLATES__; $SETC __OCETEMPLATES__ := 1; $I+; $SETC OCETemplatesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC; 	Quickdraw.p													; 		MixedMode.p												; 		QuickdrawText.p											; 	OSUtils.p													; 		Memory.p												#|                                              ; $IFC UNDEFINED __CONTROLS__|#(require-interface 'Controls)#|                                              ; $I Controls.p |#                                             ; $ENDC; 	Menus.p														#|                                              ; $IFC UNDEFINED __APPLEEVENTS__|#(require-interface 'AppleEvents)#|                                              ; $I AppleEvents.p |#                                             ; $ENDC; 	Errors.p													; 	EPPC.p														; 		AppleTalk.p												; 		Files.p													; 		PPCToolbox.p											; 		Processes.p												; 	Notification.p												#|                                              ; $IFC UNDEFINED __DIALOGS__|#(require-interface 'Dialogs)#|                                              ; $I Dialogs.p |#                                             ; $ENDC; 	Windows.p													; 	TextEdit.p													#|                                              ; $IFC UNDEFINED __OCE__|#(require-interface 'OCE)#|                                              ; $I OCE.p |#                                             ; $ENDC; 	Aliases.p													; 	Script.p													; 		IntlResources.p											#|                                              ; $IFC UNDEFINED __OCESTANDARDMAIL__|#(require-interface 'OCEStandardMail)#|                                              ; $I OCEStandardMail.p |#                                             ; $ENDC; 	OCEAuthDir.p												; 	OCEMail.p													; 		DigitalSignature.p										; 		OCEMessaging.p											; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kDETAspectVersion -976)(defconstant $kDETInfoPageVersion -976)(defconstant $kDETKillerVersion -976)(defconstant $kDETForwarderVersion -976)(defconstant $kDETFileTypeVersion -976); 	"Normal" separation for template IDs within the file (this is just a suggestion; you can use whatever; 	separation you like, so long as two separate templates don't have overlapping resources): (defconstant $kDETIDSep 250);  A few predefined base IDs (again, just suggestions): (defconstant $kDETFirstID 1000)(defconstant $kDETSecondID (+ 1000 #$kDETIDSep))(defconstant $kDETThirdID (+ 1000 (* 2 #$kDETIDSep)))(defconstant $kDETFourthID (+ 1000 (* 3 #$kDETIDSep)))(defconstant $kDETFifthID (+ 1000 (* 4 #$kDETIDSep))); 	Templates consist of a set of associated resources, at constant offsets from a "base ID" set by the; 	signature resource of the template. In the case of aspect templates, most of the resources in the; 	template are accessible from the template as property default values. The property number is the same; 	as the offset from the base ID of the resource. In describing the resources which make up templates,; 	we give the type, the offset, and a description. For aspect templates, the offset is also the property #. ; 	; 	All templates include the following resource fork resources:; ; 	 Type	Offset						Description; 	 ----	------						-----------; 	'rstr'	kDETTemplateName			Contains the name of the template; ; (defconstant $kDETTemplateName 0); 	Aspects, info-pages, and forwarders include the following as well:; ; 	 Type	Offset						Description; 	 ----	------						-----------; 	'rstr'	kDETRecordType				Contains the type of record this applies to; 	'rstr'	kDETAttributeType			Contains the type of attribute this applies to; 	'detn'	kDETAttributeValueTag		Contains the tag of the attribute values this applies to; ; (defconstant $kDETRecordType 1)(defconstant $kDETAttributeType 2)(defconstant $kDETAttributeValueTag 3);  ************************************ Aspects ; 	In the case of aspects, property numbers and resource id offsets are the same. Therefore, some of the following; 	defines are used for resource offsets, some are used for dynamically generated properties, and some are used for; 	both (i.e., properties which may be dynamically generated, but if they aren't, then they're taken from the; 	resource). Resource types are given in all cases below; even if there is no actual resource (for example in; 	the case of kDETAspectName), it indicates the type for the dynamically generated property. A resource type of; 	'rstr' corresponds to a property type of kDETPrTypeString; type 'detn' corresponds to kDETPrTypeNumber; and; 	'detb' corresponds to kDETPrTypeBinary.; ; 	 Type	Offset						Description; 	 ----	------						-----------; 	'deta'	0							Identifies the type of resource; 	'detc'	kDETCode					Is the code resource, if any is used; 	'ICN#'	kDETAspectMainBitmap; 	'icl8'	kDETAspectMainBitmap; 	'icl4'	kDETAspectMainBitmap; 	'ics#'	kDETAspectMainBitmap; 	'ics8'	kDETAspectMainBitmap; 	'ics4'	kDETAspectMainBitmap; 	'sicn'	kDETAspectMainBitmap		Is the icon suite to display for this item type (main aspect only); 	'rstr'	kDETAspectName				Contains the name of the item (attribute main aspect only); 	'rst#'	kDETAspectCategory			Contains the internal categories for the record type (main aspect only); 	'rst#'	kDETAspectExternalCategory	Contains the external (user-visible) names which correspond to the categories in; 										kDETAspectCategory; if this resource is not present, external names are taken from; 										another template; if no other template provides an external name for a given internal; 										category, the internal name is used as the external name (main aspect only); 	'rstr'	kDETAspectKind				Is the item kind to display (main aspect only); 	'detn'	kDETAspectGender			Is the gender of this kind of object for internationalization (main aspect only); 	'rstr'	kDETAspectWhatIs			Is the string for balloon help when item is in sublist (main aspect only); 	'rstr'	kDETAspectAliasKind			Is the item kind to display for aliases to this type of item (main aspect only); 	'detn'	kDETAspectAliasGender		Is the gender of an alias to this kind of object for internationalization (main aspect only); 	'rstr'	kDETAspectAliasWhatIs		Is the string for balloon help when an alias to the item is in sublist (main aspect only); 	'rst#'	kDETAspectBalloons			Is a list of strings for balloon help; for each item in an info-page, it's; 										property # times 2 is used as an index into this array; if the item is not editable,; 										then the property # times 2 plus 1 is used; 	'rstr'	kDETAspectNewMenuName		Is the string to be used for the user to select new item creation; for records, the; 										string is used as a menu entry in the Catalogs menu; for attributes, the string; 										is used in a selection dialog invoked by an "Add..." button; 	'rstr'	kDETAspectNewEntryName		Is the name to be used for new records (with a digit appended if not unique); 	'detb'	kDETAspectNewValue			Is the value to use when creating a new attribute value; the first four bytes; 										is the tag; the rest is the attribute value contents; 	'detn'	kDETAspectSublistOpenOnNew	If true (non-zero), automatically open newly created entries (property can be set; 										from a code resource, or via a default value in a resource); 	'dett'	kDETAspectLookup			Is the attribute-to-property translation table; 	'rstr'	kDETAspectDragInString		Is a string describing the action of dragging into this aspect (if any); 	'rstr'	kDETAspectDragInVerb		Is a single, short word that's the verb of the action (like "add" or "drop"; if; 										there's any doubt, use "OK"); 	'rstr'	kDETAspectDragInSummary		Is a short phrase that describes the action, suitable to be included in a selection list; 	'rst#'	kDETAspectRecordDragIn		Is a list of type pairs; in each pair, the first is the type of a record which; 										can be dragged into this aspect, and the second is the attribute type to sto(defconstant $kDETAspectCode 4)(defconstant $kDETAspectMainBitmap 5)(defconstant $kDETAspectName 6)(defconstant $kDETAspectCategory 7)(defconstant $kDETAspectExternalCategory 8)(defconstant $kDETAspectKind 9)(defconstant $kDETAspectGender 10)(defconstant $kDETAspectWhatIs 11)(defconstant $kDETAspectAliasKind 12)(defconstant $kDETAspectAliasGender 13)(defconstant $kDETAspectAliasWhatIs 14)(defconstant $kDETAspectBalloons 15)(defconstant $kDETAspectNewMenuName 16)(defconstant $kDETAspectNewEntryName 17)(defconstant $kDETAspectNewValue 18)(defconstant $kDETAspectSublistOpenOnNew 19)(defconstant $kDETAspectLookup 20)(defconstant $kDETAspectDragInString 21)(defconstant $kDETAspectDragInVerb 22)(defconstant $kDETAspectDragInSummary 23)(defconstant $kDETAspectRecordDragIn 24)(defconstant $kDETAspectRecordCatDragIn 25)(defconstant $kDETAspectAttrDragIn 26)(defconstant $kDETAspectAttrDragOut 27)(defconstant $kDETAspectViewMenu 28)(defconstant $kDETAspectReverseSort 29)(defconstant $kDETAspectInfoPageCustomWindow 30);  Properties: (defconstant $kDETNoProperty -1);  Each aspect has 250 attribute properties in this range: (defconstant $kDETFirstLocalProperty 0)(defconstant $kDETLastLocalProperty (+ 0 (+ #$kDETFirstLocalProperty 249)));  Developers should use property numbers starting at this point: (defconstant $kDETFirstDevProperty 40);  The following range provides constant numeric properties for use in patterns and comparisons (constant n is;   ;    given by kDETFirstConstantProperty+n): (defconstant $kDETFirstConstantProperty 250)(defconstant $kDETLastConstantProperty (+ 0 (+ #$kDETFirstConstantProperty 249)));  To convert a number into a constant property, add this: (defconstant $kDETConstantProperty #$kDETFirstConstantProperty)(defconstant $kDETZeroProperty (+ 0 (+ #$kDETConstantProperty 0)))(defconstant $kDETOneProperty (+ 0 (+ #$kDETConstantProperty 1)))(defconstant $kDETFalseProperty (+ 0 (+ #$kDETConstantProperty 0)))(defconstant $kDETTrueProperty (+ 0 (+ #$kDETConstantProperty 1)));  The following apply to records, attributes, or aliases; they are the name and kind, as they appear in icon lists: (defconstant $kDETPrName 3050)(defconstant $kDETPrKind 3051);  Access mask properties: (defconstant $kDETDNodeAccessMask 25825)        ;  The DNode access mask (defconstant $kDETRecordAccessMask 25826)       ;  The record access mask (defconstant $kDETAttributeAccessMask 25827)    ;  The attribute access mask (defconstant $kDETPrimaryMaskByBit 25828)       ;  A set of sixteen properties to access all bits of the primary mask ;  See AOCE documentation for details definitions of each of these bits: (defconstant $kDETPrimarySeeMask #$kDETPrimaryMaskByBit)(defconstant $kDETPrimaryAddMask (+ 0 (+ #$kDETPrimaryMaskByBit 1)))(defconstant $kDETPrimaryDeleteMask (+ 0 (+ #$kDETPrimaryMaskByBit 2)))(defconstant $kDETPrimaryChangeMask (+ 0 (+ #$kDETPrimaryMaskByBit 3)))(defconstant $kDETPrimaryRenameMask (+ 0 (+ #$kDETPrimaryMaskByBit 4)))(defconstant $kDETPrimaryChangePrivsMask (+ 0 (+ #$kDETPrimaryMaskByBit 5)))(defconstant $kDETPrimaryTopMaskBit (+ 0 (+ #$kDETPrimaryMaskByBit 15)));  The following property is zero until we've completed the first catalog lookup; from then on it's 1 (defconstant $kDETPastFirstLookup 26550);  The following property is the page number; issuing a property command with this property will flip info-pages (defconstant $kDETInfoPageNumber 27050);  The value of the following properties contains the template number of the targeted aspect's template, and the;    currently open info-page (if any). These values can be used with kDETAspectTemplate and kDETInfoPageTemplate;    target selectors. (defconstant $kDETAspectTemplateNumber 26551)(defconstant $kDETInfoPageTemplateNumber 26552);  Properties for property commands to deal with sublist items: (defconstant $kDETOpenSelectedItems 26553)      ;  Open selected sublist items (defconstant $kDETAddNewItem 26554)             ;  Add new sublist item (defconstant $kDETRemoveSelectedItems 26555)    ;  Remove selected sublist items ;  Property types are used to specify types of properties and conversions between types (zero and negative numbers;    are reserved for Apple; developer code resources can use positive numbers): (defconstant $kDETPrTypeNumber -1)              ;  A number (defconstant $kDETPrTypeString -2)              ;  A string (defconstant $kDETPrTypeBinary -3)              ;  A binary block ;  ************************************ Info-pages ;  Info-pages include the following as well:; ; 	 Type	Offset						Description; 	 ----	------						-----------; 	'deti'	0							Identifies the type of resource; see below for details on the contents; 	'rstr'	kDETInfoPageName			Is the name of the view to use in the page selection pop-up; 	'rstr'	kDETInfoPageMainViewAspect	Is the name of the aspect to use with the main page view; 	'rstr'	kDETInfoPageMenuName		Is the name of the catalogs menu ("Catalogs" if not present); 	'detm'	kDETInfoPageMenuEntries		Are menu entries to go in the Catalogs menu; ; (defconstant $kDETInfoPageName 4)(defconstant $kDETInfoPageMainViewAspect 5)(defconstant $kDETInfoPageMenuName 6)(defconstant $kDETInfoPageMenuEntries 7);  ************************************ Views ; ;    Flags: (defconstant $kDETNoFlags 0);  Main view (non-sublist) field enabled (defconstant $kDETEnabled 1);  The following flags make sense for items in a sublist only ;  Hilight view when entry is selected (defconstant $kDETHilightIfSelected 1);  The following flags make sense for text views only (defconstant $kDETNumericOnly 8)                ;  Only allow the user to enter digits (defconstant $kDETMultiLine 16)                 ;  Allow multiple lines in view (defconstant $kDETDynamicSize 512)              ;  Don't draw box around text until user clicks in it, then auto-size it; 	 * Don't allow the user to enter colons (convert ":"s to "-"s) (defconstant $kDETAllowNoColons 1024);  The following flags are used for pop-up menus only ;  Automatically resize pop-up based on contents (defconstant $kDETPopupDynamicSize 256);  The following flags are used for EditPicture views only ;  Scale picture to view bounds rather than cropping (defconstant $kDETScaleToView 256); 	Sizes for icons (defconstant $kDETLargeIcon 0)(defconstant $kDETSmallIcon 1)(defconstant $kDETMiniIcon 2);  Stolen from TextEdit.h (defconstant $kDETLeft 0)(defconstant $kDETCenter 1)(defconstant $kDETRight -1)(defconstant $kDETForceLeft -2);  Flags for use within Box view type attributes - these are distinct from the flags above (defconstant $kDETUnused 0)(defconstant $kDETBoxTakesContentClicks 1)(defconstant $kDETBoxIsRounded 2)(defconstant $kDETBoxIsGrayed 4)(defconstant $kDETBoxIsInvisible 8);  The common font info (defconstant $kDETApplicationFont 1)(defconstant $kDETApplicationFontSize 9)(defconstant $kDETAppFontLineHeight 12)(defconstant $kDETSystemFont 0)(defconstant $kDETSystemFontSize 12)(defconstant $kDETSystemFontLineHeight 16)(defconstant $kDETDefaultFont 1)(defconstant $kDETDefaultFontSize 9)(defconstant $kDETDefaultFontLineHeight 12); 	These were taken from QuickDraw.h (where they're enums and therefore unusable in resource definitions): (defconstant $kDETNormal 0)(defconstant $kDETBold 1)(defconstant $kDETItalic 2)(defconstant $kDETUnderline 4)(defconstant $kDETOutline 8)(defconstant $kDETShadow #x10)(defconstant $kDETCondense #x20)(defconstant $kDETExtend #x40)(defconstant $kDETIconStyle -3)                 ;  Normal text style for regular sublist entries, italic text style for aliases ;  View menu: (defconstant $kDETChangeViewCommand :|view|);  Info-page window sizes: ;  Default record info-pages: (defconstant $kDETRecordInfoWindHeight 228)(defconstant $kDETRecordInfoWindWidth 400);  Default attribute info-pages: (defconstant $kDETAttributeInfoWindHeight 250)(defconstant $kDETAttributeInfoWindWidth 230);  Page identifying icon (for default info-page layout): (defconstant $kDETSubpageIconTop 8)(defconstant $kDETSubpageIconLeft 8)(defconstant $kDETSubpageIconBottom (+ 0 (+ #$kDETSubpageIconTop 32)))(defconstant $kDETSubpageIconRight (+ 0 (+ #$kDETSubpageIconLeft 32)));  ************************************ Killers ; ;    Killers include the following as well:; ; 	 Type	Offset						Description; 	 ----	------						-----------; 	'detk'	0							Identifies the type of resource; see below for details on the contents; 	'rst#'	kDETKillerName				Contains a list of template names to be killed; ; (defconstant $kDETKillerName 1);  ************************************ Forwarders ; ;    Forwarders include the following as well:; ; 	 Type	Offset						Description; 	 ----	------						-----------; 	'detf'	0							Identifies the type of resource; see below for details on the contents; 	'rst#'	kDETForwarderTemplateNames	Contains a list of names of templates to forward to; ; (defconstant $kDETForwarderTemplateNames 4);  Target specification: (defconstant $kDETSelf 0)                       ;  The "current" item (defconstant $kDETSelfOtherAspect 1)            ;  Another aspect of the current item (defconstant $kDETParent 2)                     ;  The parent (i.e., the aspect we're in the sublist of, if any) of the current item (defconstant $kDETSublistItem 3)                ;  The itemNumberth item in the sublist (defconstant $kDETSelectedSublistItem 4)        ;  The itemNumberth selected item in the sublist (defconstant $kDETDSSpec 5)                     ;  The item specified by the packed DSSpec (defconstant $kDETAspectTemplate 6)             ;  A specific aspect template (number itemNumber) (defconstant $kDETInfoPageTemplate 7)           ;  A specific info-page template (number itemNumber); 	*  Force type to be short (defconstant $kDETHighSelector #xF000)(def-mactype :dettargetselector (find-mactype ':signed-long))(defrecord DETTargetSpecification    (selector :signed-long)                      ;  Target selection method (see above)    (aspectName (:pointer :rstring))             ;  The name of the aspect (kDETSelfOtherAspect, kDETSublistItem,; 										   kDETSelectedSublistItem, kDETDSSpec); nil for main aspect or none;; 										   always filled in for calls if there is an aspect, even if it's the main aspect    (itemNumber :signed-long)                    ;  Sublist index (kDETSublistItem & kDETSelectedSublistItem & kDETAspectTemplate);; 										   1-based indexing    (dsSpec (:pointer :packeddsspec))            ;  DSSpec (kDETDSSpec only)    );  Code resource calls and call-backs both return an OSType:; 		kDETDidNotHandle (1)	= used by template to say "I didn't handle it" (for calls only); 		noErr					= function completed successfully; 		any error				= function failed, and here's why; ; $SETC kDETDidNotHandle := 1(defconstant $kDETcmdSimpleCallback 0)(defconstant $kDETcmdBeep 1)(defconstant $kDETcmdBusy 2)(defconstant $kDETcmdChangeCallFors 3)(defconstant $kDETcmdGetCommandSelectionCount 4)(defconstant $kDETcmdGetCommandItemN 5)(defconstant $kDETcmdOpenDSSpec 6)(defconstant $kDETcmdAboutToTalk 7)(defconstant $kDETcmdUnloadTemplates 8)(defconstant $kDETcmdTemplateCounts 9)(defconstant $kDETcmdTargetedCallback 1000)(defconstant $kDETcmdGetDSSpec 1001)(defconstant $kDETcmdSublistCount 1002)(defconstant $kDETcmdSelectedSublistCount 1003)(defconstant $kDETcmdRequestSync 1004)(defconstant $kDETcmdBreakAttribute 1005)(defconstant $kDETcmdGetTemplateFSSpec 1006)(defconstant $kDETcmdGetOpenEdit 1007)(defconstant $kDETcmdCloseEdit 1008)(defconstant $kDETcmdPropertyCallback 2000)(defconstant $kDETcmdGetPropertyType 2001)(defconstant $kDETcmdGetPropertyNumber 2002)(defconstant $kDETcmdGetPropertyRString 2003)(defconstant $kDETcmdGetPropertyBinarySize 2004)(defconstant $kDETcmdGetPropertyBinary 2005)(defconstant $kDETcmdGetPropertyChanged 2006)(defconstant $kDETcmdGetPropertyEditable 2007)(defconstant $kDETcmdSetPropertyType 2008)(defconstant $kDETcmdSetPropertyNumber 2009)(defconstant $kDETcmdSetPropertyRString 2010)(defconstant $kDETcmdSetPropertyBinary 2011)(defconstant $kDETcmdSetPropertyChanged 2012)(defconstant $kDETcmdSetPropertyEditable 2013)(defconstant $kDETcmdDirtyProperty 2014)(defconstant $kDETcmdDoPropertyCommand 2015)(defconstant $kDETcmdAddMenu 2016)(defconstant $kDETcmdRemoveMenu 2017)(defconstant $kDETcmdMenuItemRString 2018)(defconstant $kDETcmdSaveProperty 2019)(defconstant $kDETcmdGetCustomViewUserReference 2020)(defconstant $kDETcmdGetCustomViewBounds 2021)(defconstant $kDETcmdGetResource 2022);  Force type to be long (defconstant $kDETcmdHighCallback #xF0000000)(def-mactype :detcallbackfunctions (find-mactype ':signed-long))(defrecord DETProtoCallBackBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   )(defrecord DETBeepBlock    (reqFunction :signed-long)   )(defrecord DETBusyBlock    (reqFunction :signed-long)   )(defrecord DETChangeCallForsBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (newCallFors :signed-long)                   ;   -> New call-for mask    )(defrecord DETGetCommandSelectionCountBlock    (reqFunction :signed-long)   (count :signed-long)                         ;  <-  The number of items in the command selection list    )(defconstant $kDETHFSType 0)                    ;  HFS item type (defconstant $kDETDSType 1)                     ;  Catalog Service item type (defconstant $kDETMailType 2)                   ;  Mail (letter) item type (defconstant $kDETMoverType 3)                  ;  Sounds, fonts, etc., from inside a suitcase or system file (defconstant $kDETLastItemType #xF0000000)      ;  Force it to be a long (C & C++ seem to disagree about the definition of 0xF000) (def-mactype :detitemtype (find-mactype ':signed-long));  FSSpec plus possibly interesting additional info (defrecord DETFSInfo    (fileType :ostype)                           ;  File type    (fileCreator :ostype)                        ;  File creator    ;;Changing field fdflags from signed-integer to unsigned-word to match C header (pretty-sure)   (fdFlags :unsigned-word)                     ;  Finder flags    (FSSpec :fsspec)                             ;  FSSpec    )(defrecord DSRec    (dsSpec (:handle :packeddsspec))             ;  <-  DSSpec for item (caller must DisposHandle() when done)    (refNum :signed-integer)                     ;  <-  Refnum for returned address    (identity :signed-long)                      ;  <-  Identity for returned address    )(def-mactype :detfsinfoptr (find-mactype '(:pointer :detfsinfo)))(def-mactype :letterspecptr (find-mactype '(:pointer :letterspec)))(defrecord ItemRec    (:variant       (      (fsInfo (:handle :detfsinfo))             ;  <-  FSSpec & info for item (caller must DisposHandle() when done)       )      (      (ds :dsrec)      )      (      (dsSpec (:handle :packeddsspec))          ;  <-  DSSpec for item (caller must DisposHandle() when done)       )      (      (ltrSpec (:handle :letterspec))           ;  <-  Letter spec for item (caller must DisposHandle() when done)       )      )   )(defrecord DETGetCommandItemNBlock    (reqFunction :signed-long)   (itemNumber :signed-long)                    ;   -> Item number to retrieve (1-based)    (itemType :signed-long)                      ;   -> Type of item to be returned (if we can interpret it as such)    (item :itemrec)   )(defrecord DETGetDSSpecBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (dsSpec (:handle :packeddsspec))             ;  <-  Handle with result (caller must DisposHandle() when done)    (refNum :signed-integer)                     ;  <-  Refnum for address if PD    (identity :signed-long)                      ;  <-  Identity for address    (isAlias :boolean)                           ;  <-  True if this entry is an alias    (isRecordRef :boolean)                       ;  <-  True if this entry is a record reference (reserved)    )(defrecord DETGetTemplateFSSpecBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (FSSpec :fsspec)                             ;  <-  FSSpec of template file    (baseID :signed-integer)                     ;  <-  Base ID of this template    (aspectTemplateNumber :signed-long)          ;  <-  The template number for this aspect template    )(defrecord DETGetOpenEditBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (viewProperty :signed-integer)               ;  <-  The property of the view being edited (or kNoProperty if none)    )(defrecord DETCloseEditBlock    (reqFunction :signed-long)   (target :dettargetspecification)   )(defrecord DETGetPropertyTypeBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (propertyType :signed-integer)               ;  <-  The type of the property    )(defrecord DETGetPropertyNumberBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   ;;Changing field propertyvalue from signed-long to unsigned-long to match C header (pretty-darn-sure)   (propertyValue :unsigned-long)               ;  <-  The value of the property    )(defrecord DETGetPropertyRStringBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (propertyValue (:handle :rstring))           ;  <-  A handle containing the property (as an RString) (caller must DisposHandle() when done)    )(defrecord DETGetPropertyBinarySizeBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (propertyBinarySize :signed-long)            ;  <-  The size of the property as a binary block    )(defrecord DETGetPropertyBinaryBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (propertyValue :handle)                      ;  <-  Handle with the value of the property (caller must DisposHandle() when done)    )(defrecord DETGetPropertyChangedBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (propertyChanged :boolean)                   ;  <-  True if the property is marked as changed    (filler1 :boolean)   )(defrecord DETGetPropertyEditableBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (propertyEditable :boolean)                  ;  <-  True if the property can be edited by the user (if false, view will appear disabled)    (filler1 :boolean)   )(defrecord DETSetPropertyTypeBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (newType :signed-integer)                    ;   -> New type for property (just sets type, does not convert contents)    )(defrecord DETSetPropertyNumberBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   ;;Changing field newvalue from signed-long to unsigned-long to match C header (pretty-darn-sure)   (newValue :unsigned-long)                    ;   -> New value to set property to (and set type to number)    )(defrecord DETSetPropertyRStringBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (newValue (:pointer :rstring))               ;   -> New value to set property to (and set type to RString)    )(defrecord DETSetPropertyBinaryBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (newValue :pointer)                          ;   -> New value to set property to (and set type to binary)    (newValueSize :signed-long)                  ;   -> Size of new value    )(defrecord DETSetPropertyChangedBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (propertyChanged :boolean)                   ;   -> Value to set changed flag on property to    (filler1 :boolean)   )(defrecord DETSetPropertyEditableBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (propertyEditable :boolean)                  ;   -> Value to set editable flag on property to    (filler1 :boolean)   )(defrecord DETDirtyPropertyBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   )(defrecord DETDoPropertyCommandBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (parameter :signed-long)                     ;  ->  Parameter of command    )(defrecord DETSublistCountBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (count :signed-long)                         ;  <-  The number of items in the current item's sublist    )(defrecord DETSelectedSublistCountBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (count :signed-long)                         ;  <-  The number of selected items in the current item's sublist    )(defrecord DETRequestSyncBlock    (reqFunction :signed-long)   (target :dettargetspecification)   )(defrecord DETAddMenuBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (name (:pointer :rstring))                   ;   -> Name of new menu item    (parameter :signed-long)                     ;   -> Parameter to return when this item is selected    (addAfter :signed-long)                      ;   -> Parameter of entry to add after, or -1 for add at end    )(defrecord DETRemoveMenuBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (itemToRemove :signed-long)                  ;   -> Parameter of menu item to remove    )(defrecord DETMenuItemRStringBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (itemParameter :signed-long)                 ;   -> Parameter of menu item to return string for    (rString (:handle :rstring))                 ;  <-  Handle with the RString (caller must DisposHandle() when done)    )(defrecord DETOpenDSSpecBlock    (reqFunction :signed-long)   (dsSpec (:pointer :packeddsspec))            ;   -> DSSpec of object to be opened    )(defrecord DETAboutToTalkBlock    (reqFunction :signed-long)   )(defrecord DETBreakAttributeBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (breakAttribute (:pointer :attribute))       ;   -> Attribute to parse    (isChangeable :boolean)                      ;   -> True if the value can be changed by the user    (filler1 :boolean)   )(defrecord DETSavePropertyBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   )(defrecord DETGetCustomViewUserReferenceBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (userReference :signed-integer)              ;  <-  User reference value, as specified in the .r file    )(defrecord DETGetCustomViewBoundsBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (bounds :rect)                               ;  <-  Bounds of the view    )(defrecord DETGetResourceBlock    (reqFunction :signed-long)   (target :dettargetspecification)   (property :signed-integer)   (resourceType :ostype)                       ;   -> Resource type    (theResource :handle)                        ;  <-  The resource handle (caller must dispose when done)    )(defrecord DETTemplateCounts    (reqFunction :signed-long)   (aspectTemplateCount :signed-long)           ;  <-  Number of aspect templates in the system    (infoPageTemplateCount :signed-long)         ;  <-  Number of info-page templates in the system    )(defrecord DETUnloadTemplatesBlock    (reqFunction :signed-long)   )(defrecord DETCallBackBlock    (:variant       (      (protoCallBack :detprotocallbackblock)      )      (      (beep :detbeepblock)      )      (      (busy :detbusyblock)      )      (      (changeCallFors :detchangecallforsblock)      )      (      (getCommandSelectionCount :detgetcommandselectioncountblock)      )      (      (getCommandItemN :detgetcommanditemnblock)      )      (      (getDSSpec :detgetdsspecblock)      )      (      (getTemplateFSSpec :detgettemplatefsspecblock)      )      (      (getOpenEdit :detgetopeneditblock)      )      (      (closeEdit :detcloseeditblock)      )      (      (getPropertyType :detgetpropertytypeblock)      )      (      (getPropertyNumber :detgetpropertynumberblock)      )      (      (getPropertyRString :detgetpropertyrstringblock)      )      (      (getPropertyBinarySize :detgetpropertybinarysizeblock)      )      (      (getPropertyBinary :detgetpropertybinaryblock)      )      (      (getPropertyChanged :detgetpropertychangedblock)      )      (      (getPropertyEditable :detgetpropertyeditableblock)      )      (      (setPropertyType :detsetpropertytypeblock)      )      (      (setPropertyNumber :detsetpropertynumberblock)      )      (      (setPropertyRString :detsetpropertyrstringblock)      )      (      (setPropertyBinary :detsetpropertybinaryblock)      )      (      (setPropertyChanged :detsetpropertychangedblock)      )      (      (setPropertyEditable :detsetpropertyeditableblock)      )      (      (dirtyProperty :detdirtypropertyblock)      )      (      (doPropertyCommand :detdopropertycommandblock)      )      (      (sublistCount :detsublistcountblock)      )      (      (selectedSublistCount :detselectedsublistcountblock)      )      (      (requestSync :detrequestsyncblock)      )      (      (addMenu :detaddmenublock)      )      (      (removeMenu :detremovemenublock)      )      (      (menuItemRString :detmenuitemrstringblock)      )      (      (openDSSpec :detopendsspecblock)      )      (      (aboutToTalk :detabouttotalkblock)      )      (      (breakAttribute :detbreakattributeblock)      )      (      (saveProperty :detsavepropertyblock)      )      (      (getCustomViewUserReference :detgetcustomviewuserreferenceblock)      )      (      (getCustomViewBounds :detgetcustomviewboundsblock)      )      (      (getResource :detgetresourceblock)      )      (      (templateCounts :dettemplatecounts)      )      (      (unloadTemplates :detunloadtemplatesblock)      )      )   )(def-mactype :detcallbackblockptr (find-mactype '(:pointer :detcallbackblock)))(def-mactype :detcallbackprocptr (find-mactype ':pointer));  FUNCTION DETCallBack(VAR callBlockPtr: DETCallBlock; callBackBlockPtr: DETCallBackBlockPtr): OSErr; (def-mactype :detcallbackupp (find-mactype ':pointer))(def-mactype :detcallback (find-mactype ':pointer));  Call functions:; ; 		reqFunction						Action; 		-----------						------; 		kDETcmdInit						Called once when template is first loaded (good time to allocate private data); returns call-for list; 		kDETcmdExit						Called once when template is freed (good time to free private data); ; 		kDETcmdAttributeCreation		New sublist attribute creation about to occur; this gives the template a chance to modify; 										the value that's about to be created; sent to the template that will be used for; 										the main aspect of the new entry; ; 		kDETcmdDynamicForwarders		Return a list of dynamically created forwarders; ; 		kDETcmdInstanceInit				Called once when instance of template is started (good time to allocate private instance data); 		kDETcmdInstanceExit				Called once when instance is ended (good time to free private instance data); ; 		kDETcmdIdle						Called periodically during idle times; ; 		kDETcmdViewListChanged			Called when the info-page view-list (list of enabled views) has changed; ; 		kDETcmdValidateSave				Validate save: about to save info-page, return noErr (or kDETDidNotHandle) if it's OK to do so; ; 		kDETcmdDropQuery				Drop query: return the appropriate operation for this drag; ask destination; 		kDETcmdDropMeQuery				Drop query: return the appropriate operation for this drag; ask dropee; ; 		kDETcmdAttributeNew				Attribute value new (return kDETDidNotHandle to let normal new processing occur); 		kDETcmdAttributeChange			Attribute value change (return kDETDidNotHandle to let normal change processing occur); 		kDETcmdAttributeDelete			Attribute value delete (return kDETDidNotHandle to let normal deletion occur); sent to the; 										main aspect of the attribute that's about to be deleted; 		kDETcmdItemNew					Target item (record or attribute) has just been created; ; 		kDETcmdOpenSelf					Self open (return noErr to prevent opening; return kDETDidNotHandle to allow it); ; 		kDETcmdDynamicResource			Return a dynamically created resource; ; 		kDETcmdShouldSync				Check if the code resource wants to force a sync (update data from catalog); 		kDETcmdDoSync					Give code resource a chance to sync (read in and break all attributes); ; 		kDETcmdPropertyCommand			Command received in the property number range (usually means a button's been pushed); ; 		kDETcmdMaximumTextLength		Return maximum size for text form of property; ; 		kDETcmdPropertyDirtied			Property dirtied, need to redraw; ; 		kDETcmdPatternIn				Custom pattern element encountered on reading in an attribute; 		kDETcmdPatternOut				Custom pattern element encountered on writing out an attribute; ; 		kDETcmdConvertToNumber			Convert from template-defined property type to number; 		kDETcmdConvertToRString			Convert from template-defined property type to RString; 		kDETcmdConvertFromNumber		Convert from number to template-defined property type; 		kDETcmdConvertFromRString		Convert from RString to template-defined property type; ; 		kDETcmdCustomViewDraw			Custom view draw; 		kDETcmdCustomViewMouseDown		Custom view mouse down; ; 		kDETcmdKeyPress					Key press (used primarily to filter entry into EditText views); 		kDETcmdPaste					Paste (used primarily to filter entry into EditText views); ; 		kDETcmdCustomMenuSelected		Custom Catalogs menu selected; 		kDETcmdCustomMenuEnabled		Return whether custom Catalogs menu entry should be enabled; (defconstant $kDETcmdSimpleCall 0)(defconstant $kDETcmdInit 1)(defconstant $kDETcmdExit 2)(defconstant $kDETcmdAttributeCreation 3)(defconstant $kDETcmdDynamicForwarders 4)(defconstant $kDETcmdTargetedCall 1000)(defconstant $kDETcmdInstanceInit 1001)(defconstant $kDETcmdInstanceExit 1002)(defconstant $kDETcmdIdle 1003)(defconstant $kDETcmdViewListChanged 1004)(defconstant $kDETcmdValidateSave 1005)(defconstant $kDETcmdDropQuery 1006)(defconstant $kDETcmdDropMeQuery 1007)(defconstant $kDETcmdAttributeNew 1008)(defconstant $kDETcmdAttributeChange 1009)(defconstant $kDETcmdAttributeDelete 1010)(defconstant $kDETcmdItemNew 1011)(defconstant $kDETcmdOpenSelf 1012)(defconstant $kDETcmdDynamicResource 1013)(defconstant $kDETcmdShouldSync 1014)(defconstant $kDETcmdDoSync 1015)(defconstant $kDETcmdPropertyCall 2000)(defconstant $kDETcmdPropertyCommand 2001)(defconstant $kDETcmdMaximumTextLength 2002)(defconstant $kDETcmdPropertyDirtied 2003)(defconstant $kDETcmdPatternIn 2004)(defconstant $kDETcmdPatternOut 2005)(defconstant $kDETcmdConvertToNumber 2006)(defconstant $kDETcmdConvertToRString 2007)(defconstant $kDETcmdConvertFromNumber 2008)(defconstant $kDETcmdConvertFromRString 2009)(defconstant $kDETcmdCustomViewDraw 2010)(defconstant $kDETcmdCustomViewMouseDown 2011)(defconstant $kDETcmdKeyPress 2012)(defconstant $kDETcmdPaste 2013)(defconstant $kDETcmdCustomMenuSelected 2014)(defconstant $kDETcmdCustomMenuEnabled 2015)(defconstant $kDETcmdHighCall #xF0000000)       ;  Force the type to be long (def-mactype :detcallfunctions (find-mactype ':signed-long))(defrecord DETProtoCallBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   )(defrecord DETInitBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (newCallFors :signed-long)                   ;  <-  New call-for mask    )(defrecord DETExitBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   )(defrecord DETInstanceInitBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   )(defrecord DETInstanceExitBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   )(defrecord DETInstanceIdleBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   )(defrecord DETPropertyCommandBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (parameter :signed-long)                     ;   -> Parameter of command    )(defrecord DETMaximumTextLengthBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (maxSize :signed-long)                       ;  <-  Return the maximum number of characters the user can entry when property is edited in an EditText    )(defrecord DETViewListChangedBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   )(defrecord DETPropertyDirtiedBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   )(defrecord DETValidateSaveBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (errorString (:handle :rstring))             ;  <-  Handle with error string if validation fails (callee must allocate handle, DE will DisposHandle() it)    );  Valid commandIDs for DETDropQueryBlock and DETDropMeQueryBlock (in addition to property numbers): (defconstant $kDETDoNothing :|xxx0|)(defconstant $kDETMove :|move|)(defconstant $kDETDrag :|drag|)(defconstant $kDETAlias :|alis|)(defrecord DETDropQueryBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (modifiers :signed-integer)                  ;   -> Modifiers at drop time (option/control/command/shift keys)    (commandID :signed-long)                     ;  <-> Command ID (kDETDoNothing, kDETMove, kDETDrag (copy), kDETAlias, or a property number)    (destinationType :attributetype)             ;  <-> Type to convert attribute to    (copyToHFS :boolean)                         ;  <-  If true, object should be copied to HFS before being operated on, and deleted after    (filler2 :boolean)   )(defrecord DETDropMeQueryBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (modifiers :signed-integer)                  ;   -> Modifiers at drop time (option/control/command/shift keys)    (commandID :signed-long)                     ;  <-> Command ID (kDETDoNothing, kDETMove, kDETDrag (copy), kDETAlias, or a property number)    (destinationType :attributetype)             ;  <-> Type to convert attribute to    (copyToHFS :boolean)                         ;  <-  If true, object should be copied to HFS before being operated on, and deleted after    (filler2 :boolean)   )(defrecord DETAttributeCreationBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (parent (:pointer :packeddsspec))            ;   -> The object within which the creation will occur    (refNum :signed-integer)                     ;   -> Refnum for returned address (DSSpecs in PDs only)    (identity :signed-long)                      ;   -> The identity we're browsing as in the parent object    (attrType :attributetype)                    ;  <-> The type of the attribute being created    (attrTag :ostype)                            ;  <-> The tag of the attribute being created    (value :handle)                              ;  <-> The value to write (pre-allocated, resize as needed)    )(defrecord DETAttributeNewBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (parent (:pointer :packeddsspec))            ;   -> The object within which the creation will occur    (refNum :signed-integer)                     ;   -> Refnum for returned address (DSSpecs in PDs only)    (identity :signed-long)                      ;   -> The identity we're browsing as in the parent object    (attrType :attributetype)                    ;  <-> The type of the attribute being created    (attrTag :ostype)                            ;  <-> The tag of the attribute being created    (value :handle)                              ;  <-> The value to write (pre-allocated, resize as needed)    )(defrecord DETAttributeChangeBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (parent (:pointer :packeddsspec))            ;   -> The object within which the creation will occur    (refNum :signed-integer)                     ;   -> Refnum for returned address (DSSpecs in PDs only)    (identity :signed-long)                      ;   -> The identity we're browsing as in the parent object    (attrType :attributetype)                    ;  <-> The type of the attribute being changed    (attrTag :ostype)                            ;  <-> The tag of the attribute being changed    (attrCID :creationid)                        ;  <-> The CID of the attribute being changed    (value :handle)                              ;  <-> The value to write (pre-allocated, resize as needed)    )(defrecord DETAttributeDeleteBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (dsSpec (:pointer :packeddsspec))            ;   -> The object which will be deleted    (refNum :signed-integer)                     ;   -> Refnum for returned address (DSSpecs in PDs only)    (identity :signed-long)                      ;   -> The identity we're browsing as    )(defrecord DETItemNewBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   )(defrecord DETShouldSyncBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (shouldSync :boolean)                        ;  <-  True if we should now sync with catalog    (filler2 :boolean)   )(defrecord DETDoSyncBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   )(defrecord DETPatternInBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (elementType :signed-long)                   ;   -> Element type from pattern    (extra :signed-long)                         ;   -> Extra field from pattern    (attribute (:pointer :attribute))            ;   -> The complete attribute    (dataOffset :signed-long)                    ;  <-> Offset to current (next) byte    (bitOffset :signed-integer)                  ;  <-> Bit offset (next bit is *fData >> fBitOffset++)    )(defrecord DETPatternOutBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (elementType :signed-long)                   ;   -> Element type from pattern    (extra :signed-long)                         ;   -> Extra field from pattern    (attribute (:pointer :attribute))            ;   -> The attribute (minus the data portion)    (data :handle)                               ;   -> Data to be written (pre-allocated, resize and add at end)    (dataOffset :signed-long)                    ;  <-> Offset to next byte to write    (bitOffset :signed-integer)                  ;  <-> Bit offset (if zero, handle will need to be resized to one more byte before write)    )(defrecord DETOpenSelfBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (modifiers :signed-integer)                  ;   -> Modifiers at open time (option/control/command/shift keys)    )(defrecord DETConvertToNumberBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (theValue :signed-long)                      ;  <-  The converted value to return    )(defrecord DETConvertToRStringBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (theValue (:handle :rstring))                ;  <-  A handle with the converted value (callee must allocate handle, DE will DisposHandle() it)    )(defrecord DETConvertFromNumberBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (theValue :signed-long)                      ;   -> The value to convert (result should be written direct to the property)    )(defrecord DETConvertFromRStringBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (theValue (:pointer :rstring))               ;   -> The value to convert (result should be written direct to the property)    )(defrecord DETCustomViewDrawBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   )(defrecord DETCustomViewMouseDownBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (theEvent (:pointer :eventrecord))           ;   -> The original event record of the mouse-down    )(defrecord DETKeyPressBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (theEvent (:pointer :eventrecord))           ;   -> The original event record of the key-press    )(defrecord DETPasteBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (property :signed-integer)   (modifiers :signed-integer)                  ;   -> Modifiers at paste time (option/control/command/shift keys)    )(defrecord DETCustomMenuSelectedBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (menuTableParameter :signed-integer)         ;   -> The "property" field from the custom menu table    )(defrecord DETCustomMenuEnabledBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (menuTableParameter :signed-integer)         ;   -> The "property" field from the custom menu table    (enable :boolean)                            ;  <-  Whether to enable the menu item    (filler2 :boolean)   )(def-mactype :detforwarderlistitemptr (find-mactype '(:pointer :detforwarderlistitem)))(defrecord DETForwarderListItem    (next (:handle :detforwarderlistitem))       ;  Pointer to next item, or nil    (attributeValueTag :ostype)                  ;  Tag of new templates (0 for none)    (rstrs :packedpathname)                      ;  Record type (empty if none), attrbute type (empty if none),; 												list of template names to forward to    )(def-mactype :detforwarderlisthandle (find-mactype '(:handle :detforwarderlistitem)))(defrecord DETDynamicForwardersBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (forwarders (:handle :detforwarderlistitem)) ;  <-  List of forwaders    )(defrecord DETDynamicResourceBlock    (reqFunction :signed-long)   (callBack :pointer)   (callBackPrivate :signed-long)   (templatePrivate :signed-long)   (instancePrivate :signed-long)   (target :dettargetspecification)   (targetIsMainAspect :boolean)   (filler1 :boolean)   (resourceType :ostype)                       ;   -> The resource type being requested    (propertyNumber :signed-integer)             ;   -> The property number of the resource being requested    (resourceID :signed-integer)                 ;   -> The resource ID (base ID + property number) of the resource    (theResource :handle)                        ;  <-  The requested resource    )(defrecord DETCallBlock    (:variant       (      (protoCall :detprotocallblock)      )      (      (init :detinitblock)      )      (      (exit :detexitblock)      )      (      (instanceInit :detinstanceinitblock)      )      (      (instanceExit :detinstanceexitblock)      )      (      (instanceIdle :detinstanceidleblock)      )      (      (propertyCommand :detpropertycommandblock)      )      (      (maximumTextLength :detmaximumtextlengthblock)      )      (      (viewListChanged :detviewlistchangedblock)      )      (      (propertyDirtied :detpropertydirtiedblock)      )      (      (validateSave :detvalidatesaveblock)      )      (      (dropQuery :detdropqueryblock)      )      (      (dropMeQuery :detdropmequeryblock)      )      (      (attributeCreationBlock :detattributecreationblock)      )      (      (attributeNew :detattributenewblock)      )      (      (attributeChange :detattributechangeblock)      )      (      (attributeDelete :detattributedeleteblock)      )      (      (itemNew :detitemnewblock)      )      (      (patternIn :detpatterninblock)      )      (      (patternOut :detpatternoutblock)      )      (      (shouldSync :detshouldsyncblock)      )      (      (doSync :detdosyncblock)      )      (      (openSelf :detopenselfblock)      )      (      (convertToNumber :detconverttonumberblock)      )      (      (convertToRString :detconverttorstringblock)      )      (      (convertFromNumber :detconvertfromnumberblock)      )      (      (convertFromRString :detconvertfromrstringblock)      )      (      (customViewDraw :detcustomviewdrawblock)      )      (      (customViewMouseDown :detcustomviewmousedownblock)      )      (      (keyPress :detkeypressblock)      )      (      (paste :detpasteblock)      )      (      (customMenuSelected :detcustommenuselectedblock)      )      (      (customMenuEnabled :detcustommenuenabledblock)      )      (      (dynamicForwarders :detdynamicforwardersblock)      )      (      (dynamicResource :detdynamicresourceblock)      )      )   )(def-mactype :detcallblockptr (find-mactype '(:pointer :detcallblock)))(defconstant $uppDETCallBackProcInfo #x3E0)     ;  FUNCTION (4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDETCallBackProc" ((callBlockPtr (:pointer :detcallblock)) (callBackBlockPtr (:pointer :detcallbackblock)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDETCallBackProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC(defconstant $kDETCallForOther 1)               ;  Call for things not listed below (also auto-enabled by DE if any of the below are enabled) (defconstant $kDETCallForIdle 2)                ;  kDETcmdIdle (defconstant $kDETCallForCommands 4)            ;  kDETcmdPropertyCommand, kDETcmdSelfOpen (defconstant $kDETCallForViewChanges 8)         ;  kDETcmdViewListChanged, kDETcmdPropertyDirtied, kDETcmdMaximumTextLength (defconstant $kDETCallForDrops #x10)            ;  kDETcmdDropQuery, kDETcmdDropMeQuery (defconstant $kDETCallForAttributes #x20)       ;  kDETcmdAttributeCreation, kDETcmdAttributeNew, kDETcmdAttributeChange, kDETcmdAttributeDelete (defconstant $kDETCallForValidation #x40)       ;  kDETcmdValidateSave (defconstant $kDETCallForKeyPresses #x80)       ;  kDETcmdKeyPress and kDETcmdPaste (defconstant $kDETCallForResources #x100)       ;  kDETcmdDynamicResource (defconstant $kDETCallForSyncing #x200)         ;  kDETcmdShouldSync, kDETcmdDoSync (defconstant $kDETCallForEscalation #x8000)     ;  All calls escalated from the next lower level (defconstant $kDETCallForNothing 0)             ;  None of the above; 	* All of the above (defconstant $kDETCallForEverything #xFFFFFFFF)(def-mactype :detcallprocptr (find-mactype ':pointer));  FUNCTION DETCall(callBlockPtr: DETCallBlockPtr): OSErr; (def-mactype :detcallupp (find-mactype ':pointer))(defconstant $uppDETCallProcInfo #xE0)          ;  FUNCTION (4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDETCallProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDETCallProc" ((callBlockPtr (:pointer :detcallblock)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC(def-mactype :detcall (find-mactype ':pointer));  This following macro saves you from having to dig out the call-back pointer from the call block: (defconstant $kSAMFirstDevProperty 50); ; 	SAM templates have additional resources/properties that are required; 	for interaction with the AOCE Key Chain.; 	; 	 Type	Offset						Description; 	 ----	------						-----------; 	'rstr'	kSAMAspectUserName			The user name; 	'rstr'	kSAMAspectKind				The kind of SAM; 	'detn'	kSAMAspectCannotDelete		If 0, then the slot cannot be deleted; 	'sami'	kSAMAspectSlotCreationInfo	The info required to create a slot record; (defconstant $kSAMAspectUserName 41)(defconstant $kSAMAspectKind 42)(defconstant $kSAMAspectCannotDelete 43)(defconstant $kSAMAspectSlotCreationInfo 44); *************************************************************************************;  ********************************* Admin Definitions: *********************************;  *************************************************************************************(defconstant $kDETAdminVersion -978); $ALIGN RESET; $POP; $SETC UsingIncludes := OCETemplatesIncludes; $ENDC                                         ; __OCETEMPLATES__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'OCETemplates)