(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:WorldScript.p"; at Tuesday June 6,1995 2:23:49 pm.; ;  	File:		WorldScript.p;  ;  	Contains:	WorldScript I Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __WORLDSCRIPT__; $SETC __WORLDSCRIPT__ := 1; $I+; $SETC WorldScriptIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __TRAPS__|#(require-interface 'Traps)#|                                              ; $I Traps.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __QUICKDRAWTEXT__|#(require-interface 'QuickdrawText)#|                                              ; $I QuickdrawText.p |#                                             ; $ENDC; 	MixedMode.p													; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kVariableLengthArray 1)(def-mactype :wsioffset (find-mactype ':unsigned-integer))(def-mactype :wsibytecount (find-mactype ':unsigned-byte))(def-mactype :wsibyteindex (find-mactype ':unsigned-byte));  offset from start of sub-table to row in state table (def-mactype :wsistateoffset (find-mactype ':unsigned-integer))(def-mactype :wsitableoffset (find-mactype ':unsigned-long))(def-mactype :wsisubtableoffset (find-mactype ':unsigned-integer))(def-mactype :wsiglyphcode (find-mactype ':unsigned-integer))(def-mactype :wsitableidentifiers (find-mactype ':unsigned-long))(defconstant $kScriptSettingsTag :|info|)(defconstant $kMetamorphosisTag :|mort|)(defconstant $kGlyphExpansionTag :|g2g#|)(defconstant $kPropertiesTag :|prop|)(defconstant $kJustificationTag :|kash|)(defconstant $kCharToGlyphTag :|cmap|)(defconstant $kGlyphToCharTag :|pamc|)(defconstant $kFindScriptRunTag :|fstb|); *** 			L O O K U P    T A B L E    T Y P E S		***(defconstant $WSILookupSimpleArray 0)           ;  a simple array indexed by glyph code (defconstant $WSILookupSegmentSingle 2)         ;  segment mapping to single value (defconstant $WSILookupSegmentArray 4)          ;  segment mapping to lookup array (defconstant $WSILookupSingleTable 6)           ;  sorted list of glyph, value pairs (defconstant $WSILookupTrimmedArray 8)          ;  a simple trimmed array indexed by glyph code (def-mactype :wsilookuptableformat (find-mactype ':signed-integer))(def-mactype :wsilookupvalue (find-mactype ':signed-integer));  An offset from the beginning of the lookup table (def-mactype :wsilookupoffset (find-mactype ':signed-integer)); 	FORMAT SPECIFIC DEFINITIONS ; ; 		lookupSimpleArray:; 		; 		This is a simple array which maps all glyphs in the font; 		to lookup values.; 	(defrecord WSILookupArrayHeader    (lookupValues (:array :signed-integer 1))    ;  The array of values indexed by glyph code    ); ; 		lookupTrimmedArray:; 		; 		This is a single trimmed array which maps a single range; 		of glyhs in the font to lookup values.; 	(defrecord WSILookupTrimmedArrayHeader    (firstGlyph :unsigned-integer)   (limitGlyph :unsigned-integer)   (valueArray (:array :signed-integer 1))   );  The format specific part of the subtable header (defrecord WSILookupFormatSpecificHeader    (:variant       (      (lookupArray :wsilookuparrayheader)      )      (      (trimmedArray :wsilookuptrimmedarrayheader)      )      )   );  The overall subtable header (defrecord WSILookupTableHeader    (format :signed-integer)                     ;  table format    (fsHeader :wsilookupformatspecificheader)    ;  format specific header    ); ***		G L Y P H    E X P A N S I O N    ***;  fixed 1.0 (defconstant $kCurrentGlyphExpansionVersion #x10000)(def-mactype :glyphexpansionformats (find-mactype ':signed-integer))(defconstant $GlyphExpansionLookupFormat 1)(defconstant $GlyphExpansionContextualFormat 2)(defrecord ExpandedGlyphCluster    (numGlyphs :unsigned-byte)   (bestGlyph :unsigned-byte)   (glyphs (:array :unsigned-integer 1))   )(defrecord ExpandedGlyphOffset    (glyph :unsigned-integer)   (offset :unsigned-integer)                   ;  offset to ExpandedGlyphCluster    )(defrecord GlyphExpansionStateTable    (stateTableOffset :unsigned-integer)   (classTableOffset :unsigned-integer)   (actionTableOffset :unsigned-integer)        ;  state, class and actions tables follow here...    )(defrecord GlyphExpansionTable    (version :signed-long)   (format :signed-integer)   (expansionNumer :signed-integer)   (expansionDenom :signed-integer)             ;  num/denom ratio for expansion <2>    (:variant       (      (stateTable :glyphexpansionstatetable)      )      (      (lookup :wsilookuptableheader)            ;  expanded glyph clusters follow here...       )      )   );  Glyph-to-Character constants and types  (defconstant $kCurrentGlyphToCharVersion #x10100)(def-mactype :glyphtocharlookupformats (find-mactype ':signed-integer))(defconstant $kGlyphToCharLookup8Format 1)(defconstant $kGlyphToCharLookup16Format 2)(defconstant $kGlyphToCharLookup32Format 3)(def-mactype :glyphtocharfontindex (find-mactype ':unsigned-byte))(def-mactype :qdglyphcode (find-mactype ':unsigned-byte))(defrecord GlyphToCharActionTable    (fontNameOffset :unsigned-integer)           ;  offset relative to this table    (actions :wsilookuptableheader)              ;  only support lookupSimpleArray format for now    )(defrecord GlyphToCharActionHeader    (numTables :signed-integer)                  ;  0..n    (offsets (:array :unsigned-integer 1))       ;  offsets from start of action table header    )(defrecord GlyphToCharHeader    (version :signed-long)   (actionOffset :unsigned-integer)             ;  offset to GlyphToCharActionHeader    (format :signed-integer)                     ;  size of font mask    (mappingTable :wsilookuptableheader)   );  JUSTIFICATION TYPES; 	WorldScript supports justification of text using insertion. The justification; 	table specifies a insertion string to insert between 2 specified glyphs.; 	Each combination of inter-glyph boundary can be assigned a justification priority,; 	the higher the priority the more justification strings inserted at that position.; 	; 	The priorities for each inter-glyph boundary are specified by the justification table's; 	state table.; 	; 	Special handling is done for scripts which use spaces to justify, because the width of ; 	a space varies depending on the setting of SpaceExtra. This is why the number of spaces; 	per inserting string is specified in the justification table.; ; ;  1.0 not supported (defconstant $kCurrentJustificationVersion #x200)(defconstant $kJustificationStateTableFormat 1);  WSI's internal limitation <12> (defconstant $kMaxJustificationStringLength 13)(def-mactype :wsijustificationpriority (find-mactype ':unsigned-byte))(defconstant $WSIJustificationSetMarkMask #x80)(defrecord WSIJustificationStateEntry    (markPriority :unsigned-byte)                ;  non-zero priorities means insertion    (priority :unsigned-byte)   (newState :unsigned-integer)   )(def-mactype :wsijustificationclasses (find-mactype ':signed-integer))(defconstant $wsiJustEndOfLineClass 0)(defconstant $wsiJustEndOfRunClass 1)(defconstant $wsiJustDeletedGlyphClass 2)(defconstant $wsiJustUserDefinedClass 3)(def-mactype :wsijustificationstates (find-mactype ':signed-integer))(defconstant $wsiStartOfLineState 0)            ;  pre-defined states (defconstant $wsiStartOfRunState 1)(defconstant $wsiUserDefinedState 2);  pre-multiplied: class# * sizeof(WSIJustificationStateEntry) (def-mactype :wsijustificationclassoffset (find-mactype ':unsigned-byte))(defrecord WSIJustificationStateTable    (maxPriorities :signed-integer)   ;;Changing field rowwidth from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (rowWidth :unsigned-word)                    ;  width of a state table row in bytes    (classTableOffset :signed-integer)   (stateTableOffset :signed-integer)   )(defrecord WSIJustificationHeader    (version :signed-integer)   (format :signed-integer)   (scaling :point)                             ;  numer/denom scaling of priority weights <7>    ;;Changing field spacesperinsertion from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (spacesPerInsertion :unsigned-word)          ;  # of $20 chars in justification insertion string <12>    ;;Changing field juststringoffset from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (justStringOffset :unsigned-word)            ;  offset to justification string    (stateTable :wsijustificationstatetable)     ;  long-aligned boundary aligned w/ spacesPerInsertion field - justification string follows    );  Line Layout's Property table version <11> ;  v1.0 (defconstant $currentPropsTableVersion #x10000);  ??? is this right (defconstant $kCharToGlyphCurrentVersion 100);  pass as priorityWeight to JustifyWSILayout to use script's current just setting (defconstant $kScriptsDefaultJustWeight -1)(defrecord WSIGlyphInfoRec    (qdChar :signed-byte)                        ;  UInt8    (rightToLeft :signed-byte)                   ;  !0 means rightToLeft, 0 means leftToRight    (fontID :signed-integer)   (originalOffset :signed-integer)             ;  or negative original offset if not in original text input    ;;Changing field unused from signed-integer to unsigned-word to match C header (pretty-sure)   (unused :unsigned-word)                      ;  long-align    )(def-mactype :wsiglyphinforecptr (find-mactype '(:pointer :wsiglyphinforec)))(def-mactype :wsiglyphinfohandle (find-mactype '(:handle :wsiglyphinforec)))(def-mactype :wsilayouthandle (find-mactype ':handle)); $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NewWSILayout" ((layoutH :handle) (text :pointer) (txLength :signed-integer) (lineDirection :signed-integer) (flags :signed-long) (err (:pointer :signed-integer)))   (:stack :handle)   (:stack-trap #xA8B5 layoutH text txLength lineDirection flags err ((+ (ash 33812 16) 64) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_JustifyWSILayout" ((layoutH :handle) (slop :signed-long) (priorityWeight :signed-integer) (styleRunPosition :signed-integer) (numer :point) (denom :point) (err (:pointer :signed-integer)))   (:stack :handle)   (:stack-trap #xA8B5 layoutH slop priorityWeight styleRunPosition numer denom err ((+ (ash 33816 16) 66) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MeasureWSILayout" ((layoutH :handle) (numer :point) (denom :point))   (:stack :signed-long)   (:stack-trap #xA8B5 layoutH numer denom ((+ (ash 33804 16) 68) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_DrawWSILayout" ((layoutH :handle) (numer :point) (denom :point))   nil   (:stack-trap #xA8B5 layoutH numer denom ((+ (ash 32780 16) 70) :signed-longint))); $ENDC;  "low-level" routines ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_GetWSILayoutParts" ((layoutH :handle) (destH (:handle :wsiglyphinforec)) (numGlyphs (:pointer :signed-integer)) (err (:pointer :signed-integer)))   (:stack (:handle :wsiglyphinforec))   (:stack-trap #xA8B5 layoutH destH numGlyphs err ((+ (ash 33808 16) 72) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_DrawWSIGlyphs" ((length :signed-integer) (qdCodes :pointer) (numer :point) (denom :point))   nil   (:stack-trap #xA8B5 length qdCodes numer denom ((+ (ash 32782 16) 74) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_xMeasureWSIGlyphs" ((qdCodes (:pointer :pointer)) (length :signed-integer) (numer :point) (denom :point))   (:stack :signed-long)   (:stack-trap #xA8B5 qdCodes length numer denom ((+ (ash 33806 16) 76) :signed-longint))); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := WorldScriptIncludes; $ENDC                                         ; __WORLDSCRIPT__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'WorldScript)