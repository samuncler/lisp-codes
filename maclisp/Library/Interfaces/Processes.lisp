(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Processes.p"; at Tuesday June 6,1995 2:02:11 pm.; ;  	File:		Processes.p;  ;  	Contains:	Process Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __PROCESSES__; $SETC __PROCESSES__ := 1; $I+; $SETC ProcessesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC; 	Quickdraw.p													; 		MixedMode.p												; 		QuickdrawText.p											; 	OSUtils.p													; 		Memory.p												#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defrecord ProcessSerialNumber    ;;Changing field highlongofpsn from signed-long to unsigned-long to match C header (pretty-darn-sure)   (highLongOfPSN :unsigned-long)   ;;Changing field lowlongofpsn from signed-long to unsigned-long to match C header (pretty-darn-sure)   (lowLongOfPSN :unsigned-long)   )(def-mactype :processserialnumberptr (find-mactype '(:pointer :processserialnumber)));  Process identifier - Various reserved process serial numbers (defconstant $kNoProcess 0)(defconstant $kSystemProcess 1)(defconstant $kCurrentProcess 2);  Definition of the parameter block passed to _Launch; 	Typedef and flags for launchControlFlags field (def-mactype :launchflags (find-mactype ':signed-integer));  Definition of the parameter block passed to _Launch (defconstant $launchContinue #x4000)(defconstant $launchNoFileFlags #x800)(defconstant $launchUseMinimum #x400)(defconstant $launchDontSwitch #x200)(defconstant $launchAllow24Bit #x100)(defconstant $launchInhibitDaemon #x80);  Format for first AppleEvent to pass to new process.  The size of the overall;   buffer variable: the message body immediately follows the messageLength (defrecord AppParameters    (theMsgEvent :eventrecord)   ;;Changing field eventrefcon from signed-long to unsigned-long to match C header (pretty-darn-sure)   (eventRefCon :unsigned-long)   ;;Changing field messagelength from signed-long to unsigned-long to match C header (pretty-darn-sure)   (messageLength :unsigned-long)   )(def-mactype :appparametersptr (find-mactype '(:pointer :appparameters)));  Parameter block to _Launch (defrecord LaunchParamBlockRec    ;;Changing field reserved1 from signed-long to unsigned-long to match C header (pretty-sure)   (reserved1 :unsigned-long)   ;;Changing field reserved2 from signed-integer to unsigned-word to match C header (pretty-sure)   (reserved2 :unsigned-word)   ;;Changing field launchblockid from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (launchBlockID :unsigned-word)   ;;Changing field launchepblength from signed-long to unsigned-long to match C header (pretty-darn-sure)   (launchEPBLength :unsigned-long)   ;;Changing field launchfileflags from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (launchFileFlags :unsigned-word)   (launchControlFlags :signed-integer)   (launchAppSpec (:pointer :fsspec))   (launchProcessSN :processserialnumber)   ;;Changing field launchpreferredsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (launchPreferredSize :unsigned-long)   ;;Changing field launchminimumsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (launchMinimumSize :unsigned-long)   ;;Changing field launchavailablesize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (launchAvailableSize :unsigned-long)   (launchAppParameters (:pointer :appparameters))   )(def-mactype :launchpbptr (find-mactype '(:pointer :launchparamblockrec)));  Set launchBlockID to extendedBlock to specify that extensions exist.;  Set launchEPBLength to extendedBlockLen for compatibility.(defconstant $extendedBlock #x4C43)             ;  'LC' (defconstant $extendedBlockLen 32)              ;  sizeof(LaunchParamBlockRec) - 12 ;  Definition of the information block returned by GetProcessInformation (defconstant $modeDeskAccessory #x20000)(defconstant $modeMultiLaunch #x10000)(defconstant $modeNeedSuspendResume #x4000)(defconstant $modeCanBackground #x1000)(defconstant $modeDoesActivateOnFGSwitch #x800)(defconstant $modeOnlyBackground #x400)(defconstant $modeGetFrontClicks #x200)(defconstant $modeGetAppDiedMsg #x100)(defconstant $mode32BitCompatible #x80)(defconstant $modeHighLevelEventAware #x40)(defconstant $modeLocalAndRemoteHLEvents #x20)(defconstant $modeStationeryAware #x10)(defconstant $modeUseTextEditServices #x8)(defconstant $modeDisplayManagerAware #x4);  Record returned by GetProcessInformation (defrecord ProcessInfoRec    ;;Changing field processinfolength from signed-long to unsigned-long to match C header (pretty-darn-sure)   (processInfoLength :unsigned-long)   (processName (:pointer (:string 255)))   (processNumber :processserialnumber)   ;;Changing field processtype from signed-long to unsigned-long to match C header (pretty-darn-sure)   (processType :unsigned-long)   (processSignature :ostype)   ;;Changing field processmode from signed-long to unsigned-long to match C header (pretty-darn-sure)   (processMode :unsigned-long)   (processLocation :pointer)   ;;Changing field processsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (processSize :unsigned-long)   ;;Changing field processfreemem from signed-long to unsigned-long to match C header (pretty-darn-sure)   (processFreeMem :unsigned-long)   (processLauncher :processserialnumber)   ;;Changing field processlaunchdate from signed-long to unsigned-long to match C header (pretty-darn-sure)   (processLaunchDate :unsigned-long)   ;;Changing field processactivetime from signed-long to unsigned-long to match C header (pretty-darn-sure)   (processActiveTime :unsigned-long)   (processAppSpec (:pointer :fsspec))   )(def-mactype :processinforecptr (find-mactype '(:pointer :processinforec))); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_LaunchApplication" ((LaunchParams (:pointer :launchparamblockrec)))   (:d0 :signed-integer)   (:register-trap #xA9F2 :a0 LaunchParams)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LaunchDeskAccessory" ((pFileSpec (:pointer :fsspec)) (pDAName (:string 255)))   (:stack :signed-integer)   (:stack-trap #xA88F pFileSpec pDAName (54 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetCurrentProcess" ((PSN (:pointer :processserialnumber)))   (:stack :signed-integer)   (:stack-trap #xA88F PSN (55 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetFrontProcess" ((PSN (:pointer :processserialnumber)))   :signed-integer   (#x70FF #x2F00 #x3F3C #x39 #xA88F) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetNextProcess" ((PSN (:pointer :processserialnumber)))   (:stack :signed-integer)   (:stack-trap #xA88F PSN (56 :signed-integer))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetProcessInformation" ((PSN (:pointer :processserialnumber)) (info (:pointer :processinforec)))   (:stack :signed-integer)   (:stack-trap #xA88F PSN info (58 :signed-integer))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SetFrontProcess" ((PSN (:pointer :processserialnumber)))   (:stack :signed-integer)   (:stack-trap #xA88F PSN (59 :signed-integer))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_WakeUpProcess" ((PSN (:pointer :processserialnumber)))   (:stack :signed-integer)   (:stack-trap #xA88F PSN (60 :signed-integer))); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SameProcess" ((PSN1 (:pointer :processserialnumber)) (PSN2 (:pointer :processserialnumber)) (result (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xA88F PSN1 PSN2 result (61 :signed-integer))); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := ProcessesIncludes; $ENDC                                         ; __PROCESSES__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'Processes)