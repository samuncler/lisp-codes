(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Memory.p"; at Tuesday June 6,1995 1:59:59 pm.; ;  	File:		Memory.p;  ;  	Contains:	Memory Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __MEMORY__; $SETC __MEMORY__ := 1; $I+; $SETC MemoryIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $maxSize #x800000)                 ; Max data block size is 8 megabytes(defconstant $defaultPhysicalEntryCount 8);  values returned from the GetPageState function (defconstant $kPageInMemory 0)(defconstant $kPageOnDisk 1)(defconstant $kNotPaged 2);  masks for Zone->heapType field (defconstant $k32BitHeap 1)                     ;  valid in all Memory Managers (defconstant $kNewStyleHeap 2)                  ;  true if new Heap Manager is present (defconstant $kNewDebugHeap 4)                  ;  true if new Heap Manager is running in debug mode on this heap ;  size of a block in bytes (def-mactype :size (find-mactype ':signed-long))(def-mactype :growzoneprocptr (find-mactype ':pointer));  FUNCTION GrowZone(cbNeeded: Size): LONGINT; (def-mactype :purgeprocptr (find-mactype ':pointer));  PROCEDURE Purge(blockToPurge: Handle); ; ; 		UserFnProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => *parameter  	A0.L; 	(def-mactype :userfnprocptr (find-mactype ':pointer));  register PROCEDURE UserFn(parameter: UNIV Ptr); (def-mactype :growzoneupp (find-mactype ':pointer))(def-mactype :purgeupp (find-mactype ':pointer))(def-mactype :userfnupp (find-mactype ':pointer))(def-mactype :thz (find-mactype '(:pointer :zone)))(defrecord Zone    (bkLim :pointer)   (purgePtr :pointer)   (hFstFree :pointer)   (zcbFree :signed-long)   (gzProc :pointer)   (moreMast :signed-integer)   (flags :signed-integer)   (cntRel :signed-integer)   (maxRel :signed-integer)   (cntNRel :signed-integer)   (heapType :signed-byte)                      ;  Byte    (unused :signed-byte)                        ;  Byte    (cntEmpty :signed-integer)   (cntHandles :signed-integer)   (minCBFree :signed-long)   (purgeProc :pointer)   (sparePtr :pointer)   (allocPtr :pointer)   (heapData :signed-integer)   )(defrecord MemoryBlock    (address :pointer)   ;;Changing field count from signed-long to unsigned-long to match C header (pretty-sure)   (count :unsigned-long)   )(defrecord LogicalToPhysicalTable    (logical :memoryblock)   (physical (:array :memoryblock (- (- #$defaultPhysicalEntryCount 1) 0 -1)))   )(def-mactype :pagestate (find-mactype ':signed-integer))(def-mactype :statusregistercontents (find-mactype ':signed-integer))(defconstant $uppGrowZoneProcInfo #xF0)         ;  FUNCTION (4 byte param): 4 byte result; (defconstant $uppPurgeProcInfo #xC0)            ;  PROCEDURE (4 byte param); (defconstant $uppUserFnProcInfo #x9802)         ;  Register PROCEDURE (4 bytes in A0); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewGrowZoneProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewPurgeProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewUserFnProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallGrowZoneProc" ((cbNeeded :signed-long) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallPurgeProc" ((blockToPurge :handle) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM                        ; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallUserFnProc" ((parameter :pointer) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT CFMSYSTEMCALLS;; Using emeritus version for trap getappllimit(deftrap "_GetApplLimit"         nil         (:no-trap :pointer)         (:no-trap (%get-signed-long (%int-to-ptr 304))));  MOVE.l $0130,(SP) ; $ENDC; $IFC NOT CFMSYSTEMCALLS;; Using emeritus version for trap systemzone(deftrap "_SystemZone"         nil         (:no-trap (:pointer :zone))         (:no-trap (%get-ptr (%int-to-ptr 678))));  MOVE.l $02A6,(SP) ; $ENDC; $IFC NOT CFMSYSTEMCALLS;; Using emeritus version for trap applicationzone(deftrap "_ApplicationZone"         nil         (:no-trap (:pointer :zone))         (:no-trap (%get-ptr (%int-to-ptr 682))));  MOVE.l $02AA,(SP) ; $ENDC; $IFC NOT CFMSYSTEMCALLS;; Using emeritus version for trap gzsavehnd(deftrap "_GZSaveHnd"         nil         (:no-trap :handle)         (:no-trap (%get-signed-long (%int-to-ptr 808))));  MOVE.l $0328,(SP) ; $ENDC; $IFC NOT CFMSYSTEMCALLS;; Using emeritus version for trap topmem(deftrap "_TopMem"         nil         (:no-trap :pointer)         (:no-trap (%get-ptr (%int-to-ptr 264))));  MOVE.l $0108,(SP) ; $ENDC; $IFC NOT CFMSYSTEMCALLS;; Using emeritus version for trap memerror(deftrap "_MemError"         nil         (:no-trap :signed-integer)         (:no-trap (%get-signed-word (%int-to-ptr 544))));  MOVE.w $0220,(SP) ; $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap getzone(deftrap "_GetZone" nil (:a0 (:pointer :zone)) (:stack-trap 41242)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap newhandle(deftrap "_NewHandle"         ((bytecount :signed-long))         (:a0 :handle)         (:register-trap 41250 :d0 bytecount)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_NewHandleSys" ((byteCount :signed-long))   :handle   (#x201F #xA522 #x2E88)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_NewHandleClear" ((byteCount :signed-long))   :handle   (#x201F #xA322 #x2E88)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_NewHandleSysClear" ((byteCount :signed-long))   :handle   (#x201F #xA722 #x2E88)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap handlezone(deftrap "_HandleZone"         ((h :handle))         (:a0 (:pointer :zone))         (:register-trap 41254 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap recoverhandle(deftrap "_RecoverHandle"         ((p :pointer))         (:a0 :handle)         (:register-trap 41256 :a0 p)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_RecoverHandleSys" ((p :pointer))   :handle   (#x205F #xA528 #x2E88) ); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap newptr(deftrap "_NewPtr"         ((bytecount :signed-long))         (:a0 :pointer)         (:register-trap 41246 :d0 bytecount)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_NewPtrSys" ((byteCount :signed-long))   :pointer   (#x201F #xA51E #x2E88)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_NewPtrClear" ((byteCount :signed-long))   :pointer   (#x201F #xA31E #x2E88)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_NewPtrSysClear" ((byteCount :signed-long))   :pointer   (#x201F #xA71E #x2E88)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap ptrzone(deftrap "_PtrZone"         ((p :pointer))         (:a0 (:pointer :zone))         (:register-trap 41288 :a0 p)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap maxblock(deftrap "_MaxBlock" nil (:d0 :signed-long) (:register-trap 41057)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_MaxBlockSys" ()   :signed-long   (#xA461 #x2E80)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap stackspace(deftrap "_StackSpace" nil (:d0 :signed-long) (:register-trap 41061)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap newemptyhandle(deftrap "_NewEmptyHandle" nil (:a0 :handle) (:register-trap 41318)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_NewEmptyHandleSys" ()   :handle   (#xA566 #x2E88)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap hlock(deftrap "_HLock" ((h :handle)) nil (:register-trap 41001 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap hunlock(deftrap "_HUnlock" ((h :handle)) nil (:register-trap 41002 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap hpurge(deftrap "_HPurge" ((h :handle)) nil (:register-trap 41033 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap hnopurge(deftrap "_HNoPurge" ((h :handle)) nil (:register-trap 41034 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap hlockhi(deftrap "_HLockHI"         ((h :handle))         nil         (:no-trap (register-trap 41001 :a0 (register-trap 41060 :a0 h)))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap tempnewhandle(deftrap "_TempNewHandle"         ((logicalsize :signed-long) (resultcode (:pointer :signed-integer)))         (:stack :handle)         (:stack-trap 43151 logicalsize resultcode (29 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap tempmaxmem(deftrap "_TempMaxMem"         ((grow (:pointer :signed-long)))         (:stack :signed-long)         (:stack-trap 43151 grow (21 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap tempfreemem(deftrap "_TempFreeMem"         nil         (:stack :signed-long)         (:stack-trap 43151 (24 :signed-integer))); $ENDC;   Temporary Memory routines renamed, but obsolete, in System 7.0 and later.  ; $IFC NOT GENERATINGCFM;; Using emeritus version for trap temphlock(deftrap "_TempHLock"         ((h :handle) (resultcode (:pointer :signed-integer)))         nil         (:stack-trap 43151 h resultcode (30 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap temphunlock(deftrap "_TempHUnlock"         ((h :handle) (resultcode (:pointer :signed-integer)))         nil         (:stack-trap 43151 h resultcode (31 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap tempdisposehandle(deftrap "_TempDisposeHandle"         ((h :handle) (resultcode (:pointer :signed-integer)))         nil         (:stack-trap 43151 h resultcode (32 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap temptopmem(deftrap "_TempTopMem"         nil         (:stack :pointer)         (:stack-trap 43151 (22 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap initapplzone(deftrap "_InitApplZone" nil nil (:stack-trap 41004)); $ENDC;; Using emeritus version for trap initzone(deftrap "_InitZone"         ((pgrowzone :pointer) (cmoremasters :signed-integer)          (limitptr :pointer) (startptr :pointer))         (:no-trap :signed-integer)         (:no-trap          (%stack-block ((p 14))                        (%put-ptr p startptr 0)                        (%put-ptr p limitptr 4)                        (%put-word p cmoremasters 8)                        (%put-ptr p pgrowzone 10)                        (register-trap 40985 :a0 p (:signed-integer :d0))))); $IFC NOT GENERATINGCFM;; Using emeritus version for trap setzone(deftrap "_SetZone" ((hz (:pointer :zone))) nil (:register-trap 40987 :a0 hz)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap compactmem(deftrap "_CompactMem"         ((cbneeded :signed-long))         (:d0 :signed-long)         (:register-trap 41036 :d0 cbneeded)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_CompactMemSys" ((cbNeeded :signed-long))   (:d0 :signed-long)   (:register-trap #xA44C :d0 cbNeeded)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap purgemem(deftrap "_PurgeMem"         ((cbneeded :signed-long))         nil         (:register-trap 41037 :d0 cbneeded)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap purgememsys(deftrap "_PurgeMemSys"         ((cbneeded :signed-long))         nil         (:register-trap 42061 :d0 cbneeded)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap freemem(deftrap "_FreeMem" nil (:d0 :signed-long) (:register-trap 40988)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_FreeMemSys" ()   :signed-long   (#xA41C #x2E80)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap reservemem(deftrap "_ReserveMem"         ((cbneeded :signed-long))         nil         (:register-trap 41024 :d0 cbneeded)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap reservememsys(deftrap "_ReserveMemSys"         ((cbneeded :signed-long))         nil         (:register-trap 42048 :d0 cbneeded)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap maxmem(deftrap "_MaxMem"         ((grow (:pointer :signed-long)))         (:no-trap :long)         (:no-trap          (%stack-block ((ret 8))                        (%gen-trap 41245 :return-block ret '(:a0 :d0))                        (%put-long grow (%get-long ret))                        (%get-long ret 4)))); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_MaxMemSys" ((grow (:pointer :signed-long)))   :signed-long   (#x225F #xA51D #x2288 #x2E80)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap setgrowzone(deftrap "_SetGrowZone"         ((growzone :pointer))         nil         (:register-trap 41035 :a0 growzone)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap setappllimit(deftrap "_SetApplLimit"         ((zonelimit :pointer))         nil         (:register-trap 41005 :a0 zonelimit)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap movehhi(deftrap "_MoveHHi" ((h :handle)) nil (:register-trap 41060 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap disposeptr(deftrap "_DisposePtr" ((p :pointer)) nil (:register-trap 40991 :a0 p)); $ENDC;; Using emeritus version for trap getptrsize(deftrap "_GetPtrSize"         ((p :pointer))         (:d0 :signed-long)         (:register-trap 40993 :a0 p))          ; $IFC NOT GENERATINGCFM;; Using emeritus version for trap setptrsize(deftrap "_SetPtrSize"         ((p :pointer) (newsize :signed-long))         nil         (:register-trap 40992 :a0 p :d0 newsize)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap disposehandle(deftrap "_DisposeHandle" ((h :handle)) nil (:register-trap 40995 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap sethandlesize(deftrap "_SetHandleSize"         ((h :handle) (newsize :signed-long))         nil         (:register-trap 40996 :a0 h :d0 newsize)); $ENDC;; Using emeritus version for trap gethandlesize(deftrap "_GetHandleSize"         ((h :handle))         (:d0 :signed-long)         (:register-trap 40997 :a0 h))          ; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_InlineGetHandleSize" ((h :handle))   (:d0 :signed-long)   (:register-trap #xA025 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap reallocatehandle(deftrap "_ReallocateHandle"         ((h :handle) (bytecount :signed-long))         nil         (:register-trap 40999 :a0 h :d0 bytecount)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap emptyhandle(deftrap "_EmptyHandle" ((h :handle)) nil (:register-trap 41003 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap hsetrbit(deftrap "_HSetRBit" ((h :handle)) nil (:register-trap 41063 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap hclrrbit(deftrap "_HClrRBit" ((h :handle)) nil (:register-trap 41064 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap moremasters(deftrap "_MoreMasters" nil nil (:stack-trap 41014)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap blockmove(deftrap "_BlockMove"         ((srcptr :pointer) (destptr :pointer) (bytecount :signed-long))         nil         (:register-trap 41006 :a0 srcptr :a1 destptr :d0 bytecount)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_BlockMoveData" ((srcPtr :pointer) (destPtr :pointer) (byteCount :signed-long))   nil   (#x201F #x225F #x205F #xA22E) ); $ENDC;; Using emeritus version for trap purgespace(deftrap "_PurgeSpace"         ((total (:pointer :signed-long)) (contig (:pointer :signed-long)))         ((:a0 :signed-long) (:d0 :signed-long))         (multiple-value-bind (total-value contig-value)             (:register-trap 41314)           (%put-long total total-value)           (%put-long contig contig-value)))    ; $IFC NOT GENERATINGCFM;; Using emeritus version for trap hgetstate(deftrap "_HGetState"         ((h :handle))         (:d0 :signed-byte)         (:register-trap 41065 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap hsetstate(deftrap "_HSetState"         ((h :handle) (flags :signed-byte))         nil         (:register-trap 41066 :a0 h :d0 flags)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap setapplbase(deftrap "_SetApplBase"         ((startptr :pointer))         nil         (:register-trap 41047 :a0 startptr)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap maxapplzone(deftrap "_MaxApplZone" nil nil (:stack-trap 41059)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap holdmemory(deftrap "_HoldMemory"         ((address :pointer) (count :signed-long))         (:d0 :signed-integer)         (:register-trap 41101 :a0 address :a1 (%int-to-ptr count) :d0 0)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap unholdmemory(deftrap "_UnholdMemory"         ((address :pointer) (count :signed-long))         (:d0 :signed-integer)         (:register-trap 41101 :a0 address :a1 (%int-to-ptr count) :d0 1)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap lockmemory(deftrap "_LockMemory"         ((address :pointer) (count :signed-long))         (:d0 :signed-integer)         (:register-trap 41101 :a0 address :a1 (%int-to-ptr count) :d0 2)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap lockmemorycontiguous(deftrap "_LockMemoryContiguous"         ((address :pointer) (count :signed-long))         (:d0 :signed-integer)         (:register-trap 41101 :a0 address :a1 (%int-to-ptr count) :d0 4)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap unlockmemory(deftrap "_UnlockMemory"         ((address :pointer) (count :signed-long))         (:d0 :signed-integer)         (:register-trap 41101 :a0 address :a1 (%int-to-ptr count) :d0 3)); $ENDC;; Using emeritus version for trap getphysical(deftrap "_GetPhysical"         ((addresses (:pointer :logicaltophysicaltable))          (physicalentrycount (:pointer :signed-long)))         (:no-trap :signed-integer)         (:no-trap          (%stack-block ((ret 8))                        (%gen-trap 41308                                   :return-block                                   ret                                   :d0                                   5                                   :a1                                   (%get-ptr physicalentrycount)                                   :a0                                   addresses                                   '(:d0 :a0))                        (%put-ptr physicalentrycount (%get-ptr ret 4))                        (%get-word ret 2))))    ; $IFC NOT GENERATINGCFM;; Using emeritus version for trap deferuserfn(deftrap "_DeferUserFn"         ((userfunction :pointer) (argument :pointer))         (:d0 :signed-integer)         (:register-trap 41103 :a0 userfunction :d0 (%ptr-to-int argument))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap debuggergetmax(deftrap "_DebuggerGetMax" nil (:d0 :signed-long) (:register-trap 41101 :d0 0)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap debuggerenter(deftrap "_DebuggerEnter" nil nil (:register-trap 41101 :d0 1)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap debuggerexit(deftrap "_DebuggerExit" nil nil (:register-trap 41101 :d0 2)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap debuggerpoll(deftrap "_DebuggerPoll" nil nil (:register-trap 41101 :d0 3)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap getpagestate(deftrap "_GetPageState"         ((address :pointer))         (:d0 :signed-integer)         (:register-trap 41101 :a0 address :d0 4)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap pagefaultfatal(deftrap "_PageFaultFatal" nil (:d0 :boolean) (:register-trap 41101 :d0 5)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap debuggerlockmemory(deftrap "_DebuggerLockMemory"         ((address :pointer) (count :signed-long))         (:d0 :signed-integer)         (:register-trap 41101 :a0 address :a1 (%int-to-ptr count) :d0 6)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap debuggerunlockmemory(deftrap "_DebuggerUnlockMemory"         ((address :pointer) (count :signed-long))         (:stack :signed-integer)         (:register-trap 41101 :a0 address :a1 (%int-to-ptr count) :d0 7)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap entersupervisormode(deftrap "_EnterSupervisorMode"         nil         (:d0 :signed-integer)         (:register-trap 41101 :d0 8)); $ENDC;  StripAddress and Translate24To32 macro to nothing on PowerPC;    StripAddress is implemented as a trap in System 6 or later ; $IFC SystemSixOrLater ; $IFC NOT GENERATINGCFM;; Using emeritus version for trap stripaddress#|(deftrap "_StripAddress"         ((theaddress :pointer))         (:d0 :long)         (%int-to-ptr (:register-trap 41045 :d0 (%ptr-to-int theaddress))))|#; $ENDC#|                                              ; $ELSEC |#                                             ; $ENDC;; Using emeritus version for trap stripaddress(deftrap "_StripAddress"         ((theaddress :pointer))         (#-ppc-target :d0 #+ppc-target :no-trap :long)  #-ppc-target  (%int-to-ptr (:register-trap 41045 :d0 (%ptr-to-int theaddress)))  #+ppc-target  (:no-trap (progn theaddress))); $IFC NOT GENERATINGCFM;; Using emeritus version for trap translate24to32(deftrap "_Translate24To32"         ((addr24 :pointer))         (:d0 :pointer)         (:register-trap 41105 :d0 addr24)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of handtohand because there is no implementation in the new headers(deftrap "_HandToHand"         ((thehndl (:pointer :handle)))         (:no-trap :signed-integer)         (:no-trap          (%stack-block ((ret 8))                        (%gen-trap 43489                                   :return-block                                   ret                                   :a0                                   (%get-ptr thehndl)                                   '(:d0 :a0))                        (%put-ptr thehndl (%get-ptr ret 4))                        (%get-signed-word ret 2)))); $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_PtrToXHand" ((srcPtr :pointer) (dstHndl :handle) (size :signed-long))   :signed-integer   (#x201F #x225F #x205F #xA9E2 #x3E80)   :allow-errchk? t); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ptrtohand because there is no implementation in the new headers(deftrap "_PtrToHand"         ((srcptr :pointer) (dsthndl (:pointer :handle)) (size :signed-long))         (:no-trap :signed-integer)         (:no-trap          (%stack-block ((ret 8))                        (%gen-trap 43491                                   :return-block                                   ret                                   :a0                                   srcptr                                   :d0                                   size                                   '(:d0 :a0))                        (%put-ptr dsthndl (%get-ptr ret 4))                        (%get-signed-word ret 2)))); $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_HandAndHand" ((hand1 :handle) (hand2 :handle))   :signed-integer   (#x225F #x205F #xA9E4 #x3E80)   :allow-errchk? t); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_PtrAndHand" ((ptr1 :pointer) (hand2 :handle) (size :signed-long))   :signed-integer   (#x201F #x225F #x205F #xA9EF #x3E80)   :allow-errchk? t); $ENDC; $IFC OLDROUTINENAMES ; $IFC NOT GENERATINGCFM;; Using emeritus version for trap appliczone(deftrap ("_ApplicZone" "ApplicationZone")         nil         (:no-trap (:pointer :zone))         (:no-trap (%get-ptr (%int-to-ptr 682)))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap mftempnewhandle(deftrap ("_MFTempNewHandle" "TempNewHandle")         ((logicalsize :signed-long) (resultcode (:pointer :signed-integer)))         (:stack :handle)         (:stack-trap 43151 logicalsize resultcode (29 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap mfmaxmem(deftrap ("_MFMaxMem" "TempMaxMem")         ((grow (:pointer :signed-long)))         (:stack :signed-long)         (:stack-trap 43151 grow (21 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap mffreemem(deftrap ("_MFFreeMem" "TempFreeMem")         nil         (:stack :signed-long)         (:stack-trap 43151 (24 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap mftemphlock(deftrap ("_MFTempHLock" "TempHLock")         ((h :handle) (resultcode (:pointer :signed-integer)))         nil         (:stack-trap 43151 h resultcode (30 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap mftemphunlock(deftrap ("_MFTempHUnlock" "TempHUnlock")         ((h :handle) (resultcode (:pointer :signed-integer)))         nil         (:stack-trap 43151 h resultcode (31 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap mftempdisposhandle(deftrap ("_MFTempDisposHandle" "TempDisposeHandle")         ((h :handle) (resultcode (:pointer :signed-integer)))         nil         (:stack-trap 43151 h resultcode (32 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap mftopmem(deftrap ("_MFTopMem" "TempTopMem")         nil         (:stack :pointer)         (:stack-trap 43151 (22 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap resrvmem(deftrap ("_ResrvMem" "ReserveMem")         ((cbneeded :signed-long))         nil         (:register-trap 41024 :d0 cbneeded)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap disposptr(deftrap ("_DisposPtr" "DisposePtr")         ((p :pointer)) nil (:register-trap 40991 :a0 p)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap disposhandle(deftrap ("_DisposHandle" "DisposeHandle") ((h :handle)) nil (:register-trap 40995 :a0 h)); $ENDC; $IFC NOT GENERATINGCFM;; Using emeritus version for trap reallochandle(deftrap ("_ReallocHandle" "ReallocateHandle")         ((h :handle) (bytecount :signed-long))         nil         (:register-trap 40999 :a0 h :d0 bytecount)); $ENDC; $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := MemoryIncludes; $ENDC                                         ; __MEMORY__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'Memory)