(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Devices.p"; at Tuesday June 6,1995 2:07:34 pm.; ;  	File:		Devices.p;  ;  	Contains:	Device Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __DEVICES__; $SETC __DEVICES__ := 1; $I+; $SETC DevicesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __OSUTILS__|#(require-interface 'OSUtils)#|                                              ; $I OSUtils.p |#                                             ; $ENDC; 	Types.p														; 		ConditionalMacros.p										; 	MixedMode.p													; 	Memory.p													#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	QuickdrawText.p												#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __DIALOGS__|#(require-interface 'Dialogs)#|                                              ; $I Dialogs.p |#                                             ; $ENDC; 	Errors.p													; 	Windows.p													; 		Controls.p												; 			Menus.p												; 	TextEdit.p													; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $chooserInitMsg 11)                ;  the user selected this device package (defconstant $newSelMsg 12)                     ;  the user made new device selections (defconstant $fillListMsg 13)                   ;  fill the device list with choices (defconstant $getSelMsg 14)                     ;  mark one or more choices as selected (defconstant $selectMsg 15)                     ;  the user made a selection (defconstant $deselectMsg 16)                   ;  the user canceled a selection (defconstant $terminateMsg 17)                  ;  allows device package to clean up (defconstant $buttonMsg 19)                     ;  the user selected a button ;  Values of the 'caller' parameter to a Chooser device package (defconstant $chooserID 1);  Values of the 'message' parameter to a Control Panel 'cdev' (defconstant $initDev 0)                        ; Time for cdev to initialize itself(defconstant $hitDev 1)                         ; Hit on one of my items(defconstant $closeDev 2)                       ; Close yourself(defconstant $nulDev 3)                         ; Null event(defconstant $updateDev 4)                      ; Update event(defconstant $activDev 5)                       ; Activate event(defconstant $deactivDev 6)                     ; Deactivate event(defconstant $keyEvtDev 7)                      ; Key down/auto key(defconstant $macDev 8)                         ; Decide whether or not to show up(defconstant $undoDev 9)(defconstant $cutDev 10)(defconstant $copyDev 11)(defconstant $pasteDev 12)(defconstant $clearDev 13)(defconstant $cursorDev 14);  Special values a Control Panel 'cdev' can return (defconstant $cdevGenErr -1)                    ; General error; gray cdev w/o alert(defconstant $cdevMemErr 0)                     ; Memory shortfall; alert user please(defconstant $cdevResErr 1)                     ; Couldn't get a needed resource; alert(defconstant $cdevUnset 3)                      ;  cdevValue is initialized to this;  Values of the 'message' parameter to a Monitor 'mntr' (defconstant $initMsg 1)                        ; initialization(defconstant $okMsg 2)                          ; user clicked OK button(defconstant $cancelMsg 3)                      ; user clicked Cancel button(defconstant $hitMsg 4)                         ; user clicked control in Options dialog(defconstant $nulMsg 5)                         ; periodic event(defconstant $updateMsg 6)                      ; update event(defconstant $activateMsg 7)                    ; not used(defconstant $deactivateMsg 8)                  ; not used(defconstant $keyEvtMsg 9)                      ; keyboard event(defconstant $superMsg 10)                      ; show superuser controls(defconstant $normalMsg 11)                     ; show only normal controls(defconstant $startupMsg 12)                    ; code has been loaded;  control codes for DeskAccessories (defconstant $goodbye -1)                       ;  heap being reinitialized (defconstant $killCode 1)                       ;  KillIO requested (defconstant $accEvent 64)                      ;  handle an event (defconstant $accRun 65)                        ;  time for periodic action (defconstant $accCursor 66)                     ;  change cursor shape (defconstant $accMenu 67)                       ;  handle menu item (defconstant $accUndo 68)                       ;  handle undo command (defconstant $accCut 70)                        ;  handle cut command (defconstant $accCopy 71)                       ;  handle copy command (defconstant $accPaste 72)                      ;  handle paste command (defconstant $accClear 73)                      ;  handle clear command ;  Control/Status Call Codes (defconstant $drvStsCode 8)                     ;  status call code for drive status (defconstant $ejectCode 7)                      ;  control call eject code (defconstant $tgBuffCode 8)                     ;  set tag buffer code ;  miscellaneous Device Manager constants (defconstant $ioInProgress 1)                   ;  predefined value of ioResult while I/O is pending (defconstant $aRdCmd 2)                         ;  low byte of ioTrap for Read calls (defconstant $aWrCmd 3)                         ;  low byte of ioTrap for Write calls (defconstant $asyncTrpBit 10)                   ;  trap word modifier (defconstant $noQueueBit 9)                     ;  trap word modifier ;  flags used in the driver header and device control entry (defconstant $dReadEnable 0)                    ;  set if driver responds to read requests (defconstant $dWritEnable 1)                    ;  set if driver responds to write requests (defconstant $dCtlEnable 2)                     ;  set if driver responds to control requests (defconstant $dStatEnable 3)                    ;  set if driver responds to status requests (defconstant $dNeedGoodBye 4)                   ;  set if driver needs time for performing periodic tasks (defconstant $dNeedTime 5)                      ;  set if driver needs time for performing periodic tasks (defconstant $dNeedLock 6)                      ;  set if driver must be locked in memory as soon as it is opened (defconstant $dNeedLockMask #x4000)             ;  set if driver must be locked in memory as soon as it is opened (defconstant $dNeedTimeMask #x2000)             ;  set if driver needs time for performing periodic tasks (defconstant $dNeedGoodByeMask #x1000)          ;  set if driver needs to be called before the application heap is initialized (defconstant $dStatEnableMask #x800)            ;  set if driver responds to status requests (defconstant $dCtlEnableMask #x400)             ;  set if driver responds to control requests (defconstant $dWritEnableMask #x200)            ;  set if driver responds to write requests (defconstant $dReadEnableMask #x100)            ;  set if driver responds to read requests ;  run-time flags used in the device control entry (defconstant $dOpened 5)                        ;  driver is open (defconstant $dRAMBased 6)                      ;  dCtlDriver is a handle (1) or pointer (0) (defconstant $drvrActive 7)                     ;  driver is currently processing a request (defconstant $drvrActiveMask #x80)              ;  driver is currently processing a request (defconstant $dRAMBasedMask #x40)               ;  dCtlDriver is a handle (1) or pointer (0) (defconstant $dOpenedMask #x20)                 ;  driver is open (defrecord DRVRHeader    (drvrFlags :signed-integer)   (drvrDelay :signed-integer)   (drvrEMask :signed-integer)   (drvrMenu :signed-integer)   (drvrOpen :signed-integer)   (drvrPrime :signed-integer)   (drvrCtl :signed-integer)   (drvrStatus :signed-integer)   (drvrClose :signed-integer)   ;;Changing field drvrname from signed-byte to unsigned-byte to match C header (educated-guess)   (drvrName (:array :unsigned-byte 1))         ;  unsigned char    )(def-mactype :drvrheaderptr (find-mactype '(:pointer :drvrheader)))(def-mactype :drvrheaderhandle (find-mactype '(:handle :drvrheader)))(defrecord (DCtlEntry :handle)    (dCtlDriver :pointer)   (dCtlFlags :signed-integer)   (dCtlQHdr :qhdr)   (dCtlPosition :signed-long)   (dCtlStorage :handle)   (dCtlRefNum :signed-integer)   (dCtlCurTicks :signed-long)   (dCtlWindow (:pointer :grafport))   (dCtlDelay :signed-integer)   (dCtlEMask :signed-integer)   (dCtlMenu :signed-integer)   )(def-mactype :dctlptr (find-mactype '(:pointer :dctlentry)))(def-mactype :dctlhandle (find-mactype '(:handle :dctlentry)))(defrecord (AuxDCE :handle)    (dCtlDriver :pointer)   (dCtlFlags :signed-integer)   (dCtlQHdr :qhdr)   (dCtlPosition :signed-long)   (dCtlStorage :handle)   (dCtlRefNum :signed-integer)   (dCtlCurTicks :signed-long)   (dCtlWindow (:pointer :grafport))   (dCtlDelay :signed-integer)   (dCtlEMask :signed-integer)   (dCtlMenu :signed-integer)   (dCtlSlot :signed-byte)   (dCtlSlotId :signed-byte)   (dCtlDevBase :signed-long)   (dCtlOwner :pointer)   (dCtlExtDev :signed-byte)   (fillByte :signed-byte)   (dCtlNodeID :unsigned-long)   )(def-mactype :auxdceptr (find-mactype '(:pointer :auxdce)))(def-mactype :auxdcehandle (find-mactype '(:handle :auxdce)))(def-mactype :controlpaneldefprocptr (find-mactype ':pointer));  FUNCTION ControlPanelDef(message: INTEGER; item: INTEGER; numItems: INTEGER; cPanelID: INTEGER; VAR theEvent: EventRecord; cdevValue: LONGINT; cpDialog: DialogPtr): LONGINT; (def-mactype :controlpaneldefupp (find-mactype ':pointer))(defconstant $uppControlPanelDefProcInfo #xFEAB0);  FUNCTION (2 byte param, 2 byte param, 2 byte param, 2 byte param, 4 byte param, 4 byte param, 4 byte param): 4 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewControlPanelDefProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallControlPanelDefProc" ((message :signed-integer) (item :signed-integer) (numItems :signed-integer) (cPanelID :signed-integer) (theEvent (:pointer :eventrecord)) (cdevValue :signed-long) (cpDialog (:pointer :grafport)) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC; ; 	SetChooserAlert used to simply set a bit in a low-mem global; 	to tell the Chooser not to display its warning message when; 	the printer is changed. However, under MultiFinder and System 7,; 	this low-mem is swapped out when a layer change occurs, and the; 	Chooser never sees the change. It is obsolete, and completely; 	unsupported on the PowerPC. 68K apps can still call it if they; 	wish.;                                               ; $IFC OLDROUTINENAMES  & NOT GENERATINGCFM ;; Warning: No calling method defined for this trap(deftrap-inline "_GetDCtlEntry" ((refNum :signed-integer))   (:handle :dctlentry)   () )                                         ; $ENDC; ;   Note: DrvrInstall() is no longer supported, becuase it never really worked anyways.;   		There will soon be a DriverInstall() which does the right thing.; ; 		DrvrRemove has been renamed to DriverRemove.  But, InterfaceLib for PowerPC; 		still exports DrvrRemove, so a macro is used to map the new name to old.; ; ;; Warning: No calling method defined for this trap(deftrap-inline "_SetChooserAlert" ((f :boolean))   :boolean   () )                                         ; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_DrvrRemove" ((refNum :signed-integer))   (:d0 :signed-integer)   (:register-trap #xA03E :d0 refNum)); $ENDC; $IFC GENERATING68K ; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_DriverRemove" ((refNum :signed-integer))   (:d0 :signed-integer)   (:register-trap #xA03E :d0 refNum)); $ENDC; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_OpenDriver" ((name (:string 255)) (drvrRefNum (:pointer :signed-integer)))   :signed-integer   () );; Warning: No calling method defined for this trap(deftrap-inline "_CloseDriver" ((refNum :signed-integer))   :signed-integer   () );; Warning: No calling method defined for this trap;; Using mcl2 version of control because there is no implementation in the new headers(deftrap "_Control"         ((paramblock (:pointer :paramblockrec)))         (:d0 :signed-integer)         (:register-trap 40964 :a0 paramblock));; Warning: No calling method defined for this trap;; Using mcl2 version of status because there is no implementation in the new headers(deftrap "_Status"         ((paramblock (:pointer :paramblockrec)))         (:d0 :signed-integer)         (:register-trap 40965 :a0 paramblock));; Warning: No calling method defined for this trap;; Using mcl2 version of killio because there is no implementation in the new headers(deftrap "_KillIO"         ((paramblock (:pointer :paramblockrec)))         (:d0 :signed-integer)         (:register-trap 40966 :a0 paramblock)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_PBControlSync" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA004 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_PBControlAsync" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA404 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_PBControlImmed" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA204 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_PBStatusSync" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA005 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_PBStatusAsync" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA405 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_PBStatusImmed" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA205 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_PBKillIOSync" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA006 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_PBKillIOAsync" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA406 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_PBKillIOImmed" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA206 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OpenDeskAcc" ((deskAccName (:string 255)))   (:stack :signed-integer)   (:stack-trap #xA9B6)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CloseDeskAcc" ((refNum :signed-integer))   nil   (:stack-trap #xA9B7)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of pbcontrol because there is no implementation in the new headers(deftrap ("_PBControl" "PBControlSync")         ((Paramblock (:pointer :paramblockrec)))         (:d0 :signed-integer)         (:register-trap 40964 :a0 paramblock));; Warning: No calling method defined for this trap;; Using mcl2 version of pbstatus because there is no implementation in the new headers(deftrap ("_PBStatus" "PBStatusSync")         ((paramblock (:pointer :paramblockrec)))         (:d0 :signed-integer)         (:register-trap 40965 :a0 paramblock)); $ALIGN RESET                                  ; $POP; $SETC UsingIncludes := DevicesIncludes; $ENDC; __DEVICES__; $IFC NOT UsingIncludes;; Warning: No calling method defined for this trap;; Using mcl2 version of pbkillio because there is no implementation in the new headers(deftrap ("_PBKillIO" "PBKillIOSync")         ((paramblock (:pointer :paramblockrec)))         (:d0 :signed-integer)         (:register-trap 40966 :a0 paramblock)); $ENDC(provide-interface 'Devices)