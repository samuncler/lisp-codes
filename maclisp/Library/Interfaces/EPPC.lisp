(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:EPPC.p"; at Tuesday June 6,1995 2:01:22 pm.; ;  	File:		EPPC.p;  ;  	Contains:	High Level Event Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __EPPC__; $SETC __EPPC__ := 1; $I+; $SETC EPPCIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __ERRORS__|#(require-interface 'Errors)#|                                              ; $I Errors.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __APPLETALK__|#(require-interface 'AppleTalk)#|                                              ; $I AppleTalk.p |#                                             ; $ENDC; 	Types.p														; 	OSUtils.p													; 		MixedMode.p												; 		Memory.p												; $IFC UNDEFINED __FILES__(require-interface 'Files)                      ; $I Files.p; $ENDC; $IFC UNDEFINED __PPCTOOLBOX__(require-interface 'PPCToolbox)                 ; $I PPCToolbox.p; $ENDC; $IFC UNDEFINED __PROCESSES__(require-interface 'Processes)                  ; $I Processes.p; $ENDC; 	Events.p													; 		Quickdraw.p												; 			QuickdrawText.p										#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kHighLevelEvent 23);  postOptions currently supported (defconstant $receiverIDMask #xF000)(defconstant $receiverIDisPSN #x8000)(defconstant $receiverIDisSignature #x7000)(defconstant $receiverIDisSessionID #x6000)(defconstant $receiverIDisTargetID #x5000)(defconstant $systemOptionsMask #xF00)(defconstant $nReturnReceipt #x200)(defconstant $priorityMask #xFF)(defconstant $nAttnMsg #x1);  constant for return receipts (defconstant $HighLevelEventMsgClass :|jaym|)(defconstant $rtrnReceiptMsgID :|rtrn|)(defconstant $msgWasPartiallyAccepted 2)(defconstant $msgWasFullyAccepted 1)(defconstant $msgWasNotAccepted 0)(defrecord (TargetID :handle)    (sessionID :signed-long)   (name :ppcportrec)   (location :locationnamerec)   (recvrName :ppcportrec)   )(def-mactype :targetidptr (find-mactype '(:pointer :targetid)))(def-mactype :targetidhandle (find-mactype '(:handle :targetid)))(def-mactype :targetidhdl (find-mactype '(:handle :targetid)))(%define-record :senderid (find-record-descriptor :targetid))(def-mactype :senderidptr (find-mactype '(:pointer :targetid)))(defrecord (HighLevelEventMsg :handle)    ;;Changing field highleveleventmsgheaderlength from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (HighLevelEventMsgHeaderLength :unsigned-word)   ;;Changing field version from signed-integer to unsigned-word to match C header (pretty-sure)   (version :unsigned-word)   ;;Changing field reserved1 from signed-long to unsigned-long to match C header (pretty-sure)   (reserved1 :unsigned-long)   (theMsgEvent :eventrecord)   ;;Changing field userrefcon from signed-long to unsigned-long to match C header (pretty-darn-sure)   (userRefcon :unsigned-long)   ;;Changing field postingoptions from signed-long to unsigned-long to match C header (pretty-darn-sure)   (postingOptions :unsigned-long)   ;;Changing field msglength from signed-long to unsigned-long to match C header (pretty-darn-sure)   (msgLength :unsigned-long)   )(def-mactype :highleveleventmsgptr (find-mactype '(:pointer :highleveleventmsg)))(def-mactype :highleveleventmsghandle (find-mactype '(:handle :highleveleventmsg)))(def-mactype :highleveleventmsghdl (find-mactype '(:handle :highleveleventmsg)))(def-mactype :getspecificfilterprocptr (find-mactype ':pointer));  FUNCTION GetSpecificFilter(yourDataPtr: UNIV Ptr; msgBuff: HighLevelEventMsgPtr; (CONST)VAR sender: TargetID): BOOLEAN; (def-mactype :getspecificfilterupp (find-mactype ':pointer))(defconstant $uppGetSpecificFilterProcInfo #xFD0);  FUNCTION (4 byte param, 4 byte param, 4 byte param): 1 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewGetSpecificFilterProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallGetSpecificFilterProc" ((yourDataPtr :pointer) (msgBuff (:pointer :highleveleventmsg)) (sender (:pointer :targetid)) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_PostHighLevelEvent" ((theEvent (:pointer :eventrecord)) (receiverID :pointer) (msgRefcon :signed-long) (msgBuff :pointer) (msgLen :signed-long) (postingOptions :signed-long))   (:stack :signed-integer)   (:stack-trap #xA88F theEvent receiverID msgRefcon msgBuff msgLen postingOptions (52 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_AcceptHighLevelEvent" ((sender (:pointer :targetid)) (msgRefcon (:pointer :signed-long)) (msgBuff :pointer) (msgLen (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA88F sender msgRefcon msgBuff msgLen (51 :signed-integer))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetProcessSerialNumberFromPortName" ((portName (:pointer :ppcportrec)) (pPSN (:pointer :processserialnumber)))   (:stack :signed-integer)   (:stack-trap #xA88F portName pPSN (53 :signed-integer))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetPortNameFromProcessSerialNumber" ((portName (:pointer :ppcportrec)) (pPSN (:pointer :processserialnumber)))   (:stack :signed-integer)   (:stack-trap #xA88F portName pPSN (70 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetSpecificHighLevelEvent" ((aFilter :pointer) (yourDataPtr :pointer) (err (:pointer :signed-integer)))   (:stack :boolean)   (:stack-trap #xA88F aFilter yourDataPtr err (69 :signed-integer))); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := EPPCIncludes; $ENDC                                         ; __EPPC__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'EPPC)