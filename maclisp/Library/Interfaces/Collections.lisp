(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Collections.p"; at Tuesday June 6,1995 2:06:34 pm.; ;  	File:		Collections.p;  ;  	Contains:	Collection Manager Interfaces.;  ;  	Version:	Technology:	Quickdraw GX 1.0;  				Package:	Universal Interfaces 2.1ß1 in “MPW Prerelease” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __COLLECTIONS__; $SETC __COLLECTIONS__ := 1; $I+; $SETC CollectionsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $gestaltCollectionMgrVersion :|cltn|);  Collection Manager Error Result Codes... (defconstant $collectionItemLockedErr -5750)(defconstant $collectionItemNotFoundErr -5751)(defconstant $collectionIndexRangeErr -5752)(defconstant $collectionVersionErr -5753);  Convenience constants for functions which optionally return values... (defconstant $dontWantTag 0)(defconstant $dontWantId 0)(defconstant $dontWantSize 0)(defconstant $dontWantAttributes 0)(defconstant $dontWantIndex 0)(defconstant $dontWantData 0);  attributes bits (defconstant $noCollectionAttributes #x0)       ;  no attributes bits set (defconstant $allCollectionAttributes #xFFFFFFFF);  all attributes bits set (defconstant $userCollectionAttributes #xFFFF)  ;  user attributes bits (defconstant $defaultCollectionAttributes #x40000000);  default attributes - unlocked, persistent ;  ; 	Attribute bits 0 through 15 (entire low word) are reserved for use by the application.; 	Attribute bits 16 through 31 (entire high word) are reserved for use by the Collection Manager.; 	Only bits 31 (collectionLockBit) and 30 (collectionPersistenceBit) currently have meaning.; (defconstant $collectionUser0Bit 0)(defconstant $collectionUser1Bit 1)(defconstant $collectionUser2Bit 2)(defconstant $collectionUser3Bit 3)(defconstant $collectionUser4Bit 4)(defconstant $collectionUser5Bit 5)(defconstant $collectionUser6Bit 6)(defconstant $collectionUser7Bit 7)(defconstant $collectionUser8Bit 8)(defconstant $collectionUser9Bit 9)(defconstant $collectionUser10Bit 10)(defconstant $collectionUser11Bit 11)(defconstant $collectionUser12Bit 12)(defconstant $collectionUser13Bit 13)(defconstant $collectionUser14Bit 14)(defconstant $collectionUser15Bit 15)(defconstant $collectionReserved0Bit 16)(defconstant $collectionReserved1Bit 17)(defconstant $collectionReserved2Bit 18)(defconstant $collectionReserved3Bit 19)(defconstant $collectionReserved4Bit 20)(defconstant $collectionReserved5Bit 21)(defconstant $collectionReserved6Bit 22)(defconstant $collectionReserved7Bit 23)(defconstant $collectionReserved8Bit 24)(defconstant $collectionReserved9Bit 25)(defconstant $collectionReserved10Bit 26)(defconstant $collectionReserved11Bit 27)(defconstant $collectionReserved12Bit 28)(defconstant $collectionReserved13Bit 29)(defconstant $collectionPersistenceBit 30)(defconstant $collectionLockBit 31);  attribute masks (defconstant $collectionUser0Mask (* 1 (expt 2 #$collectionUser0Bit)))(defconstant $collectionUser1Mask (* 1 (expt 2 #$collectionUser1Bit)))(defconstant $collectionUser2Mask (* 1 (expt 2 #$collectionUser2Bit)))(defconstant $collectionUser3Mask (* 1 (expt 2 #$collectionUser3Bit)))(defconstant $collectionUser4Mask (* 1 (expt 2 #$collectionUser4Bit)))(defconstant $collectionUser5Mask (* 1 (expt 2 #$collectionUser5Bit)))(defconstant $collectionUser6Mask (* 1 (expt 2 #$collectionUser6Bit)))(defconstant $collectionUser7Mask (* 1 (expt 2 #$collectionUser7Bit)))(defconstant $collectionUser8Mask (* 1 (expt 2 #$collectionUser8Bit)))(defconstant $collectionUser9Mask (* 1 (expt 2 #$collectionUser9Bit)))(defconstant $collectionUser10Mask (* 1 (expt 2 #$collectionUser10Bit)))(defconstant $collectionUser11Mask (* 1 (expt 2 #$collectionUser11Bit)))(defconstant $collectionUser12Mask (* 1 (expt 2 #$collectionUser12Bit)))(defconstant $collectionUser13Mask (* 1 (expt 2 #$collectionUser13Bit)))(defconstant $collectionUser14Mask (* 1 (expt 2 #$collectionUser14Bit)))(defconstant $collectionUser15Mask (* 1 (expt 2 #$collectionUser15Bit)))(defconstant $collectionReserved0Mask (* 1 (expt 2 #$collectionReserved0Bit)))(defconstant $collectionReserved1Mask (* 1 (expt 2 #$collectionReserved1Bit)))(defconstant $collectionReserved2Mask (* 1 (expt 2 #$collectionReserved2Bit)))(defconstant $collectionReserved3Mask (* 1 (expt 2 #$collectionReserved3Bit)))(defconstant $collectionReserved4Mask (* 1 (expt 2 #$collectionReserved4Bit)))(defconstant $collectionReserved5Mask (* 1 (expt 2 #$collectionReserved5Bit)))(defconstant $collectionReserved6Mask (* 1 (expt 2 #$collectionReserved6Bit)))(defconstant $collectionReserved7Mask (* 1 (expt 2 #$collectionReserved7Bit)))(defconstant $collectionReserved8Mask (* 1 (expt 2 #$collectionReserved8Bit)))(defconstant $collectionReserved9Mask (* 1 (expt 2 #$collectionReserved9Bit)))(defconstant $collectionReserved10Mask (* 1 (expt 2 #$collectionReserved10Bit)))(defconstant $collectionReserved11Mask (* 1 (expt 2 #$collectionReserved11Bit)))(defconstant $collectionReserved12Mask (* 1 (expt 2 #$collectionReserved12Bit)))(defconstant $collectionReserved13Mask (* 1 (expt 2 #$collectionReserved13Bit)))(defconstant $collectionPersistenceMask (* 1 (expt 2 #$collectionPersistenceBit)))(defconstant $collectionLockMask (* 1 (expt 2 #$collectionLockBit))); *********;  Types   ; *********;  abstract data type for a collection (def-mactype :collection (find-mactype ':pointer))(def-mactype :collectiontag (find-mactype ':ostype))(def-mactype :collectionflattenprocptr (find-mactype ':pointer));  FUNCTION CollectionFlatten(size: LONGINT; data: UNIV Ptr; refCon: UNIV Ptr): OSErr; (def-mactype :collectionexceptionprocptr (find-mactype ':pointer));  FUNCTION CollectionException(c: Collection; status: OSErr): OSErr; (def-mactype :collectionflattenupp (find-mactype ':pointer))(def-mactype :collectionexceptionupp (find-mactype ':pointer))(defconstant $uppCollectionFlattenProcInfo #xFE0);  FUNCTION (4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppCollectionExceptionProcInfo #x2E0);  FUNCTION (4 byte param, 2 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewCollectionFlattenProc" ("QuickDrawGXLib"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewCollectionExceptionProc" ("QuickDrawGXLib"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallCollectionFlattenProc" ("QuickDrawGXLib"))  ((size :signed-long) (data :pointer) (refCon :pointer) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallCollectionExceptionProc" ("QuickDrawGXLib"))  ((c :pointer) (status :signed-integer) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_NewCollection" ("QuickDrawGXLib"))         ()   (:stack :pointer)   (:stack-trap #xABF6 :d0 0)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DisposeCollection" ("QuickDrawGXLib"))         ((c :pointer))   nil   (:stack-trap #xABF6 :d0 1 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CloneCollection" ("QuickDrawGXLib"))         ((c :pointer))   (:stack :pointer)   (:stack-trap #xABF6 :d0 2 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CountCollectionOwners" ("QuickDrawGXLib"))         ((c :pointer))   (:stack :signed-long)   (:stack-trap #xABF6 :d0 3 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CopyCollection" ("QuickDrawGXLib"))         ((srcCollection :pointer) (dstCollection :pointer))   (:stack :pointer)   (:stack-trap #xABF6 :d0 4 srcCollection dstCollection)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCollectionDefaultAttributes" ("QuickDrawGXLib"))         ((c :pointer))   (:stack :signed-long)   (:stack-trap #xABF6 :d0 5 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetCollectionDefaultAttributes" ("QuickDrawGXLib"))         ((c :pointer) (whichAttributes :signed-long) (newAttributes :signed-long))   nil   (:stack-trap #xABF6 :d0 6 c whichAttributes newAttributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CountCollectionItems" ("QuickDrawGXLib"))         ((c :pointer))   (:stack :signed-long)   (:stack-trap #xABF6 :d0 7 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_AddCollectionItem" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype) (id :signed-long) (itemSize :signed-long) (itemData :pointer))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 8 c tag id itemSize itemData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCollectionItem" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype) (id :signed-long) (itemSize (:pointer :signed-long)) (itemData :pointer))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 9 c tag id itemSize itemData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_RemoveCollectionItem" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype) (id :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 10 c tag id)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetCollectionItemInfo" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype) (id :signed-long) (whichAttributes :signed-long) (newAttributes :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 11 c tag id whichAttributes newAttributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCollectionItemInfo" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype) (id :signed-long) (index (:pointer :signed-long)) (itemSize (:pointer :signed-long)) (attributes (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 12 c tag id index itemSize attributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_ReplaceIndexedCollectionItem" ("QuickDrawGXLib"))         ((c :pointer) (index :signed-long) (itemSize :signed-long) (itemData :pointer))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 13 c index itemSize itemData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetIndexedCollectionItem" ("QuickDrawGXLib"))         ((c :pointer) (index :signed-long) (itemSize (:pointer :signed-long)) (itemData :pointer))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 14 c index itemSize itemData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_RemoveIndexedCollectionItem" ("QuickDrawGXLib"))         ((c :pointer) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 15 c index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetIndexedCollectionItemInfo" ("QuickDrawGXLib"))         ((c :pointer) (index :signed-long) (whichAttributes :signed-long) (newAttributes :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 16 c index whichAttributes newAttributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetIndexedCollectionItemInfo" ("QuickDrawGXLib"))         ((c :pointer) (index :signed-long) (tag (:pointer :ostype)) (id (:pointer :signed-long)) (itemSize (:pointer :signed-long)) (attributes (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 17 c index tag id itemSize attributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CollectionTagExists" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype))   (:stack :boolean)   (:stack-trap #xABF6 :d0 18 c tag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CountCollectionTags" ("QuickDrawGXLib"))         ((c :pointer))   (:stack :signed-long)   (:stack-trap #xABF6 :d0 19 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetIndexedCollectionTag" ("QuickDrawGXLib"))         ((c :pointer) (tagIndex :signed-long) (tag (:pointer :ostype)))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 20 c tagIndex tag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CountTaggedCollectionItems" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype))   (:stack :signed-long)   (:stack-trap #xABF6 :d0 21 c tag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTaggedCollectionItem" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype) (whichItem :signed-long) (itemSize (:pointer :signed-long)) (itemData :pointer))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 22 c tag whichItem itemSize itemData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTaggedCollectionItemInfo" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype) (whichItem :signed-long) (id (:pointer :signed-long)) (index (:pointer :signed-long)) (itemSize (:pointer :signed-long)) (attributes (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 23 c tag whichItem id index itemSize attributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_PurgeCollection" ("QuickDrawGXLib"))         ((c :pointer) (whichAttributes :signed-long) (matchingAttributes :signed-long))   nil   (:stack-trap #xABF6 :d0 24 c whichAttributes matchingAttributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_PurgeCollectionTag" ("QuickDrawGXLib"))         ((c :pointer) (tag :ostype))   nil   (:stack-trap #xABF6 :d0 25 c tag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_EmptyCollection" ("QuickDrawGXLib"))         ((c :pointer))   nil   (:stack-trap #xABF6 :d0 26 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_FlattenCollection" ("QuickDrawGXLib"))         ((c :pointer) (flattenProc :pointer) (refCon :pointer))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 27 c flattenProc refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_FlattenPartialCollection" ("QuickDrawGXLib"))         ((c :pointer) (flattenProc :pointer) (refCon :pointer) (whichAttributes :signed-long) (matchingAttributes :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 28 c flattenProc refCon whichAttributes matchingAttributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_UnflattenCollection" ("QuickDrawGXLib"))         ((c :pointer) (flattenProc :pointer) (refCon :pointer))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 29 c flattenProc refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCollectionExceptionProc" ("QuickDrawGXLib"))         ((c :pointer))   (:stack :pointer)   (:stack-trap #xABF6 :d0 30 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetCollectionExceptionProc" ("QuickDrawGXLib"))         ((c :pointer) (exceptionProc :pointer))   nil   (:stack-trap #xABF6 :d0 31 c exceptionProc)); $ENDC; ***************************************************************************************;  Utility Routines for handle-based access...														  ; ***************************************************************************************; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetNewCollection" ("QuickDrawGXLib"))         ((collectionID :signed-integer))   (:stack :pointer)   (:stack-trap #xABF6 :d0 32 collectionID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_AddCollectionItemHdl" ("QuickDrawGXLib"))         ((aCollection :pointer) (tag :ostype) (id :signed-long) (itemData :handle))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 33 aCollection tag id itemData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCollectionItemHdl" ("QuickDrawGXLib"))         ((aCollection :pointer) (tag :ostype) (id :signed-long) (itemData :handle))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 34 aCollection tag id itemData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_ReplaceIndexedCollectionItemHdl" ("QuickDrawGXLib"))         ((aCollection :pointer) (index :signed-long) (itemData :handle))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 35 aCollection index itemData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetIndexedCollectionItemHdl" ("QuickDrawGXLib"))         ((aCollection :pointer) (index :signed-long) (itemData :handle))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 36 aCollection index itemData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_FlattenCollectionToHdl" ("QuickDrawGXLib"))         ((aCollection :pointer) (flattened :handle))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 37 aCollection flattened)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_UnflattenCollectionFromHdl" ("QuickDrawGXLib"))         ((aCollection :pointer) (flattened :handle))   (:stack :signed-integer)   (:stack-trap #xABF6 :d0 38 aCollection flattened)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := CollectionsIncludes; $ENDC                                         ; __COLLECTIONS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Collections)