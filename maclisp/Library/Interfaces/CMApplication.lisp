(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:CMApplication.p"; at Tuesday June 6,1995 2:05:22 pm.; ;  	File:		CMApplication.p;  ;  	Contains:	Color Matching Interfaces;  ;  	Version:	Technology:	ColorSync 2.0;  				Package:	Universal Interfaces 2.1§1 in ÒMPW PrereleaseÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __CMAPPLICATION__; $SETC __CMAPPLICATION__ := 1; $I+; $SETC CMApplicationIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	MixedMode.p													; 	QuickdrawText.p												#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC; 	OSUtils.p													; 		Memory.p												; $IFC UNDEFINED __PRINTING__(require-interface 'Printing)                   ; $I Printing.p; $ENDC; 	Errors.p													; 	Dialogs.p													; 		Windows.p												; 			Events.p											; 			Controls.p											; 				Menus.p											; 		TextEdit.p												; $IFC UNDEFINED __CMICCPROFILE__(require-interface 'CMICCProfile)               ; $I CMICCProfile.p; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $gestaltColorSync20 #x200)(defconstant $kDefaultCMMSignature :|appl|);  Macintosh 68K trap word (defconstant $cmTrap #xABEE);  PicComment IDs (defconstant $cmBeginProfile 220)(defconstant $cmEndProfile 221)(defconstant $cmEnableMatching 222)(defconstant $cmDisableMatching 223)(defconstant $cmComment 224);  PicComment selectors for cmComment (defconstant $cmBeginProfileSel 0)(defconstant $cmContinueProfileSel 1)(defconstant $cmEndProfileSel 2);  Defines for version 1.0 CMProfileSearchRecord.fieldMask (defconstant $cmMatchCMMType #x1)(defconstant $cmMatchApplProfileVersion #x2)(defconstant $cmMatchDataType #x4)(defconstant $cmMatchDeviceType #x8)(defconstant $cmMatchDeviceManufacturer #x10)(defconstant $cmMatchDeviceModel #x20)(defconstant $cmMatchDeviceAttributes #x40)(defconstant $cmMatchFlags #x80)(defconstant $cmMatchOptions #x100)(defconstant $cmMatchWhite #x200)(defconstant $cmMatchBlack #x400);  Defines for version 2.0 CMSearchRecord.searchMask (defconstant $cmMatchAnyProfile #x0)(defconstant $cmMatchProfileCMMType #x1)(defconstant $cmMatchProfileClass #x2)(defconstant $cmMatchDataColorSpace #x4)(defconstant $cmMatchProfileConnectionSpace #x8)(defconstant $cmMatchManufacturer #x10)(defconstant $cmMatchModel #x20)(defconstant $cmMatchAttributes #x40)(defconstant $cmMatchProfileFlags #x80);  Result codes ;  General Errors (defconstant $cmProfileError -170)(defconstant $cmMethodError -171)(defconstant $cmMethodNotFound -175)            ;  CMM not present (defconstant $cmProfileNotFound -176)           ;  Responder error (defconstant $cmProfilesIdentical -177)         ;  Profiles the same (defconstant $cmCantConcatenateError -178)      ;  Profile can't be concatenated (defconstant $cmCantXYZ -179)                   ;  CMM cant handle XYZ space (defconstant $cmCantDeleteProfile -180)         ;  Responder error (defconstant $cmUnsupportedDataType -181)       ;  Responder error (defconstant $cmNoCurrentProfile -182)          ;  Responder error ;  Profile Access Errors (defconstant $cmElementTagNotFound -4200)(defconstant $cmIndexRangeErr -4201)            ;  Index out of range (defconstant $cmCantDeleteElement -4202)(defconstant $cmFatalProfileErr -4203)(defconstant $cmInvalidProfile -4204)           ;  A Profile must contain a 'cs1 ' tag to be valid (defconstant $cmInvalidProfileLocation -4205)   ;  Operation not supported for this profile location ;  Profile Search Errors (defconstant $cmInvalidSearch -4206)            ;  Bad Search Handle (defconstant $cmSearchError -4207)(defconstant $cmErrIncompatibleProfile -4208);  Other ColorSync Errors (defconstant $cmInvalidColorSpace -4209)        ;  Profile colorspace does not match bitmap type (defconstant $cmInvalidSrcMap -4210)            ;  Source pix/bit map was invalid (defconstant $cmInvalidDstMap -4211)            ;  Destination pix/bit map was invalid (defconstant $cmNoGDevicesError -4212)          ;  Begin/End Matching -- no gdevices available (defconstant $cmInvalidProfileComment -4213)    ;  Bad Profile comment during drawpicture ;  Color Conversion Errors (defconstant $cmRangeOverFlow -4214)            ;  One or more output color value overflows in color conversion ; 														all input color values will still be converted, and the overflown ; 														will be clipped ;  Other Profile Access Errors (defconstant $cmCantCopyModifiedV1Profile -4215);  It is illegal to copy version 1 profiles that  ; 														have been modified ;  deviceType values for ColorSync 1.0 Device Profile access (defconstant $cmSystemDevice :|sys |)(defconstant $cmGDevice :|gdev|);  Commands for CMFlattenUPP(É) (defconstant $cmOpenReadSpool 1)(defconstant $cmOpenWriteSpool 2)(defconstant $cmReadSpool 3)(defconstant $cmWriteSpool 4)(defconstant $cmCloseSpool 5);  Flags for PostScript-related functions (defconstant $cmPS7bit 1)(defconstant $cmPS8bit 2)(def-mactype :cmprofileref (find-mactype ':pointer));  Abstract data type for Profile search result (def-mactype :cmprofilesearchref (find-mactype ':pointer));  Abstract data type for BeginMatching(É) reference (def-mactype :cmmatchref (find-mactype ':pointer));  Abstract data type for ColorWorld reference (def-mactype :cmworldref (find-mactype ':pointer));  Caller-supplied progress function for Bitmap & PixMap matching routines ;  Caller-supplied filter function for Profile search (def-mactype :cmflattenprocptr (find-mactype ':pointer));  FUNCTION CMFlatten(command: LONGINT; VAR size: LONGINT; data: UNIV Ptr; refCon: UNIV Ptr): OSErr; (def-mactype :cmbitmapcallbackprocptr (find-mactype ':pointer));  FUNCTION CMBitmapCallBack(progress: LONGINT; refCon: UNIV Ptr): BOOLEAN; (def-mactype :cmprofilefilterprocptr (find-mactype ':pointer));  FUNCTION CMProfileFilter(prof: CMProfileRef; refCon: UNIV Ptr): BOOLEAN; (def-mactype :cmflattenupp (find-mactype ':pointer))(def-mactype :cmbitmapcallbackupp (find-mactype ':pointer))(def-mactype :cmprofilefilterupp (find-mactype ':pointer))(defconstant $uppCMFlattenProcInfo #x3FE0)      ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppCMBitmapCallBackProcInfo #x3D0);  FUNCTION (4 byte param, 4 byte param): 1 byte result; (defconstant $uppCMProfileFilterProcInfo #x3D0) ;  FUNCTION (4 byte param, 4 byte param): 1 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewCMFlattenProc" ("ColorSync"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewCMBitmapCallBackProc" ("ColorSync"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewCMProfileFilterProc" ("ColorSync"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallCMFlattenProc" ("ColorSync"))  ((command :signed-long) (size (:pointer :signed-long)) (data :pointer) (refCon :pointer) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallCMBitmapCallBackProc" ("ColorSync"))  ((progress :signed-long) (refCon :pointer) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallCMProfileFilterProc" ("ColorSync"))  ((prof :pointer) (refCon :pointer) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC(def-mactype :cmerror (find-mactype ':signed-long));  For 1.0 and 2.0 profile header variants ;  CMAppleProfileHeader (defrecord CMAppleProfileHeader    (:variant       (      (cm1 :cmheader)      )      (      (cm2 :cm2header)      )      )   );  Param for CWConcatColorWorld(É) (defrecord CMConcatProfileSet    ;;Changing field keyindex from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (keyIndex :unsigned-word)                    ;  Zero-based    ;;Changing field count from signed-integer to unsigned-word to match C header (pretty-sure)   (count :unsigned-word)                       ;  Min 1    (profileSet (:array :pointer 1))             ;  Variable. Ordered from Source -> Dest    );  ColorSync color data types (defrecord CMRGBColor    ;;Changing field red from signed-integer to unsigned-word to match C header (pretty-sure)   (red :unsigned-word)                         ;  0..65535    ;;Changing field green from signed-integer to unsigned-word to match C header (pretty-sure)   (green :unsigned-word)   ;;Changing field blue from signed-integer to unsigned-word to match C header (pretty-sure)   (blue :unsigned-word)   )(defrecord CMCMYKColor    ;;Changing field cyan from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (cyan :unsigned-word)                        ;  0..65535    ;;Changing field magenta from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (magenta :unsigned-word)   ;;Changing field yellow from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (yellow :unsigned-word)   ;;Changing field black from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (black :unsigned-word)   )(defrecord CMCMYColor    ;;Changing field cyan from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (cyan :unsigned-word)                        ;  0..65535    ;;Changing field magenta from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (magenta :unsigned-word)   ;;Changing field yellow from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (yellow :unsigned-word)   )(defrecord CMHLSColor    ;;Changing field hue from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (hue :unsigned-word)                         ;  0..65535. Fraction of circle. Red at 0    ;;Changing field lightness from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (lightness :unsigned-word)                   ;  0..65535    ;;Changing field saturation from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (saturation :unsigned-word)                  ;  0..65535    )(defrecord CMHSVColor    ;;Changing field hue from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (hue :unsigned-word)                         ;  0..65535. Fraction of circle. Red at 0    ;;Changing field saturation from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (saturation :unsigned-word)                  ;  0..65535    ;;Changing field value from signed-integer to unsigned-word to match C header (pretty-sure)   (value :unsigned-word)                       ;  0..65535    )(defrecord CMLabColor    ;;Changing field l from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (L :unsigned-word)                           ;  0..65535 maps to 0..100    ;;Changing field a from signed-integer to unsigned-word to match C header (pretty-sure)   (a :unsigned-word)                           ;  0..65535 maps to -128..127.996    ;;Changing field b from signed-integer to unsigned-word to match C header (pretty-sure)   (b :unsigned-word)                           ;  0..65535 maps to -128..127.996    )(defrecord CMLuvColor    ;;Changing field l from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (L :unsigned-word)                           ;  0..65535 maps to 0..100    ;;Changing field u from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (u :unsigned-word)                           ;  0..65535 maps to -128..127.996    ;;Changing field v from signed-integer to unsigned-word to match C header (pretty-sure)   (v :unsigned-word)                           ;  0..65535 maps to -128..127.996    )(defrecord CMYxyColor    ;;Changing field capy from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (capY :unsigned-word)                        ;  0..65535 maps to 0..1    ;;Changing field x from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (x :unsigned-word)                           ;  0..65535 maps to 0..1    ;;Changing field y from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (y :unsigned-word)                           ;  0..65535 maps to 0..1    )(defrecord CMGrayColor    ;;Changing field gray from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (gray :unsigned-word)                        ;  0..65535    )(defrecord CMMultichannel5Color    ;;Changing field components from signed-byte to unsigned-byte to match C header (educated-guess)   (components (:array :unsigned-byte 5))       ;  unsigned char ;  0..255    )(defrecord CMMultichannel6Color    ;;Changing field components from signed-byte to unsigned-byte to match C header (educated-guess)   (components (:array :unsigned-byte 6))       ;  unsigned char ;  0..255    )(defrecord CMMultichannel7Color    ;;Changing field components from signed-byte to unsigned-byte to match C header (educated-guess)   (components (:array :unsigned-byte 7))       ;  unsigned char ;  0..255    )(defrecord CMMultichannel8Color    ;;Changing field components from signed-byte to unsigned-byte to match C header (educated-guess)   (components (:array :unsigned-byte 8))       ;  unsigned char ;  0..255    )(defrecord CMColor    (:variant       (      (rgb :cmrgbcolor)      )      (      (hsv :cmhsvcolor)      )      (      (hls :cmhlscolor)      )      (      (XYZ :cmxyzcolor)      )      (      (Lab :cmlabcolor)      )      (      (Luv :cmluvcolor)      )      (      (Yxy :cmyxycolor)      )      (      (cmyk :cmcmykcolor)      )      (      (cmy :cmcmycolor)      )      (      (gray :cmgraycolor)      )      (      (mc5 :cmmultichannel5color)      )      (      (mc6 :cmmultichannel6color)      )      (      (mc7 :cmmultichannel7color)      )      (      (mc8 :cmmultichannel8color)      )      )   )(defrecord CMProfileSearchRecord    (header :cmheader)   ;;Changing field fieldmask from signed-long to unsigned-long to match C header (pretty-darn-sure)   (fieldMask :unsigned-long)   (reserved (:array :signed-long 2))   )(def-mactype :cmprofilesearchrecordptr (find-mactype '(:pointer :cmprofilesearchrecord)))(def-mactype :cmprofilesearchrecordhandle (find-mactype '(:handle :cmprofilesearchrecord)));  Search definition for 2.0 (defrecord CMSearchRecord    (CMMType :ostype)   (profileClass :ostype)   (dataColorSpace :ostype)   (profileConnectionSpace :ostype)   ;;Changing field devicemanufacturer from signed-long to unsigned-long to match C header (pretty-darn-sure)   (deviceManufacturer :unsigned-long)   ;;Changing field devicemodel from signed-long to unsigned-long to match C header (pretty-sure)   (deviceModel :unsigned-long)   ;;Changing field deviceattributes from signed-long to unsigned-long to match C header (pretty-sure)   (deviceAttributes (:array :unsigned-long 2))   ;;Changing field profileflags from signed-long to unsigned-long to match C header (pretty-darn-sure)   (profileFlags :unsigned-long)   ;;Changing field searchmask from signed-long to unsigned-long to match C header (pretty-darn-sure)   (searchMask :unsigned-long)   (filter :pointer)   );  GetCWInfo structures (defrecord CMMInfoRecord    (CMMType :ostype)   (CMMVersion :signed-long)   )(defrecord CMCWInfoRecord    ;;Changing field cmmcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (cmmCount :unsigned-long)   (cmmInfo (:array :cmminforecord 2))   )(defconstant $cmNoColorPacking #x0)(defconstant $cmAlphaSpace #x80)(defconstant $cmWord5ColorPacking #x500)(defconstant $cmLong8ColorPacking #x800)(defconstant $cmLong10ColorPacking #xA00)(defconstant $cmAlphaFirstPacking #x1000)(defconstant $cmOneBitDirectPacking #xB00)(defconstant $cmNoSpace 0)(defconstant $cmRGBSpace 1)(defconstant $cmCMYKSpace 2)(defconstant $cmHSVSpace 3)(defconstant $cmHLSSpace 4)(defconstant $cmYXYSpace 5)(defconstant $cmXYZSpace 6)(defconstant $cmLUVSpace 7)(defconstant $cmLABSpace 8)(defconstant $cmReservedSpace1 9)(defconstant $cmGraySpace 10)(defconstant $cmReservedSpace2 11)(defconstant $cmGamutResultSpace 12)(defconstant $cmRGBASpace (+ #$cmRGBSpace #$cmAlphaSpace))(defconstant $cmGrayASpace (+ #$cmGraySpace #$cmAlphaSpace))(defconstant $cmRGB16Space (+ #$cmWord5ColorPacking #$cmRGBSpace))(defconstant $cmRGB32Space (+ #$cmLong8ColorPacking #$cmRGBSpace))(defconstant $cmARGB32Space (+ #$cmLong8ColorPacking (+ #$cmAlphaFirstPacking #$cmRGBASpace)))(defconstant $cmCMYK32Space (+ #$cmLong8ColorPacking #$cmCMYKSpace))(defconstant $cmHSV32Space (+ #$cmLong10ColorPacking #$cmHSVSpace))(defconstant $cmHLS32Space (+ #$cmLong10ColorPacking #$cmHLSSpace))(defconstant $cmYXY32Space (+ #$cmLong10ColorPacking #$cmYXYSpace))(defconstant $cmXYZ32Space (+ #$cmLong10ColorPacking #$cmXYZSpace))(defconstant $cmLUV32Space (+ #$cmLong10ColorPacking #$cmLUVSpace))(defconstant $cmLAB32Space (+ #$cmLong10ColorPacking #$cmLABSpace))(defconstant $cmGamutResult1Space (+ #$cmOneBitDirectPacking #$cmGamutResultSpace))(def-mactype :cmbitmapcolorspace (find-mactype ':signed-long))(defrecord CMBitmap    (image (:pointer :character))   (width :signed-long)   (height :signed-long)   (rowBytes :signed-long)   (pixelSize :signed-long)   (space :signed-long)   (user1 :signed-long)   (user2 :signed-long)   );  Classic Print Manager Stuff (defconstant $enableColorMatchingOp 12)(defconstant $registerProfileOp 13);  PrGeneral parameter blocks (defrecord TEnableColorMatchingBlk    (iOpCode :signed-integer)   (iError :signed-integer)   (lReserved :signed-long)   (hPrint (:handle :tprint))   (fEnableIt :boolean)   )(defrecord TRegisterProfileBlk    (iOpCode :signed-integer)   (iError :signed-integer)   (lReserved :signed-long)   (hPrint (:handle :tprint))   (fRegisterIt :boolean)   )(defconstant $cmNoProfileBase 0)(defconstant $cmFileBasedProfile 1)(defconstant $cmHandleBasedProfile 2)(defconstant $cmPtrBasedProfile 3)(defrecord CMFileLocation    (spec :fsspec)   )(defrecord CMHandleLocation    (h :handle)   )(defrecord CMPtrLocation    (p :pointer)   )(defrecord CMProfLoc    (:variant       (      (fileLoc :cmfilelocation)      )      (      (handleLoc :cmhandlelocation)      )      (      (ptrLoc :cmptrlocation)      )      )   )(defrecord CMProfileLocation    (locType :signed-integer)   (u :cmprofloc)   );  Profile file and element access ; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMOpenProfile" ("ColorSync"))         ((prof (:pointer :pointer)) (theProfile (:pointer :cmprofilelocation)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 8 16) 28) prof theProfile)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMCloseProfile" ("ColorSync"))         ((prof :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 4 16) 29) prof)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMUpdateProfile" ("ColorSync"))         ((prof :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 4 16) 52) prof)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMNewProfile" ("ColorSync"))         ((prof (:pointer :pointer)) (theProfile (:pointer :cmprofilelocation)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 8 16) 27) prof theProfile)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMCopyProfile" ("ColorSync"))         ((targetProf (:pointer :pointer)) (targetLocation (:pointer :cmprofilelocation)) (srcProf :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 37) targetProf targetLocation srcProf)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetProfileLocation" ("ColorSync"))         ((prof :pointer) (theProfile (:pointer :cmprofilelocation)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 8 16) 60) prof theProfile)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMValidateProfile" ("ColorSync"))         ((prof :pointer) (valid (:pointer :boolean)) (preferredCMMnotfound (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 38) prof valid preferredCMMnotfound)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMFlattenProfile" ("ColorSync"))         ((prof :pointer) (flags :signed-long) (proc :pointer) (refCon :pointer) (preferredCMMnotfound (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 20 16) 49) prof flags proc refCon preferredCMMnotfound)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMUnflattenProfile" ("ColorSync"))         ((resultFileSpec (:pointer :fsspec)) (proc :pointer) (refCon :pointer) (preferredCMMnotfound (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 50) resultFileSpec proc refCon preferredCMMnotfound)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMProfileElementExists" ("ColorSync"))         ((prof :pointer) (tag :ostype) (found (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 30) prof tag found)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMCountProfileElements" ("ColorSync"))         ((prof :pointer) (elementCount (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 8 16) 31) prof elementCount)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetProfileElement" ("ColorSync"))         ((prof :pointer) (tag :ostype) (elementSize (:pointer :signed-long)) (elementData :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 32) prof tag elementSize elementData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetProfileHeader" ("ColorSync"))         ((prof :pointer) (header (:pointer :cmappleprofileheader)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 8 16) 57) prof header)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetPartialProfileElement" ("ColorSync"))         ((prof :pointer) (tag :ostype) (offset :signed-long) (byteCount (:pointer :signed-long)) (elementData :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 20 16) 54) prof tag offset byteCount elementData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMSetProfileElementSize" ("ColorSync"))         ((prof :pointer) (tag :ostype) (elementSize :signed-long))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 56) prof tag elementSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMSetPartialProfileElement" ("ColorSync"))         ((prof :pointer) (tag :ostype) (offset :signed-long) (byteCount :signed-long) (elementData :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 20 16) 55) prof tag offset byteCount elementData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetIndProfileElementInfo" ("ColorSync"))         ((prof :pointer) (index :signed-long) (tag (:pointer :ostype)) (elementSize (:pointer :signed-long)) (refs (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 20 16) 33) prof index tag elementSize refs)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetIndProfileElement" ("ColorSync"))         ((prof :pointer) (index :signed-long) (elementSize (:pointer :signed-long)) (elementData :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 34) prof index elementSize elementData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMSetProfileElement" ("ColorSync"))         ((prof :pointer) (tag :ostype) (elementSize :signed-long) (elementData :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 35) prof tag elementSize elementData)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMSetProfileHeader" ("ColorSync"))         ((prof :pointer) (header (:pointer :cmappleprofileheader)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 8 16) 58) prof header)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMSetProfileElementReference" ("ColorSync"))         ((prof :pointer) (elementTag :ostype) (referenceTag :ostype))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 53) prof elementTag referenceTag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMRemoveProfileElement" ("ColorSync"))         ((prof :pointer) (tag :ostype))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 8 16) 36) prof tag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetScriptProfileDescription" ("ColorSync"))         ((prof :pointer) (name (:pointer (:string 255))) (code (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 62) prof name code)); $ENDC;  Low-level matching functions ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_NCWNewColorWorld" ("ColorSync"))         ((cw (:pointer :pointer)) (src :pointer) (dst :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 20) cw src dst)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWConcatColorWorld" ("ColorSync"))         ((cw (:pointer :pointer)) (profileSet (:pointer :cmconcatprofileset)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 8 16) 21) cw profileSet)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWNewLinkProfile" ("ColorSync"))         ((prof (:pointer :pointer)) (targetLocation (:pointer :cmprofilelocation)) (profileSet (:pointer :cmconcatprofileset)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 51) prof targetLocation profileSet)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWDisposeColorWorld" ("ColorSync"))         ((cw :pointer))   nil   (:stack-trap #xABEE :d0 (+ (ash 4 16) 1) cw)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWMatchColors" ("ColorSync"))         ((cw :pointer) (myColors (:pointer :cmcolor)) (count :signed-long))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 2) cw myColors count)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWCheckColors" ("ColorSync"))         ((cw :pointer) (myColors (:pointer :cmcolor)) (count :signed-long) (result (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 3) cw myColors count result)); $ENDC;  Bitmap matching ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWMatchBitmap" ("ColorSync"))         ((cw :pointer) (bitmap (:pointer :cmbitmap)) (progressProc :pointer) (refCon :pointer) (matchedBitmap (:pointer :cmbitmap)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 44) cw bitmap progressProc refCon matchedBitmap)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWCheckBitmap" ("ColorSync"))         ((cw :pointer) (bitmap (:pointer :cmbitmap)) (progressProc :pointer) (refCon :pointer) (resultBitmap (:pointer :cmbitmap)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 20 16) 45) cw bitmap progressProc refCon resultBitmap)); $ENDC;  Quickdraw-specific matching ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWMatchPixMap" ("ColorSync"))         ((cw :pointer) (myPixMap (:pointer :pixmap)) (progressProc :pointer) (refCon :pointer))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 4) cw myPixMap progressProc refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWCheckPixMap" ("ColorSync"))         ((cw :pointer) (myPixMap (:pointer :pixmap)) (progressProc :pointer) (refCon :pointer) (resultBitMap (:pointer :bitmap)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 20 16) 7) cw myPixMap progressProc refCon resultBitMap)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_NCMBeginMatching" ("ColorSync"))         ((src :pointer) (dst :pointer) (myRef (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 22) src dst myRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMEndMatching" ("ColorSync"))         ((myRef :pointer))   nil   (:stack-trap #xABEE :d0 (+ (ash 4 16) 11) myRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_NCMDrawMatchedPicture" ("ColorSync"))         ((myPicture (:handle :picture)) (dst :pointer) (myRect (:pointer :rect)))   nil   (:stack-trap #xABEE :d0 (+ (ash 12 16) 23) myPicture dst myRect)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMEnableMatchingComment" ("ColorSync"))         ((enableIt :boolean))   nil   (:stack-trap #xABEE :d0 (+ (ash 2 16) 13) enableIt)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_NCMUseProfileComment" ("ColorSync"))         ((prof :pointer) (flags :signed-long))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 8 16) 59) prof flags)); $ENDC;  System Profile access ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetSystemProfile" ("ColorSync"))         ((prof (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 4 16) 24) prof)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMSetSystemProfile" ("ColorSync"))         ((profileFileSpec (:pointer :fsspec)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 4 16) 25) profileFileSpec)); $ENDC;  External Profile Management ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMNewProfileSearch" ("ColorSync"))         ((searchSpec (:pointer :cmsearchrecord)) (refCon :pointer) (count (:pointer :signed-long)) (searchResult (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 39) searchSpec refCon count searchResult)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMUpdateProfileSearch" ("ColorSync"))         ((search :pointer) (refCon :pointer) (count (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 40) search refCon count)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMDisposeProfileSearch" ("ColorSync"))         ((search :pointer))   nil   (:stack-trap #xABEE :d0 (+ (ash 4 16) 41) search)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMSearchGetIndProfile" ("ColorSync"))         ((search :pointer) (index :signed-long) (prof (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 42) search index prof)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMSearchGetIndProfileFileSpec" ("ColorSync"))         ((search :pointer) (index :signed-long) (profileFile (:pointer :fsspec)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 43) search index profileFile)); $ENDC;  Utilities ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetColorSyncFolderSpec" ("ColorSync"))         ((vRefNum :signed-integer) (createFolder :boolean) (foundVRefNum (:pointer :signed-integer)) (foundDirID (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 17) vRefNum createFolder foundVRefNum foundDirID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetCWInfo" ("ColorSync"))         ((cw :pointer) (info (:pointer :cmcwinforecord)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 26) cw info)); $ENDC;  PS-related ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetPS2ColorSpace" ("ColorSync"))         ((srcProf :pointer) (flags :signed-long) (proc :pointer) (refCon :pointer) (preferredCMMnotfound (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 20 16) 46) srcProf flags proc refCon preferredCMMnotfound)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetPS2ColorRenderingIntent" ("ColorSync"))         ((srcProf :pointer) (flags :signed-long) (proc :pointer) (refCon :pointer) (preferredCMMnotfound (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 20 16) 47) srcProf flags proc refCon preferredCMMnotfound)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetPS2ColorRendering" ("ColorSync"))         ((srcProf :pointer) (dstProf :pointer) (flags :signed-long) (proc :pointer) (refCon :pointer) (preferredCMMnotfound (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 24 16) 48) srcProf dstProf flags proc refCon preferredCMMnotfound)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetPS2ColorRenderingVMSize" ("ColorSync"))         ((srcProf :pointer) (dstProf :pointer) (vmSize (:pointer :signed-long)) (preferredCMMnotfound (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 61) srcProf dstProf vmSize preferredCMMnotfound)); $ENDC;  ColorSync 1.0 functions which have parallel 2.0 counterparts ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CWNewColorWorld" ("ColorSync"))         ((cw (:pointer :pointer)) (src (:handle :cmprofile)) (dst (:handle :cmprofile)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 0) cw src dst)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_ConcatenateProfiles" ("ColorSync"))         ((thru (:handle :cmprofile)) (dst (:handle :cmprofile)) (newDst (:pointer (:handle :cmprofile))))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 12) thru dst newDst)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMBeginMatching" ("ColorSync"))         ((src (:handle :cmprofile)) (dst (:handle :cmprofile)) (myRef (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 10) src dst myRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMDrawMatchedPicture" ("ColorSync"))         ((myPicture (:handle :picture)) (dst (:handle :cmprofile)) (myRect (:pointer :rect)))   nil   (:stack-trap #xABEE :d0 (+ (ash 12 16) 9) myPicture dst myRect)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMUseProfileComment" ("ColorSync"))         ((profile (:handle :cmprofile)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 4 16) 8) profile)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetProfileName" ("ColorSync"))         ((myProfile (:handle :cmprofile)) (IStringResult (:pointer :cmistring)))   nil   (:stack-trap #xABEE :d0 (+ (ash 8 16) 14) myProfile IStringResult)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CMGetProfileAdditionalDataOffset" ("ColorSync"))         ((myProfile (:handle :cmprofile)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 4 16) 15) myProfile)); $ENDC;  ProfileResponder functions ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetProfile" ("ColorSync"))         ((deviceType :ostype) (refNum :signed-long) (aProfile (:handle :cmprofile)) (returnedProfile (:pointer (:handle :cmprofile))))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 5) deviceType refNum aProfile returnedProfile)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SetProfile" ("ColorSync"))         ((deviceType :ostype) (refNum :signed-long) (newProfile (:handle :cmprofile)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 6) deviceType refNum newProfile)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SetProfileDescription" ("ColorSync"))         ((deviceType :ostype) (refNum :signed-long) (deviceData :signed-long) (hProfile (:handle :cmprofile)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 16 16) 16) deviceType refNum deviceData hProfile)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetIndexedProfile" ("ColorSync"))         ((deviceType :ostype) (refNum :signed-long) (search (:handle :cmprofilesearchrecord)) (returnProfile (:pointer (:handle :cmprofile))) (index (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 20 16) 18) deviceType refNum search returnProfile index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_DeleteDeviceProfile" ("ColorSync"))         ((deviceType :ostype) (refNum :signed-long) (deleteMe (:handle :cmprofile)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 19) deviceType refNum deleteMe)); $ENDC; $IFC OLDROUTINENAMES (defconstant $kMatchCMMType #$cmMatchCMMType)(defconstant $kMatchApplProfileVersion #$cmMatchApplProfileVersion)(defconstant $kMatchDataType #$cmMatchDataType)(defconstant $kMatchDeviceType #$cmMatchDeviceType)(defconstant $kMatchDeviceManufacturer #$cmMatchDeviceManufacturer)(defconstant $kMatchDeviceModel #$cmMatchDeviceModel)(defconstant $kMatchDeviceAttributes #$cmMatchDeviceAttributes)(defconstant $kMatchFlags #$cmMatchFlags)(defconstant $kMatchOptions #$cmMatchOptions)(defconstant $kMatchWhite #$cmMatchWhite)(defconstant $kMatchBlack #$cmMatchBlack);  types (%define-record :cmykcolor (find-record-descriptor :cmcmykcolor))(def-mactype :cworld (find-mactype ':pointer))(def-mactype :cmgamutresult (find-mactype '(:pointer :signed-long)));  functions ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_EndMatching" ("ColorSync"))         ((myRef :pointer))   nil   (:stack-trap #xABEE :d0 (+ (ash 4 16) 11) myRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_EnableMatching" ("ColorSync"))         ((enableIt :boolean))   nil   (:stack-trap #xABEE :d0 (+ (ash 2 16) 13) enableIt)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetColorSyncFolderSpec" ("ColorSync"))         ((vRefNum :signed-integer) (createFolder :boolean) (foundVRefNum (:pointer :signed-integer)) (foundDirID (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 17) vRefNum createFolder foundVRefNum foundDirID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_BeginMatching" ("ColorSync"))         ((src (:handle :cmprofile)) (dst (:handle :cmprofile)) (myRef (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 12 16) 10) src dst myRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_DrawMatchedPicture" ("ColorSync"))         ((myPicture (:handle :picture)) (dst (:handle :cmprofile)) (myRect (:pointer :rect)))   nil   (:stack-trap #xABEE :d0 (+ (ash 12 16) 9) myPicture dst myRect)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_UseProfile" ("ColorSync"))         ((profile (:handle :cmprofile)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 4 16) 8) profile)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetProfileName" ("ColorSync"))         ((myProfile (:handle :cmprofile)) (IStringResult (:pointer :cmistring)))   nil   (:stack-trap #xABEE :d0 (+ (ash 8 16) 14) myProfile IStringResult)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetProfileAdditionalDataOffset" ("ColorSync"))         ((myProfile (:handle :cmprofile)))   (:stack :signed-long)   (:stack-trap #xABEE :d0 (+ (ash 4 16) 15) myProfile)); $ENDC; $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := CMApplicationIncludes; $ENDC                                         ; __CMAPPLICATION__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'CMApplication)