(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:MacTCP.p"; at Tuesday June 6,1995 2:13:38 pm.; ;  	File:		MacTCP.p;  ;  	Contains:	TCP Manager Interfaces.;  ;  	Version:	Technology:	MacTCP 2.0.6;  				Package:	Universal Interfaces 2.1ß1 in “MPW Prerelease” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __MACTCP__; $SETC __MACTCP__ := 1; $I+; $SETC MacTCPIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __APPLETALK__|#(require-interface 'AppleTalk)#|                                              ; $I AppleTalk.p |#                                             ; $ENDC; 	OSUtils.p													; 		MixedMode.p												; 		Memory.p												; $PUSH; $ALIGN MAC68K; $LibExport+; ; Developer Notes:; 		0. This MacTCP header replaces what used to be defined in the following header files; 			MacTCPCommonTypes.h; 			GetMyIPAddr.h; 			MiscIPPB.h; 			TCPPB.h; 			UDPPB.h ; 			; 			When the various control calls are made to the ip driver, you must set up a ; 			NewRoutineDescriptor for every non-nil completion routine and/or notifyProc parameter.  ; 			Otherwise, the 68K driver code, will not correctly call your routine.; 		1. For ipctlGetAddr Control calls, use NewGetIPIOCompletionProc; 			to set up a GetIPIOCompletionUPP universal procptr to pass as; 			the ioCompletion parameter.; 		2. For the ipctlEchoICMP and ipctlLAPStats Control calls, use ; 			NewIPIOCompletion to set up a IPIOCompletionUPP universal procptr; 			to pass in the ioCompletion field of the parameter block.; 		3. For TCPCreatePB Control calls, use NewTCPNotifyProc to set up a; 			TCPNotifyUPP universal procptr to pass in the notifyProc field; 			of the parameter block; 		4. For all of the TCP Control calls using the TCPiopb parameter block,; 			use NewTCPIOCompletionProc to set up a TCPIOCompletionUPP; 			universal procptr to pass in the ioCompletion field of the paramter; 			block.; 		5. For UDBCreatePB Control calls, use NewUDPNotifyProc to set up a; 			UDPNotifyUPP universal procptr to pass in the notifyProc field; 			of the parameter block; 		6. For all of the UDP Control calls using the UDPiopb parameter block,; 			use NewUDPIOCompletionProc to set up a UDPIOCompletionUPP; 			universal procptr to pass in the ioCompletion field of the paramter; 			block.; 		7. For all calls implementing a notifyProc or ioCompletion routine; 			which was set up using a NewTCPRoutineProc call, do not call; 			DisposeRoutineSDescriptor on the universal procptr until; 			after the completion or notify proc has completed.; ;  MacTCP return Codes in the range -23000 through -23049 (defconstant $inProgress 1)                     ;  I/O in progress (defconstant $ipBadLapErr -23000)               ;  bad network configuration (defconstant $ipBadCnfgErr -23001)              ;  bad IP configuration error (defconstant $ipNoCnfgErr -23002)               ;  missing IP or LAP configuration error (defconstant $ipLoadErr -23003)                 ;  error in MacTCP load (defconstant $ipBadAddr -23004)                 ;  error in getting address (defconstant $connectionClosing -23005)         ;  connection is closing (defconstant $invalidLength -23006)(defconstant $connectionExists -23007)          ;  request conflicts with existing connection (defconstant $connectionDoesntExist -23008)     ;  connection does not exist (defconstant $insufficientResources -23009)     ;  insufficient resources to perform request (defconstant $invalidStreamPtr -23010)(defconstant $streamAlreadyOpen -23011)(defconstant $connectionTerminated -23012)(defconstant $invalidBufPtr -23013)(defconstant $invalidRDS -23014)(defconstant $invalidWDS -23014)(defconstant $openFailed -23015)(defconstant $commandTimeout -23016)(defconstant $duplicateSocket -23017);  Error codes from internal IP functions (defconstant $ipDontFragErr -23032)             ;  Packet too large to send w/o fragmenting (defconstant $ipDestDeadErr -23033)             ;  destination not responding (defconstant $icmpEchoTimeoutErr -23035)        ;  ICMP echo timed-out (defconstant $ipNoFragMemErr -23036)            ;  no memory to send fragmented pkt (defconstant $ipRouteErr -23037)                ;  can't route packet off-net (defconstant $nameSyntaxErr -23041)(defconstant $cacheFault -23042)(defconstant $noResultProc -23043)(defconstant $noNameServer -23044)(defconstant $authNameErr -23045)(defconstant $noAnsErr -23046)(defconstant $dnrErr -23047)(defconstant $outOfMemory -23048)(defconstant $BYTES_16WORD 2)                   ;  bytes per = 16, bit ip word (defconstant $BYTES_32WORD 4)                   ;  bytes per = 32, bit ip word (defconstant $BYTES_64WORD 8)                   ;  bytes per = 64, bit ip word ;  8-bit quantity (def-mactype :b_8 (find-mactype ':unsigned-byte));  16-bit quantity (def-mactype :b_16 (find-mactype ':unsigned-integer));  32-bit quantity (def-mactype :b_32 (find-mactype ':unsigned-long));  IP address is 32-bits (def-mactype :ip_addr (find-mactype ':unsigned-long))(defrecord ip_addrbytes    (:variant       (      (addr :unsigned-long)      )      (      (byte (:array :signed-byte 4 :packed))    ;  UInt8       )      )   )(defrecord wdsEntry    ;;Changing field length from signed-integer to unsigned-word to match C header (pretty-sure)   (length :unsigned-word)                      ;  length of buffer    (Ptr :pointer)                               ;  pointer to buffer    )(defrecord rdsEntry    ;;Changing field length from signed-integer to unsigned-word to match C header (pretty-sure)   (length :unsigned-word)                      ;  length of buffer    (Ptr :pointer)                               ;  pointer to buffer    )(def-mactype :bufferptr (find-mactype ':signed-long))(def-mactype :streamptr (find-mactype ':signed-long))(defconstant $netUnreach 0)(defconstant $hostUnreach 1)(defconstant $protocolUnreach 2)(defconstant $portUnreach 3)(defconstant $fragReqd 4)(defconstant $sourceRouteFailed 5)(defconstant $timeExceeded 6)(defconstant $parmProblem 7)(defconstant $missingOption 8)(defconstant $lastICMPMsgType 32767)(def-mactype :icmpmsgtype (find-mactype ':signed-integer))(def-mactype :ip_port (find-mactype ':unsigned-integer))(defrecord ICMPReport    (StreamPtr :signed-long)   (localHost :unsigned-long)   (localPort :unsigned-integer)   (remoteHost :unsigned-long)   (remotePort :unsigned-integer)   (reportType :signed-integer)   ;;Changing field optionaladdlinfo from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (optionalAddlInfo :unsigned-word)   ;;Changing field optionaladdlinfoptr from signed-long to unsigned-long to match C header (pretty-darn-sure)   (optionalAddlInfoPtr :unsigned-long)   );  csCode to get our IP address (defconstant $ipctlGetAddr 15)(def-mactype :getipiocompletionprocptr (find-mactype ':pointer));  PROCEDURE GetIPIOCompletion(VAR iopb: GetAddrParamBlock); (def-mactype :getipiocompletionupp (find-mactype ':pointer))(defrecord GetAddrParamBlock    (qLink (:pointer :qelem))   (qType :signed-integer)   (ioTrap :signed-integer)   (ioCmdAddr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (ioNamePtr (:pointer (:string 255)))   (ioVRefNum :signed-integer)   (ioCRefNum :signed-integer)   (csCode :signed-integer)                     ;  standard I/O header    (ourAddress :unsigned-long)                  ;  our IP address    (ourNetMask :signed-long)                    ;  our IP net mask    );  control codes (defconstant $ipctlEchoICMP 17)                 ;  send icmp echo (defconstant $ipctlLAPStats 19)                 ;  get lap stats (def-mactype :ipiocompletionprocptr (find-mactype ':pointer));  PROCEDURE IPIOCompletion(VAR iopb: ICMPParamBlock); (def-mactype :ipiocompletionupp (find-mactype ':pointer))(defrecord ICMPParamBlock    (qLink (:pointer :qelem))   (qType :signed-integer)   (ioTrap :signed-integer)   (ioCmdAddr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (ioNamePtr (:pointer (:string 255)))   (ioVRefNum :signed-integer)   (ioCRefNum :signed-integer)   (csCode :signed-integer)                     ;  standard I/O header    (params (:array :signed-integer 11)); Warning: Field icmpechoinfo is a recursive record   (icmpEchoInfo (defrecord icmpEchoInfo      ;;Changing field echorequestout from signed-long to unsigned-long to match C header (pretty-darn-sure)      (echoRequestOut :unsigned-long)           ;  time in ticks of when the echo request went out       ;;Changing field echoreplyin from signed-long to unsigned-long to match C header (pretty-darn-sure)      (echoReplyIn :unsigned-long)              ;  time in ticks of when the reply was received       (echoedData :rdsentry)                    ;  data received in responce       (options :pointer)      ;;Changing field userdataptr from signed-long to unsigned-long to match C header (pretty-darn-sure)      (userDataPtr :unsigned-long)      )   )   )(def-mactype :icmpechonotifyprocptr (find-mactype ':pointer));  PROCEDURE ICMPEchoNotify(VAR iopb: ICMPParamBlock); (def-mactype :icmpechonotifyupp (find-mactype ':pointer))(defrecord IPParamBlock    (qLink (:pointer :qelem))   (qType :signed-integer)   (ioTrap :signed-integer)   (ioCmdAddr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (ioNamePtr (:pointer (:string 255)))   (ioVRefNum :signed-integer)   (ioCRefNum :signed-integer)   (csCode :signed-integer)                     ;  standard I/O header    (:variant       (      (dest :unsigned-long)                     ;  echo to IP address       (data :wdsentry)      (timeout :signed-integer)      (options :pointer)      ;;Changing field optlength from signed-integer to unsigned-word to match C header (pretty-darn-sure)      (optLength :unsigned-word)      (icmpCompletion :pointer)      ;;Changing field userdataptr from signed-long to unsigned-long to match C header (pretty-darn-sure)      (userDataPtr :unsigned-long)      )      (      (lapStatsPtr (:pointer :lapstats))      )      )   )(defrecord LAPStatsAddrXlation    (:variant       (      (arp_table (:pointer :arp_entry))      )      (      (nbp_table (:pointer :nbp_entry))      )      )   )(defrecord LAPStats    (ifType :signed-integer)   (ifString (:pointer :character))   (ifMaxMTU :signed-integer)   (ifSpeed :signed-long)   (ifPhyAddrLength :signed-integer)   (ifPhysicalAddress (:pointer :character))   (AddrXlation :lapstatsaddrxlation)   (slotNumber :signed-integer)   )(defrecord nbp_entry    (ip_address :unsigned-long)                  ;  IP address    (at_address :addrblock)                      ;  matching AppleTalk address    (gateway :boolean)                           ;  TRUE if entry for a gateway    (valid :boolean)                             ;  TRUE if LAP address is valid    (probing :boolean)                           ;  TRUE if NBP lookup pending    (afiller :signed-byte)                       ;  Filler for proper byte alignment	    (age :signed-long)                           ;  ticks since cache entry verified    (access :signed-long)                        ;  ticks since last access    (filler (:array :signed-byte 116))           ;  for internal use only !!!    )(defrecord Enet_addr    (en_hi :unsigned-integer)   (en_lo :unsigned-long)   )(defrecord arp_entry    (age :signed-integer)                        ;  cache aging field    (protocol :unsigned-integer)                 ;  Protocol type    (ip_address :unsigned-long)                  ;  IP address    (en_address :enet_addr)                      ;  matching Ethernet address    );  number of ARP table entries (defconstant $ARP_TABLE_SIZE 20)(defconstant $NBP_TABLE_SIZE 20)                ;  number of NBP table entries (defconstant $NBP_MAX_NAME_SIZE 28);  Command codes (defconstant $TCPCreate 30)(defconstant $TCPPassiveOpen 31)(defconstant $TCPActiveOpen 32)(defconstant $TCPSend 34)(defconstant $TCPNoCopyRcv 35)(defconstant $TCPRcvBfrReturn 36)(defconstant $TCPRcv 37)(defconstant $TCPClose 38)(defconstant $TCPAbort 39)(defconstant $TCPStatus 40)(defconstant $TCPExtendedStat 41)(defconstant $TCPRelease 42)(defconstant $TCPGlobalInfo 43)(defconstant $TCPCtlMax 49)(defconstant $TCPClosing 1)(defconstant $TCPULPTimeout 2)(defconstant $TCPTerminate 3)(defconstant $TCPDataArrival 4)(defconstant $TCPUrgent 5)(defconstant $TCPICMPReceived 6)(defconstant $lastEvent 32767)(def-mactype :tcpeventcode (find-mactype ':signed-integer))(defconstant $TCPRemoteAbort 2)(defconstant $TCPNetworkFailure 3)(defconstant $TCPSecPrecMismatch 4)(defconstant $TCPULPTimeoutTerminate 5)(defconstant $TCPULPAbort 6)(defconstant $TCPULPClose 7)(defconstant $TCPServiceError 8)(defconstant $lastReason 32767)(def-mactype :tcpterminationreason (find-mactype ':signed-integer))(def-mactype :tcpnotifyprocptr (find-mactype ':pointer));  PROCEDURE TCPNotify(tcpStream: StreamPtr; eventCode: INTEGER; userDataPtr: Ptr; terminReason: INTEGER; VAR icmpMsg: ICMPReport); (def-mactype :tcpnotifyupp (find-mactype ':pointer))(def-mactype :tcp_port (find-mactype ':signed-integer));  ValidityFlags (defconstant $timeoutValue #x80)(defconstant $timeoutAction #x40)(defconstant $typeOfService #x20)(defconstant $precedence #x10);  TOSFlags (defconstant $lowDelay #x1)(defconstant $throughPut #x2)(defconstant $reliability #x4)(defrecord TCPCreatePB    (rcvBuff :pointer)   ;;Changing field rcvbufflen from signed-long to unsigned-long to match C header (pretty-sure)   (rcvBuffLen :unsigned-long)   (notifyProc :pointer)   (userDataPtr :pointer)   )(defrecord TCPOpenPB    (ulpTimeoutValue :signed-byte)   (ulpTimeoutAction :signed-byte)   (validityFlags :signed-byte)   (commandTimeoutValue :signed-byte)   (remoteHost :unsigned-long)   (remotePort :signed-integer)   (localHost :unsigned-long)   ;;Changing field localport from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (localPort :unsigned-word)   (tosFlags :signed-byte)   (precedence :signed-byte)   (dontFrag :boolean)   (timeToLive :signed-byte)   (security :signed-byte)   (optionCnt :signed-byte)   (options (:array :signed-byte 40))   (userDataPtr :pointer)   )(defrecord TCPSendPB    (ulpTimeoutValue :signed-byte)   (ulpTimeoutAction :signed-byte)   (validityFlags :signed-byte)   (pushFlag :boolean)   (urgentFlag :boolean)   (filler :signed-byte)                        ;  Filler for proper byte alignment	    (wdsPtr :pointer)   ;;Changing field sendfree from signed-long to unsigned-long to match C header (pretty-darn-sure)   (sendFree :unsigned-long)   ;;Changing field sendlength from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (sendLength :unsigned-word)   (userDataPtr :pointer)   );  for receive and return rcv buff calls ;    Note: the filler in the following structure is in a different location than ;          that specified in the Programmer's Guide.  (defrecord TCPReceivePB    (commandTimeoutValue :signed-byte)   (markFlag :boolean)   (urgentFlag :boolean)   (filler :signed-byte)                        ;  Filler for proper byte alignment     (rcvBuff :pointer)   ;;Changing field rcvbufflen from signed-integer to unsigned-word to match C header (pretty-sure)   (rcvBuffLen :unsigned-word)   (rdsPtr :pointer)   ;;Changing field rdslength from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (rdsLength :unsigned-word)   ;;Changing field secondtimestamp from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (secondTimeStamp :unsigned-word)   (userDataPtr :pointer)   )(defrecord TCPClosePB    (ulpTimeoutValue :signed-byte)   (ulpTimeoutAction :signed-byte)   (validityFlags :signed-byte)   (filler :signed-byte)                        ;  Filler for proper byte alignment	    (userDataPtr :pointer)   )(defrecord HistoBucket    ;;Changing field value from signed-integer to unsigned-word to match C header (pretty-sure)   (value :unsigned-word)   ;;Changing field counter from signed-long to unsigned-long to match C header (pretty-sure)   (counter :unsigned-long)   )(defconstant $NumOfHistoBuckets 7)(defrecord TCPConnectionStats    ;;Changing field datapktsrcvd from signed-long to unsigned-long to match C header (pretty-darn-sure)   (dataPktsRcvd :unsigned-long)   ;;Changing field datapktssent from signed-long to unsigned-long to match C header (pretty-darn-sure)   (dataPktsSent :unsigned-long)   ;;Changing field datapktsresent from signed-long to unsigned-long to match C header (pretty-darn-sure)   (dataPktsResent :unsigned-long)   ;;Changing field bytesrcvd from signed-long to unsigned-long to match C header (pretty-darn-sure)   (bytesRcvd :unsigned-long)   ;;Changing field bytesrcvddup from signed-long to unsigned-long to match C header (pretty-darn-sure)   (bytesRcvdDup :unsigned-long)   ;;Changing field bytesrcvdpastwindow from signed-long to unsigned-long to match C header (pretty-darn-sure)   (bytesRcvdPastWindow :unsigned-long)   ;;Changing field bytessent from signed-long to unsigned-long to match C header (pretty-darn-sure)   (bytesSent :unsigned-long)   ;;Changing field bytesresent from signed-long to unsigned-long to match C header (pretty-darn-sure)   (bytesResent :unsigned-long)   ;;Changing field numhistobuckets from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (numHistoBuckets :unsigned-word)   (sentSizeHisto (:array :histobucket (- (- #$NumOfHistoBuckets 1) 0 -1)))   ;;Changing field lastrtt from signed-integer to unsigned-word to match C header (pretty-sure)   (lastRTT :unsigned-word)   ;;Changing field tmrsrtt from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (tmrSRTT :unsigned-word)   ;;Changing field rttvariance from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (rttVariance :unsigned-word)   ;;Changing field tmrrto from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (tmrRTO :unsigned-word)   (sendTries :signed-byte)   (sourchQuenchRcvd :signed-byte)   )(defrecord TCPStatusPB    (ulpTimeoutValue :signed-byte)   (ulpTimeoutAction :signed-byte)   (unused :signed-long)   (remoteHost :unsigned-long)   (remotePort :signed-integer)   (localHost :unsigned-long)   ;;Changing field localport from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (localPort :unsigned-word)   (tosFlags :signed-byte)   (precedence :signed-byte)   (connectionState :signed-byte)   (filler :signed-byte)                        ;  Filler for proper byte alignment	    ;;Changing field sendwindow from signed-integer to unsigned-word to match C header (pretty-sure)   (sendWindow :unsigned-word)   ;;Changing field rcvwindow from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (rcvWindow :unsigned-word)   ;;Changing field amtunackeddata from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (amtUnackedData :unsigned-word)   ;;Changing field amtunreaddata from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (amtUnreadData :unsigned-word)   (securityLevelPtr :pointer)   ;;Changing field sendunacked from signed-long to unsigned-long to match C header (pretty-darn-sure)   (sendUnacked :unsigned-long)   ;;Changing field sendnext from signed-long to unsigned-long to match C header (pretty-darn-sure)   (sendNext :unsigned-long)   ;;Changing field congestionwindow from signed-long to unsigned-long to match C header (pretty-darn-sure)   (congestionWindow :unsigned-long)   ;;Changing field rcvnext from signed-long to unsigned-long to match C header (pretty-darn-sure)   (rcvNext :unsigned-long)   ;;Changing field srtt from signed-long to unsigned-long to match C header (pretty-darn-sure)   (srtt :unsigned-long)   ;;Changing field lastrtt from signed-long to unsigned-long to match C header (pretty-sure)   (lastRTT :unsigned-long)   ;;Changing field sendmaxsegsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (sendMaxSegSize :unsigned-long)   (connStatPtr (:pointer :tcpconnectionstats))   (userDataPtr :pointer)   )(defrecord TCPAbortPB    (userDataPtr :pointer)   )(defrecord TCPParam    ;;Changing field tcprtoa from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpRtoA :unsigned-long)   ;;Changing field tcprtomin from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpRtoMin :unsigned-long)   ;;Changing field tcprtomax from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpRtoMax :unsigned-long)   ;;Changing field tcpmaxsegsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpMaxSegSize :unsigned-long)   ;;Changing field tcpmaxconn from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpMaxConn :unsigned-long)   ;;Changing field tcpmaxwindow from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpMaxWindow :unsigned-long)   )(defrecord TCPStats    ;;Changing field tcpconnattempts from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpConnAttempts :unsigned-long)   ;;Changing field tcpconnopened from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpConnOpened :unsigned-long)   ;;Changing field tcpconnaccepted from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpConnAccepted :unsigned-long)   ;;Changing field tcpconnclosed from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpConnClosed :unsigned-long)   ;;Changing field tcpconnaborted from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpConnAborted :unsigned-long)   ;;Changing field tcpoctetsin from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpOctetsIn :unsigned-long)   ;;Changing field tcpoctetsout from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpOctetsOut :unsigned-long)   ;;Changing field tcpoctetsindup from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpOctetsInDup :unsigned-long)   ;;Changing field tcpoctetsretrans from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpOctetsRetrans :unsigned-long)   ;;Changing field tcpinputpkts from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpInputPkts :unsigned-long)   ;;Changing field tcpoutputpkts from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpOutputPkts :unsigned-long)   ;;Changing field tcpduppkts from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpDupPkts :unsigned-long)   ;;Changing field tcpretranspkts from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tcpRetransPkts :unsigned-long)   )(def-mactype :streampptr (find-mactype '(:pointer :signed-long)))(defrecord TCPGlobalInfoPB    (tcpParamPtr (:pointer :tcpparam))   (tcpStatsPtr (:pointer :tcpstats))   (tcpCDBTable (:array (:pointer :signed-long) 1))   (userDataPtr :pointer)   ;;Changing field maxtcpconnections from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (maxTCPConnections :unsigned-word)   )(def-mactype :tcpiocompletionprocptr (find-mactype ':pointer));  PROCEDURE TCPIOCompletion(VAR iopb: TCPiopb); (def-mactype :tcpiocompletionupp (find-mactype ':pointer))(defrecord TCPiopb    (fill12 (:array :signed-byte 12))   (ioCompletion :pointer)   (ioResult :signed-integer)   (ioNamePtr :pointer)   (ioVRefNum :signed-integer)   (ioCRefNum :signed-integer)   (csCode :signed-integer)   (tcpStream :signed-long)   (:variant       (      (create :tcpcreatepb)      )      (      (open :tcpopenpb)      )      (      (send :tcpsendpb)      )      (      (receive :tcpreceivepb)      )      (      (close :tcpclosepb)      )      (      (abort :tcpabortpb)      )      (      (status :tcpstatuspb)      )      (      (globalInfo :tcpglobalinfopb)      )      )   )(defconstant $UDPCreate 20)(defconstant $UDPRead 21)(defconstant $UDPBfrReturn 22)(defconstant $UDPWrite 23)(defconstant $UDPRelease 24)(defconstant $UDPMaxMTUSize 25)(defconstant $UDPStatus 26)(defconstant $UDPMultiCreate 27)(defconstant $UDPMultiSend 28)(defconstant $UDPMultiRead 29)(defconstant $UDPCtlMax 29)(defconstant $UDPDataArrival 1)(defconstant $UDPICMPReceived 2)(defconstant $lastUDPEvent 32767)(def-mactype :udpeventcode (find-mactype ':signed-integer))(def-mactype :udpnotifyprocptr (find-mactype ':pointer));  PROCEDURE UDPNotify(udpStream: StreamPtr; eventCode: INTEGER; userDataPtr: Ptr; VAR icmpMsg: ICMPReport); (def-mactype :udpnotifyupp (find-mactype ':pointer))(def-mactype :udp_port (find-mactype ':signed-integer));  for create and release calls (defrecord UDPCreatePB    (rcvBuff :pointer)   ;;Changing field rcvbufflen from signed-long to unsigned-long to match C header (pretty-sure)   (rcvBuffLen :unsigned-long)   (notifyProc :pointer)   ;;Changing field localport from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (localPort :unsigned-word)   (userDataPtr :pointer)   (endingPort :signed-integer)   )(defrecord UDPSendPB    (reserved :signed-integer)   (remoteHost :unsigned-long)   (remotePort :signed-integer)   (wdsPtr :pointer)   (checkSum :boolean)   (filler :signed-byte)                        ;  Filler for proper byte alignment	    ;;Changing field sendlength from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (sendLength :unsigned-word)   (userDataPtr :pointer)   ;;Changing field localport from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (localPort :unsigned-word)   );  for receive and buffer return calls (defrecord UDPReceivePB    (timeOut :signed-integer)   (remoteHost :unsigned-long)   (remotePort :signed-integer)   (rcvBuff :pointer)   ;;Changing field rcvbufflen from signed-integer to unsigned-word to match C header (pretty-sure)   (rcvBuffLen :unsigned-word)   ;;Changing field secondtimestamp from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (secondTimeStamp :unsigned-word)   (userDataPtr :pointer)   (destHost :unsigned-long)                    ;  only for use with multi rcv    (destPort :signed-integer)                   ;  only for use with multi rcv    )(defrecord UDPMTUPB    ;;Changing field mtusize from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (mtuSize :unsigned-word)   (remoteHost :unsigned-long)   (userDataPtr :pointer)   )(def-mactype :udpiocompletionprocptr (find-mactype ':pointer));  PROCEDURE UDPIOCompletion(VAR iopb: UDPiopb); (def-mactype :udpiocompletionupp (find-mactype ':pointer))(defrecord UDPiopb    (fill12 (:array :signed-byte 12))   (ioCompletion :pointer)   (ioResult :signed-integer)   (ioNamePtr :pointer)   (ioVRefNum :signed-integer)   (ioCRefNum :signed-integer)   (csCode :signed-integer)   (udpStream :signed-long)   (:variant       (      (create :udpcreatepb)      )      (      (send :udpsendpb)      )      (      (receive :udpreceivepb)      )      (      (mtu :udpmtupb)      )      )   )(defconstant $uppGetIPIOCompletionProcInfo #xC1);  PROCEDURE (4 byte param); (defconstant $uppIPIOCompletionProcInfo #xC1)   ;  PROCEDURE (4 byte param); (defconstant $uppICMPEchoNotifyProcInfo #xC0)   ;  PROCEDURE (4 byte param); (defconstant $uppTCPNotifyProcInfo #xEEC0)      ;  PROCEDURE (4 byte param, 2 byte param, 4 byte param, 2 byte param, 4 byte param); (defconstant $uppTCPIOCompletionProcInfo #xC1)  ;  PROCEDURE (4 byte param); (defconstant $uppUDPNotifyProcInfo #x3EC0)      ;  PROCEDURE (4 byte param, 2 byte param, 4 byte param, 4 byte param); (defconstant $uppUDPIOCompletionProcInfo #xC1)  ;  PROCEDURE (4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewGetIPIOCompletionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewIPIOCompletionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewICMPEchoNotifyProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewTCPNotifyProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewTCPIOCompletionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewUDPNotifyProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewUDPIOCompletionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallGetIPIOCompletionProc" ((iopb (:pointer :getaddrparamblock)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallIPIOCompletionProc" ((iopb (:pointer :icmpparamblock)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallICMPEchoNotifyProc" ((iopb (:pointer :icmpparamblock)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallTCPNotifyProc" ((tcpStream :signed-long) (eventCode :signed-integer) (userDataPtr :pointer) (terminReason :signed-integer) (icmpMsg (:pointer :icmpreport)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallTCPIOCompletionProc" ((iopb (:pointer :tcpiopb)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallUDPNotifyProc" ((udpStream :signed-long) (eventCode :signed-integer) (userDataPtr :pointer) (icmpMsg (:pointer :icmpreport)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallUDPIOCompletionProc" ((iopb (:pointer :udpiopb)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := MacTCPIncludes; $ENDC                                         ; __MACTCP__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'MacTCP)