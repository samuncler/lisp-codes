(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Video.p"; at Tuesday June 6,1995 2:08:02 pm.; ;  	File:		Video.p;  ;  	Contains:	Video Driver Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __VIDEO__; $SETC __VIDEO__ := 1; $I+; $SETC VideoIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	Types.p														; 		ConditionalMacros.p										; 	MixedMode.p													; 	QuickdrawText.p												; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $mBaseOffset 1)                    ; Id of mBaseOffset.(defconstant $mRowBytes 2)                      ; Video sResource parameter Id's (defconstant $mBounds 3)                        ; Video sResource parameter Id's (defconstant $mVersion 4)                       ; Video sResource parameter Id's (defconstant $mHRes 5)                          ; Video sResource parameter Id's (defconstant $mVRes 6)                          ; Video sResource parameter Id's (defconstant $mPixelType 7)                     ; Video sResource parameter Id's (defconstant $mPixelSize 8)                     ; Video sResource parameter Id's (defconstant $mCmpCount 9)                      ; Video sResource parameter Id's (defconstant $mCmpSize 10)                      ; Video sResource parameter Id's (defconstant $mPlaneBytes 11)                   ; Video sResource parameter Id's (defconstant $mVertRefRate 14)                  ; Video sResource parameter Id's (defconstant $mVidParams 1)                     ; Video parameter block id.(defconstant $mTable 2)                         ; Offset to the table.(defconstant $mPageCnt 3)                       ; Number of pages(defconstant $mDevType 4)                       ; Device Type(defconstant $oneBitMode 128)                   ; Id of OneBitMode Parameter list.(defconstant $twoBitMode 129)                   ; Id of TwoBitMode Parameter list.(defconstant $fourBitMode 130)                  ; Id of FourBitMode Parameter list.(defconstant $eightBitMode 131)                 ; Id of EightBitMode Parameter list.(defconstant $sixteenBitMode 132)               ; Id of SixteenBitMode Parameter list.(defconstant $thirtyTwoBitMode 133)             ; Id of ThirtyTwoBitMode Parameter list.(defconstant $firstVidMode 128)                 ; The new, better way to do the above. (defconstant $secondVidMode 129)                ;  QuickDraw only supports six video (defconstant $thirdVidMode 130)                 ;  at this time.      (defconstant $fourthVidMode 131)(defconstant $fifthVidMode 132)(defconstant $sixthVidMode 133)(defconstant $spGammaDir 64)(defconstant $spVidNamesDir 65);  csTimingFormat values in VDTimingInfo ;  look in the declaration rom for timing info (defconstant $kDeclROMtables :|decl|);  Timing mode constants for Display Manager MultiMode support; 	Corresponding	.h equates are in Video.h; 					.a equates are in Video.a; 					.r equates are in DepVideoEqu.r; (defconstant $timingInvalid 0)                  ;  Unknown timing… force user to confirm.(defconstant $timingApple12 130)                ;   512x384 (60 Hz) Rubik timing.(defconstant $timingApple12x 135)               ;   560x384 (60 Hz) Rubik-560 timing.(defconstant $timingApple13 140)                ;   640x480 (67 Hz) HR timing.(defconstant $timingApple13x 145)               ;   640x400 (67 Hz) HR-400 timing.(defconstant $timingAppleVGA 150)               ;   640x480 (60 Hz) VGA timing.(defconstant $timingApple15 160)                ;   640x870 (75 Hz) FPD timing.(defconstant $timingApple15x 165)               ;   640x818 (75 Hz) FPD-818 timing.(defconstant $timingApple16 170)                ;   832x624 (75 Hz) GoldFish timing.(defconstant $timingAppleSVGA 180)              ;   800x600 (56 Hz) SVGA timing.(defconstant $timingApple1Ka 190)               ;  1024x768 (60 Hz) VESA 1K-60Hz timing.(defconstant $timingApple1Kb 200)               ;  1024x768 (70 Hz) VESA 1K-70Hz timing.(defconstant $timingApple19 210)                ;  1024x768 (75 Hz) Apple 19" RGB.(defconstant $timingApple21 220)                ;  1152x870 (75 Hz) Apple 21" RGB.(defconstant $timingAppleNTSC_ST 230)           ;   512x384 (60 Hz, interlaced, non-convolved).(defconstant $timingAppleNTSC_FF 232)           ;   640x480 (60 Hz, interlaced, non-convolved).(defconstant $timingAppleNTSC_STconv 234)       ;   512x384 (60 Hz, interlaced, convolved).(defconstant $timingAppleNTSC_FFconv 236)       ;   640x480 (60 Hz, interlaced, convolved).(defconstant $timingApplePAL_ST 238)            ;   640x480 (50 Hz, interlaced, non-convolved).(defconstant $timingApplePAL_FF 240)            ;   768x576 (50 Hz, interlaced, non-convolved).(defconstant $timingApplePAL_STconv 242)        ;   640x480 (50 Hz, interlaced, non-convolved).(defconstant $timingApplePAL_FFconv 244)        ;   768x576 (50 Hz, interlaced, non-convolved).;  csConnectFlags values in VDDisplayConnectInfo (defconstant $kAllModesValid 0)                 ;  All modes not trimmed by primary init are good close enough to try (defconstant $kAllModesSafe 1)                  ;  All modes not trimmed by primary init are know to be safe (defconstant $kReportsTagging 2)                ;  Can detect tagged displays (to identify smart monitors) (defconstant $kHasDirectConnection 3)           ;  True implies that driver can talk directly to device (e.g. serial data link via sense lines) (defconstant $kIsMonoDev 4)                     ;  Says whether there’s an RGB (0) or Monochrome (1) connection. (defconstant $kUncertainConnection 5)           ;  There may not be a display (no sense lines?). (defconstant $kTaggingInfoNonStandard 6)        ;  Set when csConnectTaggedType/csConnectTaggedData are non-standard (i.e., not the Apple CRT sense codes). (defconstant $kReportsDDCConnection 7)          ;  Card can do ddc (set kHasDirectConnect && kHasDDCConnect if you actually found a ddc display). (defconstant $kHasDDCConnection 8)              ;  Card has ddc connect now. ;  csDisplayType values in VDDisplayConnectInfo (defconstant $kUnknownConnect 1)                ;  Not sure how we’ll use this, but seems like a good idea. (defconstant $kPanelConnect 2)                  ;  For use with fixed-in-place LCD panels. (defconstant $kPanelTFTConnect 2)               ;  Alias for kPanelConnect (defconstant $kFixedModeCRTConnect 3)           ;   For use with fixed-mode (i.e., very limited range) displays. (defconstant $kMultiModeCRT1Connect 4)          ;  320x200 maybe, 12" maybe, 13" (default), 16" certain, 19" maybe, 21" maybe (defconstant $kMultiModeCRT2Connect 5)          ;  320x200 maybe, 12" maybe, 13" certain, 16" (default), 19" certain, 21" maybe (defconstant $kMultiModeCRT3Connect 6)          ;  320x200 maybe, 12" maybe, 13" certain, 16" certain, 19" default, 21" certain (defconstant $kMultiModeCRT4Connect 7)          ;  Expansion to large multi mode (not yet used) (defconstant $kModelessConnect 8)               ;  Expansion to modeless model (not yet used) (defconstant $kFullPageConnect 9)               ;  640x818 (to get 8bpp in 512K case) and 640x870 (these two only) (defconstant $kVGAConnect 10)                   ;  640x480 VGA default -- question everything else (defconstant $kNTSCConnect 11)                  ;  NTSC ST (default), FF, STconv, FFconv (defconstant $kPALConnect 12)                   ;  PAL ST (default), FF, STconv, FFconv (defconstant $kHRConnect 13)                    ;  640x400 (to get 8bpp in 256K case) and 640x480 (these two only) (defconstant $kPanelFSTNConnect 14)             ;  For use with fixed-in-place LCD FSTN (aka “Supertwist”) panels ;  csTimingFlags values in VDTimingInfoRec (defconstant $kModeValid 0)                     ;  Says that this mode should NOT be trimmed. (defconstant $kModeSafe 1)                      ;  This mode does not need confirmation (defconstant $kModeDefault 2)                   ;  This is the default mode for this type of connection (defconstant $kModeShowNow 3)                   ;  This mode should always be shown (even though it may require a confirm) (defconstant $kModeNotResize 4)                 ;  This mode should not be used to resize the display (eg. mode selects a different connector on card) (defconstant $kModeRequiresPan 5)               ;  This mode has more pixels than are actually displayed ;  Control Codes (defconstant $cscReset 0)(defconstant $cscKillIO 1)(defconstant $cscSetMode 2)(defconstant $cscSetEntries 3)(defconstant $cscSetGamma 4)(defconstant $cscGrayPage 5)(defconstant $cscGrayScreen 5)(defconstant $cscSetGray 6)(defconstant $cscSetInterrupt 7)(defconstant $cscDirectSetEntries 8)(defconstant $cscSetDefaultMode 9)(defconstant $cscSwitchMode 10)(defconstant $cscSetSync 11)(defconstant $cscSavePreferredConfiguration 16)(defconstant $cscSetHardwareCursor 22)(defconstant $cscDrawHardwareCursor 23)(defconstant $cscSetConvolution 24)(defconstant $cscUnusedCall 127)                ;  This call used to expend the scrn resource.  Its imbedded data contains more control info ;  Status Codes (defconstant $cscGetMode 2)(defconstant $cscGetEntries 3)(defconstant $cscGetPageCnt 4)(defconstant $cscGetPages 4)                    ;  This is what C&D 2 calls it. (defconstant $cscGetPageBase 5)(defconstant $cscGetBaseAddr 5)                 ;  This is what C&D 2 calls it. (defconstant $cscGetGray 6)(defconstant $cscGetInterrupt 7)(defconstant $cscGetGamma 8)(defconstant $cscGetDefaultMode 9)(defconstant $cscGetCurMode 10)(defconstant $cscGetSync 11)(defconstant $cscGetConnection 12)              ;  Return information about the connection to the display (defconstant $cscGetModeTiming 13)              ;  Return timing info for a mode (defconstant $cscGetModeBaseAddress 14)         ;  Return base address information about a particular mode (defconstant $cscGetScanProc 15)                ;  QuickTime scan chasing routine (defconstant $cscGetPreferredConfiguration 16)(defconstant $cscGetNextResolution 17)(defconstant $cscGetVideoParameters 18)(defconstant $cscGetGammaList 19)               ;  Obsolete (defconstant $cscGetGammaInfoList 20)(defconstant $cscRetrieveGammaTable 21)(defconstant $cscSupportsHardwareCursor 22)(defconstant $cscGetConvolution 24);  Bit definitions for the Get/Set Sync call(defconstant $kDisableHorizontalSyncBit 0)(defconstant $kDisableVerticalSyncBit 1)(defconstant $kDisableCompositeSyncBit 2)(defconstant $kEnableSyncOnBlue 3)(defconstant $kEnableSyncOnGreen 4)(defconstant $kEnableSyncOnRed 5)(defconstant $kNoSeparateSyncControlBit 6)(defconstant $kHorizontalSyncMask #x1)(defconstant $kVerticalSyncMask #x2)(defconstant $kCompositeSyncMask #x4)(defconstant $kDPMSSyncMask #x7)(defconstant $kSyncOnBlueMask #x8)(defconstant $kSyncOnGreenMask #x10)(defconstant $kSyncOnRedMask #x20)(defconstant $kSyncOnMask #x38); 	Power Mode constants for translating DPMS modes to Get/SetSync calls.	(defconstant $kDPMSSyncOn 0)(defconstant $kDPMSSyncStandby 1)(defconstant $kDPMSSyncSuspend 2)(defconstant $kDPMSSyncOff 7);  Bit definitions for the Get/Set Convolution call(defconstant $kConvolved 0)(defconstant $kLiveVideoPassThru 1)(defconstant $kConvolvedMask #x1)(defconstant $kLiveVideoPassThruMask #x2)(defrecord VPBlock    (vpBaseOffset :signed-long)                  ; Offset to page zero of video RAM (From minorBaseOS).   (vpRowBytes :signed-integer)                 ; Width of each row of video memory.   (vpBounds :rect)                             ; BoundsRect for the video display (gives dimensions).   (vpVersion :signed-integer)                  ; PixelMap version number.   (vpPackType :signed-integer)   (vpPackSize :signed-long)   (vpHRes :signed-long)                        ; Horizontal resolution of the device (pixels per inch).   (vpVRes :signed-long)                        ; Vertical resolution of the device (pixels per inch).   (vpPixelType :signed-integer)                ; Defines the pixel type.   (vpPixelSize :signed-integer)                ; Number of bits in pixel.   (vpCmpCount :signed-integer)                 ; Number of components in pixel.   (vpCmpSize :signed-integer)                  ; Number of bits per component   (vpPlaneBytes :signed-long)                  ; Offset from one plane to the next.   )(def-mactype :vpblockptr (find-mactype '(:pointer :vpblock)))(defrecord VDEntryRecord    (csTable :pointer)                           ; (long) pointer to color table entry=value, r,g,b:INTEGER   )(def-mactype :vdentrecptr (find-mactype '(:pointer :vdentryrecord)));  Parm block for SetGray control call (defrecord VDGrayRecord    (csMode :boolean)                            ; Same as GDDevType value (0=mono, 1=color)   )(def-mactype :vdgrayptr (find-mactype '(:pointer :vdgrayrecord)));  Parm block for SetEntries control call (defrecord VDSetEntryRecord    (csTable (:pointer :colorspec))              ; Pointer to an array of color specs   (csStart :signed-integer)                    ; Which spec in array to start with, or -1   (csCount :signed-integer)                    ; Number of color spec entries to set   )(def-mactype :vdsetentryptr (find-mactype '(:pointer :vdsetentryrecord)));  Parm block for SetGamma control call (defrecord VDGammaRecord    (csGTable :pointer)                          ; pointer to gamma table   )(def-mactype :vdgamrecptr (find-mactype '(:pointer :vdgammarecord)))(defrecord VDBaseAddressInfoRec    (csDevData :signed-long)                     ;  LONGINT - (long) timing mode    (csDevBase :signed-long)                     ;  LONGINT - (long) base address of the mode    (csModeReserved :signed-integer)             ;  INTEGER - (short) will some day be the depth    (csModeBase :signed-long)                    ;  LONGINT - (long) reserved    )(def-mactype :vdbaseaddressinfoptr (find-mactype '(:pointer :vdbaseaddressinforec)))(defrecord VDSwitchInfoRec    ;;Changing field csmode from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (csMode :unsigned-word)                      ; (word) mode depth   ;;Changing field csdata from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csData :unsigned-long)                      ; (long) functional sResource of mode   ;;Changing field cspage from signed-integer to unsigned-word to match C header (pretty-sure)   (csPage :unsigned-word)                      ; (word) page to switch in   (csBaseAddr :pointer)                        ; (long) base address of page (return value)   ;;Changing field csreserved from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csReserved :unsigned-long)                  ; (long) Reserved (set to 0)    )(def-mactype :vdswitchinfoptr (find-mactype '(:pointer :vdswitchinforec)))(defrecord VDTimingInfoRec    ;;Changing field cstimingmode from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csTimingMode :unsigned-long)                ;  LONGINT - (long) timing mode (a la InitGDevice)    ;;Changing field cstimingreserved from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csTimingReserved :unsigned-long)            ;  LONGINT - (long) reserved    ;;Changing field cstimingformat from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csTimingFormat :unsigned-long)              ;  LONGINT - (long) what format is the timing info    ;;Changing field cstimingdata from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csTimingData :unsigned-long)                ;  LONGINT - (long) data supplied by driver    ;;Changing field cstimingflags from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csTimingFlags :unsigned-long)               ;  LONGINT - (long) mode within device    )(def-mactype :vdtiminginfoptr (find-mactype '(:pointer :vdtiminginforec)))(defrecord VDDisplayConnectInfoRec    ;;Changing field csdisplaytype from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (csDisplayType :unsigned-word)               ;  INTEGER - (word) Type of display connected    ;;Changing field csconnecttaggedtype from signed-byte to unsigned-byte to match C header (educated-guess)   (csConnectTaggedType :unsigned-byte)         ;  unsigned char ;  BYTE - type of tagging    ;;Changing field csconnecttaggeddata from signed-byte to unsigned-byte to match C header (educated-guess)   (csConnectTaggedData :unsigned-byte)         ;  unsigned char ;  BYTE - tagging data    ;;Changing field csconnectflags from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csConnectFlags :unsigned-long)              ;  LONGINT - (long) tell us about the connection    ;;Changing field csdisplaycomponent from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csDisplayComponent :unsigned-long)          ;  LONGINT - (long) if the card has a direct connection to the display, it returns the display component here (FUTURE)    ;;Changing field csconnectreserved from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csConnectReserved :unsigned-long)           ;  LONGINT - (long) reserved    )(def-mactype :vddisplayconnectinfoptr (find-mactype '(:pointer :vddisplayconnectinforec)));  RawSenseCode; 	This abstract data type is not exactly abstract.  Rather, it is merely enumerated constants; 	for the possible raw sense code values when 'standard' sense code hardware is implemented.; ; 	For 'standard' sense code hardware, the raw sense is obtained as follows:; 		• Instruct the frame buffer controller NOT to actively drive any of the monitor sense lines; 		• Read the state of the monitor sense lines 2, 1, and 0.  (2 is the MSB, 0 the LSB); ; 	IMPORTANT Note: ; 	When the 'kTaggingInfoNonStandard' bit of 'csConnectFlags' is FALSE, then these constants ; 	are valid 'csConnectTaggedType' values in 'VDDisplayConnectInfo' ; ; (def-mactype :rawsensecode (find-mactype ':character))(defconstant $kRSCZero 0)(defconstant $kRSCOne 1)(defconstant $kRSCTwo 2)(defconstant $kRSCThree 3)(defconstant $kRSCFour 4)(defconstant $kRSCFive 5)(defconstant $kRSCSix 6)(defconstant $kRSCSeven 7);  ExtendedSenseCode; 	This abstract data type is not exactly abstract.  Rather, it is merely enumerated constants; 	for the values which are possible when the extended sense algorithm is applied to hardware; 	which implements 'standard' sense code hardware.; ;  	For 'standard' sense code hardware, the extended sense code algorithm is as follows:; 	(Note:  as described here, sense line 'A' corresponds to '2', 'B' to '1', and 'C' to '0'); 		• Drive sense line 'A' low and read the values of 'B' and 'C'.  ; 		• Drive sense line 'B' low and read the values of 'A' and 'C'.; 		• Drive sense line 'C' low and read the values of 'A' and 'B'.; ; 	In this way, a six-bit number of the form BC/AC/AB is generated. ; ; 	IMPORTANT Note: ; 	When the 'kTaggingInfoNonStandard' bit of 'csConnectFlags' is FALSE, then these constants ; 	are valid 'csConnectTaggedData' values in 'VDDisplayConnectInfo' ; ; (def-mactype :extendedsensecode (find-mactype ':character))(defconstant $kESCZero21Inch #x0)               ;  21" RGB 								(defconstant $kESCOnePortraitMono #x14)         ;  Portrait Monochrome 					(defconstant $kESCTwo12Inch #x21)               ;  12" RGB								(defconstant $kESCThree21InchRadius #x31)       ;  21" RGB (Radius)						(defconstant $kESCThree21InchMonoRadius #x34)   ;  21" Monochrome (Radius) 				(defconstant $kESCThree21InchMono #x35)         ;  21" Monochrome						(defconstant $kESCFourNTSC #xA)                 ;  NTSC 								(defconstant $kESCFivePortrait #x1E)            ;  Portrait RGB 						(defconstant $kESCSixMSB1 #x3)                  ;  MultiScan Band-1 (12" thru 1Six")	(defconstant $kESCSixMSB2 #xB)                  ;  MultiScan Band-2 (13" thru 19")		(defconstant $kESCSixMSB3 #x23)                 ;  MultiScan Band-3 (13" thru 21")		(defconstant $kESCSixStandard #x2B)             ;  13"/14" RGB or 12" Monochrome		(defconstant $kESCSevenPAL #x0)                 ;  PAL									(defconstant $kESCSevenNTSC #x14)               ;  NTSC 								(defconstant $kESCSevenVGA #x17)                ;  VGA 									(defconstant $kESCSeven16Inch #x2D)             ;  16" RGB (GoldFish) 				 	(defconstant $kESCSevenPALAlternate #x30)       ;  PAL (Alternate) 						(defconstant $kESCSeven19Inch #x3A)             ;  Third-Party 19”						(defconstant $kESCSevenNoDisplay #x3F)          ;  No display connected 				(defrecord VDPageInfo    ;;Changing field csmode from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (csMode :unsigned-word)                      ; (word) mode within device   ;;Changing field csdata from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csData :unsigned-long)                      ; (long) data supplied by driver   ;;Changing field cspage from signed-integer to unsigned-word to match C header (pretty-sure)   (csPage :unsigned-word)                      ; (word) page to switch in   (csBaseAddr :pointer)                        ; (long) base address of page   )(def-mactype :vdpginfoptr (find-mactype '(:pointer :vdpageinfo)))(defrecord VDSizeInfo    (csHSize :signed-integer)                    ; (word) desired/returned h size   (csHPos :signed-integer)                     ; (word) desired/returned h position   (csVSize :signed-integer)                    ; (word) desired/returned v size   (csVPos :signed-integer)                     ; (word) desired/returned v position   )(def-mactype :vdszinfoptr (find-mactype '(:pointer :vdsizeinfo)))(defrecord VDSettings    (csParamCnt :signed-integer)                 ; (word) number of params   (csBrightMax :signed-integer)                ; (word) max brightness   (csBrightDef :signed-integer)                ; (word) default brightness   (csBrightVal :signed-integer)                ; (word) current brightness   (csCntrstMax :signed-integer)                ; (word) max contrast   (csCntrstDef :signed-integer)                ; (word) default contrast   (csCntrstVal :signed-integer)                ; (word) current contrast   (csTintMax :signed-integer)                  ; (word) max tint   (csTintDef :signed-integer)                  ; (word) default tint   (csTintVal :signed-integer)                  ; (word) current tint   (csHueMax :signed-integer)                   ; (word) max hue   (csHueDef :signed-integer)                   ; (word) default hue   (csHueVal :signed-integer)                   ; (word) current hue   (csHorizDef :signed-integer)                 ; (word) default horizontal   (csHorizVal :signed-integer)                 ; (word) current horizontal   (csHorizMax :signed-integer)                 ; (word) max horizontal   (csVertDef :signed-integer)                  ; (word) default vertical   (csVertVal :signed-integer)                  ; (word) current vertical   (csVertMax :signed-integer)                  ; (word) max vertical   )(def-mactype :vdsettingsptr (find-mactype '(:pointer :vdsettings)))(def-mactype :displaymodeid (find-mactype ':signed-long))(def-mactype :videodevicetype (find-mactype ':signed-long))(def-mactype :gammatableid (find-mactype ':signed-long));  DepthMode; 	This abstract data type is used to to reference RELATIVE pixel depths.; 	Its definition is largely derived from its past usage, analogous to 'xxxVidMode'; ; 	Bits per pixel DOES NOT directly map to 'DepthMode'  For example, on some; 	graphics hardware, 'kDepthMode1' may represent 1 BPP, whereas on other; 	hardware, 'kDepthMode1' may represent 8BPP.; ; 	DepthMode IS considered to be ordinal, i.e., operations such as <, >, ==, etc.; 	behave as expected.  The values of the constants which comprise the set are such; 	that 'kDepthMode4 < kDepthMode6' behaves as expected.; (def-mactype :depthmode (find-mactype ':signed-integer))(defconstant $kDepthMode1 128)(defconstant $kDepthMode2 129)(defconstant $kDepthMode3 130)(defconstant $kDepthMode4 131)(defconstant $kDepthMode5 132)(defconstant $kDepthMode6 133)(defconstant $kFirstDepthMode 128)              ;  These constants are obsolete, and just included	(defconstant $kSecondDepthMode 129)             ;  for clients that have converted to the above		(defconstant $kThirdDepthMode 130)              ;  kDepthModeXXX constants.							(defconstant $kFourthDepthMode 131)(defconstant $kFifthDepthMode 132)(defconstant $kSixthDepthMode 133)(defrecord VDResolutionInfoRec    (csPreviousDisplayModeID :signed-long)       ;  ID of the previous resolution in a chain    (csDisplayModeID :signed-long)               ;  ID of the next resolution    ;;Changing field cshorizontalpixels from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csHorizontalPixels :unsigned-long)          ;  # of pixels in a horizontal line    ;;Changing field csverticallines from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csVerticalLines :unsigned-long)             ;  # of lines in a screen    (csRefreshRate :signed-long)                 ;  Vertical Refresh Rate in Hz    (csMaxDepthMode :signed-integer)             ;  0x80-based number representing max bit depth    ;;Changing field csreserved from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csReserved :unsigned-long)                  ;  Reserved    ;;Changing field csreserved1 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csReserved1 :unsigned-long)                 ;  Reserved    )(def-mactype :vdresolutioninfoptr (find-mactype '(:pointer :vdresolutioninforec)))(defrecord VDVideoParametersInfoRec    (csDisplayModeID :signed-long)               ;  the ID of the resolution we want info on    (csDepthMode :signed-integer)                ;  The bit depth we want the info on (0x80 based)    (csVPBlockPtr (:pointer :vpblock))           ;  Pointer to a video parameter block    ;;Changing field cspagecount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csPageCount :unsigned-long)                 ;  Number of pages supported by the resolution    (csDeviceType :signed-long)                  ;  Device Type:  Direct, Fixed or CLUT;    ;;Changing field csreserved from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csReserved :unsigned-long)                  ;  Reserved    )(def-mactype :vdvideoparametersinfoptr (find-mactype '(:pointer :vdvideoparametersinforec)))(defrecord VDGammaInfoRec    (csLastGammaID :signed-long)                 ;  the ID of the previous gamma table    (csNextGammaID :signed-long)                 ;  the ID of the next gamma table    (csGammaPtr :pointer)                        ;  Ptr to a gamma table data    ;;Changing field csreserved from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csReserved :unsigned-long)                  ;  Reserved    )(def-mactype :vdgammainfoptr (find-mactype '(:pointer :vdgammainforec)))(defrecord VDGetGammaListRec    (csPreviousGammaTableID :signed-long)        ;  ID of the previous gamma table    (csGammaTableID :signed-long)                ;  ID of the gamma table following csPreviousDisplayModeID    ;;Changing field csgammatablesize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (csGammaTableSize :unsigned-long)            ;  Size of the gamma table in bytes    (csGammaTableName (:pointer :character))     ;  Gamma table name (c-string)    )(def-mactype :vdgetgammalistptr (find-mactype '(:pointer :vdgetgammalistrec)))(defrecord VDRetrieveGammaRec    (csGammaTableID :signed-long)                ;  ID of gamma table to retrieve    (csGammaTablePtr (:pointer :gammatbl))       ;  Location to copy desired gamma to    )(def-mactype :vdretrievegammaptr (find-mactype '(:pointer :vdretrievegammarec)))(defrecord VDSetHardwareCursorRec    (csCursorRef :pointer)   )(def-mactype :vdsethardwarecursorptr (find-mactype '(:pointer :vdsethardwarecursorrec)))(defrecord VDDrawHardwareCursorRec    (csCursorX :signed-long)   (csCursorY :signed-long)   (csCursorVisible :signed-long)   )(def-mactype :vddrawhardwarecursorptr (find-mactype '(:pointer :vddrawhardwarecursorrec)))(defrecord VDSupportsHardwareCursorRec    (csSupportsHardwareCursor :boolean)          ;  True if hardware cursor is supported    )(def-mactype :vdsupportshardwarecursorptr (find-mactype '(:pointer :vdsupportshardwarecursorrec)))(defrecord VDDefMode    (csID :signed-byte)                          ;  UInt8    )(def-mactype :vddefmodeptr (find-mactype '(:pointer :vddefmode)))(defrecord VDSyncInfoRec    ;;Changing field csmode from signed-byte to unsigned-byte to match C header (educated-guess)   (csMode :unsigned-byte)                      ;  UInt8    (csFlags :signed-byte)                       ;  UInt8    )(def-mactype :vdsyncinfoptr (find-mactype '(:pointer :vdsyncinforec)))(defrecord VDConvolutionInfoRec    (csDisplayModeID :signed-long)               ;  the ID of the resolution we want info on    (csDepthMode :signed-integer)                ;  The bit depth we want the info on (0x80 based)    ;;Changing field cspage from signed-long to unsigned-long to match C header (pretty-sure)   (csPage :unsigned-long)   (csFlags :unsigned-long)   (csReserved :unsigned-long)   )(def-mactype :vdconvolutioninfoptr (find-mactype '(:pointer :vdconvolutioninforec))); $ALIGN RESET; $POP; $SETC UsingIncludes := VideoIncludes; $ENDC                                         ; __VIDEO__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'Video)