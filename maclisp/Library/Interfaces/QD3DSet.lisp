(in-package :TRAPS); Generated from QD3DSet.p; at Tuesday October 15,1996 4:08:59 pm.; ;  	File:		QD3DSet.p;  ;  	Contains:	Set types and routines											;  ;  	Version:	Technology:	Quickdraw 3D 1.0.6;  				Release:	Universal Interfaces 2.1.5d1;  ;  	Copyright:	© 1984-1996 by Apple Computer, Inc.  All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, send the file and version;  				information (from above) and the problem description to:;  ;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __QD3DSET__; $SETC __QD3DSET__ := 1; $I+; $SETC QD3DSetIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __QD3D__|#(require-interface 'QD3D)#|                                              ; $I QD3D.p |#                                             ; $ENDC; $PUSH; $ALIGN POWER; $LibExport+; ; *****************************************************************************;  **																			 **;  **								Set Types									 **;  **																			 **;  ****************************************************************************; (def-mactype :tq3elementtype (find-mactype ':signed-long)); ;  *	kQ3ElementTypeUnknown is an TQ3Object. ;  *	;  *		Do Q3Set_Add(s, ..., &obj) or Q3Set_Get(s, ..., &obj);;  *		;  *		Note that the object is always referenced when copying around. ;  *		;  *		Generally, it is an Unknown object, a Group of Unknown objects, or a ;  *		group of other "objects" which have been found in the metafile and;  *		have no attachment method to their parent. Be prepared to handle;  *		any or all of these cases if you actually access the set on a shape.; ; ; *****************************************************************************;  **																			 **;  **								Set Routines								 **;  **																			 **;  ****************************************************************************; ;; Warning: No calling method defined for this trap(deftrap-inline "_Q3Set_New" ()   (:pointer :signed-long)   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3Set_GetType" ((theSet (:pointer :signed-long)))   :ostype   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3Set_Add" ((theSet (:pointer                                       :signed-long)) (theType :signed-long) (data :pointer))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3Set_Get" ((theSet (:pointer                                       :signed-long)) (theType :signed-long) (data :pointer))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3Set_Contains" ((theSet (:pointer                                            :signed-long)) (theType :signed-long))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3Set_Clear" ((theSet (:pointer                                         :signed-long)) (theType :signed-long))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3Set_Empty" ((target (:pointer :signed-long)))   :signed-long   () ); ;  *  Iterating through all elements in a set;  *;  *  Pass in kQ3ElementTypeNone to get first type;  *  kQ3ElementTypeNone is returned when end of list is reached; ;; Warning: No calling method defined for this trap(deftrap-inline "_Q3Set_GetNextElementType" ((theSet (:pointer                                                      :signed-long)) (theType (:pointer                                                                               :signed-long)))   :signed-long   () ); ; *****************************************************************************;  **																			 **;  **								Attribute Types								 **;  **																			 **;  ****************************************************************************; ; ;  *	For the data types listed below, pass in a pointer to it in the _Add ;  *	and _Get calls.;  *;  *	For surface shader attributes, reference counts are incremented on ;  *	the _Add and _Get ; (def-mactype :tq3attributetypes (find-mactype ':signed-long));   Data Type				 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeNone 0)           ;   ---------				 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeSurfaceUV 1)      ;   TQ3Param2D				 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeShadingUV 2)      ;   TQ3Param2D 				 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeNormal 3)         ;   TQ3Vector3D 				 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeAmbientCoefficient 4);   float 					 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeDiffuseColor 5)   ;   TQ3ColorRGB				 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeSpecularColor 6)  ;   TQ3ColorRGB				 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeSpecularControl 7);   float					 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeTransparencyColor 8);   TQ3ColorRGB				 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeSurfaceTangent 9) ;   TQ3Tangent2D  			 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeHighlightState 10);   TQ3Switch 				 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeSurfaceShader 11) ;   TQ3SurfaceShaderObject	 ; TQ3AttributeTypes(defconstant $kQ3AttributeTypeNumTypes 12)(def-mactype :tq3attributetype (find-mactype ':signed-long)); ; *****************************************************************************;  **																			 **;  **								Attribute Drawing							 **;  **																			 **;  ****************************************************************************; ;; Warning: No calling method defined for this trap(deftrap-inline "_Q3Attribute_Submit" ((attributeType :signed-long) (data :pointer) (view (:pointer                                                                                           :signed-long)))   :signed-long   () ); ; *****************************************************************************;  **																			 **;  **							AttributeSet Routines							 **;  **																			 **;  ****************************************************************************; ;; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeSet_New" ()   (:pointer :signed-long)   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeSet_Add" ((attributeSet (:pointer                                                      :signed-long)) (theType :signed-long) (data :pointer))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeSet_Contains" ((attributeSet (:pointer                                                           :signed-long)) (attributeType :signed-long))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeSet_Get" ((attributeSet (:pointer                                                      :signed-long)) (theType :signed-long) (data :pointer))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeSet_Clear" ((attributeSet (:pointer                                                        :signed-long)) (theType :signed-long))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeSet_Empty" ((target (:pointer :signed-long)))   :signed-long   () ); ;  * Q3AttributeSet_GetNextAttributeType;  *;  * Pass in kQ3AttributeTypeNone to get first type;  * kQ3AttributeTypeNone is returned when end of list is reached; ;; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeSet_GetNextAttributeType" ((source (:pointer                                                                 :signed-long)) (theType (:pointer                                                                                          :signed-long)))   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeSet_Submit" ((attributeSet (:pointer                                                         :signed-long)) (view (:pointer                                                                               :signed-long)))   :signed-long   () ); ;  * Inherit from parent->child into result;  *	Result attributes are:;  *		all child attributes + all parent attributes NOT in the child; ;; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeSet_Inherit" ((parent (:pointer                                                    :signed-long)) (child (:pointer                                                                           :signed-long)) (result (:pointer                                                                                                   :signed-long)))   :signed-long   () ); ; *****************************************************************************;  **																			 **;  **							Custom Element Registration						 **;  **																			 **;  ****************************************************************************; ; ;  * Element Methods - ;  *;  * 		When you create a custom element, you control what structures are ;  *		passed around the API. For example, you may allow the Q3Set_Add call ;  *		take one type of argument, store your element internally in some ;  *		abstract data type, and have the Q3Set_Get call take a different ;  *		argument.;  *;  *		For example:;  *			;  *		There are four calls which at some point will copy an element:;  *;  *		Q3Set_Add (copied from Application memory to QuickDraw3D memory);  *		Q3Set_Get (copied from QuickDraw3D memory to Application memory);  *		Q3Object_Duplicate (all elements are copied internally);  *		Q3AttributeSet_Inherit (all elements are copied internally);  *;  * 		Either CopyAdd or CopyReplace is called during the "_Add" call.;  *			- CopyAdd is destructive and should assume "toElement" is garbage;  *			- CopyReplace is replacing an existing element.;  *;  * 		CopyGet is called during the "_Get" call.;  *;  * 		CopyDuplicate is called to duplicate an element's internal structure.;  *;  * Attributes Methods - ;  *;  *		For copying data while Inheriting. Element methods are used;  *		at all other times.;  *	;  * 		CopyInherit is called to duplicate an element's internal structure ;  *			during inheritance. You should make this as fast as possible.;  *			(for example, if your custom element contains objects, you;  *			 should do a Q3Shared_GetReference instead of a Q3Object_Duplicate);  *			;  *		The ElementDelete method will be called for all of your elements copied ;  *		around via CopyAdd, CopyReplace, CopyDuplicate, and CopyInherit.;  *		If CopyGet allocates any memory in it's destination, it is up to the app ;  *		to delete it on its side.; (def-mactype :tq3elementcopyaddmethod (find-mactype ':pointer));  FUNCTION TQ3ElementCopyAddMethod(fromAPIElement: UNIV Ptr; toInternalElement: UNIV Ptr): TQ3Status; C; (def-mactype :tq3elementcopyreplacemethod (find-mactype ':pointer));  FUNCTION TQ3ElementCopyReplaceMethod(fromAPIElement: UNIV Ptr; ontoInternalElement: UNIV Ptr): TQ3Status; C; (def-mactype :tq3elementcopygetmethod (find-mactype ':pointer));  FUNCTION TQ3ElementCopyGetMethod(fromInternalElement: UNIV Ptr; toAPIElement: UNIV Ptr): TQ3Status; C; (def-mactype :tq3elementcopyduplicatemethod (find-mactype ':pointer));  FUNCTION TQ3ElementCopyDuplicateMethod(fromInternalElement: UNIV Ptr; toInternalElement: UNIV Ptr): TQ3Status; C; (def-mactype :tq3elementdeletemethod (find-mactype ':pointer));  FUNCTION TQ3ElementDeleteMethod(internalElement: UNIV Ptr): TQ3Status; C; ;; Warning: No calling method defined for this trap(deftrap-inline "_Q3ElementClass_Register" ((elementType :signed-long) (name :pointer) (sizeOfElement :signed-long) (metaHandler :pointer))   (:pointer :signed-long)   () );; Warning: No calling method defined for this trap(deftrap-inline "_Q3ElementType_GetElementSize" ((elementType :signed-long) (sizeOfElement (:pointer                                                                                            :signed-long)))   :signed-long   () ); ; *****************************************************************************;  **																			 **;  **						Custom Attribute Registration						 **;  **																			 **;  ****************************************************************************; (def-mactype :tq3attributeinheritmethod (find-mactype ':signed-long));   return kQ3True or kQ3False in your metahandler  (def-mactype :tq3attributecopyinheritmethod (find-mactype ':pointer));  FUNCTION TQ3AttributeCopyInheritMethod(fromInternalAttribute: UNIV Ptr; toInternalAttribute: UNIV Ptr): TQ3Status; C; ;; Warning: No calling method defined for this trap(deftrap-inline "_Q3AttributeClass_Register" ((attributeType :signed-long) (creatorName :pointer) (sizeOfElement :signed-long) (metaHandler :pointer))   (:pointer :signed-long)   () ); $ALIGN RESET; $POP; $SETC UsingIncludes := QD3DSetIncludes; $ENDC                                         ; __QD3DSET__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'QD3DSet)