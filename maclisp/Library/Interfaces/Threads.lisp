(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Threads.p"; at Tuesday June 6,1995 2:22:40 pm.; ;  	File:		Threads.p;  ;  	Contains:	Thread Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __THREADS__; $SETC __THREADS__ := 1; $I+; $SETC ThreadsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __ERRORS__|#(require-interface 'Errors)#|                                              ; $I Errors.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MEMORY__|#(require-interface 'Memory)#|                                              ; $I Memory.p |#                                             ; $ENDC; 	Types.p														; 	MixedMode.p													; $PUSH; $ALIGN MAC68K; $LibExport+(def-mactype :threadstate (find-mactype ':signed-integer))(defconstant $kReadyThreadState 0)(defconstant $kStoppedThreadState 1)(defconstant $kRunningThreadState 2);  Error codes have been meoved to Errors.(pah) ;  Thread environment characteristics (def-mactype :threadtaskref (find-mactype ':pointer));  Thread characteristics (def-mactype :threadstyle (find-mactype ':signed-long))(defconstant $kCooperativeThread 1)(defconstant $kPreemptiveThread 2);  Thread identifiers (def-mactype :threadid (find-mactype ':signed-long))(defconstant $kNoThreadID 0)(defconstant $kCurrentThreadID 1)(defconstant $kApplicationThreadID 2);  Options when creating a thread (def-mactype :threadoptions (find-mactype ':signed-long))(defconstant $kNewSuspend 1)(defconstant $kUsePremadeThread 2)(defconstant $kCreateIfNeeded 4)(defconstant $kFPUNotNeeded 8)(defconstant $kExactMatchThread 16);  Information supplied to the custom scheduler (defrecord SchedulerInfoRec    ;;Changing field inforecsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (InfoRecSize :unsigned-long)   (CurrentThreadID :signed-long)   (SuggestedThreadID :signed-long)   (InterruptedCoopThreadID :signed-long)   )(def-mactype :schedulerinforecptr (find-mactype '(:pointer :schedulerinforec))); ; 	The following ProcPtrs cannot be interchanged with UniversalProcPtrs because; 	of differences between 680x0 and PowerPC runtime architectures with regard to; 	the implementation of the Thread Manager.;  ;  Prototype for thread's entry (main) routine (def-mactype :voidptr (find-mactype ':pointer))(def-mactype :threadentryprocptr (find-mactype ':pointer));  FUNCTION (threadParam: UNIV Ptr): voidPtr; ;  Prototype for custom thread scheduler routine (def-mactype :threadschedulerprocptr (find-mactype ':pointer));  FUNCTION (schedulerInfo: SchedulerInfoRecPtr): ThreadID; ;  Prototype for custom thread switcher routine (def-mactype :threadswitchprocptr (find-mactype ':pointer));  PROCEDURE (threadBeingSwitched: ThreadID; switchProcParam: UNIV Ptr); ;  Prototype for thread termination notification routine (def-mactype :threadterminationprocptr (find-mactype ':pointer));  PROCEDURE (threadTerminated: ThreadID; terminationProcParam: UNIV Ptr); ;  Prototype for debugger NewThread notification (def-mactype :debuggernewthreadprocptr (find-mactype ':pointer));  PROCEDURE (threadCreated: ThreadID); ;  Prototype for debugger DisposeThread notification (def-mactype :debuggerdisposethreadprocptr (find-mactype ':pointer));  PROCEDURE (threadDeleted: ThreadID); ;  Prototype for debugger schedule notification (def-mactype :debuggerthreadschedulerprocptr (find-mactype ':pointer));  FUNCTION (schedulerInfo: SchedulerInfoRecPtr): ThreadID; ;  Thread Manager routines ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_CreateThreadPool" ((ThreadStyle :signed-long) (numToCreate :signed-integer) (stackSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1281 ThreadStyle numToCreate stackSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetFreeThreadCount" ((ThreadStyle :signed-long) (freeCount (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1026 ThreadStyle freeCount)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetSpecificFreeThreadCount" ((ThreadStyle :signed-long) (stackSize :signed-long) (freeCount (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1557 ThreadStyle stackSize freeCount)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetDefaultThreadStackSize" ((ThreadStyle :signed-long) (stackSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1043 ThreadStyle stackSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_ThreadCurrentStackSpace" ((thread :signed-long) (freeStack (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1044 thread freeStack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_NewThread" ((ThreadStyle :signed-long) (threadEntry :pointer) (threadParam :pointer) (stackSize :signed-long) (options :signed-long) (threadResult :pointer) (threadMade (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 3587 ThreadStyle threadEntry threadParam stackSize options threadResult threadMade)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DisposeThread" ((threadToDump :signed-long) (threadResult :pointer) (recycleThread :boolean))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1284 threadToDump threadResult recycleThread)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_YieldToThread" ((suggestedThread :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 517 suggestedThread)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_YieldToAnyThread" ()   :signed-integer   (#x42A7 #x303C #x205 #xABF2) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetCurrentThread" ((currentThreadID (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 518 currentThreadID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetThreadState" ((threadToGet :signed-long) (ThreadState (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1031 threadToGet ThreadState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetThreadState" ((threadToSet :signed-long) (newState :signed-integer) (suggestedThread :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1288 threadToSet newState suggestedThread)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetThreadStateEndCritical" ((threadToSet :signed-long) (newState :signed-integer) (suggestedThread :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1298 threadToSet newState suggestedThread)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetThreadScheduler" ((threadScheduler :pointer))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 521 threadScheduler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetThreadSwitcher" ((thread :signed-long) (threadSwitcher :pointer) (switchProcParam :pointer) (inOrOut :boolean))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1802 thread threadSwitcher switchProcParam inOrOut)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetThreadTerminator" ((thread :signed-long) (threadTerminator :pointer) (terminationProcParam :pointer))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1553 thread threadTerminator terminationProcParam)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_ThreadBeginCritical" ()   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 11)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_ThreadEndCritical" ()   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 12)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetDebuggerNotificationProcs" ((notifyNewThread :pointer) (notifyDisposeThread :pointer) (notifyThreadScheduler :pointer))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1549 notifyNewThread notifyDisposeThread notifyThreadScheduler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetThreadCurrentTaskRef" ((threadTRef (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 526 threadTRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetThreadStateGivenTaskRef" ((threadTRef :pointer) (threadToGet :signed-long) (ThreadState (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1551 threadTRef threadToGet ThreadState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetThreadReadyGivenTaskRef" ((threadTRef :pointer) (threadToSet :signed-long))   (:stack :signed-integer)   (:stack-trap #xABF2 :d0 1040 threadTRef threadToSet)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := ThreadsIncludes; $ENDC                                         ; __THREADS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Threads)