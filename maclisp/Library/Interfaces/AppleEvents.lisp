(in-package :TRAPS);;;;;;;;;;;;;;;;;;;;;;;;;;; Modification History;;;; 03/06/96 bill Map AExxxKeyxxx to AExxxParamxxx just as is done by #define's in the C interfaces;;; Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:AppleEvents.p"; at Tuesday June 6,1995 2:01:21 pm.; ;  	File:		AppleEvents.p;  ;  	Contains:	AppleEvent Package Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __APPLEEVENTS__; $SETC __APPLEEVENTS__ := 1; $I+; $SETC AppleEventsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __ERRORS__|#(require-interface 'Errors)#|                                              ; $I Errors.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __MEMORY__|#(require-interface 'Memory)#|                                              ; $I Memory.p |#                                             ; $ENDC; 	MixedMode.p													#|                                              ; $IFC UNDEFINED __OSUTILS__|#(require-interface 'OSUtils)#|                                              ; $I OSUtils.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC; 	Quickdraw.p													; 		QuickdrawText.p											; $IFC UNDEFINED __EPPC__(require-interface 'EPPC)                       ; $I EPPC.p; $ENDC; 	AppleTalk.p													; 	Files.p														; 	PPCToolbox.p												; 	Processes.p													#|                                              ; $IFC UNDEFINED __NOTIFICATION__|#(require-interface 'Notification)#|                                              ; $I Notification.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+;  Apple event descriptor types (defconstant $typeBoolean :|bool|)(defconstant $typeChar :|TEXT|)(defconstant $typeSMInt :|shor|)(defconstant $typeInteger :|long|)(defconstant $typeSMFloat :|sing|)(defconstant $typeFloat :|doub|)(defconstant $typeLongInteger :|long|)(defconstant $typeShortInteger :|shor|)(defconstant $typeLongFloat :|doub|)(defconstant $typeShortFloat :|sing|)(defconstant $typeExtended :|exte|)(defconstant $typeComp :|comp|)(defconstant $typeMagnitude :|magn|)(defconstant $typeAEList :|list|)(defconstant $typeAERecord :|reco|)(defconstant $typeAppleEvent :|aevt|)(defconstant $typeTrue :|true|)(defconstant $typeFalse :|fals|)(defconstant $typeAlias :|alis|)(defconstant $typeEnumerated :|enum|)(defconstant $typeType :|type|)(defconstant $typeAppParameters :|appa|)(defconstant $typeProperty :|prop|)(defconstant $typeFSS :|fss |)(defconstant $typeKeyword :|keyw|)(defconstant $typeSectionH :|sect|)(defconstant $typeWildCard :|****|)(defconstant $typeApplSignature :|sign|)(defconstant $typeQDRectangle :|qdrt|)(defconstant $typeFixed :|fixd|)(defconstant $typeSessionID :|ssid|)(defconstant $typeTargetID :|targ|)(defconstant $typeProcessSerialNumber :|psn |)(defconstant $typeNull :|null|)                 ;  null or nonexistent data ;  Keywords for Apple event parameters (defconstant $keyDirectObject :|----|)(defconstant $keyErrorNumber :|errn|)(defconstant $keyErrorString :|errs|)(defconstant $keyProcessSerialNumber :|psn |);  Keywords for Apple event attributes (defconstant $keyTransactionIDAttr :|tran|)(defconstant $keyReturnIDAttr :|rtid|)(defconstant $keyEventClassAttr :|evcl|)(defconstant $keyEventIDAttr :|evid|)(defconstant $keyAddressAttr :|addr|)(defconstant $keyOptionalKeywordAttr :|optk|)(defconstant $keyTimeoutAttr :|timo|)(defconstant $keyInteractLevelAttr :|inte|)     ;  this attribute is read only - will be set in AESend (defconstant $keyEventSourceAttr :|esrc|)       ;  this attribute is read only (defconstant $keyMissedKeywordAttr :|miss|)     ;  this attribute is read only (defconstant $keyOriginalAddressAttr :|from|)   ;  new in 1.0.1 ;  Keywords for special handlers (defconstant $keyPreDispatch :|phac|)           ;  preHandler accessor call (defconstant $keySelectProc :|selh|)            ;  more selector call ;  Keyword for recording (defconstant $keyAERecorderCount :|recr|)       ;  available only in vers 1.0.1 and greater ;  Keyword for version information (defconstant $keyAEVersion :|vers|)             ;  available only in vers 1.0.1 and greater ;  Event Class (defconstant $kCoreEventClass :|aevt|);  Event ID’s (defconstant $kAEOpenApplication :|oapp|)(defconstant $kAEOpenDocuments :|odoc|)(defconstant $kAEPrintDocuments :|pdoc|)(defconstant $kAEQuitApplication :|quit|)(defconstant $kAEAnswer :|ansr|)(defconstant $kAEApplicationDied :|obit|);  Constants for use in AESend mode (defconstant $kAENoReply #x1)                   ;  sender doesn't want a reply to event (defconstant $kAEQueueReply #x2)                ;  sender wants a reply but won't wait (defconstant $kAEWaitReply #x3)                 ;  sender wants a reply and will wait (defconstant $kAENeverInteract #x10)            ;  server should not interact with user (defconstant $kAECanInteract #x20)              ;  server may try to interact with user (defconstant $kAEAlwaysInteract #x30)           ;  server should always interact with user where appropriate (defconstant $kAECanSwitchLayer #x40)           ;  interaction may switch layer (defconstant $kAEDontReconnect #x80)            ;  don't reconnect if there is a sessClosedErr from PPCToolbox (defconstant $kAEWantReceipt #$nReturnReceipt)  ;  sender wants a receipt of message (defconstant $kAEDontRecord #x1000)             ;  don't record this event - available only in vers 1.0.1 and greater (defconstant $kAEDontExecute #x2000)            ;  don't send the event for recording - available only in vers 1.0.1 and greater ;  Constants for the send priority in AESend (defconstant $kAENormalPriority #x0)            ;  post message at the end of the event queue (defconstant $kAEHighPriority #$nAttnMsg)       ;  post message at the front of the event queue ;  Constants for recording (defconstant $kAEStartRecording :|reca|)        ;  available only in vers 1.0.1 and greater (defconstant $kAEStopRecording :|recc|)         ;  available only in vers 1.0.1 and greater (defconstant $kAENotifyStartRecording :|rec1|)  ;  available only in vers 1.0.1 and greater (defconstant $kAENotifyStopRecording :|rec0|)   ;  available only in vers 1.0.1 and greater (defconstant $kAENotifyRecording :|recr|);  Constant for the returnID param of AECreateAppleEvent (defconstant $kAutoGenerateReturnID -1)         ;  AECreateAppleEvent will generate a session-unique ID ;  Constant for transaction ID’s (defconstant $kAnyTransactionID 0)              ;  no transaction is in use ;  Constants for timeout durations (defconstant $kAEDefaultTimeout -1)             ;  timeout value determined by AEM (defconstant $kNoTimeOut -2)                    ;  wait until reply comes back, however long it takes ;  Constants for AEResumeTheCurrentEvent (defconstant $kAENoDispatch 0)                  ;  dispatch parameter to AEResumeTheCurrentEvent takes a pointer to a dispatch (defconstant $kAEUseStandardDispatch #xFFFFFFFF);  table, or one of these two constants ;  Constants for Refcon in AEResumeTheCurrentEvent with kAEUseStandardDispatch (defconstant $kAEDoNotIgnoreHandler #x0)(defconstant $kAEIgnoreAppPhacHandler #x1)      ;  available only in vers 1.0.1 and greater (defconstant $kAEIgnoreAppEventHandler #x2)     ;  available only in vers 1.0.1 and greater (defconstant $kAEIgnoreSysPhacHandler #x4)      ;  available only in vers 1.0.1 and greater (defconstant $kAEIgnoreSysEventHandler #x8)     ;  available only in vers 1.0.1 and greater (defconstant $kAEIngoreBuiltInEventHandler #x10);  available only in vers 1.0.1 and greater (defconstant $kAEDontDisposeOnResume #x80000000);  available only in vers 1.0.1 and greater ;  Apple event manager data types (def-mactype :aeeventclass (find-mactype ':ostype))(def-mactype :aeeventid (find-mactype ':ostype))(def-mactype :aekeyword (find-mactype ':ostype))(def-mactype :desctype (find-mactype ':ostype))(defrecord AEDesc    (descriptorType :ostype)   (dataHandle :handle)   )(defrecord AEKeyDesc    (descKey :ostype)   (descContent :aedesc)   );  an AEDesc which contains address data (%define-record :aeaddressdesc (find-record-descriptor :aedesc));  a list of AEDesc's is a special kind of AEDesc (%define-record :aedesclist (find-record-descriptor :aedesc));  AERecord is a list of keyworded AEDesc's (%define-record :aerecord (find-record-descriptor :aedesc));  an AERecord that contains an AppleEvent (%define-record :appleevent (find-record-descriptor :aedesc));  parameter to AESend (def-mactype :aesendmode (find-mactype ':signed-long));  priority param of AESend (def-mactype :aesendpriority (find-mactype ':signed-integer))(defconstant $kAEInteractWithSelf 0)(defconstant $kAEInteractWithLocal 1)(defconstant $kAEInteractWithAll 2)(def-mactype :aeinteractallowed (find-mactype ':signed-byte))(defconstant $kAEUnknownSource 0)(defconstant $kAEDirectCall 1)(defconstant $kAESameProcess 2)(defconstant $kAELocalProcess 3)(defconstant $kAERemoteProcess 4)(def-mactype :aeeventsource (find-mactype ':signed-byte))(defconstant $kAEDataArray 0)(defconstant $kAEPackedArray 1)(defconstant $kAEHandleArray 2)(defconstant $kAEDescArray 3)(defconstant $kAEKeyDescArray 4)(def-mactype :aearraytype (find-mactype ':signed-byte))(defrecord AEArrayData    (:variant       (      (kAEDataArray (:array :signed-integer 1))      )      (      (kAEPackedArray (:array :character 1 :packed))      )      (      (kAEHandleArray (:array :handle 1))      )      (      (kAEDescArray (:array :aedesc 1))      )      (      (kAEKeyDescArray (:array :aekeydesc 1))      )      )   )(def-mactype :aearraydatapointer (find-mactype '(:pointer :aearraydata)))(def-mactype :aeidleprocptr (find-mactype ':pointer));  FUNCTION AEIdle(VAR theEvent: EventRecord; VAR sleepTime: LONGINT; VAR mouseRgn: RgnHandle): BOOLEAN; (def-mactype :aefilterprocptr (find-mactype ':pointer));  FUNCTION AEFilter(VAR theEvent: EventRecord; returnID: LONGINT; transactionID: LONGINT; (CONST)VAR sender: AEAddressDesc): BOOLEAN; (def-mactype :aeeventhandlerprocptr (find-mactype ':pointer));  FUNCTION AEEventHandler((CONST)VAR theAppleEvent: AppleEvent; VAR reply: AppleEvent; handlerRefcon: LONGINT): OSErr; (def-mactype :aecoercedescprocptr (find-mactype ':pointer));  FUNCTION AECoerceDesc((CONST)VAR fromDesc: AEDesc; toType: DescType; handlerRefcon: LONGINT; VAR toDesc: AEDesc): OSErr; (def-mactype :aecoerceptrprocptr (find-mactype ':pointer));  FUNCTION AECoercePtr(typeCode: DescType; dataPtr: UNIV Ptr; dataSize: Size; toType: DescType; handlerRefcon: LONGINT; VAR result: AEDesc): OSErr; (def-mactype :aeidleupp (find-mactype ':pointer))(def-mactype :aefilterupp (find-mactype ':pointer))(def-mactype :aeeventhandlerupp (find-mactype ':pointer))(def-mactype :aecoercedescupp (find-mactype ':pointer))(def-mactype :aecoerceptrupp (find-mactype ':pointer))(defconstant $uppAEIdleProcInfo #xFD0)          ;  FUNCTION (4 byte param, 4 byte param, 4 byte param): 1 byte result; (defconstant $uppAEFilterProcInfo #x3FD0)       ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param): 1 byte result; (defconstant $uppAEEventHandlerProcInfo #xFE0)  ;  FUNCTION (4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppAECoerceDescProcInfo #x3FE0)   ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppAECoercePtrProcInfo #x3FFE0)   ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewAEIdleProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewAEFilterProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewAEEventHandlerProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewAECoerceDescProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewAECoercePtrProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallAEIdleProc" ((theEvent (:pointer :eventrecord)) (sleepTime (:pointer :signed-long)) (mouseRgn (:pointer (:handle :region))) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallAEFilterProc" ((theEvent (:pointer :eventrecord)) (returnID :signed-long) (transactionID :signed-long) (sender (:pointer :aedesc)) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallAEEventHandlerProc" ((theAppleEvent (:pointer :aedesc)) (reply (:pointer :aedesc)) (handlerRefcon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallAECoerceDescProc" ((fromDesc (:pointer :aedesc)) (toType :ostype) (handlerRefcon :signed-long) (toDesc (:pointer :aedesc)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallAECoercePtrProc" ((typeCode :ostype) (dataPtr :pointer) (dataSize :signed-long) (toType :ostype) (handlerRefcon :signed-long) (result (:pointer :aedesc)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC(def-mactype :aecoercionhandlerupp (find-mactype ':pointer)); *************************************************************************;  The following calls apply to any AEDesc. Every 'result' descriptor is;  created for you, so you will be responsible for memory management;  (including disposing) of the descriptors so created. Note: purgeable;  descriptor data is not supported - the AEM does not call LoadResource.  ; *************************************************************************; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AECreateDesc" ((typeCode :ostype) (dataPtr :pointer) (dataSize :signed-long) (result (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2085 typeCode dataPtr dataSize result)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AECoercePtr" ((typeCode :ostype) (dataPtr :pointer) (dataSize :signed-long) (toType :ostype) (result (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2562 typeCode dataPtr dataSize toType result)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AECoerceDesc" ((theAEDesc (:pointer :aedesc)) (toType :ostype) (result (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1539 theAEDesc toType result)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEDisposeDesc" ((theAEDesc (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 516 theAEDesc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEDuplicateDesc" ((theAEDesc (:pointer :aedesc)) (result (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1029 theAEDesc result)); $ENDC; *************************************************************************;   The following calls apply to AEDescList. Since AEDescList is a subtype of;   AEDesc, the calls in the previous section can also be used for AEDescList.;   All list and array indices are 1-based. If the data was greater than;   maximumSize in the routines below, then actualSize will be greater than;   maximumSize, but only maximumSize bytes will actually be retrieved.; *************************************************************************; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AECreateList" ((factoringPtr :pointer) (factoredSize :signed-long) (isRecord :boolean) (resultList (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1798 factoringPtr factoredSize isRecord resultList)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AECountItems" ((theAEDescList (:pointer :aedesc)) (theCount (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1031 theAEDescList theCount)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEPutPtr" ((theAEDescList (:pointer :aedesc)) (index :signed-long) (typeCode :ostype) (dataPtr :pointer) (dataSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2568 theAEDescList index typeCode dataPtr dataSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEPutDesc" ((theAEDescList (:pointer :aedesc)) (index :signed-long) (theAEDesc (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1545 theAEDescList index theAEDesc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetNthPtr" ((theAEDescList (:pointer :aedesc)) (index :signed-long) (desiredType :ostype) (theAEKeyword (:pointer :ostype)) (typeCode (:pointer :ostype)) (dataPtr :pointer) (maximumSize :signed-long) (actualSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 4106 theAEDescList index desiredType theAEKeyword typeCode dataPtr maximumSize actualSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetNthDesc" ((theAEDescList (:pointer :aedesc)) (index :signed-long) (desiredType :ostype) (theAEKeyword (:pointer :ostype)) (result (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2571 theAEDescList index desiredType theAEKeyword result)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AESizeOfNthItem" ((theAEDescList (:pointer :aedesc)) (index :signed-long) (typeCode (:pointer :ostype)) (dataSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2090 theAEDescList index typeCode dataSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetArray" ((theAEDescList (:pointer :aedesc)) (arrayType :signed-byte) (arrayPtr (:pointer :aearraydata)) (maximumSize :signed-long) (itemType (:pointer :ostype)) (itemSize (:pointer :signed-long)) (itemCount (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 3340 theAEDescList arrayType arrayPtr maximumSize itemType itemSize itemCount)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEPutArray" ((theAEDescList (:pointer :aedesc)) (arrayType :signed-byte) (arrayPtr (:pointer :aearraydata)) (itemType :ostype) (itemSize :signed-long) (itemCount :signed-long))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2829 theAEDescList arrayType arrayPtr itemType itemSize itemCount)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEDeleteItem" ((theAEDescList (:pointer :aedesc)) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1038 theAEDescList index)); $ENDC; *************************************************************************;  The following calls apply to AERecord. Since AERecord is a subtype of;  AEDescList, the calls in the previous sections can also be used for;  AERecord an AERecord can be created by using AECreateList with isRecord;  set to true. ; *************************************************************************; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AEPutKeyPtr" "AEPutParamPtr")         ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (typeCode :ostype) (dataPtr :pointer) (dataSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2575 theAppleEvent theAEKeyword typeCode dataPtr dataSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AEPutKeyDesc" "AEPutParamDesc")         ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (theAEDesc (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1552 theAppleEvent theAEKeyword theAEDesc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AEGetKeyPtr" "AEGetParamPtr")         ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (desiredType :ostype) (typeCode (:pointer :ostype)) (dataPtr :pointer) (maximumSize :signed-long) (actualSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 3601 theAppleEvent theAEKeyword desiredType typeCode dataPtr maximumSize actualSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AEGetKeyDesc" "AEGetParamDesc")         ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (desiredType :ostype) (result (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2066 theAppleEvent theAEKeyword desiredType result)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AESizeOfKeyDesc" "AESizeOfParam")         ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (typeCode (:pointer :ostype)) (dataSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2089 theAppleEvent theAEKeyword typeCode dataSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AEDeleteKeyDesc" "AEDeleteParam")         ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1043 theAppleEvent theAEKeyword)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEPutParamPtr" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (typeCode :ostype) (dataPtr :pointer) (dataSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2575 theAppleEvent theAEKeyword typeCode dataPtr dataSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEPutParamDesc" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (theAEDesc (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1552 theAppleEvent theAEKeyword theAEDesc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetParamPtr" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (desiredType :ostype) (typeCode (:pointer :ostype)) (dataPtr :pointer) (maximumSize :signed-long) (actualSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 3601 theAppleEvent theAEKeyword desiredType typeCode dataPtr maximumSize actualSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetParamDesc" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (desiredType :ostype) (result (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2066 theAppleEvent theAEKeyword desiredType result)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AESizeOfParam" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (typeCode (:pointer :ostype)) (dataSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2089 theAppleEvent theAEKeyword typeCode dataSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEDeleteParam" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1043 theAppleEvent theAEKeyword)); $ENDC; *************************************************************************;  The following calls also apply to type AppleEvent. Message attributes are;  far more restricted, and can only be accessed through the following 5;  calls. The various list and record routines cannot be used to access the;  attributes of an event. ; *************************************************************************; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetAttributePtr" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (desiredType :ostype) (typeCode (:pointer :ostype)) (dataPtr :pointer) (maximumSize :signed-long) (actualSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 3605 theAppleEvent theAEKeyword desiredType typeCode dataPtr maximumSize actualSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetAttributeDesc" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (desiredType :ostype) (result (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2086 theAppleEvent theAEKeyword desiredType result)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AESizeOfAttribute" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (typeCode (:pointer :ostype)) (dataSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2088 theAppleEvent theAEKeyword typeCode dataSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEPutAttributePtr" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (typeCode :ostype) (dataPtr :pointer) (dataSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2582 theAppleEvent theAEKeyword typeCode dataPtr dataSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEPutAttributeDesc" ((theAppleEvent (:pointer :aedesc)) (theAEKeyword :ostype) (theAEDesc (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1575 theAppleEvent theAEKeyword theAEDesc)); $ENDC; *************************************************************************;   The next couple of calls are basic routines used to create, send,;   and process AppleEvents. ; *************************************************************************; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AECreateAppleEvent" ((theAEEventClass :ostype) (theAEEventID :ostype) (target (:pointer :aedesc)) (returnID :signed-integer) (transactionID :signed-long) (result (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2836 theAEEventClass theAEEventID target returnID transactionID result)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AESend" ((theAppleEvent (:pointer :aedesc)) (reply (:pointer :aedesc)) (sendMode :signed-long) (sendPriority :signed-integer) (timeOutInTicks :signed-long) (idleProc :pointer) (filterProc :pointer))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 3351 theAppleEvent reply sendMode sendPriority timeOutInTicks idleProc filterProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEProcessAppleEvent" ((theEventRecord (:pointer :eventrecord)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 539 theEventRecord)); $ENDC;  ;  Note: during event processing, an event handler may realize that it is likely;  to exceed the client's timeout limit. Passing the reply to this;  routine causes a wait event to be generated that asks the client;  for more time. ; ; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEResetTimer" ((reply (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 537 reply)); $ENDC; *************************************************************************;  The following four calls are available for applications which need more;  sophisticated control over when and how events are processed. Applications;  which implement multi-session servers or which implement their own;  internal event queueing will probably be the major clients of these;  routines. They can be called from within a handler to prevent the AEM from;  disposing of the AppleEvent when the handler returns. They can be used to;  asynchronously process the event (as MacApp does).; *************************************************************************; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AESuspendTheCurrentEvent" ((theAppleEvent (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 555 theAppleEvent)); $ENDC;  ;  Note: The following routine tells the AppleEvent manager that processing;  is either about to resume or has been completed on a previously suspended;  event. The procPtr passed in as the dispatcher parameter will be called to;  attempt to redispatch the event. Several constants for the dispatcher;  parameter allow special behavior. They are:;   	- kAEUseStandardDispatch means redispatch as if the event was just; 	  received, using the standard AppleEvent dispatch mechanism.;   	- kAENoDispatch means ignore the parameter.;    	  Use this in the case where the event has been handled and no; 	  redispatch is needed.;   	- non nil means call the routine which the dispatcher points to.; ; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEResumeTheCurrentEvent" ((theAppleEvent (:pointer :aedesc)) (reply (:pointer :aedesc)) (dispatcher :pointer) (handlerRefcon :signed-long))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2072 theAppleEvent reply dispatcher handlerRefcon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetTheCurrentEvent" ((theAppleEvent (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 538 theAppleEvent)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AESetTheCurrentEvent" ((theAppleEvent (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 556 theAppleEvent)); $ENDC; *************************************************************************;   The following three calls are used to allow applications to behave;   courteously when a user interaction such as a dialog box is needed. ; *************************************************************************; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetInteractionAllowed" ((level (:pointer :signed-byte)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 541 level)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AESetInteractionAllowed" ((level :signed-byte))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 286 level)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEInteractWithUser" ((timeOutInTicks :signed-long) (nmReqPtr (:pointer :nmrec)) (idleProc :pointer))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1564 timeOutInTicks nmReqPtr idleProc)); $ENDC; *************************************************************************;   These calls are used to set up and modify the event dispatch table.; *************************************************************************; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEInstallEventHandler" ((theAEEventClass :ostype) (theAEEventID :ostype) (handler :pointer) (handlerRefcon :signed-long) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2335 theAEEventClass theAEEventID handler handlerRefcon isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AERemoveEventHandler" ((theAEEventClass :ostype) (theAEEventID :ostype) (handler :pointer) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1824 theAEEventClass theAEEventID handler isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetEventHandler" ((theAEEventClass :ostype) (theAEEventID :ostype) (handler (:pointer :pointer)) (handlerRefcon (:pointer :signed-long)) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2337 theAEEventClass theAEEventID handler handlerRefcon isSysHandler)); $ENDC; *************************************************************************;   These calls are used to set up and modify the coercion dispatch table.; *************************************************************************; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEInstallCoercionHandler" ((fromType :ostype) (toType :ostype) (handler :pointer) (handlerRefcon :signed-long) (fromTypeIsDesc :boolean) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2594 fromType toType handler handlerRefcon fromTypeIsDesc isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AERemoveCoercionHandler" ((fromType :ostype) (toType :ostype) (handler :pointer) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1827 fromType toType handler isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetCoercionHandler" ((fromType :ostype) (toType :ostype) (handler (:pointer :pointer)) (handlerRefcon (:pointer :signed-long)) (fromTypeIsDesc (:pointer :boolean)) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 2852 fromType toType handler handlerRefcon fromTypeIsDesc isSysHandler)); $ENDC; *************************************************************************;   These calls are used to set up and modify special hooks into the;   AppleEvent manager.; *************************************************************************; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEInstallSpecialHandler" ((functionClass :ostype) (handler :pointer) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1280 functionClass handler isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AERemoveSpecialHandler" ((functionClass :ostype) (handler :pointer) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1281 functionClass handler isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEGetSpecialHandler" ((functionClass :ostype) (handler (:pointer :pointer)) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1325 functionClass handler isSysHandler)); $ENDC; *************************************************************************;   This call was added in version 1.0.1. If called with the keyword;   keyAERecorderCount ('recr'), the number of recorders that are;   currently active is returned in 'result'.; *************************************************************************;  available only in vers 1.0.1 and greater ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_AEManagerInfo" ((keyWord :ostype) (result (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA816 :d0 1089 keyWord result)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := AppleEventsIncludes; $ENDC                                         ; __APPLEEVENTS__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'AppleEvents);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:AppleEvents.patch(DEF-MACTYPE :EVENTFILTERPROCPTR (FIND-MACTYPE :POINTER));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:AppleEvents.patch (DEF-MACTYPE :EVENTHANDLERPROCPTR (FIND-MACTYPE :POINTER));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:AppleEvents.patch (DEF-MACTYPE :IDLEPROCPTR (FIND-MACTYPE :POINTER));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:AppleEvents.patch (DEFCONSTANT $KAECREATORTYPE :|crea|)