(in-package :TRAPS);;;;;;;;;;;;;;;;;;;;;;;;;;; Modification History;;;; 10/01/96 bill #_TEGetPoint now works for ppc-target;; ------------- 4.0b2;; 06/27/96 bill swap filler1 & tsFace in TextStyle record definition;; ------------- MCL-PPC 3.9;; 03/06/96 bill Map old names to new names;;; Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:TextEdit.p"; at Tuesday June 6,1995 2:04:48 pm.; ;  	File:		TextEdit.p;  ;  	Contains:	TextEdit Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __TEXTEDIT__; $SETC __TEXTEDIT__ := 1; $I+; $SETC TextEditIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	MixedMode.p													; 	QuickdrawText.p												#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(def-mactype :teptr (find-mactype '(:pointer :terec)))(def-mactype :tehandle (find-mactype '(:handle :terec)));  ; 	Important note about TEClickLoopProcPtr and WordBreakProcPtr; ; 	At one point these were defined as returning the function result in the ; 	condition code Z-bit.  This was correct, in that it was what the 68K; 	implementation of TextEdit actually tested.  But, MixedMode had a different ; 	idea of what returning a boolean in the Z-bit meant.  MixedMode was setting; 	the Z-bit the complement of what was wanted.  ; 	; 	Therefore, these ProcPtrs have been changed (back) to return the result in; 	register D0.  It turns out that for register based routines, ; 	MixedMode sets the Z-bit of the 68K emulator based on the contents ; 	of the return result register.  Thus we can get the Z-bit set correctly.  ; 	; 	But, when TextEdit is recoded in PowerPC, if it calls a 68K ClickLoop; 	or WordBreak routine, register D0 had better have the result (in addition; 	to the Z-bit). Therefore all 68K apps should make sure their ClickLoop or; 	WordBreak routines set register D0 at the end.; ; ; 	The following ProcPtrs cannot be written in or called from a high-level ; 	language without the help of mixed mode or assembly glue because they ; 	use the following parameter-passing conventions:; ; 	typedef pascal void (*HighHookProcPtr)(const Rect *r, TEPtr pTE);; 	typedef pascal void (*CaretHookProcPtr)(const Rect *r, TEPtr pTE);; ; 		In:; 			=> 	r						on stack; 			=>	pTE						A3.L; 		Out:; 			none; ; 	typedef pascal Boolean (*EOLHookProcPtr)(char theChar, TEPtr pTE, TEHandle hTE);; ; 		In:; 			=> 	theChar					D0.B; 			=>	pTE						A3.L; 			=>	hTE						A4.L; 		Out:; 			<=	Boolean					Z bit of the CCR; ; 	typedef pascal unsigned short (*WidthHookProcPtr)(unsigned short textLen,; 	 unsigned short textOffset, void *textBufferPtr, TEPtr pTE, TEHandle hTE);; 	typedef pascal unsigned short (*TextWidthHookProcPtr)(unsigned short textLen,; 	 unsigned short textOffset, void *textBufferPtr, TEPtr pTE, TEHandle hTE);; ; 		In:; 			=> 	textLen					D0.W; 			=>	textOffset				D1.W; 			=>	textBufferPtr			A0.L; 			=>	pTE						A3.L; 			=>	hTE						A4.L; 		Out:; 			<=	unsigned short			D1.W; ; 	typedef pascal unsigned short (*NWidthHookProcPtr)(unsigned short styleRunLen,; 	 unsigned short styleRunOffset, short slop, short direction, void *textBufferPtr, ; 	 short *lineStart, TEPtr pTE, TEHandle hTE);; ; 		In:; 			=> 	styleRunLen				D0.W; 			=>	styleRunOffset			D1.W; 			=>	slop					D2.W (low); 			=>	direction				D2.W (high); 			=>	textBufferPtr			A0.L; 			=>	lineStart				A2.L; 			=>	pTE						A3.L; 			=>	hTE						A4.L; 		Out:; 			<=	unsigned short			D1.W; ; 	typedef pascal void (*DrawHookProcPtr)(unsigned short textOffset, unsigned short drawLen,; 	 void *textBufferPtr, TEPtr pTE, TEHandle hTE);; ; 		In:; 			=> 	textOffset				D0.W; 			=>	drawLen					D1.W; 			=>	textBufferPtr			A0.L; 			=>	pTE						A3.L; 			=>	hTE						A4.L; 		Out:; 			none; ; 	typedef pascal Boolean (*HitTestHookProcPtr)(unsigned short styleRunLen,; 	 unsigned short styleRunOffset, unsigned short slop, void *textBufferPtr,; 	 TEPtr pTE, TEHandle hTE, unsigned short *pixelWidth, unsigned short *charOffset, ; 	 Boolean *pixelInChar);; ; 		In:; 			=> 	styleRunLen				D0.W; 			=>	styleRunOffset			D1.W; 			=>	slop					D2.W; 			=>	textBufferPtr			A0.L; 			=>	pTE						A3.L; 			=>	hTE						A4.L; 		Out:; 			<=	pixelWidth				D0.W (low); 			<=	Boolean					D0.W (high); 			<=	charOffset				D1.W; 			<=	pixelInChar				D2.W; ; 	typedef pascal void (*TEFindWordProcPtr)(unsigned short currentPos, short caller, ; 	 TEPtr pTE, TEHandle hTE, unsigned short *wordStart, unsigned short *wordEnd);; ; 		In:; 			=> 	currentPos				D0.W; 			=>	caller					D2.W; 			=>	pTE						A3.L; 			=>	hTE						A4.L; 		Out:; 			<=	wordStart				D0.W; 			<=	wordEnd					D1.W; ; 	typedef pascal void (*TERecalcProcPtr)(TEPtr pTE, unsigned short changeLength,;   	 unsigned short *lineStart, unsigned short *firstChar, unsigned short *lastChar);; ; 		In:; 			=> 	pTE						A3.L; 			=>	changeLength			D7.W; 		Out:; 			<=	lineStart				D2.W; 			<=	firstChar				D3.W; 			<=	lastChar				D4.W; ; 	typedef pascal void (*TEDoTextProcPtr)(TEPtr pTE, unsigned short firstChar, unsigned short lastChar,; 	 					short selector, GrafPtr *currentGrafPort, short *charPosition);; ; 		In:; 			=> 	pTE						A3.L; 			=>	firstChar				D3.W; 			=>	lastChar				D4.W; 			=>	selector				D7.W; 		Out:; 			<=	currentGrafPort			A0.L; 			<=	charPosition			D0.W; 			; (def-mactype :highhookprocptr (find-mactype ':pointer));  PROCEDURE HighHook((CONST)VAR r: Rect; pTE: TEPtr); (def-mactype :eolhookprocptr (find-mactype ':pointer));  FUNCTION EOLHook(theChar: ByteParameter; pTE: TEPtr; hTE: TEHandle): BOOLEAN; (def-mactype :carethookprocptr (find-mactype ':pointer));  PROCEDURE CaretHook((CONST)VAR r: Rect; pTE: TEPtr); (def-mactype :widthhookprocptr (find-mactype ':pointer));  FUNCTION WidthHook(textLen: INTEGER; textOffset: INTEGER; textBufferPtr: UNIV Ptr; pTE: TEPtr; hTE: TEHandle): INTEGER; (def-mactype :textwidthhookprocptr (find-mactype ':pointer));  FUNCTION TextWidthHook(textLen: INTEGER; textOffset: INTEGER; textBufferPtr: UNIV Ptr; pTE: TEPtr; hTE: TEHandle): INTEGER; (def-mactype :nwidthhookprocptr (find-mactype ':pointer));  FUNCTION NWidthHook(styleRunLen: INTEGER; styleRunOffset: INTEGER; slop: INTEGER; direction: INTEGER; textBufferPtr: UNIV Ptr; VAR lineStart: INTEGER; pTE: TEPtr; hTE: TEHandle): INTEGER; (def-mactype :drawhookprocptr (find-mactype ':pointer));  PROCEDURE DrawHook(textOffset: INTEGER; drawLen: INTEGER; textBufferPtr: UNIV Ptr; pTE: TEPtr; hTE: TEHandle); (def-mactype :hittesthookprocptr (find-mactype ':pointer));  FUNCTION HitTestHook(styleRunLen: INTEGER; styleRunOffset: INTEGER; slop: INTEGER; textBufferPtr: UNIV Ptr; pTE: TEPtr; hTE: TEHandle; VAR pixelWidth: INTEGER; VAR charOffset: INTEGER; VAR pixelInChar: BOOLEAN): BOOLEAN; (def-mactype :tefindwordprocptr (find-mactype ':pointer));  PROCEDURE TEFindWord(currentPos: INTEGER; caller: INTEGER; pTE: TEPtr; hTE: TEHandle; VAR wordStart: INTEGER; VAR wordEnd: INTEGER); (def-mactype :terecalcprocptr (find-mactype ':pointer));  PROCEDURE TERecalc(pTE: TEPtr; changeLength: INTEGER; VAR lineStart: INTEGER; VAR firstChar: INTEGER; VAR lastChar: INTEGER); (def-mactype :tedotextprocptr (find-mactype ':pointer));  PROCEDURE TEDoText(pTE: TEPtr; firstChar: INTEGER; lastChar: INTEGER; selector: INTEGER; VAR currentGrafPort: GrafPtr; VAR charPosition: INTEGER); ; ; 		TEClickLoopProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => pTE         	A3.L; 		Out:; 		 <= return value	D0.B; 	(def-mactype :teclickloopprocptr (find-mactype ':pointer));  register FUNCTION TEClickLoop(pTE: TEPtr): BOOLEAN; ; ; 		WordBreakProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => text        	A0.L; 		 => charPos     	D0.W; 		Out:; 		 <= return value	D0.B; 	(def-mactype :wordbreakprocptr (find-mactype ':pointer));  register FUNCTION WordBreak(text: Ptr; charPos: INTEGER): BOOLEAN; (def-mactype :highhookupp (find-mactype ':pointer))(def-mactype :eolhookupp (find-mactype ':pointer))(def-mactype :carethookupp (find-mactype ':pointer))(def-mactype :widthhookupp (find-mactype ':pointer))(def-mactype :textwidthhookupp (find-mactype ':pointer))(def-mactype :nwidthhookupp (find-mactype ':pointer))(def-mactype :drawhookupp (find-mactype ':pointer))(def-mactype :hittesthookupp (find-mactype ':pointer))(def-mactype :tefindwordupp (find-mactype ':pointer))(def-mactype :terecalcupp (find-mactype ':pointer))(def-mactype :tedotextupp (find-mactype ':pointer))(def-mactype :teclickloopupp (find-mactype ':pointer))(def-mactype :wordbreakupp (find-mactype ':pointer));; This form has been patched from HD:CCL3.0d17:Interface Translator:Patches:TextEdit.patch#|(defrecord (TERec :handle)    (destRect :rect)   (viewRect :rect)   (selRect :rect)   (lineHeight :signed-integer)   (fontAscent :signed-integer)   (selPoint :point)   (selStart :signed-integer)   (selEnd :signed-integer)   (active :signed-integer)   (wordBreak :pointer)   (clickLoop :pointer)   (clickTime :signed-long)   (clickLoc :signed-integer)   (caretTime :signed-long)   (caretState :signed-integer)   (just :signed-integer)   (teLength :signed-integer)   (hText :handle)   (hDispatchRec :signed-long)                  ;  added to replace recalBack & recalLines.  it's a handle anyway    (clikStuff :signed-integer)   (crOnly :signed-integer)   (txFont :signed-integer)   (txFace :unsigned-byte)                      ; txFace is unpacked byte   (txMode :signed-integer)   (txSize :signed-integer)   (inPort (:pointer :grafport))   (highHook :pointer)   (caretHook :pointer)   (nLines :signed-integer)   (lineStarts (:array :signed-integer 16001))   )|#;Friday May 19,1995 added by alanr to handle new and old spellings of clikloop/clickloop(defrecord (TERec :handle)    (destRect :rect)   (viewRect :rect)   (selRect :rect)   (lineHeight :signed-integer)   (fontAscent :signed-integer)   (selPoint :point)   (selStart :signed-integer)   (selEnd :signed-integer)   (active :signed-integer)   (wordBreak :pointer)   (:variant    ((clickLoop :pointer))  ;; <---- here ----------    ((clikLoop :pointer)))   (clickTime :signed-long)   (clickLoc :signed-integer)   (caretTime :signed-long)   (caretState :signed-integer)   (just :signed-integer)   (teLength :signed-integer)   (hText :handle)   (hDispatchRec :signed-long)                  ;  added to replace recalBack & recalLines.  it's a handle anyway    (clikStuff :signed-integer)   (crOnly :signed-integer)   (txFont :signed-integer)   (txFace :unsigned-byte)                      ; txFace is unpacked byte   (txMode :signed-integer)   (txSize :signed-integer)   (inPort (:pointer :grafport))   (highHook :pointer)   (caretHook :pointer)   (nLines :signed-integer)   (lineStarts (:array :signed-integer 16001))   );  Justification (word alignment) styles (defconstant $teJustLeft 0)(defconstant $teJustCenter 1)(defconstant $teJustRight -1)(defconstant $teForceLeft -2);  new names for the Justification (word alignment) styles (defconstant $teFlushDefault 0)                 ; flush according to the line direction (defconstant $teCenter 1)                       ; center justify (word alignment) (defconstant $teFlushRight -1)                  ; flush right for all scripts (defconstant $teFlushLeft -2)                   ; flush left for all scripts ;  Set/Replace style modes (defconstant $fontBit 0)                        ; set font(defconstant $faceBit 1)                        ; set face(defconstant $sizeBit 2)                        ; set size(defconstant $clrBit 3)                         ; set color(defconstant $addSizeBit 4)                     ; add size mode(defconstant $toggleBit 5)                      ; set faces in toggle mode(defconstant $toglBit 5)                        ;  obsolete.  use toggleBit ;  TESetStyle/TEContinuousStyle modes (defconstant $doFont 1)                         ;  set font (family) number(defconstant $doFace 2)                         ; set character style(defconstant $doSize 4)                         ; set type size(defconstant $doColor 8)                        ; set color(defconstant $doAll 15)                         ; set all attributes(defconstant $addSize 16)                       ; adjust type size(defconstant $doToggle 32)                      ; toggle mode for TESetStyle;  offsets into TEDispatchRec (defconstant $EOLHook 0)                        ; [UniversalProcPtr] TEEOLHook(defconstant $DRAWHook 4)                       ; [UniversalProcPtr] TEWidthHook(defconstant $WIDTHHook 8)                      ; [UniversalProcPtr] TEDrawHook(defconstant $HITTESTHook 12)                   ; [UniversalProcPtr] TEHitTestHook(defconstant $nWIDTHHook 24)                    ; [UniversalProcPtr] nTEWidthHook(defconstant $TextWidthHook 28)                 ; [UniversalProcPtr] TETextWidthHook;  selectors for TECustomHook (defconstant $intEOLHook 0)                     ; TEIntHook value(defconstant $intDrawHook 1)                    ; TEIntHook value(defconstant $intWidthHook 2)                   ; TEIntHook value(defconstant $intHitTestHook 3)                 ; TEIntHook value(defconstant $intNWidthHook 6)                  ; TEIntHook value for new version of WidthHook(defconstant $intTextWidthHook 7)               ; TEIntHook value for new TextWidthHook(defconstant $teFAutoScroll 0)                  ; 00000001b(defconstant $teFAutoScr 0)                     ; 00000001b  obsolete. use teFAutoScroll(defconstant $teFTextBuffering 1)               ; 00000010b(defconstant $teFOutlineHilite 2)               ; 00000100b(defconstant $teFInlineInput 3)                 ; 00001000b (defconstant $teFUseTextServices 4)             ; 00010000b ;  action for the new "bit (un)set" interface, TEFeatureFlag (defconstant $teBitClear 0)(defconstant $teBitSet 1)                       ; set the selector bit(defconstant $teBitTest -1)                     ; no change; just return the current setting; constants for identifying the routine that called FindWord (defconstant $teWordSelect 4)                   ; clickExpand to select word(defconstant $teWordDrag 8)                     ; clickExpand to drag new word(defconstant $teFromFind 12)                    ; FindLine called it ($0C)(defconstant $teFromRecal 16)                   ; RecalLines called it ($10)      obsolete ; constants for identifying TEDoText selectors (defconstant $teFind 0)                         ; TEDoText called for searching(defconstant $teHighlight 1)                    ; TEDoText called for highlighting(defconstant $teDraw -1)                        ; TEDoText called for drawing text(defconstant $teCaret -2)                       ; TEDoText called for drawing the caret(defrecord (Chars :handle) (array (array :character 32001 :packed)))(def-mactype :charsptr (find-mactype '(:pointer :chars)))(def-mactype :charshandle (find-mactype '(:handle :chars)))(defrecord StyleRun    (startChar :signed-integer)                  ; starting character position   (styleIndex :signed-integer)                 ; index in style table   );; This form has been patched from HD:CCL3.0d17:Interface Translator:Patches:TextEdit.patch#|(defrecord STElement    (stCount :signed-integer)                    ; number of runs in this style   (stHeight :signed-integer)                   ; line height   (stAscent :signed-integer)                   ; font ascent   (stFont :signed-integer)                     ; font (family) number   (stFace :unsigned-byte)                      ; character Style   (stSize :signed-integer)                     ; size in points   (stColor :rgbcolor)                          ; absolute (RGB) color   )|#;;; TERec is patched up automatically now.;;; but this one needs work...;;; the next three definitions are confusing. Usually the filler would;;; come after the byte argument, but here they are before it.;;; But in the C headers the filler (explicit) comes second. Sent mail to;;; nick Monday May 22,1995(defrecord STElement   (stCount :signed-integer)    ; number of runs in this style  (stHeight :signed-integer)   ; line height  (stAscent :signed-integer)   ; font ascent  (stFont :signed-integer)     ; font (family) number  (filler1 :signed-byte)  (stFace :unsigned-byte); character Style  (stSize :signed-integer)     ; size in points  (stColor :rgbcolor)          ; absolute (RGB) color  )(defrecord (TEStyleTable :handle) (array (array :stelement 1777)))(def-mactype :stptr (find-mactype '(:pointer :testyletable)))(def-mactype :sthandle (find-mactype '(:handle :testyletable)))(defrecord LHElement    (lhHeight :signed-integer)                   ; maximum height in line   (lhAscent :signed-integer)                   ; maximum ascent in line   )(defrecord (LHTable :handle) (array (array :lhelement 8001)))(def-mactype :lhptr (find-mactype '(:pointer :lhtable)))(def-mactype :lhhandle (find-mactype '(:handle :lhtable)));; This form has been patched from HD:CCL3.0d17:Interface Translator:Patches:TextEdit.patch#|(defrecord ScrpSTElement    (scrpStartChar :signed-long)                 ; starting character position   (scrpHeight :signed-integer)                 ; starting character position   (scrpAscent :signed-integer)   (scrpFont :signed-integer)   (scrpFace :unsigned-byte)                    ; unpacked byte   (scrpSize :signed-integer)   (scrpColor :rgbcolor)   )|#(defrecord ScrpSTElement   (scrpStartChar :signed-long) ; starting character position  (scrpHeight :signed-integer) ; starting character position  (scrpAscent :signed-integer)  (scrpFont :signed-integer)  ;(filler1 :signed-byte)  (scrpFace :unsigned-byte); unpacked byte  (scrpSize :signed-integer)  (scrpColor :rgbcolor)  );  ARRAY [0..1600] OF ScrpSTElement (defrecord ScrpSTTable (array (array :scrpstelement 1601)))(defrecord (StScrpRec :handle)    (scrpNStyles :signed-integer)                ; number of styles in scrap   (scrpStyleTab :scrpsttable)                  ; table of styles for scrap   )(def-mactype :stscrpptr (find-mactype '(:pointer :stscrprec)))(def-mactype :stscrphandle (find-mactype '(:handle :stscrprec)))(defrecord (NullStRec :handle)    (teReserved :signed-long)                    ; reserved for future expansion   (nullScrap (:handle :stscrprec))             ; handle to scrap style table   )(def-mactype :nullstptr (find-mactype '(:pointer :nullstrec)))(def-mactype :nullsthandle (find-mactype '(:handle :nullstrec)))(defrecord (TEStyleRec :handle)    (nRuns :signed-integer)                      ; number of style runs   (nStyles :signed-integer)                    ; size of style table   (styleTab (:handle :testyletable))           ; handle to style table   (lhTab (:handle :lhtable))                   ; handle to line-height table   (teRefCon :signed-long)                      ; reserved for application use   (nullStyle (:handle :nullstrec))             ; Handle to style set at null selection   (runs (:array :stylerun 8001))               ; ARRAY [0..8000] OF StyleRun   )(def-mactype :testyleptr (find-mactype '(:pointer :testylerec)))(def-mactype :testylehandle (find-mactype '(:handle :testylerec)));; This form has been patched from HD:CCL3.0d17:Interface Translator:Patches:TextEdit.patch#|(defrecord (TextStyle :handle)    (tsFont :signed-integer)                     ; font (family) number   (tsFace :unsigned-byte)                      ; character Style   (tsSize :signed-integer)                     ; size in point   (tsColor :rgbcolor)                          ; absolute (RGB) color   )|#(defrecord (TextStyle :handle)   (tsFont :signed-integer)     ; font (family) number  (tsFace :unsigned-byte); character Style  (filler1 :signed-byte)  (tsSize :signed-integer)     ; size in point  (tsColor :rgbcolor)          ; absolute (RGB) color  )(def-mactype :textstyleptr (find-mactype '(:pointer :textstyle)))(def-mactype :textstylehandle (find-mactype '(:handle :textstyle)))(def-mactype :teinthook (find-mactype ':signed-integer))(defconstant $uppHighHookProcInfo #xF)          ;  SPECIAL_CASE_PROCINFO( kSpecialCaseHighHook ) (defconstant $uppEOLHookProcInfo #x1F)          ;  SPECIAL_CASE_PROCINFO( kSpecialCaseEOLHook ) (defconstant $uppCaretHookProcInfo #xF)         ;  SPECIAL_CASE_PROCINFO( kSpecialCaseCaretHook ) (defconstant $uppWidthHookProcInfo #x2F)        ;  SPECIAL_CASE_PROCINFO( kSpecialCaseWidthHook ) (defconstant $uppTextWidthHookProcInfo #x2F)    ;  SPECIAL_CASE_PROCINFO( kSpecialCaseTextWidthHook ) (defconstant $uppNWidthHookProcInfo #x3F)       ;  SPECIAL_CASE_PROCINFO( kSpecialCaseNWidthHook ) (defconstant $uppDrawHookProcInfo #x4F)         ;  SPECIAL_CASE_PROCINFO( kSpecialCaseDrawHook ) (defconstant $uppHitTestHookProcInfo #x5F)      ;  SPECIAL_CASE_PROCINFO( kSpecialCaseHitTestHook ) (defconstant $uppTEFindWordProcInfo #x6F)       ;  SPECIAL_CASE_PROCINFO( kSpecialCaseTEFindWord ) (defconstant $uppTERecalcProcInfo #x9F)         ;  SPECIAL_CASE_PROCINFO( kSpecialCaseTERecalc ) (defconstant $uppTEDoTextProcInfo #xAF)         ;  SPECIAL_CASE_PROCINFO( kSpecialCaseTEDoText ) (defconstant $uppTEClickLoopProcInfo #xF812)    ;  Register FUNCTION (4 bytes in A3): 1 byte in D0; (defconstant $uppWordBreakProcInfo #x29812)     ;  Register FUNCTION (4 bytes in A0, 2 bytes in D0): 1 byte in D0; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewHighHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewEOLHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewCaretHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewWidthHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewTextWidthHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewNWidthHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDrawHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewHitTestHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewTEFindWordProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewTERecalcProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewTEDoTextProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewTEClickLoopProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewWordBreakProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallHighHookProc" ((r (:pointer :rect)) (pTE (:pointer :terec)) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallEOLHookProc" ((theChar :signed-byte) (pTE (:pointer :terec)) (hTE (:handle :terec)) (userRoutine :pointer))   :boolean   () )                                         ; CONST; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallCaretHookProc" ((r (:pointer :rect)) (pTE (:pointer :terec)) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallWidthHookProc" ((textLen :signed-integer) (textOffset :signed-integer) (textBufferPtr :pointer) (pTE (:pointer :terec)) (hTE (:handle :terec)) (userRoutine :pointer))   :signed-integer   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallTextWidthHookProc" ((textLen :signed-integer) (textOffset :signed-integer) (textBufferPtr :pointer) (pTE (:pointer :terec)) (hTE (:handle :terec)) (userRoutine :pointer))   :signed-integer   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallNWidthHookProc" ((styleRunLen :signed-integer) (styleRunOffset :signed-integer) (slop :signed-integer) (direction :signed-integer) (textBufferPtr :pointer) (lineStart (:pointer :signed-integer)) (pTE (:pointer :terec)) (hTE (:handle :terec)) (userRoutine :pointer))   :signed-integer   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallDrawHookProc" ((textOffset :signed-integer) (drawLen :signed-integer) (textBufferPtr :pointer) (pTE (:pointer :terec)) (hTE (:handle :terec)) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallHitTestHookProc" ((styleRunLen :signed-integer) (styleRunOffset :signed-integer) (slop :signed-integer) (textBufferPtr :pointer) (pTE (:pointer :terec)) (hTE (:handle :terec)) (pixelWidth (:pointer :signed-integer)) (charOffset (:pointer :signed-integer)) (pixelInChar (:pointer :boolean)) (userRoutine :pointer))   :boolean   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallTEFindWordProc" ((currentPos :signed-integer) (caller :signed-integer) (pTE (:pointer :terec)) (hTE (:handle :terec)) (wordStart (:pointer :signed-integer)) (wordEnd (:pointer :signed-integer)) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallTERecalcProc" ((pTE (:pointer :terec)) (changeLength :signed-integer) (lineStart (:pointer :signed-integer)) (firstChar (:pointer :signed-integer)) (lastChar (:pointer :signed-integer)) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters according to special case conventions.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallTEDoTextProc" ((pTE (:pointer :terec)) (firstChar :signed-integer) (lastChar :signed-integer) (selector :signed-integer) (currentGrafPort (:pointer (:pointer :grafport))) (charPosition (:pointer :signed-integer)) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallTEClickLoopProc" ((pTE (:pointer :terec)) (userRoutine :pointer))   :boolean   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallWordBreakProc" ((text :pointer) (charPos :signed-integer) (userRoutine :pointer))   :boolean   () )                                         ; $IFC NOT CFMSYSTEMCALLS;; Generated by translator read-long-from-memory(deftrap "_TEScrapHandle" ()   (:no-trap :handle)   (:no-trap (%get-ptr (%int-to-ptr 2740))))    ;  MOVE.l $0AB4,(SP) ; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_TEGetScrapLength" ()   :signed-long   () )                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEInit" ()   nil   (:stack-trap #xA9CC)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TENew" ((destRect (:pointer :rect)) (viewRect (:pointer :rect)))   (:stack (:handle :terec))   (:stack-trap #xA9D2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEDispose" ((hTE (:handle :terec)))   nil   (:stack-trap #xA9CD)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TESetText" ((text :pointer) (length :signed-long) (hTE (:handle :terec)))   nil   (:stack-trap #xA9CF)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEGetText" ((hTE (:handle :terec)))   (:stack (:handle :chars))   (:stack-trap #xA9CB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEIdle" ((hTE (:handle :terec)))   nil   (:stack-trap #xA9DA)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TESetSelect" ((selStart :signed-long) (selEnd :signed-long) (hTE (:handle :terec)))   nil   (:stack-trap #xA9D1)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEActivate" ((hTE (:handle :terec)))   nil   (:stack-trap #xA9D8)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEDeactivate" ((hTE (:handle :terec)))   nil   (:stack-trap #xA9D9)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEKey" ((key :character) (hTE (:handle :terec)))   nil   (:stack-trap #xA9DC)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TECut" ((hTE (:handle :terec)))   nil   (:stack-trap #xA9D6)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TECopy" ((hTE (:handle :terec)))   nil   (:stack-trap #xA9D5)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEPaste" ((hTE (:handle :terec)))   nil   (:stack-trap #xA9DB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEDelete" ((hTE (:handle :terec)))   nil   (:stack-trap #xA9D7)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEInsert" ((text :pointer) (length :signed-long) (hTE (:handle :terec)))   nil   (:stack-trap #xA9DE)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TESetAlignment" ((just :signed-integer) (hTE (:handle :terec)))   nil   (:stack-trap #xA9DF)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEUpdate" ((rUpdate (:pointer :rect)) (hTE (:handle :terec)))   nil   (:stack-trap #xA9D3)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TETextBox" ((text :pointer) (length :signed-long) (box (:pointer :rect)) (just :signed-integer))   nil   (:stack-trap #xA9CE)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEScroll" ((dh :signed-integer) (dv :signed-integer) (hTE (:handle :terec)))   nil   (:stack-trap #xA9DD)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TESelView" ((hTE (:handle :terec)))   nil   (:stack-trap #xA811)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEPinScroll" ((dh :signed-integer) (dv :signed-integer) (hTE (:handle :terec)))   nil   (:stack-trap #xA812)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEAutoView" ((fAuto :boolean) (hTE (:handle :terec)))   nil   (:stack-trap #xA813)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TECalText" ((hTE (:handle :terec)))   nil   (:stack-trap #xA9D0)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEGetOffset" ((pt :point) (hTE (:handle :terec)))   (:stack :signed-integer)   (:stack-trap #xA83C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap (_TEGetPoint nil) ((offset :signed-integer) (hTE (:handle :terec)))   (:no-trap :point)   (:no-trap    #+ppc-target    (ccl::rlet ((p :long))      (ccl::FF-CALL-SLEP       #.(ccl::get-shared-library-entry-point "TEGetPoint")       :ADDRESS p       :SIGNED-HALFWORD offset       :ADDRESS hTE       :VOID)      (%get-long p))    #-ppc-target    (stack-trap #xa83d :word offset :ptr hte :word 8 :long))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEClick" ((pt :point) (fExtend :boolean) (h (:handle :terec)))   nil   (:stack-trap #xA9D4)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TEStyleNew" ((destRect (:pointer :rect)) (viewRect (:pointer :rect)))   (:stack (:handle :terec))   (:stack-trap #xA83E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TESetStyleHandle" ((theHandle (:handle :testylerec)) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D theHandle hTE (5 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEGetStyleHandle" ((hTE (:handle :terec)))   (:stack (:handle :testylerec))   (:stack-trap #xA83D hTE (4 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEGetStyle" ((offset :signed-integer) (theStyle (:pointer :textstyle)) (lineHeight (:pointer :signed-integer)) (fontAscent (:pointer :signed-integer)) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D offset theStyle lineHeight fontAscent hTE (3 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEStylePaste" ((hTE (:handle :terec)))   nil   (:stack-trap #xA83D hTE (0 :signed-integer))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TESetStyle" ((mode :signed-integer) (newStyle (:pointer :textstyle)) (fRedraw :boolean) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D mode newStyle fRedraw hTE (1 :signed-integer))); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEReplaceStyle" ((mode :signed-integer) (oldStyle (:pointer :textstyle)) (newStyle (:pointer :textstyle)) (fRedraw :boolean) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D mode oldStyle newStyle fRedraw hTE (2 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEGetStyleScrapHandle" ((hTE (:handle :terec)))   (:stack (:handle :stscrprec))   (:stack-trap #xA83D hTE (6 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEStyleInsert" ((text :pointer) (length :signed-long) (hST (:handle :stscrprec)) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D text length hST hTE (7 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEGetHeight" ((endLine :signed-long) (startLine :signed-long) (hTE (:handle :terec)))   (:stack :signed-long)   (:stack-trap #xA83D endLine startLine hTE (9 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEContinuousStyle" ((mode (:pointer :signed-integer)) (aStyle (:pointer :textstyle)) (hTE (:handle :terec)))   (:stack :boolean)   (:stack-trap #xA83D mode aStyle hTE (10 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEUseStyleScrap" ((rangeStart :signed-long) (rangeEnd :signed-long) (newStyles (:handle :stscrprec)) (fRedraw :boolean) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D rangeStart rangeEnd newStyles fRedraw hTE (11 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TECustomHook" ((which :signed-integer) (addr (:pointer :pointer)) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D which addr hTE (12 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TENumStyles" ((rangeStart :signed-long) (rangeEnd :signed-long) (hTE (:handle :terec)))   (:stack :signed-long)   (:stack-trap #xA83D rangeStart rangeEnd hTE (13 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEFeatureFlag" ((feature :signed-integer) (action :signed-integer) (hTE (:handle :terec)))   (:stack :signed-integer)   (:stack-trap #xA83D feature action hTE (14 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_TEGetHiliteRgn" ((region (:handle :region)) (hTE (:handle :terec)))   (:stack :signed-integer)   (:stack-trap #xA83D region hTE (15 :signed-integer))); $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_TESetScrapLength" ((length :signed-long))   nil   () );; Warning: No calling method defined for this trap(deftrap-inline "_TEFromScrap" ()   :signed-integer   () );; Warning: No calling method defined for this trap(deftrap-inline "_TEToScrap" ()   :signed-integer   () );; Warning: No calling method defined for this trap(deftrap-inline "_TESetClickLoop" ((clikProc :pointer) (hTE (:handle :terec)))   nil   () )                                         ;  ; 	There is no function to get/set the low-mem for FindWordHook at 0x07F8.; 	This is because it is not a low-mem ProcPtr. That address is the entry; 	in the OS TrapTable for trap 0xA0FE.  You can use Get/SetTrapAddress to ; 	acccess it.;                                               ; $IFC OLDROUTINENAMES ;; Warning: No calling method defined for this trap(deftrap-inline "_TESetWordBreak" ((wBrkProc :pointer) (hTE (:handle :terec)))   nil   () )                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap ("_TESetJust" "TESetAlignment")         ((just :signed-integer) (hTE (:handle :terec)))   nil   (:stack-trap #xA9DF)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap ("_TextBox" "TETextBox")         ((text :pointer) (length :signed-long) (box (:pointer :rect)) (just :signed-integer))   nil   (:stack-trap #xA9CE)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap ("_TEStylNew" "TEStyleNew")         ((destRect (:pointer :rect)) (viewRect (:pointer :rect)))   (:stack (:handle :terec))   (:stack-trap #xA83E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_SetStylHandle" "TESetStyleHandle")         ((theHandle (:handle :testylerec)) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D theHandle hTE (5 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_SetStyleHandle" "TESetStyleHandle") ((theHandle (:handle :testylerec)) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D theHandle hTE (5 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_GetStylHandle" "TEGetStyleHandle")         ((hTE (:handle :terec)))   (:stack (:handle :testylerec))   (:stack-trap #xA83D hTE (4 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_GetStyleHandle" "TEGetStyleHandle")         ((hTE (:handle :terec)))   (:stack (:handle :testylerec))   (:stack-trap #xA83D hTE (4 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_TEStylPaste" "TEStylePaste")         ((hTE (:handle :terec)))   nil   (:stack-trap #xA83D hTE (0 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_GetStylScrap" "TEGetStyleScrapHandle")         ((hTE (:handle :terec)))   (:stack (:handle :stscrprec))   (:stack-trap #xA83D hTE (6 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_GetStyleScrap" "TEGetStyleScrapHandle")         ((hTE (:handle :terec)))   (:stack (:handle :stscrprec))   (:stack-trap #xA83D hTE (6 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_SetStylScrap" "TEUseStyleScrap")         ((rangeStart :signed-long) (rangeEnd :signed-long) (newStyles (:handle :stscrprec)) (fRedraw :boolean) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D rangeStart rangeEnd newStyles fRedraw hTE (11 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_SetStyleScrap" "TEUseStyleScrap")         ((rangeStart :signed-long) (rangeEnd :signed-long) (newStyles (:handle :stscrprec)) (fRedraw :boolean) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D rangeStart rangeEnd newStyles fRedraw hTE (11 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_TEStylInsert" "TEStyleInsert")         ((text :pointer) (length :signed-long) (hST (:handle :stscrprec)) (hTE (:handle :terec)))   nil   (:stack-trap #xA83D text length hST hTE (7 :signed-integer))); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of tesetscraplen because there is no implementation in the new headers(deftrap ("_TESetScrapLen" "TESetScrapLength")         ((length :signed-long))         nil         (:no-trap (%put-word length (%int-to-ptr 2736))));; Warning: No calling method defined for this trap;; Using mcl2 version of tegetscraplen because there is no implementation in the new headers(deftrap ("_TEGetScrapLen" "TEGetScrapLength")         nil         (:no-trap :signed-long)         (:no-trap (%get-unsigned-word (%int-to-ptr 2736))));; Warning: No calling method defined for this trap;; Using mcl2 version of setclikloop because there is no implementation in the new headers(deftrap ("_SetClikLoop" "TESetClickLoop")         ((clikproc :pointer) (hte (:handle :terec)))         nil         (:no-trap (setf (rref hte terec.clikloop) clickproc))); $ENDC                                         ; $ALIGN RESET; $POP; $SETC UsingIncludes := TextEditIncludes; $ENDC; __TEXTEDIT__#|                                              ; $IFC NOT UsingIncludes;; No calling method defined for this trap;; Using mcl2 version of setwordbreak because there is no implementation in the new headers(deftrap ("_SetWordBreak" "TESetWordBreak")         ((wbrkproc :pointer) (hte (:handle :terec)))         nil         (:no-trap (setf (rref hte terec.wordbreak) wbrkproc))) |#                                             ; $ENDC(provide-interface 'TextEdit);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:TEXTEDIT.patch(DEFTRAP ("_SETWORDBREAK" "TESetWordBreak")         ((WBRKPROC :POINTER) (HTE (:HANDLE :TEREC)))         NIL         (:NO-TRAP (SETF (RREF HTE TEREC.WORDBREAK) WBRKPROC)))