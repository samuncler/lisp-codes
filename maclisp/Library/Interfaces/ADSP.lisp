(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:ADSP.p"; at Tuesday June 6,1995 1:59:28 pm.; ;  	File:		ADSP.p;  ;  	Contains:	AppleTalk Data Stream Protocol (ADSP) Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __ADSP__; $SETC __ADSP__ := 1; $I+; $SETC ADSPIncludes := UsingIncludes; $SETC UsingIncludes := 1; $IFC UNDEFINED __ERRORS__(require-interface 'Errors)                     ; $I Errors.p; $ENDC; 	ConditionalMacros.p											; $IFC UNDEFINED __APPLETALK__(require-interface 'AppleTalk)                  ; $I AppleTalk.p; $ENDC; 	Types.p														; 	OSUtils.p													; 		MixedMode.p												; 		Memory.p												; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $dspInit 255)                      ;  create a new connection end (defconstant $dspRemove 254)                    ;  remove a connection end (defconstant $dspOpen 253)                      ;  open a connection (defconstant $dspClose 252)                     ;  close a connection (defconstant $dspCLInit 251)                    ;  create a connection listener (defconstant $dspCLRemove 250)                  ;  remove a connection listener (defconstant $dspCLListen 249)                  ;  post a listener request (defconstant $dspCLDeny 248)                    ;  deny an open connection request (defconstant $dspStatus 247)                    ;  get status of connection end (defconstant $dspRead 246)                      ;  read data from the connection (defconstant $dspWrite 245)                     ;  write data on the connection (defconstant $dspAttention 244)                 ;  send an attention message (defconstant $dspOptions 243)                   ;  set connection end options (defconstant $dspReset 242)                     ;  forward reset the connection (defconstant $dspNewCID 241)                    ;  generate a cid for a connection end ;  connection opening modes (defconstant $ocRequest 1)                      ;  request a connection with remote (defconstant $ocPassive 2)                      ;  wait for a connection request from remote (defconstant $ocAccept 3)                       ;  accept request as delivered by listener (defconstant $ocEstablish 4)                    ;  consider connection to be open ;  connection end states (defconstant $sListening 1)                     ;  for connection listeners (defconstant $sPassive 2)                       ;  waiting for a connection request from remote (defconstant $sOpening 3)                       ;  requesting a connection with remote (defconstant $sOpen 4)                          ;  connection is open (defconstant $sClosing 5)                       ;  connection is being torn down (defconstant $sClosed 6)                        ;  connection end state is closed ;  client event flags (defconstant $eClosed #x80)                     ;  received connection closed advice (defconstant $eTearDown #x40)                   ;  connection closed due to broken connection (defconstant $eAttention #x20)                  ;  received attention message (defconstant $eFwdReset #x10)                   ;  received forward reset advice ;  miscellaneous constants (defconstant $attnBufSize 570)                  ;  size of client attention buffer (defconstant $minDSPQueueSize 100)              ;  Minimum size of receive or send Queue ;  connection control block (defrecord TRCCB    (ccbLink (:pointer :trccb))                  ;  link to next ccb    (refNum :unsigned-integer)                   ;  user reference number    (state :unsigned-integer)                    ;  state of the connection end    (userFlags :unsigned-byte)                   ;  flags for unsolicited connection events    (localSocket :unsigned-byte)                 ;  socket number of this connection end    (remoteAddress :addrblock)                   ;  internet address of remote end    (attnCode :unsigned-integer)                 ;  attention code received    (attnSize :unsigned-integer)                 ;  size of received attention data    (attnPtr :pointer)                           ;  ptr to received attention data    (reserved (:array :unsigned-byte 220 :packed));  for adsp internal use    )(def-mactype :tpccb (find-mactype '(:pointer :trccb)))(def-mactype :dsppbptr (find-mactype '(:pointer :dspparamblock))); ; 		ADSPConnectionEventProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => sourceCCB   	A1.L; 	(def-mactype :adspconnectioneventprocptr (find-mactype ':pointer));  register PROCEDURE ADSPConnectionEvent(sourceCCB: TPCCB); ; ; 		ADSPCompletionProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => thePBPtr    	A0.L; 	(def-mactype :adspcompletionprocptr (find-mactype ':pointer));  register PROCEDURE ADSPCompletion(thePBPtr: DSPPBPtr); (def-mactype :adspconnectioneventupp (find-mactype ':pointer))(def-mactype :adspcompletionupp (find-mactype ':pointer))(defrecord DSPParamBlock    (qLink (:pointer :qelem))   (qType :signed-integer)   (ioTrap :signed-integer)   (ioCmdAddr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (ioNamePtr (:pointer (:string 255)))   (ioVRefNum :signed-integer)   (ioCRefNum :signed-integer)                  ;  adsp driver refNum    (csCode :signed-integer)                     ;  adsp driver control code    (qStatus :signed-long)                       ;  adsp internal use    (ccbRefNum :signed-integer)   (:variant       (      (ccbPtr (:pointer :trccb))                ;  pointer to connection control block       (userRoutine :pointer)                    ;  client routine to call on event       (sendQSize :unsigned-integer)             ;  size of send queue (0..64K bytes)       (sendQueue :pointer)                      ;  client passed send queue buffer       (recvQSize :unsigned-integer)             ;  size of receive queue (0..64K bytes)       (recvQueue :pointer)                      ;  client passed receive queue buffer       (attnPtr :pointer)                        ;  client passed receive attention buffer       (localSocket :unsigned-byte)              ;  local socket number       (filler1 :unsigned-byte)                  ;  filler for proper byte alignment       )      (      (localCID :unsigned-integer)              ;  local connection id       (remoteCID :unsigned-integer)             ;  remote connection id       (remoteAddress :addrblock)                ;  address of remote end       (filterAddress :addrblock)                ;  address filter       (sendSeq :unsigned-long)                  ;  local send sequence number       (sendWindow :unsigned-integer)            ;  send window size       (recvSeq :unsigned-long)                  ;  receive sequence number       (attnSendSeq :unsigned-long)              ;  attention send sequence number       (attnRecvSeq :unsigned-long)              ;  attention receive sequence number       (ocMode :unsigned-byte)                   ;  open connection mode       (ocInterval :unsigned-byte)               ;  open connection request retry interval       (ocMaximum :unsigned-byte)                ;  open connection request retry maximum       (filler2 :unsigned-byte)                  ;  filler for proper byte alignment       )      (      (abort :unsigned-byte)                    ;  abort connection immediately if non-zero       (filler3 :unsigned-byte)                  ;  filler for proper byte alignment       )      (      (reqCount :unsigned-integer)              ;  requested number of bytes       (actCount :unsigned-integer)              ;  actual number of bytes       (dataPtr :pointer)                        ;  pointer to data buffer       (eom :unsigned-byte)                      ;  indicates logical end of message       (flush :unsigned-byte)                    ;  send data now       )      (      (attnCode :unsigned-integer)              ;  client attention code       (attnSize :unsigned-integer)              ;  size of attention data       (attnData :pointer)                       ;  pointer to attention data       (attnInterval :unsigned-byte)             ;  retransmit timer in 10-tick intervals       (filler4 :unsigned-byte)                  ;  filler for proper byte alignment       )      (      (statusCCB (:pointer :trccb))             ;  pointer to ccb       (sendQPending :unsigned-integer)          ;  pending bytes in send queue       (sendQFree :unsigned-integer)             ;  available buffer space in send queue       (recvQPending :unsigned-integer)          ;  pending bytes in receive queue       (recvQFree :unsigned-integer)             ;  available buffer space in receive queue       )      (      (sendBlocking :unsigned-integer)          ;  quantum for data packets       (sendTimer :unsigned-byte)                ;  send timer in 10-tick intervals       (rtmtTimer :unsigned-byte)                ;  retransmit timer in 10-tick intervals       (badSeqMax :unsigned-byte)                ;  threshold for sending retransmit advice       (useCheckSum :unsigned-byte)              ;  use ddp packet checksum       )      (      (newcid :unsigned-integer)                ;  new connection id returned       )      )   )(defconstant $uppADSPConnectionEventProcInfo #xB802);  Register PROCEDURE (4 bytes in A1); (defconstant $uppADSPCompletionProcInfo #x9802) ;  Register PROCEDURE (4 bytes in A0); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewADSPConnectionEventProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewADSPCompletionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM                        ; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallADSPConnectionEventProc" ((sourceCCB (:pointer :trccb)) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM; To be implemented:  Glue to move parameters into registers.; $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := ADSPIncludes; $ENDC; __ADSP__; $IFC NOT UsingIncludes;; Warning: No calling method defined for this trap(deftrap-inline "_CallADSPCompletionProc" ((thePBPtr (:pointer :dspparamblock)) (userRoutine :pointer))   nil   () ); $ENDC(provide-interface 'ADSP)