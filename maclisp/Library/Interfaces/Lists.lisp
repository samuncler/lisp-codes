(in-package :TRAPS);;;;;;;;;;;;;;;;;;;;;;;;;;; Modification History;;;; 10/01/96 bill #_LLastClick now works for ppc-target;;; Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Lists.p"; at Tuesday June 6,1995 2:13:05 pm.; ;  	File:		Lists.p;  ;  	Contains:	List Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __LISTS__; $SETC __LISTS__ := 1; $I+; $SETC ListsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __CONTROLS__|#(require-interface 'Controls)#|                                              ; $I Controls.p |#                                             ; $ENDC; 	Quickdraw.p													; 		MixedMode.p												; 		QuickdrawText.p											; 	Menus.p														; 		Memory.p												#|                                              ; $IFC UNDEFINED __MEMORY__|#(require-interface 'Memory)#|                                              ; $I Memory.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+; $IFC UNDEFINED STRICT_LISTS ; $SETC STRICT_LISTS := 0; $ENDC; $IFC NOT STRICT_LISTS (defconstant $lDoVAutoscroll 2)(defconstant $lDoHAutoscroll 1)(defconstant $lOnlyOne -128)(defconstant $lExtendDrag 64)(defconstant $lNoDisjoint 32)(defconstant $lNoExtend 16)(defconstant $lNoRect 8)(defconstant $lUseSense 4)(defconstant $lNoNilHilite 2); $ENDC(defconstant $lInitMsg 0)(defconstant $lDrawMsg 1)(defconstant $lHiliteMsg 2)(defconstant $lCloseMsg 3)#|                                              ; $IFC STRICT_LISTS (def-mactype :listref (find-mactype ':pointer))(def-mactype :listhandle (find-mactype ':listref)) |#                                             ; $ELSEC(def-mactype :listptr (find-mactype '(:pointer :listrec)))(def-mactype :listhandle (find-mactype '(:handle :listrec)))(def-mactype :listref (find-mactype '(:handle :listrec))); $ENDC(def-mactype :cell (find-mactype ':point))(%define-record :listbounds (find-record-descriptor :rect))(defrecord (DataArray :handle) (array (array :character 32001 :packed)))(def-mactype :dataptr (find-mactype '(:pointer :dataarray)))(def-mactype :datahandle (find-mactype '(:handle :dataarray)))(def-mactype :listsearchprocptr (find-mactype ':pointer));  FUNCTION ListSearch(aPtr: Ptr; bPtr: Ptr; aLen: INTEGER; bLen: INTEGER): INTEGER; ; ; 		ListClickLoopProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 =>             	.?; 		Out:; 		 <= return value	D0.B; 	(def-mactype :listclickloopprocptr (find-mactype ':pointer));  register FUNCTION ListClickLoop: BOOLEAN; (def-mactype :listsearchupp (find-mactype ':pointer))(def-mactype :listclickloopupp (find-mactype ':pointer)); $IFC NOT STRICT_LISTS (defrecord (ListRec :handle)    (rView :rect)   (port (:pointer :grafport))   (indent :point)   (cellSize :point)   (visible :rect)   (vScroll (:handle :controlrecord))   (hScroll (:handle :controlrecord))   (selFlags :signed-byte)   (lActive :boolean)   (lReserved :signed-byte)   (listFlags :signed-byte)   (clikTime :signed-long)   (clikLoc :point)   (mouseLoc :point)   (lClickLoop :pointer)   (lastClick :point)   (refCon :signed-long)   (listDefProc :handle)   (userHandle :handle)   (dataBounds :rect)   (cells (:handle :dataarray))   (maxIndex :signed-integer)   (cellArray (:array :signed-integer 1))   ); $ENDC(def-mactype :listdefprocptr (find-mactype ':pointer));  PROCEDURE ListDef(lMessage: INTEGER; lSelect: BOOLEAN; VAR lRect: Rect; lCell: Cell; lDataOffset: INTEGER; lDataLen: INTEGER; lHandle: ListRef); (def-mactype :listcelldrawprocptr (find-mactype ':pointer));  PROCEDURE ListCellDraw(lMessage: INTEGER; lSelect: BOOLEAN; VAR lRect: Rect; lCell: Cell; dataPtr: UNIV Ptr; lDataLen: INTEGER; lHandle: ListRef); (def-mactype :listdefupp (find-mactype ':pointer))(def-mactype :listcelldrawupp (find-mactype ':pointer))(defconstant $uppListSearchProcInfo #x2BE0)     ;  FUNCTION (4 byte param, 4 byte param, 2 byte param, 2 byte param): 2 byte result; (defconstant $uppListClickLoopProcInfo #x12)    ;  Register FUNCTION : 1 byte in D0; (defconstant $uppListDefProcInfo #xEBD80)       ;  PROCEDURE (2 byte param, 1 byte param, 4 byte param, 4 byte param, 2 byte param, 2 byte param, 4 byte param); (defconstant $uppListCellDrawProcInfo #xEFD80)  ;  PROCEDURE (2 byte param, 1 byte param, 4 byte param, 4 byte param, 4 byte param, 2 byte param, 4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewListSearchProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewListClickLoopProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewListDefProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewListCellDrawProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallListSearchProc" ((aPtr :pointer) (bPtr :pointer) (aLen :signed-integer) (bLen :signed-integer) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM                        ; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallListClickLoopProc" ((userRoutine :pointer))   :boolean   () )                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallListDefProc" ((lMessage :signed-integer) (lSelect :boolean) (lRect (:pointer :rect)) (lCell :point) (lDataOffset :signed-integer) (lDataLen :signed-integer) (lHandle (:handle :listrec)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallListCellDrawProc" ((lMessage :signed-integer) (lSelect :boolean) (lRect (:pointer :rect)) (lCell :point) (dataPtr :pointer) (lDataLen :signed-integer) (lHandle (:handle :listrec)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LNew" ((rView (:pointer :rect)) (dataBounds (:pointer :rect)) (cSize :point) (theProc :signed-integer) (theWindow (:pointer :windowrecord)) (drawIt :boolean) (hasGrow :boolean) (scrollHoriz :boolean) (scrollVert :boolean))   (:stack (:handle :listrec))   (:stack-trap #xA9E7 rView dataBounds cSize theProc theWindow drawIt hasGrow scrollHoriz scrollVert (68 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LDispose" ((lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 lHandle (40 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LAddColumn" ((count :signed-integer) (colNum :signed-integer) (lHandle (:handle :listrec)))   (:stack :signed-integer)   (:stack-trap #xA9E7 count colNum lHandle (4 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LAddRow" ((count :signed-integer) (rowNum :signed-integer) (lHandle (:handle :listrec)))   (:stack :signed-integer)   (:stack-trap #xA9E7 count rowNum lHandle (8 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LDelColumn" ((count :signed-integer) (colNum :signed-integer) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 count colNum lHandle (32 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LDelRow" ((count :signed-integer) (rowNum :signed-integer) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 count rowNum lHandle (36 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LGetSelect" ((next :boolean) (theCell (:pointer :point)) (lHandle (:handle :listrec)))   (:stack :boolean)   (:stack-trap #xA9E7 next theCell lHandle (60 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap (_LLastClick nil) ((lHandle (:handle :listrec)))   (:no-trap :point)  #+ppc-target  (:no-trap   (ccl::rlet ((p :long))     (ccl::ff-call-slep #.(ccl::get-shared-library-entry-point "LLastClick")                   :address p                   :address lHandle                   :void)     (%get-long p))   #-ppc-target   (stack-trap #xA9E7 :long lHandle :word (64 :signed-integer) :long))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LNextCell" ((hNext :boolean) (vNext :boolean) (theCell (:pointer :point)) (lHandle (:handle :listrec)))   (:stack :boolean)   (:stack-trap #xA9E7 hNext vNext theCell lHandle (72 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LSearch" ((dataPtr :pointer) (dataLen :signed-integer) (searchProc :pointer) (theCell (:pointer :point)) (lHandle (:handle :listrec)))   (:stack :boolean)   (:stack-trap #xA9E7 dataPtr dataLen searchProc theCell lHandle (84 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LSize" ((listWidth :signed-integer) (listHeight :signed-integer) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 listWidth listHeight lHandle (96 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LSetDrawingMode" ((drawIt :boolean) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 drawIt lHandle (44 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LScroll" ((dCols :signed-integer) (dRows :signed-integer) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 dCols dRows lHandle (80 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LAutoScroll" ((lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 lHandle (16 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LUpdate" ((theRgn (:handle :region)) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 theRgn lHandle (100 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_LActivate" ((act :boolean) (lHandle (:handle :listrec)))   nil   (#x4267 #xA9E7) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LCellSize" ((cSize :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 cSize lHandle (20 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LClick" ((pt :point) (modifiers :signed-integer) (lHandle (:handle :listrec)))   (:stack :boolean)   (:stack-trap #xA9E7 pt modifiers lHandle (24 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LAddToCell" ((dataPtr :pointer) (dataLen :signed-integer) (theCell :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 dataPtr dataLen theCell lHandle (12 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LClrCell" ((theCell :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 theCell lHandle (28 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LGetCell" ((dataPtr :pointer) (dataLen (:pointer :signed-integer)) (theCell :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 dataPtr dataLen theCell lHandle (56 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LRect" ((cellRect (:pointer :rect)) (theCell :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 cellRect theCell lHandle (76 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LSetCell" ((dataPtr :pointer) (dataLen :signed-integer) (theCell :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 dataPtr dataLen theCell lHandle (88 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LSetSelect" ((setIt :boolean) (theCell :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 setIt theCell lHandle (92 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LDraw" ((theCell :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 theCell lHandle (48 :signed-integer))); $ENDC; $IFC NOT STRICT_LISTS ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_LGetCellDataLocation" ((offset (:pointer :signed-integer)) (len (:pointer :signed-integer)) (theCell :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 offset len theCell lHandle (52 :signed-integer))); $ENDC; $ENDC; $IFC OLDROUTINENAMES ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_LDoDraw" "LSetDrawingMode")         ((drawIt :boolean) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 drawIt lHandle (44 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_LFind" "LGetCellDataLocation")         ((offset (:pointer :signed-integer)) (len (:pointer :signed-integer)) (theCell :point) (lHandle (:handle :listrec)))   nil   (:stack-trap #xA9E7 offset len theCell lHandle (52 :signed-integer))); $ENDC; $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := ListsIncludes; $ENDC                                         ; __LISTS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Lists)