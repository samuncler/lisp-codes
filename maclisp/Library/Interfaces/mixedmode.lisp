(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:MixedMode.p"; at Tuesday June 6,1995 1:59:54 pm.; ;  	File:		MixedMode.p;  ;  	Contains:	Mixed Mode Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __MIXEDMODE__; $SETC __MIXEDMODE__ := 1; $I+; $SETC MixedModeIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kRoutineDescriptorVersion 7);  MixedModeMagic Magic Cookie/Trap number (defconstant _MixedModeMagic #xAAFE);  Calling Conventions (def-mactype :callingconventiontype (find-mactype ':signed-integer))(defconstant $kPascalStackBased 0)(defconstant $kCStackBased 1)(defconstant $kRegisterBased 2)(defconstant $kD0DispatchedPascalStackBased 8)(defconstant $kD1DispatchedPascalStackBased 12)(defconstant $kD0DispatchedCStackBased 9)(defconstant $kStackDispatchedPascalStackBased 14)(defconstant $kThinkCStackBased 5);  ISA Types (def-mactype :isatype (find-mactype ':signed-byte))(defconstant $kM68kISA 0)(defconstant $kPowerPCISA 1);  RTA Types (def-mactype :rtatype (find-mactype ':signed-byte))(defconstant $kOld68kRTA 0)(defconstant $kPowerPCRTA 0)(defconstant $kCFM68kRTA 16)#|                                              ; $IFC GENERATINGPOWERPC (defconstant $GetCurrentISA #$kPowerPCISA)(defconstant $GetCurrentRTA #$kPowerPCRTA) |#                                             ; $ELSEC#|                                              ; $IFC GENERATINGCFM (defconstant $GetCurrentISA #$kM68kISA)(defconstant $GetCurrentRTA #$kCFM68kRTA) |#                                             ; $ELSEC(defconstant $GetCurrentISA #$kM68kISA)(defconstant $GetCurrentRTA #$kOld68kRTA); $ENDC; $ENDC(defconstant $GetCurrentArchitecture (+ 0 (+ #$GetCurrentISA #$GetCurrentRTA)))(defconstant $kRegisterD0 0)(defconstant $kRegisterD1 1)(defconstant $kRegisterD2 2)(defconstant $kRegisterD3 3)(defconstant $kRegisterD4 8)(defconstant $kRegisterD5 9)(defconstant $kRegisterD6 10)(defconstant $kRegisterD7 11)(defconstant $kRegisterA0 4)(defconstant $kRegisterA1 5)(defconstant $kRegisterA2 6)(defconstant $kRegisterA3 7)(defconstant $kRegisterA4 12)(defconstant $kRegisterA5 13)(defconstant $kRegisterA6 14);  A7 is the same as the PowerPC SP (defconstant $kCCRegisterCBit 16)(defconstant $kCCRegisterVBit 17)(defconstant $kCCRegisterZBit 18)(defconstant $kCCRegisterNBit 19)(defconstant $kCCRegisterXBit 20)(def-mactype :registerselectortype (find-mactype ':signed-integer));  SizeCodes we use everywhere (defconstant $kNoByteCode 0)(defconstant $kOneByteCode 1)(defconstant $kTwoByteCode 2)(defconstant $kFourByteCode 3);  Mixed Mode Routine Records (def-mactype :procinfotype (find-mactype ':signed-long));  Routine Flag Bits (def-mactype :routineflagstype (find-mactype ':signed-integer))(defconstant $kProcDescriptorIsAbsolute #x0)(defconstant $kProcDescriptorIsRelative #x1)(defconstant $kFragmentIsPrepared #x0)(defconstant $kFragmentNeedsPreparing #x2)(defconstant $kUseCurrentISA #x0)(defconstant $kUseNativeISA #x4)(defconstant $kPassSelector #x0)(defconstant $kDontPassSelector #x8)(defconstant $kRoutineIsNotDispatchedDefaultRoutine #x0)(defconstant $kRoutineIsDispatchedDefaultRoutine #x10)(defrecord RoutineRecord    (procInfo :signed-long)                      ;  calling conventions    ;;Changing field reserved1 from signed-byte to unsigned-byte to match C header (educated-guess)   (reserved1 :unsigned-byte)                   ;  Must be 0    (ISA :signed-byte)                           ;  Instruction Set Architecture    (routineFlags :signed-integer)               ;  Flags for each routine    (procDescriptor :pointer)                    ;  Where is the thing we’re calling?    ;;Changing field reserved2 from signed-long to unsigned-long to match C header (pretty-sure)   (reserved2 :unsigned-long)                   ;  Must be 0    ;;Changing field selector from signed-long to unsigned-long to match C header (pretty-sure)   (selector :unsigned-long)                    ;  For dispatched routines, the selector    )(def-mactype :routinerecordptr (find-mactype '(:pointer :routinerecord)))(def-mactype :routinerecordhandle (find-mactype '(:handle :routinerecord)));  Mixed Mode Routine Descriptors ;  Definitions of the Routine Descriptor Flag Bits (def-mactype :rdflagstype (find-mactype ':unsigned-byte))(defconstant $kSelectorsAreNotIndexable #x0)(defconstant $kSelectorsAreIndexable #x1);  Routine Descriptor Structure (defrecord RoutineDescriptor    ;;Changing field gomixedmodetrap from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (goMixedModeTrap :unsigned-word)             ;  Our A-Trap    (version :signed-byte)                       ;  Current Routine Descriptor version    (routineDescriptorFlags :unsigned-byte)      ;  Routine Descriptor Flags    ;;Changing field reserved1 from signed-long to unsigned-long to match C header (pretty-sure)   (reserved1 :unsigned-long)                   ;  Unused, must be zero    (reserved2 :unsigned-byte)                   ;  Unused, must be zero    (selectorInfo :unsigned-byte)                ;  If a dispatched routine, calling convention, else 0    (routineCount :signed-integer)               ;  Number of routines in this RD    (routineRecords (:array :routinerecord 1))   ;  The individual routines    )(def-mactype :routinedescriptorptr (find-mactype '(:pointer :routinedescriptor)))(def-mactype :routinedescriptorhandle (find-mactype '(:handle :routinedescriptor)));  Calling Convention Offsets (defconstant $kCallingConventionWidth 4)(defconstant $kCallingConventionPhase 0)(defconstant $kCallingConventionMask #xF);  Result Offsets (defconstant $kResultSizeWidth 2)(defconstant $kResultSizePhase #$kCallingConventionWidth)(defconstant $kResultSizeMask #x30);  Parameter offsets & widths (defconstant $kStackParameterWidth 2)(defconstant $kStackParameterPhase (+ 0 (+ #$kCallingConventionWidth #$kResultSizeWidth)))(defconstant $kStackParameterMask #xFFFFFFC0);  Register Result Location offsets & widths (defconstant $kRegisterResultLocationWidth 5)(defconstant $kRegisterResultLocationPhase (+ 0 (+ #$kCallingConventionWidth #$kResultSizeWidth)));  Register Parameter offsets & widths (defconstant $kRegisterParameterWidth 5)(defconstant $kRegisterParameterPhase (+ 0 (+ #$kCallingConventionWidth (+ #$kResultSizeWidth #$kRegisterResultLocationWidth))))(defconstant $kRegisterParameterMask #x7FFFF800)(defconstant $kRegisterParameterSizePhase 0)(defconstant $kRegisterParameterSizeWidth 2)(defconstant $kRegisterParameterWhichPhase #$kRegisterParameterSizeWidth)(defconstant $kRegisterParameterWhichWidth 3);  Dispatched Stack Routine Selector offsets & widths (defconstant $kDispatchedSelectorSizeWidth 2)(defconstant $kDispatchedSelectorSizePhase (+ 0 (+ #$kCallingConventionWidth #$kResultSizeWidth)));  Dispatched Stack Routine Parameter offsets (defconstant $kDispatchedParameterPhase (+ 0 (+ #$kCallingConventionWidth (+ #$kResultSizeWidth #$kDispatchedSelectorSizeWidth))));  Special Case offsets & widths (defconstant $kSpecialCaseSelectorWidth 6)(defconstant $kSpecialCaseSelectorPhase #$kCallingConventionWidth)(defconstant $kSpecialCaseSelectorMask #x3F0);  Component Manager Special Case offsets & widths (defconstant $kComponentMgrResultSizeWidth 2)(defconstant $kComponentMgrResultSizePhase (+ #$kCallingConventionWidth #$kSpecialCaseSelectorWidth));  4 + 6 = 10 (defconstant $kComponentMgrParameterWidth 2)(defconstant $kComponentMgrParameterPhase (+ #$kComponentMgrResultSizePhase #$kComponentMgrResultSizeWidth));  10 + 2 = 12 (defconstant $kSpecialCase #xF);  all of the special cases enumerated.  The selector field is 6 bits wide (defconstant $kSpecialCaseHighHook 0)(defconstant $kSpecialCaseCaretHook 0)          ;  same as kSpecialCaseHighHook (defconstant $kSpecialCaseEOLHook 1)(defconstant $kSpecialCaseWidthHook 2)(defconstant $kSpecialCaseTextWidthHook 2)      ;  same as kSpecialCaseWidthHook (defconstant $kSpecialCaseNWidthHook 3)(defconstant $kSpecialCaseDrawHook 4)(defconstant $kSpecialCaseHitTestHook 5)(defconstant $kSpecialCaseTEFindWord 6)(defconstant $kSpecialCaseProtocolHandler 7)(defconstant $kSpecialCaseSocketListener 8)(defconstant $kSpecialCaseTERecalc 9)(defconstant $kSpecialCaseTEDoText 10)(defconstant $kSpecialCaseGNEFilterProc 11)(defconstant $kSpecialCaseMBarHook 12)(defconstant $kSpecialCaseComponentMgr 13)#|                                              ; $IFC GENERATINGCFM ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_NewRoutineDescriptor" ((theProc :pointer) (theProcInfo :signed-long) (theISA :signed-byte))   (:stack :pointer)   (:stack-trap #xAA59 :d0 0 theProc theProcInfo theISA)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DisposeRoutineDescriptor" ((theProcPtr :pointer))   nil   (:stack-trap #xAA59 :d0 1 theProcPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_NewFatRoutineDescriptor" ((theM68kProc :pointer) (thePowerPCProc :pointer) (theProcInfo :signed-long))   (:stack :pointer)   (:stack-trap #xAA59 :d0 2 theM68kProc thePowerPCProc theProcInfo)); $ENDC |#                                             ; $ELSEC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_NewRoutineDescriptor" ((theProc :pointer) (theProcInfo :signed-long) (theISA :signed-byte))   :pointer   (#x5C4F #x2E9F) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposeRoutineDescriptor" ((theProcPtr :pointer))   nil   (:stack-trap #x584F)); $ENDC; $ENDC#|                                              ; $IFC CFMSYSTEMCALLS ; $IFC NOT LSPWRP & NOT LSP68K;; No calling method defined for this trap(deftrap-inline "_CallUniversalProc" ((theProcPtr :pointer) (procInfo :signed-long))   :signed-long   () );; No calling method defined for this trap(deftrap-inline "_CallOSTrapUniversalProc" ((:dots :pointer) (#\. :pointer) (theProcPtr :pointer) (procInfo :signed-long))   :signed-long   () ); $ENDC |#                                             ; $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := MixedModeIncludes; $ENDC                                         ; __MIXEDMODE__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'MixedMode)