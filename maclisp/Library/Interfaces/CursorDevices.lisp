(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:CursorDevices.p"; at Tuesday June 6,1995 2:07:16 pm.; ;  	File:		CursorDevices.p;  ;  	Contains:	Cursor Devices (mouse/trackball/etc) Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __CURSORDEVICES__; $SETC __CURSORDEVICES__ := 1; $I+; $SETC CursorDevicesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+; ; 	                   * * *  W A R N I N G  * * * ; ; 	On currently shipping PowerMacs, the CursorDevices manager is implemented; 	in 68K code and emulated.  Unfortunately, the MixedMode glue in InterfaceLib; 	is incorrect.  It and the 1.0 version of this file had incorrect parameter; 	lists for most functions.; 	; 	As a first step to avoid runtime errors, the functions in this file were ; 	renamed (e.g. from"CrsrDevButtons" to "CursorDeviceButtons").  This will result; 	in a link time error if a PowerPC application tries to call the functions.; 	When InterfaceLib is fixed, the new names will be exported and PowerPC; 	code will then be able to call them.; 	; (def-mactype :buttonopcode (find-mactype ':signed-integer));  ButtonOpcodes (defconstant $kButtonNoOp 0)                    ;  No action for this button (defconstant $kButtonSingleClick 1)             ;  Normal mouse button (defconstant $kButtonDoubleClick 2)             ;  Click-release-click when pressed (defconstant $kButtonClickLock 3)               ;  Click on press, release on next press (defconstant $kButtonCustom 6)                  ;  Custom behavior, data = CursorDeviceCustomButtonUPP ;  Device Classes (defconstant $kDeviceClassAbsolute 0)           ;  a flat-response device (defconstant $kDeviceClassMouse 1)              ;  mechanical or optical mouse (defconstant $kDeviceClassTrackball 2)          ;  trackball (defconstant $kDeviceClass3D 6)                 ;  a 3D pointing device ;  Structures used in Cursor Device Manager calls (defrecord CursorData    (nextCursorData (:pointer :cursordata))      ;  next in global list    (displayInfo :pointer)                       ;  unused (reserved for future)    (whereX :signed-long)                        ;  horizontal position    (whereY :signed-long)                        ;  vertical position    (where :point)                               ;  the pixel position    (isAbs :boolean)                             ;  has been stuffed with absolute coords    (buttonCount :signed-byte)                   ;  UInt8 ;  number of buttons currently pressed    ;;Changing field screenres from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (screenRes :unsigned-word)                   ;  pixels per inch on the current display    (privateFields (:array :signed-integer 22))  ;  fields use internally by CDM    )(def-mactype :cursordataptr (find-mactype '(:pointer :cursordata)))(defrecord CursorDevice    (nextCursorDevice (:pointer :cursordevice))  ;  pointer to next record in linked list    (whichCursor (:pointer :cursordata))         ;  pointer to data for target cursor    (refCon :signed-long)                        ;  application-defined    (unused :signed-long)                        ;  reserved for future    (devID :ostype)                              ;  device identifier (from ADB reg 1)    (resolution :signed-long)                    ;  units/inch (orig. from ADB reg 1)    (devClass :signed-byte)                      ;  UInt8 ;  device class (from ADB reg 1)    (cntButtons :signed-byte)                    ;  UInt8 ;  number of buttons (from ADB reg 1)    (filler1 :signed-byte)                       ;  UInt8 ;  reserved for future    (buttons :signed-byte)                       ;  UInt8 ;  state of all buttons    (buttonOp (:array :signed-byte 8))           ;  UInt8 ;  action performed per button    ;;Changing field buttonticks from signed-long to unsigned-long to match C header (pretty-darn-sure)   (buttonTicks (:array :unsigned-long 8))      ;  ticks when button last went up (for debounce)    (buttonData (:array :signed-long 8))         ;  data for the button operation    ;;Changing field doubleclicktime from signed-long to unsigned-long to match C header (pretty-darn-sure)   (doubleClickTime :unsigned-long)             ;  device-specific double click speed    (acceleration :signed-long)                  ;  current acceleration    (privateFields (:array :signed-integer 15))  ;  fields used internally to CDM    )(def-mactype :cursordeviceptr (find-mactype '(:pointer :cursordevice)));  for use with CursorDeviceButtonOp when opcode = kButtonCustom ; ; 		CursorDeviceCustomButtonProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => ourDevice   	A2.L; 		 => button      	D3.W; 	(def-mactype :cursordevicecustombuttonprocptr (find-mactype ':pointer));  register PROCEDURE CursorDeviceCustomButton(ourDevice: CursorDevicePtr; button: INTEGER); (def-mactype :cursordevicecustombuttonupp (find-mactype ':pointer))(defconstant $uppCursorDeviceCustomButtonProcInfo #xED802);  Register PROCEDURE (4 bytes in A2, 2 bytes in D3); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewCursorDeviceCustomButtonProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM                        ; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallCursorDeviceCustomButtonProc" ((ourDevice (:pointer :cursordevice)) (button :signed-integer) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceMove" ((ourDevice (:pointer :cursordevice)) (deltaX :signed-long) (deltaY :signed-long))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 0 ourDevice deltaX deltaY)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceMoveTo" ((ourDevice (:pointer :cursordevice)) (absX :signed-long) (absY :signed-long))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 1 ourDevice absX absY)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceFlush" ((ourDevice (:pointer :cursordevice)))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 2 ourDevice)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceButtons" ((ourDevice (:pointer :cursordevice)) (buttons :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 3 ourDevice buttons)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceButtonDown" ((ourDevice (:pointer :cursordevice)))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 4 ourDevice)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceButtonUp" ((ourDevice (:pointer :cursordevice)))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 5 ourDevice)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceButtonOp" ((ourDevice (:pointer :cursordevice)) (buttonNumber :signed-integer) (opcode :signed-integer) (data :signed-long))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 6 ourDevice buttonNumber opcode data)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceSetButtons" ((ourDevice (:pointer :cursordevice)) (numberOfButtons :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 7 ourDevice numberOfButtons)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceSetAcceleration" ((ourDevice (:pointer :cursordevice)) (acceleration :signed-long))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 8 ourDevice acceleration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceDoubleTime" ((ourDevice (:pointer :cursordevice)) (durationTicks :signed-long))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 9 ourDevice durationTicks)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceUnitsPerInch" ((ourDevice (:pointer :cursordevice)) (resolution :signed-long))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 10 ourDevice resolution)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceNextDevice" ((ourDevice (:pointer (:pointer :cursordevice))))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 11 ourDevice)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceNewDevice" ((ourDevice (:pointer (:pointer :cursordevice))))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 12 ourDevice)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CursorDeviceDisposeDevice" ((ourDevice (:pointer :cursordevice)))   (:stack :signed-integer)   (:stack-trap #xAADB :d0 13 ourDevice)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := CursorDevicesIncludes; $ENDC                                         ; __CURSORDEVICES__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'CursorDevices)