(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:TranslationExtensions.p"; at Tuesday June 6,1995 2:23:00 pm.; ;  	File:		TranslationExtensions.p;  ;  	Contains:	Macintosh Easy Open Translation Extension Interfaces.;  ;  	Version:	Technology:	Macintosh Easy Open 1.1;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __TRANSLATIONEXTENSIONS__; $SETC __TRANSLATIONEXTENSIONS__ := 1; $I+; $SETC TranslationExtensionsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __MEMORY__|#(require-interface 'Memory)#|                                              ; $I Memory.p |#                                             ; $ENDC; 	Types.p														; 		ConditionalMacros.p										; 	MixedMode.p													#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC; 	OSUtils.p													#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	QuickdrawText.p												#|                                              ; $IFC UNDEFINED __COMPONENTS__|#(require-interface 'Components)#|                                              ; $I Components.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kSupportsFileTranslation 1)(defconstant $kSupportsScrapTranslation 2)(defconstant $kTranslatorCanGenerateFilename 4)(def-mactype :filetype (find-mactype ':ostype))(def-mactype :scraptype (find-mactype ':ostype))(def-mactype :translationattributes (find-mactype ':signed-long))(defconstant $taDstDocNeedsResourceFork 1)(defconstant $taDstIsAppTranslation 2)(defrecord FileTypeSpec    (format :ostype)   (hint :signed-long)   (flags :signed-long)                         ;  taDstDocNeedsResourceFork, taDstIsAppTranslation   (catInfoType :ostype)   (catInfoCreator :ostype)   )(defrecord FileTranslationList    ;;Changing field moddate from signed-long to unsigned-long to match C header (pretty-sure)   (modDate :unsigned-long)   ;;Changing field groupcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (groupCount :unsigned-long);  	unsigned long	group1SrcCount;;  	unsigned long	group1SrcEntrySize = sizeof(FileTypeSpec);;   FileTypeSpec	group1SrcTypes[group1SrcCount];   unsigned long	group1DstCount;;   unsigned long	group1DstEntrySize = sizeof(FileTypeSpec);;   FileTypeSpec	group1DstTypes[group1DstCount]   )(def-mactype :filetranslationlistptr (find-mactype '(:pointer :filetranslationlist)))(def-mactype :filetranslationlisthandle (find-mactype '(:handle :filetranslationlist)))(defrecord ScrapTypeSpec    (format :ostype)   (hint :signed-long)   )(defrecord ScrapTranslationList    ;;Changing field moddate from signed-long to unsigned-long to match C header (pretty-sure)   (modDate :unsigned-long)   ;;Changing field groupcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (groupCount :unsigned-long);  	unsigned long		group1SrcCount;;  	unsigned long		group1SrcEntrySize = sizeof(ScrapTypeSpec);;   ScrapTypeSpec		group1SrcTypes[group1SrcCount];   unsigned long		group1DstCount;;  	unsigned long		group1DstEntrySize = sizeof(ScrapTypeSpec);;   ScrapTypeSpec		group1DstTypes[group1DstCount]   )(def-mactype :scraptranslationlistptr (find-mactype '(:pointer :scraptranslationlist)))(def-mactype :scraptranslationlisthandle (find-mactype '(:handle :scraptranslationlist)));  definition of callbacks to update progress dialog(def-mactype :translationrefnum (find-mactype ':signed-long)); ****************************************************************************************; *; * This routine sets the advertisement in the top half of the progress dialog.; * It is called once at the beginning of your DoTranslateFile routine.; *; * Enter:	refNum			Translation reference supplied to DoTranslateFile.; *			advertisement	A handle to the picture to display.  This must be non-purgable.; *							Before returning from DoTranslateFile, you should dispose; *							of the memory.  (Normally, it is in the temp translation heap; *							so it is cleaned up for you.); *; * Exit:	returns			noErr, paramErr, or memFullErr; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetTranslationAdvertisement" ((refNum :signed-long) (advertisement (:handle :picture)))   (:stack :signed-integer)   (:stack-trap #xABFC :d0 2 refNum advertisement)); $ENDC; ****************************************************************************************; *; * This routine updates the progress bar in the progress dialog.; * It is called repeatedly from within your DoTranslateFile routine.; * It should be called often, so that the user will get feedback if he tries to cancel.; *; * Enter:	refNum		translation reference supplied to DoTranslateFile.; *			progress	percent complete (0-100); *; * Exit:		canceled	TRUE if the user clicked the Cancel button, FALSE otherwise; *			returns		noErr, paramErr, or memFullErr; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_UpdateTranslationProgress" ((refNum :signed-long) (percentDone :signed-integer) (canceled (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xABFC :d0 1 refNum percentDone canceled)); $ENDC;  ComponentMgr selectors for routines(defconstant $kTranslateGetFileTranslationList 0);  component selectors(defconstant $kTranslateIdentifyFile 1)(defconstant $kTranslateTranslateFile 2)(defconstant $kTranslateGetTranslatedFilename 3)(defconstant $kTranslateGetScrapTranslationList 10);  skip to scrap routines(defconstant $kTranslateIdentifyScrap 11)(defconstant $kTranslateTranslateScrap 12);  Routines to implment in a file translation extension(def-mactype :dogetfiletranslationlistprocptr (find-mactype ':pointer));  FUNCTION (self: ComponentInstance; translationList: FileTranslationListHandle): ComponentResult; (def-mactype :doidentifyfileprocptr (find-mactype ':pointer));  FUNCTION (self: ComponentInstance; (CONST)VAR theDocument: FSSpec; VAR docType: FileType): ComponentResult; (def-mactype :dotranslatefileprocptr (find-mactype ':pointer));  FUNCTION (self: ComponentInstance; refNum: TranslationRefNum; (CONST)VAR sourceDocument: FSSpec; srcType: FileType; srcTypeHint: LONGINT; (CONST)VAR dstDoc: FSSpec; dstType: FileType; dstTypeHint: LONGINT): ComponentResult; (def-mactype :dogettranslatedfilenameprocptr (find-mactype ':pointer));  FUNCTION (self: ComponentInstance; dstType: FileType; dstTypeHint: LONGINT; VAR theDocument: FSSpec): ComponentResult; ;  Routine to implement in a scrap translation extension(def-mactype :dogetscraptranslationlistprocptr (find-mactype ':pointer));  FUNCTION (self: ComponentInstance; list: ScrapTranslationListHandle): ComponentResult; (def-mactype :doidentifyscrapprocptr (find-mactype ':pointer));  FUNCTION (self: ComponentInstance; dataPtr: UNIV Ptr; dataLength: Size; VAR dataFormat: ScrapType): ComponentResult; (def-mactype :dotranslatescrapprocptr (find-mactype ':pointer));  FUNCTION (self: ComponentInstance; refNum: TranslationRefNum; srcDataPtr: UNIV Ptr; srcDataLength: Size; srcType: ScrapType; srcTypeHint: LONGINT; dstData: Handle; dstType: ScrapType; dstTypeHint: LONGINT): ComponentResult; ; $ALIGN RESET; $POP; $SETC UsingIncludes := TranslationExtensionsIncludes; $ENDC                                         ; __TRANSLATIONEXTENSIONS__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'TranslationExtensions)