(in-package :TRAPS); Generated from #P"Cohones:Lisp:Projects:PInterface Translator:Source interfaces:Quicktime 2.5 PInterfaces:MoviesFormat.p"; at Thursday May 23,1996 2:28:52 pm.; ;  	File:		MoviesFormat.p;  ;  	Contains:	QuickTime interfaces;  ;  	Version:	Technology:	;  				Release:	QuickTime 2.5 interfaces to use with ETO #20;  ;  	Copyright:	© 1984-1996 by Apple Computer, Inc.  All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, send the file and version;  				information (from above) and the problem description to:;  ;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __MOVIESFORMAT__; $SETC __MOVIESFORMAT__ := 1; $I+; $SETC MoviesFormatIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __WINDOWS__|#(require-interface 'Windows)#|                                              ; $I Windows.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __IMAGECOMPRESSION__|#(require-interface 'ImageCompression)#|                                              ; $I ImageCompression.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __MOVIES__|#(require-interface 'Movies)#|                                              ; $I Movies.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kMovieVersion 0)                  ;   version number of the format here described  ; ; ***************************************; *; *   General Types -; *		These types are used in more than one of the; *		directory types.; *; ***************************************; (def-mactype :moviesuserdataptr (find-mactype '(:pointer :moviesuserdata)))(defrecord MoviesUserData    (size :signed-long)                          ;   size of this user data     (udType :signed-long)                        ;   type of user data     (data :signed-byte)                          ;   the user data     )(def-mactype :userdataatomptr (find-mactype '(:pointer :userdataatom)))(defrecord UserDataAtom    (size :signed-long)   (atomType :signed-long)   (userData (:array :moviesuserdata 1))   ); ;  MoviesDataDescription tells us where the data for the movie or track lives.;    The data can follow the directory, be in the datafork of the same file as the directory resource,;    be in the resource fork of the same file as the directory resource, be in another file in the;    data fork or resource fork, or require a specific bottleneck to fetch the data. ; ; ; ***************************************; *; *   MediaDirectory information -; *		The MediaDirectory is tightly coupled to the data.; *; ***************************************; (def-mactype :sampledescriptionatomptr (find-mactype '(:pointer :sampledescriptionatom)))(defrecord SampleDescriptionAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'stsd'     (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (numEntries :signed-long)   (sampleDescTable (:array :sampledescription 1))   );   TimeToSampleNum maps physical sample time to physical sample number.  (def-mactype :timetosamplenumptr (find-mactype '(:pointer :timetosamplenum)))(defrecord TimeToSampleNum    (sampleCount :signed-long)   (sampleDuration :signed-long)   )(def-mactype :timetosamplenumatomptr (find-mactype '(:pointer :timetosamplenumatom)))(defrecord TimeToSampleNumAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'stts'     (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (numEntries :signed-long)   (timeToSampleNumTable (:array :timetosamplenum 1))   );   SyncSamples is a list of the physical samples which are self contained.  (def-mactype :syncsampleatomptr (find-mactype '(:pointer :syncsampleatom)))(defrecord SyncSampleAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'stss'     (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (numEntries :signed-long)   (syncSampleTable (:array :signed-long 1))   );   SampleToChunk maps physical sample number to chunk number.  ;   same as SampleToChunk, but redundant first sample is removed  (def-mactype :sampletochunkptr (find-mactype '(:pointer :sampletochunk)))(defrecord SampleToChunk    (firstChunk :signed-long)   (samplesPerChunk :signed-long)   (sampleDescriptionID :signed-long)   )(def-mactype :sampletochunkatomptr (find-mactype '(:pointer :sampletochunkatom)))(defrecord SampleToChunkAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'stsc'     (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (numEntries :signed-long)   (sampleToChunkTable (:array :sampletochunk 1))   )(def-mactype :chunkoffsetatomptr (find-mactype '(:pointer :chunkoffsetatom)))(defrecord ChunkOffsetAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'stco'     (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (numEntries :signed-long)   (chunkOffsetTable (:array :signed-long 1))   )(def-mactype :samplesizeatomptr (find-mactype '(:pointer :samplesizeatom)))(defrecord SampleSizeAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'stsz'     (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (sampleSize :signed-long)   (numEntries :signed-long)   (sampleSizeTable (:array :signed-long 1))   )(def-mactype :shadowsyncptr (find-mactype '(:pointer :shadowsync)))(defrecord ShadowSync    (fdSampleNum :signed-long)   (syncSampleNum :signed-long)   )(def-mactype :shadowsyncatomptr (find-mactype '(:pointer :shadowsyncatom)))(defrecord ShadowSyncAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'stsz'     (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (numEntries :signed-long)   (shadowSyncTable (:array :shadowsync 1))   )(def-mactype :sampletableatomptr (find-mactype '(:pointer :sampletableatom)))(defrecord SampleTableAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'stbl'     (sampleDescription :sampledescriptionatom)   (timeToSampleNum :timetosamplenumatom)   (sampleToChunk :sampletochunkatom)   (syncSample :syncsampleatom)   (sampleSize :samplesizeatom)   (chunkOffset :chunkoffsetatom)   (shadowSync :shadowsyncatom)   )(def-mactype :publichandlerinfoptr (find-mactype '(:pointer :publichandlerinfo)))(defrecord PublicHandlerInfo    (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (componentType :signed-long)   (componentSubType :signed-long)   (componentManufacturer :signed-long)   (componentFlags :signed-long)   (componentFlagsMask :signed-long)   (componentName :signed-byte)   )(def-mactype :handleratomptr (find-mactype '(:pointer :handleratom)))(defrecord HandlerAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'hdlr'     (hInfo :publichandlerinfo)   );   a data reference is a private structure  (def-mactype :datarefatom (find-mactype ':signed-long))(def-mactype :datainfoatomptr (find-mactype '(:pointer :datainfoatom)))(defrecord DataInfoAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'dinf'     (dataRef :signed-long)   )(def-mactype :rgnatomptr (find-mactype '(:pointer :rgnatom)))(defrecord RgnAtom    (size :signed-long)   (atomType :signed-long)   (rgnSize :signed-integer)   (rgnBBox :rect)   (data :signed-byte)   )(def-mactype :mattecompressedatomptr (find-mactype '(:pointer :mattecompressedatom)))(defrecord MatteCompressedAtom    (size :signed-long)   (atomType :signed-long)   (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (matteImageDescription :imagedescription)   (matteData :signed-byte)   )(def-mactype :matteatomptr (find-mactype '(:pointer :matteatom)))(defrecord MatteAtom    (size :signed-long)   (atomType :signed-long)   (aCompressedMatte :mattecompressedatom)   )(def-mactype :clippingatomptr (find-mactype '(:pointer :clippingatom)))(defrecord ClippingAtom    (size :signed-long)   (atomType :signed-long)   (aRgnClip :rgnatom)   ); ; **********************; * Media Info Example Structures; **********************; (def-mactype :videomediainfoheaderptr (find-mactype '(:pointer :videomediainfoheader)))(defrecord VideoMediaInfoHeader    (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (graphicsMode :signed-integer)               ;   for QD - transfer mode     (opColorRed :signed-integer)                 ;   opcolor for transfer mode     (opColorGreen :signed-integer)   (opColorBlue :signed-integer)   )(def-mactype :videomediainfoheaderatomptr (find-mactype '(:pointer :videomediainfoheaderatom)))(defrecord VideoMediaInfoHeaderAtom    (size :signed-long)                          ;   size of Media info     (atomType :signed-long)                      ;   = 'vmhd'     (vmiHeader :videomediainfoheader)   )(def-mactype :videomediainfoptr (find-mactype '(:pointer :videomediainfo)))(defrecord VideoMediaInfo    (size :signed-long)                          ;   size of Media info     (atomType :signed-long)                      ;   = 'minf'     (header :videomediainfoheaderatom)   (dataHandler :handleratom)   (dataInfo :datainfoatom)   (sampleTable :sampletableatom)   )(def-mactype :soundmediainfoheaderptr (find-mactype '(:pointer :soundmediainfoheader)))(defrecord SoundMediaInfoHeader    (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (balance :signed-integer)   (rsrvd :signed-integer)   )(def-mactype :soundmediainfoheaderatomptr (find-mactype '(:pointer :soundmediainfoheaderatom)))(defrecord SoundMediaInfoHeaderAtom    (size :signed-long)                          ;   size of Media info     (atomType :signed-long)                      ;   = 'vmhd'     (smiHeader :soundmediainfoheader)   )(def-mactype :soundmediainfoptr (find-mactype '(:pointer :soundmediainfo)))(defrecord SoundMediaInfo    (size :signed-long)                          ;   size of Media info     (atomType :signed-long)                      ;   = 'minf'     (header :soundmediainfoheaderatom)   (dataHandler :handleratom)   (dataReference :signed-long)   (sampleTable :sampletableatom)   );   whatever data the media handler needs goes after the atomType  (def-mactype :mediainfoptr (find-mactype '(:pointer :mediainfo)))(defrecord MediaInfo    (size :signed-long)   (atomType :signed-long)   ); ; **********************; * Media Directory Structures; **********************; (def-mactype :mediaheaderptr (find-mactype '(:pointer :mediaheader)))(defrecord MediaHeader    (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (creationTime :signed-long)                  ;   seconds since Jan 1904 when directory was created     (modificationTime :signed-long)              ;   seconds since Jan 1904 when directory was appended     (timeScale :signed-long)                     ;   start time for Media (Media time)     (duration :signed-long)                      ;   length of Media (Media time)     (language :signed-integer)   (quality :signed-integer)   )(def-mactype :mediaheaderatomptr (find-mactype '(:pointer :mediaheaderatom)))(defrecord MediaHeaderAtom    (size :signed-long)   (atomType :signed-long)   (header :mediaheader)   )(def-mactype :mediadirectoryptr (find-mactype '(:pointer :mediadirectory)))(defrecord MediaDirectory    (size :signed-long)   (atomType :signed-long)                      ;   = 'mdia'     (mediaHeader :mediaheaderatom)               ;   standard Media information     (mediaHandler :handleratom)   (MediaInfo :mediainfo)   ); ; **********************; * Track Structures; **********************; (defconstant $TrackEnable #x1)(defconstant $TrackInMovie #x2)(defconstant $TrackInPreview #x4)(defconstant $TrackInPoster #x8)(def-mactype :trackheaderptr (find-mactype '(:pointer :trackheader)))(defrecord TrackHeader    (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (creationTime :signed-long)                  ;   seconds since Jan 1904 when directory was created     (modificationTime :signed-long)              ;   seconds since Jan 1904 when directory was appended     (trackID :signed-long)   (reserved1 :signed-long)   (duration :signed-long)                      ;   length of track (track time)     (reserved2 :signed-long)   (reserved3 :signed-long)   (layer :signed-integer)   (alternateGroup :signed-integer)   (volume :signed-integer)   (reserved4 :signed-integer)   (matrix :matrixrecord)   (trackWidth :signed-long)   (trackHeight :signed-long)   )(def-mactype :trackheaderatomptr (find-mactype '(:pointer :trackheaderatom)))(defrecord TrackHeaderAtom    (size :signed-long)                          ;   size of track header     (atomType :signed-long)                      ;   = 'tkhd'     (header :trackheader)   )(def-mactype :editlisttypeptr (find-mactype '(:pointer :editlisttype)))(defrecord EditListType    (trackDuration :signed-long)   (mediaTime :signed-long)   (mediaRate :signed-long)   )(def-mactype :editlistatomptr (find-mactype '(:pointer :editlistatom)))(defrecord EditListAtom    (size :signed-long)   (atomType :signed-long)                      ;   = elst     (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (numEntries :signed-long)   (editListTable (:array :editlisttype 1))   )(def-mactype :editsatomptr (find-mactype '(:pointer :editsatom)))(defrecord EditsAtom    (size :signed-long)   (atomType :signed-long)                      ;   = edts     (editList :editlistatom)   )(def-mactype :trackloadsettingsptr (find-mactype '(:pointer :trackloadsettings)))(defrecord TrackLoadSettings    (preloadStartTime :signed-long)   (preloadDuration :signed-long)   (preloadFlags :signed-long)   (defaultHints :signed-long)   )(def-mactype :trackloadsettingsatomptr (find-mactype '(:pointer :trackloadsettingsatom)))(defrecord TrackLoadSettingsAtom    (size :signed-long)   (atomType :signed-long)                      ;   = load     (settings :trackloadsettings)   )(def-mactype :trackdirectoryptr (find-mactype '(:pointer :trackdirectory)))(defrecord TrackDirectory    (size :signed-long)   (atomType :signed-long)                      ;   = 'trak'     (trackHeader :trackheaderatom)               ;   standard track information     (trackClip :clippingatom)   (edits :editsatom)   (media :mediadirectory)   (userData :userdataatom)                     ;   space for extending with new data types     ); ; ***************************************; *; *   MovieDirectory -; *		The MovieDirectory is the top level structure which; *		holds the TrackInstance describing where the; *		TrackDirectories are.; *; ***************************************; (def-mactype :movieheaderptr (find-mactype '(:pointer :movieheader)))(defrecord MovieHeader    (flags :signed-long)                         ;   1 byte of version / 3 bytes of flags     (creationTime :signed-long)                  ;   seconds since Jan 1904 when directory was created     (modificationTime :signed-long)              ;   seconds since Jan 1904 when directory was appended     (timeScale :signed-long)                     ;   Time specifications     (duration :signed-long)   (preferredRate :signed-long)                 ;   rate at which to play this movie     (preferredVolume :signed-integer)            ;   volume to play movie at     (reserved1 :signed-integer)   (preferredLong1 :signed-long)   (preferredLong2 :signed-long)   (matrix :matrixrecord)   (previewTime :signed-long)                   ;   time in track the proxy begins (track time)     (previewDuration :signed-long)               ;   how long the proxy lasts (track time)     (posterTime :signed-long)                    ;   time in track the proxy begins (track time)     (selectionTime :signed-long)                 ;   time in track the proxy begins (track time)     (selectionDuration :signed-long)             ;   time in track the proxy begins (track time)     (currentTime :signed-long)                   ;   time in track the proxy begins (track time)     (nextTrackID :signed-long)                   ;   next value to use for a TrackID     )(def-mactype :movieheaderatomptr (find-mactype '(:pointer :movieheaderatom)))(defrecord MovieHeaderAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'mvhd'     (header :movieheader)   )(def-mactype :trackdirectoryentryptr (find-mactype '(:pointer :trackdirectoryentry)))(defrecord TrackDirectoryEntry    (TrackDirectory :trackdirectory)             ;   Track directory information     )(def-mactype :moviedirectoryptr (find-mactype '(:pointer :moviedirectory)))(defrecord MovieDirectory    (size :signed-long)   (atomType :signed-long)                      ;   = 'moov'     (header :movieheaderatom)   (movieClip :clippingatom);   Track Directories     (track (:array :trackdirectoryentry 1))      ;   Track directory information  ;   User data for Movie     (userData :userdataatom)                     ;   space for user extensions     ); ; ***************************************; ***************************************; ;   Movie formats and tags  ;   some system defined format IDs  (defconstant $MOVIE_TYPE :|moov|)(defconstant $TRACK_TYPE :|trak|)(defconstant $MEDIA_TYPE :|mdia|)(defconstant $VIDEO_TYPE :|vide|)(defconstant $SOUND_TYPE :|soun|);   atom id's  (defconstant $MovieAID :|moov|)(defconstant $MovieHeaderAID :|mvhd|)(defconstant $ClipAID :|clip|)(defconstant $RgnClipAID :|crgn|)(defconstant $MatteAID :|matt|)(defconstant $MatteCompAID :|kmat|)(defconstant $TrackAID :|trak|)(defconstant $UserDataAID :|udta|)(defconstant $TrackHeaderAID :|tkhd|)(defconstant $EditsAID :|edts|)(defconstant $EditListAID :|elst|)(defconstant $MediaAID :|mdia|)(defconstant $MediaHeaderAID :|mdhd|)(defconstant $MediaInfoAID :|minf|)(defconstant $VideoMediaInfoHeaderAID :|vmhd|)(defconstant $SoundMediaInfoHeaderAID :|smhd|)(defconstant $GenericMediaInfoHeaderAID :|gmhd|)(defconstant $GenericMediaInfoAID :|gmin|)(defconstant $DataInfoAID :|dinf|)(defconstant $DataRefAID :|dref|)(defconstant $SampleTableAID :|stbl|)(defconstant $STSampleDescAID :|stsd|)(defconstant $STTimeToSampAID :|stts|)(defconstant $STSyncSampleAID :|stss|)(defconstant $STSampleToChunkAID :|stsc|)(defconstant $STShadowSyncAID :|stsh|)(defconstant $HandlerAID :|hdlr|)(defconstant $STSampleSizeAID :|stsz|)(defconstant $STChunkOffsetAID :|stco|)(defconstant $DataRefContainerAID :|drfc|)(defconstant $TrackReferenceAID :|tref|)(defconstant $ColorTableAID :|ctab|)(defconstant $LoadSettingsAID :|load|)(defconstant $PropertyAtomAID :|code|)(defconstant $InputMapAID :|imap|);   Text ATOM definitions (def-mactype :textboxatomptr (find-mactype '(:pointer :textboxatom)))(defrecord TextBoxAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'tbox'     (textBox :rect)                              ;   New text box (overrides defaultTextBox)    )(def-mactype :hiliteatomptr (find-mactype '(:pointer :hiliteatom)))(defrecord HiliteAtom    (size :signed-long)   (atomType :signed-long)                      ;   = 'hlit'     (selStart :signed-long)                      ;   hilite selection start character    (selEnd :signed-long)                        ;   hilite selection end character    )(def-mactype :karaokerecptr (find-mactype '(:pointer :karaokerec)))(defrecord KaraokeRec    (timeVal :signed-long)   (beginHilite :signed-integer)   (endHilite :signed-integer)   )(def-mactype :karaokeatomptr (find-mactype '(:pointer :karaokeatom)))(defrecord KaraokeAtom    (numEntries :signed-long)   (karaokeEntries (:array :karaokerec 1))   ); $ALIGN RESET; $POP; $SETC UsingIncludes := MoviesFormatIncludes; $ENDC                                         ; __MOVIESFORMAT__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'MoviesFormat)