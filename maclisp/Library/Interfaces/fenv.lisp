(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:fenv.p"; at Tuesday June 6,1995 2:08:42 pm.; ;  	File:		fenv.p;  ;  	Copyright:	© 1984-1994 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Version:	Universal Pascal, July 8, 1994 ; 	; 	Note:		The following file was hand converted from fenv.h; 				See fenv.h for more information and comments.; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __FENV__; $SETC __FENV__ := 1; $I+; $SETC fpenvIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC GENERATINGPOWERPC ;    fenv_t is a type for representing the entire floating-point;       environment in a single object.                                         (def-mactype :fenv_t (find-mactype ':signed-long));    fexcept_t is a type for representing the floating-point;       exception flag state collectively.                                      (def-mactype :fexcept_t (find-mactype ':signed-long));     Definitions of floating-point exception macros                          (defconstant $FE_INEXACT #x2000000)             ;      inexact              (defconstant $FE_DIVBYZERO #x4000000)           ;      divide-by-zero       (defconstant $FE_UNDERFLOW #x8000000)           ;      underflow            (defconstant $FE_OVERFLOW #x10000000)           ;      overflow             (defconstant $FE_INVALID #x20000000)            ;      invlalid             ;    Definitions of rounding direction macros                                (defconstant $FE_TONEAREST #x0)(defconstant $FE_TOWARDZERO #x1)(defconstant $FE_UPWARD #x2)(defconstant $FE_DOWNWARD #x3) |#                                             ; $ELSEC(defconstant $FE_TONEAREST #x0)(defconstant $FE_UPWARD #x1)(defconstant $FE_DOWNWARD #x2)(defconstant $FE_TOWARDZERO #x3);    Definitions of rounding precision macros  (68K only)                    (defconstant $FE_LDBLPREC #x0)(defconstant $FE_DBLPREC #x1)(defconstant $FE_FLTPREC #x2)#|                                              ; $IFC OPTION(mc68881) (defrecord fenv_t    (FPCR :signed-long)   (FPSR :signed-long)   )(def-mactype :fexcept_t (find-mactype ':signed-long))(defconstant $FE_INEXACT #x8)(defconstant $FE_DIVBYZERO #x10)(defconstant $FE_UNDERFLOW #x20)(defconstant $FE_OVERFLOW #x40)(defconstant $FE_INVALID #x80) |#                                             ; $ELSEC(def-mactype :fenv_t (find-mactype ':signed-integer))(def-mactype :fexcept_t (find-mactype ':signed-integer))(defconstant $FE_INVALID #x1)(defconstant $FE_UNDERFLOW #x2)(defconstant $FE_OVERFLOW #x4)(defconstant $FE_DIVBYZERO #x8)(defconstant $FE_INEXACT #x10); $ENDC; $ENDC;    The bitwise OR of all exception macros                                  (defconstant $FE_ALL_EXCEPT (+ #$FE_INEXACT (+ #$FE_DIVBYZERO (+ #$FE_UNDERFLOW (+ #$FE_OVERFLOW #$FE_INVALID)))));    Definition of pointer to IEEE default environment object                ; $PUSH; $J+; default environment object        ; $POP; ;      The following functions provide access to the exception flags.  The      ;      "int" input argument can be constructed by bitwise ORs of the exception  ;      macros: for example: FE_OVERFLOW | FE_INEXACT.                           ; ; ;      The function "feclearexcept" clears the supported exceptions represented ;      by its argument.                                                         ; ;; Warning: No calling method defined for this trap(deftrap-inline "_feclearexcept" ((excepts :signed-long))   nil   () ); ;     The function "fegetexcept" stores a representation of the exception       ;      flags indicated by the argument "excepts" through the pointer argument   ;      "flagp".                                                                 ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fegetexcept" ((flagp (:pointer :signed-integer)) (excepts :signed-long))   nil   () ); ;      The function "feraiseexcept" raises the supported exceptions             ;      represented by its argument.                                             ; ;; Warning: No calling method defined for this trap(deftrap-inline "_feraiseexcept" ((excepts :signed-long))   nil   () ); ;      The function "fesetexcept" sets or clears the exception flags indicated  ;      by the int argument "excepts" according to the representation in the     ;      object pointed to by the pointer argument "flagp".  The value of         ;      "flagp" must have been set by a previous call to "fegetexcept".         ;      This function does not raise exceptions; it just sets the state of       ;      the flags.                                                               ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fesetexcept" ((flagp (:pointer :signed-integer)) (excepts :signed-long))   nil   () ); ;      The function "fetestexcept" determines which of the specified subset of  ;      the exception flags are currently set.  The argument "excepts" specifies ;      the exception flags to be queried as a bitwise OR of the exception       ;      macros.  This function returns the bitwise OR of the exception macros    ;      corresponding to the currently set exceptions included in "excepts".     ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fetestexcept" ((excepts :signed-long))   :signed-long   () ); ;      The following functions provide control of rounding direction modes.     ; ; ;      The function "fegetround" returns the value of the rounding direction    ;      macro which represents the current rounding direction.                   ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fegetround" ()   :signed-long   () ); ;      The function "fesetround" establishes the rounding direction represented ;      by its argument.  It returns nonzero if and only if the argument matches ;      a rounding direction macro.  If not, the rounding direction is not       ;      changed.                                                                 ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fesetround" ((round :signed-long))   :signed-long   () ); ;     The following functions manage the floating-point environment, exception  ;     flags and dynamic modes, as one entity.                                   ; ; ;      The function "fegetenv" stores the current floating-point environment    ;      in the object pointed to by its pointer argument "envp".                 ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fegetenv" ((envp (:pointer :signed-integer)))   nil   () ); ;      The function "feholdexcept" saves the current environment in the object  ;      pointed to by its pointer argument "envp", clears the exception flags,   ;      and clears floating-point exception enables.  This function supersedes   ;      the SANE function "procentry", but it does not change the current        ;      rounding direction mode.                                                 ; ;; Warning: No calling method defined for this trap(deftrap-inline "_feholdexcept" ((envp (:pointer :signed-integer)))   :signed-long   () ); ;      The function "fesetenv" installs the floating-point environment          ;      environment represented by the object pointed to by its argument         ;      "envp".  The value of "envp" must be set by a call to "fegetenv" or     ;      "feholdexcept", by an implementation-defined macro of type "fenv_t",     ;      or by the use of the pointer macro FE_DFL_ENV as the argument.           ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fesetenv" ((envp (:pointer :signed-integer)))   nil   () ); ;      The function "feupdateenv" saves the current exceptions into its         ;      automatic storage, installs the environment represented through its      ;      pointer argument "envp", and then re-raises the saved exceptions.        ;      This function, which supersedes the SANE function "procexit", can be     ;      used in conjunction with "feholdexcept" to write routines which hide     ;      spurious exceptions from their callers.                                  ; ;; Warning: No calling method defined for this trap(deftrap-inline "_feupdateenv" ((envp (:pointer :signed-integer)))   nil   () ); $IFC GENERATING68K; ;      The following functions provide control of rounding precision.           ;      Because the PowerPC does not provide this capability, these functions      ;      are available only for the 68K Macintosh.  Rounding precision values     ;      are defined by the rounding precision macros.  These functions are       ;      equivalent to the SANE functions getprecision and setprecision.          ; ;; Warning: No calling method defined for this trap(deftrap-inline "_fegetprec" ()   :signed-long   () );; Warning: No calling method defined for this trap(deftrap-inline "_fesetprec" ((precision :signed-long))   :signed-long   () ); $ENDC; $SETC UsingIncludes := fpenvIncludes; $ENDC                                         ; __FPENV__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'fenv)