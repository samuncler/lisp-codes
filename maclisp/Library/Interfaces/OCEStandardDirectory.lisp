(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:OCEStandardDirectory.p"; at Tuesday June 6,1995 2:14:56 pm.; ;  	File:		OCEStandardDirectory.p;  ;  	Contains:	Apple Open Collaboration Environment Standard Directory Interfaces.;  ;  	Version:	Technology:	AOCE Toolbox 1.02;  				Package:	Universal Interfaces 2.1ß1 in “MPW Prerelease” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __OCESTANDARDDIRECTORY__; $SETC __OCESTANDARDDIRECTORY__ := 1; $I+; $SETC OCEStandardDirectoryIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __APPLEEVENTS__|#(require-interface 'AppleEvents)#|                                              ; $I AppleEvents.p |#                                             ; $ENDC; 	Errors.p													; 		ConditionalMacros.p										; 	Types.p														; 	Memory.p													; 		MixedMode.p												; 	OSUtils.p													; 	Events.p													; 		Quickdraw.p												; 			QuickdrawText.p										; 	EPPC.p														; 		AppleTalk.p												; 		Files.p													; 		PPCToolbox.p											; 		Processes.p												; 	Notification.p												#|                                              ; $IFC UNDEFINED __ICONS__|#(require-interface 'Icons)#|                                              ; $I Icons.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __WINDOWS__|#(require-interface 'Windows)#|                                              ; $I Windows.p |#                                             ; $ENDC; 	Controls.p													; 		Menus.p													#|                                              ; $IFC UNDEFINED __OCE__|#(require-interface 'OCE)#|                                              ; $I OCE.p |#                                             ; $ENDC; 	Aliases.p													; 	Script.p													; 		IntlResources.p											#|                                              ; $IFC UNDEFINED __OCEAUTHDIR__|#(require-interface 'OCEAuthDir)#|                                              ; $I OCEAuthDir.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kSDPNewPanel 100)(defconstant $kSDPGetNewPanel 101)(defconstant $kSDPDisposePanel 102)(defconstant $kSDPHidePanel 103)(defconstant $kSDPShowPanel 104)(defconstant $kSDPEnablePanel 105)(defconstant $kSDPUpdatePanel 106)(defconstant $kSDPMovePanel 107)(defconstant $kSDPSizePanel 108)(defconstant $kSDPOpenSelectedItem 109)(defconstant $kSDPGetPanelSelectionState 110)(defconstant $kSDPGetPanelSelection 111)(defconstant $kSDPSetPath 112)(defconstant $kSDPPanelEvent 113)(defconstant $kSDPGetPanelSelectionSize 114)(defconstant $kSDPSetIdentity 115)(defconstant $kSDPSelectString 116)(defconstant $kSDPGetPathLength 117)(defconstant $kSDPGetPath 118)(defconstant $kSDPSetFocus 119)(defconstant $kSDPSetPanelBalloonHelp 120)(defconstant $kSDPInstallPanelBusyProc 121)(defconstant $kSDPPromptForID 904)(defconstant $kSDPNewFindPanel 2300)(defconstant $kSDPDisposeFindPanel 2301)(defconstant $kSDPStartFind 2302)(defconstant $kSDPStopFind 2303)(defconstant $kSDPFindPanelEvent 2304)(defconstant $kSDPDrawFindPanel 2305)(defconstant $kSDPShowFindPanel 2306)(defconstant $kSDPHideFindPanel 2307)(defconstant $kSDPMoveFindPanel 2308)(defconstant $kSDPEnableFindPanel 2309)(defconstant $kSDPSetFindPanelFocus 2310)(defconstant $kSDPGetFindPanelState 2311)(defconstant $kSDPGetFindPanelSelectionSize 2312)(defconstant $kSDPGetFindPanelSelection 2313)(defconstant $kSDPSetFindPanelBalloonHelp 2314)(defconstant $kSDPSetFindIdentity 2315)(defconstant $kSDPInstallFindPanelBusyProc 2316)(defconstant $kSDPGetIconByType 1024)(defconstant $kSDPGetDSSpecIcon 1025)(defconstant $kSDPGetCategories 1026)(defconstant $kSDPGetCategoryTypes 1027)(defconstant $kSDPResolveAliasFile 3700)(defconstant $kSDPResolveAliasDSSpec 3701)(defconstant $kSDPRepairPersonalDirectory 6700);  Collaboration Package Gestalts. (defconstant $gestaltSDPStandardDirectoryVersion :|sdvr|)(defconstant $gestaltSDPFindVersion :|dfnd|)(defconstant $gestaltSDPPromptVersion :|prpv|)(defconstant $genericDirectoryIconResource -16721);  icl8, icl4, ICN#, ics#, ics4, ics8, sicn  (defconstant $genericLockedDirectoryIconResource -16716);  icl8, icl4, ICN#, ics#, ics4, ics8, sicn  (defconstant $genericRecordIconResource -16722) ;  icl8, icl4, ICN#, ics#, ics4, ics8, sicn  (defconstant $genericAttributeIconResource -16723);  icl8, icl4, ICN#, ics#, ics4, ics8, sicn  (defconstant $genericTemplateIconResource -16746);  icl8, icl4, ICN#, ics#, ics4, ics8 ;  standard icon suites (defconstant $directoryFolderIconResource -16720);  icl8, icl4, ICN#, ics#, ics4, ics8, sicn  (defconstant $lockedDirectoryFolderIconResource -16719);  icl8, icl4, ICN#, ics#, ics4, ics8, sicn  (defconstant $personalDirectoryIconResource -16718);  icl8, icl4, ICN#, ics#, ics4, ics8, sicn  (defconstant $directoriesIconResource -16717)   ;  icl8, icl4, ICN#, ics#, ics4, ics8, sicn  (defconstant $preferredPersonalDirectoryIconResource -16724);  icl8, icl4, ICN#, ics#, ics4, ics8, sicn  ;  icon IDs for spinning arrows (defconstant $kFirstSpinnerIcon -16745)(defconstant $kLastSpinnerIcon -16738);  resource types (defconstant $kSDPPanelResourceType :|panl|)(defconstant $kSDPFindPanelResourceType :|find|);  Standard FindPanel resource (defconstant $kStandardFindLayout -16700);  Prompt For Identity structures (defconstant $kSDPGuestBit 0)(defconstant $kSDPSpecificIdentityBit 1)(defconstant $kSDPLocalIdentityBit 2);  Values of SDPIdentityKind (defconstant $kSDPGuestMask (* 1 (expt 2 #$kSDPGuestBit)))(defconstant $kSDPSpecificIdentityMask (* 1 (expt 2 #$kSDPSpecificIdentityBit)))(defconstant $kSDPLocalIdentityMask (* 1 (expt 2 #$kSDPLocalIdentityBit)))(def-mactype :sdpidentitykind (find-mactype ':signed-integer))(defconstant $kSDPSuggestionOnly 0)(defconstant $kSDPRestrictToDirectory 1)(defconstant $kSDPRestrictToRecord 2)(def-mactype :sdploginfilterkind (find-mactype ':signed-integer));  Panel Structures ; ; While the panel is in operation, four selection states may exist.; 	1) kSDPNothingSelected means nothing is selected.; 	2) kContainSelected means a volume, folder, catalog, dnode, or PAB is selected.; 	3) kSDPLockedContainerSelected means one of the above, but no access privledges.; 	4) kSDPRecordSelected means that a record is currently selected.; ;  Values of SDPSelectionState (defconstant $kSDPNothingSelected 0)(defconstant $kSDPLockedContainerSelected 1)(defconstant $kSDPContainerSelected 2)(defconstant $kSDPRecordSelected 3)(defconstant $kSDPRecordAliasSelected 4)(defconstant $kSDPContainerAliasSelected 5)(def-mactype :sdpselectionstate (find-mactype ':signed-integer)); ; This type informs the caller of the action the user took, either as the result; of an event (as returned by SDPPanelEvent) or when SDPOpenSelectedItem is called.; ; kSDPProcessed means that the event (or call to SDPOpenSelectedItem) resulted in no; state change.; ; kSDPSelectedAnItem indicates that the user wants to select the currently-hilited; record. This is returned, for example, when a user double-clicks on a record.; ; kSDPChangedSelection implies that the user clicked on a new item (which may mean; that no item is selected).; ;  Values of SDPPanelState (defconstant $kSDPProcessed 0)(defconstant $kSDPSelectedAnItem 1)(defconstant $kSDPChangedSelection 2)(def-mactype :sdppanelstate (find-mactype ':signed-integer)); ; Your application may read any of the fields in a SDPPanelRecord, but it should; use the appropriate routines to make changes to the records with the exception; of the refCon field which your application may read or write at will.  Private; information follows the SDPPanelRecord, so the handle must not be re-sized.; (defrecord SDPPanelRecord    (bounds :rect)   (visible :boolean)   (enabled :boolean)   (focused :boolean)   (padByte :signed-byte)                       ;  Byte    (identity :signed-long)   (refCon :signed-long)   (listRect :rect)   (popupRect :rect)   (numberOfRows :signed-integer)   (rowHeight :signed-integer)   (pabMode :boolean)   (filler1 :boolean)   )(def-mactype :sdppanelptr (find-mactype '(:pointer :sdppanelrecord)))(def-mactype :sdppanelhandle (find-mactype '(:handle :sdppanelrecord)))(def-mactype :panelbusyprocptr (find-mactype ':pointer));  PROCEDURE PanelBusy(Panel: SDPPanelHandle; busy: BOOLEAN); (def-mactype :panelbusyupp (find-mactype ':pointer))(defconstant $uppPanelBusyProcInfo #x1C0)       ;  PROCEDURE (4 byte param, 1 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewPanelBusyProc" ("AOCELib"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallPanelBusyProc" ("AOCELib"))  ((Panel (:handle :sdppanelrecord)) (busy :boolean) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC(def-mactype :panelbusyproc (find-mactype ':pointer));  Find Panel Structures (defconstant $kSDPItemIsSelectedBit 0)(defconstant $kSDPFindTextExistsBit 1);  Values of SDPFindPanelState (defconstant $kSDPItemIsSelectedMask (* 1 (expt 2 #$kSDPItemIsSelectedBit)))(defconstant $kSDPFindTextExistsMask (* 1 (expt 2 #$kSDPFindTextExistsBit)))(def-mactype :sdpfindpanelstate (find-mactype ':signed-integer));  Values of SDPFindPanelFocus (defconstant $kSDPFindPanelNoFocus 0)(defconstant $kSDPFindPanelListHasFocus 1)(defconstant $kSDPFindPanelTextHasFocus 2)(def-mactype :sdpfindpanelfocus (find-mactype ':signed-integer))(defrecord SDPFindPanelRecord    (upperLeft :point)   (visible :boolean)   (enabled :boolean)   (nowFinding :boolean)   (padByte :signed-byte)                       ;  Byte    (currentFocus :signed-integer)   (identity :signed-long)   (simultaneousSearchCount :signed-integer)   (refCon :signed-long)   )(def-mactype :sdpfindpanelptr (find-mactype '(:pointer :sdpfindpanelrecord)))(def-mactype :sdpfindpanelhandle (find-mactype '(:handle :sdpfindpanelrecord)));  Values of SDPFindPanelResult (defconstant $kSDPSelectedAFindItem 0)(defconstant $kSDPFindSelectionChanged 1)(defconstant $kSDPFindCompleted 2)(defconstant $kSDPTextStateChanged 3)(defconstant $kSDPFocusChanged 4)(defconstant $kSDPSelectionAndFocusChanged 5)(defconstant $kSDPMenuChanged 6)(defconstant $kSDPSelectionAndMenuChanged 7)(defconstant $kSDPProcessedFind 8)(def-mactype :sdpfindpanelresult (find-mactype ':signed-integer))(def-mactype :packedrstringlisthandle (find-mactype '(:handle :packedpathname)))(def-mactype :packeddsspechandle (find-mactype '(:handle :packeddsspec)))(def-mactype :findpanelbusyprocptr (find-mactype ':pointer));  PROCEDURE FindPanelBusy(findPanel: SDPFindPanelHandle; busy: BOOLEAN); (def-mactype :findpanelbusyupp (find-mactype ':pointer))(defconstant $uppFindPanelBusyProcInfo #x1C0)   ;  PROCEDURE (4 byte param, 1 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewFindPanelBusyProc" ("AOCELib"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallFindPanelBusyProc" ("AOCELib"))  ((findPanel (:handle :sdpfindpanelrecord)) (busy :boolean) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC(def-mactype :findpanelbusyproc (find-mactype ':pointer));  Prompt For Identity Routines ; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPPromptForID" ("AOCELib"))         ((id (:pointer :signed-long)) (guestPrompt (:string 255)) (specificIDPrompt (:string 255)) (localIDPrompt (:string 255)) (recordType (:pointer :rstring)) (permittedKinds :signed-integer) (selectedKind (:pointer :signed-integer)) (loginFilter (:pointer :recordid)) (filterKind :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 16 16) 904) id guestPrompt specificIDPrompt localIDPrompt recordType permittedKinds selectedKind loginFilter filterKind)); $ENDC; ; SDPNewPanel creates a new panel. You supply the window in which the panel; is to live, the bounds for the panel (which includes both the menu and the list),; whether or not the panel is to be initially visible, the initial RLI (nil for; catalogs and volumes), the types of records that will be shown (only a single; (non-nil) type which may contain wildcards), the identity by which to browse; (for access control reasons), and a refCon which is  available to the caller.; ; CONST                                         ; CONST; CONST; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPNewPanel" ("AOCELib"))         ((newPanel (:pointer (:handle :sdppanelrecord))) (window (:pointer :grafport)) (bounds (:pointer :rect)) (visible :boolean) (enabled :boolean) (initialRLI (:pointer :packedrli)) (typesList (:pointer (:pointer :rstring))) (typeCount :signed-long) (identity :signed-long) (enumFlags :signed-long) (matchTypeHow :signed-byte) (refCon :signed-long))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 21 16) 100) newPanel window bounds visible enabled initialRLI typesList typeCount identity enumFlags matchTypeHow refCon)); $ENDC; ; SDPSetIdentity Sets the identity used for browsing.  NOTE: This call is likely to go; away if the new authentication scheme works.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPSetIdentity" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (identity :signed-long))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 115) panel identity)); $ENDC; ; SDPGetNewPanel is similar to SDPNewPanel above, except it takes a resource id of a; 'panl' resource.; ; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPGetNewPanel" ("AOCELib"))         ((newPanel (:pointer (:handle :sdppanelrecord))) (resourceID :signed-integer) (window (:pointer :grafport)) (initialRLI (:pointer :packedrli)) (identity :signed-long))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 9 16) 101) newPanel resourceID window initialRLI identity)); $ENDC; ; Call this when you're completely done with a panel. It deallocates all of the; associated data structures.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPDisposePanel" ("AOCELib"))         ((panel (:handle :sdppanelrecord)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 2 16) 102) panel)); $ENDC; ; If the panel is visible, it makes it invisible by hiding the menu, turning off; drawing of the list, and erasing and  invaling the list's rectangle.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPHidePanel" ("AOCELib"))         ((panel (:handle :sdppanelrecord)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 2 16) 103) panel)); $ENDC;  If the panel is invisible, it makes it visible and draws it. ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPShowPanel" ("AOCELib"))         ((panel (:handle :sdppanelrecord)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 2 16) 104) panel)); $ENDC;  Disables the list and menu so that it won't accept any commands. ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPEnablePanel" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (enable :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 3 16) 105) panel enable)); $ENDC; ; Move the upper-left-hand corner of the panel to (h,v), given in local coordinates of; the panel's window.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPMovePanel" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (h :signed-integer) (v :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 107) panel h v)); $ENDC; ; Resizes the panel to have the given width and height (keeping the upper-left-hand; corner in a fixed position).; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPSizePanel" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (width :signed-integer) (height :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 108) panel width height)); $ENDC; ; This routine simulates a double-click on the selected item (if there is no selected; item, then it does nothing), and it returns the result of that "double-click" via the; whatHappened parameter. If a container is selected, then that container will be; opened and kMovedDownTheHierarchy is returned. If, however, the user is at the lowest; level in the hierarchy, then kSDPSelectedAnItem is returned.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPOpenSelectedItem" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (whatHappened (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 109) panel whatHappened)); $ENDC; ; Returns whether a record is selected, something else is selected, or nothing is; selected.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPGetPanelSelectionState" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (itsState (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 110) panel itsState)); $ENDC; ; Returns the size of the currently-selected DSSpec, or zero if a record is; not selected.  It is safe to do a NewPtr (SDPGetPanelSelectionSize (...)); ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPGetPanelSelectionSize" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (dsSpecSize (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 114) panel dsSpecSize)); $ENDC; ; Returns the currently-selected DSSpec, or a zero-lengthed; DSSpec if a record is not selected. It is assumed that the selection; buffer allocated is large enough.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPGetPanelSelection" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (selection (:pointer :packeddsspec)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 111) panel selection)); $ENDC; ; Forces browsing to the specified RLI. If prli is the current RLI, then it does; nothing.; ; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPSetPath" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (prli (:pointer :packedrli)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 112) panel prli)); $ENDC; ; This is the main driver for the panel.  You should pass all events to SDPPanelEvent; including NULL events.  If you have more than 1 panel, you will need to; call SDPPanelEvent for each panel.  NOTE:  For Update Events you will also need to call; SDPUpdatePanel as described below.; ; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPPanelEvent" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (theEvent (:pointer :eventrecord)) (whatHappened (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 6 16) 113) panel theEvent whatHappened)); $ENDC; ; SDPUpdatePanel should be called in response to an update event.  Generally you will; have first called BeginUpdate, and pass the windows visRgn as theRgn.  If NULL; is passed for theRgn the entire panel is re-drawn.  NOTE:  Drawing is not cliped to; theRgn, if this is desired, you must first call SetClip.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPUpdatePanel" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (theRgn (:handle :region)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 106) panel theRgn)); $ENDC; ; SDPSelectString scrolls and selects the closest matching string at the current; level.  This is the same behavior as if the user typed in the given string.; ; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPSelectString" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (name (:pointer :rstring)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 116) panel name)); $ENDC; ; SDPGetPathLength returns the length in bytes required to hold the current path name; in RLI format.  This corresponds to the path name in the popup menu.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPGetPathLength" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (pathNameLength (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 117) panel pathNameLength)); $ENDC;  SDPGetPath returns the current rli. ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPGetPath" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (prli (:pointer :packedrli)) (dsRefNum (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 6 16) 118) panel prli dsRefNum)); $ENDC; ; SDPSetFocus will draw the focus rectangle or erase the focus rectangle depending upon; the focus boolean.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPSetFocus" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (focus :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 3 16) 119) panel focus)); $ENDC; ; SDPSetPanelBalloonHelp allows clients to specify a STR# resource id to use for ; balloon help.  Balloon help is unavailable until this call is made.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPSetPanelBalloonHelp" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (balloonHelpID :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 3 16) 120) panel balloonHelpID)); $ENDC; ; SDPInstallPanelBusyProc allows clients to install a CB that will be called while; the panel is aynchronously busy.; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPInstallPanelBusyProc" ("AOCELib"))         ((panel (:handle :sdppanelrecord)) (busyProc :pointer))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 121) panel busyProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPNewFindPanel" ("AOCELib"))         ((newPanel (:pointer (:handle :sdpfindpanelrecord))) (window (:pointer :grafport)) (upperLeft :point) (layoutResourceID :signed-integer) (visible :boolean) (enabled :boolean) (typesList (:pointer (:pointer :rstring))) (typeCount :signed-long) (matchTypeHow :signed-byte) (identity :signed-long) (simultaneousSearchCount :signed-integer) (initialFocus :signed-integer) (refCon :signed-long))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 20 16) 2300) newPanel window upperLeft layoutResourceID visible enabled typesList typeCount matchTypeHow identity simultaneousSearchCount initialFocus refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPDisposeFindPanel" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 2 16) 2301) findPanel)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPStartFind" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 2 16) 2302) findPanel)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPStopFind" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 2 16) 2303) findPanel)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPFindPanelEvent" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (event (:pointer :eventrecord)) (whatHappened (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 6 16) 2304) findPanel event whatHappened)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPUpdateFindPanel" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (theRgn (:handle :region)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 2305) findPanel theRgn)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPShowFindPanel" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 2 16) 2306) findPanel)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPHideFindPanel" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 2 16) 2307) findPanel)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPMoveFindPanel" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (h :signed-integer) (v :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 2308) findPanel h v)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPEnableFindPanel" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (enabled :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 3 16) 2309) findPanel enabled)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPSetFindPanelFocus" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (newFocus :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 3 16) 2310) findPanel newFocus)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPGetFindPanelState" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (itsState (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 2311) findPanel itsState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPGetFindPanelSelectionSize" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (size (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 2312) findPanel size)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPGetFindPanelSelection" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (selection (:pointer :packeddsspec)))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 2313) findPanel selection)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPSetFindPanelBalloonHelp" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (balloonHelpID :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 3 16) 2314) findPanel balloonHelpID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPSetFindIdentity" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (identity :signed-long))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 2315) findPanel identity)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPInstallFindPanelBusyProc" ("AOCELib"))         ((findPanel (:handle :sdpfindpanelrecord)) (busyProc :pointer))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 4 16) 2316) findPanel busyProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SDPGetIconByType" ("AOCELib"))         ((recordType (:pointer :rstring)) (whichIcons :signed-long) (iconSuite (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xAA5C :d0 1024 recordType whichIcons iconSuite)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SDPGetDSSpecIcon" ("AOCELib"))         ((PackedDSSpec (:pointer :packeddsspec)) (whichIcons :signed-long) (iconSuite (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xAA5C :d0 1025 PackedDSSpec whichIcons iconSuite)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SDPGetCategories" ("AOCELib"))         ((categories (:pointer (:handle :packedpathname))) (displayNames (:pointer (:handle :packedpathname))))   (:stack :signed-integer)   (:stack-trap #xAA5C :d0 1026 categories displayNames)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SDPGetCategoryTypes" ("AOCELib"))         ((category (:pointer :rstring)) (types (:pointer (:handle :packedpathname))))   (:stack :signed-integer)   (:stack-trap #xAA5C :d0 1027 category types)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPResolveAliasFile" ("AOCELib"))         ((fileSpec (:pointer :fsspec)) (resolvedDSSpec (:handle :packeddsspec)) (identity :signed-long) (mayPromptUser :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 7 16) 3700) fileSpec resolvedDSSpec identity mayPromptUser)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPResolveAliasDSSpec" ("AOCELib"))         ((theAliasDSSpec (:handle :packeddsspec)) (identity :signed-long) (mayPromptUser :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 5 16) 3701) theAliasDSSpec identity mayPromptUser)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SDPRepairPersonalDirectory" ("AOCELib"))         ((pd (:pointer :fsspec)) (showProgress :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5D :d0 (+ (ash 3 16) 6700) pd showProgress)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := OCEStandardDirectoryIncludes; $ENDC                                         ; __OCESTANDARDDIRECTORY__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'OCEStandardDirectory)