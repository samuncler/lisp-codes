(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Types.p"; at Tuesday June 6,1995 1:59:49 pm.; ;  	File:		Types.p;  ;  	Contains:	Basic Macintosh data types.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __TYPES__; $SETC __TYPES__ := 1; $I+; $SETC TypesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __CONDITIONALMACROS__|#(require-interface 'ConditionalMacros)#|                                              ; $I ConditionalMacros.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $noErr 0)(def-mactype :byte (find-mactype ':unsigned-byte))(def-mactype :signedbyte (find-mactype ':signed-byte))(def-mactype :uint8 (find-mactype ':unsigned-byte))(def-mactype :sint8 (find-mactype ':signed-byte)); Warning: Patching def of type UInt16 from translator table: was :signed-integer, is now :unsigned-integer(def-mactype :uint16 (find-mactype :unsigned-integer))#| (def-mactype :uint16 (find-mactype ':signed-integer)) |#(def-mactype :sint16 (find-mactype ':signed-integer)); Warning: Patching def of type UInt32 from translator table: was :signed-long, is now :unsigned-long(def-mactype :uint32 (find-mactype :unsigned-long))#| (def-mactype :uint32 (find-mactype ':signed-long)) |#(def-mactype :sint32 (find-mactype ':signed-long))(def-mactype :unichar (find-mactype ':unsigned-integer))(def-mactype :byteparameter (find-mactype ':signed-byte)); Warning: Patching def of type Ptr from translator table: was (:pointer :signed-byte), is now :pointer(def-mactype :ptr (find-mactype :pointer))#| (def-mactype :ptr (find-mactype '(:pointer :signed-byte))) |#;   pointer to a master pointer ; Warning: Patching def of type Handle from translator table: was (:pointer :pointer), is now :handle(def-mactype :handle (find-mactype :handle))#| (def-mactype :handle (find-mactype '(:pointer :pointer))) |#; $IFC UNDEFINED qMacApp (def-mactype :integerptr (find-mactype '(:pointer :signed-integer)))(def-mactype :longintptr (find-mactype '(:pointer :signed-long))); $ENDC(def-mactype :fixed (find-mactype ':signed-long))(def-mactype :fixedptr (find-mactype '(:pointer :signed-long)))(def-mactype :fract (find-mactype ':signed-long))(def-mactype :fractptr (find-mactype '(:pointer :signed-long)))(defrecord _extended80    (exp :signed-integer)   (man (:array :signed-integer 4))   )(defrecord _extended96    (exp (:array :signed-integer 2))   (man (:array :signed-integer 4))   ); $IFC GENERATING68K ;  ; Note: on PowerPC extended is undefined.;       on 68K when mc68881 is on, extended is 96 bits.  ;              when mc68881 is off, extended is 80 bits.  ;       Some old toolbox routines require an 80 bit extended so we define extended80; #|                                              ; $IFC GENERATING68881 (%define-record :extended80 (find-record-descriptor :_extended80))(def-mactype :extended96 (find-mactype ':pointer)) |#                                             ; $ELSEC(def-mactype :extended80 (find-mactype ':pointer))(%define-record :extended96 (find-record-descriptor :_extended96)); $ENDC#|                                              ; $ELSEC(%define-record :extended80 (find-record-descriptor :_extended80))(%define-record :extended96 (find-record-descriptor :_extended96)) |#                                             ; $ENDC; ; Note: float_t and double_t are "natural" computational types;       (i.e.the compiler/processor can most easily do floating point; 	  operations with that type.) ; #|                                              ; $IFC GENERATINGPOWERPC ;  on PowerPC, double = 64-bit which is fastest.  float = 32-bit (def-mactype :float_t (find-mactype ':unsigned-long))(def-mactype :double_t (find-mactype ':pointer)); $IFC LSPWRP (defrecord LongDouble    (head :pointer)   (tail :pointer)   ); $ENDC |#                                             ; $ELSEC;  on 68K, long double (a.k.a. extended) is always the fastest.  It is 80 or 96-bits (def-mactype :float_t (find-mactype ':pointer))(def-mactype :double_t (find-mactype ':pointer)); $ENDC(defrecord wide    (hi :signed-long)   (lo :unsigned-long)   )(def-mactype :wideptr (find-mactype '(:pointer :wide)))(defrecord UnsignedWide    (hi :unsigned-long)   (lo :unsigned-long)   )(def-mactype :unsignedwideptr (find-mactype '(:pointer :unsignedwide)))(defconstant $v 0)(defconstant $h 1)(def-mactype :vhselect (find-mactype ':signed-byte))(def-mactype :procptr (find-mactype ':pointer))(def-mactype :register68kprocptr (find-mactype ':pointer));  PROCEDURE ; (def-mactype :prochandle (find-mactype '(:pointer :pointer)))(def-mactype :universalprocptr (find-mactype ':pointer))(def-mactype :universalprochandle (find-mactype '(:pointer :pointer)))(defrecord :Str255   (length :unsigned-byte) (contents (:array :unsigned-byte 255)))(defrecord :Str63   (length :unsigned-byte) (contents (:array :unsigned-byte 63)))(defrecord :Str32   (length :unsigned-byte) (contents (:array :unsigned-byte 32)))(defrecord :Str31   (length :unsigned-byte) (contents (:array :unsigned-byte 31)))(defrecord :Str27   (length :unsigned-byte) (contents (:array :unsigned-byte 27)))(defrecord :Str15   (length :unsigned-byte) (contents (:array :unsigned-byte 15)))(def-mactype :stringptr (find-mactype '(:pointer (:string 255))))(def-mactype :stringhandle (find-mactype '(:handle (:string 255))));  A C string is a zero terminated array of bytes.  There is no length byte.;     a CStringPtr is a pointer to a C string (e.g. char* );     a ConstCStringPtr is a CStringPtr whose contents cannot be changed (e.g. const char* ); (def-mactype :cstringptr (find-mactype ':pointer))(def-mactype :constcstringptr (find-mactype ':pointer))(defrecord :ConstStr255Param   (length :unsigned-byte) (contents (:array :unsigned-byte 255)))(defrecord :ConstStr63Param   (length :unsigned-byte) (contents (:array :unsigned-byte 63)))(defrecord :ConstStr32Param   (length :unsigned-byte) (contents (:array :unsigned-byte 32)))(defrecord :ConstStr31Param   (length :unsigned-byte) (contents (:array :unsigned-byte 31)))(defrecord :ConstStr27Param   (length :unsigned-byte) (contents (:array :unsigned-byte 27)))(defrecord :ConstStr15Param   (length :unsigned-byte) (contents (:array :unsigned-byte 15)))(def-mactype :oserr (find-mactype ':signed-integer))(def-mactype :scriptcode (find-mactype ':signed-integer))(def-mactype :langcode (find-mactype ':signed-integer))#|                                              ; $IFC GENERATING68K OR UNDEFINED MWERKS (defrecord FourCharCode (array (array :character 4 :packed))) |#                                             ; $ELSEC; Warning: Patching def of type FourCharCode from translator table: was :unsigned-long, is now :ostype(def-mactype :fourcharcode (find-mactype :ostype))#| (def-mactype :fourcharcode (find-mactype ':unsigned-long)) |#; $ENDC(def-mactype :styleitem (find-mactype ':unsigned-byte))(defconstant $bold 0)(defconstant $italic 1)(defconstant $underline 2)(defconstant $outline 3)(defconstant $shadow 4)(defconstant $condense 5)(defconstant $extend 6)(def-mactype :style (find-mactype ':unsigned-byte))(defconstant $bold 0)(defconstant $italic 1)(defconstant $underline 2)(defconstant $outline 3)(defconstant $shadow 4)(defconstant $condense 5)(defconstant $extend 6)(def-mactype :ostype (find-mactype ':ostype))(def-mactype :restype (find-mactype ':ostype))(def-mactype :ostypeptr (find-mactype '(:pointer :ostype)))(def-mactype :restypeptr (find-mactype '(:pointer :ostype))); Warning: Patching def of type Point from translator table: was :record, is now :point(def-mactype :point (find-mactype :point))#| (defrecord Point    (:variant       (      (v :signed-integer)      (h :signed-integer)      )      (      (vh (:array :signed-integer 2))      )      )   ) |#(def-mactype :pointptr (find-mactype '(:pointer :point)));; This form has been patched from HD:CCL3.0d17:Interface Translator:Patches:types.patch#|(defrecord Rect    (:variant       (      (top :signed-integer)      (left :signed-integer)      (bottom :signed-integer)      (right :signed-integer)      )      (      (topLeft :point)      (botRight :point)      )      )   )|#;;; stuff to add to types.lisp;;; adds the bottomRight spelling(defrecord Rect    (:variant       ((top :signed-integer)      (left :signed-integer)      (bottom :signed-integer)      (right :signed-integer))      ((topLeft :point)       (:variant ((botRight :point))                 ((bottomRight :point))))      ))(def-mactype :rectptr (find-mactype '(:pointer :rect)));  Numeric version part of 'vers' resource (defrecord NumVersion    (majorRev :unsigned-byte)                    ; 1st part of version number in BCD   (minorAndBugRev :unsigned-byte)              ; 2nd & 3rd part of version number share a byte   (stage :unsigned-byte)                       ; stage code: dev, alpha, beta, final   (nonRelRev :unsigned-byte)                   ; revision level of non-released version   );  'vers' resource format (defrecord (VersRec :handle)    (numericVersion :numversion)                 ; encoded version number   (countryCode :signed-integer)                ; country code from intl utilities   (shortVersion (:string 255))                 ; version number string - worst case   (reserved (:string 255))                     ; longMessage string packed after shortVersion   )(def-mactype :versrecptr (find-mactype '(:pointer :versrec)))(def-mactype :versrechndl (find-mactype '(:handle :versrec)))(def-mactype :kernelid (find-mactype ':pointer))(def-mactype :osstatus (find-mactype ':signed-long))(def-mactype :logicaladdress (find-mactype ':pointer)); ; 	Who implements what debugger functions:; 	; 	Name			MacsBug				SADE		Macintosh Debugger; 	----------		-----------			-------		-----------------------------; 	Debugger		yes					no			InterfaceLib maps to DebugStr; 	DebugStr		yes					no			yes; 	Debugger68k		yes					no			InterfaceLib maps to DebugStr; 	DebugStr68k		yes					no			InterfaceLib maps to DebugStr; 	debugstr		yes					no			InterfaceLib maps to DebugStr; 	SysBreak		no, for SADE		yes			InterfaceLib maps to SysError; 	SysBreakStr		no, for SADE		yes			InterfaceLib maps to SysError; 	SysBreakFunc	no, for SADE		yes			InterfaceLib maps to SysError; ; ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_Debugger" ()   nil   (:stack-trap #xA9FF)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DebugStr" ((debuggerMsg (:string 255)))   nil   (:stack-trap #xABFF)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_Debugger68k" ()   nil   (:stack-trap #xA9FF)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DebugStr68k" ((debuggerMsg (:string 255)))   nil   (:stack-trap #xABFF)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SysBreak" ()   nil   (:stack-trap #xA9C9 :d0 65046)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SysBreakStr" ((debuggerMsg (:string 255)))   nil   (:stack-trap #xA9C9 :d0 65045 debuggerMsg)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SysBreakFunc" ((debuggerMsg (:string 255)))   nil   (:stack-trap #xA9C9 :d0 65044 debuggerMsg)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := TypesIncludes; $ENDC                                         ; __TYPES__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'Types);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:types.patch(DEFRECORD DOUBLE (DATA (:ARRAY :UNSIGNED-BYTE 8)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:types.patch (DEFRECORD EXTENDED (DATA (:ARRAY :UNSIGNED-BYTE 10)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:types.patch (DEFRECORD COMP (DATA (:ARRAY :UNSIGNED-LONG 2)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:types.patch (DEFCONSTANT $TRUE -1);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:types.patch (DEFCONSTANT $FALSE 0)