(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:OCEMail.p"; at Tuesday June 6,1995 2:14:15 pm.; ;  	File:		OCEMail.p;  ;  	Contains:	Apple Open Collaboration Environment OCEMail Interfaces.;  ;  	Version:	Technology:	AOCE Toolbox 1.02;  				Package:	Universal Interfaces 2.1ß1 in “MPW Prerelease” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __OCEMAIL__; $SETC __OCEMAIL__ := 1; $I+; $SETC OCEMailIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __APPLEEVENTS__|#(require-interface 'AppleEvents)#|                                              ; $I AppleEvents.p |#                                             ; $ENDC; 	Errors.p													; 		ConditionalMacros.p										; 	Types.p														; 	Memory.p													; 		MixedMode.p												; 	OSUtils.p													; 	Events.p													; 		Quickdraw.p												; 			QuickdrawText.p										; 	EPPC.p														; 		AppleTalk.p												; 		Files.p													; 		PPCToolbox.p											; 		Processes.p												; 	Notification.p												#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __MEMORY__|#(require-interface 'Memory)#|                                              ; $I Memory.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __TEXTEDIT__|#(require-interface 'TextEdit)#|                                              ; $I TextEdit.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __DIGITALSIGNATURE__|#(require-interface 'DigitalSignature)#|                                              ; $I DigitalSignature.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __OCE__|#(require-interface 'OCE)#|                                              ; $I OCE.p |#                                             ; $ENDC; 	Aliases.p													; 	Script.p													; 		IntlResources.p											#|                                              ; $IFC UNDEFINED __OCEAUTHDIR__|#(require-interface 'OCEAuthDir)#|                                              ; $I OCEAuthDir.p |#                                             ; $ENDC; $IFC UNDEFINED __OCEMESSAGING__(require-interface 'OCEMessaging)               ; $I OCEMessaging.p; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(def-mactype :msamiocompletionprocptr (find-mactype ':pointer));  PROCEDURE MSAMIOCompletion(VAR paramBlock: MSAMParam); (def-mactype :msamiocompletionupp (find-mactype ':pointer))(def-mactype :mailmsgref (find-mactype ':signed-long));  reference to an open msam queue (def-mactype :msamqueueref (find-mactype ':signed-long));  identifies slots managed by a PMSAM (def-mactype :msamslotid (find-mactype ':signed-integer));  reference to an active mailbox (def-mactype :mailboxref (find-mactype ':signed-long));  identifies slots within a mailbox (def-mactype :mailslotid (find-mactype ':signed-integer));  identifies a letter in a mailbox (defrecord MailSeqNum    (slotID :signed-integer)   (seqNum :signed-long)   );  A MailBuffer is used to describe a buffer used for an IO operation.; The location of the buffer is pointed to by 'buffer'. ; When reading, the size of the buffer is 'bufferSize' ; and the size of data actually read is 'dataSize'.; When writing, the size of data to be written is 'bufferSize' ; and the size of data actually written is 'dataSize'.; (defrecord MailBuffer    (bufferSize :signed-long)   (buffer :pointer)   (dataSize :signed-long)   );  A MailReply is used to describe a commonly used reply buffer format.; It contains a count of tuples followed by an array of tuples.; The format of the tuple itself depends on each particular call.; (defrecord MailReply    ;;Changing field tuplecount from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (tupleCount :unsigned-word);  tuple[tupleCount]    );  Shared Memory Communication Area used when Mail Manager sends ; High Level Events to a PMSAM. ; (defrecord SMCA    ;;Changing field smcalength from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (smcaLength :unsigned-word)                  ;  includes size of smcaLength field    (result :signed-integer)   (userBytes :signed-long)   (:variant       (      (slotCID :creationid)                     ;  for create/modify/delete slot calls       )      (      (msgHint :signed-long)                    ;  for kMailEPPCMsgOpened       )      )   ); ************************************************************************************;  Value of creator and types fields for messages and blocks defined by MailManager (defconstant $kMailAppleMailCreator :|apml|)    ;  message and letter block creator (defconstant $kMailLtrMsgType :|lttr|)          ;  message type of letters, reports (defconstant $kMailLtrHdrType :|lthd|)          ;  contains letter header (defconstant $kMailContentType :|body|)         ;  contains content of letter (defconstant $kMailEnclosureListType :|elst|)   ;  contains list of enclosures (defconstant $kMailEnclosureDesktopType :|edsk|);  contains desktop mgr info for enclosures (defconstant $kMailEnclosureFileType :|asgl|)   ;  contains a file enclosure ;  format is defined by AppleSingle (defconstant $kMailImageBodyType :|imag|)       ;  contains image of letter ; 		format is struct TPfPgDir - in Printing.h; 	*	struct TPfPgDir (; 	*		short	pageCount;		- number of pages in the image.; 	*		long	iPgPos[129];	- iPgPos[n] is the offset from the start of the block; 	*								- to image of page n.; 	*								- iPgPos[n+1] - iPgPos[n] is the length of page n.; (defconstant $kMailMSAMType :|gwyi|)            ;  contains msam specific information (defconstant $kMailTunnelLtrType :|tunl|)       ;  used to read a tunnelled message (defconstant $kMailHopInfoType :|hopi|)         ;  used to read hopInfo for a tunnelled message (defconstant $kMailReportType :|rpti|)          ;  contains report info ; ; Reports have the isReport bit set in MailIndications and contain a block of type kMailReport.; This block has a header, IPMReportBlockHeader,; followed by an array of elements, each of type IPMRecipientReport; ; Various families used by mail or related msgs; (defconstant $kMailFamily :|mail|)              ;  Defines family of "mail" msgs: content, header, etc (defconstant $kMailFamilyFile :|file|); ************************************************************************************(def-mactype :mailattributeid (find-mactype ':signed-integer));  Values of MailAttributeID ;  Message store attributes - stored in the catalog ;  Will always be present in a letter and have fixed sizes (defconstant $kMailLetterFlagsBit 1)            ;  MailLetterFlags ;  Letter attributes - stored in the letter ;    Will always be present in a letter and have fixed sizes (defconstant $kMailIndicationsBit 3)            ;  MailIndications (defconstant $kMailMsgTypeBit 4)                ;  OCECreatorType (defconstant $kMailLetterIDBit 5)               ;  MailLetterID (defconstant $kMailSendTimeStampBit 6)          ;  MailTime (defconstant $kMailNestingLevelBit 7)           ;  MailNestingLevel (defconstant $kMailMsgFamilyBit 8)              ;  OSType ;  Letter attributes - stored in the letter;    May be present in a letter and have fixed sizes (defconstant $kMailReplyIDBit 9)                ;  MailLetterID (defconstant $kMailConversationIDBit 10)        ;  MailLetterID ;  Letter attributes - stored in the letter;    May be present in a letter and have variable length sizes (defconstant $kMailSubjectBit 11)               ;  RString (defconstant $kMailFromBit 12)                  ;  MailRecipient (defconstant $kMailToBit 13)                    ;  MailRecipient (defconstant $kMailCcBit 14)                    ;  MailRecipient (defconstant $kMailBccBit 15)                   ;  MailRecipient (def-mactype :mailattributemask (find-mactype ':signed-long));  Values of MailAttributeMask (defconstant $kMailLetterFlagsMask (* 1 (expt 2 (- #$kMailLetterFlagsBit 1))))(defconstant $kMailIndicationsMask (* 1 (expt 2 (- #$kMailIndicationsBit 1))))(defconstant $kMailMsgTypeMask (* 1 (expt 2 (- #$kMailMsgTypeBit 1))))(defconstant $kMailLetterIDMask (* 1 (expt 2 (- #$kMailLetterIDBit 1))))(defconstant $kMailSendTimeStampMask (* 1 (expt 2 (- #$kMailSendTimeStampBit 1))))(defconstant $kMailNestingLevelMask (* 1 (expt 2 (- #$kMailNestingLevelBit 1))))(defconstant $kMailMsgFamilyMask (* 1 (expt 2 (- #$kMailMsgFamilyBit 1))))(defconstant $kMailReplyIDMask (* 1 (expt 2 (- #$kMailReplyIDBit 1))))(defconstant $kMailConversationIDMask (* 1 (expt 2 (- #$kMailConversationIDBit 1))))(defconstant $kMailSubjectMask (* 1 (expt 2 (- #$kMailSubjectBit 1))))(defconstant $kMailFromMask (* 1 (expt 2 (- #$kMailFromBit 1))))(defconstant $kMailToMask (* 1 (expt 2 (- #$kMailToBit 1))))(defconstant $kMailCcMask (* 1 (expt 2 (- #$kMailCcBit 1))))(defconstant $kMailBccMask (* 1 (expt 2 (- #$kMailBccBit 1))))(def-mactype :mailattributebitmap (find-mactype ':signed-long)); ************************************************************************************(def-mactype :maillettersystemflags (find-mactype ':signed-integer));  Values of MailLetterSystemFlags ;  letter is available locally (either by nature or via cache) (defconstant $kMailIsLocalBit 2)(defconstant $kMailIsLocalMask (* 1 (expt 2 #$kMailIsLocalBit)))(def-mactype :mailletteruserflags (find-mactype ':signed-integer))(defconstant $kMailReadBit 0)                   ;  this letter has been opened (defconstant $kMailDontArchiveBit 1)            ;  this letter is not ;  to be archived either because ; 										   it has already been archived or ; 										   it should not be archived. (defconstant $kMailInTrashBit 2)                ;  this letter is in trash ;  Values of MailLetterUserFlags (defconstant $kMailReadMask (* 1 (expt 2 #$kMailReadBit)))(defconstant $kMailDontArchiveMask (* 1 (expt 2 #$kMailDontArchiveBit)))(defconstant $kMailInTrashMask (* 1 (expt 2 #$kMailInTrashBit)))(defrecord MailLetterFlags    (sysFlags :signed-integer)   (userFlags :signed-integer)   )(defrecord MailMaskedLetterFlags    (flagMask :mailletterflags)                  ;  flags that are to be set    (flagValues :mailletterflags)                ;  and their values    )(defconstant $kMailOriginalInReportBit 1)(defconstant $kMailNonReceiptReportsBit 3)(defconstant $kMailReceiptReportsBit 4)(defconstant $kMailForwardedBit 5)(defconstant $kMailPriorityBit 6)(defconstant $kMailIsReportWithOriginalBit 8)(defconstant $kMailIsReportBit 9)(defconstant $kMailHasContentBit 10)(defconstant $kMailHasSignatureBit 11)(defconstant $kMailAuthenticatedBit 12)(defconstant $kMailSentBit 13);  Values of MailIndications (defconstant $kMailSentMask (* 1 (expt 2 (- #$kMailSentBit 1))))(defconstant $kMailAuthenticatedMask (* 1 (expt 2 (- #$kMailAuthenticatedBit 1))))(defconstant $kMailHasSignatureMask (* 1 (expt 2 (- #$kMailHasSignatureBit 1))))(defconstant $kMailHasContentMask (* 1 (expt 2 (- #$kMailHasContentBit 1))))(defconstant $kMailIsReportMask (* 1 (expt 2 (- #$kMailIsReportBit 1))))(defconstant $kMailIsReportWithOriginalMask (* 1 (expt 2 (- #$kMailIsReportWithOriginalBit 1))))(defconstant $kMailPriorityMask (* 3 (expt 2 (- #$kMailPriorityBit 1))))(defconstant $kMailForwardedMask (* 1 (expt 2 (- #$kMailForwardedBit 1))))(defconstant $kMailReceiptReportsMask (* 1 (expt 2 (- #$kMailReceiptReportsBit 1))))(defconstant $kMailNonReceiptReportsMask (* 1 (expt 2 (- #$kMailNonReceiptReportsBit 1))))(defconstant $kMailOriginalInReportMask (* 3 (expt 2 (- #$kMailOriginalInReportBit 1))))(def-mactype :mailindications (find-mactype ':signed-long));  values of the field originalInReport in MailIndications (defconstant $kMailNoOriginal 0)                ;  do not enclose original in reports (defconstant $kMailEncloseOnNonReceipt 3)       ;  enclose original in non-delivery reports (%define-record :mailletterid (find-record-descriptor :ipmmsgid))(defrecord MailTime    (time :signed-long)                          ;  current UTC(GMT) time    ;;Changing field offset from signed-long to unsigned-long to match C header (pretty-sure)   (offset :unsigned-long)                      ;  offset from GMT    );  innermost letter has nestingLevel 0 (def-mactype :mailnestinglevel (find-mactype ':signed-integer))(%define-record :mailrecipient (find-record-descriptor :dsspec)); ************************************************************************************(defconstant $kMailTextSegmentBit 0)(defconstant $kMailPictSegmentBit 1)(defconstant $kMailSoundSegmentBit 2)(defconstant $kMailStyledTextSegmentBit 3)(defconstant $kMailMovieSegmentBit 4)(def-mactype :mailsegmentmask (find-mactype ':signed-integer));  Values of MailSegmentMask (defconstant $kMailTextSegmentMask (* 1 (expt 2 #$kMailTextSegmentBit)))(defconstant $kMailPictSegmentMask (* 1 (expt 2 #$kMailPictSegmentBit)))(defconstant $kMailSoundSegmentMask (* 1 (expt 2 #$kMailSoundSegmentBit)))(defconstant $kMailStyledTextSegmentMask (* 1 (expt 2 #$kMailStyledTextSegmentBit)))(defconstant $kMailMovieSegmentMask (* 1 (expt 2 #$kMailMovieSegmentBit)))(def-mactype :mailsegmenttype (find-mactype ':signed-integer));  Values of MailSegmentType (defconstant $kMailInvalidSegmentType 0)(defconstant $kMailTextSegmentType 1)(defconstant $kMailPictSegmentType 2)(defconstant $kMailSoundSegmentType 3)(defconstant $kMailStyledTextSegmentType 4)(defconstant $kMailMovieSegmentType 5); ************************************************************************************(defconstant $kMailErrorLogEntryVersion #x101)(defconstant $kMailMSAMErrorStringListID 128)   ;  These 'STR#' resources should be (defconstant $kMailMSAMActionStringListID 129)  ;  in the PMSAM resource fork (def-mactype :maillogerrortype (find-mactype ':signed-integer));  Values of MailLogErrorType (defconstant $kMailELECorrectable 0)(defconstant $kMailELEError 1)(defconstant $kMailELEWarning 2)(defconstant $kMailELEInformational 3)(def-mactype :maillogerrorcode (find-mactype ':signed-integer));  Values of MailLogErrorCode (defconstant $kMailMSAMErrorCode 0)             ;  positive codes are indices into; 												   PMSAM defined strings (defconstant $kMailMiscError -1)                ;  negative codes are OCE defined (defconstant $kMailNoModem -2)                  ;  modem required, but missing (defrecord MailErrorLogEntryInfo    (version :signed-integer)   (timeOccurred :signed-long)                  ;  do not fill in    (reportingPMSAM (:string 31))                ;  do not fill in    (reportingMSAMSlot (:string 31))             ;  do not fill in    (errorType :signed-integer)   (errorCode :signed-integer)   (errorResource :signed-integer)              ;  resources are valid if    (actionResource :signed-integer)             ;  errorCode = kMailMSAMErrorCode; 												   index starts from 1    (filler :signed-long)   ;;Changing field filler2 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler2 :unsigned-word)   ); ************************************************************************************(def-mactype :mailblockmode (find-mactype ':signed-integer));  Values of MailBlockMode (defconstant $kMailFromStart 1)                 ;  write data from offset calculated from (defconstant $kMailFromLEOB 2)                  ;  start of block, end of block, (defconstant $kMailFromMark 3)                  ;  or from the current mark (defrecord MailEnclosureInfo    (enclosureName (:pointer (:string 255)))   (catInfo (:pointer :cinfopbrec))   (comment (:pointer (:string 255)))   (icon :pointer)   ); ************************************************************************************(defconstant $kOCESetupLocationNone 0)          ;  disconnect state (defconstant $kOCESetupLocationMax 8)           ;  maximum location value (def-mactype :ocesetuplocation (find-mactype ':character));  location state is a bitmask, 0x1=>1st location active, ;  * 0x2 => 2nd, 0x4 => 3rd, etc.;  (def-mactype :maillocationflags (find-mactype ':character))(defrecord MailLocationInfo    (location :character)   (active :signed-byte)                        ;  MailLocationFlags    ); ************************************************************************************;  Definitions for Personal MSAMs ; ************************************************************************************(defconstant $kMailEPPCMsgVersion 3)(defrecord MailEPPCMsg    (version :signed-integer)   (:variant       (      (theSMCA (:pointer :smca))                ;  for 'crsl', 'mdsl', 'dlsl', 'sndi', 'msgo', 'admn'       )      (      (sequenceNumber :signed-long)             ;  for 'inqu', 'dlom'       )      (      (locationInfo :maillocationinfo)          ;  for 'locc'       )      )   );  Values of OCE defined High Level Event message classes (defconstant $kMailEPPCCreateSlot :|crsl|)(defconstant $kMailEPPCModifySlot :|mdsl|)(defconstant $kMailEPPCDeleteSlot :|dlsl|)(defconstant $kMailEPPCShutDown :|quit|)(defconstant $kMailEPPCMailboxOpened :|mbop|)(defconstant $kMailEPPCMailboxClosed :|mbcl|)(defconstant $kMailEPPCMsgPending :|msgp|)(defconstant $kMailEPPCSendImmediate :|sndi|)(defconstant $kMailEPPCContinue :|cont|)(defconstant $kMailEPPCSchedule :|sked|)(defconstant $kMailEPPCAdmin :|admn|)(defconstant $kMailEPPCInQUpdate :|inqu|)(defconstant $kMailEPPCMsgOpened :|msgo|)(defconstant $kMailEPPCDeleteOutQMsg :|dlom|)(defconstant $kMailEPPCWakeup :|wkup|)(defconstant $kMailEPPCLocationChanged :|locc|)(defrecord MailTimer    (:variant       (      (frequency :signed-long)                  ;  how often to connect       )      (      (connectTime :signed-long)                ;  time since midnight       )      )   )(defconstant $kMailTimerOff 0)                  ;  control is off (defconstant $kMailTimerTime 1)                 ;  specifies connect time (relative to midnight) (defconstant $kMailTimerFrequency 2)            ;  specifies connect frequency (def-mactype :mailtimerkind (find-mactype ':unsigned-byte))(defrecord MailTimers    (sendTimeKind :signed-byte)                  ;  MailTimerKind ;  either kMailTimerTime or kMailTimerFrequency    (receiveTimeKind :signed-byte)               ;  MailTimerKind ;  either kMailTimerTime or kMailTimerFrequency    (send :mailtimer)   (receive :mailtimer)   )(defrecord MailStandardSlotInfoAttribute    (version :signed-integer)   (active :signed-byte)                        ;  MailLocationFlags ;  active if MailLocationMask(i) is set    (padByte :signed-byte)                       ;  Byte    (sendReceiveTimer :mailtimers)   )(defrecord PMSAMGetMSAMRecordPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msamCID :creationid)   )(defrecord PMSAMOpenQueuesPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (inQueueRef :signed-long)   (outQueueRef :signed-long)   (MSAMSlotID :signed-integer)   (filler (:array :signed-long 2))   )(def-mactype :pmsamstatus (find-mactype ':signed-integer));  Values of PMSAMStatus (defconstant $kPMSAMStatusPending 1)            ;  for inQueue and outQueue (defconstant $kPMSAMStatusError 2)              ;  for inQueue and outQueue (defconstant $kPMSAMStatusSending 3)            ;  for outQueue only (defconstant $kPMSAMStatusCaching 4)            ;  for inQueue only (defconstant $kPMSAMStatusSent 5)               ;  for outQueue only (defrecord PMSAMSetStatusPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   (seqNum :signed-long)   (msgHint :signed-long)                       ;  for posting cache error,set this to 0 when report outq status    (status :signed-integer)   )(defrecord PMSAMLogErrorPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MSAMSlotID :signed-integer)                 ;  0 for PMSAM errors    (logEntry (:pointer :mailerrorlogentryinfo))   (filler (:array :signed-long 2))   ); **************************************************************************************(defconstant $kMailMsgSummaryVersion 1)(defrecord MailMasterData    (attrMask :signed-long)                      ;  indicates attributes present in MsgSummary    (messageID :ipmmsgid)   (replyID :ipmmsgid)   (conversationID :ipmmsgid)   );  Values for addressedToMe in struct MailCoreData (defconstant $kAddressedAs_TO #x1)(defconstant $kAddressedAs_CC #x2)(defconstant $kAddressedAs_BCC #x4)(defrecord MailCoreData    (letterFlags :mailletterflags)   ;;Changing field messagesize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (messageSize :unsigned-long)   (letterIndications :signed-long)   (messageType :ocecreatortype)   (sendTime :mailtime)   (messageFamily :ostype)   (reserved :signed-byte)                      ;  unsigned char    ;;Changing field addressedtome from signed-byte to unsigned-byte to match C header (educated-guess)   (addressedToMe :unsigned-byte)               ;  unsigned char    (agentInfo (:array :character 6))            ;  6 bytes of special info [set to zero]; 	* these are variable length and even padded    (sender :rstring32)                          ;  recipient's entityName (trunc)   (subject :rstring32)                         ;  subject maybe truncated    )(defrecord MSAMMsgSummary    (version :signed-integer)                    ;  following flags are defaulted by Toolbox    (msgDeleted :boolean)                        ;  true if msg is to be deleted by PMSAM    (msgUpdated :boolean)                        ;  true if msgSummary was updated by MailManager    (msgCached :boolean)                         ;  true if msg is in the slot's InQueue    (padByte :signed-byte)                       ;  Byte    (masterData :mailmasterdata)   (coreData :mailcoredata)   );  PMSAM can put up to 128 bytes of private msg summary data (defconstant $kMailMaxPMSAMMsgSummaryData 128)(defrecord PMSAMCreateMsgSummaryPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (inQueueRef :signed-long)   (seqNum :signed-long)                        ;  <- seq of the new message    (msgSummary (:pointer :msammsgsummary))      ;  attributes and mask filled in    (buffer (:pointer :mailbuffer))              ;  PMSAM specific data to be appended    )(defrecord PMSAMPutMsgSummaryPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (inQueueRef :signed-long)   (seqNum :signed-long)   (letterFlags (:pointer :mailmaskedletterflags));  if not nil, then set msgStoreFlags    (buffer (:pointer :mailbuffer))              ;  PMSAM specific data to be overwritten    )(defrecord PMSAMGetMsgSummaryPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (inQueueRef :signed-long)   (seqNum :signed-long)   (msgSummary (:pointer :msammsgsummary))      ;  if not nil, then read in the msgSummary    (buffer (:pointer :mailbuffer))              ;  PMSAM specific data to be read    ;;Changing field msgsummaryoffset from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (msgSummaryOffset :unsigned-word)            ;  offset of PMSAM specific data; 											   from start of MsgSummary    ); **************************************************************************************;  Definitions for Server MSAMs ; ************************************************************************************(def-mactype :smsamadmincode (find-mactype ':signed-integer));  Values of SMSAMAdminCode (defconstant $kSMSAMNotifyFwdrSetupChange 1)(defconstant $kSMSAMNotifyFwdrNameChange 2)(defconstant $kSMSAMNotifyFwdrPwdChange 3)(defconstant $kSMSAMGetDynamicFwdrParams 4)(def-mactype :smsamslotchanges (find-mactype ':signed-long))(defconstant $kSMSAMFwdrHomeInternetChangedBit 0)(defconstant $kSMSAMFwdrConnectedToChangedBit 1)(defconstant $kSMSAMFwdrForeignRLIsChangedBit 2)(defconstant $kSMSAMFwdrMnMServerChangedBit 3);  Values of SMSAMSlotChanges (defconstant $kSMSAMFwdrEverythingChangedMask -1)(defconstant $kSMSAMFwdrHomeInternetChangedMask (* 1 (expt 2 #$kSMSAMFwdrHomeInternetChangedBit)))(defconstant $kSMSAMFwdrConnectedToChangedMask (* 1 (expt 2 #$kSMSAMFwdrConnectedToChangedBit)))(defconstant $kSMSAMFwdrForeignRLIsChangedMask (* 1 (expt 2 #$kSMSAMFwdrForeignRLIsChangedBit)))(defconstant $kSMSAMFwdrMnMServerChangedMask (* 1 (expt 2 #$kSMSAMFwdrMnMServerChangedBit)));  kSMSAMNotifyFwdrSetupChange (defrecord SMSAMSetupChange    (whatChanged :signed-long)                   ;   --> bitmap of what parameters changed    (serverHint :addrblock)                      ;   --> try this ADAP server first    );  kSMSAMNotifyFwdrNameChange (defrecord SMSAMNameChange    (newName :rstring)                           ;   --> msams new name    (serverHint :addrblock)                      ;   --> try this ADAP server first    );  kSMSAMNotifyFwdrPasswordChange (defrecord SMSAMPasswordChange    (newPassword :rstring)                       ;   --> msams new password    (serverHint :addrblock)                      ;   --> try this ADAP server first    );  kSMSAMGetDynamicFwdrParams (defrecord SMSAMDynamicParams    ;;Changing field curdiskused from signed-long to unsigned-long to match C header (pretty-darn-sure)   (curDiskUsed :unsigned-long)                 ;  <--  amount of disk space used by msam    ;;Changing field curmemoryused from signed-long to unsigned-long to match C header (pretty-darn-sure)   (curMemoryUsed :unsigned-long)               ;  <--  amount of memory used by msam    )(defrecord SMSAMAdminEPPCRequest    (adminCode :signed-integer)   (:variant       (      (setupChange :smsamsetupchange)      )      (      (nameChange :smsamnamechange)      )      (      (passwordChange :smsampasswordchange)      )      (      (dynamicParams :smsamdynamicparams)      )      )   )(defrecord SMSAMSetupPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (serverMSAM (:pointer :recordid))   (password (:pointer :rstring))   (gatewayType :ostype)   (gatewayTypeDescription (:pointer :rstring))   (catalogServerHint :addrblock)   )(defrecord SMSAMStartupPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msamIdentity :signed-long)   (queueRef :signed-long)   )(defrecord SMSAMShutdownPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   ); **************************************************************************************;  Definitions for reading and writing MSAM Letters ; **************************************************************************************(defrecord MSAMEnumeratePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   (startSeqNum :signed-long)   (nextSeqNum :signed-long);  buffer contains a Mail Reply. Each tuple is a ; 	MSAMEnumerateInQReply when enumerating the inQueue; 	MSAMEnumerateOutQReply when enumerating the outQueue    (buffer :mailbuffer)   )(defrecord MSAMEnumerateInQReply    (seqNum :signed-long)   (msgDeleted :boolean)                        ;  true if msg is to be deleted by PMSAM    (msgUpdated :boolean)                        ;  true if MsgSummary has been updated by TB    (msgCached :boolean)                         ;  true if msg is in the incoming queue    (padByte :signed-byte)                       ;  Byte    )(defrecord MSAMEnumerateOutQReply    (seqNum :signed-long)   (done :boolean)                              ;  true if all responsible recipients have been processed    (priority :signed-byte)   (msgFamily :ostype)   (approxSize :signed-long)   (tunnelForm :boolean)                        ;  true if this letter has to be tunnelled    (padByte :signed-byte)                       ;  Byte    (nextHop :networkspec)                       ;  valid if tunnelForm is true    (msgType :ocecreatortype)   )(defrecord MSAMDeletePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   (seqNum :signed-long)   (msgOnly :boolean)                           ;  only valid for PMSAM & inQueue ;  set true to delete message but not msgSummary    (padByte :signed-byte)                       ;  Byte ;  only valid for SMSAM & tunnelled messages    (result :signed-integer)   )(defrecord MSAMOpenPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   (seqNum :signed-long)   (MailMsgRef :signed-long)   )(defrecord MSAMOpenNestedPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (nestedRef :signed-long)   )(defrecord MSAMClosePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   )(defrecord MSAMGetMsgHeaderPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (selector :signed-byte)                      ;  IPMHeaderSelector    (filler1 :boolean)   ;;Changing field offset from signed-long to unsigned-long to match C header (pretty-sure)   (offset :unsigned-long)   (buffer :mailbuffer)   ;;Changing field remaining from signed-long to unsigned-long to match C header (pretty-sure)   (remaining :unsigned-long)   )(defrecord MSAMGetAttributesPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (requestMask :signed-long)                   ;  kMailIndicationsBit thru kMailSubjectBit    (buffer :mailbuffer); 	buffer returned will contain the attribute values of ; 		the attributes indicated in responseMask, ; 		from the attribute indicated by the least significant bit set; 		to the attribute indicated by the most significant bit set.; 		Note that recipients - from, to, cc, bcc cannot be read using; 		this call. Use GetRecipients to read these.    (responseMask :signed-long)   (more :boolean)   (filler1 :boolean)   );  attrID value to get resolved recipient list (defconstant $kMailResolvedList 0)(defrecord MailOriginalRecipient    (index :signed-integer)   );  Followed by OCEPackedRecipient (defrecord MailResolvedRecipient    (index :signed-integer)   (recipientFlags :signed-integer)   (responsible :boolean)   (padByte :signed-byte)                       ;  Byte    );  Followed by OCEPackedRecipient (defrecord MSAMGetRecipientsPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (attrID :signed-integer)                     ;  kMailFromBit thru kMailBccBit    ;;Changing field startindex from signed-integer to unsigned-word to match C header (pretty-sure)   (startIndex :unsigned-word)                  ;  starts at 1    (buffer :mailbuffer);  	buffer contains a Mail Reply. Each tuple is a; 		MailOriginalRecipient if getting original recipients ; 								ie the attrID is kMail[From, To, Cc, Bcc]Bit; 		MailResolvedRecipient if getting resolved reicpients; 								ie the attrID is kMailResolvedList; 		Both tuples are word alligned.     ;;Changing field nextindex from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (nextIndex :unsigned-word)   (more :boolean)   (filler1 :boolean)   )(defrecord MSAMGetContentPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (segmentMask :signed-integer)   (buffer :mailbuffer)   (textScrap (:pointer :stscrprec))   (script :signed-integer)   (segmentType :signed-integer)   (endOfScript :boolean)   (endOfSegment :boolean)   (endOfContent :boolean)   (filler1 :boolean)   (segmentLength :signed-long)                 ;  NEW: <-  valid first call in a segment    (segmentID :signed-long)                     ;  NEW: <-> identifier for this segment    )(defrecord MSAMGetEnclosurePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (contentEnclosure :boolean)   (padByte :signed-byte)                       ;  Byte    (buffer :mailbuffer)   (endOfFile :boolean)   (endOfEnclosures :boolean)   )(defrecord MailBlockInfo    (blockType :ocecreatortype)   ;;Changing field offset from signed-long to unsigned-long to match C header (pretty-sure)   (offset :unsigned-long)   ;;Changing field blocklength from signed-long to unsigned-long to match C header (pretty-darn-sure)   (blockLength :unsigned-long)   )(defrecord MSAMEnumerateBlocksPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   ;;Changing field startindex from signed-integer to unsigned-word to match C header (pretty-sure)   (startIndex :unsigned-word)                  ;  starts at 1    (buffer :mailbuffer);  	buffer contains a Mail Reply. Each tuple is a MailBlockInfo    ;;Changing field nextindex from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (nextIndex :unsigned-word)   (more :boolean)   (filler1 :boolean)   )(defrecord MSAMGetBlockPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (blockType :ocecreatortype)   ;;Changing field blockindex from signed-integer to unsigned-word to match C header (pretty-sure)   (blockIndex :unsigned-word)   (buffer :mailbuffer)   ;;Changing field dataoffset from signed-long to unsigned-long to match C header (pretty-sure)   (dataOffset :unsigned-long)   (endOfBlock :boolean)   (padByte :signed-byte)                       ;  Byte    ;;Changing field remaining from signed-long to unsigned-long to match C header (pretty-sure)   (remaining :unsigned-long)   );  YOU SHOULD BE USING THE NEW FORM OF MARK RECIPIENTS;  * THIS VERSION IS MUCH SLOWER AND KEPT FOR COMPATIBILITY;  * REASONS.; ;  not valid for tunnel form letters (defrecord MSAMMarkRecipientsPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   (seqNum :signed-long);  	buffer contains a Mail Reply. Each tuple is an unsigned short,; 		the index of a recipient to be marked.    (buffer :mailbuffer)   );  ;  * same as MSAMMarkRecipients except it takes a mailMsgRef instead of ;  * queueRef, seqNum ; ;  not valid for tunnel form letters (defrecord MSAMnMarkRecipientsPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long);  	buffer contains a Mail Reply. Each tuple is an unsigned short,; 		the index of a recipient to be marked.    (buffer :mailbuffer)   ); **************************************************************************************(defrecord MSAMCreatePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   (asLetter :boolean)                          ;  indicate if we should create as letter or msg    (filler1 :boolean)   (msgType :ipmmsgtype)                        ;  up to application discretion: must be of IPMSenderTag; 										   kIPMOSFormatType for asLetter=true    (refCon :signed-long)                        ;  for messages only    (seqNum :signed-long)                        ;  set if creating message in the inQueue    (tunnelForm :boolean)                        ;  if true tunnelForm else newForm    (bccRecipients :boolean)                     ;  true if creating letter with bcc recipients    (newRef :signed-long)   )(defrecord MSAMBeginNestedPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (refCon :signed-long)                        ;  for messages only    (msgType :ipmmsgtype)   )(defrecord MSAMEndNestedPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   )(defrecord MSAMSubmitPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (submitFlag :boolean)   (padByte :signed-byte)                       ;  Byte    (msgID :ipmmsgid)   )(defrecord MSAMPutMsgHeaderPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (replyQueue (:pointer :dsspec))   (sender (:pointer :ipmsender))   (deliveryNotification :signed-byte)   (priority :signed-byte)   )(defrecord MSAMPutAttributePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (attrID :signed-integer)                     ;  kMailIndicationsBit thru kMailSubjectBit    (buffer :mailbuffer)   )(defrecord MSAMPutRecipientPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (attrID :signed-integer)                     ;  kMailFromBit thru kMailBccBit    (recipient (:pointer :dsspec))   (responsible :boolean)                       ;  valid for server and message msams only    (filler1 :boolean)   )(defrecord MSAMPutContentPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (segmentType :signed-integer)   (append :boolean)   (padByte :signed-byte)                       ;  Byte    (buffer :mailbuffer)   (textScrap (:pointer :stscrprec))   (startNewScript :boolean)   (filler1 :boolean)   (script :signed-integer)                     ;  valid only if startNewScript is true    )(defrecord MSAMPutEnclosurePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (contentEnclosure :boolean)   (padByte :signed-byte)                       ;  Byte    (hfs :boolean)                               ;  true => in file system, false => in memory    (append :boolean)   (buffer :mailbuffer)                         ;  Unused if hfs == true    (enclosure :fsspec)   (addlInfo :mailenclosureinfo)   )(defrecord MSAMPutBlockPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (refCon :signed-long)                        ;  for messages only    (blockType :ocecreatortype)   (append :boolean)   (filler1 :boolean)   (buffer :mailbuffer)   (mode :signed-integer)                       ;  if blockType is kMailTunnelLtrType or kMailHopInfoType; 									   mode is assumed to be kMailFromMark    ;;Changing field offset from signed-long to unsigned-long to match C header (pretty-sure)   (offset :unsigned-long)   ); **************************************************************************************(defrecord MSAMCreateReportPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)                      ;  to distinguish personal and server MSAMs    (MailMsgRef :signed-long)   (msgID :ipmmsgid)                            ;  kMailLetterIDBit of letter being reported upon    (sender (:pointer :dsspec))                  ;  sender of the letter you are creating report on    )(defrecord MSAMPutRecipientReportPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailMsgRef :signed-long)   (recipientIndex :signed-integer)             ;  recipient index in the original letter    (result :signed-integer)                     ;  result of sending the recipient    ); **************************************************************************************(defrecord MailWakeupPMSAMPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (pmsamCID :creationid)   (MailSlotID :signed-integer)   )(defrecord MailCreateMailSlotPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailboxRef :signed-long)   (timeout :signed-long)   (pmsamCID :creationid)   (SMCA :smca)   )(defrecord MailModifyMailSlotPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (MailboxRef :signed-long)   (timeout :signed-long)   (pmsamCID :creationid)   (SMCA :smca)   ); **************************************************************************************(defconstant $kPMSAMGetMSAMRecord 1286)(defconstant $kPMSAMOpenQueues 1280)(defconstant $kPMSAMLogError 1313)(defconstant $kPMSAMSetStatus 1319)(defconstant $kPMSAMCreateMsgSummary 1314)(defconstant $kPMSAMPutMsgSummary 1317)(defconstant $kPMSAMGetMsgSummary 1318)(defconstant $kMailWakeupPMSAM 1287)(defconstant $kSMSAMSetup 1315)(defconstant $kSMSAMStartup 1281)(defconstant $kSMSAMShutdown 1282)(defconstant $kMSAMEnumerate 1283)(defconstant $kMSAMDelete 1284)(defconstant $kMSAMOpen 1288)(defconstant $kMSAMOpenNested 1289)(defconstant $kMSAMClose 1290)(defconstant $kMSAMGetMsgHeader 1297)(defconstant $kMSAMnMarkRecipients 1298)(defconstant $kMSAMGetAttributes 1291)(defconstant $kMSAMGetRecipients 1292)(defconstant $kMSAMGetContent 1293)(defconstant $kMSAMGetEnclosure 1294)(defconstant $kMSAMEnumerateBlocks 1295)(defconstant $kMSAMGetBlock 1296)(defconstant $kMSAMMarkRecipients 1285)(defconstant $kMSAMCreate 1300)(defconstant $kMSAMBeginNested 1301)(defconstant $kMSAMEndNested 1302)(defconstant $kMSAMSubmit 1303)(defconstant $kMSAMPutMsgHeader 1309)(defconstant $kMSAMPutAttribute 1304)(defconstant $kMSAMPutRecipient 1305)(defconstant $kMSAMPutContent 1306)(defconstant $kMSAMPutEnclosure 1307)(defconstant $kMSAMPutBlock 1308)(defconstant $kMSAMCreateReport 1311)(defconstant $kMSAMPutRecipientReport 1312)(defconstant $kMailCreateMailSlot 1323)(defconstant $kMailModifyMailSlot 1324)(defrecord MSAMParam    (:variant       (      (qLink :pointer)      (reservedH1 :signed-long)      (reservedH2 :signed-long)      (ioCompletion :pointer)      (ioResult :signed-integer)      (saveA5 :signed-long)      (reqCode :signed-integer)      )      (      (pmsamGetMSAMRecord :pmsamgetmsamrecordpb)      )      (      (pmsamOpenQueues :pmsamopenqueuespb)      )      (      (pmsamSetStatus :pmsamsetstatuspb)      )      (      (pmsamLogError :pmsamlogerrorpb)      )      (      (smsamSetup :smsamsetuppb)      )      (      (smsamStartup :smsamstartuppb)      )      (      (smsamShutdown :smsamshutdownpb)      )      (      (msamEnumerate :msamenumeratepb)      )      (      (msamDelete :msamdeletepb)      )      (      (msamOpen :msamopenpb)      )      (      (msamOpenNested :msamopennestedpb)      )      (      (msamClose :msamclosepb)      )      (      (msamGetMsgHeader :msamgetmsgheaderpb)      )      (      (msamGetAttributes :msamgetattributespb)      )      (      (msamGetRecipients :msamgetrecipientspb)      )      (      (msamGetContent :msamgetcontentpb)      )      (      (msamGetEnclosure :msamgetenclosurepb)      )      (      (msamEnumerateBlocks :msamenumerateblockspb)      )      (      (msamGetBlock :msamgetblockpb)      )      (      (msamMarkRecipients :msammarkrecipientspb)      )      (      (msamnMarkRecipients :msamnmarkrecipientspb)      )      (      (msamCreate :msamcreatepb)      )      (      (msamBeginNested :msambeginnestedpb)      )      (      (msamEndNested :msamendnestedpb)      )      (      (msamSubmit :msamsubmitpb)      )      (      (msamPutMsgHeader :msamputmsgheaderpb)      )      (      (msamPutAttribute :msamputattributepb)      )      (      (msamPutRecipient :msamputrecipientpb)      )      (      (msamPutContent :msamputcontentpb)      )      (      (msamPutEnclosure :msamputenclosurepb)      )      (      (msamPutBlock :msamputblockpb)      )      (      (msamCreateReport :msamcreatereportpb)    ;  Reports and Error Handling Calls       )      (      (msamPutRecipientReport :msamputrecipientreportpb)      )      (      (pmsamCreateMsgSummary :pmsamcreatemsgsummarypb)      )      (      (pmsamPutMsgSummary :pmsamputmsgsummarypb)      )      (      (pmsamGetMsgSummary :pmsamgetmsgsummarypb)      )      (      (wakeupPMSAM :mailwakeuppmsampb)      )      (      (createMailSlot :mailcreatemailslotpb)      )      (      (modifyMailSlot :mailmodifymailslotpb)      )      )   )(defconstant $uppMSAMIOCompletionProcInfo #xC0) ;  PROCEDURE (4 byte param); ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallMSAMIOCompletionProc" ("AOCELib"))  ((paramBlock (:pointer :msamparam)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewMSAMIOCompletionProc" ("AOCELib"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_MailCreateMailSlot" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7001 #x1F00 #x3F3C #x52B #xAA5E) ); $ENDC;  ASYNCHRONOUS ONLY, client must call WaitNextEvent ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_MailModifyMailSlot" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7001 #x1F00 #x3F3C #x52C #xAA5E) ); $ENDC;  ASYNCHRONOUS ONLY, client must call WaitNextEvent ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_MailWakeupPMSAM" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7001 #x1F00 #x3F3C #x507 #xAA5E) ); $ENDC;  Personal MSAM Glue Routines ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_PMSAMOpenQueues" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7000 #x1F00 #x3F3C #x500 #xAA5E) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_PMSAMSetStatus" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1319 :signed-integer))); $ENDC;  SYNC ONLY ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_PMSAMGetMSAMRecord" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7000 #x1F00 #x3F3C #x506 #xAA5E) ); $ENDC;  Server MSAM Glue Routines ;  SYNC ONLY ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_SMSAMSetup" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7000 #x1F00 #x3F3C #x523 #xAA5E) ); $ENDC;  SYNC ONLY ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_SMSAMStartup" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7000 #x1F00 #x3F3C #x501 #xAA5E) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_SMSAMShutdown" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1282 :signed-integer))); $ENDC;  Get Interface Glue Routines ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMEnumerate" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1283 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMDelete" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1284 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMMarkRecipients" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1285 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMnMarkRecipients" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1298 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMOpen" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1288 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMOpenNested" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1289 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMClose" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1290 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMGetRecipients" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1292 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMGetAttributes" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1291 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMGetContent" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1293 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMGetEnclosure" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1294 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMEnumerateBlocks" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1295 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMGetBlock" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1296 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMGetMsgHeader" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1297 :signed-integer))); $ENDC;  Put Interface Glue Routines ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMCreate" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1300 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMBeginNested" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1301 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_MSAMEndNested" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7000 #x1F00 #x3F3C #x516 #xAA5E) ); $ENDC;   SYNCHRONOUS ONLY ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_MSAMSubmit" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7000 #x1F00 #x3F3C #x517 #xAA5E) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMPutAttribute" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1304 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMPutRecipient" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1305 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMPutContent" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1306 :signed-integer))); $ENDC;   SYNCHRONOUS ONLY ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_MSAMPutEnclosure" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7000 #x1F00 #x3F3C #x51B #xAA5E) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMPutBlock" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1308 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMPutMsgHeader" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1309 :signed-integer))); $ENDC;  Reports and Error Handling Glue Routines ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMCreateReport" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1311 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_MSAMPutRecipientReport" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1312 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_PMSAMLogError" ("AOCELib"))  ((paramBlock (:pointer :msamparam)))   :signed-integer   (#x7000 #x1F00 #x3F3C #x521 #xAA5E) ); $ENDC;  MsgSummary Glue Routines ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_PMSAMCreateMsgSummary" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1314 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_PMSAMPutMsgSummary" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1317 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_PMSAMGetMsgSummary" ("AOCELib"))         ((paramBlock (:pointer :msamparam)) (asyncFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock asyncFlag (1318 :signed-integer))); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := OCEMailIncludes; $ENDC                                         ; __OCEMAIL__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'OCEMail)