(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Palettes.p"; at Tuesday June 6,1995 2:16:26 pm.; ;  	File:		Palettes.p;  ;  	Contains:	Palette Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __PALETTES__; $SETC __PALETTES__ := 1; $I+; $SETC PalettesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	Types.p														; 		ConditionalMacros.p										; 	MixedMode.p													; 	QuickdrawText.p												#|                                              ; $IFC UNDEFINED __WINDOWS__|#(require-interface 'Windows)#|                                              ; $I Windows.p |#                                             ; $ENDC; 	Memory.p													; 	Events.p													; 		OSUtils.p												; 	Controls.p													; 		Menus.p													; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $pmCourteous 0)                    ; Record use of color on each device touched.(defconstant $pmTolerant #x2)                   ; render ciRGB if ciTolerance is exceeded by best match.(defconstant $pmAnimated #x4)                   ; reserve an index on each device touched and render ciRGB.(defconstant $pmExplicit #x8)                   ; no reserve, no render, no record; stuff index into port.(defconstant $pmWhite #x10)(defconstant $pmBlack #x20)(defconstant $pmInhibitG2 #x100)(defconstant $pmInhibitC2 #x200)(defconstant $pmInhibitG4 #x400)(defconstant $pmInhibitC4 #x800)(defconstant $pmInhibitG8 #x1000)(defconstant $pmInhibitC8 #x2000);  NSetPalette Update Constants (defconstant $pmNoUpdates #x8000)               ; no updates(defconstant $pmBkUpdates #xA000)               ; background updates only(defconstant $pmFgUpdates #xC000)               ; foreground updates only(defconstant $pmAllUpdates #xE000)              ; all updates(defrecord ColorInfo    (ciRGB :rgbcolor)                            ; true RGB values   (ciUsage :signed-integer)                    ; color usage   (ciTolerance :signed-integer)                ; tolerance value   (ciDataFields (:array :signed-integer 3))    ; private fields   )(defrecord (Palette :handle)    (pmEntries :signed-integer)                  ; entries in pmTable   (pmDataFields (:array :signed-integer 7))    ; private fields   (pmInfo (:array :colorinfo 1))   )(def-mactype :paletteptr (find-mactype '(:pointer :palette)))(def-mactype :palettehandle (find-mactype '(:handle :palette))); $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InitPalettes" ()   nil   (:stack-trap #xAA90)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_NewPalette" ((entries :signed-integer) (srcColors (:handle :colortable)) (srcUsage :signed-integer) (srcTolerance :signed-integer))   (:stack (:handle :palette))   (:stack-trap #xAA91)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetNewPalette" ((PaletteID :signed-integer))   (:stack (:handle :palette))   (:stack-trap #xAA92)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposePalette" ((srcPalette (:handle :palette)))   nil   (:stack-trap #xAA93)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ActivatePalette" ((srcWindow (:pointer :grafport)))   nil   (:stack-trap #xAA94)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetPalette" ((dstWindow (:pointer :grafport)) (srcPalette (:handle :palette)) (cUpdates :boolean))   nil   (:stack-trap #xAA95)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_NSetPalette" ((dstWindow (:pointer :grafport)) (srcPalette (:handle :palette)) (nCUpdates :signed-integer))   nil   (:stack-trap #xAA95)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetPalette" ((srcWindow (:pointer :grafport)))   (:stack (:handle :palette))   (:stack-trap #xAA96)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CopyPalette" ((srcPalette (:handle :palette)) (dstPalette (:handle :palette)) (srcEntry :signed-integer) (dstEntry :signed-integer) (dstLength :signed-integer))   nil   (:stack-trap #xAAA1)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PmForeColor" ((dstEntry :signed-integer))   nil   (:stack-trap #xAA97)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PmBackColor" ((dstEntry :signed-integer))   nil   (:stack-trap #xAA98)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_AnimateEntry" ((dstWindow (:pointer :grafport)) (dstEntry :signed-integer) (srcRGB (:pointer :rgbcolor)))   nil   (:stack-trap #xAA99)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_AnimatePalette" ((dstWindow (:pointer :grafport)) (srcCTab (:handle :colortable)) (srcIndex :signed-integer) (dstEntry :signed-integer) (dstLength :signed-integer))   nil   (:stack-trap #xAA9A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetEntryColor" ((srcPalette (:handle :palette)) (srcEntry :signed-integer) (dstRGB (:pointer :rgbcolor)))   nil   (:stack-trap #xAA9B)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetEntryColor" ((dstPalette (:handle :palette)) (dstEntry :signed-integer) (srcRGB (:pointer :rgbcolor)))   nil   (:stack-trap #xAA9C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetEntryUsage" ((srcPalette (:handle :palette)) (srcEntry :signed-integer) (dstUsage (:pointer :signed-integer)) (dstTolerance (:pointer :signed-integer)))   nil   (:stack-trap #xAA9D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetEntryUsage" ((dstPalette (:handle :palette)) (dstEntry :signed-integer) (srcUsage :signed-integer) (srcTolerance :signed-integer))   nil   (:stack-trap #xAA9E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CTab2Palette" ((srcCTab (:handle :colortable)) (dstPalette (:handle :palette)) (srcUsage :signed-integer) (srcTolerance :signed-integer))   nil   (:stack-trap #xAA9F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_Palette2CTab" ((srcPalette (:handle :palette)) (dstCTab (:handle :colortable)))   nil   (:stack-trap #xAAA0)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_Entry2Index" ((entry :signed-integer))   (:stack :signed-long)   (:stack-trap #xAAA2 :d0 0 entry)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_RestoreDeviceClut" ((gd (:handle :gdevice)))   nil   (:stack-trap #xAAA2 :d0 2 gd)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_ResizePalette" ((p (:handle :palette)) (size :signed-integer))   nil   (:stack-trap #xAAA2 :d0 3 p size)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SaveFore" ((c (:pointer :colorspec)))   nil   (:stack-trap #xAAA2 :d0 1037 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SaveBack" ((c (:pointer :colorspec)))   nil   (:stack-trap #xAAA2 :d0 1038 c)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_RestoreFore" ((c (:pointer :colorspec)))   nil   (:stack-trap #xAAA2 :d0 1039 c)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_RestoreBack" ((c (:pointer :colorspec)))   nil   (:stack-trap #xAAA2 :d0 1040 c)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetDepth" ((gd (:handle :gdevice)) (depth :signed-integer) (whichFlags :signed-integer) (flags :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAA2 :d0 2579 gd depth whichFlags flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_HasDepth" ((gd (:handle :gdevice)) (depth :signed-integer) (whichFlags :signed-integer) (flags :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAA2 :d0 2580 gd depth whichFlags flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_PMgrVersion" ()   (:stack :signed-integer)   (:stack-trap #xAAA2 :d0 21)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_SetPaletteUpdates" ((p (:handle :palette)) (updates :signed-integer))   nil   (:stack-trap #xAAA2 :d0 1558 p updates)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetPaletteUpdates" ((p (:handle :palette)))   (:stack :signed-integer)   (:stack-trap #xAAA2 :d0 1047 p)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_GetGray" ((device (:handle :gdevice)) (backGround (:pointer :rgbcolor)) (foreGround (:pointer :rgbcolor)))   (:stack :boolean)   (:stack-trap #xAAA2 :d0 3097 device backGround foreGround)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := PalettesIncludes; $ENDC                                         ; __PALETTES__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Palettes)