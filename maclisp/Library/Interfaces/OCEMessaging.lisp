(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:OCEMessaging.p"; at Tuesday June 6,1995 2:14:17 pm.; ;  	File:		OCEMessaging.p;  ;  	Contains:	Apple Open Collaboration Environment Messaging Interfaces.;  ;  	Version:	Technology:	AOCE Toolbox 1.02;  				Package:	Universal Interfaces 2.1ß1 in “MPW Prerelease” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __OCEMESSAGING__; $SETC __OCEMESSAGING__ := 1; $I+; $SETC OCEMessagingIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __APPLEEVENTS__|#(require-interface 'AppleEvents)#|                                              ; $I AppleEvents.p |#                                             ; $ENDC; 	Errors.p													; 		ConditionalMacros.p										; 	Types.p														; 	Memory.p													; 		MixedMode.p												; 	OSUtils.p													; 	Events.p													; 		Quickdraw.p												; 			QuickdrawText.p										; 	EPPC.p														; 		AppleTalk.p												; 		Files.p													; 		PPCToolbox.p											; 		Processes.p												; 	Notification.p												#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __DIGITALSIGNATURE__|#(require-interface 'DigitalSignature)#|                                              ; $I DigitalSignature.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __OCE__|#(require-interface 'OCE)#|                                              ; $I OCE.p |#                                             ; $ENDC; 	Aliases.p													; 	Script.p													; 		IntlResources.p											#|                                              ; $IFC UNDEFINED __OCEAUTHDIR__|#(require-interface 'OCEAuthDir)#|                                              ; $I OCEAuthDir.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $kIPMAnyPriority 0)                ;  FOR FILTER ONLY (defconstant $kIPMNormalPriority 1)(defconstant $kIPMLowPriority 2)(defconstant $kIPMHighPriority 3)(def-mactype :ipmpriority (find-mactype ':signed-byte))(defconstant $kIPMAtMark 0)(defconstant $kIPMFromStart 1)(defconstant $kIPMFromLEOM 2)(defconstant $kIPMFromMark 3)(def-mactype :ipmaccessmode (find-mactype ':signed-integer))(defconstant $kIPMUpdateMsgBit 4)(defconstant $kIPMNewMsgBit 5)(defconstant $kIPMDeleteMsgBit 6);  Values of IPMNotificationType (defconstant $kIPMUpdateMsgMask (* 1 (expt 2 #$kIPMUpdateMsgBit)))(defconstant $kIPMNewMsgMask (* 1 (expt 2 #$kIPMNewMsgBit)))(defconstant $kIPMDeleteMsgMask (* 1 (expt 2 #$kIPMDeleteMsgBit)))(def-mactype :ipmnotificationtype (find-mactype ':signed-byte))(defconstant $kIPMSenderRStringTag 0)(defconstant $kIPMSenderRecordIDTag 1)(def-mactype :ipmsendertag (find-mactype ':signed-integer))(defconstant $kIPMFromDistListBit 0)(defconstant $kIPMDummyRecBit 1)(defconstant $kIPMFeedbackRecBit 2)             ;  should be redirected to feedback queue (defconstant $kIPMReporterRecBit 3)             ;  should be redirected to reporter original queue (defconstant $kIPMBCCRecBit 4)                  ;  this recipient is blind to all recipients of message ;  Values of OCERecipientOffsetFlags (defconstant $kIPMFromDistListMask (* 1 (expt 2 #$kIPMFromDistListBit)))(defconstant $kIPMDummyRecMask (* 1 (expt 2 #$kIPMDummyRecBit)))(defconstant $kIPMFeedbackRecMask (* 1 (expt 2 #$kIPMFeedbackRecBit)))(defconstant $kIPMReporterRecMask (* 1 (expt 2 #$kIPMReporterRecBit)))(defconstant $kIPMBCCRecMask (* 1 (expt 2 #$kIPMBCCRecBit)))(def-mactype :ocerecipientoffsetflags (find-mactype ':signed-byte))(defrecord OCECreatorType    (msgCreator :ostype)   (msgType :ostype)   )(defconstant $kIPMTypeWildCard :|ipmw|)(defconstant $kIPMFamilyUnspecified 0)(defconstant $kIPMFamilyWildCard #x3F3F3F3F)    ;  '??^ ; ; 	* well known signature (defconstant $kIPMSignature :|ipms|)            ;  base type ; ; 	* well known message types (defconstant $kIPMReportNotify :|rptn|)         ;  routing feedback; ;     * well known message block types (defconstant $kIPMEnclosedMsgType :|emsg|)      ;  enclosed (nested) message (defconstant $kIPMReportInfo :|rpti|)           ;  recipient information (defconstant $kIPMDigitalSignature :|dsig|);  Values of IPMMsgFormat (defconstant $kIPMOSFormatType 1)(defconstant $kIPMStringFormatType 2)(def-mactype :ipmmsgformat (find-mactype ':signed-integer))(defrecord :IPMStringMsgType   (length :unsigned-byte) (contents (:array :unsigned-byte 32)))(defrecord TheType    (:variant       (      (msgOSType :ocecreatortype)      )      (      (msgStrType (:string 32))      )      )   )(defrecord IPMMsgType    (format :signed-integer)                     ;  IPMMsgFormat   (TheType :thetype)   ); ; Following are the known extension values for IPM addresses handled by Apple.; We define the definition of the entn extension below.; (defconstant $kOCEalanXtn :|alan|)(defconstant $kOCEentnXtn :|entn|)              ;  entn = entity name (aka DSSpec) (defconstant $kOCEaphnXtn :|aphn|); ; Following are the specific definitions for the extension for the standard; OCEMail 'entn' addresses.  [Note, the actual extension is formatted as in; IPMEntityNameExtension.]; ;  entn extension forms (defconstant $kOCEAddrXtn :|addr|)(defconstant $kOCEQnamXtn :|qnam|)(defconstant $kOCEAttrXtn :|attr|)              ;  an attribute specification (defconstant $kOCESpAtXtn :|spat|); ; Following are the specific definitions for standard; OCEMail 'aphn' extension value.  ; ; All RStrings here are packed (e.g. truncated to length) and even padded (e.g.; if length odd, then a pad byte (zero) should be introduced before the next field).; ; The extension value is in the packed form of the following structure:; 	RString		phoneNumber;; 	RString		modemType;; 	Str32		queueuName;; ; The body of phoneNumber compound RString is in the packed form of the following structure:; 	short 		subType;; 	RString 	countryCode;				// used when subType == kOCEUseHandyDial; 	RString		areaCode;					// used when subType == kOCEUseHandyDial; 	RString		phone;						// used when subType == kOCEUseHandyDial; 	RString		postFix;					// used when subType == kOCEUseHandyDial; 	RString		nonHandyDialString;			// used when subType == kOCEDontUseHandyDial; ;  phoneNumber sub type constants (defconstant $kOCEUseHandyDial 1)(defconstant $kOCEDontUseHandyDial 2);  FORMAT OF A PACKED FORM RECIPIENT (defrecord ProtoOCEPackedRecipient    ;;Changing field datalength from signed-integer to unsigned-word to match C header (pretty-sure)   (dataLength :unsigned-word)   )(defconstant $kOCEPackedRecipientMaxBytes (+ 0 (- 4096 (record-length :protoocepackedrecipient))))(defrecord OCEPackedRecipient    ;;Changing field datalength from signed-integer to unsigned-word to match C header (pretty-sure)   (dataLength :unsigned-word)   (data (:array :signed-byte (- (- #$kOCEPackedRecipientMaxBytes 1) 0 -1)));  Byte    )(defrecord IPMEntnQueueExtension    (queueName (:string 32))   );  kOCEAttrXtn (defrecord IPMEntnAttributeExtension    (attributeName :attributetype)   );  kOCESpAtXtn (defrecord IPMEntnSpecificAttributeExtension    (AttributeCreationID :creationid)   (attributeName :attributetype)   );  All IPM entn extensions fit within the following (defrecord IPMEntityNameExtension    (subExtensionType :ostype)   (:variant       (      (specificAttribute :ipmentnspecificattributeextension)      )      (      (attribute :ipmentnattributeextension)      )      (      (queue :ipmentnqueueextension)      )      )   );  addresses with kIPMNBPXtn should specify this nbp type (defrecord IPMMsgID    ;;Changing field id from signed-long to unsigned-long to match C header (pretty-darn-sure)   (id (:array :unsigned-long 4))   );  Values of IPMHeaderSelector (defconstant $kIPMTOC 0)(defconstant $kIPMSender 1)(defconstant $kIPMProcessHint 2)(defconstant $kIPMMessageTitle 3)(defconstant $kIPMMessageType 4)(defconstant $kIPMFixedInfo 7)(def-mactype :ipmheaderselector (find-mactype ':unsigned-byte))(defrecord TheSender    (:variant       (      (RString :rstring)      )      (      (rid :packedrecordid)      )      )   )(defrecord IPMSender    (sendTag :signed-integer)   (TheSender :thesender)   )(%define-record :ocerecipient (find-record-descriptor :dsspec)); ****************************************************************************;  Definitions specific to OCEMessaging (def-mactype :ipmcontextref (find-mactype ':signed-long))(def-mactype :ipmqueueref (find-mactype ':signed-long))(def-mactype :ipmmsgref (find-mactype ':signed-long))(def-mactype :ipmseqnum (find-mactype ':signed-long))(defrecord :IPMProcHint   (length :unsigned-byte) (contents (:array :unsigned-byte 32)))(defrecord :IPMQueueName   (length :unsigned-byte) (contents (:array :unsigned-byte 32)))(def-mactype :ipmnoteprocptr (find-mactype ':pointer));  PROCEDURE IPMNote(queue: IPMQueueRef; seqNum: IPMSeqNum; notificationType: ByteParameter; userData: LONGINT); (def-mactype :ipmnoteupp (find-mactype ':pointer))(defconstant $uppIPMNoteProcInfo #x37C0)        ;  PROCEDURE (4 byte param, 4 byte param, 1 byte param, 4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewIPMNoteProc" ("AOCELib"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallIPMNoteProc" ("AOCELib"))  ((queue :signed-long) (seqNum :signed-long) (notificationType :signed-byte) (userData :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC(defrecord IPMFixedHdrInfo    ;;Changing field version from signed-integer to unsigned-word to match C header (pretty-sure)   (version :unsigned-word)   (authenticated :boolean)   (signatureEnclosed :boolean)                 ;   digital signature enclosed    ;;Changing field msgsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (msgSize :unsigned-long)   (notification :signed-byte)   (priority :signed-byte)   ;;Changing field blockcount from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (blockCount :unsigned-word)   ;;Changing field originalrcptcount from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (originalRcptCount :unsigned-word)           ; 		original number of recipients    ;;Changing field refcon from signed-long to unsigned-long to match C header (pretty-sure)   (refCon :unsigned-long)                      ; 		Client defined data    (reserved :signed-integer)   (creationTime :signed-long)                  ; 		Time when it was created    (msgID :ipmmsgid)   (family :ostype)                             ;  family this msg belongs (e.g. mail)    )(defconstant $kIPMDeliveryNotificationBit 0)(defconstant $kIPMNonDeliveryNotificationBit 1)(defconstant $kIPMEncloseOriginalBit 2)(defconstant $kIPMSummaryReportBit 3);  modify enclose original to only on error (defconstant $kIPMOriginalOnlyOnErrorBit 4)(defconstant $kIPMNoNotificationMask #x0)(defconstant $kIPMDeliveryNotificationMask (* 1 (expt 2 #$kIPMDeliveryNotificationBit)))(defconstant $kIPMNonDeliveryNotificationMask (* 1 (expt 2 #$kIPMNonDeliveryNotificationBit)))(defconstant $kIPMDontEncloseOriginalMask #x0)(defconstant $kIPMEncloseOriginalMask (* 1 (expt 2 #$kIPMEncloseOriginalBit)))(defconstant $kIPMImmediateReportMask #x0)(defconstant $kIPMSummaryReportMask (* 1 (expt 2 #$kIPMSummaryReportBit)))(defconstant $kIPMOriginalOnlyOnErrorMask (* 1 (expt 2 #$kIPMOriginalOnlyOnErrorBit)))(defconstant $kIPMEncloseOriginalOnErrorMask (+ 0 (+ #$kIPMOriginalOnlyOnErrorMask #$kIPMEncloseOriginalMask)))(defconstant $kIPMNoSuchRecipient #x1)(defconstant $kIPMRecipientMalformed #x2)(defconstant $kIPMRecipientAmbiguous #x3)(defconstant $kIPMRecipientAccessDenied #x4)(defconstant $kIPMGroupExpansionProblem #x5)(defconstant $kIPMMsgUnreadable #x6)(defconstant $kIPMMsgExpired #x7)(defconstant $kIPMMsgNoTranslatableContent #x8)(defconstant $kIPMRecipientReqStdCont #x9)(defconstant $kIPMRecipientReqSnapShot #xA)(defconstant $kIPMNoTransferDiskFull #xB)(defconstant $kIPMNoTransferMsgRejectedbyDest #xC)(defconstant $kIPMNoTransferMsgTooLarge #xD); ***********************************************************************; ; This is the structure that will be returned by enumerate and getmsginfo; This definition is just to give you a template, the position of msgType; is variable since this is a packed structure.  procHint and msgType are; packed and even length padded.; ; * master message info (defrecord IPMMsgInfo    (sequenceNum :signed-long)   ;;Changing field userdata from signed-long to unsigned-long to match C header (pretty-sure)   (userData :unsigned-long)   ;;Changing field respindex from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (respIndex :unsigned-word)   (padByte :signed-byte)   (priority :signed-byte)   ;;Changing field msgsize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (msgSize :unsigned-long)   ;;Changing field originalrcptcount from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (originalRcptCount :unsigned-word)   (reserved :signed-integer)   (creationTime :signed-long)   (msgID :ipmmsgid)   (family :ostype)                             ;  family this msg belongs (e.g. mail)    (procHint (:string 32))   (filler2 :signed-byte)   (msgType :ipmmsgtype)   )(%define-record :ipmblocktype (find-record-descriptor :ocecreatortype))(defrecord IPMTOC    (blockType :ocecreatortype)   (blockOffset :signed-long)   ;;Changing field blocksize from signed-long to unsigned-long to match C header (pretty-sure)   (blockSize :unsigned-long)   ;;Changing field blockrefcon from signed-long to unsigned-long to match C header (pretty-darn-sure)   (blockRefCon :unsigned-long)   ); ; The following structure is just to describe the layout of the SingleFilter.; Each field should be packed and word aligned when passed to the IPM ToolBox.; (defrecord IPMSingleFilter    (priority :signed-byte)   (padByte :signed-byte)   (family :ostype)                             ;  family this msg belongs (e.g. mail), '??^ for all    (script :signed-integer)                     ;  Language Identifier    (hint (:string 32))   (filler2 :signed-byte)   (msgType :ipmmsgtype)   )(defrecord IPMFilter    ;;Changing field count from signed-integer to unsigned-word to match C header (pretty-sure)   (count :unsigned-word)   (sFilters (:array :ipmsinglefilter 1))   ); ************************************************************************; Following structures define the “start” of a recipient report block and the; elements of the array respectively.; (defrecord IPMReportBlockHeader    (msgID :ipmmsgid)                            ;  message id of the original    (creationTime :signed-long)                  ;  creation time of the report    )(defrecord OCERecipientReport    ;;Changing field rcptindex from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (rcptIndex :unsigned-word)                   ;  index of recipient in original message    (result :signed-integer)                     ;  result of sending letter to this recipient   ); ***********************************************************************(def-mactype :ipmparamblockptr (find-mactype '(:pointer :ipmparamblock)))(def-mactype :ipmiocompletionprocptr (find-mactype ':pointer));  PROCEDURE IPMIOCompletion(paramBlock: IPMParamBlockPtr); (def-mactype :ipmiocompletionupp (find-mactype ':pointer))(defrecord IPMOpenContextPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (contextRef :signed-long)                    ;  <--  Context reference to be used in further calls   )(%define-record :ipmclosecontextpb (find-record-descriptor :ipmopencontextpb))(defrecord IPMCreateQueuePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (filler1 :signed-long)   (queue (:pointer :dsspec))   (identity :signed-long)                      ;  used only if queue is remote    (owner (:pointer :packedrecordid))           ;  used only if queue is remote    );  For createqueue and deletequeue only queue and identity are used (%define-record :ipmdeletequeuepb (find-record-descriptor :ipmcreatequeuepb))(defrecord IPMOpenQueuePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (contextRef :signed-long)   (queue (:pointer :dsspec))   (identity :signed-long)   (filter (:pointer :ipmfilter))   (newQueueRef :signed-long)   (notificationProc :pointer)   ;;Changing field userdata from signed-long to unsigned-long to match C header (pretty-sure)   (userData :unsigned-long)   (noteType :signed-byte)   (padByte :signed-byte)                       ;  Byte    (reserved :signed-long)   (reserved2 :signed-long)   )(defrecord IPMCloseQueuePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   )(defrecord IPMEnumerateQueuePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   (startSeqNum :signed-long)   (getProcHint :boolean)   (getMsgType :boolean)   (filler :signed-integer)   (filter (:pointer :ipmfilter))   ;;Changing field numtoget from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (numToGet :unsigned-word)   ;;Changing field numgotten from signed-integer to unsigned-word to match C header (pretty-sure)   (numGotten :unsigned-word)   ;;Changing field enumcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (enumCount :unsigned-long)   (enumBuffer :pointer)                        ;  will be packed array of IPMMsgInfo    ;;Changing field actenumcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (actEnumCount :unsigned-long)   )(%define-record :ipmchangequeuefilterpb (find-record-descriptor :ipmenumeratequeuepb))(defrecord IPMDeleteMsgRangePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   (startSeqNum :signed-long)   (endSeqNum :signed-long)   (lastSeqNum :signed-long)   )(defrecord IPMOpenMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (queueRef :signed-long)   (sequenceNum :signed-long)   (newMsgRef :signed-long)   (actualSeqNum :signed-long)   (exactMatch :boolean)   (padByte :signed-byte)                       ;  Byte    (reserved :signed-long)   )(defrecord IPMOpenHFSMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (hfsPath (:pointer :fsspec))   (filler :signed-long)   (newMsgRef :signed-long)   (filler2 :signed-long)   (filler3 :signed-byte)                       ;  Byte    (filler4 :boolean)   (reserved :signed-long)   )(defrecord IPMOpenBlockAsMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (filler :signed-long)   (newMsgRef :signed-long)   ;;Changing field filler2 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler2 (:array :unsigned-word 7))   ;;Changing field blockindex from signed-integer to unsigned-word to match C header (pretty-sure)   (blockIndex :unsigned-word)   )(defrecord IPMCloseMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (deleteMsg :boolean)   (filler1 :boolean)   )(defrecord IPMGetMsgInfoPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (info (:pointer :ipmmsginfo))   )(defrecord IPMReadHeaderPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   ;;Changing field fieldselector from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (fieldSelector :unsigned-word)   (offset :signed-long)   ;;Changing field count from signed-long to unsigned-long to match C header (pretty-sure)   (count :unsigned-long)   (buffer :pointer)   ;;Changing field actualcount from signed-long to unsigned-long to match C header (pretty-sure)   (actualCount :unsigned-long)   (filler :signed-integer)   ;;Changing field remaining from signed-long to unsigned-long to match C header (pretty-sure)   (remaining :unsigned-long)   )(defrecord IPMReadRecipientPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   ;;Changing field rcptindex from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (rcptIndex :unsigned-word)   (offset :signed-long)   ;;Changing field count from signed-long to unsigned-long to match C header (pretty-sure)   (count :unsigned-long)   (buffer :pointer)   ;;Changing field actualcount from signed-long to unsigned-long to match C header (pretty-sure)   (actualCount :unsigned-long)   (reserved :signed-integer)                   ;  must be zero    ;;Changing field remaining from signed-long to unsigned-long to match C header (pretty-sure)   (remaining :unsigned-long)   ;;Changing field originalindex from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (originalIndex :unsigned-word)   (recipientOffsetFlags :signed-byte)   (filler1 :boolean)   ); ; replyQueue works like recipient. [can no longer read it via ReadHeader]; OriginalIndex is meaningless, rcptFlags are used seperately and there are; currently none defined.; (%define-record :ipmreadreplyqueuepb (find-record-descriptor :ipmreadrecipientpb))(defrecord IPMGetBlkIndexPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (blockType :ocecreatortype)   ;;Changing field index from signed-integer to unsigned-word to match C header (pretty-sure)   (index :unsigned-word)   ;;Changing field startingfrom from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (startingFrom :unsigned-word)   (actualBlockType :ocecreatortype)   ;;Changing field actualblockindex from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (actualBlockIndex :unsigned-word)   )(defrecord IPMReadMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (mode :signed-integer)   (offset :signed-long)   ;;Changing field count from signed-long to unsigned-long to match C header (pretty-sure)   (count :unsigned-long)   (buffer :pointer)   ;;Changing field actualcount from signed-long to unsigned-long to match C header (pretty-sure)   (actualCount :unsigned-long)   ;;Changing field blockindex from signed-integer to unsigned-word to match C header (pretty-sure)   (blockIndex :unsigned-word)   ;;Changing field remaining from signed-long to unsigned-long to match C header (pretty-sure)   (remaining :unsigned-long)   )(defrecord IPMVerifySignaturePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (signatureContext :pointer)   )(defrecord IPMNewMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (filler :signed-long)   (recipient (:pointer :dsspec))   (replyQueue (:pointer :dsspec))   (procHint (:pointer (:string 255)))   ;;Changing field filler2 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler2 :unsigned-word)   (msgType (:pointer :ipmmsgtype))   ;;Changing field refcon from signed-long to unsigned-long to match C header (pretty-sure)   (refCon :unsigned-long)   (newMsgRef :signed-long)   ;;Changing field filler3 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler3 :unsigned-word)   (filler4 :signed-long)   (identity :signed-long)   (sender (:pointer :ipmsender))   ;;Changing field internaluse from signed-long to unsigned-long to match C header (pretty-darn-sure)   (internalUse :unsigned-long)   ;;Changing field internaluse2 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (internalUse2 :unsigned-long)   )(defrecord IPMNewHFSMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (hfsPath (:pointer :fsspec))   (recipient (:pointer :dsspec))   (replyQueue (:pointer :dsspec))   (procHint (:pointer (:string 255)))   ;;Changing field filler2 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler2 :unsigned-word)   (msgType (:pointer :ipmmsgtype))   ;;Changing field refcon from signed-long to unsigned-long to match C header (pretty-sure)   (refCon :unsigned-long)   (newMsgRef :signed-long)   ;;Changing field filler3 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler3 :unsigned-word)   (filler4 :signed-long)   (identity :signed-long)   (sender (:pointer :ipmsender))   ;;Changing field internaluse from signed-long to unsigned-long to match C header (pretty-darn-sure)   (internalUse :unsigned-long)   ;;Changing field internaluse2 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (internalUse2 :unsigned-long)   )(defrecord IPMNestMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (filler (:array :signed-integer 9))   ;;Changing field refcon from signed-long to unsigned-long to match C header (pretty-sure)   (refCon :unsigned-long)   (msgToNest :signed-long)   ;;Changing field filler2 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler2 :unsigned-word)   (startingOffset :signed-long)   )(defrecord IPMNewNestedMsgBlockPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (recipient (:pointer :dsspec))   (replyQueue (:pointer :dsspec))   (procHint (:pointer (:string 255)))   ;;Changing field filler1 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler1 :unsigned-word)   (msgType (:pointer :ipmmsgtype))   ;;Changing field refcon from signed-long to unsigned-long to match C header (pretty-sure)   (refCon :unsigned-long)   (newMsgRef :signed-long)   ;;Changing field filler2 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler2 :unsigned-word)   (startingOffset :signed-long)   (identity :signed-long)   (sender (:pointer :ipmsender))   ;;Changing field internaluse from signed-long to unsigned-long to match C header (pretty-darn-sure)   (internalUse :unsigned-long)   ;;Changing field internaluse2 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (internalUse2 :unsigned-long)   )(defrecord IPMEndMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (msgID :ipmmsgid)   (msgTitle (:pointer :rstring))   (deliveryNotification :signed-byte)   (priority :signed-byte)   (cancel :boolean)   (padByte :signed-byte)                       ;  Byte    (reserved :signed-long)   (signature :pointer)   (signatureSize :signed-long)   (signatureContext :pointer);  family this msg belongs (e.g. mail) use kIPMFamilyUnspecified by default    (family :ostype)   )(defrecord IPMAddRecipientPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (recipient (:pointer :dsspec))   (reserved :signed-long)   )(defrecord IPMAddReplyQueuePB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (filler :signed-long)   (replyQueue (:pointer :dsspec))   )(defrecord IPMNewBlockPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (blockType :ocecreatortype)   (filler (:array :signed-integer 5))   ;;Changing field refcon from signed-long to unsigned-long to match C header (pretty-sure)   (refCon :unsigned-long)   ;;Changing field filler2 from signed-integer to unsigned-word to match C header (pretty-sure)   (filler2 (:array :unsigned-word 3))   (startingOffset :signed-long)   )(defrecord IPMWriteMsgPB    (qLink :pointer)   (reservedH1 :signed-long)   (reservedH2 :signed-long)   (ioCompletion :pointer)   (ioResult :signed-integer)   (saveA5 :signed-long)   (reqCode :signed-integer)   (msgRef :signed-long)   (mode :signed-integer)   (offset :signed-long)   ;;Changing field count from signed-long to unsigned-long to match C header (pretty-sure)   (count :unsigned-long)   (buffer :pointer)   ;;Changing field actualcount from signed-long to unsigned-long to match C header (pretty-sure)   (actualCount :unsigned-long)   (currentBlock :boolean)   (filler1 :boolean)   )(defrecord IPMParamBlock    (:variant       (      (qLink :pointer)      (reservedH1 :signed-long)      (reservedH2 :signed-long)      (ioCompletion :pointer)      (ioResult :signed-integer)      (saveA5 :signed-long)      (reqCode :signed-integer)      )      (      (openContextPB :ipmopencontextpb)      )      (      (closeContextPB :ipmopencontextpb)      )      (      (createQueuePB :ipmcreatequeuepb)      )      (      (deleteQueuePB :ipmcreatequeuepb)      )      (      (openQueuePB :ipmopenqueuepb)      )      (      (closeQueuePB :ipmclosequeuepb)      )      (      (enumerateQueuePB :ipmenumeratequeuepb)      )      (      (changeQueueFilterPB :ipmenumeratequeuepb)      )      (      (deleteMsgRangePB :ipmdeletemsgrangepb)      )      (      (openMsgPB :ipmopenmsgpb)      )      (      (openHFSMsgPB :ipmopenhfsmsgpb)      )      (      (openBlockAsMsgPB :ipmopenblockasmsgpb)      )      (      (closeMsgPB :ipmclosemsgpb)      )      (      (getMsgInfoPB :ipmgetmsginfopb)      )      (      (readHeaderPB :ipmreadheaderpb)      )      (      (readRecipientPB :ipmreadrecipientpb)      )      (      (readReplyQueuePB :ipmreadrecipientpb)      )      (      (getBlkIndexPB :ipmgetblkindexpb)      )      (      (readMsgPB :ipmreadmsgpb)      )      (      (verifySignaturePB :ipmverifysignaturepb)      )      (      (newMsgPB :ipmnewmsgpb)      )      (      (newHFSMsgPB :ipmnewhfsmsgpb)      )      (      (nestMsgPB :ipmnestmsgpb)      )      (      (newNestedMsgBlockPB :ipmnewnestedmsgblockpb)      )      (      (endMsgPB :ipmendmsgpb)      )      (      (addRecipientPB :ipmaddrecipientpb)      )      (      (addReplyQueuePB :ipmaddreplyqueuepb)      )      (      (newBlockPB :ipmnewblockpb)      )      (      (writeMsgPB :ipmwritemsgpb)      )      )   ); 	Request codes (defconstant $kIPMOpenContext #x400)(defconstant $kIPMCloseContext #x401)(defconstant $kIPMNewMsg #x402)(defconstant $kIPMAddRecipient #x403)(defconstant $kIPMNewBlock #x404)(defconstant $kIPMNewNestedMsgBlock #x405)(defconstant $kIPMNestMsg #x406)(defconstant $kIPMWriteMsg #x407)(defconstant $kIPMEndMsg #x408)(defconstant $kIPMOpenQueue #x409)(defconstant $kIPMCloseQueue #x40A)(defconstant $kIPMOpenMsg #x40B)(defconstant $kIPMCloseMsg #x40C)(defconstant $kIPMReadMsg #x40D)(defconstant $kIPMReadHeader #x40E)(defconstant $kIPMOpenBlockAsMsg #x40F)(defconstant $kIPMReadRecipient #x410)(defconstant $kIPMCreateQueue #x411)(defconstant $kIPMDeleteQueue #x412)(defconstant $kIPMEnumerateQueue #x413)(defconstant $kIPMChangeQueueFilter #x414)(defconstant $kIPMDeleteMsgRange #x415)(defconstant $kIPMOpenHFSMsg #x417)(defconstant $kIPMGetBlkIndex #x418)(defconstant $kIPMGetMsgInfo #x419)(defconstant $kIPMAddReplyQueue #x41D)(defconstant $kIPMNewHFSMsg #x41E)(defconstant $kIPMReadReplyQueue #x421)(defconstant $kIPMVerifySignature #x422)(defconstant $uppIPMIOCompletionProcInfo #xC0)  ;  PROCEDURE (4 byte param); ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallIPMIOCompletionProc" ("AOCELib"))  ((paramBlock (:pointer :ipmparamblock)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewIPMIOCompletionProc" ("AOCELib"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMOpenContext" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1024 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMCloseContext" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1025 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMNewMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1026 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMNewBlock" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1028 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMNewNestedMsgBlock" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1029 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMNestMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1030 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMWriteMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1031 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMEndMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1032 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMOpenQueue" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1033 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMCloseQueue" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1034 :signed-integer))); $ENDC;  Always synchronous ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_IPMVerifySignature" ("AOCELib"))  ((paramBlock (:pointer :ipmparamblock)))   :signed-integer   (#x7000 #x1F00 #x3F3C #x422 #xAA5E) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMOpenMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1035 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMCloseMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1036 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMReadMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1037 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMReadHeader" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1038 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMOpenBlockAsMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1039 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMNewHFSMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1054 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMReadRecipient" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1040 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMReadReplyQueue" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1057 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMCreateQueue" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1041 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMDeleteQueue" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1042 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMEnumerateQueue" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1043 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMChangeQueueFilter" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1044 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMDeleteMsgRange" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1045 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMAddRecipient" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1027 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMAddReplyQueue" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1053 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMOpenHFSMsg" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1047 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMGetBlkIndex" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1048 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IPMGetMsgInfo" ("AOCELib"))         ((paramBlock (:pointer :ipmparamblock)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xAA5E paramBlock async (1049 :signed-integer))); $ENDC; **************************************************************************************;  EXTERNAL ROUTINES (defconstant $kOCESizePackedRecipient 830)(defconstant $kOCEPackRecipient 831)(defconstant $kOCEUnpackRecipient 832)(defconstant $kOCEStreamRecipient 833)(defconstant $kOCEGetRecipientType 834)(defconstant $kOCESetRecipientType 835); CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_OCESizePackedRecipient" ("AOCELib"))         ((rcpt (:pointer :dsspec)))   (:stack :signed-integer)   (:stack-trap #xAA5C :d0 830 rcpt)); $ENDC; ; Take an OCERecipient (scatter) and (gather) stream into the specified; buffer.  It is assumed that there is sufficient space in the buffer (that is; OCESizePackedRecipient).  Safe to pass dereferenced handle(s).; ; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_OCEPackRecipient" ("AOCELib"))         ((rcpt (:pointer :dsspec)) (buffer :pointer))   (:stack :signed-integer)   (:stack-trap #xAA5C :d0 831 rcpt buffer)); $ENDC; ; Take a packed OCERecipient and cast a the OCERecipient frame over it. Returns; amBadDestId if it doesn't look like an OCERecipient. Safe to pass dereferenced; handle(s).; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_OCEUnpackRecipient" ("AOCELib"))         ((buffer :pointer) (rcpt (:pointer :dsspec)) (entitySpecifier (:pointer :recordid)))   (:stack :signed-integer)   (:stack-trap #xAA5C :d0 832 buffer rcpt entitySpecifier)); $ENDC; ; Take an OCERecipient (scatter) and (gather) stream using the specified; function.  Safe to pass dereferenced handle(s).  If streamer function returns; OCEError OCEStreamRecipient stops execution and passes the error back to the caller; (def-mactype :ocerecipientstreamerprocptr (find-mactype ':pointer));  FUNCTION OCERecipientStreamer(buffer: UNIV Ptr; count: LONGINT; eof: BOOLEAN; userData: LONGINT): OSErr; (def-mactype :ocerecipientstreamerupp (find-mactype ':pointer))(defconstant $uppOCERecipientStreamerProcInfo #x37E0);  FUNCTION (4 byte param, 4 byte param, 1 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewOCERecipientStreamerProc" ("AOCELib"))         ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallOCERecipientStreamerProc" ("AOCELib"))  ((buffer :pointer) (count :signed-long) (eof :boolean) (userData :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC(def-mactype :ocerecipientstreamer (find-mactype ':pointer)); CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_OCEStreamRecipient" ("AOCELib"))         ((rcpt (:pointer :dsspec)) (stream :pointer) (userData :signed-long) (actualCount (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAA5C :d0 833 rcpt stream userData actualCount)); $ENDC;  Get the OCERecipient's extensionType. Safe to pass dereferenced handle(s).; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_OCEGetRecipientType" ("AOCELib"))         ((cid (:pointer :creationid)))   (:stack :ostype)   (:stack-trap #xAA5C :d0 834 cid)); $ENDC; ; Set the OCERecipient's extensionType in the specified cid.  (Note: we do NOT; check for a nil pointer).  If the extensionType is 'entn', the cid is assumed; to be "valid" and is not touched.  Note: to properly handle non 'entn''s this; routine must and will zero the high long (source) of the cid! Safe to pass; dereferenced handle(s).; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_OCESetRecipientType" ("AOCELib"))         ((extensionType :ostype) (cid (:pointer :creationid)))   nil   (:stack-trap #xAA5C :d0 835 extensionType cid)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := OCEMessagingIncludes; $ENDC                                         ; __OCEMESSAGING__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'OCEMessaging)