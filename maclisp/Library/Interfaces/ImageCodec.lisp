(in-package :TRAPS); Generated from #P"Cohones:Lisp:Projects:PInterface Translator:Source interfaces:Quicktime 2.5 PInterfaces:ImageCodec.p"; at Thursday May 23,1996 2:28:16 pm.; ;  	File:		ImageCodec.p;  ;  	Contains:	QuickTime interfaces;  ;  	Version:	Technology:	;  				Release:	QuickTime 2.5 interfaces to use with ETO #20;  ;  	Copyright:	© 1984-1996 by Apple Computer, Inc.  All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, send the file and version;  				information (from above) and the problem description to:;  ;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __IMAGECODEC__; $SETC __IMAGECODEC__ := 1; $I+; $SETC ImageCodecIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __QDOFFSCREEN__|#(require-interface 'QDOffscreen)#|                                              ; $I QDOffscreen.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __WINDOWS__|#(require-interface 'Windows)#|                                              ; $I Windows.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __IMAGECOMPRESSION__|#(require-interface 'ImageCompression)#|                                              ; $I ImageCompression.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __COMPONENTS__|#(require-interface 'Components)#|                                              ; $I Components.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __MOVIES__|#(require-interface 'Movies)#|                                              ; $I Movies.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+;  	codec capabilities flags	 (defconstant $codecCanScale #x1)(defconstant $codecCanMask #x2)(defconstant $codecCanMatte #x4)(defconstant $codecCanTransform #x8)(defconstant $codecCanTransferMode #x10)(defconstant $codecCanCopyPrev #x20)(defconstant $codecCanSpool #x40)(defconstant $codecCanClipVertical #x80)(defconstant $codecCanClipRectangular #x100)(defconstant $codecCanRemapColor #x200)(defconstant $codecCanFastDither #x400)(defconstant $codecCanSrcExtract #x800)(defconstant $codecCanCopyPrevComp #x1000)(defconstant $codecCanAsync #x2000)(defconstant $codecCanMakeMask #x4000)(defconstant $codecCanShift #x8000)(defconstant $codecCanAsyncWhen #x10000)(defconstant $codecCanShieldCursor #x20000)(defconstant $codecCanManagePrevBuffer #x40000)(defconstant $codecHasVolatileBuffer #x80000)(defconstant $codecWantsRegionMask #x100000)(defconstant $codecImageBufferIsOnScreen #x200000)(defconstant $codecWantsDestinationPixels #x400000)(def-mactype :codeccapabilitiesptr (find-mactype '(:pointer :codeccapabilities)))(defrecord CodecCapabilities    (flags :signed-long)   (wantedPixelSize :signed-integer)   (extendWidth :signed-integer)   (extendHeight :signed-integer)   (bandMin :signed-integer)   (bandInc :signed-integer)   (pad :signed-integer)   ;;Changing field time from signed-long to unsigned-long to match C header (pretty-darn-sure)   (time :unsigned-long)   );  	codec condition flags	 (defconstant $codecConditionFirstBand #x1)(defconstant $codecConditionLastBand #x2)(defconstant $codecConditionFirstFrame #x4)(defconstant $codecConditionNewDepth #x8)(defconstant $codecConditionNewTransform #x10)(defconstant $codecConditionNewSrcRect #x20)(defconstant $codecConditionNewMask #x40)(defconstant $codecConditionNewMatte #x80)(defconstant $codecConditionNewTransferMode #x100)(defconstant $codecConditionNewClut #x200)(defconstant $codecConditionNewAccuracy #x400)(defconstant $codecConditionNewDestination #x800)(defconstant $codecConditionFirstScreen #x1000)(defconstant $codecConditionDoCursor #x2000)(defconstant $codecConditionCatchUpDiff #x4000)(defconstant $codecConditionMaskMayBeChanged #x8000)(defconstant $codecConditionToBuffer #x10000)(defconstant $codecConditionCodecChangedMask #x80000000)(defconstant $codecInfoResourceType :|cdci|)    ;   codec info resource type  (defconstant $codecInterfaceVersion 2)          ;   high word returned in component GetVersion  (def-mactype :cdsequencedatasourceptr (find-mactype '(:pointer :cdsequencedatasource)))(defrecord CDSequenceDataSource    (recordSize :signed-long)   (next :pointer)   (seqID :signed-long)   (sourceID :signed-long)   (sourceType :ostype)   (sourceInputNumber :signed-long)   (dataPtr :pointer)   (dataDescription :handle)   (changeSeed :signed-long)   (transferProc :pointer)   (transferRefcon :pointer)   (dataSize :signed-long)   )(def-mactype :codeccompressparamsptr (find-mactype '(:pointer :codeccompressparams)))(defrecord CodecCompressParams    (sequenceID :signed-long)                    ;   precompress,bandcompress     (imageDescription (:handle :imagedescription));   precompress,bandcompress     (data :pointer)   (bufferSize :signed-long)   (frameNumber :signed-long)   (startLine :signed-long)   (stopLine :signed-long)   (conditionFlags :signed-long)   (callerFlags :signed-integer)   (capabilities (:pointer :codeccapabilities)) ;   precompress,bandcompress     (progressProcRecord :icmprogressprocrecord)   (completionProcRecord :icmcompletionprocrecord)   (flushProcRecord :icmflushprocrecord)   (srcPixMap :pixmap)                          ;   precompress,bandcompress     (prevPixMap :pixmap)   (spatialQuality :signed-long)   (temporalQuality :signed-long)   (similarity :signed-long)   (dataRateParams (:pointer :datarateparams))   (reserved :signed-long);   The following fields only exist for QuickTime 2.1 and greater     (majorSourceChangeSeed :unsigned-integer)   (minorSourceChangeSeed :unsigned-integer)   (sourceData (:pointer :cdsequencedatasource))   )(def-mactype :codecdecompressparamsptr (find-mactype '(:pointer :codecdecompressparams)))(defrecord CodecDecompressParams    (sequenceID :signed-long)                    ;   predecompress,banddecompress     (imageDescription (:handle :imagedescription));   predecompress,banddecompress     (data :pointer)   (bufferSize :signed-long)   (frameNumber :signed-long)   (startLine :signed-long)   (stopLine :signed-long)   (conditionFlags :signed-long)   (callerFlags :signed-integer)   (capabilities (:pointer :codeccapabilities)) ;   predecompress,banddecompress     (progressProcRecord :icmprogressprocrecord)   (completionProcRecord :icmcompletionprocrecord)   (dataProcRecord :icmdataprocrecord)   (port (:pointer :cgrafport))                 ;   predecompress,banddecompress     (dstPixMap :pixmap)                          ;   predecompress,banddecompress     (maskBits (:pointer :bitmap))   (mattePixMap (:pointer :pixmap))   (srcRect :rect)                              ;   predecompress,banddecompress     (matrix (:pointer :matrixrecord))            ;   predecompress,banddecompress     (accuracy :signed-long)                      ;   predecompress,banddecompress     (transferMode :signed-integer)               ;   predecompress,banddecompress     (frameTime (:pointer :icmframetimerecord))   ;   banddecompress     (reserved (:array :signed-long 1));   The following fields only exist for QuickTime 2.0 and greater     (matrixFlags :signed-byte)                   ;   high bit set if 2x resize     (matrixType :signed-byte)   (dstRect :rect)                              ;   only valid for simple transforms  ;   The following fields only exist for QuickTime 2.1 and greater     (majorSourceChangeSeed :unsigned-integer)   (minorSourceChangeSeed :unsigned-integer)   (sourceData (:pointer :cdsequencedatasource))   (maskRegion (:handle :region));   The following fields only exist for QuickTime 2.5 and greater     (wantedDestinationPixelTypes (:handle :ostype));   Handle to 0-terminated list of OSTypes     (screenFloodMethod :signed-long)   (screenFloodValue :signed-long)   (preferredOffscreenPixelSize :signed-integer)   )(defconstant $matrixFlagScale2x #x80)(defconstant $matrixFlagScale1x #x40)(defconstant $matrixFlagScaleHalf #x20)(defconstant $kNoScreenFloodMethod 0)(defconstant $kKeyColorScreenFloodMethod 1)(defconstant $kAlphaScreenFloodMethod 2);  	codec selectors 0-127 are reserved by Apple  ;  	codec selectors 128-191 are subtype specific  ;  	codec selectors 192-255 are vendor specific  ;  	codec selectors 256-32767 are available for general use  ;  	negative selectors are reserved by the Component Manager  ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecGetCodecInfo" ((ci (:pointer :componentinstancerecord)) (info (:pointer :codecinfo)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci info ((+ (ash 4 16) 0) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecGetCompressionTime" ((ci (:pointer :componentinstancerecord)) (src (:handle :pixmap)) (srcRect (:pointer :rect)) (depth :signed-integer) (spatialQuality (:pointer :signed-long)) (temporalQuality (:pointer :signed-long)) (time (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci src srcRect depth spatialQuality temporalQuality time ((+ (ash 22 16) 1) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecGetMaxCompressionSize" ((ci (:pointer :componentinstancerecord)) (src (:handle :pixmap)) (srcRect (:pointer :rect)) (depth :signed-integer) (quality :signed-long) (size (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci src srcRect depth quality size ((+ (ash 18 16) 2) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecPreCompress" ((ci (:pointer :componentinstancerecord)) (params (:pointer :codeccompressparams)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci params ((+ (ash 4 16) 3) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecBandCompress" ((ci (:pointer :componentinstancerecord)) (params (:pointer :codeccompressparams)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci params ((+ (ash 4 16) 4) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecPreDecompress" ((ci (:pointer :componentinstancerecord)) (params (:pointer :codecdecompressparams)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci params ((+ (ash 4 16) 5) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecBandDecompress" ((ci (:pointer :componentinstancerecord)) (params (:pointer :codecdecompressparams)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci params ((+ (ash 4 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecBusy" ((ci (:pointer :componentinstancerecord)) (seq :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci seq ((+ (ash 4 16) 7) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecGetCompressedImageSize" ((ci (:pointer :componentinstancerecord)) (desc (:handle :imagedescription)) (data :pointer) (bufferSize :signed-long) (dataProc (:pointer :icmdataprocrecord)) (dataSize (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci desc data bufferSize dataProc dataSize ((+ (ash 20 16) 8) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecGetSimilarity" ((ci (:pointer :componentinstancerecord)) (src (:handle :pixmap)) (srcRect (:pointer :rect)) (desc (:handle :imagedescription)) (data :pointer) (similarity (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci src srcRect desc data similarity ((+ (ash 20 16) 9) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecTrimImage" ((ci (:pointer :componentinstancerecord)) (Desc (:handle :imagedescription)) (inData :pointer) (inBufferSize :signed-long) (dataProc (:pointer :icmdataprocrecord)) (outData :pointer) (outBufferSize :signed-long) (flushProc (:pointer :icmflushprocrecord)) (trimRect (:pointer :rect)) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci Desc inData inBufferSize dataProc outData outBufferSize flushProc trimRect progressProc ((+ (ash 36 16) 10) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecRequestSettings" ((ci (:pointer :componentinstancerecord)) (settings :handle) (rp (:pointer :rect)) (filterProc :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci settings rp filterProc ((+ (ash 12 16) 11) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecGetSettings" ((ci (:pointer :componentinstancerecord)) (settings :handle))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci settings ((+ (ash 4 16) 12) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecSetSettings" ((ci (:pointer :componentinstancerecord)) (settings :handle))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci settings ((+ (ash 4 16) 13) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecFlush" ((ci (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci ((+ (ash 0 16) 14) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecSetTimeCode" ((ci (:pointer :componentinstancerecord)) (timeCodeFormat :pointer) (timeCodeTime :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci timeCodeFormat timeCodeTime ((+ (ash 8 16) 15) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecIsImageDescriptionEquivalent" ((ci (:pointer :componentinstancerecord)) (newDesc (:handle :imagedescription)) (equivalent (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci newDesc equivalent ((+ (ash 8 16) 16) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecNewMemory" ((ci (:pointer :componentinstancerecord)) (data (:pointer :pointer)) (dataSize :signed-long) (dataUse :signed-long) (memoryGoneProc :pointer) (refCon :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci data dataSize dataUse memoryGoneProc refCon ((+ (ash 20 16) 17) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecDisposeMemory" ((ci (:pointer :componentinstancerecord)) (data :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci data ((+ (ash 4 16) 18) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecHitTestData" ((ci (:pointer :componentinstancerecord)) (desc (:handle :imagedescription)) (data :pointer) (dataSize :signed-long) (where :point) (hit (:pointer :boolean)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci desc data dataSize where hit ((+ (ash 20 16) 19) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecNewImageBufferMemory" ((ci (:pointer :componentinstancerecord)) (params (:pointer :codecdecompressparams)) (flags :signed-long) (memoryGoneProc :pointer) (refCon :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci params flags memoryGoneProc refCon ((+ (ash 16 16) 20) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecExtractAndCombineFields" ((ci (:pointer :componentinstancerecord)) (fieldFlags :signed-long) (data1 :pointer) (dataSize1 :signed-long) (desc1 (:handle :imagedescription)) (data2 :pointer) (dataSize2 :signed-long) (desc2 (:handle :imagedescription)) (outputData :pointer) (outDataSize (:pointer :signed-long)) (descOut (:handle :imagedescription)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci fieldFlags data1 dataSize1 desc1 data2 dataSize2 desc2 outputData outDataSize descOut ((+ (ash 40 16) 21) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ImageCodecGetMaxCompressionSizeWithSources" ((ci (:pointer :componentinstancerecord)) (src (:handle :pixmap)) (srcRect (:pointer :rect)) (depth :signed-integer) (quality :signed-long) (sourceData (:pointer :cdsequencedatasource)) (size (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci src srcRect depth quality sourceData size ((+ (ash 22 16) 22) :signed-longint))); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := ImageCodecIncludes; $ENDC                                         ; __IMAGECODEC__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'ImageCodec)