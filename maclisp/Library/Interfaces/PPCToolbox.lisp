(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:PPCToolbox.p"; at Tuesday June 6,1995 2:02:02 pm.; ;  	File:		PPCToolbox.p;  ;  	Contains:	Program-Program Communications Toolbox Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __PPCTOOLBOX__; $SETC __PPCTOOLBOX__ := 1; $I+; $SETC PPCToolboxIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __APPLETALK__|#(require-interface 'AppleTalk)#|                                              ; $I AppleTalk.p |#                                             ; $ENDC; 	Types.p														; 		ConditionalMacros.p										; 	OSUtils.p													; 		MixedMode.p												; 		Memory.p												#|                                              ; $IFC UNDEFINED __MEMORY__|#(require-interface 'Memory)#|                                              ; $I Memory.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(def-mactype :ppcservicetype (find-mactype ':character))(defconstant $ppcServiceRealTime 1)(def-mactype :ppclocationkind (find-mactype ':signed-integer))(defconstant $ppcNoLocation 0)                  ;  There is no PPCLocName (defconstant $ppcNBPLocation 1)                 ;  Use AppleTalk NBP      (defconstant $ppcNBPTypeLocation 2)             ;  Used for specifying a location name type during PPCOpen only (def-mactype :ppcportkinds (find-mactype ':signed-integer))(defconstant $ppcByCreatorAndType 1)            ;  Port type is specified as colloquial Mac creator and type (defconstant $ppcByString 2)                    ;  Port type is in pascal string format ;  Values returned for request field in PPCInform call (def-mactype :ppcsessionorigin (find-mactype ':character));  Values returned for requestType field in PPCInform call (defconstant $ppcLocalOrigin 1)                 ;  session originated from this machine (defconstant $ppcRemoteOrigin 2)                ;  session originated from remote machine (def-mactype :ppcportrefnum (find-mactype ':signed-integer))(def-mactype :ppcsessrefnum (find-mactype ':signed-long))(defrecord PPCPortRec    (nameScript :signed-integer)                 ;  script of name    (name (:string 32))                          ;  name of port as seen in browser    (portKindSelector :signed-integer)           ;  which variant    (:variant       (      (portTypeStr (:string 32))                ;  pascal type string       )      (      (portCreator :ostype)      (portType :ostype)      )      )   )(def-mactype :ppcportptr (find-mactype '(:pointer :ppcportrec)))(defrecord LocationNameRec    (locationKindSelector :signed-integer)       ;  which variant    (:variant       (      (nbpEntity :entityname)                   ;  NBP name entity       )      (      (nbpType (:string 32))                    ;  just the NBP type string, for PPCOpen       )      )   )(def-mactype :locationnameptr (find-mactype '(:pointer :locationnamerec)))(defrecord PortInfoRec    (filler1 :signed-byte)                       ;  unsigned char    (authRequired :boolean)   (name :ppcportrec)   )(def-mactype :portinfoptr (find-mactype '(:pointer :portinforec)))(def-mactype :portinfoarrayptr (find-mactype '(:pointer :portinforec)))(def-mactype :ppcparamblockptr (find-mactype '(:pointer :ppcparamblockrec)))(def-mactype :ppccompprocptr (find-mactype ':pointer));  PROCEDURE PPCComp(pb: PPCParamBlockPtr); (def-mactype :ppccompupp (find-mactype ':pointer))(defrecord PPCOpenPBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (portRefNum :signed-integer)                 ;  38 <--   Port Reference    (filler1 :signed-long)   (serviceType :character)                     ;  44 -->    Bit field describing the requested port service    (resFlag :unsigned-byte)                     ;  Must be set to 0    (portName (:pointer :ppcportrec))            ;  46 -->   PortName for PPC    (locationName (:pointer :locationnamerec))   ;  50 -->   If NBP Registration is required    (networkVisible :boolean)                    ;  54 -->   make this network visible on network    (nbpRegistered :boolean)                     ;  55 <--   The given location name was registered on the network    )(def-mactype :ppcopenpbptr (find-mactype '(:pointer :ppcopenpbrec)))(defrecord PPCInformPBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (portRefNum :signed-integer)                 ;  38 -->   Port Identifier    (sessRefNum :signed-long)                    ;  40 <--   Session Reference    (serviceType :character)                     ;  44 <--   Status Flags for type of session, local, remote    (autoAccept :boolean)                        ;  45 -->   if true session will be accepted automatically    (portName (:pointer :ppcportrec))            ;  46 -->   Buffer for Source PPCPortRec    (locationName (:pointer :locationnamerec))   ;  50 -->   Buffer for Source LocationNameRec    (userName (:pointer (:string 255)))          ;  54 -->   Buffer for Soure user's name trying to link.    ;;Changing field userdata from signed-long to unsigned-long to match C header (pretty-sure)   (userData :unsigned-long)                    ;  58 <--   value included in PPCStart's userData    (requestType :character)                     ;  62 <--   Local or Network    )(def-mactype :ppcinformpbptr (find-mactype '(:pointer :ppcinformpbrec)))(defrecord PPCStartPBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (portRefNum :signed-integer)                 ;  38 -->   Port Identifier    (sessRefNum :signed-long)                    ;  40 <--   Session Reference    (serviceType :character)                     ;  44 <--   Actual service method (realTime)    (resFlag :unsigned-byte)                     ;  45 -->   Must be set to 0     (portName (:pointer :ppcportrec))            ;  46 -->   Destination portName    (locationName (:pointer :locationnamerec))   ;  50 -->   NBP or NAS style service location name    ;;Changing field rejectinfo from signed-long to unsigned-long to match C header (pretty-darn-sure)   (rejectInfo :unsigned-long)                  ;  54 <--   reason for rejecting the session request    ;;Changing field userdata from signed-long to unsigned-long to match C header (pretty-sure)   (userData :unsigned-long)                    ;  58 -->   Copied to destination PPCInform parameter block    ;;Changing field userrefnum from signed-long to unsigned-long to match C header (pretty-darn-sure)   (userRefNum :unsigned-long)                  ;  62 -->   userRefNum (obtained during login process)     )(def-mactype :ppcstartpbptr (find-mactype '(:pointer :ppcstartpbrec)))(defrecord PPCAcceptPBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (filler1 :signed-integer)   (sessRefNum :signed-long)                    ;  40 -->   Session Reference    )(def-mactype :ppcacceptpbptr (find-mactype '(:pointer :ppcacceptpbrec)))(defrecord PPCRejectPBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (filler1 :signed-integer)   (sessRefNum :signed-long)                    ;  40 -->   Session Reference    (filler2 :signed-integer)   (filler3 :signed-long)   (filler4 :signed-long)   ;;Changing field rejectinfo from signed-long to unsigned-long to match C header (pretty-darn-sure)   (rejectInfo :unsigned-long)                  ;  54 -->   reason for rejecting the session request     )(def-mactype :ppcrejectpbptr (find-mactype '(:pointer :ppcrejectpbrec)))(defrecord PPCWritePBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (filler1 :signed-integer)   (sessRefNum :signed-long)                    ;  40 -->   Session Reference    (bufferLength :signed-long)                  ;  44 -->   Length of the message buffer    (actualLength :signed-long)                  ;  48 <--   Actual Length Written    (bufferPtr :pointer)                         ;  52 -->   Pointer to message buffer    (more :boolean)                              ;  56 -->   if more data in this block will be written    (filler2 :signed-byte)                       ;  unsigned char    ;;Changing field userdata from signed-long to unsigned-long to match C header (pretty-sure)   (userData :unsigned-long)                    ;  58 -->   Message block userData Uninterpreted by PPC    (blockCreator :ostype)                       ;  62 -->   Message block creator Uninterpreted by PPC    (blockType :ostype)                          ;  66 -->   Message block type Uninterpreted by PPC    )(def-mactype :ppcwritepbptr (find-mactype '(:pointer :ppcwritepbrec)))(defrecord PPCReadPBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (filler1 :signed-integer)   (sessRefNum :signed-long)                    ;  40 -->   Session Reference    (bufferLength :signed-long)                  ;  44 -->   Length of the message buffer    (actualLength :signed-long)                  ;  48 <--   Actual length read    (bufferPtr :pointer)                         ;  52 -->   Pointer to message buffer    (more :boolean)                              ;  56 <--   if true more data in this block to be read    (filler2 :signed-byte)                       ;  unsigned char    ;;Changing field userdata from signed-long to unsigned-long to match C header (pretty-sure)   (userData :unsigned-long)                    ;  58 <--   Message block userData Uninterpreted by PPC    (blockCreator :ostype)                       ;  62 <--   Message block creator Uninterpreted by PPC    (blockType :ostype)                          ;  66 <--   Message block type Uninterpreted by PPC    )(def-mactype :ppcreadpbptr (find-mactype '(:pointer :ppcreadpbrec)))(defrecord PPCEndPBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (filler1 :signed-integer)   (sessRefNum :signed-long)                    ;  40 -->   Session Reference    )(def-mactype :ppcendpbptr (find-mactype '(:pointer :ppcendpbrec)))(defrecord PPCClosePBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (portRefNum :signed-integer)                 ;  38 -->   Port Identifier    )(def-mactype :ppcclosepbptr (find-mactype '(:pointer :ppcclosepbrec)))(defrecord IPCListPortsPBRec    (qLink :pointer)   ;;Changing field cscode from signed-integer to unsigned-word to match C header (pretty-sure)   (csCode :unsigned-word)   ;;Changing field intuse from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (intUse :unsigned-word)   (intUsePtr :pointer)   (ioCompletion :pointer)   (ioResult :signed-integer)   (Reserved (:array :signed-long 5))   (filler1 :signed-integer)   ;;Changing field startindex from signed-integer to unsigned-word to match C header (pretty-sure)   (startIndex :unsigned-word)                  ;  40 -->   Start Index    ;;Changing field requestcount from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (requestCount :unsigned-word)                ;  42 -->   Number of entries to be returned    ;;Changing field actualcount from signed-integer to unsigned-word to match C header (pretty-sure)   (actualCount :unsigned-word)                 ;  44 <--   Actual Number of entries to be returned    (portName (:pointer :ppcportrec))            ;  46 -->   PortName Match    (locationName (:pointer :locationnamerec))   ;  50 -->   NBP or NAS type name to locate the Port Location    (bufferPtr (:pointer :portinforec))          ;  54 -->   Pointer to a buffer requestCount*sizeof(PortInfo) bytes big    )(def-mactype :ipclistportspbptr (find-mactype '(:pointer :ipclistportspbrec)))(defrecord PPCParamBlockRec    (:variant       (      (openParam :ppcopenpbrec)      )      (      (informParam :ppcinformpbrec)      )      (      (startParam :ppcstartpbrec)      )      (      (acceptParam :ppcacceptpbrec)      )      (      (rejectParam :ppcrejectpbrec)      )      (      (writeParam :ppcwritepbrec)      )      (      (readParam :ppcreadpbrec)      )      (      (endParam :ppcendpbrec)      )      (      (closeParam :ppcclosepbrec)      )      (      (listPortsParam :ipclistportspbrec)      )      )   ); $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_PPCInit" ()   :signed-integer   (#x7000 #xA0DD #x3E80) ); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ppcopen because there is no implementation in the new headers(deftrap ("_PPCOpen" "PPCOpenSync")         ((pb (:pointer :ppcopenpbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 1)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCOpenSync" ((pb (:pointer :ppcopenpbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 1)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCOpenAsync" ((pb (:pointer :ppcopenpbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 1)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ppcinform because there is no implementation in the new headers(deftrap ("_PPCInform" "PPCInformSync")         ((pb (:pointer :ppcinformpbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 3)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCInformSync" ((pb (:pointer :ppcinformpbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 3)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCInformAsync" ((pb (:pointer :ppcinformpbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 3)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ppcstart because there is no implementation in the new headers(deftrap ("_PPCStart" "PPCStartSync")         ((pb (:pointer :ppcstartpbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 2)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCStartSync" ((pb (:pointer :ppcstartpbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCStartAsync" ((pb (:pointer :ppcstartpbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 2)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ppcaccept because there is no implementation in the new headers(deftrap ("_PPCAccept" "PPCAcceptSync")         ((pb (:pointer :ppcacceptpbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 4)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCAcceptSync" ((pb (:pointer :ppcacceptpbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 4)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCAcceptAsync" ((pb (:pointer :ppcacceptpbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 4)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ppcreject because there is no implementation in the new headers(deftrap ("_PPCReject" "PPCRejectSync")         ((pb (:pointer :ppcrejectpbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 5)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCRejectSync" ((pb (:pointer :ppcrejectpbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 5)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCRejectAsync" ((pb (:pointer :ppcrejectpbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 5)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ppcwrite because there is no implementation in the new headers(deftrap ("_PPCWrite" "PPCWriteSync")         ((pb (:pointer :ppcwritepbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 6)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCWriteSync" ((pb (:pointer :ppcwritepbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 6)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCWriteAsync" ((pb (:pointer :ppcwritepbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 6)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ppcread because there is no implementation in the new headers(deftrap ("_PPCRead" "PPCReadSync")         ((pb (:pointer :ppcreadpbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 7)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCReadSync" ((pb (:pointer :ppcreadpbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 7)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCReadAsync" ((pb (:pointer :ppcreadpbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 7)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ppcend because there is no implementation in the new headers(deftrap ("_PPCEnd" "PPCEndSync")         ((pb (:pointer :ppcendpbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 8)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCEndSync" ((pb (:pointer :ppcendpbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 8)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCEndAsync" ((pb (:pointer :ppcendpbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 8)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ppcclose because there is no implementation in the new headers(deftrap ("_PPCClose" "PPCCloseSync")         ((pb (:pointer :ppcclosepbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 9)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCCloseSync" ((pb (:pointer :ppcclosepbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 9)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_PPCCloseAsync" ((pb (:pointer :ppcclosepbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 9)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of ipclistports because there is no implementation in the new headers(deftrap ("_IPCListPorts" "IPCListPortsSync")         ((pb (:pointer :ipclistportspbrec)))         (:d0 :signed-integer)         (:register-trap 41181 :a0 pb :d0 10)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_IPCListPortsSync" ((pb (:pointer :ipclistportspbrec)))   (:d0 :signed-integer)   (:register-trap #xA0DD :a0 pb :d0 10)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_IPCListPortsAsync" ((pb (:pointer :ipclistportspbrec)))   (:d0 :signed-integer)   (:register-trap #xA4DD :a0 pb :d0 10)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of deleteuseridentity because there is no implementation in the new headers(deftrap "_DeleteUserIdentity"         ((userref :signed-long))         (:d0 :signed-integer)         (rlet ((userrefp :long userref))               (:register-trap 41181 :d0 12 :a0 userrefp)));; Warning: No calling method defined for this trap;; Using mcl2 version of getdefaultuser because there is no implementation in the new headers(deftrap "_GetDefaultUser"         ((userref (:pointer :signed-long)) (username (:pointer (:string 32))))         (:d0 :signed-integer)         (%stack-block ((params 8))                       (%put-ptr params username)                       (%put-ptr params userref 4)                       (:register-trap 41181 :d0 13 :a0 params)));; Warning: No calling method defined for this trap;; Using mcl2 version of startsecuresession because there is no implementation in the new headers(deftrap "_StartSecureSession"         ((pb (:pointer :ppcstartpbrec)) (username (:pointer (:string 32)))          (usedefault :boolean) (allowguest :boolean)          (guestselected (:pointer :boolean)) (prompt (:string 255)))         (:d0 :signed-integer)         (%stack-block ((params 20))                       (%put-ptr params prompt)                       (%put-ptr params guestselected 4)                       (%put-word params allowguest 8)                       (%put-word params usedefault 10)                       (%put-ptr params username 12)                       (%put-ptr params pb 16)                       (:register-trap 41181 :d0 14 :a0 params)))(def-mactype :ppcfilterprocptr (find-mactype ':pointer));  FUNCTION PPCFilter(name: LocationNamePtr; port: PortInfoPtr): BOOLEAN; (def-mactype :ppcfilterupp (find-mactype ':pointer))(defconstant $uppPPCCompProcInfo #xC0)          ;  PROCEDURE (4 byte param); (defconstant $uppPPCFilterProcInfo #x3D0)       ;  FUNCTION (4 byte param, 4 byte param): 1 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewPPCCompProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewPPCFilterProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallPPCCompProc" ((pb (:pointer :ppcparamblockrec)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallPPCFilterProc" ((name (:pointer :locationnamerec)) (port (:pointer :portinforec)) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_PPCBrowser" ((prompt (:string 255)) (applListLabel (:string 255)) (defaultSpecified :boolean) (theLocation (:pointer :locationnamerec)) (thePortInfo (:pointer :portinforec)) (portFilter :pointer) (theLocNBPType (:string 32)))   (:stack :signed-integer)   (:stack-trap #xA82B :d0 3328 prompt applListLabel defaultSpecified theLocation thePortInfo portFilter theLocNBPType)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := PPCToolboxIncludes; $ENDC                                         ; __PPCTOOLBOX__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'PPCToolbox);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:PPCTOOLBOX.patch(DEFRECORD PORTINFOARRAY (ARRAY (ARRAY :PORTINFOREC 1)))