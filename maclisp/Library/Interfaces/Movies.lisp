(in-package :TRAPS); Generated from #P"Cohones:Lisp:Projects:PInterface Translator:Source interfaces:Quicktime 2.5 PInterfaces:Movies.p"; at Thursday May 23,1996 2:23:08 pm.; ;  	File:		Movies.p;  ;  	Contains:	QuickTime interfaces;  ;  	Version:	Technology:	;  				Release:	QuickTime 2.5 interfaces to use with ETO #20;  ;  	Copyright:	© 1984-1996 by Apple Computer, Inc.  All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, send the file and version;  				information (from above) and the problem description to:;  ;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __MOVIES__; $SETC __MOVIES__ := 1; $I+; $SETC MoviesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __ALIASES__|#(require-interface 'Aliases)#|                                              ; $I Aliases.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __MENUS__|#(require-interface 'Menus)#|                                              ; $I Menus.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __COMPONENTS__|#(require-interface 'Components)#|                                              ; $I Components.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __IMAGECOMPRESSION__|#(require-interface 'ImageCompression)#|                                              ; $I ImageCompression.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+;    "kFix1" is defined in FixMath as "fixed1"   ;   error codes are in Errors.[haa]  ;   gestalt codes are in Gestalt.[hpa]  (defconstant $MovieFileType :|MooV|)(defconstant $MediaHandlerType :|mhlr|)(defconstant $DataHandlerType :|dhlr|)(defconstant $VideoMediaType :|vide|)(defconstant $SoundMediaType :|soun|)(defconstant $TextMediaType :|text|)(defconstant $BaseMediaType :|gnrc|)(defconstant $MPEGMediaType :|MPEG|)(defconstant $MusicMediaType :|musi|)(defconstant $TimeCodeMediaType :|tmcd|)(defconstant $SpriteMediaType :|sprt|)(defconstant $TweenMediaType :|twen|)(defconstant $ThreeDeeMediaType :|qd3d|)(defconstant $HandleDataHandlerSubType :|hndl|)(defconstant $ResourceDataHandlerSubType :|rsrc|)(defconstant $VisualMediaCharacteristic :|eyes|)(defconstant $AudioMediaCharacteristic :|ears|)(defconstant $DoTheRightThing 0)(def-mactype :movierecordptr (find-mactype '(:pointer :movierecord)))(defrecord MovieRecord    (data (:array :signed-long 1))   )(def-mactype :movie (find-mactype '(:pointer :movierecord)))(def-mactype :trackrecordptr (find-mactype '(:pointer :trackrecord)))(defrecord TrackRecord    (data (:array :signed-long 1))   )(def-mactype :track (find-mactype '(:pointer :trackrecord)))(def-mactype :mediarecordptr (find-mactype '(:pointer :mediarecord)))(defrecord MediaRecord    (data (:array :signed-long 1))   )(def-mactype :media (find-mactype '(:pointer :mediarecord)))(def-mactype :userdatarecordptr (find-mactype '(:pointer :userdatarecord)))(defrecord UserDataRecord    (data (:array :signed-long 1))   )(def-mactype :userdata (find-mactype '(:pointer :userdatarecord)))(def-mactype :trackeditstaterecordptr (find-mactype '(:pointer :trackeditstaterecord)))(defrecord TrackEditStateRecord    (data (:array :signed-long 1))   )(def-mactype :trackeditstate (find-mactype '(:pointer :trackeditstaterecord)))(def-mactype :movieeditstaterecordptr (find-mactype '(:pointer :movieeditstaterecord)))(defrecord MovieEditStateRecord    (data (:array :signed-long 1))   )(def-mactype :movieeditstate (find-mactype '(:pointer :movieeditstaterecord)))(def-mactype :spriteworldrecordptr (find-mactype '(:pointer :spriteworldrecord)))(defrecord SpriteWorldRecord    (data (:array :signed-long 1))   )(def-mactype :spriteworld (find-mactype '(:pointer :spriteworldrecord)))(def-mactype :spriterecordptr (find-mactype '(:pointer :spriterecord)))(defrecord SpriteRecord    (data (:array :signed-long 1))   )(def-mactype :sprite (find-mactype '(:pointer :spriterecord)))(def-mactype :sampledescriptionptr (find-mactype '(:pointer :sampledescription)))(defrecord (SampleDescription :handle)    (descSize :signed-long)   (dataFormat :signed-long)   (resvd1 :signed-long)   (resvd2 :signed-integer)   (dataRefIndex :signed-integer)   )(def-mactype :sampledescriptionhandle (find-mactype '(:handle :sampledescription)))(def-mactype :qtatomcontainer (find-mactype ':handle))(def-mactype :qtatom (find-mactype ':signed-long))(def-mactype :qtatomtype (find-mactype ':signed-long))(def-mactype :qtatomid (find-mactype ':signed-long))(def-mactype :sounddescriptionptr (find-mactype '(:pointer :sounddescription)))(defrecord (SoundDescription :handle)    (descSize :signed-long)                      ;   total size of SoundDescription including extra data     (dataFormat :signed-long)                    ;        (resvd1 :signed-long)                        ;   reserved for apple use     (resvd2 :signed-integer)   (dataRefIndex :signed-integer)   (version :signed-integer)                    ;   which version is this data     (revlevel :signed-integer)                   ;   what version of that codec did this     (vendor :signed-long)                        ;   whose  codec compressed this data     (numChannels :signed-integer)                ;   number of channels of sound     (sampleSize :signed-integer)                 ;   number of bits per sample     (compressionID :signed-integer)              ;   sound compression used, 0 if none     (packetSize :signed-integer)                 ;   packet size for compression, 0 if no compression     (sampleRate :signed-long)                    ;   sample rate sound is captured at     )(def-mactype :sounddescriptionhandle (find-mactype '(:handle :sounddescription)))(def-mactype :textdescriptionptr (find-mactype '(:pointer :textdescription)))(defrecord (TextDescription :handle)    (descSize :signed-long)                      ;   Total size of TextDescription    (dataFormat :signed-long)                    ;   'text'    (resvd1 :signed-long)   (resvd2 :signed-integer)   (dataRefIndex :signed-integer)   (displayFlags :signed-long)                  ;   see enum below for flag values    (textJustification :signed-long)             ;   Can be: teCenter,teFlush -Default,-Right,-Left    (bgColor :rgbcolor)                          ;   Background color    (defaultTextBox :rect)                       ;   Location to place the text within the track bounds    (defaultStyle :scrpstelement)                ;   Default style (struct defined in TextEdit.h)    (defaultFontName :signed-byte)               ;   Font Name (pascal string - struct extended to fit)     )(def-mactype :textdescriptionhandle (find-mactype '(:handle :textdescription)))(def-mactype :threedeedescriptionptr (find-mactype '(:pointer :threedeedescription)))(defrecord ThreeDeeDescription    (descSize :signed-long)                      ;   total size of ThreeDeeDescription including extra data     (dataFormat :signed-long)                    ;        (resvd1 :signed-long)                        ;   reserved for apple use     (resvd2 :signed-integer)   (dataRefIndex :signed-integer)   (version :signed-long)                       ;   which version is this data     (rendererType :signed-long)                  ;   which renderer to use, 0 for default     )(def-mactype :threedeedescriptionhandle (find-mactype '(:handle :threedeedescription)))(def-mactype :datareferencerecordptr (find-mactype '(:pointer :datareferencerecord)))(defrecord DataReferenceRecord    (dataRefType :ostype)   (dataRef :handle)   )(def-mactype :datareferenceptr (find-mactype '(:pointer :datareferencerecord))); ; --------------------------;   Music Sample Description; --------------------------; (def-mactype :musicdescriptionptr (find-mactype '(:pointer :musicdescription)))(defrecord MusicDescription    (descSize :signed-long)   (dataFormat :signed-long)                    ;   'musi'     (resvd1 :signed-long)   (resvd2 :signed-integer)   (dataRefIndex :signed-integer)   (musicFlags :signed-long)   ;;Changing field headerdata from signed-long to unsigned-long to match C header (pretty-darn-sure)   (headerData (:array :unsigned-long 1))       ;   variable size!     )(def-mactype :musicdescriptionhandle (find-mactype '(:handle :musicdescription)))(defconstant $musicFlagDontPlay20Soft #x1)(defconstant $dfDontDisplay #x1)                ;   Don't display the text (defconstant $dfDontAutoScale #x2)              ;   Don't scale text as track bounds grows or shrinks (defconstant $dfClipToTextBox #x4)              ;   Clip update to the textbox (defconstant $dfUseMovieBGColor #x8)            ;   Set text background to movie's background color (defconstant $dfShrinkTextBoxToFit #x10)        ;   Compute minimum box to fit the sample (defconstant $dfScrollIn #x20)                  ;   Scroll text in until last of text is in view  (defconstant $dfScrollOut #x40)                 ;   Scroll text out until last of text is gone (if both set, scroll in then out) (defconstant $dfHorizScroll #x80)               ;   Scroll text horizontally (otherwise it's vertical) (defconstant $dfReverseScroll #x100)            ;   vert: scroll down rather than up; horiz: scroll backwards (justfication dependent) (defconstant $dfContinuousScroll #x200)         ;   new samples cause previous samples to scroll out  (defconstant $dfFlowHoriz #x400)                ;   horiz scroll text flows in textbox rather than extend to right  (defconstant $dfContinuousKaraoke #x800)        ;   ignore begin offset, hilite everything up to the end offset(karaoke) (defconstant $dfDropShadow #x1000)              ;   display text with a drop shadow  (defconstant $dfAntiAlias #x2000)               ;   attempt to display text anti aliased (defconstant $dfKeyedText #x4000)               ;   key the text over background (defconstant $dfInverseHilite #x8000)           ;   Use inverse hiliting rather than using hilite color (defconstant $dfTextColorHilite #x10000)        ;   changes text color in place of hiliting.  (defconstant $searchTextDontGoToFoundTime #x10000)(defconstant $searchTextDontHiliteFoundText #x20000)(defconstant $searchTextOneTrackOnly #x40000)(defconstant $searchTextEnabledTracksOnly #x80000);   progress messages  (defconstant $movieProgressOpen 0)(defconstant $movieProgressUpdatePercent 1)(defconstant $movieProgressClose 2);   progress operations  (defconstant $progressOpFlatten 1)(defconstant $progressOpInsertTrackSegment 2)(defconstant $progressOpInsertMovieSegment 3)(defconstant $progressOpPaste 4)(defconstant $progressOpAddMovieSelection 5)(defconstant $progressOpCopy 6)(defconstant $progressOpCut 7)(defconstant $progressOpLoadMovieIntoRam 8)(defconstant $progressOpLoadTrackIntoRam 9)(defconstant $progressOpLoadMediaIntoRam 10)(defconstant $progressOpImportMovie 11)(defconstant $progressOpExportMovie 12)(defconstant $mediaQualityDraft #x0)(defconstant $mediaQualityNormal #x40)(defconstant $mediaQualityBetter #x80)(defconstant $mediaQualityBest #xC0)(def-mactype :moviergncoverprocptr (find-mactype ':pointer));  FUNCTION MovieRgnCover(theMovie: Movie; changedRgn: RgnHandle; refcon: LONGINT): OSErr; (def-mactype :movieprogressprocptr (find-mactype ':pointer));  FUNCTION MovieProgress(theMovie: Movie; message: INTEGER; whatOperation: INTEGER; percentDone: Fixed; refcon: LONGINT): OSErr; (def-mactype :moviedrawingcompleteprocptr (find-mactype ':pointer));  FUNCTION MovieDrawingComplete(theMovie: Movie; refCon: LONGINT): OSErr; (def-mactype :tracktransferprocptr (find-mactype ':pointer));  FUNCTION TrackTransfer(t: Track; refCon: LONGINT): OSErr; (def-mactype :getmovieprocptr (find-mactype ':pointer));  FUNCTION GetMovie(offset: LONGINT; size: LONGINT; dataPtr: UNIV Ptr; refCon: UNIV Ptr): OSErr; (def-mactype :moviepreviewcalloutprocptr (find-mactype ':pointer));  FUNCTION MoviePreviewCallOut(refcon: LONGINT): BOOLEAN; (def-mactype :textmediaprocptr (find-mactype ':pointer));  FUNCTION TextMedia(theText: Handle; theMovie: Movie; VAR displayFlag: INTEGER; refcon: LONGINT): OSErr; (def-mactype :movieserrorprocptr (find-mactype ':pointer));  PROCEDURE MoviesError(theErr: OSErr; refcon: LONGINT); (def-mactype :movieserrorupp (find-mactype ':pointer))(defconstant $uppMoviesErrorProcInfo #x380); $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewMoviesErrorProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallMoviesErrorProc" ("QuickTimeLib")) ((theErr :signed-integer) (refcon :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC(def-mactype :moviergncoverupp (find-mactype ':pointer))(def-mactype :movieprogressupp (find-mactype ':pointer))(def-mactype :moviedrawingcompleteupp (find-mactype ':pointer))(def-mactype :tracktransferupp (find-mactype ':pointer))(def-mactype :getmovieupp (find-mactype ':pointer))(def-mactype :moviepreviewcalloutupp (find-mactype ':pointer))(def-mactype :textmediaupp (find-mactype ':pointer))(def-mactype :mediahandler (find-mactype '(:pointer :componentinstancerecord)))(def-mactype :datahandler (find-mactype '(:pointer :componentinstancerecord)))(def-mactype :mediahandlercomponent (find-mactype '(:pointer :componentrecord)))(def-mactype :datahandlercomponent (find-mactype '(:pointer :componentrecord)))(def-mactype :handlererror (find-mactype ':signed-long));   TimeBase equates  (def-mactype :timevalue (find-mactype ':signed-long))(def-mactype :timescale (find-mactype ':signed-long))(%define-record :comptimevalue (find-record-descriptor :wide))(def-mactype :comptimevalueptr (find-mactype '(:pointer :wide)))(defconstant $loopTimeBase 1)(defconstant $palindromeLoopTimeBase 2)(defconstant $maintainTimeBaseZero 4)(def-mactype :timebaseflags (find-mactype ':signed-long))(def-mactype :timebaserecordptr (find-mactype '(:pointer :timebaserecord)))(defrecord TimeBaseRecord    (data (:array :signed-long 1))   )(def-mactype :timebase (find-mactype '(:pointer :timebaserecord)))(def-mactype :callbackrecordptr (find-mactype '(:pointer :callbackrecord)))(defrecord CallBackRecord    (data (:array :signed-long 1))   )(def-mactype :qtcallback (find-mactype '(:pointer :callbackrecord)))(def-mactype :timerecordptr (find-mactype '(:pointer :timerecord)))(defrecord TimeRecord    (value :wide)                                ;   units     (scale :signed-long)                         ;   units per second     (base (:pointer :timebaserecord))   );   CallBack equates  (defconstant $triggerTimeFwd #x1)               ;   when curTime exceeds triggerTime going forward  (defconstant $triggerTimeBwd #x2)               ;   when curTime exceeds triggerTime going backwards  (defconstant $triggerTimeEither #x3)            ;   when curTime exceeds triggerTime going either direction  (defconstant $triggerRateLT #x4)                ;   when rate changes to less than trigger value  (defconstant $triggerRateGT #x8)                ;   when rate changes to greater than trigger value  (defconstant $triggerRateEqual #x10)            ;   when rate changes to equal trigger value  (defconstant $triggerRateLTE #x14)(defconstant $triggerRateGTE #x18)(defconstant $triggerRateNotEqual #x1C)(defconstant $triggerRateChange 0)(defconstant $triggerAtStart #x1)(defconstant $triggerAtStop #x2)(def-mactype :qtcallbackflags (find-mactype ':signed-integer))(defconstant $timeBaseBeforeStartTime 1)(defconstant $timeBaseAfterStopTime 2)(def-mactype :timebasestatus (find-mactype ':signed-long))(defconstant $callBackAtTime 1)(defconstant $callBackAtRate 2)(defconstant $callBackAtTimeJump 3)(defconstant $callBackAtExtremes 4)(defconstant $callBackAtInterrupt #x8000)(defconstant $callBackAtDeferredTask #x4000)(def-mactype :qtcallbacktype (find-mactype ':signed-integer))(def-mactype :qtcallbackprocptr (find-mactype ':pointer));  PROCEDURE QTCallBack(cb: QTCallBack; refCon: LONGINT); (def-mactype :qtcallbackupp (find-mactype ':pointer))(defconstant $qtcbNeedsRateChanges 1)           ;   wants to know about rate changes  (defconstant $qtcbNeedsTimeChanges 2)           ;   wants to know about time changes  (defconstant $qtcbNeedsStartStopChanges 4)      ;   wants to know when TimeBase start/stop is changed (def-mactype :qtcallbackheaderptr (find-mactype '(:pointer :qtcallbackheader)))(defrecord QTCallBackHeader    (callBackFlags :signed-long)   (reserved1 :signed-long)   (qtPrivate (:array :signed-byte 40))   )(def-mactype :qtsynctaskprocptr (find-mactype ':pointer));  PROCEDURE QTSyncTask(task: UNIV Ptr); (def-mactype :qtsynctaskupp (find-mactype ':pointer))(def-mactype :qtsynctaskrecordptr (find-mactype '(:pointer :qtsynctaskrecord)))(defrecord QTSyncTaskRecord    (qLink :pointer)   (proc :pointer)   )(def-mactype :qtsynctaskptr (find-mactype '(:pointer :qtsynctaskrecord)))(defconstant $keepInRam #x1)                    ;   load and make non-purgable (defconstant $unkeepInRam #x2)                  ;   mark as purgable (defconstant $flushFromRam #x4)                 ;   empty those handles (defconstant $loadForwardTrackEdits #x8)        ;  	load track edits into ram for playing forward (defconstant $loadBackwardTrackEdits #x10)      ;  	load track edits into ram for playing in reverse (defconstant $newMovieActive #x1)(defconstant $newMovieDontResolveDataRefs #x2)(defconstant $newMovieDontAskUnresolvedDataRefs #x4)(defconstant $newMovieDontAutoAlternates #x8);   track usage bits  (defconstant $trackUsageInMovie #x2)(defconstant $trackUsageInPreview #x4)(defconstant $trackUsageInPoster #x8);   Add/GetMediaSample flags  (defconstant $mediaSampleNotSync #x1)           ;   sample is not a sync sample (eg. is frame differenced  (defconstant $mediaSampleShadowSync #x2)        ;   sample is a shadow sync  (defconstant $pasteInParallel #x1)(defconstant $showUserSettingsDialog #x2)(defconstant $movieToFileOnlyExport #x4)(defconstant $movieFileSpecValid #x8)(defconstant $nextTimeMediaSample #x1)(defconstant $nextTimeMediaEdit #x2)(defconstant $nextTimeTrackEdit #x4)(defconstant $nextTimeSyncSample #x8)(defconstant $nextTimeStep #x10)(defconstant $nextTimeEdgeOK #x4000)(defconstant $nextTimeIgnoreActiveSegment #x8000)(def-mactype :nexttimeflagsenum (find-mactype ':signed-integer))(defconstant $createMovieFileDeleteCurFile #x80000000)(defconstant $createMovieFileDontCreateMovie #x40000000)(defconstant $createMovieFileDontOpenFile #x20000000)(def-mactype :createmoviefileflagsenum (find-mactype ':signed-long))(defconstant $flattenAddMovieToDataFork #x1)(defconstant $flattenActiveTracksOnly #x4)(defconstant $flattenDontInterleaveFlatten #x8)(defconstant $flattenFSSpecPtrIsDataRefRecordPtr #x10)(def-mactype :movieflattenflagsenum (find-mactype ':signed-long))(defconstant $movieInDataForkResID -1)          ;   magic res ID  (defconstant $mcTopLeftMovie #x1)               ;   usually centered  (defconstant $mcScaleMovieToFit #x2)            ;   usually only scales down  (defconstant $mcWithBadge #x4)                  ;   give me a badge  (defconstant $mcNotVisible #x8)                 ;   don't show controller  (defconstant $mcWithFrame #x10)                 ;   gimme a frame  (defconstant $movieScrapDontZeroScrap #x1)(defconstant $movieScrapOnlyPutMovie #x2)(defconstant $dataRefSelfReference #x1)(defconstant $dataRefWasNotResolved #x2)(def-mactype :datarefattributesflags (find-mactype ':signed-long))(defconstant $hintsScrubMode #x1)               ;   mask == && (if flags == scrub on, flags != scrub off)  (defconstant $hintsLoop #x2)(defconstant $hintsDontPurge #x4)(defconstant $hintsUseScreenBuffer #x20)(defconstant $hintsAllowInterlace #x40)(defconstant $hintsUseSoundInterp #x80)(defconstant $hintsHighQuality #x100)           ;   slooooow  (defconstant $hintsPalindrome #x200)(defconstant $hintsInactive #x800)(def-mactype :playhintsenum (find-mactype ':signed-long))(defconstant $mediaHandlerFlagBaseClient 1)(def-mactype :mediahandlerflagsenum (find-mactype ':signed-long))(defconstant $movieTrackMediaType #x1)(defconstant $movieTrackCharacteristic #x2)(defconstant $movieTrackEnabledOnly #x4)(def-mactype :samplereferencerecordptr (find-mactype '(:pointer :samplereferencerecord)))(defrecord SampleReferenceRecord    (dataOffset :signed-long)   (dataSize :signed-long)   (durationPerSample :signed-long)   (numberOfSamples :signed-long)   (sampleFlags :signed-integer)   )(def-mactype :samplereferenceptr (find-mactype '(:pointer :samplereferencerecord))); ; ************************; * Initialization Routines ; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_EnterMovies" ("QuickTimeLib")) ()   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 1)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_ExitMovies" ("QuickTimeLib")) ()   nil   (:stack-trap #xAAAA :d0 2)); $ENDC; ; ************************; * Error Routines ; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMoviesError" ("QuickTimeLib")) ()   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 3)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ClearMoviesStickyError" ("QuickTimeLib")) ()   nil   (:stack-trap #xAAAA :d0 222)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMoviesStickyError" ("QuickTimeLib")) ()   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 4)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMoviesErrorProc" ("QuickTimeLib")) ((errProc :pointer) (refcon :signed-long))   nil   (:stack-trap #xAAAA :d0 239 errProc refcon)); $ENDC; ; ************************; * Idle Routines ; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_MoviesTask" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (maxMilliSecToUse :signed-long))   nil   (:stack-trap #xAAAA :d0 5 theMovie maxMilliSecToUse)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_PrerollMovie" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (time :signed-long) (Rate :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 6 theMovie time Rate)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_LoadMovieIntoRam" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (time :signed-long) (duration :signed-long) (flags :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 7 theMovie time duration flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_LoadTrackIntoRam" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (time :signed-long) (duration :signed-long) (flags :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 366 theTrack time duration flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_LoadMediaIntoRam" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (time :signed-long) (duration :signed-long) (flags :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 8 theMedia time duration flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMovieActive" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (active :boolean))   nil   (:stack-trap #xAAAA :d0 9 theMovie active)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieActive" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :boolean)   (:stack-trap #xAAAA :d0 10 theMovie)); $ENDC; ; ************************; * calls for playing movies, previews, posters; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_StartMovie" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 11 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_StopMovie" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 12 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GoToBeginningOfMovie" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 13 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GoToEndOfMovie" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 14 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_IsMovieDone" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :boolean)   (:stack-trap #xAAAA :d0 221 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMoviePreviewMode" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :boolean)   (:stack-trap #xAAAA :d0 15 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMoviePreviewMode" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (usePreview :boolean))   nil   (:stack-trap #xAAAA :d0 16 theMovie usePreview)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_ShowMoviePoster" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 17 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_PlayMoviePreview" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (callOutProc :pointer) (refcon :signed-long))   nil   (:stack-trap #xAAAA :d0 242 theMovie callOutProc refcon)); $ENDC; ; ************************; * calls for controlling movies & tracks which are playing; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieTimeBase" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:pointer :timebaserecord))   (:stack-trap #xAAAA :d0 18 theMovie)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieMasterTimeBase" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (tb (:pointer :timebaserecord)) (slaveZero (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 359 theMovie tb slaveZero)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieMasterClock" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (clockMeister (:pointer :componentrecord)) (slaveZero (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 360 theMovie clockMeister slaveZero)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieGWorld" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (port (:pointer (:pointer :cgrafport))) (gdh (:pointer (:handle :gdevice))))   nil   (:stack-trap #xAAAA :d0 21 theMovie port gdh)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMovieGWorld" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (port (:pointer :cgrafport)) (gdh (:handle :gdevice)))   nil   (:stack-trap #xAAAA :d0 22 theMovie port gdh)); $ENDC(defconstant $movieDrawingCallWhenChanged 0)(defconstant $movieDrawingCallAlways 1); $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieDrawingCompleteProc" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (flags :signed-long) (proc :pointer) (refCon :signed-long))   nil   (:stack-trap #xAAAA :d0 478 theMovie flags proc refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetNextTrackForCompositing" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (theTrack (:pointer :trackrecord)))   (:stack (:pointer :trackrecord))   (:stack-trap #xAAAA :d0 506 theMovie theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetPrevTrackForCompositing" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (theTrack (:pointer :trackrecord)))   (:stack (:pointer :trackrecord))   (:stack-trap #xAAAA :d0 507 theMovie theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTrackGWorld" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (port (:pointer :cgrafport)) (gdh (:handle :gdevice)) (proc :pointer) (refCon :signed-long))   nil   (:stack-trap #xAAAA :d0 157 theTrack port gdh proc refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMoviePict" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (time :signed-long))   (:stack (:handle :picture))   (:stack-trap #xAAAA :d0 29 theMovie time)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackPict" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (time :signed-long))   (:stack (:handle :picture))   (:stack-trap #xAAAA :d0 30 theTrack time)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMoviePosterPict" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:handle :picture))   (:stack-trap #xAAAA :d0 247 theMovie)); $ENDC;   called between Begin & EndUpdate  ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_UpdateMovie" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 31 theMovie)); $ENDC;  *** spatial movie routines *** ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieBox" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (boxRect (:pointer :rect)))   nil   (:stack-trap #xAAAA :d0 249 theMovie boxRect)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieBox" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (boxRect (:pointer :rect)))   nil   (:stack-trap #xAAAA :d0 250 theMovie boxRect)); $ENDC;  * movie display clip  ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieDisplayClipRgn" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 252 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieDisplayClipRgn" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (theClip (:handle :region)))   nil   (:stack-trap #xAAAA :d0 253 theMovie theClip)); $ENDC;  * movie src clip  ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieClipRgn" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 256 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieClipRgn" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (theClip (:handle :region)))   nil   (:stack-trap #xAAAA :d0 257 theMovie theClip)); $ENDC;  * track src clip  ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackClipRgn" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 258 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTrackClipRgn" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (theClip (:handle :region)))   nil   (:stack-trap #xAAAA :d0 259 theTrack theClip)); $ENDC;  * bounds in display space (not clipped by display clip)  ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieDisplayBoundsRgn" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 251 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackDisplayBoundsRgn" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 274 theTrack)); $ENDC;  * bounds in movie space  ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieBoundsRgn" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 254 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackMovieBoundsRgn" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 255 theTrack)); $ENDC;  * bounds in track space  ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackBoundsRgn" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 273 theTrack)); $ENDC;  * mattes - always in track space  ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackMatte" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:handle :pixmap))   (:stack-trap #xAAAA :d0 277 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTrackMatte" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (theMatte (:handle :pixmap)))   nil   (:stack-trap #xAAAA :d0 278 theTrack theMatte)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeMatte" ("QuickTimeLib")) ((theMatte (:handle :pixmap)))   nil   (:stack-trap #xAAAA :d0 330 theMatte)); $ENDC; ; ************************; * calls for getting/saving movies; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovie" ("QuickTimeLib")) ((flags :signed-long))   (:stack (:pointer :movierecord))   (:stack-trap #xAAAA :d0 391 flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_PutMovieIntoHandle" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (publicMovie :handle))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 34 theMovie publicMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_PutMovieIntoDataFork" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (fRefNum :signed-integer) (offset :signed-long) (maxSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 436 theMovie fRefNum offset maxSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DisposeMovie" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 35 theMovie)); $ENDC; ; ************************; * Movie State Routines; *************************; ; $IFC NOT GENERATINGCFM;; For trap _getmoviecreationtime, using function return type from C header. Pascal used :signed-long, C uses :unsigned-long;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieCreationTime" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :unsigned-long)   (:stack-trap #xAAAA :d0 38 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmoviemodificationtime, using function return type from C header. Pascal used :signed-long, C uses :unsigned-long;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieModificationTime" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :unsigned-long)   (:stack-trap #xAAAA :d0 39 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmovietimescale, using function return type from C header. Pascal used :signed-long, C uses :timescale;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieTimeScale" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :timescale)   (:stack-trap #xAAAA :d0 41 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMovieTimeScale" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (TimeScale :signed-long))   nil   (:stack-trap #xAAAA :d0 42 theMovie TimeScale)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmovieduration, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieDuration" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 43 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmovierate, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieRate" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :fixed)   (:stack-trap #xAAAA :d0 44 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMovieRate" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (rate :signed-long))   nil   (:stack-trap #xAAAA :d0 45 theMovie rate)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmoviepreferredrate, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMoviePreferredRate" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :fixed)   (:stack-trap #xAAAA :d0 243 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMoviePreferredRate" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (rate :signed-long))   nil   (:stack-trap #xAAAA :d0 244 theMovie rate)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMoviePreferredVolume" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 245 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMoviePreferredVolume" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (volume :signed-integer))   nil   (:stack-trap #xAAAA :d0 246 theMovie volume)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieVolume" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 46 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMovieVolume" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (volume :signed-integer))   nil   (:stack-trap #xAAAA :d0 47 theMovie volume)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieMatrix" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (matrix (:pointer :matrixrecord)))   nil   (:stack-trap #xAAAA :d0 49 theMovie matrix)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMovieMatrix" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (matrix (:pointer :matrixrecord)))   nil   (:stack-trap #xAAAA :d0 50 theMovie matrix)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMoviePreviewTime" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (previewTime (:pointer :signed-long)) (previewDuration (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 51 theMovie previewTime previewDuration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMoviePreviewTime" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (previewTime :signed-long) (previewDuration :signed-long))   nil   (:stack-trap #xAAAA :d0 52 theMovie previewTime previewDuration)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmoviepostertime, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator moveq-word-to-d0(deftrap ("_GetMoviePosterTime" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 53 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMoviePosterTime" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (posterTime :signed-long))   nil   (:stack-trap #xAAAA :d0 54 theMovie posterTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieSelection" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (selectionTime (:pointer :signed-long)) (selectionDuration (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 55 theMovie selectionTime selectionDuration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMovieSelection" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (selectionTime :signed-long) (selectionDuration :signed-long))   nil   (:stack-trap #xAAAA :d0 56 theMovie selectionTime selectionDuration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieActiveSegment" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (startTime :signed-long) (duration :signed-long))   nil   (:stack-trap #xAAAA :d0 348 theMovie startTime duration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieActiveSegment" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (startTime (:pointer :signed-long)) (duration (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 349 theMovie startTime duration)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmovietime, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieTime" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (currentTime (:pointer :timerecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 57 theMovie currentTime)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMovieTime" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (newtime (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 60 theMovie newtime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMovieTimeValue" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (newtime :signed-long))   nil   (:stack-trap #xAAAA :d0 61 theMovie newtime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieUserData" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:pointer :userdatarecord))   (:stack-trap #xAAAA :d0 62 theMovie)); $ENDC; ; ************************; * Track/Media finding routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieTrackCount" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 63 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMovieTrack" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (trackID :signed-long))   (:stack (:pointer :trackrecord))   (:stack-trap #xAAAA :d0 64 theMovie trackID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieIndTrack" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (index :signed-long))   (:stack (:pointer :trackrecord))   (:stack-trap #xAAAA :d0 279 theMovie index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieIndTrackType" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (index :signed-long) (trackType :ostype) (flags :signed-long))   (:stack (:pointer :trackrecord))   (:stack-trap #xAAAA :d0 520 theMovie index trackType flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackID" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 295 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackMovie" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:pointer :movierecord))   (:stack-trap #xAAAA :d0 208 theTrack)); $ENDC; ; ************************; * Track creation routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovieTrack" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (width :signed-long) (height :signed-long) (trackVolume :signed-integer))   (:stack (:pointer :trackrecord))   (:stack-trap #xAAAA :d0 392 theMovie width height trackVolume)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DisposeMovieTrack" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   nil   (:stack-trap #xAAAA :d0 66 theTrack)); $ENDC; ; ************************; * Track State routines; *************************; ; $IFC NOT GENERATINGCFM;; For trap _gettrackcreationtime, using function return type from C header. Pascal used :signed-long, C uses :unsigned-long;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackCreationTime" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :unsigned-long)   (:stack-trap #xAAAA :d0 67 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _gettrackmodificationtime, using function return type from C header. Pascal used :signed-long, C uses :unsigned-long;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackModificationTime" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :unsigned-long)   (:stack-trap #xAAAA :d0 68 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackEnabled" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :boolean)   (:stack-trap #xAAAA :d0 69 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetTrackEnabled" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (isEnabled :boolean))   nil   (:stack-trap #xAAAA :d0 70 theTrack isEnabled)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackUsage" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 71 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetTrackUsage" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (usage :signed-long))   nil   (:stack-trap #xAAAA :d0 72 theTrack usage)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _gettrackduration, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackDuration" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 75 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _gettrackoffset, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackOffset" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 76 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetTrackOffset" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (movieOffsetTime :signed-long))   nil   (:stack-trap #xAAAA :d0 77 theTrack movieOffsetTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackLayer" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 80 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetTrackLayer" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (layer :signed-integer))   nil   (:stack-trap #xAAAA :d0 81 theTrack layer)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackAlternate" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:pointer :trackrecord))   (:stack-trap #xAAAA :d0 82 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetTrackAlternate" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (alternateT (:pointer :trackrecord)))   nil   (:stack-trap #xAAAA :d0 83 theTrack alternateT)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetAutoTrackAlternatesEnabled" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (enable :boolean))   nil   (:stack-trap #xAAAA :d0 350 theMovie enable)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SelectMovieAlternates" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 351 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackVolume" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 84 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetTrackVolume" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (volume :signed-integer))   nil   (:stack-trap #xAAAA :d0 85 theTrack volume)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackMatrix" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (matrix (:pointer :matrixrecord)))   nil   (:stack-trap #xAAAA :d0 86 theTrack matrix)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetTrackMatrix" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (matrix (:pointer :matrixrecord)))   nil   (:stack-trap #xAAAA :d0 87 theTrack matrix)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackDimensions" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (width (:pointer :signed-long)) (height (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 93 theTrack width height)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetTrackDimensions" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (width :signed-long) (height :signed-long))   nil   (:stack-trap #xAAAA :d0 94 theTrack width height)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackUserData" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:pointer :userdatarecord))   (:stack-trap #xAAAA :d0 95 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackDisplayMatrix" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (matrix (:pointer :matrixrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 611 theTrack matrix)); $ENDC; ; ************************; * get Media routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewTrackMedia" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (mediaType :ostype) (TimeScale :signed-long) (dataRef :handle) (dataRefType :ostype))   (:stack (:pointer :mediarecord))   (:stack-trap #xAAAA :d0 398 theTrack mediaType TimeScale dataRef dataRefType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DisposeTrackMedia" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   nil   (:stack-trap #xAAAA :d0 97 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetTrackMedia" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:pointer :mediarecord))   (:stack-trap #xAAAA :d0 98 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaTrack" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack (:pointer :trackrecord))   (:stack-trap #xAAAA :d0 197 theMedia)); $ENDC; ; ************************; * Media State routines; *************************; ; $IFC NOT GENERATINGCFM;; For trap _getmediacreationtime, using function return type from C header. Pascal used :signed-long, C uses :unsigned-long;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaCreationTime" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :unsigned-long)   (:stack-trap #xAAAA :d0 102 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmediamodificationtime, using function return type from C header. Pascal used :signed-long, C uses :unsigned-long;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaModificationTime" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :unsigned-long)   (:stack-trap #xAAAA :d0 103 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmediatimescale, using function return type from C header. Pascal used :signed-long, C uses :timescale;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaTimeScale" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :timescale)   (:stack-trap #xAAAA :d0 104 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMediaTimeScale" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (TimeScale :signed-long))   nil   (:stack-trap #xAAAA :d0 105 theMedia TimeScale)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getmediaduration, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaDuration" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 106 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaLanguage" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 107 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMediaLanguage" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (language :signed-integer))   nil   (:stack-trap #xAAAA :d0 108 theMedia language)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaQuality" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 109 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetMediaQuality" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (quality :signed-integer))   nil   (:stack-trap #xAAAA :d0 110 theMedia quality)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaHandlerDescription" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (mediaType (:pointer :ostype)) (creatorName (:pointer (:string 255))) (creatorManufacturer (:pointer :ostype)))   nil   (:stack-trap #xAAAA :d0 111 theMedia mediaType creatorName creatorManufacturer)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaUserData" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack (:pointer :userdatarecord))   (:stack-trap #xAAAA :d0 112 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaInputMap" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (inputMap (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 585 theMedia inputMap)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaInputMap" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (inputMap :handle))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 586 theMedia inputMap)); $ENDC; ; ************************; * Media Handler routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaHandler" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack (:pointer :componentinstancerecord))   (:stack-trap #xAAAA :d0 113 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaHandler" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (mH (:pointer :componentrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 400 theMedia mH)); $ENDC; ; ************************; * Media's Data routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_BeginMediaEdits" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 114 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_EndMediaEdits" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 115 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaDefaultDataRefIndex" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 480 theMedia index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaDataHandlerDescription" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index :signed-integer) (dhType (:pointer :ostype)) (creatorName (:pointer (:string 255))) (creatorManufacturer (:pointer :ostype)))   nil   (:stack-trap #xAAAA :d0 414 theMedia index dhType creatorName creatorManufacturer)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaDataHandler" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index :signed-integer))   (:stack (:pointer :componentinstancerecord))   (:stack-trap #xAAAA :d0 415 theMedia index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaDataHandler" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index :signed-integer) (dataHandler (:pointer :componentrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 416 theMedia index dataHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetDataHandler" ("QuickTimeLib")) ((dataRef :handle) (dataHandlerSubType :ostype) (flags :signed-long))   (:stack (:pointer :componentrecord))   (:stack-trap #xAAAA :d0 493 dataRef dataHandlerSubType flags)); $ENDC; ; ************************; * Media Sample Table Routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaSampleDescriptionCount" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 119 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaSampleDescription" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index :signed-long) (descH (:handle :sampledescription)))   nil   (:stack-trap #xAAAA :d0 120 theMedia index descH)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaSampleDescription" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index :signed-long) (descH (:handle :sampledescription)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 464 theMedia index descH)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaSampleCount" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 121 theMedia)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SampleNumToMediaTime" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (logicalSampleNum :signed-long) (sampleTime (:pointer :signed-long)) (sampleDuration (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 122 theMedia logicalSampleNum sampleTime sampleDuration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_MediaTimeToSampleNum" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (time :signed-long) (sampleNum (:pointer :signed-long)) (sampleTime (:pointer :signed-long)) (sampleDuration (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 123 theMedia time sampleNum sampleTime sampleDuration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_AddMediaSample" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (dataIn :handle) (inOffset :signed-long) (size :signed-long) (durationPerSample :signed-long) (sampleDescriptionH (:handle :sampledescription)) (numberOfSamples :signed-long) (sampleFlags :signed-integer) (sampleTime (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 124 theMedia dataIn inOffset size durationPerSample sampleDescriptionH numberOfSamples sampleFlags sampleTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_AddMediaSampleReference" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (dataOffset :signed-long) (size :signed-long) (durationPerSample :signed-long) (sampleDescriptionH (:handle :sampledescription)) (numberOfSamples :signed-long) (sampleFlags :signed-integer) (sampleTime (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 125 theMedia dataOffset size durationPerSample sampleDescriptionH numberOfSamples sampleFlags sampleTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AddMediaSampleReferences" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (sampleDescriptionH (:handle :sampledescription)) (numberOfSamples :signed-long) (sampleRefs (:pointer :samplereferencerecord)) (sampleTime (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 503 theMedia sampleDescriptionH numberOfSamples sampleRefs sampleTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaSample" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (dataOut :handle) (maxSizeToGrow :signed-long) (size (:pointer :signed-long)) (time :signed-long) (sampleTime (:pointer :signed-long)) (durationPerSample (:pointer :signed-long)) (sampleDescriptionH (:handle :sampledescription)) (sampleDescriptionIndex (:pointer :signed-long)) (maxNumberOfSamples :signed-long) (numberOfSamples (:pointer :signed-long)) (sampleFlags (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 126 theMedia dataOut maxSizeToGrow size time sampleTime durationPerSample sampleDescriptionH sampleDescriptionIndex maxNumberOfSamples numberOfSamples sampleFlags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMediaSampleReference" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (dataOffset (:pointer :signed-long)) (size (:pointer :signed-long)) (time :signed-long) (sampleTime (:pointer :signed-long)) (durationPerSample (:pointer :signed-long)) (sampleDescriptionH (:handle :sampledescription)) (sampleDescriptionIndex (:pointer :signed-long)) (maxNumberOfSamples :signed-long) (numberOfSamples (:pointer :signed-long)) (sampleFlags (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 127 theMedia dataOffset size time sampleTime durationPerSample sampleDescriptionH sampleDescriptionIndex maxNumberOfSamples numberOfSamples sampleFlags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaSampleReferences" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (time :signed-long) (sampleTime (:pointer :signed-long)) (sampleDescriptionH (:handle :sampledescription)) (sampleDescriptionIndex (:pointer :signed-long)) (maxNumberOfEntries :signed-long) (actualNumberofEntries (:pointer :signed-long)) (sampleRefs (:pointer :samplereferencerecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 565 theMedia time sampleTime sampleDescriptionH sampleDescriptionIndex maxNumberOfEntries actualNumberofEntries sampleRefs)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaPreferredChunkSize" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (maxChunkSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 504 theMedia maxChunkSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaPreferredChunkSize" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (maxChunkSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 505 theMedia maxChunkSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaShadowSync" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (frameDiffSampleNum :signed-long) (syncSampleNum :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 289 theMedia frameDiffSampleNum syncSampleNum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaShadowSync" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (frameDiffSampleNum :signed-long) (syncSampleNum (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 290 theMedia frameDiffSampleNum syncSampleNum)); $ENDC; ; ************************; * Editing Routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_InsertMediaIntoTrack" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (trackStart :signed-long) (mediaTime :signed-long) (mediaDuration :signed-long) (mediaRate :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 387 theTrack trackStart mediaTime mediaDuration mediaRate)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_InsertTrackSegment" ("QuickTimeLib")) ((srcTrack (:pointer :trackrecord)) (dstTrack (:pointer :trackrecord)) (srcIn :signed-long) (srcDuration :signed-long) (dstIn :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 133 srcTrack dstTrack srcIn srcDuration dstIn)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_InsertMovieSegment" ("QuickTimeLib")) ((srcMovie (:pointer :movierecord)) (dstMovie (:pointer :movierecord)) (srcIn :signed-long) (srcDuration :signed-long) (dstIn :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 134 srcMovie dstMovie srcIn srcDuration dstIn)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_InsertEmptyTrackSegment" ("QuickTimeLib")) ((dstTrack (:pointer :trackrecord)) (dstIn :signed-long) (dstDuration :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 135 dstTrack dstIn dstDuration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_InsertEmptyMovieSegment" ("QuickTimeLib")) ((dstMovie (:pointer :movierecord)) (dstIn :signed-long) (dstDuration :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 136 dstMovie dstIn dstDuration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DeleteTrackSegment" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (startTime :signed-long) (duration :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 137 theTrack startTime duration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DeleteMovieSegment" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (startTime :signed-long) (duration :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 138 theMovie startTime duration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ScaleTrackSegment" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (startTime :signed-long) (oldDuration :signed-long) (newDuration :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 139 theTrack startTime oldDuration newDuration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ScaleMovieSegment" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (startTime :signed-long) (oldDuration :signed-long) (newDuration :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 140 theMovie startTime oldDuration newDuration)); $ENDC; ; ************************; * Hi-level Editing Routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_CutMovieSelection" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:pointer :movierecord))   (:stack-trap #xAAAA :d0 141 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_CopyMovieSelection" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:pointer :movierecord))   (:stack-trap #xAAAA :d0 142 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_PasteMovieSelection" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (src (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 143 theMovie src)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AddMovieSelection" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (src (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 338 theMovie src)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ClearMovieSelection" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 225 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_PasteHandleIntoMovie" ("QuickTimeLib")) ((h :handle) (handleType :ostype) (theMovie (:pointer :movierecord)) (flags :signed-long) (userComp (:pointer :componentinstancerecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 203 h handleType theMovie flags userComp)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_PutMovieIntoTypedHandle" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (targetTrack (:pointer :trackrecord)) (handleType :ostype) (publicMovie :handle) (start :signed-long) (dur :signed-long) (flags :signed-long) (userComp (:pointer :componentinstancerecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 461 theMovie targetTrack handleType publicMovie start dur flags userComp)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_IsScrapMovie" ("QuickTimeLib")) ((targetTrack (:pointer :trackrecord)))   (:stack (:pointer :componentrecord))   (:stack-trap #xAAAA :d0 204 targetTrack)); $ENDC; ; ************************; * Middle-level Editing Routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_CopyTrackSettings" ("QuickTimeLib")) ((srcTrack (:pointer :trackrecord)) (dstTrack (:pointer :trackrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 339 srcTrack dstTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_CopyMovieSettings" ("QuickTimeLib")) ((srcMovie (:pointer :movierecord)) (dstMovie (:pointer :movierecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 340 srcMovie dstMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_AddEmptyTrackToMovie" ("QuickTimeLib")) ((srcTrack (:pointer :trackrecord)) (dstMovie (:pointer :movierecord)) (dataRef :handle) (dataRefType :ostype) (dstTrack (:pointer (:pointer :trackrecord))))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 116 srcTrack dstMovie dataRef dataRefType dstTrack)); $ENDC; ; ************************; * movie & track edit state routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovieEditState" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack (:pointer :movieeditstaterecord))   (:stack-trap #xAAAA :d0 260 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_UseMovieEditState" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (toState (:pointer :movieeditstaterecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 261 theMovie toState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeMovieEditState" ("QuickTimeLib")) ((state (:pointer :movieeditstaterecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 262 state)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewTrackEditState" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack (:pointer :trackeditstaterecord))   (:stack-trap #xAAAA :d0 263 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_UseTrackEditState" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (state (:pointer :trackeditstaterecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 264 theTrack state)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeTrackEditState" ("QuickTimeLib")) ((state (:pointer :trackeditstaterecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 265 state)); $ENDC; ; ************************; * track reference routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AddTrackReference" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (refTrack (:pointer :trackrecord)) (refType :ostype) (addedIndex (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 496 theTrack refTrack refType addedIndex)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DeleteTrackReference" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (refType :ostype) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 497 theTrack refType index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTrackReference" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (refTrack (:pointer :trackrecord)) (refType :ostype) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 498 theTrack refTrack refType index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackReference" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (refType :ostype) (index :signed-long))   (:stack (:pointer :trackrecord))   (:stack-trap #xAAAA :d0 499 theTrack refType index)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _getnexttrackreferencetype, using function return type from C header. Pascal used :signed-long, C uses :ostype;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetNextTrackReferenceType" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (refType :ostype))   (:stack :ostype)   (:stack-trap #xAAAA :d0 500 theTrack refType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackReferenceCount" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (refType :ostype))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 501 theTrack refType)); $ENDC; ; ************************; * high level file conversion routines; *************************; ; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ConvertFileToMovieFile" ("QuickTimeLib")) ((inputFile (:pointer :fsspec)) (outputFile (:pointer :fsspec)) (creator :ostype) (scriptTag :signed-integer) (resID (:pointer :signed-integer)) (flags :signed-long) (userComp (:pointer :componentinstancerecord)) (proc :pointer) (refCon :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 459 inputFile outputFile creator scriptTag resID flags userComp proc refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ConvertMovieToFile" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (onlyTrack (:pointer :trackrecord)) (outputFile (:pointer :fsspec)) (fileType :ostype) (creator :ostype) (scriptTag :signed-integer) (resID (:pointer :signed-integer)) (flags :signed-long) (userComp (:pointer :componentinstancerecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 460 theMovie onlyTrack outputFile fileType creator scriptTag resID flags userComp)); $ENDC; ; ************************; * Movie Timebase Conversion Routines; *************************; ; $IFC NOT GENERATINGCFM;; For trap _tracktimetomediatime, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator put-a-constant-word-in-d0(deftrap ("_TrackTimeToMediaTime" ("QuickTimeLib")) ((value :signed-long) (theTrack (:pointer :trackrecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 150 value theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _gettrackeditrate, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackEditRate" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (atTime :signed-long))   (:stack :fixed)   (:stack-trap #xAAAA :d0 291 theTrack atTime)); $ENDC; ; ************************; * Miscellaneous Routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieDataSize" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (startTime :signed-long) (duration :signed-long))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 152 theMovie startTime duration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackDataSize" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (startTime :signed-long) (duration :signed-long))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 329 theTrack startTime duration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaDataSize" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (startTime :signed-long) (duration :signed-long))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 153 theMedia startTime duration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_PtInMovie" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (pt :point))   (:stack :boolean)   (:stack-trap #xAAAA :d0 154 theMovie pt)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_PtInTrack" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (pt :point))   (:stack :boolean)   (:stack-trap #xAAAA :d0 155 theTrack pt)); $ENDC; ; ************************; * Group Selection Routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieLanguage" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (language :signed-long))   nil   (:stack-trap #xAAAA :d0 156 theMovie language)); $ENDC; ; ************************; * User Data; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetUserData" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (data :handle) (udType :ostype) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 158 theUserData data udType index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AddUserData" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (data :handle) (udType :ostype))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 159 theUserData data udType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_RemoveUserData" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (udType :ostype) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 160 theUserData udType index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_CountUserDataType" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (udType :ostype))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 331 theUserData udType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetNextUserDataType" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (udType :ostype))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 421 theUserData udType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetUserDataItem" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (data :pointer) (size :signed-long) (udType :ostype) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 294 theUserData data size udType index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetUserDataItem" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (data :pointer) (size :signed-long) (udType :ostype) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 302 theUserData data size udType index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AddUserDataText" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (data :handle) (udType :ostype) (index :signed-long) (itlRegionTag :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 332 theUserData data udType index itlRegionTag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetUserDataText" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (data :handle) (udType :ostype) (index :signed-long) (itlRegionTag :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 333 theUserData data udType index itlRegionTag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_RemoveUserDataText" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (udType :ostype) (index :signed-long) (itlRegionTag :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 334 theUserData udType index itlRegionTag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewUserData" ("QuickTimeLib")) ((theUserData (:pointer (:pointer :userdatarecord))))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 303 theUserData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeUserData" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 304 theUserData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewUserDataFromHandle" ("QuickTimeLib")) ((h :handle) (theUserData (:pointer (:pointer :userdatarecord))))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 305 h theUserData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_PutUserDataIntoHandle" ("QuickTimeLib")) ((theUserData (:pointer :userdatarecord)) (h :handle))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 306 theUserData h)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaNextInterestingTime" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (interestingTimeFlags :signed-integer) (time :signed-long) (rate :signed-long) (interestingTime (:pointer :signed-long)) (interestingDuration (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 365 theMedia interestingTimeFlags time rate interestingTime interestingDuration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackNextInterestingTime" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (interestingTimeFlags :signed-integer) (time :signed-long) (rate :signed-long) (interestingTime (:pointer :signed-long)) (interestingDuration (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 226 theTrack interestingTimeFlags time rate interestingTime interestingDuration)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieNextInterestingTime" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (interestingTimeFlags :signed-integer) (numMediaTypes :signed-integer) (whichMediaTypes (:pointer :ostype)) (time :signed-long) (rate :signed-long) (interestingTime (:pointer :signed-long)) (interestingDuration (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 270 theMovie interestingTimeFlags numMediaTypes whichMediaTypes time rate interestingTime interestingDuration)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_CreateMovieFile" ("QuickTimeLib")) ((fileSpec (:pointer :fsspec)) (creator :ostype) (scriptTag :signed-integer) (createMovieFileFlags :signed-long) (resRefNum (:pointer :signed-integer)) (newmovie (:pointer (:pointer :movierecord))))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 401 fileSpec creator scriptTag createMovieFileFlags resRefNum newmovie)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_OpenMovieFile" ("QuickTimeLib")) ((fileSpec (:pointer :fsspec)) (resRefNum (:pointer :signed-integer)) (permission :signed-byte))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 402 fileSpec resRefNum permission)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_CloseMovieFile" ("QuickTimeLib")) ((resRefNum :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 213 resRefNum)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DeleteMovieFile" ("QuickTimeLib")) ((fileSpec (:pointer :fsspec)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 373 fileSpec)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovieFromFile" ("QuickTimeLib")) ((theMovie (:pointer (:pointer :movierecord))) (resRefNum :signed-integer) (resId (:pointer :signed-integer)) (resName (:pointer (:string 255))) (newMovieFlags :signed-integer) (dataRefWasChanged (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 240 theMovie resRefNum resId resName newMovieFlags dataRefWasChanged)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovieFromHandle" ("QuickTimeLib")) ((theMovie (:pointer (:pointer :movierecord))) (h :handle) (newMovieFlags :signed-integer) (dataRefWasChanged (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 241 theMovie h newMovieFlags dataRefWasChanged)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovieFromDataFork" ("QuickTimeLib")) ((theMovie (:pointer (:pointer :movierecord))) (fRefNum :signed-integer) (fileOffset :signed-long) (newMovieFlags :signed-integer) (dataRefWasChanged (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 435 theMovie fRefNum fileOffset newMovieFlags dataRefWasChanged)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovieFromUserProc" ("QuickTimeLib")) ((m (:pointer (:pointer :movierecord))) (flags :signed-integer) (dataRefWasChanged (:pointer :boolean)) (getProc :pointer) (refCon :pointer) (defaultDataRef :handle) (dataRefType :ostype))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 492 m flags dataRefWasChanged getProc refCon defaultDataRef dataRefType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovieFromDataRef" ("QuickTimeLib")) ((m (:pointer (:pointer :movierecord))) (flags :signed-integer) (id (:pointer :signed-integer)) (dataRef :handle) (dataRefType :ostype))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 544 m flags id dataRef dataRefType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AddMovieResource" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (resRefNum :signed-integer) (resId (:pointer :signed-integer)) (resName (:string 255)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 215 theMovie resRefNum resId resName)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_UpdateMovieResource" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (resRefNum :signed-integer) (resId :signed-integer) (resName (:string 255)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 216 theMovie resRefNum resId resName)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_RemoveMovieResource" ("QuickTimeLib")) ((resRefNum :signed-integer) (resId :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 374 resRefNum resId)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_HasMovieChanged" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   (:stack :boolean)   (:stack-trap #xAAAA :d0 217 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ClearMovieChanged" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)))   nil   (:stack-trap #xAAAA :d0 275 theMovie)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieDefaultDataRef" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (dataRef :handle) (dataRefType :ostype))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 449 theMovie dataRef dataRefType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieDefaultDataRef" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (dataRef (:pointer :handle)) (dataRefType (:pointer :ostype)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 466 theMovie dataRef dataRefType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieColorTable" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (ctab (:handle :colortable)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 517 theMovie ctab)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieColorTable" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (ctab (:pointer (:handle :colortable))))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 518 theMovie ctab)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_FlattenMovie" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (movieFlattenFlags :signed-long) (theFile (:pointer :fsspec)) (creator :ostype) (scriptTag :signed-integer) (createMovieFileFlags :signed-long) (resId (:pointer :signed-integer)) (resName (:string 255)))   nil   (:stack-trap #xAAAA :d0 411 theMovie movieFlattenFlags theFile creator scriptTag createMovieFileFlags resId resName)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_FlattenMovieData" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (movieFlattenFlags :signed-long) (theFile (:pointer :fsspec)) (creator :ostype) (scriptTag :signed-integer) (createMovieFileFlags :signed-long))   (:stack (:pointer :movierecord))   (:stack-trap #xAAAA :d0 412 theMovie movieFlattenFlags theFile creator scriptTag createMovieFileFlags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieProgressProc" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (p :pointer) (refcon :signed-long))   nil   (:stack-trap #xAAAA :d0 410 theMovie p refcon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_MovieSearchText" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (text :pointer) (size :signed-long) (searchFlags :signed-long) (searchTrack (:pointer (:pointer :trackrecord))) (searchTime (:pointer :signed-long)) (searchOffset (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 519 theMovie text size searchFlags searchTrack searchTime searchOffset)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetPosterBox" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (boxRect (:pointer :rect)))   nil   (:stack-trap #xAAAA :d0 367 theMovie boxRect)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetPosterBox" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (boxRect (:pointer :rect)))   nil   (:stack-trap #xAAAA :d0 368 theMovie boxRect)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieSegmentDisplayBoundsRgn" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (time :signed-long) (duration :signed-long))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 364 theMovie time duration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackSegmentDisplayBoundsRgn" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (time :signed-long) (duration :signed-long))   (:stack (:handle :region))   (:stack-trap #xAAAA :d0 363 theTrack time duration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMovieCoverProcs" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (uncoverProc :pointer) (coverProc :pointer) (refcon :signed-long))   nil   (:stack-trap #xAAAA :d0 377 theMovie uncoverProc coverProc refcon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieCoverProcs" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (uncoverProc (:pointer :pointer)) (coverProc (:pointer :pointer)) (refcon (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 477 theMovie uncoverProc coverProc refcon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackStatus" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 370 theTrack)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMovieStatus" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (firstProblemTrack (:pointer (:pointer :trackrecord))))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 371 theMovie firstProblemTrack)); $ENDC; ; ***; 	Movie Controller support routines; ***; ; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovieController" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (movieRect (:pointer :rect)) (someFlags :signed-long))   (:stack (:pointer :componentinstancerecord))   (:stack-trap #xAAAA :d0 394 theMovie movieRect someFlags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeMovieController" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   nil   (:stack-trap #xAAAA :d0 395 mc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ShowMovieInformation" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (filterProc :pointer) (refCon :signed-long))   nil   (:stack-trap #xAAAA :d0 521 theMovie filterProc refCon)); $ENDC; ; ****; 	Scrap routines; ****; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_PutMovieOnScrap" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (movieScrapFlags :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 396 theMovie movieScrapFlags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewMovieFromScrap" ("QuickTimeLib")) ((newMovieFlags :signed-long))   (:stack (:pointer :movierecord))   (:stack-trap #xAAAA :d0 397 newMovieFlags)); $ENDC; ; ****; 	DataRef routines; ****; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaDataRef" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index :signed-integer) (dataRef (:pointer :handle)) (dataRefType (:pointer :ostype)) (dataRefAttributes (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 407 theMedia index dataRef dataRefType dataRefAttributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaDataRef" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index :signed-integer) (dataRef :handle) (dataRefType :ostype))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 457 theMedia index dataRef dataRefType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaDataRefAttributes" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index :signed-integer) (dataRefAttributes :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 458 theMedia index dataRefAttributes)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AddMediaDataRef" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (index (:pointer :signed-integer)) (dataRef :handle) (dataRefType :ostype))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 408 theMedia index dataRef dataRefType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaDataRefCount" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (count (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 409 theMedia count)); $ENDC; ; ****; 	Playback hint routines; ****; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMoviePlayHints" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (flags :signed-long) (flagsMask :signed-long))   nil   (:stack-trap #xAAAA :d0 417 theMovie flags flagsMask)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaPlayHints" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (flags :signed-long) (flagsMask :signed-long))   nil   (:stack-trap #xAAAA :d0 418 theMedia flags flagsMask)); $ENDC; ; ****; 	Load time track hints; ****; (defconstant $preloadAlways #x1)(defconstant $preloadOnlyIfEnabled #x2); $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTrackLoadSettings" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (preloadTime :signed-long) (preloadDuration :signed-long) (preloadFlags :signed-long) (defaultHints :signed-long))   nil   (:stack-trap #xAAAA :d0 483 theTrack preloadTime preloadDuration preloadFlags defaultHints)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTrackLoadSettings" ("QuickTimeLib")) ((theTrack (:pointer :trackrecord)) (preloadTime (:pointer :signed-long)) (preloadDuration (:pointer :signed-long)) (preloadFlags (:pointer :signed-long)) (defaultHints (:pointer :signed-long)))   nil   (:stack-trap #xAAAA :d0 484 theTrack preloadTime preloadDuration preloadFlags defaultHints)); $ENDC; ; ****; 	Big screen TV; ****; (defconstant $fullScreenHideCursor #x1)(defconstant $fullScreenAllowEvents #x2)(defconstant $fullScreenDontChangeMenuBar #x4)(defconstant $fullScreenPreflightSize #x8); $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_BeginFullScreen" ("QuickTimeLib")) ((restoreState (:pointer :pointer)) (whichGD (:handle :gdevice)) (desiredWidth (:pointer :signed-integer)) (desiredHeight (:pointer :signed-integer)) (newWindow (:pointer (:pointer :grafport))) (eraseColor (:pointer :rgbcolor)) (flags :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 563 restoreState whichGD desiredWidth desiredHeight newWindow eraseColor flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_EndFullScreen" ("QuickTimeLib")) ((fullState :pointer) (flags :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 564 fullState flags)); $ENDC; ; ****; 	Sprite Toolbox; ****; (defconstant $kBackgroundSpriteLayerNum 32767);    Sprite Properties (defconstant $kSpritePropertyMatrix 1)(defconstant $kSpritePropertyImageDescription 2)(defconstant $kSpritePropertyImageDataPtr 3)(defconstant $kSpritePropertyVisible 4)(defconstant $kSpritePropertyLayer 5)(defconstant $kSpritePropertyGraphicsMode 6)(defconstant $kSpritePropertyImageIndex 100)(defconstant $kSpriteTrackPropertyBackgroundColor 101)(defconstant $kSpriteTrackPropertyOffscreenBitDepth 102)(defconstant $kSpriteTrackPropertySampleFormat 103);   flagsIn for SpriteWorldIdle (defconstant $kOnlyDrawToSpriteWorld #x1);   flagsOut for SpriteWorldIdle (defconstant $kSpriteWorldDidDraw #x1);   flags for sprite track sample format (defconstant $kKeyFrameAndSingleOverride #x2)(defconstant $kKeyFrameAndAllOverrides #x4); $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_newSpriteWorld" ("QuickTimeLib")) ((newSpriteWorld (:pointer (:pointer :spriteworldrecord))) (destination (:pointer :cgrafport)) (spriteLayer (:pointer :cgrafport)) (backgroundColor (:pointer :rgbcolor)) (background (:pointer :cgrafport)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 569 newSpriteWorld destination spriteLayer backgroundColor background)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeSpriteWorld" ("QuickTimeLib")) ((theSpriteWorld (:pointer :spriteworldrecord)))   nil   (:stack-trap #xAAAA :d0 570 theSpriteWorld)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetSpriteWorldClip" ("QuickTimeLib")) ((theSpriteWorld (:pointer :spriteworldrecord)) (clipRgn (:handle :region)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 571 theSpriteWorld clipRgn)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetSpriteWorldMatrix" ("QuickTimeLib")) ((theSpriteWorld (:pointer :spriteworldrecord)) (matrix (:pointer :matrixrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 572 theSpriteWorld matrix)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SpriteWorldIdle" ("QuickTimeLib")) ((theSpriteWorld (:pointer :spriteworldrecord)) (flagsIn :signed-long) (flagsOut (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 573 theSpriteWorld flagsIn flagsOut)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_InvalidateSpriteWorld" ("QuickTimeLib")) ((theSpriteWorld (:pointer :spriteworldrecord)) (invalidArea (:pointer :rect)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 574 theSpriteWorld invalidArea)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SpriteWorldHitTest" ("QuickTimeLib")) ((theSpriteWorld (:pointer :spriteworldrecord)) (flags :signed-long) (loc :point) (spriteHit (:pointer (:pointer :spriterecord))))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 582 theSpriteWorld flags loc spriteHit)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SpriteHitTest" ("QuickTimeLib")) ((theSprite (:pointer :spriterecord)) (flags :signed-long) (loc :point) (wasHit (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 583 theSprite flags loc wasHit)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeAllSprites" ("QuickTimeLib")) ((theSpriteWorld (:pointer :spriteworldrecord)))   nil   (:stack-trap #xAAAA :d0 575 theSpriteWorld)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_newSprite" ("QuickTimeLib")) ((newSprite (:pointer (:pointer :spriterecord))) (itsSpriteWorld (:pointer :spriteworldrecord)) (idh (:handle :imagedescription)) (imageDataPtr :pointer) (matrix (:pointer :matrixrecord)) (visible :boolean) (layer :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 576 newSprite itsSpriteWorld idh imageDataPtr matrix visible layer)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeSprite" ("QuickTimeLib")) ((theSprite (:pointer :spriterecord)))   nil   (:stack-trap #xAAAA :d0 577 theSprite)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_InvalidateSprite" ("QuickTimeLib")) ((theSprite (:pointer :spriterecord)))   nil   (:stack-trap #xAAAA :d0 578 theSprite)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetSpriteProperty" ("QuickTimeLib")) ((theSprite (:pointer :spriterecord)) (propertyType :signed-long) (propertyValue :pointer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 579 theSprite propertyType propertyValue)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetSpriteProperty" ("QuickTimeLib")) ((theSprite (:pointer :spriterecord)) (propertyType :signed-long) (propertyValue :pointer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 580 theSprite propertyType propertyValue)); $ENDC; ; ****; 	QT Atom Data Support; ****; (defconstant $kParentAtomIsContainer 0);   create and dispose QTAtomContainer objects ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTNewAtomContainer" ("QuickTimeLib")) ((atomData (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 524 atomData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTDisposeAtomContainer" ("QuickTimeLib")) ((atomData :handle))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 525 atomData)); $ENDC;   locating nested atoms within QTAtomContainer container ; $IFC NOT GENERATINGCFM;; For trap _qtgetnextchildtype, using function return type from C header. Pascal used :signed-long, C uses :qtatomtype;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTGetNextChildType" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (currentChildType :signed-long))   (:stack :qtatomtype)   (:stack-trap #xAAAA :d0 526 container parentAtom currentChildType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTCountChildrenOfType" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (childType :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 527 container parentAtom childType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTFindChildByIndex" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (atomType :signed-long) (index :signed-integer) (id (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 528 container parentAtom atomType index id)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTFindChildByID" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (atomType :signed-long) (id :signed-long) (index (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 541 container parentAtom atomType id index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTNextChildAnyType" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (currentChild :signed-long) (nextChild (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 512 container parentAtom currentChild nextChild)); $ENDC;   set a leaf atom's data ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTSetAtomData" ("QuickTimeLib")) ((container :handle) (atom :signed-long) (dataSize :signed-long) (atomData :pointer))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 529 container atom dataSize atomData)); $ENDC;   extracting data ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTCopyAtomDataToHandle" ("QuickTimeLib")) ((container :handle) (atom :signed-long) (targetHandle :handle))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 530 container atom targetHandle)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTCopyAtomDataToPtr" ("QuickTimeLib")) ((container :handle) (atom :signed-long) (sizeOrLessOK :boolean) (size :signed-long) (targetPtr :pointer) (actualSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 531 container atom sizeOrLessOK size targetPtr actualSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTGetAtomTypeAndID" ("QuickTimeLib")) ((container :handle) (atom :signed-long) (atomType (:pointer :signed-long)) (id (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 562 container atom atomType id)); $ENDC;   extract a copy of an atom and all of it's children, caller disposes ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTCopyAtom" ("QuickTimeLib")) ((container :handle) (atom :signed-long) (targetContainer (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 532 container atom targetContainer)); $ENDC;   obtaining direct reference to atom data ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTLockContainer" ("QuickTimeLib")) ((container :handle))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 533 container)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTGetAtomDataPtr" ("QuickTimeLib")) ((container :handle) (atom :signed-long) (dataSize (:pointer :signed-long)) (atomData (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 534 container atom dataSize atomData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTUnlockContainer" ("QuickTimeLib")) ((container :handle))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 535 container)); $ENDC; ;  building QTAtomContainer trees;  creates and inserts new atom at specified index, existing atoms at or after index are moved toward end of list;  used for Top-Down tree creation; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTInsertChild" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (atomType :signed-long) (id :signed-long) (index :signed-integer) (dataSize :signed-long) (data :pointer) (newAtom (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 536 container parentAtom atomType id index dataSize data newAtom)); $ENDC;   inserts children from childrenContainer as children of parentAtom ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTInsertChildren" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (childrenContainer :handle))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 537 container parentAtom childrenContainer)); $ENDC;   destruction ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTRemoveAtom" ("QuickTimeLib")) ((container :handle) (atom :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 538 container atom)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTRemoveChildren" ("QuickTimeLib")) ((container :handle) (atom :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 539 container atom)); $ENDC;   replacement must be same type as target ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTReplaceAtom" ("QuickTimeLib")) ((targetContainer :handle) (targetAtom :signed-long) (replacementContainer :handle) (replacementAtom :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 540 targetContainer targetAtom replacementContainer replacementAtom)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTSwapAtoms" ("QuickTimeLib")) ((container :handle) (atom1 :signed-long) (atom2 :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 511 container atom1 atom2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QTSetAtomID" ("QuickTimeLib")) ((container :handle) (atom :signed-long) (newID :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 561 container atom newID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetMediaPropertyAtom" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (propertyAtom :handle))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 558 theMedia propertyAtom)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetMediaPropertyAtom" ("QuickTimeLib")) ((theMedia (:pointer :mediarecord)) (propertyAtom (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 559 theMedia propertyAtom)); $ENDC; ; ****; 	QT International Text Atom Support; ****; (defconstant $ITextRemoveEverythingBut #x0)(defconstant $ITextRemoveLeaveSuggestedAlternate #x2)(defconstant $kITextAtomType :|itxt|)(defconstant $kITextStringAtomType :|text|); $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ITextAddString" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (theRegionCode :signed-integer) (theString (:string 255)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 634 container parentAtom theRegionCode theString)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ITextRemoveString" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (theRegionCode :signed-integer) (flags :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 635 container parentAtom theRegionCode flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ITextGetString" ("QuickTimeLib")) ((container :handle) (parentAtom :signed-long) (requestedRegion :signed-integer) (foundRegion (:pointer :signed-integer)) (theString (:pointer (:string 255))))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 636 container parentAtom requestedRegion foundRegion theString)); $ENDC; ; ************************; * modifier track types; *************************; (defconstant $kTrackModifierInput #x696E)       ;   is really 'in' (defconstant $kTrackModifierType #x7479)        ;   is really 'ty' (defconstant $kTrackModifierReference :|ssrc|)(defconstant $kTrackModifierObjectID :|obid|)(defconstant $kTrackModifierInputName :|name|)(defconstant $kTrackModifierTypeMatrix 1)(defconstant $kTrackModifierTypeClip 2)(defconstant $kTrackModifierTypeGraphicsMode 5)(defconstant $kTrackModifierTypeVolume 3)(defconstant $kTrackModifierTypeBalance 4)(defconstant $kTrackModifierTypeSpriteImage :|vide|)(defconstant $kTrackModifierObjectMatrix 6)(defconstant $kTrackModifierObjectGraphicsMode 7)(defconstant $kTrackModifierType3d4x4Matrix 8)(defconstant $kTrackModifierCameraData 9)(def-mactype :modifiertrackgraphicsmoderecordptr (find-mactype '(:pointer :modifiertrackgraphicsmoderecord)))(defrecord ModifierTrackGraphicsModeRecord    (graphicsMode :signed-long)   (opColor :rgbcolor)   ); ; ************************; * tween track types; *************************; (defconstant $kTweenTypeShort 1)(defconstant $kTweenTypeLong 2)(defconstant $kTweenTypeFixed 3)(defconstant $kTweenTypePoint 4)(defconstant $kTweenTypeQDRect 5)(defconstant $kTweenTypeQDRegion 6)(defconstant $kTweenTypeMatrix 7)(defconstant $kTweenTypeRGBColor 8)(defconstant $kTweenTypeGraphicsModeWithRGBColor 9)(defconstant $kTweenType3dScale :|3sca|)(defconstant $kTweenType3dTranslate :|3tra|)(defconstant $kTweenType3dRotate :|3rot|)(defconstant $kTweenType3dRotateAboutPoint :|3rap|)(defconstant $kTweenType3dRotateAboutAxis :|3rax|)(defconstant $kTweenType3dQuaternion :|3qua|)(defconstant $kTweenType3dMatrix :|3mat|)(defconstant $kTweenType3dCameraData :|3cam|)(defconstant $kTweenEntry :|twen|)(defconstant $kTweenData :|data|)(defconstant $kTweenType :|twnt|)(defconstant $kTweenStartOffset :|twst|)(defconstant $kTweenDuration :|twdu|)(defconstant $kTween3dInitialCondition :|icnd|)(defconstant $kTweenInterpolationStyle :|isty|)(defconstant $kInputMapSubInputID :|subi|)(defconstant $kTweenRegionData :|qdrg|)(defconstant $internalComponentErr -2070)(defconstant $notImplementedMusicOSErr -2071)(defconstant $cantSendToSynthesizerOSErr -2072)(defconstant $cantReceiveFromSynthesizerOSErr -2073)(defconstant $illegalVoiceAllocationOSErr -2074)(defconstant $illegalPartOSErr -2075)(defconstant $illegalChannelOSErr -2076)(defconstant $illegalKnobOSErr -2077)(defconstant $illegalKnobValueOSErr -2078)(defconstant $illegalInstrumentOSErr -2079)(defconstant $illegalControllerOSErr -2080)(defconstant $midiManagerAbsentOSErr -2081)(defconstant $synthesizerNotRespondingOSErr -2082)(defconstant $synthesizerOSErr -2083)(defconstant $illegalNoteChannelOSErr -2084)(defconstant $noteChannelNotAllocatedOSErr -2085)(defconstant $tunePlayerFullOSErr -2086)(defconstant $tuneParseOSErr -2087); ; ************************; * Video Media routines; *************************; (defconstant $videoFlagDontLeanAhead #x1);   use these two routines at your own peril ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_VideoMediaResetStatistics" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh ((+ (ash 0 16) 261) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_VideoMediaGetStatistics" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh ((+ (ash 0 16) 262) :signed-longint))); $ENDC; ; ************************; * Text Media routines; *************************; ;   Return displayFlags for TextProc  (defconstant $txtProcDefaultDisplay 0)          ;  	Use the media's default (defconstant $txtProcDontDisplay 1)             ;  	Don't display the text (defconstant $txtProcDoDisplay 2)               ;  	Do display the text ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_TextMediaSetTextProc" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (TextProc :pointer) (refcon :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh TextProc refcon ((+ (ash 8 16) 257) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_TextMediaAddTextSample" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (text :pointer) (size :signed-long) (fontNumber :signed-integer) (fontSize :signed-integer) (textFace :signed-byte) (textColor (:pointer :rgbcolor)) (backColor (:pointer :rgbcolor)) (textJustification :signed-integer) (textBox (:pointer :rect)) (displayFlags :signed-long) (scrollDelay :signed-long) (hiliteStart :signed-integer) (hiliteEnd :signed-integer) (rgbHiliteColor (:pointer :rgbcolor)) (duration :signed-long) (sampleTime (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh text size fontNumber fontSize textFace textColor backColor textJustification textBox displayFlags scrollDelay hiliteStart hiliteEnd rgbHiliteColor duration sampleTime ((+ (ash 52 16) 258) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_TextMediaAddTESample" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (hTE (:handle :terec)) (backColor (:pointer :rgbcolor)) (textJustification :signed-integer) (textBox (:pointer :rect)) (displayFlags :signed-long) (scrollDelay :signed-long) (hiliteStart :signed-integer) (hiliteEnd :signed-integer) (rgbHiliteColor (:pointer :rgbcolor)) (duration :signed-long) (sampleTime (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh hTE backColor textJustification textBox displayFlags scrollDelay hiliteStart hiliteEnd rgbHiliteColor duration sampleTime ((+ (ash 38 16) 259) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_TextMediaAddHiliteSample" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (hiliteStart :signed-integer) (hiliteEnd :signed-integer) (rgbHiliteColor (:pointer :rgbcolor)) (duration :signed-long) (sampleTime (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh hiliteStart hiliteEnd rgbHiliteColor duration sampleTime ((+ (ash 16 16) 260) :signed-longint))); $ENDC(defconstant $findTextEdgeOK #x1)               ;   Okay to find text at specified sample time (defconstant $findTextCaseSensitive #x2)        ;   Case sensitive search (defconstant $findTextReverseSearch #x4)        ;   Search from sampleTime backwards (defconstant $findTextWrapAround #x8)           ;   Wrap search when beginning or end of movie is hit (defconstant $findTextUseOffset #x10)           ;   Begin search at the given character offset into sample rather than edge ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_TextMediaFindNextText" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (text :pointer) (size :signed-long) (findFlags :signed-integer) (startTime :signed-long) (foundTime (:pointer :signed-long)) (foundDuration (:pointer :signed-long)) (offset (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh text size findFlags startTime foundTime foundDuration offset ((+ (ash 26 16) 261) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_TextMediaHiliteTextSample" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (sampleTime :signed-long) (hiliteStart :signed-integer) (hiliteEnd :signed-integer) (rgbHiliteColor (:pointer :rgbcolor)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh sampleTime hiliteStart hiliteEnd rgbHiliteColor ((+ (ash 12 16) 262) :signed-longint))); $ENDC(defconstant $dropShadowOffsetType :|drpo|)(defconstant $dropShadowTranslucencyType :|drpt|); $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_TextMediaSetTextSampleData" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (data :pointer) (dataType :ostype))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh data dataType ((+ (ash 8 16) 263) :signed-longint))); $ENDC; ; ************************; * Sprite Media routines; *************************; ;   flags for HitTestSpriteMedia  (defconstant $spriteHitTestBounds #x1)          ;  	point must only be within sprite's bounding box (defconstant $spriteHitTestImage #x2)           ;    point must be within the shape of the sprite's image ;   atom types for sprite media  (defconstant $kSpriteAtomType :|sprt|)(defconstant $kSpriteImagesContainerAtomType :|imct|)(defconstant $kSpriteImageAtomType :|imag|)(defconstant $kSpriteImageDataAtomType :|imda|)(defconstant $kSpriteSharedDataAtomType :|dflt|)(defconstant $kSpriteNameAtomType :|name|); $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_SpriteMediaSetProperty" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (spriteIndex :signed-integer) (propertyType :signed-long) (propertyValue :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh spriteIndex propertyType propertyValue ((+ (ash 10 16) 257) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_SpriteMediaGetProperty" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (spriteIndex :signed-integer) (propertyType :signed-long) (propertyValue :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh spriteIndex propertyType propertyValue ((+ (ash 10 16) 258) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_SpriteMediaHitTestSprites" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (flags :signed-long) (loc :point) (spriteHitIndex (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh flags loc spriteHitIndex ((+ (ash 12 16) 259) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_SpriteMediaCountSprites" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (numSprites (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh numSprites ((+ (ash 4 16) 260) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_SpriteMediaCountImages" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (numImages (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh numImages ((+ (ash 4 16) 261) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_SpriteMediaGetIndImageDescription" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (imageIndex :signed-integer) (imageDescription (:handle :imagedescription)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh imageIndex imageDescription ((+ (ash 6 16) 262) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_SpriteMediaGetDisplayedSampleNumber" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (sampleNum (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh sampleNum ((+ (ash 4 16) 263) :signed-longint))); $ENDC; ; ************************; * 3D Media routines; *************************; ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_Media3DGetNamedObjectList" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (objectList (:pointer :handle)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh objectList ((+ (ash 4 16) 257) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_Media3DGetRendererList" ("QuickTimeLib")) ((mh (:pointer :componentinstancerecord)) (rendererList (:pointer :handle)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mh rendererList ((+ (ash 4 16) 258) :signed-longint))); $ENDC; ; ***************************************; *										*; *  	M O V I E   C O N T R O L L E R		*; *										*; ***************************************; (defconstant $MovieControllerComponentType :|play|)(def-mactype :moviecontroller (find-mactype '(:pointer :componentinstancerecord)))(defconstant $mcActionIdle 1)                   ;   no param (defconstant $mcActionDraw 2)                   ;   param is WindowPtr (defconstant $mcActionActivate 3)               ;   no param (defconstant $mcActionDeactivate 4)             ;   no param (defconstant $mcActionMouseDown 5)              ;   param is pointer to EventRecord (defconstant $mcActionKey 6)                    ;   param is pointer to EventRecord (defconstant $mcActionPlay 8)                   ;   param is Fixed, play rate (defconstant $mcActionGoToTime 12)              ;   param is TimeRecord (defconstant $mcActionSetVolume 14)             ;   param is a short (defconstant $mcActionGetVolume 15)             ;   param is pointer to a short (defconstant $mcActionStep 18)                  ;   param is number of steps (short) (defconstant $mcActionSetLooping 21)            ;   param is Boolean (defconstant $mcActionGetLooping 22)            ;   param is pointer to a Boolean (defconstant $mcActionSetLoopIsPalindrome 23)   ;   param is Boolean (defconstant $mcActionGetLoopIsPalindrome 24)   ;   param is pointer to a Boolean (defconstant $mcActionSetGrowBoxBounds 25)      ;   param is a Rect (defconstant $mcActionControllerSizeChanged 26) ;   no param (defconstant $mcActionSetSelectionBegin 29)     ;   param is TimeRecord (defconstant $mcActionSetSelectionDuration 30)  ;   param is TimeRecord, action only taken on set-duration (defconstant $mcActionSetKeysEnabled 32)        ;   param is Boolean (defconstant $mcActionGetKeysEnabled 33)        ;   param is pointer to Boolean (defconstant $mcActionSetPlaySelection 34)      ;   param is Boolean (defconstant $mcActionGetPlaySelection 35)      ;   param is pointer to Boolean (defconstant $mcActionSetUseBadge 36)           ;   param is Boolean (defconstant $mcActionGetUseBadge 37)           ;   param is pointer to Boolean (defconstant $mcActionSetFlags 38)              ;   param is long of flags (defconstant $mcActionGetFlags 39)              ;   param is pointer to a long of flags (defconstant $mcActionSetPlayEveryFrame 40)     ;   param is Boolean (defconstant $mcActionGetPlayEveryFrame 41)     ;   param is pointer to Boolean (defconstant $mcActionGetPlayRate 42)           ;   param is pointer to Fixed (defconstant $mcActionShowBalloon 43)           ;   param is a pointer to a boolean. set to false to stop balloon (defconstant $mcActionBadgeClick 44)            ;   param is pointer to Boolean. set to false to ignore click (defconstant $mcActionMovieClick 45)            ;   param is pointer to event record. change ÒwhatÓ to nullEvt to kill click (defconstant $mcActionSuspend 46)               ;   no param (defconstant $mcActionResume 47)                ;   no param (defconstant $mcActionSetControllerKeysEnabled 48);   param is Boolean (defconstant $mcActionGetTimeSliderRect 49)     ;   param is pointer to rect (defconstant $mcActionMovieEdited 50)           ;   no param (defconstant $mcActionGetDragEnabled 51)        ;   param is pointer to Boolean (defconstant $mcActionSetDragEnabled 52)        ;   param is Boolean (defconstant $mcActionGetSelectionBegin 53)     ;   param is TimeRecord (defconstant $mcActionGetSelectionDuration 54)  ;   param is TimeRecord (defconstant $mcActionPrerollAndPlay 55)        ;   param is Fixed, play rate (defconstant $mcActionGetCursorSettingEnabled 56);   param is pointer to Boolean (defconstant $mcActionSetCursorSettingEnabled 57);   param is Boolean (defconstant $mcActionSetColorTable 58)         ;   param is CTabHandle (def-mactype :mcaction (find-mactype ':signed-integer))(defconstant $mcFlagSuppressMovieFrame #x1)(defconstant $mcFlagSuppressStepButtons #x2)(defconstant $mcFlagSuppressSpeakerButton #x4)(defconstant $mcFlagsUseWindowPalette #x8)(defconstant $mcFlagsDontInvalidate #x10)(defconstant $mcPositionDontInvalidate #x20)(def-mactype :mcflags (find-mactype ':signed-long))(def-mactype :mcactionfilterprocptr (find-mactype ':pointer));  FUNCTION MCActionFilter(mc: MovieController; VAR action: INTEGER; params: UNIV Ptr): BOOLEAN; (def-mactype :mcactionfilterwithrefconprocptr (find-mactype ':pointer));  FUNCTION MCActionFilterWithRefCon(mc: MovieController; action: INTEGER; params: UNIV Ptr; refCon: LONGINT): BOOLEAN; (def-mactype :mcactionfilterupp (find-mactype ':pointer))(def-mactype :mcactionfilterwithrefconupp (find-mactype ':pointer)); ; 	menu related stuff; (defconstant $mcInfoUndoAvailable #x1)(defconstant $mcInfoCutAvailable #x2)(defconstant $mcInfoCopyAvailable #x4)(defconstant $mcInfoPasteAvailable #x8)(defconstant $mcInfoClearAvailable #x10)(defconstant $mcInfoHasSound #x20)(defconstant $mcInfoIsPlaying #x40)(defconstant $mcInfoIsLooping #x80)(defconstant $mcInfoIsInPalindrome #x100)(defconstant $mcInfoEditingEnabled #x200)(defconstant $mcInfoMovieIsInteractive #x400);   menu item codes (defconstant $mcMenuUndo 1)(defconstant $mcMenuCut 3)(defconstant $mcMenuCopy 4)(defconstant $mcMenuPaste 5)(defconstant $mcMenuClear 6);   target management  ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetMovie" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (theMovie (:pointer :movierecord)) (movieWindow (:pointer :grafport)) (where :point))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc theMovie movieWindow where ((+ (ash 12 16) 2) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetIndMovie" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (index :signed-integer))   (:stack (:pointer :movierecord))   (:stack-trap #xA82A :d0 0 mc index ((+ (ash 2 16) 5) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCRemoveAllMovies" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCRemoveAMovie" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (m (:pointer :movierecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc m ((+ (ash 4 16) 3) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCRemoveMovie" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 6) :signed-longint))); $ENDC;   event handling etc.  ; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCIsPlayerEvent" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (e (:pointer :eventrecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc e ((+ (ash 4 16) 7) :signed-longint))); $ENDC;   obsolete. use MCSetActionFilterWithRefCon instead.  ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetActionFilter" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (blob :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc blob ((+ (ash 4 16) 8) :signed-longint))); $ENDC; ; 	proc is of the form:; 		Boolean userPlayerFilter(MovieController mc, short *action, void *params) =; 	proc returns TRUE if it handles the action, FALSE if not; 	action is passed as a VAR so that it could be changed by filter (ick); 	this is consistent with the current dialog manager stuff; 	params is any potential parameters that go with the action <triple ick> ; 		such as set playback rate to xxx.; ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCDoAction" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (action :signed-integer) (params :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc action params ((+ (ash 6 16) 9) :signed-longint))); $ENDC;   state type things  ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetControllerAttached" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (attach :boolean))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc attach ((+ (ash 2 16) 10) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCIsControllerAttached" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 11) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetControllerPort" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (gp (:pointer :cgrafport)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc gp ((+ (ash 4 16) 12) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetControllerPort" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack (:pointer :cgrafport))   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 13) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetVisible" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (visible :boolean))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc visible ((+ (ash 2 16) 14) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetVisible" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 15) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetControllerBoundsRect" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (bounds (:pointer :rect)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc bounds ((+ (ash 4 16) 16) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetControllerBoundsRect" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (bounds (:pointer :rect)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc bounds ((+ (ash 4 16) 17) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetControllerBoundsRgn" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack (:handle :region))   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 18) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetWindowRgn" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (w (:pointer :grafport)))   (:stack (:handle :region))   (:stack-trap #xA82A :d0 0 mc w ((+ (ash 4 16) 19) :signed-longint))); $ENDC;   other stuff  ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCMovieChanged" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (m (:pointer :movierecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc m ((+ (ash 4 16) 20) :signed-longint))); $ENDC; ; 	called when the app has changed thing about the movie (like bounding rect) or rate. So that we; 		can update our graphical (and internal) state accordingly.; ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetDuration" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (duration :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc duration ((+ (ash 4 16) 21) :signed-longint))); $ENDC; ; 	duration to use for time slider -- will be reset next time MCMovieChanged is called; 		or MCSetMovie is called; ; $IFC NOT GENERATINGCFM;; For trap _mcgetcurrenttime, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetCurrentTime" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (scale (:pointer :signed-long)))   (:stack :timevalue)   (:stack-trap #xA82A :d0 0 mc scale ((+ (ash 4 16) 22) :signed-longint))); $ENDC; ; 	returns the time value and the time scale it is on. if there are no movies, the; 		time scale is passed back as 0. scale is an optional parameter; ; ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCNewAttachedController" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (theMovie (:pointer :movierecord)) (w (:pointer :grafport)) (where :point))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc theMovie w where ((+ (ash 12 16) 23) :signed-longint))); $ENDC; ; 	makes m the only movie attached to the controller. makes the controller visible.; 	the window and where parameters are passed a long to MCSetMovie and behave as; 	described there; ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCDraw" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (w (:pointer :grafport)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc w ((+ (ash 4 16) 24) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCActivate" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (w (:pointer :grafport)) (activate :boolean))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc w activate ((+ (ash 6 16) 25) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCIdle" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 26) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCKey" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (key :signed-byte) (modifiers :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc key modifiers ((+ (ash 6 16) 27) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCClick" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (w (:pointer :grafport)) (where :point) (when :signed-long) (modifiers :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc w where when modifiers ((+ (ash 16 16) 28) :signed-longint))); $ENDC; ; 	calls for editing; ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCEnableEditing" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (enabled :boolean))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc enabled ((+ (ash 2 16) 29) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCIsEditingEnabled" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 30) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCCopy" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack (:pointer :movierecord))   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 31) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCCut" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack (:pointer :movierecord))   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 32) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCPaste" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (srcMovie (:pointer :movierecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc srcMovie ((+ (ash 4 16) 33) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCClear" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 34) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCUndo" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 35) :signed-longint))); $ENDC; ;  *	somewhat special stuff; ; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCPositionController" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (movieRect (:pointer :rect)) (controllerRect (:pointer :rect)) (someFlags :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc movieRect controllerRect someFlags ((+ (ash 12 16) 36) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetControllerInfo" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (someFlags (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc someFlags ((+ (ash 4 16) 37) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetClip" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (theClip (:handle :region)) (movieClip (:handle :region)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc theClip movieClip ((+ (ash 8 16) 40) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetClip" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (theClip (:pointer (:handle :region))) (movieClip (:pointer (:handle :region))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc theClip movieClip ((+ (ash 8 16) 41) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCDrawBadge" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (movieRgn (:handle :region)) (badgeRgn (:pointer (:handle :region))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc movieRgn badgeRgn ((+ (ash 8 16) 42) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetUpEditMenu" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (modifiers :signed-long) (mh (:handle :menuinfo)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc modifiers mh ((+ (ash 8 16) 43) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCGetMenuString" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (modifiers :signed-long) (item :signed-integer) (aString (:pointer (:string 255))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc modifiers item aString ((+ (ash 10 16) 44) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_MCSetActionFilterWithRefCon" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (blob :pointer) (refCon :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc blob refCon ((+ (ash 8 16) 45) :signed-longint))); $ENDC; ; ***************************************; *										*; *  		T  I  M  E  B  A  S  E			*; *										*; ***************************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewTimeBase" ("QuickTimeLib")) ()   (:stack (:pointer :timebaserecord))   (:stack-trap #xAAAA :d0 165)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeTimeBase" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)))   nil   (:stack-trap #xAAAA :d0 182 tb)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _gettimebasetime, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTimeBaseTime" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (s :signed-long) (tr (:pointer :timerecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 166 tb s tr)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTimeBaseTime" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (tr (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 167 tb tr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTimeBaseValue" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (t :signed-long) (s :signed-long))   nil   (:stack-trap #xAAAA :d0 168 tb t s)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _gettimebaserate, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTimeBaseRate" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)))   (:stack :fixed)   (:stack-trap #xAAAA :d0 169 tb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTimeBaseRate" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (r :signed-long))   nil   (:stack-trap #xAAAA :d0 170 tb r)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _gettimebasestarttime, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTimeBaseStartTime" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (s :signed-long) (tr (:pointer :timerecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 171 tb s tr)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTimeBaseStartTime" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (tr (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 172 tb tr)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _gettimebasestoptime, using function return type from C header. Pascal used :signed-long, C uses :timevalue;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTimeBaseStopTime" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (s :signed-long) (tr (:pointer :timerecord)))   (:stack :timevalue)   (:stack-trap #xAAAA :d0 173 tb s tr)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTimeBaseStopTime" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (tr (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 174 tb tr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTimeBaseFlags" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 177 tb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTimeBaseFlags" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (timeBaseFlags :signed-long))   nil   (:stack-trap #xAAAA :d0 178 tb timeBaseFlags)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTimeBaseMasterTimeBase" ("QuickTimeLib")) ((slave (:pointer :timebaserecord)) (master (:pointer :timebaserecord)) (slaveZero (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 180 slave master slaveZero)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTimeBaseMasterTimeBase" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)))   (:stack (:pointer :timebaserecord))   (:stack-trap #xAAAA :d0 175 tb)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTimeBaseMasterClock" ("QuickTimeLib")) ((slave (:pointer :timebaserecord)) (clockMeister (:pointer :componentrecord)) (slaveZero (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 179 slave clockMeister slaveZero)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTimeBaseMasterClock" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)))   (:stack (:pointer :componentinstancerecord))   (:stack-trap #xAAAA :d0 176 tb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ConvertTime" ("QuickTimeLib")) ((inout (:pointer :timerecord)) (newBase (:pointer :timebaserecord)))   nil   (:stack-trap #xAAAA :d0 181 inout newBase)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ConvertTimeScale" ("QuickTimeLib")) ((inout (:pointer :timerecord)) (newScale :signed-long))   nil   (:stack-trap #xAAAA :d0 183 inout newScale)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AddTime" ("QuickTimeLib")) ((dst (:pointer :timerecord)) (src (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 268 dst src)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SubtractTime" ("QuickTimeLib")) ((dst (:pointer :timerecord)) (src (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 269 dst src)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTimeBaseStatus" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (unpinnedTime (:pointer :timerecord)))   (:stack :signed-long)   (:stack-trap #xAAAA :d0 267 tb unpinnedTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_SetTimeBaseZero" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (zero (:pointer :timerecord)))   nil   (:stack-trap #xAAAA :d0 296 tb zero)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _gettimebaseeffectiverate, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetTimeBaseEffectiveRate" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)))   (:stack :fixed)   (:stack-trap #xAAAA :d0 292 tb)); $ENDC; ; ***************************************; *										*; *  		C  A  L  L  B  A  C  K 			*; *										*; ***************************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_NewCallBack" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)) (cbType :signed-integer))   (:stack (:pointer :callbackrecord))   (:stack-trap #xAAAA :d0 235 tb cbType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DisposeCallBack" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)))   nil   (:stack-trap #xAAAA :d0 236 cb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetCallBackType" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 237 cb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetCallBackTimeBase" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)))   (:stack (:pointer :timebaserecord))   (:stack-trap #xAAAA :d0 238 cb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_CallMeWhen" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)) (callBackProc :pointer) (refCon :signed-long) (param1 :signed-long) (param2 :signed-long) (param3 :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 184 cb callBackProc refCon param1 param2 param3)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_CancelCallBack" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)))   nil   (:stack-trap #xAAAA :d0 185 cb)); $ENDC; ; ***************************************; *										*; *  		C L O C K   C A L L B A C K  	*; *  		      S U P P O R T  			*; *										*; ***************************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_AddCallBackToTimeBase" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 297 cb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_RemoveCallBackFromTimeBase" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 298 cb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetFirstCallBack" ("QuickTimeLib")) ((tb (:pointer :timebaserecord)))   (:stack (:pointer :callbackrecord))   (:stack-trap #xAAAA :d0 299 tb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_GetNextCallBack" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)))   (:stack (:pointer :callbackrecord))   (:stack-trap #xAAAA :d0 300 cb)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_ExecuteCallBack" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)))   nil   (:stack-trap #xAAAA :d0 301 cb)); $ENDC; ; ***************************************; *										*; *  		S Y N C    T A S K S		  	*; *  		      S U P P O R T  			*; *										*; ***************************************; ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_QueueSyncTask" ("QuickTimeLib")) ((task (:pointer :qtsynctaskrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 515 task)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap ("_DequeueSyncTask" ("QuickTimeLib")) ((qElem (:pointer :qtsynctaskrecord)))   (:stack :signed-integer)   (:stack-trap #xAAAA :d0 516 qElem)); $ENDC;   UPP call backs  (defconstant $uppMovieRgnCoverProcInfo #xFE0)(defconstant $uppMovieProgressProcInfo #xFAE0)(defconstant $uppMovieDrawingCompleteProcInfo #x3E0)(defconstant $uppTrackTransferProcInfo #x3E0)(defconstant $uppGetMovieProcInfo #x3FE0)(defconstant $uppMoviePreviewCallOutProcInfo #xD0)(defconstant $uppTextMediaProcInfo #x3FE0)(defconstant $uppQTCallBackProcInfo #x3C0)(defconstant $uppQTSyncTaskProcInfo #xC0)(defconstant $uppMCActionFilterProcInfo #xFD0)(defconstant $uppMCActionFilterWithRefConProcInfo #x3ED0); $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewMovieRgnCoverProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewMovieProgressProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewMovieDrawingCompleteProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewTrackTransferProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewGetMovieProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewMoviePreviewCallOutProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewTextMediaProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewQTCallBackProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewQTSyncTaskProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewMCActionFilterProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewMCActionFilterWithRefConProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallMovieRgnCoverProc" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (changedRgn (:handle :region)) (refcon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallMovieProgressProc" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (message :signed-integer) (whatOperation :signed-integer) (percentDone :signed-long) (refcon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallMovieDrawingCompleteProc" ("QuickTimeLib")) ((theMovie (:pointer :movierecord)) (refCon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallTrackTransferProc" ("QuickTimeLib")) ((t (:pointer :trackrecord)) (refCon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallGetMovieProc" ("QuickTimeLib")) ((offset :signed-long) (size :signed-long) (dataPtr :pointer) (refCon :pointer) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallMoviePreviewCallOutProc" ("QuickTimeLib")) ((refcon :signed-long) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallTextMediaProc" ("QuickTimeLib")) ((theText :handle) (theMovie (:pointer :movierecord)) (displayFlag (:pointer :signed-integer)) (refcon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallQTCallBackProc" ("QuickTimeLib")) ((cb (:pointer :callbackrecord)) (refCon :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallQTSyncTaskProc" ("QuickTimeLib")) ((task :pointer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallMCActionFilterProc" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (action (:pointer :signed-integer)) (params :pointer) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallMCActionFilterWithRefConProc" ("QuickTimeLib")) ((mc (:pointer :componentinstancerecord)) (action :signed-integer) (params :pointer) (refCon :signed-long) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := MoviesIncludes; $ENDC                                         ; __MOVIES__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'Movies)