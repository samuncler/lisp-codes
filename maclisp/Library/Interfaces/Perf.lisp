(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Perf.p"; at Tuesday June 6,1995 2:16:34 pm.; ; 	File:		Perf.p; ; 	Copyright:	© 1983-1993 by Apple Computer, Inc.; 				All rights reserved.; ; 	Version:	System 7.1 for ETO #11; 	Created:	Tuesday, March 30, 1993 18:00; ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED UsingPerf; $SETC UsingPerf := 1; $I+; $SETC PerfIncludes := UsingIncludes; $SETC UsingIncludes := 1; $IFC UNDEFINED UsingTypes(require-interface 'Types)                      ; $I $$Shell(PInterfaces)Types.p; $ENDC; $SETC UsingIncludes := PerfIncludes(def-mactype :plongs (find-mactype '(:pointer :alongs)))(defrecord ALongs (array (array :signed-long 8000)))(def-mactype :pints (find-mactype '(:pointer :aints)))(def-mactype :hints (find-mactype '(:handle :aints)))(defrecord AInts (array (array :signed-integer 8000)));  PerfGlobals are declared as a record, so main program can allocate; as globals, desk accessory can add to globals allocated via pointer,; print driver can allocate via low memory, etc. (def-mactype :tp2perfglobals (find-mactype '(:pointer :tperfglobals)))(defrecord TPerfGlobals    (startROM :signed-long)                      ; ROM Base   (romHits :signed-long)                       ; used if MeasureROM is false   (misses :signed-long)                        ; count of PC values outside measured memory   (segArray (:pointer :alongs))                ; array of segment handles   (sizeArray (:pointer :alongs))               ; array of segment sizes   (idArray (:handle :aints))                   ; array of segment rsrc IDs   (baseArray (:pointer :alongs))               ; array of offsets to counters for each segment   (samples (:pointer :alongs))                 ; samples buffer   (buffSize :signed-long)                      ; size of samples buffer in bytes   (timeInterval :signed-integer)               ; number of clock intervals between interrupts   (bucketSize :signed-integer)                 ; size of buckets power of 2   (log2buckSize :signed-integer)               ; used in CvtPC   (pcOffset :signed-integer)                   ; offset to the user PC at interrupt time.   (numMeasure :signed-integer)                 ; # Code segments (w/o jump table)- ROM etc.   (firstCode :signed-integer)                  ; index of first Code segment   (takingSamples :boolean)                     ; true if sampling is enabled   (measureROM :boolean)   (measureCode :boolean)   (ramSeg :signed-integer)                     ; index of "segment" record to cover RAM > 0 if RAM (misses) are to be bucketed.   (ramBase :signed-long)                       ; beginning of RAM being measured.   (measureRAMbucketSize :signed-integer)   (measureRAMlog2buckSize :signed-integer)   (romVersion :signed-integer)   (vRefNum :signed-integer)                    ; Volume where the report file is to be created   (volumeSelected :boolean)                    ; True if user selects the report file name   (rptFileName (:string 255))                  ; Report file name   (rptFileCreator (:string 255))               ; Report File Creator   (rptFileType (:string 255))                  ; Report File type   (getResType :ostype)                         ; Resource type   );  called once to setup Performance monitoring;  ;; Warning: No calling method defined for this trap(deftrap-inline "_InitPerf" ((thePerfGlobals (:pointer (:pointer :tperfglobals))) (timerCount :signed-integer) (codeAndROMBucketSize :signed-integer) (doROM :boolean) (doAppCode :boolean) (appCodeType (:string 255)) (romID :signed-integer) (romName (:string 255)) (doRAM :boolean) (ramLow :signed-long) (ramHigh :signed-long) (ramBucketSize :signed-integer))   :boolean   () )                                         ;  if InitPerf succeeds then TermPerf must be called before terminating program.;  ;; Warning: No calling method defined for this trap(deftrap-inline "_TermPerf" ((thePerfGlobals (:pointer :tperfglobals)))   nil   () )                                         ;  Call this to turn off/on measuring.;  Returns previous state.;  ;; Warning: No calling method defined for this trap(deftrap-inline "_PerfControl" ((thePerfGlobals (:pointer :tperfglobals)) (turnOn :boolean))   :boolean   () )                                         ;  Call this to dump the statistics into a file. ; $ENDC;  UsingPerf ; $IFC NOT UsingIncludes;; Warning: No calling method defined for this trap(deftrap-inline "_PerfDump" ((thePerfGlobals (:pointer :tperfglobals)) (reportFile (:string 255)) (doHistogram :boolean) (rptFileColumns :signed-integer))   :signed-integer   () ); $ENDC(provide-interface 'Perf)