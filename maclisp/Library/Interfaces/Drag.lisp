(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Drag.p"; at Tuesday June 6,1995 2:08:21 pm.; ;  	File:		Drag.p;  ;  	Contains:	Drag and Drop Interfaces.;  ;  	Version:	Technology:	Macintosh Drag and Drop 1.1;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __DRAG__; $SETC __DRAG__ := 1; $I+; $SETC DragIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __APPLEEVENTS__|#(require-interface 'AppleEvents)#|                                              ; $I AppleEvents.p |#                                             ; $ENDC; 	Errors.p													; 		ConditionalMacros.p										; 	Types.p														; 	Memory.p													; 		MixedMode.p												; 	OSUtils.p													; 	Events.p													; 		Quickdraw.p												; 			QuickdrawText.p										; 	EPPC.p														; 		AppleTalk.p												; 		Files.p													; 		PPCToolbox.p											; 		Processes.p												; 	Notification.p												#|                                              ; $IFC UNDEFINED __TEXTEDIT__|#(require-interface 'TextEdit)#|                                              ; $I TextEdit.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+;  Flavor Flags (defconstant $flavorSenderOnly #x1)             ;  flavor is available to sender only (defconstant $flavorSenderTranslated #x2)       ;  flavor is translated by sender (defconstant $flavorNotSaved #x4)               ;  flavor should not be saved (defconstant $flavorSystemTranslated #x100)     ;  flavor is translated by system (def-mactype :flavorflags (find-mactype ':signed-long));  Drag Attributes (defconstant $dragHasLeftSenderWindow #x1)      ;  drag has left the source window since TrackDrag (defconstant $dragInsideSenderApplication #x2)  ;  drag is occurring within the sender application (defconstant $dragInsideSenderWindow #x4)       ;  drag is occurring within the sender window (def-mactype :dragattributes (find-mactype ':signed-long));  Special Flavor Types (defconstant $flavorTypeHFS :|hfs |)            ;  flavor type for HFS data (defconstant $flavorTypePromiseHFS :|phfs|)     ;  flavor type for promised HFS data (defconstant $flavorTypeDirectory :|diry|);  Drag Tracking Handler Messages (defconstant $dragTrackingEnterHandler 1)       ;  drag has entered handler (defconstant $dragTrackingEnterWindow 2)        ;  drag has entered window (defconstant $dragTrackingInWindow 3)           ;  drag is moving within window (defconstant $dragTrackingLeaveWindow 4)        ;  drag has exited window (defconstant $dragTrackingLeaveHandler 5)       ;  drag has exited handler (def-mactype :dragtrackingmessage (find-mactype ':signed-integer));  Drag Drawing Procedure Messages (defconstant $dragRegionBegin 1)                ;  initialize drawing (defconstant $dragRegionDraw 2)                 ;  draw drag feedback (defconstant $dragRegionHide 3)                 ;  hide drag feedback (defconstant $dragRegionIdle 4)                 ;  drag feedback idle time (defconstant $dragRegionEnd 5)                  ;  end of drawing (def-mactype :dragregionmessage (find-mactype ':signed-integer));  Zoom Acceleration (defconstant $zoomNoAcceleration 0)             ;  use linear interpolation (defconstant $zoomAccelerate 1)                 ;  ramp up step size (defconstant $zoomDecelerate 2)                 ;  ramp down step size (def-mactype :zoomacceleration (find-mactype ':signed-integer));  Drag Manager Data Types (def-mactype :dragreference (find-mactype ':signed-long))(def-mactype :itemreference (find-mactype ':signed-long))(def-mactype :flavortype (find-mactype ':ostype));  HFS Flavors (defrecord HFSFlavor    (fileType :ostype)                           ;  file type    (fileCreator :ostype)                        ;  file creator    ;;Changing field fdflags from signed-integer to unsigned-word to match C header (pretty-sure)   (fdFlags :unsigned-word)                     ;  Finder flags    (fileSpec :fsspec)                           ;  file system specification    )(defrecord PromiseHFSFlavor    (fileType :ostype)                           ;  file type    (fileCreator :ostype)                        ;  file creator    ;;Changing field fdflags from signed-integer to unsigned-word to match C header (pretty-sure)   (fdFlags :unsigned-word)                     ;  Finder flags    (promisedFlavor :ostype)                     ;  promised flavor containing an FSSpec    );  Application-Defined Drag Handler Routines (def-mactype :dragtrackinghandlerprocptr (find-mactype ':pointer));  FUNCTION DragTrackingHandler(message: DragTrackingMessage; theWindow: WindowPtr; handlerRefCon: UNIV Ptr; theDragRef: DragReference): OSErr; (def-mactype :dragtrackinghandlerupp (find-mactype ':pointer))(defconstant $uppDragTrackingHandlerProcInfo #x3FA0);  FUNCTION (2 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDragTrackingHandlerProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDragTrackingHandlerProc" ((message :signed-integer) (theWindow (:pointer :grafport)) (handlerRefCon :pointer) (theDragRef :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC(def-mactype :dragtrackinghandler (find-mactype ':pointer))(def-mactype :dragreceivehandlerprocptr (find-mactype ':pointer));  FUNCTION DragReceiveHandler(theWindow: WindowPtr; handlerRefCon: UNIV Ptr; theDragRef: DragReference): OSErr; (def-mactype :dragreceivehandlerupp (find-mactype ':pointer))(defconstant $uppDragReceiveHandlerProcInfo #xFE0);  FUNCTION (4 byte param, 4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDragReceiveHandlerProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDragReceiveHandlerProc" ((theWindow (:pointer :grafport)) (handlerRefCon :pointer) (theDragRef :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC(def-mactype :dragreceivehandler (find-mactype ':pointer));  Application-Defined Routines (def-mactype :dragsenddataprocptr (find-mactype ':pointer));  FUNCTION DragSendData(theType: FlavorType; dragSendRefCon: UNIV Ptr; theItemRef: ItemReference; theDragRef: DragReference): OSErr; (def-mactype :dragsenddataupp (find-mactype ':pointer))(defconstant $uppDragSendDataProcInfo #x3FE0)   ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDragSendDataProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDragSendDataProc" ((theType :ostype) (dragSendRefCon :pointer) (theItemRef :signed-long) (theDragRef :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC(def-mactype :dragsenddataproc (find-mactype ':pointer))(def-mactype :draginputprocptr (find-mactype ':pointer));  FUNCTION DragInput(VAR mouse: Point; VAR modifiers: INTEGER; dragInputRefCon: UNIV Ptr; theDragRef: DragReference): OSErr; (def-mactype :draginputupp (find-mactype ':pointer))(defconstant $uppDragInputProcInfo #x3FE0)      ;  FUNCTION (4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDragInputProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDragInputProc" ((mouse (:pointer :point)) (modifiers (:pointer :signed-integer)) (dragInputRefCon :pointer) (theDragRef :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC(def-mactype :draginputproc (find-mactype ':pointer))(def-mactype :dragdrawingprocptr (find-mactype ':pointer));  FUNCTION DragDrawing(message: DragRegionMessage; showRegion: RgnHandle; showOrigin: Point; hideRegion: RgnHandle; hideOrigin: Point; dragDrawingRefCon: UNIV Ptr; theDragRef: DragReference): OSErr; (def-mactype :dragdrawingupp (find-mactype ':pointer))(defconstant $uppDragDrawingProcInfo #xFFFA0)   ;  FUNCTION (2 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDragDrawingProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDragDrawingProc" ((message :signed-integer) (showRegion (:handle :region)) (showOrigin :point) (hideRegion (:handle :region)) (hideOrigin :point) (dragDrawingRefCon :pointer) (theDragRef :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC(def-mactype :dragdrawingproc (find-mactype ':pointer));  Drag Manager Routines ;  Installing and Removing Drag Handlers ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_InstallTrackingHandler" ((trackingHandler :pointer) (theWindow (:pointer :grafport)) (handlerRefCon :pointer))   (:stack :signed-integer)   (:stack-trap #xABED :d0 1 trackingHandler theWindow handlerRefCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_InstallReceiveHandler" ((receiveHandler :pointer) (theWindow (:pointer :grafport)) (handlerRefCon :pointer))   (:stack :signed-integer)   (:stack-trap #xABED :d0 2 receiveHandler theWindow handlerRefCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_RemoveTrackingHandler" ((trackingHandler :pointer) (theWindow (:pointer :grafport)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 3 trackingHandler theWindow)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_RemoveReceiveHandler" ((receiveHandler :pointer) (theWindow (:pointer :grafport)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 4 receiveHandler theWindow)); $ENDC;  Creating and Disposing Drag References ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_NewDrag" ((theDragRef (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 5 theDragRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DisposeDrag" ((theDragRef :signed-long))   (:stack :signed-integer)   (:stack-trap #xABED :d0 6 theDragRef)); $ENDC;  Adding Drag Item Flavors ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_AddDragItemFlavor" ((theDragRef :signed-long) (theItemRef :signed-long) (theType :ostype) (dataPtr :pointer) (dataSize :signed-long) (theFlags :signed-long))   (:stack :signed-integer)   (:stack-trap #xABED :d0 7 theDragRef theItemRef theType dataPtr dataSize theFlags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetDragItemFlavorData" ((theDragRef :signed-long) (theItemRef :signed-long) (theType :ostype) (dataPtr :pointer) (dataSize :signed-long) (dataOffset :signed-long))   (:stack :signed-integer)   (:stack-trap #xABED :d0 9 theDragRef theItemRef theType dataPtr dataSize dataOffset)); $ENDC;  Providing Drag Callback Procedures ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetDragSendProc" ((theDragRef :signed-long) (sendProc :pointer) (dragSendRefCon :pointer))   (:stack :signed-integer)   (:stack-trap #xABED :d0 10 theDragRef sendProc dragSendRefCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetDragInputProc" ((theDragRef :signed-long) (inputProc :pointer) (dragInputRefCon :pointer))   (:stack :signed-integer)   (:stack-trap #xABED :d0 11 theDragRef inputProc dragInputRefCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetDragDrawingProc" ((theDragRef :signed-long) (drawingProc :pointer) (dragDrawingRefCon :pointer))   (:stack :signed-integer)   (:stack-trap #xABED :d0 12 theDragRef drawingProc dragDrawingRefCon)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_TrackDrag" ((theDragRef :signed-long) (theEvent (:pointer :eventrecord)) (theRegion (:handle :region)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 13 theDragRef theEvent theRegion)); $ENDC;  Getting Drag Item Information ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CountDragItems" ((theDragRef :signed-long) (numItems (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 14 theDragRef numItems)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetDragItemReferenceNumber" ((theDragRef :signed-long) (index :signed-integer) (theItemRef (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 15 theDragRef index theItemRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_CountDragItemFlavors" ((theDragRef :signed-long) (theItemRef :signed-long) (numFlavors (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 16 theDragRef theItemRef numFlavors)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetFlavorType" ((theDragRef :signed-long) (theItemRef :signed-long) (index :signed-integer) (theType (:pointer :ostype)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 17 theDragRef theItemRef index theType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetFlavorFlags" ((theDragRef :signed-long) (theItemRef :signed-long) (theType :ostype) (theFlags (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 18 theDragRef theItemRef theType theFlags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetFlavorDataSize" ((theDragRef :signed-long) (theItemRef :signed-long) (theType :ostype) (dataSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 19 theDragRef theItemRef theType dataSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetFlavorData" ((theDragRef :signed-long) (theItemRef :signed-long) (theType :ostype) (dataPtr :pointer) (dataSize (:pointer :signed-long)) (dataOffset :signed-long))   (:stack :signed-integer)   (:stack-trap #xABED :d0 20 theDragRef theItemRef theType dataPtr dataSize dataOffset)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetDragItemBounds" ((theDragRef :signed-long) (theItemRef :signed-long) (itemBounds (:pointer :rect)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 21 theDragRef theItemRef itemBounds)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetDragItemBounds" ((theDragRef :signed-long) (theItemRef :signed-long) (itemBounds (:pointer :rect)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 22 theDragRef theItemRef itemBounds)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetDropLocation" ((theDragRef :signed-long) (dropLocation (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 23 theDragRef dropLocation)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetDropLocation" ((theDragRef :signed-long) (dropLocation (:pointer :aedesc)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 24 theDragRef dropLocation)); $ENDC;  Getting Information About a Drag ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetDragAttributes" ((theDragRef :signed-long) (flags (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 25 theDragRef flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetDragMouse" ((theDragRef :signed-long) (mouse (:pointer :point)) (pinnedMouse (:pointer :point)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 26 theDragRef mouse pinnedMouse)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetDragMouse" ((theDragRef :signed-long) (pinnedMouse :point))   (:stack :signed-integer)   (:stack-trap #xABED :d0 27 theDragRef pinnedMouse)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetDragOrigin" ((theDragRef :signed-long) (initialMouse (:pointer :point)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 28 theDragRef initialMouse)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetDragModifiers" ((theDragRef :signed-long) (modifiers (:pointer :signed-integer)) (mouseDownModifiers (:pointer :signed-integer)) (mouseUpModifiers (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 29 theDragRef modifiers mouseDownModifiers mouseUpModifiers)); $ENDC;  Drag Highlighting ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_ShowDragHilite" ((theDragRef :signed-long) (hiliteFrame (:handle :region)) (inside :boolean))   (:stack :signed-integer)   (:stack-trap #xABED :d0 30 theDragRef hiliteFrame inside)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_HideDragHilite" ((theDragRef :signed-long))   (:stack :signed-integer)   (:stack-trap #xABED :d0 31 theDragRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DragPreScroll" ((theDragRef :signed-long) (dH :signed-integer) (dV :signed-integer))   (:stack :signed-integer)   (:stack-trap #xABED :d0 32 theDragRef dH dV)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DragPostScroll" ((theDragRef :signed-long))   (:stack :signed-integer)   (:stack-trap #xABED :d0 33 theDragRef)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_UpdateDragHilite" ((theDragRef :signed-long) (updateRgn (:handle :region)))   (:stack :signed-integer)   (:stack-trap #xABED :d0 34 theDragRef updateRgn)); $ENDC;  Drag Manager Utilities ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_WaitMouseMoved" ((initialMouse :point))   (:stack :boolean)   (:stack-trap #xABED :d0 35 initialMouse)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_ZoomRects" ((fromRect (:pointer :rect)) (toRect (:pointer :rect)) (zoomSteps :signed-integer) (acceleration :signed-integer))   (:stack :signed-integer)   (:stack-trap #xABED :d0 36 fromRect toRect zoomSteps acceleration)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_ZoomRegion" ((region (:handle :region)) (zoomDistance :point) (zoomSteps :signed-integer) (acceleration :signed-integer))   (:stack :signed-integer)   (:stack-trap #xABED :d0 37 region zoomDistance zoomSteps acceleration)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := DragIncludes; $ENDC                                         ; __DRAG__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Drag)