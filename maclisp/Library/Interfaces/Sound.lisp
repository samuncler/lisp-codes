(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Sound.p"; at Tuesday June 6,1995 2:20:55 pm.; ;  	File:		Sound.p;  ;  	Contains:	Sound Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __SOUND__; $SETC __SOUND__ := 1; $I+; $SETC SoundIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+; ; Interface for Sound Driver, !!! OBSOLETE and NOT SUPPORTED !!!; ; These items are no longer defined, but appear here so that someone; searching the interfaces might find them. If you are using one of these; items, you must change your code to support the Sound Manager.; ; 	swMode, ftMode, ffMode; 	FreeWave, FFSynthRec, Tone, SWSynthRec, Wave, FTSoundRec; 	SndCompletionProcPtr; 	StartSound, StopSound, SoundDone; (defconstant $twelfthRootTwo 1.05946309434)(defconstant $soundListRsrc :|snd |)            ; Resource type used by Sound Manager(defconstant $rate44khz #xAC440000)             ; 44100.00000 in fixed-point(defconstant $rate22050hz #x56220000)           ; 22050.00000 in fixed-point(defconstant $rate22khz #x56EE8BA3)             ; 22254.54545 in fixed-point(defconstant $rate11khz #x2B7745D1)             ; 11127.27273 in fixed-point(defconstant $rate11025hz #x2B110000)           ; 11025.00000 in fixed-point; synthesizer numbers for SndNewChannel(defconstant $squareWaveSynth 1)                ; square wave synthesizer(defconstant $waveTableSynth 3)                 ; wave table synthesizer(defconstant $sampledSynth 5)                   ; sampled sound synthesizer; old Sound Manager MACE synthesizer numbers(defconstant $MACE3snthID 11)(defconstant $MACE6snthID 13)(defconstant $kMiddleC 60)                      ; MIDI note value for middle C(defconstant $kSimpleBeepID 1)                  ; reserved resource ID for Simple Beep(defconstant $kFullVolume #x100)                ; 1.0, setting for full hardware output volume(defconstant $kNoVolume 0)                      ; setting for no sound volume; command numbers for SndDoCommand and SndDoImmediate(defconstant $nullCmd 0)(defconstant $initCmd 1)(defconstant $freeCmd 2)(defconstant $quietCmd 3)(defconstant $flushCmd 4)(defconstant $reInitCmd 5)(defconstant $waitCmd 10)(defconstant $pauseCmd 11)(defconstant $resumeCmd 12)(defconstant $callBackCmd 13)(defconstant $syncCmd 14)(defconstant $availableCmd 24)(defconstant $versionCmd 25)(defconstant $totalLoadCmd 26)(defconstant $loadCmd 27)(defconstant $freqDurationCmd 40)(defconstant $restCmd 41)(defconstant $freqCmd 42)(defconstant $ampCmd 43)(defconstant $timbreCmd 44)(defconstant $getAmpCmd 45)(defconstant $volumeCmd 46)                     ; sound manager 3.0 or later only(defconstant $getVolumeCmd 47)                  ; sound manager 3.0 or later only(defconstant $waveTableCmd 60)(defconstant $phaseCmd 61)(defconstant $soundCmd 80)(defconstant $bufferCmd 81)(defconstant $rateCmd 82)(defconstant $continueCmd 83)(defconstant $doubleBufferCmd 84)(defconstant $getRateCmd 85)(defconstant $rateMultiplierCmd 86)(defconstant $getRateMultiplierCmd 87)(defconstant $sizeCmd 90)(defconstant $convertCmd 91)(defconstant $stdQLength 128)(defconstant $dataOffsetFlag #x8000); channel initialization parameters; $IFC OLDROUTINENAMES (defconstant $waveInitChannelMask #x7)(defconstant $waveInitChannel0 #x4)             ; wave table only, Sound Manager 2.0 and earlier(defconstant $waveInitChannel1 #x5)             ; wave table only, Sound Manager 2.0 and earlier(defconstant $waveInitChannel2 #x6)             ; wave table only, Sound Manager 2.0 and earlier(defconstant $waveInitChannel3 #x7)             ; wave table only, Sound Manager 2.0 and earlier(defconstant $initChan0 #$waveInitChannel0)     ; obsolete spelling(defconstant $initChan1 #$waveInitChannel1)     ; obsolete spelling(defconstant $initChan2 #$waveInitChannel2)     ; obsolete spelling(defconstant $initChan3 #$waveInitChannel3)     ; obsolete spelling; $ENDC(defconstant $initChanLeft #x2)                 ; left stereo channel(defconstant $initChanRight #x3)                ; right stereo channel(defconstant $initNoInterp #x4)                 ; no linear interpolation(defconstant $initNoDrop #x8)                   ; no drop-sample conversion(defconstant $initMono #x80)                    ; monophonic channel(defconstant $initStereo #xC0)                  ; stereo channel(defconstant $initMACE3 #x300)                  ; MACE 3:1(defconstant $initMACE6 #x400)                  ; MACE 6:1(defconstant $initPanMask #x3)                  ; mask for right/left pan values(defconstant $initSRateMask #x30)               ; mask for sample rate values(defconstant $initStereoMask #xC0)              ; mask for mono/stereo values(defconstant $initCompMask #xFF00)              ; mask for compression IDs(defconstant $kUseOptionalOutputDevice -1)      ; only for Sound Manager 3.0 or later(defconstant $notCompressed 0)                  ; compression ID's(defconstant $fixedCompression -1)              ; compression ID for fixed-sized compression(defconstant $variableCompression -2)           ; compression ID for variable-sized compression(defconstant $twoToOne 1)(defconstant $eightToThree 2)(defconstant $threeToOne 3)(defconstant $sixToOne 4)(defconstant $stdSH #x0)                        ; Standard sound header encode value(defconstant $extSH #xFF)                       ; Extended sound header encode value(defconstant $cmpSH #xFE)                       ; Compressed sound header encode value(defconstant $outsideCmpSH 0)                   ; MACE constants(defconstant $insideCmpSH 1)(defconstant $aceSuccess 0)(defconstant $aceMemFull 1)(defconstant $aceNilBlock 2)(defconstant $aceBadComp 3)(defconstant $aceBadEncode 4)(defconstant $aceBadDest 5)(defconstant $aceBadCmd 6)(defconstant $sixToOnePacketSize 8)(defconstant $threeToOnePacketSize 16)(defconstant $stateBlockSize 64)(defconstant $leftOverBlockSize 32)(defconstant $firstSoundFormat #x1)             ; general sound format(defconstant $secondSoundFormat #x2)            ; special sampled sound format (HyperCard)(defconstant $dbBufferReady #x1)                ; double buffer is filled(defconstant $dbLastBuffer #x4)                 ; last double buffer to play(defconstant $sysBeepDisable #x0)               ; SysBeep() enable flags(defconstant $sysBeepEnable #x1)(defconstant $unitTypeNoSelection #xFFFF)       ; unitTypes for AudioSelection.unitType(defconstant $unitTypeSeconds #x0);  unsigned fixed-point number (def-mactype :unsignedfixed (find-mactype ':signed-long))(defrecord SndCommand    ;;Changing field cmd from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (cmd :unsigned-word)   (param1 :signed-integer)   (param2 :signed-long)   )(def-mactype :sndchannelptr (find-mactype '(:pointer :sndchannel)))(def-mactype :sndcallbackprocptr (find-mactype ':pointer));  PROCEDURE SndCallBack(chan: SndChannelPtr; VAR cmd: SndCommand); (def-mactype :sndcallbackupp (find-mactype ':pointer))(defrecord SndChannel    (nextChan (:pointer :sndchannel))   (firstMod :pointer)                          ;  reserved for the Sound Manager    (callBack :pointer)   (userInfo :signed-long)   (wait :signed-long)                          ;  The following is for internal Sound Manager use only.   (cmdInProgress :sndcommand)   (flags :signed-integer)   (qLength :signed-integer)   (qHead :signed-integer)   (qTail :signed-integer)   (queue (:array :sndcommand (- (- #$stdQLength 1) 0 -1)))   ); MACE structures(defrecord StateBlock    (stateVar (:array :signed-integer (- (- #$stateBlockSize 1) 0 -1)))   )(def-mactype :stateblockptr (find-mactype '(:pointer :stateblock)))(defrecord LeftOverBlock    ;;Changing field count from signed-long to unsigned-long to match C header (pretty-sure)   (count :unsigned-long)   (sampleArea (:array :character (- (- #$leftOverBlockSize 1) 0 -1) :packed))   )(def-mactype :leftoverblockptr (find-mactype '(:pointer :leftoverblock)))(defrecord ModRef    ;;Changing field modnumber from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (modNumber :unsigned-word)   (modInit :signed-long)   )(defrecord SndListResource    (format :signed-integer)   (numModifiers :signed-integer)   (modifierPart (:array :modref 1))            ; This is a variable length array   (numCommands :signed-integer)   (commandPart (:array :sndcommand 1))         ; This is a variable length array   (dataPart (:array :character 1 :packed))     ; This is a variable length array   )(def-mactype :sndlistptr (find-mactype '(:pointer :sndlistresource)))(def-mactype :sndlisthndl (find-mactype '(:handle :sndlistresource)))(def-mactype :sndlisthandle (find-mactype '(:handle :sndlistresource))); HyperCard sound resource format(defrecord Snd2ListResource    (format :signed-integer)   (refCount :signed-integer)   (numCommands :signed-integer)   (commandPart (:array :sndcommand 1))         ; This is a variable length array   (dataPart (:array :character 1 :packed))     ; This is a variable length array   )(def-mactype :snd2listptr (find-mactype '(:pointer :snd2listresource)))(def-mactype :snd2listhndl (find-mactype '(:handle :snd2listresource)))(def-mactype :snd2listhandle (find-mactype '(:handle :snd2listresource)))(defrecord SoundHeader    (samplePtr :pointer)                         ; if NIL then samples are in sampleArea   ;;Changing field length from signed-long to unsigned-long to match C header (pretty-sure)   (length :unsigned-long)                      ; length of sound in bytes   (sampleRate :signed-long)                    ; sample rate for this sound   ;;Changing field loopstart from signed-long to unsigned-long to match C header (pretty-darn-sure)   (loopStart :unsigned-long)                   ; start of looping portion   ;;Changing field loopend from signed-long to unsigned-long to match C header (pretty-darn-sure)   (loopEnd :unsigned-long)                     ; end of looping portion   (encode :character)                          ; header encoding   (baseFrequency :character)                   ; baseFrequency value   (sampleArea (:array :character 1 :packed))   ; space for when samples follow directly   )(def-mactype :soundheaderptr (find-mactype '(:pointer :soundheader)))(defrecord CmpSoundHeader    (samplePtr :pointer)                         ; if nil then samples are in sample area   ;;Changing field numchannels from signed-long to unsigned-long to match C header (pretty-sure)   (numChannels :unsigned-long)                 ; number of channels i.e. mono = 1   (sampleRate :signed-long)                    ; sample rate in Apples Fixed point representation   ;;Changing field loopstart from signed-long to unsigned-long to match C header (pretty-darn-sure)   (loopStart :unsigned-long)                   ; loopStart of sound before compression   ;;Changing field loopend from signed-long to unsigned-long to match C header (pretty-darn-sure)   (loopEnd :unsigned-long)                     ; loopEnd of sound before compression   (encode :character)                          ; data structure used , stdSH, extSH, or cmpSH   (baseFrequency :character)                   ; same meaning as regular SoundHeader   ;;Changing field numframes from signed-long to unsigned-long to match C header (pretty-darn-sure)   (numFrames :unsigned-long)                   ; length in frames ( packetFrames or sampleFrames )   (AIFFSampleRate :pointer)                    ; IEEE sample rate   (markerChunk :pointer)                       ; sync track   (format :ostype)                             ; data format type, was futureUse1   ;;Changing field futureuse2 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (futureUse2 :unsigned-long)                  ; reserved by Apple   (stateVars (:pointer :stateblock))           ; pointer to State Block   (leftOverSamples (:pointer :leftoverblock))  ; used to save truncated samples between compression calls   (compressionID :signed-integer)              ; 0 means no compression, non zero means compressionID   ;;Changing field packetsize from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (packetSize :unsigned-word)                  ; number of bits in compressed sample packet   ;;Changing field snthid from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (snthID :unsigned-word)                      ; resource ID of Sound Manager snth that contains NRT C/E   ;;Changing field samplesize from signed-integer to unsigned-word to match C header (pretty-sure)   (sampleSize :unsigned-word)                  ; number of bits in non-compressed sample   (sampleArea (:array :character 1 :packed))   ; space for when samples follow directly   )(def-mactype :cmpsoundheaderptr (find-mactype '(:pointer :cmpsoundheader)))(defrecord ExtSoundHeader    (samplePtr :pointer)                         ; if nil then samples are in sample area   ;;Changing field numchannels from signed-long to unsigned-long to match C header (pretty-sure)   (numChannels :unsigned-long)                 ; number of channels,  ie mono = 1   (sampleRate :signed-long)                    ; sample rate in Apples Fixed point representation   ;;Changing field loopstart from signed-long to unsigned-long to match C header (pretty-darn-sure)   (loopStart :unsigned-long)                   ; same meaning as regular SoundHeader   ;;Changing field loopend from signed-long to unsigned-long to match C header (pretty-darn-sure)   (loopEnd :unsigned-long)                     ; same meaning as regular SoundHeader   (encode :character)                          ; data structure used , stdSH, extSH, or cmpSH   (baseFrequency :character)                   ; same meaning as regular SoundHeader   ;;Changing field numframes from signed-long to unsigned-long to match C header (pretty-darn-sure)   (numFrames :unsigned-long)                   ; length in total number of frames   (AIFFSampleRate :pointer)                    ; IEEE sample rate   (markerChunk :pointer)                       ; sync track   (instrumentChunks :pointer)                  ; AIFF instrument chunks   (AESRecording :pointer)   ;;Changing field samplesize from signed-integer to unsigned-word to match C header (pretty-sure)   (sampleSize :unsigned-word)                  ; number of bits in sample   ;;Changing field futureuse1 from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (futureUse1 :unsigned-word)                  ; reserved by Apple   ;;Changing field futureuse2 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (futureUse2 :unsigned-long)                  ; reserved by Apple   ;;Changing field futureuse3 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (futureUse3 :unsigned-long)                  ; reserved by Apple   ;;Changing field futureuse4 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (futureUse4 :unsigned-long)                  ; reserved by Apple   (sampleArea (:array :character 1 :packed))   ; space for when samples follow directly   )(def-mactype :extsoundheaderptr (find-mactype '(:pointer :extsoundheader)))(defrecord ConversionBlock    (destination :signed-integer)   (unused :signed-integer)   (inputPtr (:pointer :cmpsoundheader))   (outputPtr (:pointer :cmpsoundheader))   )(def-mactype :conversionblockptr (find-mactype '(:pointer :conversionblock)))(defrecord SMStatus    (smMaxCPULoad :signed-integer)   (smNumChannels :signed-integer)   (smCurCPULoad :signed-integer)   )(def-mactype :smstatusptr (find-mactype '(:pointer :smstatus)))(defrecord SCStatus    (scStartTime :signed-long)   (scEndTime :signed-long)   (scCurrentTime :signed-long)   (scChannelBusy :boolean)   (scChannelDisposed :boolean)   (scChannelPaused :boolean)   (scUnused :boolean)   ;;Changing field scchannelattributes from signed-long to unsigned-long to match C header (pretty-darn-sure)   (scChannelAttributes :unsigned-long)   (scCPULoad :signed-long)   )(def-mactype :scstatusptr (find-mactype '(:pointer :scstatus)))(defrecord AudioSelection    (unitType :signed-long)   (selStart :signed-long)   (selEnd :signed-long)   )(def-mactype :fileplaycompletionprocptr (find-mactype ':pointer));  PROCEDURE FilePlayCompletion(chan: SndChannelPtr); (def-mactype :fileplaycompletionupp (find-mactype ':pointer))(defconstant $uppFilePlayCompletionProcInfo #xC0);  PROCEDURE (4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewFilePlayCompletionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallFilePlayCompletionProc" ((chan (:pointer :sndchannel)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC(def-mactype :audioselectionptr (find-mactype '(:pointer :audioselection)))(defrecord SndDoubleBuffer    (dbNumFrames :signed-long)   (dbFlags :signed-long)   (dbUserInfo (:array :signed-long 2))   (dbSoundData (:array :character 1 :packed))   )(def-mactype :snddoublebufferptr (find-mactype '(:pointer :snddoublebuffer)))(def-mactype :snddoublebackprocptr (find-mactype ':pointer));  PROCEDURE SndDoubleBack(channel: SndChannelPtr; doubleBufferPtr: SndDoubleBufferPtr); (def-mactype :snddoublebackupp (find-mactype ':pointer))(defconstant $uppSndDoubleBackProcInfo #x3C0)   ;  PROCEDURE (4 byte param, 4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSndDoubleBackProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSndDoubleBackProc" ((channel (:pointer :sndchannel)) (doubleBufferPtr (:pointer :snddoublebuffer)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC(defrecord SndDoubleBufferHeader    (dbhNumChannels :signed-integer)   (dbhSampleSize :signed-integer)   (dbhCompressionID :signed-integer)   (dbhPacketSize :signed-integer)   (dbhSampleRate :signed-long)   (dbhBufferPtr (:array (:pointer :snddoublebuffer) 2))   (dbhDoubleBack :pointer)   )(def-mactype :snddoublebufferheaderptr (find-mactype '(:pointer :snddoublebufferheader)))(defrecord SndDoubleBufferHeader2    (dbhNumChannels :signed-integer)   (dbhSampleSize :signed-integer)   (dbhCompressionID :signed-integer)   (dbhPacketSize :signed-integer)   (dbhSampleRate :signed-long)   (dbhBufferPtr (:array (:pointer :snddoublebuffer) 2))   (dbhDoubleBack :pointer)   (dbhFormat :ostype)   )(def-mactype :snddoublebufferheader2ptr (find-mactype '(:pointer :snddoublebufferheader2)))(defrecord SoundInfoList    (count :signed-integer)   (infoHandle :handle)   )(def-mactype :soundinfolistptr (find-mactype '(:pointer :soundinfolist)))(defrecord CompressionInfo    (recordSize :signed-long)   (format :ostype)   (compressionID :signed-integer)   ;;Changing field samplesperpacket from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (samplesPerPacket :unsigned-word)   ;;Changing field bytesperpacket from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (bytesPerPacket :unsigned-word)   ;;Changing field bytesperframe from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (bytesPerFrame :unsigned-word)   ;;Changing field bytespersample from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (bytesPerSample :unsigned-word)   ;;Changing field futureuse1 from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (futureUse1 :unsigned-word)   )(def-mactype :compressioninfoptr (find-mactype '(:pointer :compressioninfo)))(def-mactype :compressioninfohandle (find-mactype '(:handle :compressioninfo)));  These two routines for Get/SetSoundVol should no longer be used.;  They were for old Apple Sound Chip machines, and do not support the DSP or PowerMacs.;  Use Get/SetDefaultOutputVolume instead, if you must change the user's machine.; $IFC OLDROUTINENAMES  & NOT GENERATINGCFM ;; Warning: No calling method defined for this trap(deftrap-inline "_SetSoundVol" ((level :signed-integer))   nil   () )                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetSoundVol" ((level (:pointer :signed-integer)))   nil   (#x205F #x4218 #x10B8 #x260) ); $ENDC; $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SndDoCommand" ((chan (:pointer :sndchannel)) (cmd (:pointer :sndcommand)) (noWait :boolean))   (:stack :signed-integer)   (:stack-trap #xA803)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SndDoImmediate" ((chan (:pointer :sndchannel)) (cmd (:pointer :sndcommand)))   (:stack :signed-integer)   (:stack-trap #xA804)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SndNewChannel" ((chan (:pointer (:pointer :sndchannel))) (synth :signed-integer) (init :signed-long) (userRoutine :pointer))   (:stack :signed-integer)   (:stack-trap #xA807)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SndDisposeChannel" ((chan (:pointer :sndchannel)) (quietNow :boolean))   (:stack :signed-integer)   (:stack-trap #xA801)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SndPlay" ((chan (:pointer :sndchannel)) (sndHdl (:handle :sndlistresource)) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xA805)); $ENDC; $IFC OLDROUTINENAMES ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SndAddModifier" ((chan (:pointer :sndchannel)) (modifier :pointer) (id :signed-integer) (init :signed-long))   (:stack :signed-integer)   (:stack-trap #xA802)); $ENDC; $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SndControl" ((id :signed-integer) (cmd (:pointer :sndcommand)))   (:stack :signed-integer)   (:stack-trap #xA806)); $ENDC;  Sound Manager 2.0 and later, uses _SoundDispatch ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndSoundManagerVersion" ()   (:stack :numversion)   (:stack-trap #xA800 :d0 (+ (ash 12 16) 8))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndStartFilePlay" ((chan (:pointer :sndchannel)) (fRefNum :signed-integer) (resNum :signed-integer) (bufferSize :signed-long) (theBuffer :pointer) (theSelection (:pointer :audioselection)) (theCompletion :pointer) (async :boolean))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 3328 16) 8) chan fRefNum resNum bufferSize theBuffer theSelection theCompletion async)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndPauseFilePlay" ((chan (:pointer :sndchannel)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 516 16) 8) chan)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndStopFilePlay" ((chan (:pointer :sndchannel)) (quietNow :boolean))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 776 16) 8) chan quietNow)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndChannelStatus" ((chan (:pointer :sndchannel)) (theLength :signed-integer) (theStatus (:pointer :scstatus)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1296 16) 8) chan theLength theStatus)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndManagerStatus" ((theLength :signed-integer) (theStatus (:pointer :smstatus)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 788 16) 8) theLength theStatus)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndGetSysBeepState" ((sysBeepState (:pointer :signed-integer)))   nil   (:stack-trap #xA800 :d0 (+ (ash 536 16) 8) sysBeepState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndSetSysBeepState" ((sysBeepState :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 284 16) 8) sysBeepState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndPlayDoubleBuffer" ((chan (:pointer :sndchannel)) (theParams (:pointer :snddoublebufferheader)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1056 16) 8) chan theParams)); $ENDC;  MACE compression routines ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_MACEVersion" ()   (:stack :numversion)   (:stack-trap #xA800 :d0 (+ (ash 0 16) 16))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_Comp3to1" ((inBuffer :pointer) (outBuffer :pointer) (cnt :signed-long) (inState (:pointer :stateblock)) (outState (:pointer :stateblock)) (numChannels :signed-long) (whichChannel :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 4 16) 16) inBuffer outBuffer cnt inState outState numChannels whichChannel)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_Exp1to3" ((inBuffer :pointer) (outBuffer :pointer) (cnt :signed-long) (inState (:pointer :stateblock)) (outState (:pointer :stateblock)) (numChannels :signed-long) (whichChannel :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 8 16) 16) inBuffer outBuffer cnt inState outState numChannels whichChannel)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_Comp6to1" ((inBuffer :pointer) (outBuffer :pointer) (cnt :signed-long) (inState (:pointer :stateblock)) (outState (:pointer :stateblock)) (numChannels :signed-long) (whichChannel :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 12 16) 16) inBuffer outBuffer cnt inState outState numChannels whichChannel)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_Exp1to6" ((inBuffer :pointer) (outBuffer :pointer) (cnt :signed-long) (inState (:pointer :stateblock)) (outState (:pointer :stateblock)) (numChannels :signed-long) (whichChannel :signed-long))   nil   (:stack-trap #xA800 :d0 (+ (ash 16 16) 16) inBuffer outBuffer cnt inState outState numChannels whichChannel)); $ENDC;  Sound Manager 3.0 and later calls ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_GetSysBeepVolume" ((level (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 548 16) 24) level)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SetSysBeepVolume" ((level :signed-long))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 552 16) 24) level)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_GetDefaultOutputVolume" ((level (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 556 16) 24) level)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SetDefaultOutputVolume" ((level :signed-long))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 560 16) 24) level)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_GetSoundHeaderOffset" ((sndHandle (:handle :sndlistresource)) (offset (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1028 16) 24) sndHandle offset)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_UnsignedFixedMulDiv" ((value :signed-long) (multiplier :signed-long) (divisor :signed-long))   (:stack :signed-long)   (:stack-trap #xA800 :d0 (+ (ash 1548 16) 24) value multiplier divisor)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_GetCompressionInfo" ((compressionID :signed-integer) (format :ostype) (numChannels :signed-integer) (sampleSize :signed-integer) (cp (:pointer :compressioninfo)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1808 16) 24) compressionID format numChannels sampleSize cp)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SetSoundPreference" ((theType :ostype) (name (:pointer (:string 255))) (settings :handle))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1588 16) 24) theType name settings)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_GetSoundPreference" ((theType :ostype) (name (:pointer (:string 255))) (settings :handle))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1592 16) 24) theType name settings)); $ENDC;  Sound Manager 3.1 and later calls ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndGetInfo" ((chan (:pointer :sndchannel)) (selector :ostype) (infoPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1596 16) 24) chan selector infoPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndSetInfo" ((chan (:pointer :sndchannel)) (selector :ostype) (infoPtr :pointer))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1600 16) 24) chan selector infoPtr)); $ENDC(defconstant $uppSndCallBackProcInfo #x3C0)     ;  PROCEDURE (4 byte param, 4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSndCallBackProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSndCallBackProc" ((chan (:pointer :sndchannel)) (cmd (:pointer :sndcommand)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := SoundIncludes; $ENDC                                         ; __SOUND__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Sound);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch(DEFRECORD SWSYNTHREC (MODE :SIGNED-INTEGER) (TRIPLETS :TONES));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFRECORD WAVE (ARRAY (ARRAY :UNSIGNED-BYTE 256)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFRECORD TONES (ARRAY (ARRAY :TONE 5001)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEF-MACTYPE :FTSYNTHPTR (FIND-MACTYPE :POINTER));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEF-MACTYPE :FTSNDRECPTR (FIND-MACTYPE :POINTER));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEF-MACTYPE :SWSYNTHPTR (FIND-MACTYPE :POINTER));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFRECORD FFSYNTHREC           (MODE :SIGNED-INTEGER)           (COUNT :SIGNED-LONG)           (WAVEBYTES :FREEWAVE));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFRECORD FREEWAVE (ARRAY (ARRAY :UNSIGNED-BYTE 30001)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEF-MACTYPE :FFSYNTHPTR (FIND-MACTYPE :POINTER));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFRECORD FTSYNTHREC (MODE :SIGNED-INTEGER) (SNDREC (:POINTER :FTSOUNDREC)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEF-MACTYPE :TIME (FIND-MACTYPE :SIGNED-LONG));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFRECORD TONE           (COUNT :SIGNED-INTEGER)           (AMPLITUDE :SIGNED-INTEGER)           (DURATION :SIGNED-INTEGER));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEF-MACTYPE :WAVEPTR (FIND-MACTYPE :POINTER));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFRECORD FTSOUNDREC           (DURATION :SIGNED-INTEGER)           (SOUND1RATE :SIGNED-LONG)           (SOUND1PHASE :SIGNED-LONG)           (SOUND2RATE :SIGNED-LONG)           (SOUND2PHASE :SIGNED-LONG)           (SOUND3RATE :SIGNED-LONG)           (SOUND3PHASE :SIGNED-LONG)           (SOUND4RATE :SIGNED-LONG)           (SOUND4PHASE :SIGNED-LONG)           (SOUND1WAVE (:POINTER :WAVE))           (SOUND2WAVE (:POINTER :WAVE))           (SOUND3WAVE (:POINTER :WAVE))           (SOUND4WAVE (:POINTER :WAVE)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $SYNTHCODERSRC :|snth|);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $WAKEUPCMD 23);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $SWMODE -1);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $FTMODE 1);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $HOWOFTENCMD 22);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $TEMPOCMD 31);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $EMPTYCMD 15);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $SCALECMD 30);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $TICKLECMD 20);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $REQUESTNEXTCMD 21);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SOUND.patch (DEFCONSTANT $FFMODE 0)