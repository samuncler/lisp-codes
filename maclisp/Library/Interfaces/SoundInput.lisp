(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:SoundInput.p"; at Tuesday June 6,1995 2:21:30 pm.; ;  	File:		SoundInput.p;  ;  	Contains:	Sound Input Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __SOUNDINPUT__; $SETC __SOUNDINPUT__ := 1; $I+; $SETC SoundInputIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __APPLEEVENTS__|#(require-interface 'AppleEvents)#|                                              ; $I AppleEvents.p |#                                             ; $ENDC; 	Errors.p													; 	Memory.p													; 		MixedMode.p												; 	OSUtils.p													; 	Events.p													; 		Quickdraw.p												; 			QuickdrawText.p										; 	EPPC.p														; 		AppleTalk.p												; 		Files.p													; 		PPCToolbox.p											; 		Processes.p												; 	Notification.p												#|                                              ; $IFC UNDEFINED __WINDOWS__|#(require-interface 'Windows)#|                                              ; $I Windows.p |#                                             ; $ENDC; 	Controls.p													; 		Menus.p													#|                                              ; $IFC UNDEFINED __DIALOGS__|#(require-interface 'Dialogs)#|                                              ; $I Dialogs.p |#                                             ; $ENDC; 	TextEdit.p													#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __SOUND__|#(require-interface 'Sound)#|                                              ; $I Sound.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $siDeviceIsConnected 1)            ; input device is connected and ready for input(defconstant $siDeviceNotConnected 0)           ; input device is not connected(defconstant $siDontKnowIfConnected -1)         ; can't tell if input device is connected(defconstant $siReadPermission 0)               ; permission passed to SPBOpenDevice(defconstant $siWritePermission 1)              ; permission passed to SPBOpenDevice; Info Selectors for Sound Input Drivers(defconstant $siActiveChannels :|chac|)         ; active channels(defconstant $siActiveLevels :|lmac|)           ; active meter levels(defconstant $siAGCOnOff :|agc |)               ; automatic gain control state(defconstant $siAsync :|asyn|)                  ; asynchronous capability(defconstant $siChannelAvailable :|chav|)       ; number of channels available(defconstant $siCompressionAvailable :|cmav|)   ; compression types available(defconstant $siCompressionFactor :|cmfa|)      ; current compression factor(defconstant $siCompressionHeader :|cmhd|)      ; return compression header(defconstant $siCompressionNames :|cnam|)       ; compression type names available(defconstant $siCompressionType :|comp|)        ; current compression type(defconstant $siContinuous :|cont|)             ; continous recording(defconstant $siDeviceBufferInfo :|dbin|)       ; size of interrupt buffer(defconstant $siDeviceConnected :|dcon|)        ; input device connection status(defconstant $siDeviceIcon :|icon|)             ; input device icon(defconstant $siDeviceName :|name|)             ; input device name(defconstant $siHardwareBusy :|hwbs|)           ; sound hardware is in use(defconstant $siInputGain :|gain|)              ; input gain(defconstant $siInputSource :|sour|)            ; input source selector(defconstant $siInputSourceNames :|snam|)       ; input source names(defconstant $siLevelMeterOnOff :|lmet|)        ; level meter state(defconstant $siNumberChannels :|chan|)         ; current number of channels(defconstant $siOptionsDialog :|optd|)          ; display options dialog(defconstant $siPlayThruOnOff :|plth|)          ; playthrough state(defconstant $siRecordingQuality :|qual|)       ; recording quality(defconstant $siSampleRate :|srat|)             ; current sample rate(defconstant $siSampleRateAvailable :|srav|)    ; sample rates available(defconstant $siSampleSize :|ssiz|)             ; current sample size(defconstant $siSampleSizeAvailable :|ssav|)    ; sample sizes available(defconstant $siStereoInputGain :|sgai|)        ; stereo input gain(defconstant $siTwosComplementOnOff :|twos|)    ; two's complement state(defconstant $siVoxRecordInfo :|voxr|)          ; VOX record parameters(defconstant $siVoxStopInfo :|voxs|)            ; VOX stop parameters(defconstant $siInitializeDriver :|init|)       ; reserved for internal use only(defconstant $siCloseDriver :|clos|)            ; reserved for internal use only(defconstant $siPauseRecording :|paus|)         ; reserved for internal use only(defconstant $siUserInterruptProc :|user|)      ; reserved for internal use only; Qualities(defconstant $siCDQuality :|cd  |)              ; 44.1kHz, stereo, 16 bit(defconstant $siBestQuality :|best|)            ; 22kHz, mono, 8 bit(defconstant $siBetterQuality :|betr|)          ; 22kHz, mono, MACE 3:1(defconstant $siGoodQuality :|good|)(def-mactype :spbptr (find-mactype '(:pointer :spb))); user procedures called by sound input routines; ; 		SIInterruptProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => inParamPtr  	A0.L; 		 => dataBuffer  	A1.L; 		 => peakAmplitude	D0.W; 		 => sampleSize  	D1.L; 	(def-mactype :siinterruptprocptr (find-mactype ':pointer));  register PROCEDURE SIInterrupt(inParamPtr: SPBPtr; dataBuffer: Ptr; peakAmplitude: INTEGER; sampleSize: LONGINT); (def-mactype :sicompletionprocptr (find-mactype ':pointer));  PROCEDURE SICompletion(inParamPtr: SPBPtr); (def-mactype :siinterruptupp (find-mactype ':pointer))(def-mactype :sicompletionupp (find-mactype ':pointer))(defrecord SPB    (inRefNum :signed-long)                      ; reference number of sound input device   ;;Changing field count from signed-long to unsigned-long to match C header (pretty-sure)   (count :unsigned-long)                       ; number of bytes to record   ;;Changing field milliseconds from signed-long to unsigned-long to match C header (pretty-darn-sure)   (milliseconds :unsigned-long)                ; number of milliseconds to record   ;;Changing field bufferlength from signed-long to unsigned-long to match C header (pretty-sure)   (bufferLength :unsigned-long)                ; length of buffer in bytes   (bufferPtr :pointer)                         ; buffer to store sound data in   (completionRoutine :pointer)                 ; completion routine   (interruptRoutine :pointer)                  ; interrupt routine   (userLong :signed-long)                      ; user-defined field   (error :signed-integer)                      ; error   (unused1 :signed-long)                       ; reserved - must be zero   ); $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBVersion" ()   (:stack :numversion)   (:stack-trap #xA800 :d0 (+ (ash 0 16) 20))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndRecord" ((filterProc :pointer) (corner :point) (quality :ostype) (sndHandle (:pointer (:handle :sndlistresource))))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 2052 16) 20) filterProc corner quality sndHandle)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SndRecordToFile" ((filterProc :pointer) (corner :point) (quality :ostype) (fRefNum :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1800 16) 20) filterProc corner quality fRefNum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBSignInDevice" ((deviceRefNum :signed-integer) (deviceName (:string 255)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 780 16) 20) deviceRefNum deviceName)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBSignOutDevice" ((deviceRefNum :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 272 16) 20) deviceRefNum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBGetIndexedDevice" ((count :signed-integer) (deviceName (:pointer (:string 255))) (deviceIconHandle (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1300 16) 20) count deviceName deviceIconHandle)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBOpenDevice" ((deviceName (:string 255)) (permission :signed-integer) (inRefNum (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1304 16) 20) deviceName permission inRefNum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBCloseDevice" ((inRefNum :signed-long))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 540 16) 20) inRefNum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBRecord" ((inParamPtr (:pointer :spb)) (asynchFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 800 16) 20) inParamPtr asynchFlag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBRecordToFile" ((fRefNum :signed-integer) (inParamPtr (:pointer :spb)) (asynchFlag :boolean))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1060 16) 20) fRefNum inParamPtr asynchFlag)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBPauseRecording" ((inRefNum :signed-long))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 552 16) 20) inRefNum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBResumeRecording" ((inRefNum :signed-long))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 556 16) 20) inRefNum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBStopRecording" ((inRefNum :signed-long))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 560 16) 20) inRefNum)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBGetRecordingStatus" ((inRefNum :signed-long) (recordingStatus (:pointer :signed-integer)) (meterLevel (:pointer :signed-integer)) (totalSamplesToRecord (:pointer :signed-long)) (numberOfSamplesRecorded (:pointer :signed-long)) (totalMsecsToRecord (:pointer :signed-long)) (numberOfMsecsRecorded (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 3636 16) 20) inRefNum recordingStatus meterLevel totalSamplesToRecord numberOfSamplesRecorded totalMsecsToRecord numberOfMsecsRecorded)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBGetDeviceInfo" ((inRefNum :signed-long) (infoType :ostype) (infoData :pointer))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1592 16) 20) inRefNum infoType infoData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBSetDeviceInfo" ((inRefNum :signed-long) (infoType :ostype) (infoData :pointer))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1596 16) 20) inRefNum infoType infoData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBMillisecondsToBytes" ((inRefNum :signed-long) (milliseconds (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1088 16) 20) inRefNum milliseconds)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SPBBytesToMilliseconds" ((inRefNum :signed-long) (byteCount (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1092 16) 20) inRefNum byteCount)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SetupSndHeader" ((sndHandle (:handle :sndlistresource)) (numChannels :signed-integer) (sampleRate :signed-long) (sampleSize :signed-integer) (compressionType :ostype) (baseNote :signed-integer) (numBytes :signed-long) (headerLen (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 3400 16) 20) sndHandle numChannels sampleRate sampleSize compressionType baseNote numBytes headerLen)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_SetupAIFFHeader" ((fRefNum :signed-integer) (numChannels :signed-integer) (sampleRate :signed-long) (sampleSize :signed-integer) (compressionType :ostype) (numBytes :signed-long) (numFrames :signed-long))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 2892 16) 20) fRefNum numChannels sampleRate sampleSize compressionType numBytes numFrames)); $ENDC(defconstant $uppSIInterruptProcInfo #x1C579802);  Register PROCEDURE (4 bytes in A0, 4 bytes in A1, 2 bytes in D0, 4 bytes in D1); (defconstant $uppSICompletionProcInfo #xC0)     ;  PROCEDURE (4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSIInterruptProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSICompletionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM                        ; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallSIInterruptProc" ((inParamPtr (:pointer :spb)) (dataBuffer :pointer) (peakAmplitude :signed-integer) (sampleSize :signed-long) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSICompletionProc" ((inParamPtr (:pointer :spb)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := SoundInputIncludes; $ENDC                                         ; __SOUNDINPUT__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'SoundInput)