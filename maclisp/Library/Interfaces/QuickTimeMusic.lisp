(in-package :TRAPS); Generated from #P"Cohones:Lisp:Projects:PInterface Translator:Source interfaces:Quicktime 2.5 PInterfaces:QuickTimeMusic.p"; at Thursday May 23,1996 2:24:58 pm.; ;  	File:		QuickTimeMusic.p;  ;  	Contains:	QuickTime interfaces;  ;  	Version:	Technology:	;  				Release:	QuickTime 2.5 interfaces to use with ETO #20;  ;  	Copyright:	© 1984-1996 by Apple Computer, Inc.  All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, send the file and version;  				information (from above) and the problem description to:;  ;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __QUICKTIMEMUSIC__; $SETC __QUICKTIMEMUSIC__ := 1; $I+; $SETC QuickTimeMusicIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __COMPONENTS__|#(require-interface 'Components)#|                                              ; $I Components.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __IMAGECOMPRESSION__|#(require-interface 'ImageCompression)#|                                              ; $I ImageCompression.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __MOVIES__|#(require-interface 'Movies)#|                                              ; $I Movies.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __VIDEO__|#(require-interface 'Video)#|                                              ; $I Video.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __MEMORY__|#(require-interface 'Memory)#|                                              ; $I Memory.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __SOUND__|#(require-interface 'Sound)#|                                              ; $I Sound.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+; ; 	AtomicInstrument; 		 ToneDescription; 		[NoteRequestInfo]; 		[KnobList]; 	    [SampleInfo [1..m]] ; 			 SampeDescription (identifies corresponding SampleData); 			[KnobList]; 		[SampleData [1..n]]; 		[itxt/name]; 		[InstrumentInfo]; 			[Pict]; 			[Author]; 			[Copyright]; 			[Other]; (defconstant $kaiToneDescType :|tone|)(defconstant $kaiNoteRequestInfoType :|ntrq|)(defconstant $kaiKnobListType :|knbl|)(defconstant $kaiKeyRangeInfoType :|sinf|)(defconstant $kaiSampleDescType :|sdsc|)(defconstant $kaiSampleDataType :|sdat|)(defconstant $kaiInstInfoType :|iinf|)          ;  	kaiExtendedNameType		= 'name', (defconstant $kaiPictType :|pict|)(defconstant $kaiWriterType :|©wrt|)(defconstant $kaiCopyrightType :|©cpy|)(defconstant $kaiOtherStrType :|str |)(def-mactype :instknobrecptr (find-mactype '(:pointer :instknobrec)))(defrecord InstKnobRec    (number :signed-long)   (value :signed-long)   )(defconstant $kInstKnobMissingUnknown 0)(defconstant $kInstKnobMissingDefault #x1)(def-mactype :instknoblistptr (find-mactype '(:pointer :instknoblist)))(defrecord InstKnobList    (knobCount :signed-long)   (knobFlags :signed-long)   (knob (:array :instknobrec 1))   )(defconstant $loopTypeNormal 0)(defconstant $loopTypeAlternating 1)            ;   back & forth (defconstant $instSamplePreProcessFlag #x1)(def-mactype :instsampledescrecptr (find-mactype '(:pointer :instsampledescrec)))(defrecord InstSampleDescRec    (dataFormat :ostype)   (numChannels :signed-integer)   (sampleSize :signed-integer)   (sampleRate :signed-long)   (sampleDataID :signed-integer)   (offset :signed-long)                        ;   offset within SampleData - this could be just for internal use    (numSamples :signed-long)                    ;   this could also just be for internal use, we'll see    (loopType :signed-long)   (loopStart :signed-long)   (loopEnd :signed-long)   (pitchNormal :signed-long)   (pitchLow :signed-long)   (pitchHigh :signed-long)   )(def-mactype :atomicinstrument (find-mactype ':handle))(def-mactype :atomicinstrumentptr (find-mactype ':pointer))(defconstant $kMusicComponentType :|musi|)(defconstant $kSoftSynthType :|ss  |)(defconstant $kGMSynthType :|gm  |)(def-mactype :musiccomponent (find-mactype '(:pointer :componentinstancerecord)));   MusicSynthesizerFlags (defconstant $kSynthesizerDynamicVoice 1)       ;   can assign voices on the fly (else, polyphony is very important  (defconstant $kSynthesizerUsesMIDIPort 2)       ;   must be patched through MIDI Manager  (defconstant $kSynthesizerMicrotone 4)          ;   can play microtonal scales  (defconstant $kSynthesizerHasSamples 8)         ;   synthesizer has some use for sampled data  (defconstant $kSynthesizerMixedDrums 16)        ;   any part can play drum parts, total = instrument parts  (defconstant $kSynthesizerSoftware 32)          ;   implemented in main CPU software == uses cpu cycles  (defconstant $kSynthesizerHardware 64)          ;   is a hardware device (such as nubus, or maybe DSP?)  (defconstant $kSynthesizerDynamicChannel 128)   ;   can move any part to any channel or disable each part. (else we assume it lives on all channels in masks)  (defconstant $kSynthesizerHogsSystemChannel 256);   can be channelwise dynamic, but always responds on its system channel  (defconstant $kSynthesizerSlowSetPart 1024)     ;   SetPart() and SetPartInstrumentNumber() calls do not have rapid response, may glitch notes  (defconstant $kSynthesizerOffline 4096)         ;   can enter an offline synthesis mode  (defconstant $kSynthesizerGM 16384)             ;   synth is a GM device  ; ;  * Note that these controller numbers;  * are _not_ identical to the MIDI controller numbers.;  * These are _signed_ 8.8 values, and the LSB's are;  * always sent to a MIDI device. Controllers 32-63 are;  * reserved (for MIDI, they are LSB's for 0-31, but we;  * always send both).;  *;  * The full range, therefore, is -128.00 to 127.7f.;  *;  * _Excepting_ _volume_, all controls default to zero.;  *;  * Pitch bend is specified in fractional semitones! No;  * more "pitch bend range" nonsense. You can bend as far;  * as you want, any time you want.; (def-mactype :musiccontroller (find-mactype ':signed-long))(defconstant $kControllerModulationWheel 1)(defconstant $kControllerBreath 2)(defconstant $kControllerFoot 4)(defconstant $kControllerPortamentoTime 5)      ;   portamento on/off is omitted, 0 time = 'off'  (defconstant $kControllerVolume 7)(defconstant $kControllerBalance 8)(defconstant $kControllerPan 10)                ;   0 - "default", 1 - n: positioned in output 1-n (incl fractions)  (defconstant $kControllerExpression 11)(defconstant $kControllerLever1 16)             ;   general purpose controllers  (defconstant $kControllerLever2 17)             ;   general purpose controllers  (defconstant $kControllerLever3 18)             ;   general purpose controllers  (defconstant $kControllerLever4 19)             ;   general purpose controllers  (defconstant $kControllerLever5 80)             ;   general purpose controllers  (defconstant $kControllerLever6 81)             ;   general purpose controllers  (defconstant $kControllerLever7 82)             ;   general purpose controllers  (defconstant $kControllerLever8 83)             ;   general purpose controllers  (defconstant $kControllerPitchBend 32)          ;   positive & negative semitones, with 7 bits fraction  (defconstant $kControllerAfterTouch 33)         ;   aka channel pressure  (defconstant $kControllerSustain 64)            ;   boolean - positive for on, 0 or negative off  (defconstant $kControllerSostenuto 66)          ;   boolean  (defconstant $kControllerSoftPedal 67)          ;   boolean  (defconstant $kControllerReverb 91)(defconstant $kControllerTremolo 92)(defconstant $kControllerChorus 93)(defconstant $kControllerCeleste 94)(defconstant $kControllerPhaser 95)(defconstant $kControllerEditPart 113)          ;   last 16 controllers 113-128 and above are global controllers which respond on part zero  (defconstant $kControllerMasterTune 114)(defconstant $kControllerMaximum #x7FFF)        ;   +01111111.11111111  (defconstant $kControllerMinimum #x8000)        ;   -10000000.00000000  (def-mactype :synthesizerdescriptionptr (find-mactype '(:pointer :synthesizerdescription)))(defrecord SynthesizerDescription    (synthesizerType :ostype)                    ;   synthesizer type (must be same as component subtype)     (name (:string 31))                          ;   text name of synthesizer type     (flags :signed-long)                         ;   from the above enum     ;;Changing field voicecount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (voiceCount :unsigned-long)                  ;   maximum polyphony     ;;Changing field partcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (partCount :unsigned-long)                   ;   maximum multi-timbrality (and midi channels)     ;;Changing field instrumentcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (instrumentCount :unsigned-long)             ;   non gm, built in (rom) instruments only     ;;Changing field modifiableinstrumentcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (modifiableInstrumentCount :unsigned-long)   ;   plus n-more are user modifiable     ;;Changing field channelmask from signed-long to unsigned-long to match C header (pretty-darn-sure)   (channelMask :unsigned-long)                 ;   (midi device only) which channels device always uses     ;;Changing field drumpartcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (drumPartCount :unsigned-long)               ;   maximum multi-timbrality of drum parts     ;;Changing field drumcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (drumCount :unsigned-long)                   ;   non gm, built in (rom) drumkits only     ;;Changing field modifiabledrumcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (modifiableDrumCount :unsigned-long)         ;   plus n-more are user modifiable     ;;Changing field drumchannelmask from signed-long to unsigned-long to match C header (pretty-darn-sure)   (drumChannelMask :unsigned-long)             ;   (midi device only) which channels device always uses     ;;Changing field outputcount from signed-long to unsigned-long to match C header (pretty-darn-sure)   (outputCount :unsigned-long)                 ;   number of audio outputs (usually two)     ;;Changing field latency from signed-long to unsigned-long to match C header (pretty-darn-sure)   (latency :unsigned-long)                     ;   response time in µSec     ;;Changing field controllers from signed-long to unsigned-long to match C header (pretty-darn-sure)   (controllers (:array :unsigned-long 4))      ;   array of 128 bits     ;;Changing field gminstruments from signed-long to unsigned-long to match C header (pretty-darn-sure)   (gmInstruments (:array :unsigned-long 4))    ;   array of 128 bits     ;;Changing field gmdrums from signed-long to unsigned-long to match C header (pretty-darn-sure)   (gmDrums (:array :unsigned-long 4))          ;   array of 128 bits     )(defconstant $kVoiceCountDynamic -1)            ;   constant to use to specify dynamic voicing  (def-mactype :tonedescriptionptr (find-mactype '(:pointer :tonedescription)))(defrecord ToneDescription    (synthesizerType :ostype)                    ;   synthesizer type     (synthesizerName (:string 31))               ;   name of instantiation of synth     (instrumentName (:string 31))                ;   preferred name for human use     (instrumentNumber :signed-long)              ;   inst-number used if synth-name matches     (gmNumber :signed-long)                      ;   Best matching general MIDI number     )(defconstant $kFirstDrumkit 16384)              ;   (first value is "no drum". instrument numbers from 16384->16384+128 are drumkits, and for GM they are _defined_ drumkits!  (defconstant $kLastDrumkit 16512);   InstrumentMatch (defconstant $kInstrumentMatchSynthesizerType 1)(defconstant $kInstrumentMatchSynthesizerName 2)(defconstant $kInstrumentMatchName 4)(defconstant $kInstrumentMatchNumber 8)(defconstant $kInstrumentMatchGMNumber 16);   KnobFlags (defconstant $kKnobReadOnly 16)                 ;   knob value cannot be changed by user or with a SetKnob call  (defconstant $kKnobInterruptUnsafe 32)          ;   only alter this knob from foreground task time (may access toolbox)  (defconstant $kKnobKeyrangeOverride 64)         ;   knob can be overridden within a single keyrange (software synth only)  (defconstant $kKnobGroupStart 128)              ;   knob is first in some logical group of knobs  (defconstant $kKnobFixedPoint8 1024)(defconstant $kKnobFixedPoint16 2048)           ;   One of these may be used at a time.  (defconstant $kKnobTypeNumber #x0)(defconstant $kKnobTypeGroupName #x1000)        ;   "knob" is really a group name for display purposes  (defconstant $kKnobTypeBoolean #x2000)          ;   if range is greater than 1, its a multi-checkbox field  (defconstant $kKnobTypeNote #x3000)             ;   knob range is equivalent to MIDI keys  (defconstant $kKnobTypePan #x4000)              ;   range goes left/right (lose this? )  (defconstant $kKnobTypeInstrument #x5000)       ;   knob value = reference to another instrument number  (defconstant $kKnobTypeSetting #x6000)          ;   knob value is 1 of n different things (eg, fm algorithms) popup menu  (defconstant $kKnobTypeMilliseconds #x7000)     ;   knob is a millisecond time range  (defconstant $kKnobTypePercentage #x8000)       ;   knob range is displayed as a Percentage  (defconstant $kKnobTypeHertz #x9000)            ;   knob represents frequency  (defconstant $kKnobTypeButton #xA000)           ;   momentary trigger push button  (defconstant $kUnknownKnobValue #x7FFFFFFF)     ;   a knob with this value means, we don't know it.  (defconstant $kDefaultKnobValue #x7FFFFFFE)     ;   used to SET a knob to its default value.  (def-mactype :knobdescriptionptr (find-mactype '(:pointer :knobdescription)))(defrecord KnobDescription    (name (:string 63))   (lowValue :signed-long)   (highValue :signed-long)   (defaultValue :signed-long)                  ;   a default instrument is made of all default values     (flags :signed-long)   (knobID :signed-long)   )(def-mactype :gcinstrumentdataptr (find-mactype '(:pointer :gcinstrumentdata)))(defrecord GCInstrumentData    (tone :tonedescription)   (knobCount :signed-long)   (knob (:array :signed-long 1))   )(def-mactype :gcinstrumentdatahandle (find-mactype '(:handle :gcinstrumentdata)))(def-mactype :instrumentaboutinfoptr (find-mactype '(:pointer :instrumentaboutinfo)))(defrecord InstrumentAboutInfo    (p (:handle :picture))   (author (:string 255))   (copyright (:string 255))   (other (:string 255))   )(defconstant $kMusicPacketPortLost 1)           ;   received when application loses the default input port  (defconstant $kMusicPacketPortFound 2)          ;   received when application gets it back out from under someone else's claim  (defconstant $kMusicPacketTimeGap 3)            ;   data[0] = number of milliseconds to keep the MIDI line silent  (def-mactype :musicmidipacketptr (find-mactype '(:pointer :musicmidipacket)))(defrecord MusicMIDIPacket    ;;Changing field length from signed-integer to unsigned-word to match C header (pretty-sure)   (length :unsigned-word)   (reserved :signed-long)                      ;   if length zero, then reserved = above enum     (data (:array :unsigned-byte 249 #|alanr removed :packed|#))   )(def-mactype :musicmidisendprocptr (find-mactype ':pointer));  FUNCTION MusicMIDISend(self: MusicComponent; refCon: LONGINT; VAR mmp: MusicMIDIPacket): ComponentResult; (def-mactype :musicmidisendupp (find-mactype ':pointer))(def-mactype :musicmidireadhookprocptr (find-mactype ':pointer));  FUNCTION MusicMIDIReadHook(VAR mp: MusicMIDIPacket; myRefCon: LONGINT): ComponentResult; (def-mactype :musicmidireadhookupp (find-mactype ':pointer))(defconstant $notImplementedMusicErr #x8000F7E9)(defconstant $cantSendToSynthesizerErr #x8000F7E8)(defconstant $cantReceiveFromSynthesizerErr #x8000F7E7)(defconstant $illegalVoiceAllocationErr #x8000F7E6)(defconstant $illegalPartErr #x8000F7E5)(defconstant $illegalChannelErr #x8000F7E4)(defconstant $illegalKnobErr #x8000F7E3)(defconstant $illegalKnobValueErr #x8000F7E2)(defconstant $illegalInstrumentErr #x8000F7E1)(defconstant $illegalControllerErr #x8000F7E0)(defconstant $midiManagerAbsentErr #x8000F7DF)(defconstant $synthesizerNotRespondingErr #x8000F7DE)(defconstant $synthesizerErr #x8000F7DD)(defconstant $illegalNoteChannelErr #x8000F7DC)(defconstant $noteChannelNotAllocatedErr #x8000F7DB)(defconstant $tunePlayerFullErr #x8000F7DA)(defconstant $tuneParseErr #x8000F7D9)(defconstant $kGMType :|gm  |)                  ;   subtype for General MIDI music component  (defconstant $kGetAtomicInstNoExpandedSamples #x1)(defconstant $kGetAtomicInstNoOriginalSamples #x2)(defconstant $kGetAtomicInstNoSamples #x3)(defconstant $kGetAtomicInstNoKnobList #x4)(defconstant $kGetAtomicInstNoInstrumentInfo #x8)(defconstant $kGetAtomicInstOriginalKnobList #x10)(defconstant $kGetAtomicInstAllKnobs #x20)      ;   return even those that are set to default ; ;  For non-gm instruments, instrument number of tone description == 0;  If you want to speed up while running, slam the inst num with what Get instrument number returns;  All missing knobs are slammed to the default value; (defconstant $kSetAtomicInstKeepOriginalInstrument #x1)(defconstant $kSetAtomicInstShareAcrossParts #x2);   inst disappears when app goes away (defconstant $kSetAtomicInstCallerTosses #x4)   ;   the caller isn't keeping a copy around (for NASetAtomicInstrument) (defconstant $kSetAtomicInstDontPreprocess #x80);   perform no further preprocessing because either 1)you know the instrument is digitally clean, or 2) you got it from a GetPartAtomic (defconstant $kInstrumentNamesModifiable 1)(defconstant $kInstrumentNamesBoth 2)(defconstant $kSetPartInstrumentNumberSafe #x40000000);   or'd with instrument number on MusicSetPartInstrumentNumber means we're calling at interrupt level (dont move RAM) ; ;  * Structures specific to the GenericMusicComponent; (defconstant $kGenericMusicComponentSubtype :|gene|)(def-mactype :genericknobdescriptionptr (find-mactype '(:pointer :genericknobdescription)))(defrecord GenericKnobDescription    (kd :knobdescription)   (hw1 :signed-long)                           ;   driver defined     (hw2 :signed-long)                           ;   driver defined     (hw3 :signed-long)                           ;   driver defined     (settingsID :signed-long)                    ;   resource ID list for boolean and popup names     )(def-mactype :genericknobdescriptionlistptr (find-mactype '(:pointer :genericknobdescriptionlist)))(defrecord GenericKnobDescriptionList    (knobCount :signed-long)   (knob (:array :genericknobdescription 1))   )(def-mactype :genericknobdescriptionlisthandle (find-mactype '(:handle :genericknobdescriptionlist)));   knobTypes for MusicDerivedSetKnob  (defconstant $kGenericMusicKnob 1)(defconstant $kGenericMusicInstrumentKnob 2)(defconstant $kGenericMusicDrumKnob 3)(defconstant $kGenericMusicGlobalController 4)(defconstant $resFirst 0)(defconstant $resMiscStringList 1)              ;   STR# 1: synth name, 2:about author,3:aboutcopyright,4:aboutother  (defconstant $resMiscLongList 2)                ;   Long various params, see list below  (defconstant $resInstrumentList 3)              ;   NmLs of names and shorts, categories prefixed by '¥¥'  (defconstant $resDrumList 4)                    ;   NmLs of names and shorts  (defconstant $resInstrumentKnobDescriptionList 5);   Knob  (defconstant $resDrumKnobDescriptionList 6)     ;   Knob  (defconstant $resKnobDescriptionList 7)         ;   Knob  (defconstant $resBitsLongList 8)                ;   Long back to back bitmaps of controllers, gminstruments, and drums  (defconstant $resModifiableInstrumentHW 9)      ;   Shrt same as the hw shorts trailing the instrument names, a shortlist  (defconstant $resGMTranslation 10)              ;   Long 128 long entries, 1 for each gm inst, of local instrument numbers 1-n (not hw numbers)  (defconstant $resROMInstrumentData 11)          ;   knob lists for ROM instruments, so the knob values may be known  (defconstant $resAboutPICT 12)                  ;   picture for aboutlist. must be present for GetAbout call to work  (defconstant $resLast 13);   elements of the misc long list  (defconstant $miscLongFirst 0)(defconstant $miscLongVoiceCount 1)(defconstant $miscLongPartCount 2)(defconstant $miscLongModifiableInstrumentCount 3)(defconstant $miscLongChannelMask 4)(defconstant $miscLongDrumPartCount 5)(defconstant $miscLongModifiableDrumCount 6)(defconstant $miscLongDrumChannelMask 7)(defconstant $miscLongOutputCount 8)(defconstant $miscLongLatency 9)(defconstant $miscLongFlags 10)(defconstant $miscLongFirstGMHW 11)             ;   number to add to locate GM main instruments  (defconstant $miscLongFirstGMDrumHW 12)         ;   number to add to locate GM drumkits  (defconstant $miscLongFirstUserHW 13)           ;   First hw number of user instruments (presumed sequential)  (defconstant $miscLongLast 14)(def-mactype :gcpartptr (find-mactype '(:pointer :gcpart)))(defrecord GCPart    (hwInstrumentNumber :signed-long)            ;   internal number of recalled instrument     (controller (:array :signed-integer 128))    ;   current values for all controllers     (volume :signed-long)                        ;   ctrl 7 is special case     (polyphony :signed-long)   (midiChannel :signed-long)                   ;   1-16 if in use     (id :gcinstrumentdata)                       ;   ToneDescription & knoblist, uncertain length     ); ;  * Calls specific to the GenericMusicComponent; (defconstant $kMusicGenericRange #x100)(defconstant $kMusicDerivedRange #x200); ;  * Flags in GenericMusicConfigure call; (defconstant $kGenericMusicDoMIDI #x1)          ;   implement normal MIDI messages for note, controllers, and program changes 0-127  (defconstant $kGenericMusicBank0 #x2)           ;   implement instrument bank changes on controller 0  (defconstant $kGenericMusicBank32 #x4)          ;   implement instrument bank changes on controller 32  (defconstant $kGenericMusicErsatzMIDI #x8)      ;   construct MIDI packets, but send them to the derived component  (defconstant $kGenericMusicCallKnobs #x10)      ;   call the derived component with special knob format call  (defconstant $kGenericMusicCallParts #x20)      ;   call the derived component with special part format call  (defconstant $kGenericMusicCallInstrument #x40) ;   call MusicDerivedSetInstrument for MusicSetInstrument calls  (defconstant $kGenericMusicCallNumber #x80)     ;   call MusicDerivedSetPartInstrumentNumber for MusicSetPartInstrumentNumber calls, & don't send any C0 or bank stuff  (defconstant $kGenericMusicCallROMInstrument #x100);   call MusicSetInstrument for MusicSetPartInstrumentNumber for "ROM" instruments, passing params from the ROMi resource  (defconstant $kGenericMusicAllDefaults #x200)   ;   indicates that when a new instrument is recalled, all knobs are reset to DEFAULT settings. True for GS modules  (def-mactype :musicofflinedataprocptr (find-mactype ':pointer));  FUNCTION MusicOfflineData(SoundData: Ptr; numBytes: LONGINT; myRefCon: LONGINT): ComponentResult; (def-mactype :musicofflinedataupp (find-mactype ':pointer))(def-mactype :offlinesampletypeptr (find-mactype '(:pointer :offlinesampletype)))(defrecord OfflineSampleType    ;;Changing field numchannels from signed-long to unsigned-long to match C header (pretty-sure)   (numChannels :unsigned-long)                 ;  number of channels,  ie mono = 1    (sampleRate :signed-long)                    ;  sample rate in Apples Fixed point representation    (sampleSize :signed-integer)                 ;  number of bits in sample    )(def-mactype :instrumentinforecordptr (find-mactype '(:pointer :instrumentinforecord)))(defrecord InstrumentInfoRecord    (instrumentNumber :signed-long)              ;   instrument number (if 0, name is a catagory)    (flags :signed-long)                         ;   show in picker, etc.    (toneNameIndex :signed-long)                 ;   index in toneNames (1 based)    (itxtNameAtomID :signed-long)                ;   index in itxtNames (itxt/name by index)    )(def-mactype :instrumentinfolistptr (find-mactype '(:pointer :instrumentinfolist)))(defrecord InstrumentInfoList    (recordCount :signed-long)   (toneNames :handle)                          ;   name from tone description    (itxtNames :handle)                          ;   itxt/name atoms for instruments    (info (:array :instrumentinforecord 1))   )(def-mactype :instrumentinfolisthandle (find-mactype '(:handle :instrumentinfolist))); $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetDescription" ((mc (:pointer :componentinstancerecord)) (sd (:pointer :synthesizerdescription)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc sd ((+ (ash 4 16) 1) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetPart" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (midiChannel (:pointer :signed-long)) (polyphony (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part midiChannel polyphony ((+ (ash 12 16) 2) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetPart" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (midiChannel :signed-long) (polyphony :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part midiChannel polyphony ((+ (ash 12 16) 3) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetPartInstrumentNumber" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (instrumentNumber :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part instrumentNumber ((+ (ash 8 16) 4) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetPartInstrumentNumber" ((mc (:pointer :componentinstancerecord)) (part :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part ((+ (ash 4 16) 5) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicStorePartInstrument" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (instrumentNumber :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part instrumentNumber ((+ (ash 8 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetPartAtomicInstrument" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (ai (:pointer :handle)) (flags :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part ai flags ((+ (ash 12 16) 9) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetPartAtomicInstrument" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (aiP :pointer) (flags :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part aiP flags ((+ (ash 12 16) 10) :signed-longint))); $ENDC;   Obsolete calls ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetInstrumentKnobDescriptionObsolete" ((mc (:pointer :componentinstancerecord)) (knobIndex :signed-long) (mkd :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobIndex mkd ((+ (ash 8 16) 13) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetDrumKnobDescriptionObsolete" ((mc (:pointer :componentinstancerecord)) (knobIndex :signed-long) (mkd :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobIndex mkd ((+ (ash 8 16) 14) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetKnobDescriptionObsolete" ((mc (:pointer :componentinstancerecord)) (knobIndex :signed-long) (mkd :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobIndex mkd ((+ (ash 8 16) 15) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetPartKnob" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (knobID :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part knobID ((+ (ash 8 16) 16) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetPartKnob" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (knobID :signed-long) (knobValue :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part knobID knobValue ((+ (ash 12 16) 17) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetKnob" ((mc (:pointer :componentinstancerecord)) (knobID :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobID ((+ (ash 4 16) 18) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetKnob" ((mc (:pointer :componentinstancerecord)) (knobID :signed-long) (knobValue :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobID knobValue ((+ (ash 8 16) 19) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetPartName" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (name (:pointer (:string 255))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part name ((+ (ash 8 16) 20) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetPartName" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (name (:pointer (:string 255))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part name ((+ (ash 8 16) 21) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicFindTone" ((mc (:pointer :componentinstancerecord)) (td (:pointer :tonedescription)) (instrumentNumber (:pointer :signed-long)) (fit (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc td instrumentNumber fit ((+ (ash 12 16) 22) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicPlayNote" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (pitch :signed-long) (velocity :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part pitch velocity ((+ (ash 12 16) 23) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicResetPart" ((mc (:pointer :componentinstancerecord)) (part :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part ((+ (ash 4 16) 24) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetPartController" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (controllerNumber :signed-long) (controllerValue :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part controllerNumber controllerValue ((+ (ash 12 16) 25) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetPartController" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (controllerNumber :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part controllerNumber ((+ (ash 8 16) 26) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetMIDIProc" ((mc (:pointer :componentinstancerecord)) (midiSendProc (:pointer :pointer)) (refCon (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc midiSendProc refCon ((+ (ash 8 16) 27) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetMIDIProc" ((mc (:pointer :componentinstancerecord)) (midiSendProc :pointer) (refCon :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc midiSendProc refCon ((+ (ash 8 16) 28) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetInstrumentNames" ((mc (:pointer :componentinstancerecord)) (modifiableInstruments :signed-long) (instrumentNames (:pointer :handle)) (instrumentCategoryLasts (:pointer :handle)) (instrumentCategoryNames (:pointer :handle)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc modifiableInstruments instrumentNames instrumentCategoryLasts instrumentCategoryNames ((+ (ash 16 16) 29) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetDrumNames" ((mc (:pointer :componentinstancerecord)) (modifiableInstruments :signed-long) (instrumentNumbers (:pointer :handle)) (instrumentNames (:pointer :handle)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc modifiableInstruments instrumentNumbers instrumentNames ((+ (ash 12 16) 30) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetMasterTune" ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 31) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetMasterTune" ((mc (:pointer :componentinstancerecord)) (masterTune :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc masterTune ((+ (ash 4 16) 32) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetInstrumentAboutInfo" ((mc (:pointer :componentinstancerecord)) (part :signed-long) (iai (:pointer :instrumentaboutinfo)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc part iai ((+ (ash 8 16) 34) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetDeviceConnection" ((mc (:pointer :componentinstancerecord)) (index :signed-long) (id1 (:pointer :signed-long)) (id2 (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc index id1 id2 ((+ (ash 12 16) 35) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicUseDeviceConnection" ((mc (:pointer :componentinstancerecord)) (id1 :signed-long) (id2 :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc id1 id2 ((+ (ash 8 16) 36) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetKnobSettingStrings" ((mc (:pointer :componentinstancerecord)) (knobIndex :signed-long) (isGlobal :signed-long) (settingsNames (:pointer :handle)) (settingsCategoryLasts (:pointer :handle)) (settingsCategoryNames (:pointer :handle)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobIndex isGlobal settingsNames settingsCategoryLasts settingsCategoryNames ((+ (ash 20 16) 37) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetMIDIPorts" ((mc (:pointer :componentinstancerecord)) (inputPortCount (:pointer :signed-long)) (outputPortCount (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc inputPortCount outputPortCount ((+ (ash 8 16) 38) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSendMIDI" ((mc (:pointer :componentinstancerecord)) (portIndex :signed-long) (mp (:pointer :musicmidipacket)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc portIndex mp ((+ (ash 8 16) 39) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicReceiveMIDI" ((mc (:pointer :componentinstancerecord)) (readHook :pointer) (refCon :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc readHook refCon ((+ (ash 8 16) 40) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicStartOffline" ((mc (:pointer :componentinstancerecord)) (numChannels (:pointer :signed-long)) (sampleRate (:pointer :signed-long)) (sampleSize (:pointer :signed-integer)) (dataProc :pointer) (dataProcRefCon :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc numChannels sampleRate sampleSize dataProc dataProcRefCon ((+ (ash 20 16) 41) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicSetOfflineTimeTo" ((mc (:pointer :componentinstancerecord)) (newTimeStamp :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc newTimeStamp ((+ (ash 4 16) 42) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetInstrumentKnobDescription" ((mc (:pointer :componentinstancerecord)) (knobIndex :signed-long) (mkd (:pointer :knobdescription)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobIndex mkd ((+ (ash 8 16) 43) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetDrumKnobDescription" ((mc (:pointer :componentinstancerecord)) (knobIndex :signed-long) (mkd (:pointer :knobdescription)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobIndex mkd ((+ (ash 8 16) 44) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetKnobDescription" ((mc (:pointer :componentinstancerecord)) (knobIndex :signed-long) (mkd (:pointer :knobdescription)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobIndex mkd ((+ (ash 8 16) 45) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetInfoText" ((mc (:pointer :componentinstancerecord)) (selector :signed-long) (textH (:pointer :handle)) (styleH (:pointer :handle)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc selector textH styleH ((+ (ash 12 16) 46) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGetInstrumentInfo" ((mc (:pointer :componentinstancerecord)) (getInstrumentNamesFlags :signed-long) (infoListH (:pointer (:handle :instrumentinfolist))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc getInstrumentNamesFlags infoListH ((+ (ash 8 16) 47) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicTask" ((mc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc ((+ (ash 0 16) 49) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGenericConfigure" ((mc (:pointer :componentinstancerecord)) (mode :signed-long) (flags :signed-long) (baseResID :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc mode flags baseResID ((+ (ash 12 16) 256) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGenericGetPart" ((mc (:pointer :componentinstancerecord)) (partNumber :signed-long) (part (:pointer (:pointer :gcpart))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc partNumber part ((+ (ash 8 16) 257) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicGenericGetKnobList" ((mc (:pointer :componentinstancerecord)) (knobType :signed-long) (gkdlH (:pointer (:handle :genericknobdescriptionlist))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobType gkdlH ((+ (ash 8 16) 258) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicDerivedMIDISend" ((mc (:pointer :componentinstancerecord)) (packet (:pointer :musicmidipacket)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc packet ((+ (ash 4 16) 512) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicDerivedSetKnob" ((mc (:pointer :componentinstancerecord)) (knobType :signed-long) (knobNumber :signed-long) (knobValue :signed-long) (partNumber :signed-long) (p (:pointer :gcpart)) (gkd (:pointer :genericknobdescription)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc knobType knobNumber knobValue partNumber p gkd ((+ (ash 24 16) 513) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicDerivedSetPart" ((mc (:pointer :componentinstancerecord)) (partNumber :signed-long) (p (:pointer :gcpart)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc partNumber p ((+ (ash 8 16) 514) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicDerivedSetInstrument" ((mc (:pointer :componentinstancerecord)) (partNumber :signed-long) (p (:pointer :gcpart)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc partNumber p ((+ (ash 8 16) 515) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicDerivedSetPartInstrumentNumber" ((mc (:pointer :componentinstancerecord)) (partNumber :signed-long) (p (:pointer :gcpart)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc partNumber p ((+ (ash 8 16) 516) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicDerivedSetMIDI" ((mc (:pointer :componentinstancerecord)) (midiProc :pointer) (refcon :signed-long) (midiChannel :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc midiProc refcon midiChannel ((+ (ash 12 16) 517) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_MusicDerivedStorePartInstrument" ((mc (:pointer :componentinstancerecord)) (partNumber :signed-long) (p (:pointer :gcpart)) (instrumentNumber :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 mc partNumber p instrumentNumber ((+ (ash 12 16) 518) :signed-longint))); $ENDC;   Mask bit for returned value by InstrumentFind. (defconstant $kExactMatch #x20000)(defconstant $kRecommendedSubstitute #x10000)(defconstant $kQualityField #xFF000000)(defconstant $kRoland8BitQuality #x5000000)(def-mactype :instrumentaboutinfohandle (find-mactype '(:handle :instrumentaboutinfo)))(def-mactype :gminstrumentinfoptr (find-mactype '(:pointer :gminstrumentinfo)))(defrecord GMInstrumentInfo    (cmpInstID :signed-long)   (gmInstNum :signed-long)   (instMatch :signed-long)   )(def-mactype :gminstrumentinfohandle (find-mactype '(:handle :gminstrumentinfo)));   do catagories count here?? (def-mactype :nongminstrumentinforecordptr (find-mactype '(:pointer :nongminstrumentinforecord)))(defrecord nonGMInstrumentInfoRecord    (cmpInstID :signed-long)                     ;   if 0, category name    (flags :signed-long)                         ;   match, show in picker    (toneNameIndex :signed-long)                 ;   index in toneNames (1 based)    (itxtNameAtomID :signed-long)                ;   index in itxtNames (itxt/name by index)    )(def-mactype :nongminstrumentinfoptr (find-mactype '(:pointer :nongminstrumentinfo)))(defrecord nonGMInstrumentInfo    (recordCount :signed-long)   (toneNames :handle)                          ;   name from tone description    (itxtNames :handle)                          ;   itext/name atoms for instruments    (instInfo (:array :nongminstrumentinforecord 1))   )(def-mactype :nongminstrumentinfohandle (find-mactype '(:handle :nongminstrumentinfo)))(def-mactype :instcompinfoptr (find-mactype '(:pointer :instcompinfo)))(defrecord InstCompInfo    (infoSize :signed-long)                      ;   size of this record    (GMinstrumentCount :signed-long)   (GMinstrumentInfo (:handle :gminstrumentinfo))   (GMdrumCount :signed-long)   (GMdrumInfo (:handle :gminstrumentinfo))   (nonGMinstrumentCount :signed-long)   (nonGMinstrumentInfo (:handle :nongminstrumentinfo))   (nonGMdrumCount :signed-long)   (nonGMdrumInfo (:handle :nongminstrumentinfo))   )(def-mactype :instcompinfohandle (find-mactype '(:handle :instcompinfo))); $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_InstrumentGetInst" ((ci (:pointer :componentinstancerecord)) (instID :signed-long) (atomicInst (:pointer :handle)) (flags :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci instID atomicInst flags ((+ (ash 12 16) 1) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_InstrumentGetInfo" ((ci (:pointer :componentinstancerecord)) (instInfo (:pointer (:handle :instcompinfo))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci instInfo ((+ (ash 4 16) 2) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_InstrumentInitialize" ((ci (:pointer :componentinstancerecord)) (initFormat :signed-long) (initParams :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci initFormat initParams ((+ (ash 8 16) 3) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_InstrumentOpenComponentResFile" ((ci (:pointer :componentinstancerecord)) (resFile (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci resFile ((+ (ash 4 16) 4) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_InstrumentCloseComponentResFile" ((ci (:pointer :componentinstancerecord)) (resFile :signed-integer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci resFile ((+ (ash 2 16) 5) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_InstrumentGetComponentRefCon" ((ci (:pointer :componentinstancerecord)) (refCon (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci refCon ((+ (ash 4 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_InstrumentSetComponentRefCon" ((ci (:pointer :componentinstancerecord)) (refCon :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci refCon ((+ (ash 4 16) 7) :signed-longint))); $ENDC; ; --------------------------; 	Types; --------------------------; (defconstant $kSynthesizerConnectionMono 1)     ;   if set, and synth can be mono/poly, then the partCount channels from the system channel are hogged  (defconstant $kSynthesizerConnectionMMgr 2)     ;   this connection imported from the MIDI Mgr  (defconstant $kSynthesizerConnectionOMS 4)      ;   this connection imported from OMS  (defconstant $kSynthesizerConnectionQT 8)       ;   this connection is a QuickTime-only port  (defconstant $kSynthesizerConnectionFMS 16)     ;   this connection imported from FMS  ;   used for MIDI device only  (def-mactype :synthesizerconnectionsptr (find-mactype '(:pointer :synthesizerconnections)))(defrecord SynthesizerConnections    (clientID :ostype)   (inputPortID :ostype)                        ;   terminology death: this port is used to SEND to the midi synth     (outputPortID :ostype)                       ;   terminology death: this port receives from a keyboard or other control device     (midiChannel :signed-long)                   ;   The system channel; others are configurable (or the nubus slot number)     (flags :signed-long)   (unique :signed-long)                        ;   unique id may be used instead of index, to getinfo and unregister calls     (reserved1 :signed-long)                     ;   should be zero     (reserved2 :signed-long)                     ;   should be zero     )(def-mactype :qtmidiportptr (find-mactype '(:pointer :qtmidiport)))(defrecord QTMIDIPort    (portConnections :synthesizerconnections)   (portName (:string 63))   )(defconstant $kNoteRequestNoGM 1)               ;   dont degrade to a GM synth  (defconstant $kNoteRequestNoSynthType 2)        ;   dont degrade to another synth of same type but different name  (def-mactype :noteallocator (find-mactype '(:pointer :componentinstancerecord)))(def-mactype :noterequestinfoptr (find-mactype '(:pointer :noterequestinfo)))(defrecord NoteRequestInfo    (flags :signed-byte)                         ;   1: dont accept GM match, 2: dont accept same-synth-type match     (reserved :signed-byte)                      ;   must be zero     (polyphony :signed-integer)                  ;   Maximum number of voices     (typicalPolyphony :signed-long)              ;   Hint for level mixing     )(def-mactype :noterequestptr (find-mactype '(:pointer :noterequest)))(defrecord NoteRequest    (info :noterequestinfo)   (tone :tonedescription)   )(def-mactype :notechannel (find-mactype '(:pointer :signed-long)))(defconstant $kPickDontMix 1)                   ;   dont mix instruments with drum sounds  (defconstant $kPickSameSynth 2)                 ;   only allow the same device that went in, to come out  (defconstant $kPickUserInsts 4)                 ;   show user insts in addition to ROM voices  (defconstant $kPickEditAllowEdit 8)             ;   lets user switch over to edit mode  (defconstant $kPickEditAllowPick 16)            ;   lets the user switch over to pick mode  (defconstant $kPickEditSynthGlobal 32)          ;   edit the global knobs of the synth  (defconstant $kPickEditControllers 64)          ;   edit the controllers of the notechannel  (defconstant $kNoteAllocatorType :|nota|)(def-mactype :nastatpieceptr (find-mactype '(:pointer :nastatpiece)))(defrecord NAStatPiece    (clientName (:string 31))   (synthesizerName (:string 31))   (part :signed-long)   (midiChannel :signed-long)   (polyphony :signed-long)   (valid :signed-long)   (nc (:pointer :signed-long))   )(def-mactype :nastatptr (find-mactype '(:pointer :nastat)))(defrecord NAStat    (pieceCount :signed-long)   (piece (:array :nastatpiece 64))   ); ; --------------------------------; 	Note Allocator Prototypes; --------------------------------; ; ;  * System Configuration; ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NARegisterMusicDevice" ((ci (:pointer :componentinstancerecord)) (synthType :ostype) (name (:pointer (:string 31))) (connections (:pointer :synthesizerconnections)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci synthType name connections ((+ (ash 12 16) 0) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAUnregisterMusicDevice" ((ci (:pointer :componentinstancerecord)) (index :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci index ((+ (ash 4 16) 1) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAGetRegisteredMusicDevice" ((ci (:pointer :componentinstancerecord)) (index :signed-long) (synthType (:pointer :ostype)) (name (:pointer (:string 31))) (connections (:pointer :synthesizerconnections)) (mc (:pointer (:pointer :componentinstancerecord))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci index synthType name connections mc ((+ (ash 20 16) 2) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NASaveMusicConfiguration" ((ci (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci ((+ (ash 0 16) 3) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NANewNoteChannel" ((ci (:pointer :componentinstancerecord)) (NoteRequest (:pointer :noterequest)) (outChannel (:pointer (:pointer :signed-long))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteRequest outChannel ((+ (ash 8 16) 4) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NADisposeNoteChannel" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel ((+ (ash 4 16) 5) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAGetNoteChannelInfo" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (index (:pointer :signed-long)) (part (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel index part ((+ (ash 12 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAPrerollNoteChannel" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel ((+ (ash 4 16) 7) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAUnrollNoteChannel" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel ((+ (ash 4 16) 8) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NASetNoteChannelVolume" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (volume :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel volume ((+ (ash 8 16) 11) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAResetNoteChannel" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel ((+ (ash 4 16) 12) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAPlayNote" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (pitch :signed-long) (velocity :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel pitch velocity ((+ (ash 12 16) 13) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NASetController" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (controllerNumber :signed-long) (controllerValue :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel controllerNumber controllerValue ((+ (ash 12 16) 14) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NASetKnob" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (knobNumber :signed-long) (knobValue :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel knobNumber knobValue ((+ (ash 12 16) 15) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAFindNoteChannelTone" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (td (:pointer :tonedescription)) (instrumentNumber (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel td instrumentNumber ((+ (ash 12 16) 16) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NASetInstrumentNumber" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (instrumentNumber :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel instrumentNumber ((+ (ash 8 16) 17) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAPickInstrument" ((ci (:pointer :componentinstancerecord)) (filterProc :pointer) (prompt (:pointer (:string 255))) (sd (:pointer :tonedescription)) (flags :signed-long) (refCon :signed-long) (reserved1 :signed-long) (reserved2 :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci filterProc prompt sd flags refCon reserved1 reserved2 ((+ (ash 28 16) 18) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAPickArrangement" ((ci (:pointer :componentinstancerecord)) (filterProc :pointer) (prompt (:pointer (:string 255))) (zero1 :signed-long) (zero2 :signed-long) (t (:pointer :trackrecord)) (songName (:pointer (:string 255))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci filterProc prompt zero1 zero2 t songName ((+ (ash 24 16) 19) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAGetStatusBlock" ((ci (:pointer :componentinstancerecord)) (stat (:pointer :nastat)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci stat ((+ (ash 4 16) 20) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NASetDefaultMIDIInput" ((ci (:pointer :componentinstancerecord)) (sc (:pointer :synthesizerconnections)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci sc ((+ (ash 4 16) 21) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAGetDefaultMIDIInput" ((ci (:pointer :componentinstancerecord)) (sc (:pointer :synthesizerconnections)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci sc ((+ (ash 4 16) 22) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAUseDefaultMIDIInput" ((ci (:pointer :componentinstancerecord)) (readHook :pointer) (refCon :signed-long) (flags :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci readHook refCon flags ((+ (ash 12 16) 25) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NALoseDefaultMIDIInput" ((ci (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci ((+ (ash 0 16) 26) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAStuffToneDescription" ((ci (:pointer :componentinstancerecord)) (gmNumber :signed-long) (td (:pointer :tonedescription)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci gmNumber td ((+ (ash 8 16) 27) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NACopyrightDialog" ((ci (:pointer :componentinstancerecord)) (p (:handle :picture)) (author (:pointer (:string 255))) (copyright (:pointer (:string 255))) (other (:pointer (:string 255))) (title (:pointer (:string 255))) (filterProc :pointer) (refCon :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci p author copyright other title filterProc refCon ((+ (ash 28 16) 28) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAGetMIDIPorts" ((ci (:pointer :componentinstancerecord)) (inputPorts (:pointer :handle)) (outputPorts (:pointer :handle)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci inputPorts outputPorts ((+ (ash 8 16) 33) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAGetNoteRequest" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (nrOut (:pointer :noterequest)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel nrOut ((+ (ash 8 16) 34) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NASendMIDI" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (mp (:pointer :musicmidipacket)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel mp ((+ (ash 8 16) 35) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAPickEditInstrument" ((ci (:pointer :componentinstancerecord)) (filterProc :pointer) (prompt (:pointer (:string 255))) (refCon :signed-long) (nc (:pointer :signed-long)) (ai :handle) (flags :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci filterProc prompt refCon nc ai flags ((+ (ash 24 16) 36) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NANewNoteChannelFromAtomicInstrument" ((ci (:pointer :componentinstancerecord)) (instrument :pointer) (flags :signed-long) (outChannel (:pointer (:pointer :signed-long))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci instrument flags outChannel ((+ (ash 12 16) 37) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NASetAtomicInstrument" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (instrument :pointer) (flags :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel instrument flags ((+ (ash 12 16) 38) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NAGetKnob" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (knobNumber :signed-long) (knobValue (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel knobNumber knobValue ((+ (ash 12 16) 40) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NATask" ((ci (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci ((+ (ash 0 16) 41) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_NASetNoteChannelBalance" ((ci (:pointer :componentinstancerecord)) (NoteChannel (:pointer :signed-long)) (balance :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci NoteChannel balance ((+ (ash 8 16) 42) :signed-longint))); $ENDC(defconstant $kTuneQueueDepth 8)                ;   Deepest you can queue tune segments  (def-mactype :tunestatusptr (find-mactype '(:pointer :tunestatus)))(defrecord TuneStatus    (tune (:pointer :signed-long))               ;   currently playing tune     (tunePtr (:pointer :signed-long))            ;   position within currently playing piece     (time :signed-long)                          ;   current tune time     (queueCount :signed-integer)                 ;   how many pieces queued up?     (queueSpots :signed-integer)                 ;   How many more tunepieces can be queued     (queueTime :signed-long)                     ;   How much time is queued up? (can be very inaccurate)     (reserved (:array :signed-long 3))   )(defconstant $kStopTuneFade 1)                  ;   do a quick, synchronous fadeout  (defconstant $kStopTuneSustain 2)               ;   don't silece notes  (defconstant $kStopTuneInstant 4)               ;   silence notes fast (else, decay them)  (defconstant $kStopTuneReleaseChannels 8)       ;   afterwards, let the channels go  (def-mactype :tunecallbackprocptr (find-mactype ':pointer));  PROCEDURE TuneCallBack((CONST)VAR status: TuneStatus; refCon: LONGINT); (def-mactype :tuneplaycallbackprocptr (find-mactype ':pointer));  PROCEDURE TunePlayCallBack(VAR event: LONGINT; seed: LONGINT; refCon: LONGINT); (def-mactype :tunecallbackupp (find-mactype ':pointer))(def-mactype :tuneplaycallbackupp (find-mactype ':pointer))(def-mactype :tuneplayer (find-mactype '(:pointer :componentinstancerecord)))(defconstant $kMaxTunePlayerParts 48)(defconstant $kTunePlayerType :|tune|); $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneSetHeader" ((tp (:pointer :componentinstancerecord)) (header (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp header ((+ (ash 4 16) 4) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneGetTimeBase" ((tp (:pointer :componentinstancerecord)) (tb (:pointer (:pointer :timebaserecord))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp tb ((+ (ash 4 16) 5) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneSetTimeScale" ((tp (:pointer :componentinstancerecord)) (scale :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp scale ((+ (ash 4 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneGetTimeScale" ((tp (:pointer :componentinstancerecord)) (scale (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp scale ((+ (ash 4 16) 7) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneGetIndexedNoteChannel" ((tp (:pointer :componentinstancerecord)) (i :signed-long) (nc (:pointer (:pointer :signed-long))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp i nc ((+ (ash 8 16) 8) :signed-longint))); $ENDC;   Values for when to start.  (defconstant $kTuneStartNow 1)                  ;   start after buffer is implied  (defconstant $kTuneDontClipNotes 2)             ;   allow notes to finish their durations outside sample  (defconstant $kTuneExcludeEdgeNotes 4)          ;   dont play notes that start at end of tune  (defconstant $kTuneQuickStart 8)                ;   Leave all the controllers where they are, ignore start time  (defconstant $kTuneLoopUntil 16)                ;   loop a queued tune if there's nothing else in the queue  (defconstant $kTuneStartNewMaster 16384); $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneQueue" ((tp (:pointer :componentinstancerecord)) (tune (:pointer :signed-long)) (tuneRate :signed-long) (tuneStartPosition :signed-long) (tuneStopPosition :signed-long) (queueFlags :signed-long) (callBackProc :pointer) (refCon :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp tune tuneRate tuneStartPosition tuneStopPosition queueFlags callBackProc refCon ((+ (ash 28 16) 10) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneInstant" ((tp (:pointer :componentinstancerecord)) (tune :pointer) (tunePosition :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp tune tunePosition ((+ (ash 8 16) 11) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneGetStatus" ((tp (:pointer :componentinstancerecord)) (status (:pointer :tunestatus)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp status ((+ (ash 4 16) 12) :signed-longint))); $ENDC;   Values for when to start.  (defconstant $kStopSustain 1)                   ;   Leaves notes playing, not silent  (defconstant $kStopFadeout 2)                   ;   Does a synchronous fade-out  ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneStop" ((tp (:pointer :componentinstancerecord)) (stopFlags :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp stopFlags ((+ (ash 4 16) 13) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneSetVolume" ((tp (:pointer :componentinstancerecord)) (volume :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp volume ((+ (ash 4 16) 16) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneGetVolume" ((tp (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp ((+ (ash 0 16) 17) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TunePreroll" ((tp (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp ((+ (ash 0 16) 18) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneUnroll" ((tp (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp ((+ (ash 0 16) 19) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneSetNoteChannels" ((tp (:pointer :componentinstancerecord)) (count :signed-long) (noteChannelList (:pointer (:pointer :signed-long))) (playCallBackProc :pointer) (refCon :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp count noteChannelList playCallBackProc refCon ((+ (ash 16 16) 20) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneSetPartTranspose" ((tp (:pointer :componentinstancerecord)) (part :signed-long) (transpose :signed-long) (velocityShift :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp part transpose velocityShift ((+ (ash 12 16) 21) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneGetNoteAllocator" ((tp (:pointer :componentinstancerecord)))   (:stack (:pointer :componentinstancerecord))   (:stack-trap #xA82A :d0 0 tp ((+ (ash 0 16) 23) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneSetSofter" ((tp (:pointer :componentinstancerecord)) (softer :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp softer ((+ (ash 4 16) 24) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneTask" ((tp (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp ((+ (ash 0 16) 25) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TuneSetBalance" ((tp (:pointer :componentinstancerecord)) (balance :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 tp balance ((+ (ash 4 16) 26) :signed-longint))); $ENDC(def-mactype :musicopword (find-mactype ':signed-long))(def-mactype :musicopwordptr (find-mactype '(:pointer :signed-long))); ;  	QuickTime Music Track Event Formats:; ; 	At this time, QuickTime music tracks support 5 different event types -- REST events,; 	short NOTE events, short CONTROL events, short GENERAL events, Long NOTE events, ; 	long CONTROL events, and variable GENERAL events.;  ; 		¥ REST Event (4 bytes/event):; 	; 			(0 0 0) (5-bit UNUSED) (24-bit Rest Duration); 		; 		¥ÊShort NOTE Events (4 bytes/event):; 	; 			(0 0 1) (5-bit Part) (6-bit Pitch) (7-bit Volume) (11-bit Duration); 		; 			where:	Pitch is offset by 32 (Actual pitch = pitch field + 32); ; 		¥ÊShort CONTROL Events (4 bytes/event):; 	; 			(0 1 0) (5-bit Part) (8-bit Controller) (1-bit UNUSED) (1-bit Sign) (7-bit MSB) (7-bit LSB); 																		 ( or 15-bit Signed Value); 		¥ Short GENERAL Event (4 bytes/event):; 	; 			(0 1 1) (1-bit UNUSED) (12-bit Sub-Type) (16-bit Value); 	; 		¥ Long NOTE Events (8 bytes/event):; 	; 			(1 0 0 1) (12-bit Part) (1-bit UNUSED) (7-bit Pitch) (1-bit UNUSED) (7-bit Volume); 			(1 0) (8-bit UNUSED) (22-bit Duration); 		; 		¥ÊLong CONTROL Event (8 bytes/event):; 		; 			(1 0 1 0) (12-bit Part) (16-bit Value MSB) ; 			(1 0) (14-bit Controller) (16-bit Value LSB); 	; 		¥ÊLong KNOB Event (8 bytes/event):; 	; 			(1 0 1 1) (12-bit Sub-Type) (16-bit Value MSB); 			(1 0) (14-bit KNOB) (16-bit Value LSB); 	; 		¥ÊVariable GENERAL Length Events (N bytes/event):; 	; 			(1 1 1 1) (12-bit Sub-Type) (16-bit Length); 				:; 			(32-bit Data values); 				:; 			(1 1) (14-bit UNUSED) (16-bit Length); 	; 			where:	Length field is the number of LONG words in the record.; 					Lengths include the first and last long words (Minimum length = 2); 				; 	The following event type values have not been used yet and are reserved for ; 	future expansion:; 		; 		¥ (1 0 0 0)		(8 bytes/event); 		¥ (1 1 0 0)		(N bytes/event); 		¥ (1 1 0 1)		(N bytes/event); 		¥ (1 1 1 0)		(N bytes/event); 		; 	For all events, the following generalizations apply:; 	; 		-	All duration values are specified in Millisecond units.; 		- 	Pitch values are intended to map directly to the MIDI key numbers.; 		-	Controllers from 0 to 127 correspond to the standard MIDI controllers.; 			Controllers greater than 127 correspond to other controls (i.e., Pitch Bend, ; 			Key Pressure, and Channel Pressure).	; ;   Defines for the implemented music event data fields (defconstant $kRestEventType #x0)               ;   lower 3-bits  (defconstant $kNoteEventType #x1)               ;   lower 3-bits  (defconstant $kControlEventType #x2)            ;   lower 3-bits  (defconstant $kMarkerEventType #x3)             ;   lower 3-bits  (defconstant $kUndefined1EventType #x8)         ;   4-bits  (defconstant $kXNoteEventType #x9)              ;   4-bits  (defconstant $kXControlEventType #xA)           ;   4-bits  (defconstant $kKnobEventType #xB)               ;   4-bits  (defconstant $kUndefined2EventType #xC)         ;   4-bits  (defconstant $kUndefined3EventType #xD)         ;   4-bits  (defconstant $kUndefined4EventType #xE)         ;   4-bits  (defconstant $kGeneralEventType #xF)            ;   4-bits  (defconstant $kXEventLengthBits #x2)            ;   2 bits: indicates 8-byte event record  (defconstant $kGeneralEventLengthBits #x3)      ;   2 bits: indicates variable length event record  (defconstant $kEventLen 1)                      ;   length of events in long words  (defconstant $kXEventLen 2)(defconstant $kRestEventLen 1)                  ;   length of events in long words  (defconstant $kNoteEventLen 1)(defconstant $kControlEventLen 1)(defconstant $kMarkerEventLen 1)(defconstant $kXNoteEventLen 2)(defconstant $kXControlEventLen 2)(defconstant $kGeneralEventLen 2)               ;   2 or more, however  ;   Universal Event Defines (defconstant $kEventLengthFieldPos 30)          ;   by looking at these two bits of the 1st or last word 			  (defconstant $kEventLengthFieldWidth 2)         ;   of an event you can determine the event length 					  ;   length field: 0 & 1 => 1 long; 2 => 2 longs; 3 => variable length  (defconstant $kEventTypeFieldPos 29)            ;   event type field for short events  (defconstant $kEventTypeFieldWidth 3)           ;   short type is 3 bits  (defconstant $kXEventTypeFieldPos 28)           ;   event type field for extended events  (defconstant $kXEventTypeFieldWidth 4)          ;   extended type is 4 bits  (defconstant $kEventPartFieldPos 24)(defconstant $kEventPartFieldWidth 5)(defconstant $kXEventPartFieldPos 16)           ;   in the 1st long word  (defconstant $kXEventPartFieldWidth 12)         ;   Rest Events (defconstant $kRestEventDurationFieldPos 0)(defconstant $kRestEventDurationFieldWidth 24)(defconstant $kRestEventDurationMax #xFFFFFF)   ;   Note Events (defconstant $kNoteEventPitchFieldPos 18)(defconstant $kNoteEventPitchFieldWidth 6)(defconstant $kNoteEventPitchOffset 32)         ;   add to value in pitch field to get actual pitch  (defconstant $kNoteEventVolumeFieldPos 11)(defconstant $kNoteEventVolumeFieldWidth 7)(defconstant $kNoteEventVolumeOffset 0)         ;   add to value in volume field to get actual volume  (defconstant $kNoteEventDurationFieldPos 0)(defconstant $kNoteEventDurationFieldWidth 11)(defconstant $kNoteEventDurationMax #x7FF)(defconstant $kXNoteEventPitchFieldPos 0)       ;   in the 1st long word  (defconstant $kXNoteEventPitchFieldWidth 16)(defconstant $kXNoteEventDurationFieldPos 0)    ;   in the 2nd long word  (defconstant $kXNoteEventDurationFieldWidth 22)(defconstant $kXNoteEventDurationMax #x3FFFFF)(defconstant $kXNoteEventVolumeFieldPos 22)     ;   in the 2nd long word  (defconstant $kXNoteEventVolumeFieldWidth 7)    ;   Control Events (defconstant $kControlEventControllerFieldPos 16)(defconstant $kControlEventControllerFieldWidth 8)(defconstant $kControlEventValueFieldPos 0)(defconstant $kControlEventValueFieldWidth 16)(defconstant $kXControlEventControllerFieldPos 0);   in the 2nd long word  (defconstant $kXControlEventControllerFieldWidth 16)(defconstant $kXControlEventValueFieldPos 0)    ;   in the 1st long word  (defconstant $kXControlEventValueFieldWidth 16) ;   Knob Events (defconstant $kKnobEventValueHighFieldPos 0)    ;   1st long word  (defconstant $kKnobEventValueHighFieldWidth 16)(defconstant $kKnobEventKnobFieldPos 16)        ;   2nd long word  (defconstant $kKnobEventKnobFieldWidth 14)(defconstant $kKnobEventValueLowFieldPos 0)     ;   2nd long word  (defconstant $kKnobEventValueLowFieldWidth 16)  ;   Marker Events (defconstant $kMarkerEventSubtypeFieldPos 16)(defconstant $kMarkerEventSubtypeFieldWidth 8)(defconstant $kMarkerEventValueFieldPos 0)(defconstant $kMarkerEventValueFieldWidth 16)   ;   General Events (defconstant $kGeneralEventSubtypeFieldPos 16)  ;   in the last long word  (defconstant $kGeneralEventSubtypeFieldWidth 14)(defconstant $kGeneralEventLengthFieldPos 0)    ;   in the 1st & last long words  (defconstant $kGeneralEventLengthFieldWidth 16);   General Event Defined Types (defconstant $kGeneralEventNoteRequest 1)       ;   Encapsulates NoteRequest data structure  (defconstant $kGeneralEventPartKey 4)(defconstant $kGeneralEventTuneDifference 5)    ;   Contains a standard sequence, with end marker, for the tune difference of a sequence piece  (defconstant $kGeneralEventAtomicInstrument 6)  ;   Encapsulates AtomicInstrument record  (defconstant $kGeneralEventKnob 7)              ;   knobID/knobValue pairs; smallest event is 4 longs  (defconstant $kGeneralEventMIDIChannel 8)       ;   used in tune header, one longword identifies the midi channel it originally came from  ; alanr Thursday March 27,1997(defconstant $kGeneralEventPartFieldWidth 12)(defconstant $kGeneralEventPartFieldPos 16); end alanr Thursday March 27,1997;   Marker Event Defined Types		// marker is 60 ee vv vv in hex, where e = event type, and v = value (defconstant $kMarkerEventEnd 0)                ;   marker type 0 means: value 0 - stop, value != 0 - ignore (defconstant $kMarkerEventBeat 1)               ;   value 0 = single beat; anything else is 65536ths-of-a-beat (quarter note) (defconstant $kMarkerEventTempo 2)              ;   value same as beat marker, but indicates that a tempo event should be computed (based on where the next beat or tempo marker is) and emitted upon export ;   UPP call backs  (defconstant $uppMusicMIDISendProcInfo #xFF0)(defconstant $uppMusicMIDIReadHookProcInfo #x3F0)(defconstant $uppMusicOfflineDataProcInfo #xFF0)(defconstant $uppTuneCallBackProcInfo #x3C0)(defconstant $uppTunePlayCallBackProcInfo #xFC0); $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewMusicMIDISendProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewMusicMIDIReadHookProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewMusicOfflineDataProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewTuneCallBackProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewTunePlayCallBackProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallMusicMIDISendProc" ((self (:pointer :componentinstancerecord)) (refCon :signed-long) (mmp (:pointer :musicmidipacket)) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallMusicMIDIReadHookProc" ((mp (:pointer :musicmidipacket)) (myRefCon :signed-long) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallMusicOfflineDataProc" ((SoundData :pointer) (numBytes :signed-long) (myRefCon :signed-long) (userRoutine :pointer))   :signed-long   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallTuneCallBackProc" ((status (:pointer :tunestatus)) (refCon :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallTunePlayCallBackProc" ((event (:pointer :signed-long)) (seed :signed-long) (refCon :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := QuickTimeMusicIncludes; $ENDC                                         ; __QUICKTIMEMUSIC__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'QuickTimeMusic)