(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:SoundComponents.p"; at Tuesday June 6,1995 2:21:16 pm.; ;  	File:		SoundComponents.p;  ;  	Contains:	Sound Components Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __SOUNDCOMPONENTS__; $SETC __SOUNDCOMPONENTS__ := 1; $I+; $SETC SoundComponentsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __COMPONENTS__|#(require-interface 'Components)#|                                              ; $I Components.p |#                                             ; $ENDC; 	MixedMode.p													#|                                              ; $IFC UNDEFINED __SOUND__|#(require-interface 'Sound)#|                                              ; $I Sound.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;  constants; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; sound component set/get info selectors(defconstant $siVolume :|volu|)(defconstant $siHardwareVolume :|hvol|)(defconstant $siSpeakerVolume :|svol|)(defconstant $siHeadphoneVolume :|pvol|)(defconstant $siHardwareVolumeSteps :|hstp|)(defconstant $siHeadphoneVolumeSteps :|hdst|)(defconstant $siHardwareMute :|hmut|)(defconstant $siSpeakerMute :|smut|)(defconstant $siHeadphoneMute :|pmut|)(defconstant $siRateMultiplier :|rmul|)(defconstant $siQuality :|qual|); format types(defconstant $kOffsetBinary :|raw |)(defconstant $kTwosComplement :|twos|)(defconstant $kMACE3Compression :|MAC3|)(defconstant $kMACE6Compression :|MAC6|); quality flags; use interpolation in rate conversion(defconstant $kBestQuality 1); useful bit masks(defconstant $kInputMask #xFF)                  ; masks off input bits(defconstant $kOutputMask #xFF00)               ; masks off output bits(defconstant $kOutputShift 8)                   ; amount output bits are shifted(defconstant $kActionMask #xFF0000)             ; masks off action bits(defconstant $kSoundComponentBits #xFFFFFF); SoundComponentPlaySourceBuffer action flags(defconstant $kSourcePaused 1)(defconstant $kPassThrough 65536)(defconstant $kNoSoundComponentChain 131072); flags for OpenMixerSoundComponent(defconstant $kNoMixing 1)                      ; don't mix source(defconstant $kNoSampleRateConversion 2)        ; don't convert sample rate (i.e. 11 kHz -> 22 kHz)(defconstant $kNoSampleSizeConversion 4)        ; don't convert sample size (i.e. 16 -> 8)(defconstant $kNoSampleFormatConversion 8)      ; don't convert sample format (i.e. 'twos' -> 'raw ')(defconstant $kNoChannelConversion 16)          ; don't convert stereo/mono(defconstant $kNoDecompression 32)              ; don't decompress (i.e. 'MAC3' -> 'raw ')(defconstant $kNoVolumeConversion 64)           ; don't apply volume(defconstant $kNoRealtimeProcessing 128)        ; won't run at interrupt time; Audio Component constants; Values for whichChannel parameter(defconstant $audioAllChannels 0)               ; All channels (usually interpreted as both left and right)(defconstant $audioLeftChannel 1)               ; Left channel(defconstant $audioRightChannel 2)              ; Right channel; Values for mute parameter(defconstant $audioUnmuted 0)                   ; Device is unmuted(defconstant $audioMuted 1)                     ; Device is muted; Capabilities flags definitions(defconstant $audioDoesMono 1)                  ; Device supports mono output(defconstant $audioDoesStereo 2)                ; Device supports stereo output(defconstant $audioDoesIndependentChannels 4)   ; Device supports independent software control of each channel; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;  typedefs; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ShortFixed consists of an 8 bit, 2's complement integer part in the high byte,; with an 8 bit fractional part in the low byte; its range is -128 to 127.99609375(def-mactype :shortfixed (find-mactype ':signed-integer))(def-mactype :soundcomponentdataptr (find-mactype '(:pointer :soundcomponentdata)))(defrecord SoundComponentData    (flags :signed-long)   (format :ostype)   (numChannels :signed-integer)   (sampleSize :signed-integer)   (sampleRate :signed-long)   (sampleCount :signed-long)   (buffer (:pointer :unsigned-byte))   (reserved :signed-long)   )(def-mactype :soundparamblockptr (find-mactype '(:pointer :soundparamblock)))(def-mactype :soundparamprocptr (find-mactype ':pointer));  FUNCTION SoundParam(VAR pb: SoundParamBlockPtr): BOOLEAN; (def-mactype :soundparamupp (find-mactype ':pointer))(defrecord SoundParamBlock    (recordSize :signed-long)                    ; size of this record in bytes   (desc :soundcomponentdata)                   ; description of sound buffer   (rateMultiplier :signed-long)                ; rate multiplier to apply to sound   (leftVolume :signed-integer)                 ; volumes to apply to sound   (rightVolume :signed-integer)   (quality :signed-long)                       ; quality to apply to sound   (filter (:pointer :componentinstancerecord)) ; filter to apply to sound   (moreRtn :pointer)                           ; routine to call to get more data   (completionRtn :pointer)                     ; routine to call when buffer is complete   (refCon :signed-long)                        ; user refcon   (result :signed-integer)                     ; result   )(def-mactype :soundsource (find-mactype ':pointer))(defrecord AudioInfo    (capabilitiesFlags :signed-long)             ; Describes device capabilities   (reserved :signed-long)                      ; Reserved by Apple   ;;Changing field numvolumesteps from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (numVolumeSteps :unsigned-word)              ; Number of significant increments between min and max volume   )(def-mactype :audioinfoptr (find-mactype '(:pointer :audioinfo))); ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;  functions for sound components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; Sound Component dispatch selectors; these calls cannot be delegated(defconstant $kSoundComponentInitOutputDeviceSelect 1)(defconstant $kSoundComponentSetSourceSelect 2)(defconstant $kSoundComponentGetSourceSelect 3)(defconstant $kSoundComponentGetSourceDataSelect 4)(defconstant $kSoundComponentSetOutputSelect 5)(defconstant $kDelegatedSoundComponentSelectors #x100); first selector that can be delegated up the chain; these calls can be delegated and have own range(defconstant $kSoundComponentAddSourceSelect (+ #$kDelegatedSoundComponentSelectors 1))(defconstant $kSoundComponentRemoveSourceSelect (+ #$kDelegatedSoundComponentSelectors 2))(defconstant $kSoundComponentGetInfoSelect (+ #$kDelegatedSoundComponentSelectors 3))(defconstant $kSoundComponentSetInfoSelect (+ #$kDelegatedSoundComponentSelectors 4))(defconstant $kSoundComponentStartSourceSelect (+ #$kDelegatedSoundComponentSelectors 5))(defconstant $kSoundComponentStopSourceSelect (+ #$kDelegatedSoundComponentSelectors 6))(defconstant $kSoundComponentPauseSourceSelect (+ #$kDelegatedSoundComponentSelectors 7))(defconstant $kSoundComponentPlaySourceBufferSelect (+ #$kDelegatedSoundComponentSelectors 8)); Audio Component selectors(defconstant $kAudioGetVolumeSelect 0)(defconstant $kAudioSetVolumeSelect 1)(defconstant $kAudioGetMuteSelect 2)(defconstant $kAudioSetMuteSelect 3)(defconstant $kAudioSetToDefaultsSelect 4)(defconstant $kAudioGetInfoSelect 5)(defconstant $kAudioGetBassSelect 6)(defconstant $kAudioSetBassSelect 7)(defconstant $kAudioGetTrebleSelect 8)(defconstant $kAudioSetTrebleSelect 9)(defconstant $kAudioGetOutputDeviceSelect 10)(defconstant $kAudioMuteOnEventSelect 129); ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;  Sound Manager 3.0 utilities; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_OpenMixerSoundComponent" ((outputDescription (:pointer :soundcomponentdata)) (outputFlags :signed-long) (mixerComponent (:pointer (:pointer :componentinstancerecord))))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 1556 16) 24) outputDescription outputFlags mixerComponent)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap "_CloseMixerSoundComponent" ((ci (:pointer :componentinstancerecord)))   (:stack :signed-integer)   (:stack-trap #xA800 :d0 (+ (ash 536 16) 24) ci)); $ENDC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;  basic sound component functions; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentInitOutputDevice" ((ti (:pointer :componentinstancerecord)) (actions :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti actions ((+ (ash 4 16) 1) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentSetSource" ((ti (:pointer :componentinstancerecord)) (sourceID :pointer) (source (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti sourceID source ((+ (ash 8 16) 2) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentGetSource" ((ti (:pointer :componentinstancerecord)) (sourceID :pointer) (source (:pointer (:pointer :componentinstancerecord))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti sourceID source ((+ (ash 8 16) 3) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentGetSourceData" ((ti (:pointer :componentinstancerecord)) (sourceData (:pointer (:pointer :soundcomponentdata))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti sourceData ((+ (ash 4 16) 4) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentSetOutput" ((ti (:pointer :componentinstancerecord)) (requested (:pointer :soundcomponentdata)) (actual (:pointer (:pointer :soundcomponentdata))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti requested actual ((+ (ash 8 16) 5) :signed-longint))); $ENDC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;  junction methods for the mixer, must be called at non-interrupt level; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentAddSource" ((ti (:pointer :componentinstancerecord)) (sourceID (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti sourceID ((+ (ash 4 16) 257) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentRemoveSource" ((ti (:pointer :componentinstancerecord)) (sourceID :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti sourceID ((+ (ash 4 16) 258) :signed-longint))); $ENDC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;  info methods; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentGetInfo" ((ti (:pointer :componentinstancerecord)) (sourceID :pointer) (selector :ostype) (infoPtr :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti sourceID selector infoPtr ((+ (ash 12 16) 259) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentSetInfo" ((ti (:pointer :componentinstancerecord)) (sourceID :pointer) (selector :ostype) (infoPtr :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti sourceID selector infoPtr ((+ (ash 12 16) 260) :signed-longint))); $ENDC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;  control methods; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentStartSource" ((ti (:pointer :componentinstancerecord)) (count :signed-integer) (sources (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti count sources ((+ (ash 6 16) 261) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentStopSource" ((ti (:pointer :componentinstancerecord)) (count :signed-integer) (sources (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti count sources ((+ (ash 6 16) 262) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentPauseSource" ((ti (:pointer :componentinstancerecord)) (count :signed-integer) (sources (:pointer :pointer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti count sources ((+ (ash 6 16) 263) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SoundComponentPlaySourceBuffer" ((ti (:pointer :componentinstancerecord)) (sourceID :pointer) (pb (:pointer :soundparamblock)) (actions :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ti sourceID pb actions ((+ (ash 12 16) 264) :signed-longint))); $ENDC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;  interface for Audio Components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; Volume is described as a value between 0 and 1, with 0 indicating minimum;   volume and 1 indicating maximum volume; if the device doesn't support;   software control of volume, then a value of unimpErr is returned, indicating;   that these functions are not supported by the device; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioGetVolume" ((ac (:pointer :componentinstancerecord)) (whichChannel :signed-integer) (volume (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac whichChannel volume ((+ (ash 6 16) 0) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioSetVolume" ((ac (:pointer :componentinstancerecord)) (whichChannel :signed-integer) (volume :signed-integer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac whichChannel volume ((+ (ash 4 16) 1) :signed-longint))); $ENDC; If the device doesn't support software control of mute, then a value of unimpErr is; returned, indicating that these functions are not supported by the device; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioGetMute" ((ac (:pointer :componentinstancerecord)) (whichChannel :signed-integer) (mute (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac whichChannel mute ((+ (ash 6 16) 2) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioSetMute" ((ac (:pointer :componentinstancerecord)) (whichChannel :signed-integer) (mute :signed-integer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac whichChannel mute ((+ (ash 4 16) 3) :signed-longint))); $ENDC; AudioSetToDefaults causes the associated device to reset its volume and mute values; (and perhaps other characteristics, e.g. attenuation) to "factory default" settings; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioSetToDefaults" ((ac (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac ((+ (ash 0 16) 4) :signed-longint))); $ENDC; This routine is required; it must be implemented by all audio components; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioGetInfo" ((ac (:pointer :componentinstancerecord)) (info (:pointer :audioinfo)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac info ((+ (ash 4 16) 5) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioGetBass" ((ac (:pointer :componentinstancerecord)) (whichChannel :signed-integer) (bass (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac whichChannel bass ((+ (ash 6 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioSetBass" ((ac (:pointer :componentinstancerecord)) (whichChannel :signed-integer) (bass :signed-integer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac whichChannel bass ((+ (ash 4 16) 7) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioGetTreble" ((ac (:pointer :componentinstancerecord)) (whichChannel :signed-integer) (Treble (:pointer :signed-integer)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac whichChannel Treble ((+ (ash 6 16) 8) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioSetTreble" ((ac (:pointer :componentinstancerecord)) (whichChannel :signed-integer) (Treble :signed-integer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac whichChannel Treble ((+ (ash 4 16) 9) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioGetOutputDevice" ((ac (:pointer :componentinstancerecord)) (outputDevice (:pointer (:pointer :componentrecord))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac outputDevice ((+ (ash 4 16) 10) :signed-longint))); $ENDC; This is routine is private to the AudioVision component.  It enables the watching of the mute key.; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_AudioMuteOnEvent" ((ac (:pointer :componentinstancerecord)) (muteOnEvent :signed-integer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ac muteOnEvent ((+ (ash 2 16) 129) :signed-longint))); $ENDC(defconstant $uppSoundParamProcInfo #xD0)       ;  FUNCTION (4 byte param): 1 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSoundParamProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallSoundParamProc" ((pb (:pointer (:pointer :soundparamblock))) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := SoundComponentsIncludes; $ENDC                                         ; __SOUNDCOMPONENTS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'SoundComponents)