(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:IntlResources.p"; at Tuesday June 6,1995 2:02:33 pm.; ;  	File:		IntlResources.p;  ;  	Contains:	International Resource definitions.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __INTLRESOURCES__; $SETC __INTLRESOURCES__ := 1; $I+; $SETC IntlResourcesIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											; $PUSH; $ALIGN MAC68K; $LibExport+;  Bits in the itlcFlags byte (defconstant $itlcShowIcon 7)                   ; Show icon even if only one script(defconstant $itlcDualCaret 6)                  ; Use dual caret for mixed direction text;  Bits in the itlcSysFlags word (defconstant $itlcSysDirection 15)              ; System direction - left to right/right to left;  the NumberParts indices (defconstant $tokLeftQuote 1)(defconstant $tokRightQuote 2)(defconstant $tokLeadPlacer 3)(defconstant $tokLeader 4)(defconstant $tokNonLeader 5)(defconstant $tokZeroLead 6)(defconstant $tokPercent 7)(defconstant $tokPlusSign 8)(defconstant $tokMinusSign 9)(defconstant $tokThousands 10)(defconstant $tokSeparator 12)                  ; 11 is a reserved field(defconstant $tokEscape 13)(defconstant $tokDecPoint 14)(defconstant $tokEPlus 15)(defconstant $tokEMinus 16)(defconstant $tokMaxSymbols 31)(defconstant $curNumberPartsVersion 1)          ; current version of NumberParts record(defconstant $currSymLead 16)(defconstant $currNegSym 32)(defconstant $currTrailingZ 64)(defconstant $currLeadingZ 128)(defconstant $mdy 0)(defconstant $dmy 1)(defconstant $ymd 2)(defconstant $myd 3)(defconstant $dym 4)(defconstant $ydm 5)(def-mactype :dateorders (find-mactype ':signed-byte))(defconstant $timeCycle24 0)                    ; time sequence 0:00 - 23:59(defconstant $timeCycleZero 1)                  ; time sequence 0:00-11:59, 0:00 - 11:59(defconstant $timeCycle12 255)                  ; time sequence 12:00 - 11:59, 12:00 - 11:59(defconstant $zeroCycle 1)                      ; old name for timeCycleZero(defconstant $longDay 0)                        ; day of the month(defconstant $longWeek 1)                       ; day of the week(defconstant $longMonth 2)                      ; month of the year(defconstant $longYear 3)                       ; year(defconstant $supDay 1)                         ; suppress day of month(defconstant $supWeek 2)                        ; suppress day of week(defconstant $supMonth 4)                       ; suppress month(defconstant $supYear 8)                        ; suppress year(defconstant $dayLdingZ 32)(defconstant $mntLdingZ 64)(defconstant $century 128)(defconstant $secLeadingZ 32)(defconstant $minLeadingZ 64)(defconstant $hrLeadingZ 128);  move OffsetTable to QuickdrawText (defrecord (Intl0Rec :handle)    (decimalPt :character)                       ; decimal point character   (thousSep :character)                        ; thousands separator character   (listSep :character)                         ; list separator character   (currSym1 :character)                        ; currency symbol   (currSym2 :character)   (currSym3 :character)   (currFmt :unsigned-byte)                     ; currency format flags   (dateOrder :unsigned-byte)                   ; order of short date elements: mdy, dmy, etc.   (shrtDateFmt :unsigned-byte)                 ; format flags for each short date element   (dateSep :character)                         ; date separator character   (timeCycle :unsigned-byte)                   ; specifies time cycle: 0..23, 1..12, or 0..11   (timeFmt :unsigned-byte)                     ; format flags for each time element   (mornStr (:array :character 4 :packed))      ; trailing string for AM if 12-hour cycle   (eveStr (:array :character 4 :packed))       ; trailing string for PM if 12-hour cycle   (timeSep :character)                         ; time separator character   (time1Suff :character)                       ; trailing string for AM if 24-hour cycle   (time2Suff :character)   (time3Suff :character)   (time4Suff :character)   (time5Suff :character)                       ; trailing string for PM if 24-hour cycle   (time6Suff :character)   (time7Suff :character)   (time8Suff :character)   (metricSys :unsigned-byte)                   ; 255 if metric, 0 if inches etc.   (intl0Vers :signed-integer)                  ; region code (hi byte) and version (lo byte)   )(def-mactype :intl0ptr (find-mactype '(:pointer :intl0rec)))(def-mactype :intl0hndl (find-mactype '(:handle :intl0rec)))(defrecord (Intl1Rec :handle)    (days (:array (:string 15) 7))               ; day names   (months (:array (:string 15) 12))            ; month names   (suppressDay :unsigned-byte)                 ; 255 for no day, or flags to suppress any element   (lngDateFmt :unsigned-byte)                  ; order of long date elements   (dayLeading0 :unsigned-byte)                 ; 255 for leading 0 in day number   (abbrLen :unsigned-byte)                     ; length for abbreviating names   (st0 (:array :character 4 :packed))          ; separator strings for long date format   (st1 (:array :character 4 :packed))   (st2 (:array :character 4 :packed))   (st3 (:array :character 4 :packed))   (st4 (:array :character 4 :packed))   (intl1Vers :signed-integer)                  ; region code (hi byte) and version (lo byte)   (localRtn (:array :signed-integer 1))        ; now a flag for opt extension   )(def-mactype :intl1ptr (find-mactype '(:pointer :intl1rec)))(def-mactype :intl1hndl (find-mactype '(:handle :intl1rec))); fields for optional itl1 extension(defrecord Itl1ExtRec    (base :intl1rec)                             ; un-extended Intl1Rec   (version :signed-integer)   (format :signed-integer)   (calendarCode :signed-integer)               ; calendar code for this itl1 resource   (extraDaysTableOffset :signed-long)          ; offset in itl1 to extra days table   (extraDaysTableLength :signed-long)          ; length of extra days table   (extraMonthsTableOffset :signed-long)        ; offset in itl1 to extra months table   (extraMonthsTableLength :signed-long)        ; length of extra months table   (abbrevDaysTableOffset :signed-long)         ; offset in itl1 to abbrev days table   (abbrevDaysTableLength :signed-long)         ; length of abbrev days table   (abbrevMonthsTableOffset :signed-long)       ; offset in itl1 to abbrev months table   (abbrevMonthsTableLength :signed-long)       ; length of abbrev months table   (extraSepsTableOffset :signed-long)          ; offset in itl1 to extra seps table   (extraSepsTableLength :signed-long)          ; length of extra seps table   (tables (:array :signed-integer 1))          ; now a flag for opt extension   )(defrecord (UntokenTable :handle)    (len :signed-integer)   (lastToken :signed-integer)   (index (:array :signed-integer 256))         ; index table; last = lastToken   )(def-mactype :untokentableptr (find-mactype '(:pointer :untokentable)))(def-mactype :untokentablehandle (find-mactype '(:handle :untokentable)))(defrecord WideChar    (:variant       (      (a (:array :character 2 :packed))         ; 0 is the high order character      )      (      (b :signed-integer)      )      )   )(defrecord WideCharArr    (size :signed-integer)   (data (:array :widechar 10))   )(defrecord NumberParts    (version :signed-integer)   (data (:array :widechar 31 :packed))         ; index by [tokLeftQuote..tokMaxSymbols]   (pePlus :widechararr)   (peMinus :widechararr)   (peMinusPlus :widechararr)   (altNumTable :widechararr)   (reserved (:array :character 20 :packed))   )(def-mactype :numberpartsptr (find-mactype '(:pointer :numberparts)))(defrecord (Itl4Rec :handle)    (flags :signed-integer)                      ; reserved   (resourceType :signed-long)                  ; contains 'itl4'   (resourceNum :signed-integer)                ; resource ID   (version :signed-integer)                    ; version number   (resHeader1 :signed-long)                    ; reserved   (resHeader2 :signed-long)                    ; reserved   (numTables :signed-integer)                  ; number of tables, one-based   (mapOffset :signed-long)                     ; offset to table that maps byte to token   (strOffset :signed-long)                     ; offset to routine that copies canonical string   (fetchOffset :signed-long)                   ; offset to routine that gets next byte of character   (unTokenOffset :signed-long)                 ; offset to table that maps token to canonical string   (defPartsOffset :signed-long)                ; offset to default number parts table   (resOffset6 :signed-long)                    ; reserved   (resOffset7 :signed-long)                    ; reserved   (resOffset8 :signed-long)                    ; reserved   )(def-mactype :itl4ptr (find-mactype '(:pointer :itl4rec)))(def-mactype :itl4handle (find-mactype '(:handle :itl4rec)));  New NItl4Rec for System 7.0: (defrecord (NItl4Rec :handle)    (flags :signed-integer)                      ; reserved   (resourceType :signed-long)                  ; contains 'itl4'   (resourceNum :signed-integer)                ; resource ID   (version :signed-integer)                    ; version number   (format :signed-integer)                     ; format code   (resHeader :signed-integer)                  ; reserved   (resHeader2 :signed-long)                    ; reserved   (numTables :signed-integer)                  ; number of tables, one-based   (mapOffset :signed-long)                     ; offset to table that maps byte to token   (strOffset :signed-long)                     ; offset to routine that copies canonical string   (fetchOffset :signed-long)                   ; offset to routine that gets next byte of character   (unTokenOffset :signed-long)                 ; offset to table that maps token to canonical string   (defPartsOffset :signed-long)                ; offset to default number parts table   (whtSpListOffset :signed-long)               ; offset to white space code list   (resOffset7 :signed-long)                    ; reserved   (resOffset8 :signed-long)                    ; reserved   (resLength1 :signed-integer)                 ; reserved   (resLength2 :signed-integer)                 ; reserved   (resLength3 :signed-integer)                 ; reserved   (unTokenLength :signed-integer)              ; length of untoken table   (defPartsLength :signed-integer)             ; length of default number parts table   (whtSpListLength :signed-integer)            ; length of white space code list   (resLength7 :signed-integer)                 ; reserved   (resLength8 :signed-integer)                 ; reserved   )(def-mactype :nitl4ptr (find-mactype '(:pointer :nitl4rec)))(def-mactype :nitl4handle (find-mactype '(:handle :nitl4rec)))(defrecord TableDirectoryRecord    (tableSignature :ostype)                     ; 4 byte long table name    (reserved :signed-long)                      ; Reserved for internal use    ;;Changing field tablestartoffset from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tableStartOffset :unsigned-long)            ; Table start offset in byte   ;;Changing field tablesize from signed-long to unsigned-long to match C header (pretty-darn-sure)   (tableSize :unsigned-long)                   ; Table size in byte   )(defrecord Itl5Record    (versionNumber :signed-long)                 ; itl5 resource version number    ;;Changing field numberoftables from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (numberOfTables :unsigned-word)              ; Number of tables it contains    (reserved (:array :signed-integer 3))        ; Reserved for internal use    (tableDirectory (:array :tabledirectoryrecord 1)); Table directory records    )(defrecord RuleBasedTrslRecord    (sourceType :signed-integer)                 ; Transliterate target type for the LHS of the rule    (targetType :signed-integer)                 ; Transliterate target type for the RHS of the rule    (formatNumber :signed-integer)               ; Transliterate resource format number    (propertyFlag :signed-integer)               ; Transliterate property flags    (numberOfRules :signed-integer)              ; Number of rules following this field    )(defrecord ItlcRecord    (itlcSystem :signed-integer)                 ; default system script   (itlcReserved :signed-integer)               ; reserved   (itlcFontForce :signed-byte)                 ; default font force flag   (itlcIntlForce :signed-byte)                 ; default intl force flag   (itlcOldKybd :signed-byte)                   ; MacPlus intl keybd flag   (itlcFlags :signed-byte)                     ; general flags   (itlcIconOffset :signed-integer)             ; keyboard icon offset; not used in 7.0   (itlcIconSide :signed-byte)                  ; keyboard icon side; not used in 7.0   (itlcIconRsvd :signed-byte)                  ; rsvd for other icon info   (itlcRegionCode :signed-integer)             ; preferred verXxx code   (itlcSysFlags :signed-integer)               ; flags for setting system globals   (itlcReserved4 (:array :signed-byte 32 :packed)); for future use   )(defrecord ItlbRecord    (itlbNumber :signed-integer)                 ; itl0 id number   (itlbDate :signed-integer)                   ; itl1 id number   (itlbSort :signed-integer)                   ; itl2 id number   (itlbFlags :signed-integer)                  ; Script flags   (itlbToken :signed-integer)                  ; itl4 id number   (itlbEncoding :signed-integer)               ; itl5 ID # (optional; char encoding)   (itlbLang :signed-integer)                   ; current language for script    (itlbNumRep :signed-byte)                    ; number representation code   (itlbDateRep :signed-byte)                   ; date representation code    (itlbKeys :signed-integer)                   ; KCHR id number   (itlbIcon :signed-integer)                   ; ID # of SICN or kcs#/kcs4/kcs8 suite.   );  New ItlbExtRecord structure for System 7.0 (defrecord ItlbExtRecord    (base :itlbrecord)                           ; un-extended ItlbRecord   (itlbLocalSize :signed-long)                 ; size of script's local record   (itlbMonoFond :signed-integer)               ; default monospace FOND ID   (itlbMonoSize :signed-integer)               ; default monospace font size   (itlbPrefFond :signed-integer)               ; preferred FOND ID   (itlbPrefSize :signed-integer)               ; preferred font size   (itlbSmallFond :signed-integer)              ; default small FOND ID   (itlbSmallSize :signed-integer)              ; default small font size   (itlbSysFond :signed-integer)                ; default system FOND ID   (itlbSysSize :signed-integer)                ; default system font size   (itlbAppFond :signed-integer)                ; default application FOND ID   (itlbAppSize :signed-integer)                ; default application font size   (itlbHelpFond :signed-integer)               ; default Help Mgr FOND ID   (itlbHelpSize :signed-integer)               ; default Help Mgr font size   (itlbValidStyles :unsigned-byte)             ; set of valid styles for script   (itlbAliasStyle :unsigned-byte)              ; style (set) to mark aliases   ); $ALIGN RESET; $POP; $SETC UsingIncludes := IntlResourcesIncludes; $ENDC                                         ; __INTLRESOURCES__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'IntlResources)