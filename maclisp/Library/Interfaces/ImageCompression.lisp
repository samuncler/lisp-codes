(in-package :TRAPS); Generated from #P"Cohones:Lisp:Projects:PInterface Translator:Source interfaces:Quicktime 2.5 PInterfaces:ImageCompression.p"; at Thursday May 23,1996 2:22:47 pm.; ;  	File:		ImageCompression.p;  ;  	Contains:	QuickTime interfaces;  ;  	Version:	Technology:	;  				Release:	QuickTime 2.5 interfaces to use with ETO #20;  ;  	Copyright:	© 1984-1996 by Apple Computer, Inc.  All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, send the file and version;  				information (from above) and the problem description to:;  ;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __IMAGECOMPRESSION__; $SETC __IMAGECOMPRESSION__ := 1; $I+; $SETC ImageCompressionIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; $IFC UNDEFINED __QDOFFSCREEN__(require-interface 'QDOffscreen)                ; $I QDOffscreen.p; $ENDC#|                                              ; $IFC UNDEFINED __COMPONENTS__|#(require-interface 'Components)#|                                              ; $I Components.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __WINDOWS__|#(require-interface 'Windows)#|                                              ; $I Windows.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __STANDARDFILE__|#(require-interface 'StandardFile)#|                                              ; $I StandardFile.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(def-mactype :matrixrecordptr (find-mactype '(:pointer :matrixrecord)))(defrecord MatrixRecord    (matrix (:array :signed-long 3 3))   )(def-mactype :fixedpointptr (find-mactype '(:pointer :fixedpoint)))(defrecord FixedPoint    (x :signed-long)   (y :signed-long)   )(def-mactype :fixedrectptr (find-mactype '(:pointer :fixedrect)))(defrecord FixedRect    (left :signed-long)   (top :signed-long)   (right :signed-long)   (bottom :signed-long)   );   These are the bits that are set in the Component flags, and also in the codecInfo struct.  (defconstant $codecInfoDoes1 #x1)(defconstant $codecInfoDoes2 #x2)(defconstant $codecInfoDoes4 #x4)(defconstant $codecInfoDoes8 #x8)(defconstant $codecInfoDoes16 #x10)(defconstant $codecInfoDoes32 #x20)(defconstant $codecInfoDoesDither #x40)(defconstant $codecInfoDoesStretch #x80)(defconstant $codecInfoDoesShrink #x100)(defconstant $codecInfoDoesMask #x200)(defconstant $codecInfoDoesTemporal #x400)(defconstant $codecInfoDoesDouble #x800)(defconstant $codecInfoDoesQuad #x1000)(defconstant $codecInfoDoesHalf #x2000)(defconstant $codecInfoDoesQuarter #x4000)(defconstant $codecInfoDoesRotate #x8000)(defconstant $codecInfoDoesHorizFlip #x10000)(defconstant $codecInfoDoesVertFlip #x20000)(defconstant $codecInfoDoesSkew #x40000)(defconstant $codecInfoDoesBlend #x80000)(defconstant $codecInfoDoesWarp #x100000)(defconstant $codecInfoDoesRecompress #x200000)(defconstant $codecInfoDoesSpool #x400000)(defconstant $codecInfoDoesRateConstrain #x800000)(defconstant $codecInfoDepth1 #x1)(defconstant $codecInfoDepth2 #x2)(defconstant $codecInfoDepth4 #x4)(defconstant $codecInfoDepth8 #x8)(defconstant $codecInfoDepth16 #x10)(defconstant $codecInfoDepth32 #x20)(defconstant $codecInfoDepth24 #x40)(defconstant $codecInfoDepth33 #x80)(defconstant $codecInfoDepth34 #x100)(defconstant $codecInfoDepth36 #x200)(defconstant $codecInfoDepth40 #x400)(defconstant $codecInfoStoresClut #x800)(defconstant $codecInfoDoesLossless #x1000)(defconstant $codecInfoSequenceSensitive #x2000)(defconstant $codecFlagUseImageBuffer #x1)(defconstant $codecFlagUseScreenBuffer #x2)(defconstant $codecFlagUpdatePrevious #x4)(defconstant $codecFlagNoScreenUpdate #x8)(defconstant $codecFlagWasCompressed #x10)(defconstant $codecFlagDontOffscreen #x20)(defconstant $codecFlagUpdatePreviousComp #x40)(defconstant $codecFlagForceKeyFrame #x80)(defconstant $codecFlagOnlyScreenUpdate #x100)(defconstant $codecFlagLiveGrab #x200)(defconstant $codecFlagDontUseNewImageBuffer #x400)(defconstant $codecFlagInterlaceUpdate #x800)(defconstant $codecFlagCatchUpDiff #x1000)(defconstant $codecFlagUsedNewImageBuffer #x4000)(defconstant $codecFlagUsedImageBuffer #x8000)(defconstant $codecNoMemoryPleaseWaitErr -8977);   The minimum data size for spooling in or out data  (defconstant $codecMinimumDataSize 32768)(defconstant $compressorComponentType :|imco|)  ;   the type for "Components" which compress images  (defconstant $decompressorComponentType :|imdc|);   the type for "Components" which decompress images  (def-mactype :compressorcomponent (find-mactype '(:pointer :componentrecord)))(def-mactype :decompressorcomponent (find-mactype '(:pointer :componentrecord)))(def-mactype :codeccomponent (find-mactype '(:pointer :componentrecord)))(defconstant $anyCodec 0)                       ;   take first working codec of given type  (defconstant $bestSpeedCodec -1)                ;   take fastest codec of given type  (defconstant $bestFidelityCodec -2)             ;   take codec which is most accurate  (defconstant $bestCompressionCodec -3)          ;   take codec of given type that is most accurate  ; Warning: Patching def of type CodecType from translator table: was :signed-long, is now :ostype(def-mactype :codectype (find-mactype :ostype))#| (def-mactype :codectype (find-mactype ':signed-long)) |#(def-mactype :codecflags (find-mactype ':signed-integer))(def-mactype :codecq (find-mactype ':signed-long))(defconstant $codecLosslessQuality #x400)(defconstant $codecMaxQuality #x3FF)(defconstant $codecMinQuality #x0)(defconstant $codecLowQuality #x100)(defconstant $codecNormalQuality #x200)(defconstant $codecHighQuality #x300)(defconstant $codecCompletionSource #x1)        ;   asynchronous codec is done with source data  (defconstant $codecCompletionDest #x2)          ;   asynchronous codec is done with destination data  (defconstant $codecCompletionDontUnshield #x4)  ;   on dest complete don't unshield cursor  (defconstant $codecProgressOpen 0)(defconstant $codecProgressUpdatePercent 1)(defconstant $codecProgressClose 2)(def-mactype :icmdataprocptr (find-mactype ':pointer));  FUNCTION ICMData(VAR dataP: Ptr; bytesNeeded: LONGINT; refcon: LONGINT): OSErr; (def-mactype :icmflushprocptr (find-mactype ':pointer));  FUNCTION ICMFlush(data: Ptr; bytesAdded: LONGINT; refcon: LONGINT): OSErr; (def-mactype :icmcompletionprocptr (find-mactype ':pointer));  PROCEDURE ICMCompletion(result: OSErr; flags: INTEGER; refcon: LONGINT); (def-mactype :icmprogressprocptr (find-mactype ':pointer));  FUNCTION ICMProgress(message: INTEGER; completeness: Fixed; refcon: LONGINT): OSErr; (def-mactype :stdpixprocptr (find-mactype ':pointer));  PROCEDURE StdPix(VAR src: PixMap; VAR srcRect: Rect; VAR matrix: MatrixRecord; mode: INTEGER; mask: RgnHandle; VAR matte: PixMap; VAR matteRect: Rect; flags: INTEGER); (def-mactype :icmalignmentprocptr (find-mactype ':pointer));  PROCEDURE ICMAlignment(VAR rp: Rect; refcon: LONGINT); (def-mactype :icmcursorshieldedprocptr (find-mactype ':pointer));  PROCEDURE ICMCursorShielded((CONST)VAR r: Rect; refcon: UNIV Ptr; flags: LONGINT); (def-mactype :icmmemorydisposedprocptr (find-mactype ':pointer));  PROCEDURE ICMMemoryDisposed(memoryBlock: Ptr; refcon: UNIV Ptr); (def-mactype :icmcursornotify (find-mactype ':pointer))(def-mactype :icmconvertdataformatprocptr (find-mactype ':pointer));  FUNCTION ICMConvertDataFormat(refCon: UNIV Ptr; flags: LONGINT; desiredFormat: Handle; srcData: UNIV Ptr; srcDataSize: LONGINT; VAR dstData: UNIV Ptr; VAR dstDataSize: LONGINT): OSErr; (def-mactype :icmdataupp (find-mactype ':pointer))(def-mactype :icmflushupp (find-mactype ':pointer))(def-mactype :icmcompletionupp (find-mactype ':pointer))(def-mactype :icmprogressupp (find-mactype ':pointer))(def-mactype :stdpixupp (find-mactype ':pointer))(def-mactype :icmalignmentupp (find-mactype ':pointer))(def-mactype :icmcursorshieldedupp (find-mactype ':pointer))(def-mactype :icmmemorydisposedupp (find-mactype ':pointer))(def-mactype :icmconvertdataformatupp (find-mactype ':pointer))(def-mactype :imagesequence (find-mactype ':signed-long))(def-mactype :imagesequencedatasource (find-mactype ':signed-long))(def-mactype :imagetranscodesequence (find-mactype ':signed-long))(def-mactype :icmprogressprocrecordptr (find-mactype '(:pointer :icmprogressprocrecord)))(defrecord ICMProgressProcRecord    (progressProc :pointer)   (progressRefCon :signed-long)   )(def-mactype :icmcompletionprocrecordptr (find-mactype '(:pointer :icmcompletionprocrecord)))(defrecord ICMCompletionProcRecord    (completionProc :pointer)   (completionRefCon :signed-long)   )(def-mactype :icmdataprocrecordptr (find-mactype '(:pointer :icmdataprocrecord)))(defrecord ICMDataProcRecord    (dataProc :pointer)   (dataRefCon :signed-long)   )(def-mactype :icmflushprocrecordptr (find-mactype '(:pointer :icmflushprocrecord)))(defrecord ICMFlushProcRecord    (flushProc :pointer)   (flushRefCon :signed-long)   )(def-mactype :icmalignmentprocrecordptr (find-mactype '(:pointer :icmalignmentprocrecord)))(defrecord ICMAlignmentProcRecord    (alignmentProc :pointer)   (alignmentRefCon :signed-long)   )(def-mactype :datarateparamsptr (find-mactype '(:pointer :datarateparams)))(defrecord DataRateParams    (dataRate :signed-long)   (dataOverrun :signed-long)   (frameDuration :signed-long)   (keyFrameRate :signed-long)   (minSpatialQuality :signed-long)   (minTemporalQuality :signed-long)   )(def-mactype :imagedescriptionptr (find-mactype '(:pointer :imagedescription)))(defrecord (ImageDescription :handle)    (idSize :signed-long)                        ;   total size of ImageDescription including extra data ( CLUTs and other per sequence data )     (cType :ostype)                              ;   what kind of codec compressed this data     (resvd1 :signed-long)                        ;   reserved for Apple use     (resvd2 :signed-integer)                     ;   reserved for Apple use     (dataRefIndex :signed-integer)               ;   set to zero      (version :signed-integer)                    ;   which version is this data     (revisionLevel :signed-integer)              ;   what version of that codec did this     (vendor :signed-long)                        ;   whose  codec compressed this data     (temporalQuality :signed-long)               ;   what was the temporal quality factor      (spatialQuality :signed-long)                ;   what was the spatial quality factor     (width :signed-integer)                      ;   how many pixels wide is this data     (height :signed-integer)                     ;   how many pixels high is this data     (hRes :signed-long)                          ;   horizontal resolution     (vRes :signed-long)                          ;   vertical resolution     (dataSize :signed-long)                      ;   if known, the size of data for this image descriptor     (frameCount :signed-integer)                 ;   number of frames this description applies to     (name (:string 31))                          ;   name of codec ( in case not installed )      (depth :signed-integer)                      ;   what depth is this data (1-32) or ( 33-40 grayscale )     (clutID :signed-integer)                     ;   clut id or if 0 clut follows  or -1 if no clut     )(def-mactype :imagedescriptionhandle (find-mactype '(:handle :imagedescription)))(def-mactype :codecinfoptr (find-mactype '(:pointer :codecinfo)))(defrecord CodecInfo    (typeName (:string 31))                      ;   name of the codec type i.e.: 'Apple Image Compression'     (version :signed-integer)                    ;   version of the codec data that this codec knows about     (revisionLevel :signed-integer)              ;   revision level of this codec i.e: 0x00010001 (1.0.1)     (vendor :signed-long)                        ;   Maker of this codec i.e: 'appl'     (decompressFlags :signed-long)               ;   codecInfo flags for decompression capabilities     (compressFlags :signed-long)                 ;   codecInfo flags for compression capabilities     (formatFlags :signed-long)                   ;   codecInfo flags for compression format details     (compressionAccuracy :unsigned-byte)         ;   measure (1-255) of accuracy of this codec for compress (0 if unknown)     (decompressionAccuracy :unsigned-byte)       ;   measure (1-255) of accuracy of this codec for decompress (0 if unknown)     ;;Changing field compressionspeed from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (compressionSpeed :unsigned-word)            ;   ( millisecs for compressing 320x240 on base mac II) (0 if unknown)      ;;Changing field decompressionspeed from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (decompressionSpeed :unsigned-word)          ;   ( millisecs for decompressing 320x240 on mac II)(0 if unknown)      (compressionLevel :unsigned-byte)            ;   measure (1-255) of compression level of this codec (0 if unknown)      (resvd :unsigned-byte)                       ;   pad     (minimumHeight :signed-integer)              ;   minimum height of image (block size)     (minimumWidth :signed-integer)               ;   minimum width of image (block size)     (decompressPipelineLatency :signed-integer)  ;   in milliseconds ( for asynchronous codecs )     (compressPipelineLatency :signed-integer)    ;   in milliseconds ( for asynchronous codecs )     (privateData :signed-long)   )(def-mactype :codecnamespecptr (find-mactype '(:pointer :codecnamespec)))(defrecord CodecNameSpec    (codec (:pointer :componentrecord))   (cType :ostype)   (typeName (:string 31))   (name :handle)   )(def-mactype :codecnamespeclistptr (find-mactype '(:pointer :codecnamespeclist)))(defrecord CodecNameSpecList    (count :signed-integer)   (list (:array :codecnamespec 1))   )(defconstant $defaultDither 0)(defconstant $forceDither 1)(defconstant $suppressDither 2)(defconstant $useColorMatching 4)(defconstant $graphicsModeStraightAlpha 256)(defconstant $graphicsModePreWhiteAlpha 257)(defconstant $graphicsModePreBlackAlpha 258)(defconstant $graphicsModeCompostion 259)(defconstant $graphicsModeStraightAlphaBlend 260)(defconstant $evenField1ToEvenFieldOut #x1)(defconstant $evenField1ToOddFieldOut #x2)(defconstant $oddField1ToEvenFieldOut #x4)(defconstant $oddField1ToOddFieldOut #x8)(defconstant $evenField2ToEvenFieldOut #x10)(defconstant $evenField2ToOddFieldOut #x20)(defconstant $oddField2ToEvenFieldOut #x40)(defconstant $oddField2ToOddFieldOut #x80)(def-mactype :icmframetimerecordptr (find-mactype '(:pointer :icmframetimerecord)))(defrecord ICMFrameTimeRecord    (value :wide)                                ;   frame time    (scale :signed-long)                         ;   timescale of value/duration fields    (base :pointer)                              ;   timebase    (duration :signed-long)                      ;   duration frame is to be displayed (0 if unknown)    (rate :signed-long)                          ;   rate of timebase relative to wall-time    (recordSize :signed-long)                    ;   total number of bytes in ICMFrameTimeRecord    (frameNumber :signed-long)                   ;   number of frame, zero if not known    )(def-mactype :icmframetimeptr (find-mactype '(:pointer :icmframetimerecord)))(defconstant $uppICMDataProcInfo #xFE0)(defconstant $uppICMFlushProcInfo #xFE0)(defconstant $uppICMCompletionProcInfo #xE80)(defconstant $uppICMProgressProcInfo #xFA0)(defconstant $uppStdPixProcInfo #x2FEFC0)(defconstant $uppICMAlignmentProcInfo #x3C0)(defconstant $uppICMCursorShieldedProcInfo #xFC0)(defconstant $uppICMMemoryDisposedProcInfo #x3C0)(defconstant $uppICMConvertDataFormatProcInfo #xFFFE0); $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewICMDataProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewICMFlushProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewICMCompletionProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewICMProgressProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewStdPixProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewICMAlignmentProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewICMCursorShieldedProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewICMMemoryDisposedProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap ("_NewICMConvertDataFormatProc" ("QuickTimeLib")) ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallICMDataProc" ("QuickTimeLib")) ((dataP (:pointer :pointer)) (bytesNeeded :signed-long) (refcon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallICMFlushProc" ("QuickTimeLib")) ((data :pointer) (bytesAdded :signed-long) (refcon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallICMCompletionProc" ("QuickTimeLib")) ((result :signed-integer) (flags :signed-integer) (refcon :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallICMProgressProc" ("QuickTimeLib")) ((message :signed-integer) (completeness :signed-long) (refcon :signed-long) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallStdPixProc" ("QuickTimeLib")) ((src (:pointer :pixmap)) (srcRect (:pointer :rect)) (matrix (:pointer :matrixrecord)) (mode :signed-integer) (mask (:handle :region)) (matte (:pointer :pixmap)) (matteRect (:pointer :rect)) (flags :signed-integer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallICMAlignmentProc" ("QuickTimeLib")) ((rp (:pointer :rect)) (refcon :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallICMCursorShieldedProc" ("QuickTimeLib")) ((r (:pointer :rect)) (refcon :pointer) (flags :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallICMMemoryDisposedProc" ("QuickTimeLib")) ((memoryBlock :pointer) (refcon :pointer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_CallICMConvertDataFormatProc" ("QuickTimeLib")) ((refCon :pointer) (flags :signed-long) (desiredFormat :handle) (srcData :pointer) (srcDataSize :signed-long) (dstData (:pointer :pointer)) (dstDataSize (:pointer :signed-long)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CodecManagerVersion" ("QuickTimeLib")) ((version (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 0 version)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCodecNameList" ("QuickTimeLib")) ((list (:pointer (:pointer :codecnamespeclist))) (showAll :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 1 list showAll)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DisposeCodecNameList" ("QuickTimeLib")) ((list (:pointer :codecnamespeclist)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 15 list)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCodecInfo" ("QuickTimeLib")) ((info (:pointer :codecinfo)) (cType :ostype) (codec (:pointer :componentrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 3 info cType codec)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMaxCompressionSize" ("QuickTimeLib")) ((src (:handle :pixmap)) (srcRect (:pointer :rect)) (colorDepth :signed-integer) (quality :signed-long) (cType :ostype) (codec (:pointer :componentrecord)) (size (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 4 src srcRect colorDepth quality cType codec size)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetCSequenceMaxCompressionSize" ("QuickTimeLib")) ((seqID :signed-long) (src (:handle :pixmap)) (size (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 12 16) 116) seqID src size)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCompressionTime" ("QuickTimeLib")) ((src (:handle :pixmap)) (srcRect (:pointer :rect)) (colorDepth :signed-integer) (cType :ostype) (codec (:pointer :componentrecord)) (spatialQuality (:pointer :signed-long)) (temporalQuality (:pointer :signed-long)) (compressTime (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 5 src srcRect colorDepth cType codec spatialQuality temporalQuality compressTime)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompressImage" ("QuickTimeLib")) ((src (:handle :pixmap)) (srcRect (:pointer :rect)) (quality :signed-long) (cType :ostype) (desc (:handle :imagedescription)) (data :pointer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 6 src srcRect quality cType desc data)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_FCompressImage" ("QuickTimeLib")) ((src (:handle :pixmap)) (srcRect (:pointer :rect)) (colorDepth :signed-integer) (quality :signed-long) (cType :ostype) (codec (:pointer :componentrecord)) (ctable (:handle :colortable)) (flags :signed-integer) (bufferSize :signed-long) (flushProc (:pointer :icmflushprocrecord)) (progressProc (:pointer :icmprogressprocrecord)) (desc (:handle :imagedescription)) (data :pointer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 7 src srcRect colorDepth quality cType codec ctable flags bufferSize flushProc progressProc desc data)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DecompressImage" ("QuickTimeLib")) ((data :pointer) (desc (:handle :imagedescription)) (dst (:handle :pixmap)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)) (mode :signed-integer) (mask (:handle :region)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 8 data desc dst srcRect dstRect mode mask)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_FDecompressImage" ("QuickTimeLib")) ((data :pointer) (desc (:handle :imagedescription)) (dst (:handle :pixmap)) (srcRect (:pointer :rect)) (matrix (:pointer :matrixrecord)) (mode :signed-integer) (mask (:handle :region)) (matte (:handle :pixmap)) (matteRect (:pointer :rect)) (accuracy :signed-long) (codec (:pointer :componentrecord)) (bufferSize :signed-long) (dataProc (:pointer :icmdataprocrecord)) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 9 data desc dst srcRect matrix mode mask matte matteRect accuracy codec bufferSize dataProc progressProc)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompressSequenceBegin" ("QuickTimeLib")) ((seqID (:pointer :signed-long)) (src (:handle :pixmap)) (prev (:handle :pixmap)) (srcRect (:pointer :rect)) (prevRect (:pointer :rect)) (colorDepth :signed-integer) (cType :ostype) (codec (:pointer :componentrecord)) (spatialQuality :signed-long) (temporalQuality :signed-long) (keyFrameRate :signed-long) (ctable (:handle :colortable)) (flags :signed-integer) (desc (:handle :imagedescription)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 10 seqID src prev srcRect prevRect colorDepth cType codec spatialQuality temporalQuality keyFrameRate ctable flags desc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompressSequenceFrame" ("QuickTimeLib")) ((seqID :signed-long) (src (:handle :pixmap)) (srcRect (:pointer :rect)) (flags :signed-integer) (data :pointer) (dataSize (:pointer :signed-long)) (similarity (:pointer :unsigned-byte)) (asyncCompletionProc (:pointer :icmcompletionprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 11 seqID src srcRect flags data dataSize similarity asyncCompletionProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DecompressSequenceBegin" ("QuickTimeLib")) ((seqID (:pointer :signed-long)) (desc (:handle :imagedescription)) (port (:pointer :cgrafport)) (gdh (:handle :gdevice)) (srcRect (:pointer :rect)) (matrix (:pointer :matrixrecord)) (mode :signed-integer) (mask (:handle :region)) (flags :signed-integer) (accuracy :signed-long) (codec (:pointer :componentrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 13 seqID desc port gdh srcRect matrix mode mask flags accuracy codec)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_DecompressSequenceBeginS" ("QuickTimeLib")) ((seqID (:pointer :signed-long)) (desc (:handle :imagedescription)) (data :pointer) (dataSize :signed-long) (port (:pointer :cgrafport)) (gdh (:handle :gdevice)) (srcRect (:pointer :rect)) (matrix (:pointer :matrixrecord)) (mode :signed-integer) (mask (:handle :region)) (flags :signed-integer) (accuracy :signed-long) (codec (:pointer :componentrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 48 16) 93) seqID desc data dataSize port gdh srcRect matrix mode mask flags accuracy codec)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DecompressSequenceFrame" ("QuickTimeLib")) ((seqID :signed-long) (data :pointer) (inFlags :signed-integer) (outFlags (:pointer :signed-integer)) (asyncCompletionProc (:pointer :icmcompletionprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 14 seqID data inFlags outFlags asyncCompletionProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_DecompressSequenceFrameS" ("QuickTimeLib")) ((seqID :signed-long) (data :pointer) (dataSize :signed-long) (inFlags :signed-integer) (outFlags (:pointer :signed-integer)) (asyncCompletionProc (:pointer :icmcompletionprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 22 16) 71) seqID data dataSize inFlags outFlags asyncCompletionProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_DecompressSequenceFrameWhen" ("QuickTimeLib")) ((seqID :signed-long) (data :pointer) (dataSize :signed-long) (inFlags :signed-integer) (outFlags (:pointer :signed-integer)) (asyncCompletionProc (:pointer :icmcompletionprocrecord)) (frameTime (:pointer :icmframetimerecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 26 16) 94) seqID data dataSize inFlags outFlags asyncCompletionProc frameTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CDSequenceFlush" ("QuickTimeLib")) ((seqID :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 4 16) 95) seqID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetDSequenceMatrix" ("QuickTimeLib")) ((seqID :signed-long) (matrix (:pointer :matrixrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 16 seqID matrix)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetDSequenceMatte" ("QuickTimeLib")) ((seqID :signed-long) (matte (:handle :pixmap)) (matteRect (:pointer :rect)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 17 seqID matte matteRect)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetDSequenceMask" ("QuickTimeLib")) ((seqID :signed-long) (mask (:handle :region)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 18 seqID mask)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetDSequenceTransferMode" ("QuickTimeLib")) ((seqID :signed-long) (mode :signed-integer) (opColor (:pointer :rgbcolor)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 19 seqID mode opColor)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetDSequenceDataProc" ("QuickTimeLib")) ((seqID :signed-long) (dataProc (:pointer :icmdataprocrecord)) (bufferSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 20 seqID dataProc bufferSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetDSequenceAccuracy" ("QuickTimeLib")) ((seqID :signed-long) (accuracy :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 52 seqID accuracy)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetDSequenceSrcRect" ("QuickTimeLib")) ((seqID :signed-long) (srcRect (:pointer :rect)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 53 seqID srcRect)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetDSequenceImageBuffer" ("QuickTimeLib")) ((seqID :signed-long) (gworld (:pointer (:pointer :cgrafport))))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 21 seqID gworld)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetDSequenceScreenBuffer" ("QuickTimeLib")) ((seqID :signed-long) (gworld (:pointer (:pointer :cgrafport))))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 22 seqID gworld)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetCSequenceQuality" ("QuickTimeLib")) ((seqID :signed-long) (spatialQuality :signed-long) (temporalQuality :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 23 seqID spatialQuality temporalQuality)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetCSequencePrev" ("QuickTimeLib")) ((seqID :signed-long) (prev (:handle :pixmap)) (prevRect (:pointer :rect)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 24 seqID prev prevRect)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetCSequenceFlushProc" ("QuickTimeLib")) ((seqID :signed-long) (flushProc (:pointer :icmflushprocrecord)) (bufferSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 51 seqID flushProc bufferSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetCSequenceKeyFrameRate" ("QuickTimeLib")) ((seqID :signed-long) (keyFrameRate :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 54 seqID keyFrameRate)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetCSequenceKeyFrameRate" ("QuickTimeLib")) ((seqID :signed-long) (keyFrameRate (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 75) seqID keyFrameRate)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCSequencePrevBuffer" ("QuickTimeLib")) ((seqID :signed-long) (gworld (:pointer (:pointer :cgrafport))))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 25 seqID gworld)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CDSequenceBusy" ("QuickTimeLib")) ((seqID :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 26 seqID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CDSequenceEnd" ("QuickTimeLib")) ((seqID :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 27 seqID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CDSequenceEquivalentImageDescription" ("QuickTimeLib")) ((seqID :signed-long) (newDesc (:handle :imagedescription)) (equivalent (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 12 16) 101) seqID newDesc equivalent)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCompressedImageSize" ("QuickTimeLib")) ((desc (:handle :imagedescription)) (data :pointer) (bufferSize :signed-long) (dataProc (:pointer :icmdataprocrecord)) (dataSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 28 desc data bufferSize dataProc dataSize)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetSimilarity" ("QuickTimeLib")) ((src (:handle :pixmap)) (srcRect (:pointer :rect)) (desc (:handle :imagedescription)) (data :pointer) (similarity (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 29 src srcRect desc data similarity)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetImageDescriptionCTable" ("QuickTimeLib")) ((desc (:handle :imagedescription)) (ctable (:pointer (:handle :colortable))))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 30 desc ctable)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetImageDescriptionCTable" ("QuickTimeLib")) ((desc (:handle :imagedescription)) (ctable (:handle :colortable)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 31 desc ctable)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetImageDescriptionExtension" ("QuickTimeLib")) ((desc (:handle :imagedescription)) (extension (:pointer :handle)) (idType :signed-long) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 32 desc extension idType index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_AddImageDescriptionExtension" ("QuickTimeLib")) ((desc (:handle :imagedescription)) (extension :handle) (idType :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 33 desc extension idType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_RemoveImageDescriptionExtension" ("QuickTimeLib")) ((desc (:handle :imagedescription)) (idType :signed-long) (index :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 12 16) 58) desc idType index)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CountImageDescriptionExtensionType" ("QuickTimeLib")) ((desc (:handle :imagedescription)) (idType :signed-long) (count (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 12 16) 59) desc idType count)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetNextImageDescriptionExtensionType" ("QuickTimeLib")) ((desc (:handle :imagedescription)) (idType (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 60) desc idType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_FindCodec" ("QuickTimeLib")) ((cType :ostype) (specCodec (:pointer :componentrecord)) (compressor (:pointer (:pointer :componentrecord))) (decompressor (:pointer (:pointer :componentrecord))))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 35 cType specCodec compressor decompressor)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompressPicture" ("QuickTimeLib")) ((srcPicture (:handle :picture)) (dstPicture (:handle :picture)) (quality :signed-long) (cType :ostype))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 36 srcPicture dstPicture quality cType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_FCompressPicture" ("QuickTimeLib")) ((srcPicture (:handle :picture)) (dstPicture (:handle :picture)) (colorDepth :signed-integer) (ctable (:handle :colortable)) (quality :signed-long) (doDither :signed-integer) (compressAgain :signed-integer) (progressProc (:pointer :icmprogressprocrecord)) (cType :ostype) (codec (:pointer :componentrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 37 srcPicture dstPicture colorDepth ctable quality doDither compressAgain progressProc cType codec)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompressPictureFile" ("QuickTimeLib")) ((srcRefNum :signed-integer) (dstRefNum :signed-integer) (quality :signed-long) (cType :ostype))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 38 srcRefNum dstRefNum quality cType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_FCompressPictureFile" ("QuickTimeLib")) ((srcRefNum :signed-integer) (dstRefNum :signed-integer) (colorDepth :signed-integer) (ctable (:handle :colortable)) (quality :signed-long) (doDither :signed-integer) (compressAgain :signed-integer) (progressProc (:pointer :icmprogressprocrecord)) (cType :ostype) (codec (:pointer :componentrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 39 srcRefNum dstRefNum colorDepth ctable quality doDither compressAgain progressProc cType codec)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetPictureFileHeader" ("QuickTimeLib")) ((refNum :signed-integer) (frame (:pointer :rect)) (header (:pointer :opencpicparams)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 40 refNum frame header)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DrawPictureFile" ("QuickTimeLib")) ((refNum :signed-integer) (frame (:pointer :rect)) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 41 refNum frame progressProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DrawTrimmedPicture" ("QuickTimeLib")) ((srcPicture (:handle :picture)) (frame (:pointer :rect)) (trimMask (:handle :region)) (doDither :signed-integer) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 46 srcPicture frame trimMask doDither progressProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_DrawTrimmedPictureFile" ("QuickTimeLib")) ((srcRefnum :signed-integer) (frame (:pointer :rect)) (trimMask (:handle :region)) (doDither :signed-integer) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 47 srcRefnum frame trimMask doDither progressProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_MakeThumbnailFromPicture" ("QuickTimeLib")) ((picture (:handle :picture)) (colorDepth :signed-integer) (thumbnail (:handle :picture)) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 42 picture colorDepth thumbnail progressProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_MakeThumbnailFromPictureFile" ("QuickTimeLib")) ((refNum :signed-integer) (colorDepth :signed-integer) (thumbnail (:handle :picture)) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 43 refNum colorDepth thumbnail progressProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_MakeThumbnailFromPixMap" ("QuickTimeLib")) ((src (:handle :pixmap)) (srcRect (:pointer :rect)) (colorDepth :signed-integer) (thumbnail (:handle :picture)) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 44 src srcRect colorDepth thumbnail progressProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_TrimImage" ("QuickTimeLib")) ((desc (:handle :imagedescription)) (inData :pointer) (inBufferSize :signed-long) (dataProc (:pointer :icmdataprocrecord)) (outData :pointer) (outBufferSize :signed-long) (flushProc (:pointer :icmflushprocrecord)) (trimRect (:pointer :rect)) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 45 desc inData inBufferSize dataProc outData outBufferSize flushProc trimRect progressProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_ConvertImage" ("QuickTimeLib")) ((srcDD (:handle :imagedescription)) (srcData :pointer) (colorDepth :signed-integer) (ctable (:handle :colortable)) (accuracy :signed-long) (quality :signed-long) (cType :ostype) (codec (:pointer :componentrecord)) (dstDD (:handle :imagedescription)) (dstData :pointer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 48 srcDD srcData colorDepth ctable accuracy quality cType codec dstDD dstData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetCompressedPixMapInfo" ("QuickTimeLib")) ((pix (:pointer :pixmap)) (desc (:pointer (:handle :imagedescription))) (data (:pointer :pointer)) (bufferSize (:pointer :signed-long)) (dataProc (:pointer :icmdataprocrecord)) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 55 pix desc data bufferSize dataProc progressProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetCompressedPixMapInfo" ("QuickTimeLib")) ((pix (:pointer :pixmap)) (desc (:handle :imagedescription)) (data :pointer) (bufferSize :signed-long) (dataProc (:pointer :icmdataprocrecord)) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 56 pix desc data bufferSize dataProc progressProc)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_StdPix" ("QuickTimeLib")) ((src (:pointer :pixmap)) (srcRect (:pointer :rect)) (matrix (:pointer :matrixrecord)) (mode :signed-integer) (mask (:handle :region)) (matte (:pointer :pixmap)) (matteRect (:pointer :rect)) (flags :signed-integer))   nil   (:stack-trap #xAAA3 :d0 12 src srcRect matrix mode mask matte matteRect flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_TransformRgn" ("QuickTimeLib")) ((matrix (:pointer :matrixrecord)) (rgn (:handle :region)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 57 matrix rgn)); $ENDC; ; **********; 	preview stuff; **********; ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SFGetFilePreview" ("QuickTimeLib")) ((where :point) (prompt (:string 255)) (fileFilter :pointer) (numTypes :signed-integer) (typeList (:pointer :ostype)) (dlgHook :pointer) (reply (:pointer :sfreply)))   nil   (:stack-trap #xAAA3 :d0 65 where prompt fileFilter numTypes typeList dlgHook reply)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SFPGetFilePreview" ("QuickTimeLib")) ((where :point) (prompt (:string 255)) (fileFilter :pointer) (numTypes :signed-integer) (typeList (:pointer :ostype)) (dlgHook :pointer) (reply (:pointer :sfreply)) (dlgID :signed-integer) (filterProc :pointer))   nil   (:stack-trap #xAAA3 :d0 66 where prompt fileFilter numTypes typeList dlgHook reply dlgID filterProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_StandardGetFilePreview" ("QuickTimeLib")) ((fileFilter :pointer) (numTypes :signed-integer) (typeList (:pointer :ostype)) (reply (:pointer :standardfilereply)))   nil   (:stack-trap #xAAA3 :d0 67 fileFilter numTypes typeList reply)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CustomGetFilePreview" ("QuickTimeLib")) ((fileFilter :pointer) (numTypes :signed-integer) (typeList (:pointer :ostype)) (reply (:pointer :standardfilereply)) (dlgID :signed-integer) (where :point) (dlgHook :pointer) (filterProc :pointer) (activeList (:pointer :signed-integer)) (activateProc :pointer) (yourDataPtr :pointer))   nil   (:stack-trap #xAAA3 :d0 68 fileFilter numTypes typeList reply dlgID where dlgHook filterProc activeList activateProc yourDataPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_MakeFilePreview" ("QuickTimeLib")) ((resRefNum :signed-integer) (progress (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 69 resRefNum progress)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_AddFilePreview" ("QuickTimeLib")) ((resRefNum :signed-integer) (previewType :ostype) (previewData :handle))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 70 resRefNum previewType previewData)); $ENDC(defconstant $sfpItemPreviewAreaUser 11)(defconstant $sfpItemPreviewStaticText 12)(defconstant $sfpItemPreviewDividerUser 13)(defconstant $sfpItemCreatePreviewButton 14)(defconstant $sfpItemShowPreviewButton 15)(def-mactype :previewresourcerecordptr (find-mactype '(:pointer :previewresourcerecord)))(defrecord (PreviewResourceRecord :handle)    ;;Changing field moddate from signed-long to unsigned-long to match C header (pretty-sure)   (modDate :unsigned-long)   (version :signed-integer)   (resType :ostype)   (resID :signed-integer)   )(def-mactype :previewresourceptr (find-mactype '(:pointer :previewresourcerecord)))(def-mactype :previewresource (find-mactype '(:handle :previewresourcerecord))); $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_AlignScreenRect" ("QuickTimeLib")) ((rp (:pointer :rect)) (alignmentProc (:pointer :icmalignmentprocrecord)))   nil   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 76) rp alignmentProc)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_AlignWindow" ("QuickTimeLib")) ((wp (:pointer :grafport)) (front :boolean) (alignmentRect (:pointer :rect)) (alignmentProc (:pointer :icmalignmentprocrecord)))   nil   (:stack-trap #xAAA3 :d0 (+ (ash 14 16) 77) wp front alignmentRect alignmentProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_DragAlignedWindow" ("QuickTimeLib")) ((wp (:pointer :grafport)) (startPt :point) (boundsRect (:pointer :rect)) (alignmentRect (:pointer :rect)) (alignmentProc (:pointer :icmalignmentprocrecord)))   nil   (:stack-trap #xAAA3 :d0 (+ (ash 20 16) 78) wp startPt boundsRect alignmentRect alignmentProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_DragAlignedGrayRgn" ("QuickTimeLib")) ((theRgn (:handle :region)) (startPt :point) (boundsRect (:pointer :rect)) (slopRect (:pointer :rect)) (axis :signed-integer) (actionProc :pointer) (alignmentRect (:pointer :rect)) (alignmentProc (:pointer :icmalignmentprocrecord)))   (:stack :signed-long)   (:stack-trap #xAAA3 :d0 (+ (ash 30 16) 79) theRgn startPt boundsRect slopRect axis actionProc alignmentRect alignmentProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SetCSequenceDataRateParams" ("QuickTimeLib")) ((seqID :signed-long) (params (:pointer :datarateparams)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 80) seqID params)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SetCSequenceFrameNumber" ("QuickTimeLib")) ((seqID :signed-long) (frameNumber :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 81) seqID frameNumber)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_NewImageGWorld" ("QuickTimeLib")) ((gworld (:pointer (:pointer :cgrafport))) (idh (:handle :imagedescription)) (flags :unsigned-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 12 16) 82) gworld idh flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetCSequenceDataRateParams" ("QuickTimeLib")) ((seqID :signed-long) (params (:pointer :datarateparams)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 83) seqID params)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetCSequenceFrameNumber" ("QuickTimeLib")) ((seqID :signed-long) (frameNumber (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 84) seqID frameNumber)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetBestDeviceRect" ("QuickTimeLib")) ((gdh (:pointer (:handle :gdevice))) (rp (:pointer :rect)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 85) gdh rp)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SetSequenceProgressProc" ("QuickTimeLib")) ((seqID :signed-long) (progressProc (:pointer :icmprogressprocrecord)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 86) seqID progressProc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GDHasScale" ("QuickTimeLib")) ((gdh (:handle :gdevice)) (depth :signed-integer) (scale (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 10 16) 90) gdh depth scale)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GDGetScale" ("QuickTimeLib")) ((gdh (:handle :gdevice)) (scale (:pointer :signed-long)) (flags (:pointer :signed-integer)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 12 16) 91) gdh scale flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GDSetScale" ("QuickTimeLib")) ((gdh (:handle :gdevice)) (scale :signed-long) (flags :signed-integer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 10 16) 92) gdh scale flags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_ICMShieldSequenceCursor" ("QuickTimeLib")) ((seqID :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 4 16) 98) seqID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_ICMDecompressComplete" ("QuickTimeLib")) ((seqID :signed-long) (err :signed-integer) (flag :signed-integer) (completionRtn (:pointer :icmcompletionprocrecord)))   nil   (:stack-trap #xAAA3 :d0 (+ (ash 12 16) 99) seqID err flag completionRtn)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_SetDSequenceTimeCode" ("QuickTimeLib")) ((seqID :signed-long) (timeCodeFormat :pointer) (timeCodeTime :pointer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 12 16) 100) seqID timeCodeFormat timeCodeTime)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CDSequenceNewMemory" ("QuickTimeLib")) ((seqID :signed-long) (data (:pointer :pointer)) (dataSize :signed-long) (dataUse :signed-long) (memoryGoneProc :pointer) (refCon :pointer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 24 16) 102) seqID data dataSize dataUse memoryGoneProc refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CDSequenceDisposeMemory" ("QuickTimeLib")) ((seqID :signed-long) (data :pointer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 103) seqID data)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CDSequenceNewDataSource" ("QuickTimeLib")) ((seqID :signed-long) (sourceID (:pointer :signed-long)) (sourceType :ostype) (sourceInputNumber :signed-long) (dataDescription :handle) (transferProc :pointer) (refCon :pointer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 28 16) 104) seqID sourceID sourceType sourceInputNumber dataDescription transferProc refCon)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CDSequenceDisposeDataSource" ("QuickTimeLib")) ((sourceID :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 4 16) 105) sourceID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CDSequenceSetSourceData" ("QuickTimeLib")) ((sourceID :signed-long) (data :pointer) (dataSize :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 12 16) 106) sourceID data dataSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CDSequenceChangedSourceData" ("QuickTimeLib")) ((sourceID :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 4 16) 107) sourceID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_PtInDSequenceData" ("QuickTimeLib")) ((seqID :signed-long) (data :pointer) (dataSize :signed-long) (where :point) (hit (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 20 16) 108) seqID data dataSize where hit)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_ExtractAndCombineImageFields" ("QuickTimeLib")) ((fieldFlags :signed-long) (data1 :pointer) (dataSize1 :signed-long) (desc1 (:handle :imagedescription)) (data2 :pointer) (dataSize2 :signed-long) (desc2 (:handle :imagedescription)) (outputData :pointer) (outDataSize (:pointer :signed-long)) (descOut (:handle :imagedescription)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 40 16) 109) fieldFlags data1 dataSize1 desc1 data2 dataSize2 desc2 outputData outDataSize descOut)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_GetGraphicsImporterForFile" ("QuickTimeLib")) ((theFile (:pointer :fsspec)) (gi (:pointer (:pointer :componentinstancerecord))))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 110) theFile gi)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_ImageTranscodeSequenceBegin" ("QuickTimeLib")) ((its (:pointer :signed-long)) (srcDesc (:handle :imagedescription)) (destType :ostype) (dstDesc (:pointer (:handle :imagedescription))))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 16 16) 111) its srcDesc destType dstDesc)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_ImageTranscodeSequenceEnd" ("QuickTimeLib")) ((its :signed-long))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 4 16) 112) its)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_ImageTranscodeFrame" ("QuickTimeLib")) ((its :signed-long) (srcData :pointer) (srcDataSize :signed-long) (dstData (:pointer :pointer)) (dstDataSize (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 20 16) 113) its srcData srcDataSize dstData dstDataSize)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_ImageTranscodeDisposeFrameData" ("QuickTimeLib")) ((its :signed-long) (dstData :pointer))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 4 16) 114) its dstData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-longword-in-d0(deftrap ("_CDSequenceInvalidate" ("QuickTimeLib")) ((seqID :signed-long) (invalRgn (:handle :region)))   (:stack :signed-integer)   (:stack-trap #xAAA3 :d0 (+ (ash 8 16) 115) seqID invalRgn)); $ENDC(defconstant $identityMatrixType #x0)           ;   result if matrix is identity  (defconstant $translateMatrixType #x1)          ;   result if matrix translates  (defconstant $scaleMatrixType #x2)              ;   result if matrix scales  (defconstant $scaleTranslateMatrixType #x3)     ;   result if matrix scales and translates  (defconstant $linearMatrixType #x4)             ;   result if matrix is general 2 x 2  (defconstant $linearTranslateMatrixType #x5)    ;   result if matrix is general 2 x 2 and translates  (defconstant $perspectiveMatrixType #x6)        ;   result if matrix is general 3 x 3  (def-mactype :matrixflags (find-mactype ':signed-integer)); CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_GetMatrixType" ("QuickTimeLib")) ((m (:pointer :matrixrecord)))   (:stack :signed-integer)   (:stack-trap #xABC2 :d0 20 m)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CopyMatrix" ("QuickTimeLib")) ((m1 (:pointer :matrixrecord)) (m2 (:pointer :matrixrecord)))   nil   (:stack-trap #xABC2 :d0 32 m1 m2)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_EqualMatrix" ("QuickTimeLib")) ((m1 (:pointer :matrixrecord)) (m2 (:pointer :matrixrecord)))   (:stack :boolean)   (:stack-trap #xABC2 :d0 33 m1 m2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SetIdentityMatrix" ("QuickTimeLib")) ((matrix (:pointer :matrixrecord)))   nil   (:stack-trap #xABC2 :d0 21 matrix)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_TranslateMatrix" ("QuickTimeLib")) ((m (:pointer :matrixrecord)) (deltaH :signed-long) (deltaV :signed-long))   nil   (:stack-trap #xABC2 :d0 25 m deltaH deltaV)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_RotateMatrix" ("QuickTimeLib")) ((m (:pointer :matrixrecord)) (degrees :signed-long) (aboutX :signed-long) (aboutY :signed-long))   nil   (:stack-trap #xABC2 :d0 22 m degrees aboutX aboutY)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_ScaleMatrix" ("QuickTimeLib")) ((m (:pointer :matrixrecord)) (scaleX :signed-long) (scaleY :signed-long) (aboutX :signed-long) (aboutY :signed-long))   nil   (:stack-trap #xABC2 :d0 23 m scaleX scaleY aboutX aboutY)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_SkewMatrix" ("QuickTimeLib")) ((m (:pointer :matrixrecord)) (skewX :signed-long) (skewY :signed-long) (aboutX :signed-long) (aboutY :signed-long))   nil   (:stack-trap #xABC2 :d0 24 m skewX skewY aboutX aboutY)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_TransformFixedPoints" ("QuickTimeLib")) ((m (:pointer :matrixrecord)) (fpt (:pointer :fixedpoint)) (count :signed-long))   (:stack :signed-integer)   (:stack-trap #xABC2 :d0 34 m fpt count)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_TransformPoints" ("QuickTimeLib")) ((mp (:pointer :matrixrecord)) (pt1 (:pointer :point)) (count :signed-long))   (:stack :signed-integer)   (:stack-trap #xABC2 :d0 35 mp pt1 count)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_TransformFixedRect" ("QuickTimeLib")) ((m (:pointer :matrixrecord)) (fr (:pointer :fixedrect)) (fpp (:pointer :fixedpoint)))   (:stack :boolean)   (:stack-trap #xABC2 :d0 36 m fr fpp)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_TransformRect" ("QuickTimeLib")) ((m (:pointer :matrixrecord)) (r (:pointer :rect)) (fpp (:pointer :fixedpoint)))   (:stack :boolean)   (:stack-trap #xABC2 :d0 37 m r fpp)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_InverseMatrix" ("QuickTimeLib")) ((m (:pointer :matrixrecord)) (im (:pointer :matrixrecord)))   (:stack :boolean)   (:stack-trap #xABC2 :d0 28 m im)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_ConcatMatrix" ("QuickTimeLib")) ((a (:pointer :matrixrecord)) (b (:pointer :matrixrecord)))   nil   (:stack-trap #xABC2 :d0 27 a b)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_RectMatrix" ("QuickTimeLib")) ((matrix (:pointer :matrixrecord)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)))   nil   (:stack-trap #xABC2 :d0 30 matrix srcRect dstRect)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_MapMatrix" ("QuickTimeLib")) ((matrix (:pointer :matrixrecord)) (fromRect (:pointer :rect)) (toRect (:pointer :rect)))   nil   (:stack-trap #xABC2 :d0 29 matrix fromRect toRect)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompAdd" ("QuickTimeLib")) ((src (:pointer :wide)) (dst (:pointer :wide)))   nil   (:stack-trap #xABC2 :d0 1 src dst)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompSub" ("QuickTimeLib")) ((src (:pointer :wide)) (dst (:pointer :wide)))   nil   (:stack-trap #xABC2 :d0 2 src dst)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompNeg" ("QuickTimeLib")) ((dst (:pointer :wide)))   nil   (:stack-trap #xABC2 :d0 3 dst)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompShift" ("QuickTimeLib")) ((src (:pointer :wide)) (shift :signed-integer))   nil   (:stack-trap #xABC2 :d0 4 src shift)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompMul" ("QuickTimeLib")) ((src1 :signed-long) (src2 :signed-long) (dst (:pointer :wide)))   nil   (:stack-trap #xABC2 :d0 5 src1 src2 dst)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompDiv" ("QuickTimeLib")) ((numerator (:pointer :wide)) (denominator :signed-long) (remainder (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xABC2 :d0 6 numerator denominator remainder)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompFixMul" ("QuickTimeLib")) ((compSrc (:pointer :wide)) (fixSrc :signed-long) (compDst (:pointer :wide)))   nil   (:stack-trap #xABC2 :d0 7 compSrc fixSrc compDst)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompMulDiv" ("QuickTimeLib")) ((co (:pointer :wide)) (mul :signed-long) (divisor :signed-long))   nil   (:stack-trap #xABC2 :d0 8 co mul divisor)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompMulDivTrunc" ("QuickTimeLib")) ((co (:pointer :wide)) (mul :signed-long) (divisor :signed-long) (remainder (:pointer :signed-long)))   nil   (:stack-trap #xABC2 :d0 12 co mul divisor remainder)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap ("_CompCompare" ("QuickTimeLib")) ((a (:pointer :wide)) (minusb (:pointer :wide)))   (:stack :signed-long)   (:stack-trap #xABC2 :d0 9 a minusb)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _fixmuldiv, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator moveq-word-to-d0(deftrap ("_FixMulDiv" ("QuickTimeLib")) ((src :signed-long) (mul :signed-long) (divisor :signed-long))   (:stack :fixed)   (:stack-trap #xABC2 :d0 10 src mul divisor)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _unsignedfixmuldiv, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator moveq-word-to-d0(deftrap ("_UnsignedFixMulDiv" ("QuickTimeLib")) ((src :signed-long) (mul :signed-long) (divisor :signed-long))   (:stack :fixed)   (:stack-trap #xABC2 :d0 13 src mul divisor)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _fracsincos, using function return type from C header. Pascal used :signed-long, C uses :fract;; Generated by translator moveq-word-to-d0(deftrap ("_FracSinCos" ("QuickTimeLib")) ((degree :signed-long) (cosOut (:pointer :signed-long)))   (:stack :fract)   (:stack-trap #xABC2 :d0 11 degree cosOut)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _fixexp2, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator moveq-word-to-d0(deftrap ("_FixExp2" ("QuickTimeLib")) ((src :signed-long))   (:stack :fixed)   (:stack-trap #xABC2 :d0 14 src)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _fixlog2, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator moveq-word-to-d0(deftrap ("_FixLog2" ("QuickTimeLib")) ((src :signed-long))   (:stack :fixed)   (:stack-trap #xABC2 :d0 15 src)); $ENDC; $IFC NOT GENERATINGCFM;; For trap _fixpow, using function return type from C header. Pascal used :signed-long, C uses :fixed;; Generated by translator moveq-word-to-d0(deftrap ("_FixPow" ("QuickTimeLib")) ((base :signed-long) (exp :signed-long))   (:stack :fixed)   (:stack-trap #xABC2 :d0 16 base exp)); $ENDC(def-mactype :graphicsimportcomponent (find-mactype '(:pointer :componentinstancerecord)))(defconstant $GraphicsImporterComponentType :|grip|);  * These are GraphicsImport procedures * ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetDataReference" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (dataRef :handle) (dataReType :ostype))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci dataRef dataReType ((+ (ash 8 16) 1) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetDataReference" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (dataRef (:pointer :handle)) (dataReType (:pointer :ostype)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci dataRef dataReType ((+ (ash 8 16) 2) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetDataFile" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (theFile (:pointer :fsspec)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci theFile ((+ (ash 4 16) 3) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetDataFile" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (theFile (:pointer :fsspec)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci theFile ((+ (ash 4 16) 4) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetDataHandle" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (h :handle))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci h ((+ (ash 4 16) 5) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetDataHandle" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (h (:pointer :handle)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci h ((+ (ash 4 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetImageDescription" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (desc (:pointer (:handle :imagedescription))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci desc ((+ (ash 4 16) 7) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetDataOffsetAndSize" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (offset (:pointer :signed-long)) (size (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci offset size ((+ (ash 8 16) 8) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportReadData" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (dataPtr :pointer) (dataOffset :signed-long) (dataSize :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci dataPtr dataOffset dataSize ((+ (ash 12 16) 9) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetClip" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (clipRgn (:handle :region)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci clipRgn ((+ (ash 4 16) 10) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetClip" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (clipRgn (:pointer (:handle :region))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci clipRgn ((+ (ash 4 16) 11) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetSourceRect" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (sourceRect (:pointer :rect)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci sourceRect ((+ (ash 4 16) 12) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetSourceRect" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (sourceRect (:pointer :rect)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci sourceRect ((+ (ash 4 16) 13) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetNaturalBounds" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (naturalBounds (:pointer :rect)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci naturalBounds ((+ (ash 4 16) 14) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportDraw" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci ((+ (ash 0 16) 15) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetGWorld" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (port (:pointer :cgrafport)) (gd (:handle :gdevice)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci port gd ((+ (ash 8 16) 16) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetGWorld" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (port (:pointer (:pointer :cgrafport))) (gd (:pointer (:handle :gdevice))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci port gd ((+ (ash 8 16) 17) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetMatrix" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (matrix (:pointer :matrixrecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci matrix ((+ (ash 4 16) 18) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetMatrix" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (matrix (:pointer :matrixrecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci matrix ((+ (ash 4 16) 19) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetBoundsRect" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (bounds (:pointer :rect)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci bounds ((+ (ash 4 16) 20) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetBoundsRect" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (bounds (:pointer :rect)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci bounds ((+ (ash 4 16) 21) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSaveAsPicture" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (fss (:pointer :fsspec)) (scriptTag :signed-integer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci fss scriptTag ((+ (ash 6 16) 22) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetGraphicsMode" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (graphicsMode :signed-long) (opColor (:pointer :rgbcolor)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci graphicsMode opColor ((+ (ash 8 16) 23) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetGraphicsMode" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (graphicsMode (:pointer :signed-long)) (opColor (:pointer :rgbcolor)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci graphicsMode opColor ((+ (ash 8 16) 24) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetQuality" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (quality :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci quality ((+ (ash 4 16) 25) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetQuality" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (quality (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci quality ((+ (ash 4 16) 26) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSaveAsQuickTimeImageFile" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (fss (:pointer :fsspec)) (scriptTag :signed-integer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci fss scriptTag ((+ (ash 6 16) 27) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportSetDataReferenceOffsetAndLimit" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (offset :signed-long) (limit :signed-long))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci offset limit ((+ (ash 8 16) 28) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GraphicsImportGetDataReferenceOffsetAndLimit" ("QuickTimeLib")) ((ci (:pointer :componentinstancerecord)) (offset (:pointer :signed-long)) (limit (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 ci offset limit ((+ (ash 8 16) 29) :signed-longint))); $ENDC(def-mactype :imagetranscodercomponent (find-mactype '(:pointer :componentinstancerecord)))(defconstant $ImageTranscodererComponentType :|imtc|);  * These are ImageTranscoder procedures * ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_ImageTranscoderBeginSequence" ("QuickTimeLib")) ((itc (:pointer :componentinstancerecord)) (srcDesc (:handle :imagedescription)) (dstDesc (:pointer (:handle :imagedescription))))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 itc srcDesc dstDesc ((+ (ash 8 16) 1) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_ImageTranscoderConvert" ("QuickTimeLib")) ((itc (:pointer :componentinstancerecord)) (srcData :pointer) (srcDataSize :signed-long) (dstData (:pointer :pointer)) (dstDataSize (:pointer :signed-long)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 itc srcData srcDataSize dstData dstDataSize ((+ (ash 16 16) 2) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_ImageTranscoderDisposeData" ("QuickTimeLib")) ((itc (:pointer :componentinstancerecord)) (dstData :pointer))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 itc dstData ((+ (ash 4 16) 3) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_ImageTranscoderEndSequence" ("QuickTimeLib")) ((itc (:pointer :componentinstancerecord)))   (:stack :signed-long)   (:stack-trap #xA82A :d0 0 itc ((+ (ash 0 16) 4) :signed-longint))); $ENDC;   UPP call backs  ; $ALIGN RESET; $POP; $SETC UsingIncludes := ImageCompressionIncludes; $ENDC                                         ; __IMAGECOMPRESSION__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'ImageCompression)