(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Power.p"; at Tuesday June 6,1995 2:16:44 pm.; ;  	File:		Power.p;  ;  	Contains:	Power (PowerBooks and Duos) Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __POWER__; $SETC __POWER__ := 1; $I+; $SETC PowerIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+;  Bit positions for ModemByte (defconstant $modemOnBit 0)(defconstant $ringWakeUpBit 2)(defconstant $modemInstalledBit 3)(defconstant $ringDetectBit 4)(defconstant $modemOnHookBit 5);  masks for ModemByte (defconstant $modemOnMask #x1)(defconstant $ringWakeUpMask #x4)(defconstant $modemInstalledMask #x8)(defconstant $ringDetectMask #x10)(defconstant $modemOnHookMask #x20);  bit positions for BatteryByte (defconstant $chargerConnBit 0)(defconstant $hiChargeBit 1)(defconstant $chargeOverFlowBit 2)(defconstant $batteryDeadBit 3)(defconstant $batteryLowBit 4)(defconstant $connChangedBit 5);  masks for BatteryByte (defconstant $chargerConnMask #x1)(defconstant $hiChargeMask #x2)(defconstant $chargeOverFlowMask #x4)(defconstant $batteryDeadMask #x8)(defconstant $batteryLowMask #x10)(defconstant $connChangedMask #x20);  commands to SleepQRec sleepQProc (defconstant $sleepRequest 1)(defconstant $sleepDemand 2)(defconstant $sleepWakeUp 3)(defconstant $sleepRevoke 4)(defconstant $sleepUnlock 4)(defconstant $sleepDeny 5)(defconstant $sleepNow 6)(defconstant $dozeDemand 7)(defconstant $dozeWakeUp 8)(defconstant $dozeRequest 9);  SleepQRec.sleepQFlags (defconstant $noCalls 1)(defconstant $noRequest 2)(defconstant $slpQType 16)(defconstant $sleepQType 16);  bits in bitfield returned by PMFeatures (defconstant $hasWakeupTimer 0)                 ;  1=wakeup timer is supported						(defconstant $hasSharedModemPort 1)             ;  1=modem port shared by SCC and internal modem	(defconstant $hasProcessorCycling 2)            ;  1=processor cycling is supported					(defconstant $mustProcessorCycle 3)             ;  1=processor cycling should not be turned off		(defconstant $hasReducedSpeed 4)                ;  1=processor can be started up at reduced speed	(defconstant $dynamicSpeedChange 5)             ;  1=processor speed can be switched dynamically	(defconstant $hasSCSIDiskMode 6)                ;  1=SCSI Disk Mode is supported					(defconstant $canGetBatteryTime 7)              ;  1=battery time can be calculated					(defconstant $canWakeupOnRing 8)                ;  1=can wakeup when the modem detects a ring		(defconstant $hasDimmingSupport 9)              ;  1=has dimming support built in					(defconstant $hasStartupTimer 10)               ;  1=startup timer is supported						;  bits in bitfield returned by GetIntModemInfo and set by SetIntModemState (defconstant $hasInternalModem 0)               ;  1=internal modem installed						(defconstant $intModemRingDetect 1)             ;  1=internal modem has detected a ring				(defconstant $intModemOffHook 2)                ;  1=internal modem is off hook						(defconstant $intModemRingWakeEnb 3)            ;  1=wakeup on ring is enabled						(defconstant $extModemSelected 4)               ;  1=external modem selected						(defconstant $modemSetBit 15)                   ;  1=set bit, 0=clear bit (SetIntModemState)		;  bits in BatteryInfo.flags 									;  ("chargerConnected" doesn't mean the charger is plugged in)	(defconstant $batteryInstalled 7)               ;  1=battery is currently connected					(defconstant $batteryCharging 6)                ;  1=battery is being charged						(defconstant $chargerConnected 5)               ;  1=charger is connected to the PowerBook			(defconstant $HDPwrQType "HD")                  ;  hard disk spindown queue element type			(defconstant $PMgrStateQType "PM")(defrecord BatteryInfo    (flags :unsigned-byte)                       ;  misc flags (see below)							   (warningLevel :unsigned-byte)                ;  scaled warning level (0-255)						   (reserved :unsigned-byte)                    ;  reserved for internal use						   (batteryLevel :unsigned-byte)                ;  scaled battery level (0-255)						   )(def-mactype :modembyte (find-mactype ':signed-byte))(def-mactype :batterybyte (find-mactype ':signed-byte))(def-mactype :pmresultcode (find-mactype ':signed-long))(def-mactype :sleepqrecptr (find-mactype '(:pointer :sleepqrec))); ; 		SleepQProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => message     	D0.L; 		 => qRecPtr     	A0.L; 		Out:; 		 <= return value	D0.L; 	(def-mactype :sleepqprocptr (find-mactype ':pointer));  register FUNCTION SleepQ(message: LONGINT; qRecPtr: SleepQRecPtr): LONGINT; (def-mactype :hdspindownprocptr (find-mactype ':pointer));  PROCEDURE HDSpindown(VAR theElement: HDQueueElement); (def-mactype :sleepqupp (find-mactype ':pointer))(def-mactype :hdspindownupp (find-mactype ':pointer))(defrecord SleepQRec    (sleepQLink (:pointer :sleepqrec))           ;  pointer to next queue element				   (sleepQType :signed-integer)                 ;  queue element type (must be SleepQType)		   (sleepQProc :pointer)                        ;  pointer to sleep universal proc ptr			   (sleepQFlags :signed-integer)                ;  flags										   )(defrecord HDQueueElement    (hdQLink (:pointer :hdqueueelement))         ;  pointer to next queue element				   (hdQType :signed-integer)                    ;  queue element type (must be HDPwrQType)		   (hdFlags :signed-integer)                    ;  miscellaneous flags							   (hdProc :pointer)                            ;  pointer to routine to call					   (hdUser :signed-long)                        ;  user-defined (variable storage, etc.)		   )(defrecord BatteryTimeRec    ;;Changing field expectedbatterytime from signed-long to unsigned-long to match C header (pretty-darn-sure)   (expectedBatteryTime :unsigned-long)         ;  estimated battery time remaining (seconds)	   ;;Changing field minimumbatterytime from signed-long to unsigned-long to match C header (pretty-darn-sure)   (minimumBatteryTime :unsigned-long)          ;  minimum battery time remaining (seconds)		   ;;Changing field maximumbatterytime from signed-long to unsigned-long to match C header (pretty-darn-sure)   (maximumBatteryTime :unsigned-long)          ;  maximum battery time remaining (seconds)		   ;;Changing field timeuntilcharged from signed-long to unsigned-long to match C header (pretty-darn-sure)   (timeUntilCharged :unsigned-long)            ;  time until battery is fully charged (seconds)   )(defrecord WakeupTime    ;;Changing field waketime from signed-long to unsigned-long to match C header (pretty-darn-sure)   (wakeTime :unsigned-long)                    ;  wakeup time (same format as current time)		   (wakeEnabled :boolean)                       ;  1=enable wakeup timer, 0=disable wakeup timer	   )(defrecord StartupTime    ;;Changing field starttime from signed-long to unsigned-long to match C header (pretty-darn-sure)   (startTime :unsigned-long)                   ;  startup time (same format as current time)		   (startEnabled :boolean)                      ;  1=enable startup timer, 0=disable startup timer	   );; Warning: No calling method defined for this trap(deftrap-inline "_DisableWUTime" ()   :signed-integer   () );; Warning: No calling method defined for this trap(deftrap-inline "_SetWUTime" ((WUTime :signed-long))   :signed-integer   () );; Warning: No calling method defined for this trap(deftrap-inline "_GetWUTime" ((WUTime (:pointer :signed-long)) (WUFlag (:pointer :signed-byte)))   :signed-integer   () );; Warning: No calling method defined for this trap(deftrap-inline "_BatteryStatus" ((Status (:pointer :signed-byte)) (Power (:pointer :signed-byte)))   :signed-integer   () );; Warning: No calling method defined for this trap(deftrap-inline "_ModemStatus" ((Status (:pointer :signed-byte)))   :signed-integer   () )                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_IdleUpdate" ()   :signed-long   (#xA285 #x2E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetCPUSpeed" ()   :signed-long   (#x70FF #xA485 #x2E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_EnableIdle" ()   nil   (#x7000 #xA485) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_DisableIdle" ()   nil   (#x7001 #xA485) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-no-return(deftrap "_SleepQInstall" ((qRecPtr (:pointer :sleepqrec)))   nil   (:register-trap #xA28A :a0 qRecPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-no-return(deftrap "_SleepQRemove" ((qRecPtr (:pointer :sleepqrec)))   nil   (:register-trap #xA48A :a0 qRecPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_AOn" ()   nil   (#x7004 #xA685) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_AOnIgnoreModem" ()   nil   (#x7005 #xA685) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_BOn" ()   nil   (#x7000 #xA685) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_AOff" ()   nil   (#x7084 #xA685) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_BOff" ()   nil   (#x7080 #xA685) ); $ENDC;  Public Power Management API (NEW!) ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_PMSelectorCount" ()   :signed-integer   (#x7000 #xA09E #x3E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_PMFeatures" ()   :signed-long   (#x7001 #xA09E #x2E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetSleepTimeout" ()   :unsigned-byte   (#x7002 #xA09E #x1E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SetSleepTimeout" ((timeout :signed-byte))   nil   (#x101F #x4840 #x303C #x3 #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetHardDiskTimeout" ()   :unsigned-byte   (#x7004 #xA09E #x1E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SetHardDiskTimeout" ((timeout :signed-byte))   nil   (#x101F #x4840 #x303C #x5 #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_HardDiskPowered" ()   :boolean   (#x7006 #xA09E #x1E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SpinDownHardDisk" ()   nil   (#x7007 #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_IsSpindownDisabled" ()   :boolean   (#x7008 #xA09E #x1E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SetSpindownDisable" ((setDisable :boolean))   nil   (#x101F #x4840 #x303C #x9 #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_HardDiskQInstall" ((theElement (:pointer :hdqueueelement)))   (:d0 :signed-integer)   (:register-trap #xA09E :a0 theElement :d0 10)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_HardDiskQRemove" ((theElement (:pointer :hdqueueelement)))   (:d0 :signed-integer)   (:register-trap #xA09E :a0 theElement :d0 11)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetScaledBatteryInfo" ((whichBattery :signed-integer) (theInfo (:pointer :batteryinfo)))   nil   (#x205F #x301F #x4840 #x303C #xC #xA09E #x2080) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_AutoSleepControl" ((enableSleep :boolean))   nil   (#x101F #x4840 #x303C #xD #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetIntModemInfo" ()   :signed-long   (#x700E #xA09E #x2E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SetIntModemState" ((theState :signed-integer))   nil   (#x301F #x4840 #x303C #xF #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_MaximumProcessorSpeed" ()   :signed-integer   (#x7010 #xA09E #x3E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CurrentProcessorSpeed" ()   :signed-integer   (#x7011 #xA09E #x3E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_FullProcessorSpeed" ()   :boolean   (#x7012 #xA09E #x1E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SetProcessorSpeed" ((fullSpeed :boolean))   :boolean   (#x101F #x4840 #x303C #x13 #xA09E #x1E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetSCSIDiskModeAddress" ()   :signed-integer   (#x7014 #xA09E #x3E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SetSCSIDiskModeAddress" ((scsiAddress :signed-integer))   nil   (#x301F #x4840 #x303C #x15 #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetWakeupTimer" ((theTime (:pointer :wakeuptime)))   nil   (#x205F #x7016 #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SetWakeupTimer" ((theTime (:pointer :wakeuptime)))   nil   (#x205F #x7017 #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_IsProcessorCyclingEnabled" ()   :boolean   (#x7018 #xA09E #x1E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_EnableProcessorCycling" ((enable :boolean))   nil   (#x101F #x4840 #x303C #x19 #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_BatteryCount" ()   :signed-integer   (#x701A #xA09E #x3E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetBatteryVoltage" ((whichBattery :signed-integer))   :signed-long   (#x301F #x4840 #x303C #x1B #xA09E #x2E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetBatteryTimes" ((whichBattery :signed-integer) (theTimes (:pointer :batterytimerec)))   nil   (#x205F #x301F #x4840 #x303C #x1C #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetDimmingTimeout" ()   :unsigned-byte   (#x701D #xA09E #x1E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_SetDimmingTimeout" ((timeout :signed-byte))   nil   (#x101F #x4840 #x303C #x1E #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_DimmingControl" ((enableSleep :boolean))   nil   (#x101F #x4840 #x303C #x1F #xA09E) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_IsDimmingControlDisabled" ()   :boolean   (#x7020 #xA09E #x1E80) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_IsAutoSlpControlDisabled" ()   :boolean   (#x7021 #xA09E #x1E80) ); $ENDC(defconstant $uppSleepQProcInfo #x131832)       ;  Register FUNCTION (4 bytes in D0, 4 bytes in A0): 4 bytes in D0; (defconstant $uppHDSpindownProcInfo #xC0)       ;  PROCEDURE (4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSleepQProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewHDSpindownProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM                        ; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallSleepQProc" ((message :signed-long) (qRecPtr (:pointer :sleepqrec)) (userRoutine :pointer))   :signed-long   () )                                         ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallHDSpindownProc" ((theElement (:pointer :hdqueueelement)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := PowerIncludes; $ENDC                                         ; __POWER__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Power)