(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Slots.p"; at Tuesday June 6,1995 2:20:40 pm.; ;  	File:		Slots.p;  ;  	Contains:	Slot Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __SLOTS__; $SETC __SLOTS__ := 1; $I+; $SETC SlotsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC; 	Quickdraw.p													; 		MixedMode.p												; 		QuickdrawText.p											; 	OSUtils.p													; 		Memory.p												#|                                              ; $IFC UNDEFINED __OSUTILS__|#(require-interface 'OSUtils)#|                                              ; $I OSUtils.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __FILES__|#(require-interface 'Files)#|                                              ; $I Files.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $fCardIsChanged 1)                 ; Card is Changed field in StatusFlags field of sInfoArray(defconstant $fCkForSame 0)                     ; For SearchSRT. Flag to check for SAME sResource in the table. (defconstant $fCkForNext 1)                     ; For SearchSRT. Flag to check for NEXT sResource in the table. (defconstant $fWarmStart 2)                     ; If this bit is set then warm start else cold start.(defconstant $stateNil 0)                       ; State(defconstant $stateSDMInit 1)                   ; :Slot declaration manager Init(defconstant $statePRAMInit 2)                  ; :sPRAM record init(defconstant $statePInit 3)                     ; :Primary init(defconstant $stateSInit 4)                     ; :Secondary init;  flags for spParamData (defconstant $fall 0)                           ;  bit 0: set=search enabled/disabled sRsrc's (defconstant $foneslot 1)                       ;     1: set=search sRsrc's in given slot only (defconstant $fnext 2)                          ;     2: set=search for next sRsrc ; ; 		SlotIntServiceProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => sqParameter 	A1.L; 		Out:; 		 <= return value	D0.W; 	(def-mactype :slotintserviceprocptr (find-mactype ':pointer));  register FUNCTION SlotIntService(sqParameter: LONGINT): INTEGER; (def-mactype :slotintserviceupp (find-mactype ':pointer))(defconstant $uppSlotIntServiceProcInfo #xB822) ;  Register FUNCTION (4 bytes in A1): 2 bytes in D0; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewSlotIntServiceProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM                        ; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallSlotIntServiceProc" ((sqParameter :signed-long) (userRoutine :pointer))   :signed-integer   () )(defrecord SlotIntQElement    (sqLink :pointer)                            ; ptr to next element   (sqType :signed-integer)                     ; queue type ID for validity   (sqPrio :signed-integer)                     ; priority   (sqAddr :pointer)                            ; interrupt service routine   (sqParm :signed-long)                        ; optional A1 parameter   )(def-mactype :sqelemptr (find-mactype '(:pointer :slotintqelement)))(defrecord SpBlock    (spResult :signed-long)                      ; FUNCTION Result   (spsPointer :pointer)                        ; structure pointer   (spSize :signed-long)                        ; size of structure   (spOffsetData :signed-long)                  ; offset/data field used by sOffsetData   (spIOFileName :pointer)                      ; ptr to IOFile name for sDisDrvrName   (spsExecPBlk :pointer)                       ; pointer to sExec parameter block.   (spParamData :signed-long)                   ; misc parameter data (formerly spStackPtr).   (spMisc :signed-long)                        ; misc field for SDM.   (spReserved :signed-long)                    ; reserved for future expansion   (spIOReserved :signed-integer)               ; Reserved field of Slot Resource Table   (spRefNum :signed-integer)                   ; RefNum   (spCategory :signed-integer)                 ; sType: Category   (spCType :signed-integer)                    ; Type   (spDrvrSW :signed-integer)                   ; DrvrSW   (spDrvrHW :signed-integer)                   ; DrvrHW   (spTBMask :signed-byte)                      ; type bit mask bits 0..3 mask words 0..3   (spSlot :signed-byte)                        ; slot number   (spID :signed-byte)                          ; structure ID   (spExtDev :signed-byte)                      ; ID of the external device   (spHwDev :signed-byte)                       ; Id of the hardware device.   (spByteLanes :signed-byte)                   ; bytelanes from card ROM format block   (spFlags :signed-byte)                       ; standard flags   (spKey :signed-byte)                         ; Internal use only   )(def-mactype :spblockptr (find-mactype '(:pointer :spblock)))(defrecord SInfoRecord    (siDirPtr :pointer)                          ; Pointer to directory   (siInitStatusA :signed-integer)              ; initialization E   (siInitStatusV :signed-integer)              ; status returned by vendor init code   (siState :signed-byte)                       ; initialization state   (siCPUByteLanes :signed-byte)                ; 0=[d0..d7] 1=[d8..d15]   (siTopOfROM :signed-byte)                    ; Top of ROM= $FssFFFFx: x is TopOfROM   (siStatusFlags :signed-byte)                 ; bit 0 - card is changed   (siTOConst :signed-integer)                  ; Time Out C for BusErr   (siReserved (:array :signed-byte 2))         ; reserved   (siROMAddr :pointer)                         ;  addr of top of ROM    (siSlot :signed-byte)                        ;  slot number    (siPadding (:array :signed-byte 3))          ;  reserved    )(def-mactype :sinforecptr (find-mactype '(:pointer :sinforecord)))(defrecord SDMRecord    (sdBEVSave :pointer)                         ; Save old BusErr vector   (sdBusErrProc :pointer)                      ; Go here to determine if it is a BusErr   (sdErrorEntry :pointer)                      ; Go here if BusErrProc finds real BusErr   (sdReserved :signed-long)                    ; Reserved   )(defrecord FHeaderRec    (fhDirOffset :signed-long)                   ; offset to directory   (fhLength :signed-long)                      ; length of ROM   (fhCRC :signed-long)                         ; CRC   (fhROMRev :signed-byte)                      ; revision of ROM   (fhFormat :signed-byte)                      ; format - 2   (fhTstPat :signed-long)                      ; test pattern   (fhReserved :signed-byte)                    ; reserved   (fhByteLanes :signed-byte)                   ; ByteLanes   )(def-mactype :fheaderrecptr (find-mactype '(:pointer :fheaderrec)))(defrecord SEBlock    (seSlot :unsigned-byte)                      ; Slot number.   (sesRsrcId :unsigned-byte)                   ; sResource Id.   (seStatus :signed-integer)                   ; Status of code executed by sExec.   (seFlags :unsigned-byte)                     ; Flags   (seFiller0 :unsigned-byte)                   ; Filler, must be SignedByte to align on odd boundry   (seFiller1 :unsigned-byte)                   ; Filler   (seFiller2 :unsigned-byte)                   ; Filler   (seResult :signed-long)                      ; Result of sLoad.   (seIOFileName :signed-long)                  ; Pointer to IOFile name.   (seDevice :unsigned-byte)                    ; Which device to read from.   (sePartition :unsigned-byte)                 ; The partition.   (seOSType :unsigned-byte)                    ; Type of OS.   (seReserved :unsigned-byte)                  ; Reserved field.   (seRefNum :unsigned-byte)                    ; RefNum of the driver.   (seNumDevices :unsigned-byte)                ;  Number of devices to load.   (seBootState :unsigned-byte)                 ; State of StartBoot code.   );   Principle  ; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SReadByte" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 0)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SReadWord" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 1)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SReadLong" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SGetCString" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 3)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SGetBlock" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 5)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SFindStruct" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 6)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SReadStruct" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 7)); $ENDC;   Special  ; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SReadInfo" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 16)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SReadPRAMRec" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 17)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SPutPRAMRec" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 18)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SReadFHeader" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 19)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SNextSRsrc" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 20)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SNextTypeSRsrc" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 21)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SRsrcInfo" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 22)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SCkCardStat" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 24)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SReadDrvrName" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 25)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SFindDevBase" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 27)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SFindBigDevBase" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 28)); $ENDC;   Advanced  ; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_InitSDeclMgr" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 32)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SPrimaryInit" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 33)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SCardChanged" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 34)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SExec" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 35)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SOffsetData" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 36)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SInitPRAMRecs" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 37)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SReadPBSize" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 38)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SCalcStep" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 40)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SInitSRsrcTable" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 41)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SSearchSRT" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 42)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SUpdateSRT" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 43)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SCalcSPointer" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 44)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SGetDriver" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 45)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SPtrToSlot" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 46)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SFindSInfoRecPtr" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 47)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SFindSRsrcPtr" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 48)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SDeleteSRTRec" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 49)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of openslot because there is no implementation in the new headers(deftrap "_OpenSlot"         ((paramblock (:pointer :paramblockrec)))         (:d0 :signed-integer)         (:register-trap 41472 :a0 paramblock)); $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_OpenSlotSync" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA200 :a0 paramBlock)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-return-d0(deftrap "_OpenSlotAsync" ((paramBlock (:pointer :paramblockrec)))   (:d0 :signed-integer)   (:register-trap #xA600 :a0 paramBlock)); $ENDC;   Device Manager Slot Support  ; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-2nd-arg-in-d0-1-arg-in-a0(deftrap "_SIntInstall" ((sIntQElemPtr (:pointer :slotintqelement)) (theSlot :signed-integer))   (:d0 :signed-integer)   (:register-trap #xA075 :d0 theSlot :a0 sIntQElemPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-2nd-arg-in-d0-1-arg-in-a0(deftrap "_SIntRemove" ((sIntQElemPtr (:pointer :slotintqelement)) (theSlot :signed-integer))   (:d0 :signed-integer)   (:register-trap #xA076 :d0 theSlot :a0 sIntQElemPtr)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SVersion" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 8)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SetSRsrcState" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 9)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_InsertSRTRec" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 10)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SGetSRsrc" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 11)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SGetTypeSRsrc" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 12)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-in-reg-constant-in-d0(deftrap "_SGetSRsrcPtr" ((spBlkPtr (:pointer :spblock)))   (:d0 :signed-integer)   (:register-trap #xA06E :a0 spBlkPtr :d0 29)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := SlotsIncludes; $ENDC                                         ; __SLOTS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Slots)