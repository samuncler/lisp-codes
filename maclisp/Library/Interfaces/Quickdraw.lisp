(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Quickdraw.p"; at Tuesday June 6,1995 2:00:43 pm.; ;  	File:		Quickdraw.p;  ;  	Contains:	QuickDraw Graphics Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __QUICKDRAW__; $SETC __QUICKDRAW__ := 1; $I+; $SETC QuickdrawIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __MIXEDMODE__|#(require-interface 'MixedMode)#|                                              ; $I MixedMode.p |#                                             ; $ENDC; $IFC UNDEFINED __QUICKDRAWTEXT__(require-interface 'QuickdrawText)              ; $I QuickdrawText.p; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $invalColReq -1)                   ; invalid color table request;  transfer modes (defconstant $srcCopy 0)                        ; the 16 transfer modes(defconstant $srcOr 1)(defconstant $srcXor 2)(defconstant $srcBic 3)(defconstant $notSrcCopy 4)(defconstant $notSrcOr 5)(defconstant $notSrcXor 6)(defconstant $notSrcBic 7)(defconstant $patCopy 8)(defconstant $patOr 9)(defconstant $patXor 10)(defconstant $patBic 11)(defconstant $notPatCopy 12)(defconstant $notPatOr 13)(defconstant $notPatXor 14)(defconstant $notPatBic 15);  Special Text Transfer Mode (defconstant $grayishTextOr 49)(defconstant $hilitetransfermode 50);  Arithmetic transfer modes (defconstant $blend 32)(defconstant $addPin 33)(defconstant $addOver 34)(defconstant $subPin 35)(defconstant $addMax 37)(defconstant $adMax 37)(defconstant $subOver 38)(defconstant $adMin 39)(defconstant $ditherCopy 64);  Transparent mode constant (defconstant $transparent 36)(defconstant $italicBit 1)(defconstant $ulineBit 2)(defconstant $outlineBit 3)(defconstant $shadowBit 4)(defconstant $condenseBit 5)(defconstant $extendBit 6);  QuickDraw color separation constants (defconstant $normalBit 0)                      ; normal screen mapping(defconstant $inverseBit 1)                     ; inverse screen mapping(defconstant $redBit 4)                         ; RGB additive mapping(defconstant $greenBit 3)(defconstant $blueBit 2)(defconstant $cyanBit 8)                        ; CMYBk subtractive mapping(defconstant $magentaBit 7)(defconstant $yellowBit 6)(defconstant $blackBit 5)(defconstant $blackColor 33)                    ; colors expressed in these mappings(defconstant $whiteColor 30)(defconstant $redColor 205)(defconstant $greenColor 341)(defconstant $blueColor 409)(defconstant $cyanColor 273)(defconstant $magentaColor 137)(defconstant $yellowColor 69)(defconstant $picLParen 0)                      ; standard picture comments(defconstant $picRParen 1)(defconstant $clutType 0)                       ; 0 if lookup table(defconstant $fixedType 1)                      ; 1 if fixed table(defconstant $directType 2)                     ; 2 if direct values(defconstant $gdDevType 0)                      ; 0 = monochrome 1 = color(defconstant $roundedDevice 5)                  ;  1 if device has been “rounded” into the GrayRgn (defconstant $hasAuxMenuBar 6)                  ;  1 if device has an aux menu bar on it (defconstant $burstDevice 7)(defconstant $ext32Device 8)(defconstant $ramInit 10)                       ; 1 if initialized from 'scrn' resource(defconstant $mainScreen 11)                    ;  1 if main screen (defconstant $allInit 12)                       ;  1 if all devices initialized (defconstant $screenDevice 13)                  ; 1 if screen device [not used](defconstant $noDriver 14)                      ;  1 if no driver for this GDevice (defconstant $screenActive 15)                  ; 1 if in use(defconstant $hiliteBit 7)                      ; flag bit in HiliteMode (lowMem flag)(defconstant $pHiliteBit 0)                     ; flag bit in HiliteMode used with BitClr procedure(defconstant $defQDColors 127)                  ; resource ID of clut for default QDColors;  pixel type (defconstant $RGBDirect 16)                     ;  16 & 32 bits/pixel pixelType value ;  pmVersion values (defconstant $baseAddr32 4)                     ; pixmap base address is 32-bit address(defconstant $frame 0)(defconstant $paint 1)(defconstant $erase 2)(defconstant $invert 3)(defconstant $fill 4)(def-mactype :grafverb (find-mactype ':signed-byte))(defconstant $chunky 0)(defconstant $chunkyPlanar 1)(defconstant $planar 2)(def-mactype :pixeltype (find-mactype ':signed-byte))(defrecord Bits16 (array (array :signed-integer 16))); **************   IMPORTANT NOTE REGARDING Pattern  **************************************;    Patterns were originally defined as:;    ; 		C: 			typedef unsigned char Pattern[8];; 		Pascal:		Pattern = PACKED ARRAY [0..7] OF 0..255;; 		;    The old array defintion of Pattern would cause 68000 based CPU's to crash in certain circum-;    stances. The new struct definition is safe, but may require source code changes to compile.;    Read the details in TechNote "Platforms & Tools" #PT 38.; 	; ********************************************************************************************(defrecord (Pattern :handle)    (pat (:array :signed-byte 8 :packed))        ;  UInt8    ); ;  ConstPatternParam is now longer needed.  It was first created when Pattern was an array.;  Now that Pattern is a struct, it is more straight forward just add the "const" qualifier;  on the parameter type (e.g. "const Pattern * pat" instead of "ConstPatternParam pat").; (def-mactype :patptr (find-mactype '(:pointer :pattern)))(def-mactype :pathandle (find-mactype '(:handle :pattern)))(def-mactype :qdbyte (find-mactype ':signed-byte))(def-mactype :qdptr (find-mactype ':pointer))(def-mactype :qdhandle (find-mactype ':handle))(def-mactype :qderr (find-mactype ':signed-integer))(defconstant $singleDevicesBit 0)(defconstant $dontMatchSeedsBit 1)(defconstant $allDevicesBit 2)(defconstant $singleDevices (* 1 (expt 2 #$singleDevicesBit)))(defconstant $dontMatchSeeds (* 1 (expt 2 #$dontMatchSeedsBit)))(defconstant $allDevices (* 1 (expt 2 #$allDevicesBit)))(def-mactype :deviceloopflags (find-mactype ':signed-long))(defrecord BitMap    (baseAddr :pointer)   (rowBytes :signed-integer)   (bounds :rect)   )(def-mactype :bitmapptr (find-mactype '(:pointer :bitmap)))(def-mactype :bitmaphandle (find-mactype '(:handle :bitmap)))(defrecord (Cursor :handle)    (data :bits16)   (mask :bits16)   (hotSpot :point)   )(def-mactype :cursptr (find-mactype '(:pointer :cursor)))(def-mactype :curshandle (find-mactype '(:handle :cursor)))(defrecord PenState    (pnLoc :point)   (pnSize :point)   (pnMode :signed-integer)   (pnPat :pattern)   )(defrecord (Region :handle)    (rgnSize :signed-integer)                    ; size in bytes   (rgnBBox :rect)                              ; enclosing rectangle   )(def-mactype :rgnptr (find-mactype '(:pointer :region)))(def-mactype :rgnhandle (find-mactype '(:handle :region)))(defrecord (Picture :handle)    (picSize :signed-integer)   (picFrame :rect)   )(def-mactype :picptr (find-mactype '(:pointer :picture)))(def-mactype :pichandle (find-mactype '(:handle :picture)))(defrecord (Polygon :handle)    (polySize :signed-integer)   (polyBBox :rect)   (polyPoints (:array :point 1))   )(def-mactype :polyptr (find-mactype '(:pointer :polygon)))(def-mactype :polyhandle (find-mactype '(:handle :polygon)))(def-mactype :qdtextprocptr (find-mactype ':pointer));  PROCEDURE QDText(byteCount: INTEGER; textBuf: Ptr; numer: Point; denom: Point); (def-mactype :qdlineprocptr (find-mactype ':pointer));  PROCEDURE QDLine(newPt: Point); (def-mactype :qdrectprocptr (find-mactype ':pointer));  PROCEDURE QDRect(verb: ByteParameter; VAR r: Rect); (def-mactype :qdrrectprocptr (find-mactype ':pointer));  PROCEDURE QDRRect(verb: ByteParameter; VAR r: Rect; ovalWidth: INTEGER; ovalHeight: INTEGER); (def-mactype :qdovalprocptr (find-mactype ':pointer));  PROCEDURE QDOval(verb: ByteParameter; VAR r: Rect); (def-mactype :qdarcprocptr (find-mactype ':pointer));  PROCEDURE QDArc(verb: ByteParameter; VAR r: Rect; startAngle: INTEGER; arcAngle: INTEGER); (def-mactype :qdpolyprocptr (find-mactype ':pointer));  PROCEDURE QDPoly(verb: ByteParameter; poly: PolyHandle); (def-mactype :qdrgnprocptr (find-mactype ':pointer));  PROCEDURE QDRgn(verb: ByteParameter; rgn: RgnHandle); (def-mactype :qdbitsprocptr (find-mactype ':pointer));  PROCEDURE QDBits(VAR srcBits: BitMap; VAR srcRect: Rect; VAR dstRect: Rect; mode: INTEGER; maskRgn: RgnHandle); (def-mactype :qdcommentprocptr (find-mactype ':pointer));  PROCEDURE QDComment(kind: INTEGER; dataSize: INTEGER; dataHandle: Handle); (def-mactype :qdtxmeasprocptr (find-mactype ':pointer));  FUNCTION QDTxMeas(byteCount: INTEGER; textAddr: Ptr; VAR numer: Point; VAR denom: Point; VAR info: FontInfo): INTEGER; (def-mactype :qdgetpicprocptr (find-mactype ':pointer));  PROCEDURE QDGetPic(dataPtr: Ptr; byteCount: INTEGER); (def-mactype :qdputpicprocptr (find-mactype ':pointer));  PROCEDURE QDPutPic(dataPtr: Ptr; byteCount: INTEGER); (def-mactype :qdopcodeprocptr (find-mactype ':pointer));  PROCEDURE QDOpcode(VAR fromRect: Rect; VAR toRect: Rect; opcode: INTEGER; version: INTEGER); (def-mactype :qdjshieldcursorprocptr (find-mactype ':pointer));  PROCEDURE QDJShieldCursor(left: INTEGER; top: INTEGER; right: INTEGER; bottom: INTEGER); (def-mactype :qdtextupp (find-mactype ':pointer))(def-mactype :qdlineupp (find-mactype ':pointer))(def-mactype :qdrectupp (find-mactype ':pointer))(def-mactype :qdrrectupp (find-mactype ':pointer))(def-mactype :qdovalupp (find-mactype ':pointer))(def-mactype :qdarcupp (find-mactype ':pointer))(def-mactype :qdpolyupp (find-mactype ':pointer))(def-mactype :qdrgnupp (find-mactype ':pointer))(def-mactype :qdbitsupp (find-mactype ':pointer))(def-mactype :qdcommentupp (find-mactype ':pointer))(def-mactype :qdtxmeasupp (find-mactype ':pointer))(def-mactype :qdgetpicupp (find-mactype ':pointer))(def-mactype :qdputpicupp (find-mactype ':pointer))(def-mactype :qdopcodeupp (find-mactype ':pointer))(def-mactype :qdjshieldcursorupp (find-mactype ':pointer))(defrecord QDProcs    (textProc :pointer)   (lineProc :pointer)   (rectProc :pointer)   (rRectProc :pointer)   (ovalProc :pointer)   (arcProc :pointer)   (polyProc :pointer)   (rgnProc :pointer)   (bitsProc :pointer)   (commentProc :pointer)   (txMeasProc :pointer)   (getPicProc :pointer)   (putPicProc :pointer)   )(def-mactype :qdprocsptr (find-mactype '(:pointer :qdprocs)))(defconstant $uppQDTextProcInfo #x3F80)         ;  PROCEDURE (2 byte param, 4 byte param, 4 byte param, 4 byte param); (defconstant $uppQDLineProcInfo #xC0)           ;  PROCEDURE (4 byte param); (defconstant $uppQDRectProcInfo #x340)          ;  PROCEDURE (1 byte param, 4 byte param); (defconstant $uppQDRRectProcInfo #x2B40)        ;  PROCEDURE (1 byte param, 4 byte param, 2 byte param, 2 byte param); (defconstant $uppQDOvalProcInfo #x340)          ;  PROCEDURE (1 byte param, 4 byte param); (defconstant $uppQDArcProcInfo #x2B40)          ;  PROCEDURE (1 byte param, 4 byte param, 2 byte param, 2 byte param); (defconstant $uppQDPolyProcInfo #x340)          ;  PROCEDURE (1 byte param, 4 byte param); (defconstant $uppQDRgnProcInfo #x340)           ;  PROCEDURE (1 byte param, 4 byte param); (defconstant $uppQDBitsProcInfo #xEFC0)         ;  PROCEDURE (4 byte param, 4 byte param, 4 byte param, 2 byte param, 4 byte param); (defconstant $uppQDCommentProcInfo #xE80)       ;  PROCEDURE (2 byte param, 2 byte param, 4 byte param); (defconstant $uppQDTxMeasProcInfo #xFFA0)       ;  FUNCTION (2 byte param, 4 byte param, 4 byte param, 4 byte param, 4 byte param): 2 byte result; (defconstant $uppQDGetPicProcInfo #x2C0)        ;  PROCEDURE (4 byte param, 2 byte param); (defconstant $uppQDPutPicProcInfo #x2C0)        ;  PROCEDURE (4 byte param, 2 byte param); (defconstant $uppQDOpcodeProcInfo #x2BC0)       ;  PROCEDURE (4 byte param, 4 byte param, 2 byte param, 2 byte param); (defconstant $uppQDJShieldCursorProcInfo #x2A80);  PROCEDURE (2 byte param, 2 byte param, 2 byte param, 2 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDTextProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDLineProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDRectProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDRRectProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDOvalProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDArcProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDPolyProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDRgnProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDBitsProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDCommentProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDTxMeasProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDGetPicProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDPutPicProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDOpcodeProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewQDJShieldCursorProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDTextProc" ((byteCount :signed-integer) (textBuf :pointer) (numer :point) (denom :point) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDLineProc" ((newPt :point) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDRectProc" ((verb :signed-byte) (r (:pointer :rect)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDRRectProc" ((verb :signed-byte) (r (:pointer :rect)) (ovalWidth :signed-integer) (ovalHeight :signed-integer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDOvalProc" ((verb :signed-byte) (r (:pointer :rect)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDArcProc" ((verb :signed-byte) (r (:pointer :rect)) (startAngle :signed-integer) (arcAngle :signed-integer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDPolyProc" ((verb :signed-byte) (poly (:handle :polygon)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDRgnProc" ((verb :signed-byte) (rgn (:handle :region)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDBitsProc" ((srcBits (:pointer :bitmap)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)) (mode :signed-integer) (maskRgn (:handle :region)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDCommentProc" ((kind :signed-integer) (dataSize :signed-integer) (dataHandle :handle) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDTxMeasProc" ((byteCount :signed-integer) (textAddr :pointer) (numer (:pointer :point)) (denom (:pointer :point)) (info (:pointer :fontinfo)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDGetPicProc" ((dataPtr :pointer) (byteCount :signed-integer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDPutPicProc" ((dataPtr :pointer) (byteCount :signed-integer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDOpcodeProc" ((fromRect (:pointer :rect)) (toRect (:pointer :rect)) (opcode :signed-integer) (version :signed-integer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallQDJShieldCursorProc" ((left :signed-integer) (top :signed-integer) (right :signed-integer) (bottom :signed-integer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC(defrecord GrafPort    (device :signed-integer)   (portBits :bitmap)   (portRect :rect)   (visRgn (:handle :region))   (clipRgn (:handle :region))   (bkPat :pattern)   (fillPat :pattern)   (pnLoc :point)   (pnSize :point)   (pnMode :signed-integer)   (pnPat :pattern)   (pnVis :signed-integer)   (txFont :signed-integer)   (txFace :unsigned-byte)                      ; txFace is unpacked byte but push as short   (txMode :signed-integer)   (txSize :signed-integer)   (spExtra :signed-long)   (fgColor :signed-long)   (bkColor :signed-long)   (colrBit :signed-integer)   (patStretch :signed-integer)   (picSave :handle)   (rgnSave :handle)   (polySave :handle)   (grafProcs (:pointer :qdprocs))   )(def-mactype :grafptr (find-mactype '(:pointer :grafport))); ;  *	This set of definitions "belongs" in Windows.;  *	But, there is a circularity in the headers where Windows includes Controls and;  *	Controls includes Windows. To break the circle, the information;  *	needed by Controls is moved from Windows to Quickdraw.;  (def-mactype :windowptr (find-mactype '(:pointer :grafport))); ; 	Set STRICT_WINDOWS to 1 to make sure your code ; 	doesn't access the window record directly; ; $IFC UNDEFINED STRICT_WINDOWS ; $SETC STRICT_WINDOWS := 0; $ENDC#|                                              ; $IFC STRICT_WINDOWS (def-mactype :windowref (find-mactype ':pointer)) |#                                             ; $ELSEC; Warning: Patching def of type WindowRef from translator table: was (:pointer :grafport), is now (:pointer :windowrecord)(def-mactype :windowref (find-mactype '(:pointer :windowrecord)))#| (def-mactype :windowref (find-mactype '(:pointer :grafport))) |#; $ENDC(def-mactype :dragconstraint (find-mactype ':unsigned-integer))(defconstant $kNoConstraint 0)(defconstant $kVerticalConstraint 1)(defconstant $kHorizontalConstraint 2); ;  *	Here ends the list of things that "belong" in Windows.;  (defrecord RGBColor    ;;Changing field red from signed-integer to unsigned-word to match C header (pretty-sure)   (red :unsigned-word)                         ; magnitude of red component   ;;Changing field green from signed-integer to unsigned-word to match C header (pretty-sure)   (green :unsigned-word)                       ; magnitude of green component   ;;Changing field blue from signed-integer to unsigned-word to match C header (pretty-sure)   (blue :unsigned-word)                        ; magnitude of blue component   )(def-mactype :rgbcolorptr (find-mactype '(:pointer :rgbcolor)))(def-mactype :rgbcolorhdl (find-mactype '(:handle :rgbcolor)))(def-mactype :draggrayrgnprocptr (find-mactype ':pointer));  PROCEDURE DragGrayRgn; (def-mactype :colorsearchprocptr (find-mactype ':pointer));  FUNCTION ColorSearch(VAR rgb: RGBColor; VAR position: LONGINT): BOOLEAN; (def-mactype :colorcomplementprocptr (find-mactype ':pointer));  FUNCTION ColorComplement(VAR rgb: RGBColor): BOOLEAN; (def-mactype :draggrayrgnupp (find-mactype ':pointer))(def-mactype :colorsearchupp (find-mactype ':pointer))(def-mactype :colorcomplementupp (find-mactype ':pointer))(defconstant $uppDragGrayRgnProcInfo #x0)       ;  PROCEDURE ; (defconstant $uppColorSearchProcInfo #x3D0)     ;  FUNCTION (4 byte param, 4 byte param): 1 byte result; (defconstant $uppColorComplementProcInfo #xD0)  ;  FUNCTION (4 byte param): 1 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDragGrayRgnProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewColorSearchProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewColorComplementProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator register-trap-1-arg-no-return(deftrap "_CallDragGrayRgnProc" ((userRoutine :pointer))   nil   (:register-trap #x4E90 :a0 userRoutine)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallColorSearchProc" ((rgb (:pointer :rgbcolor)) (position (:pointer :signed-long)) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallColorComplementProc" ((rgb (:pointer :rgbcolor)) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC(defrecord ColorSpec    (value :signed-integer)                      ; index or other value   (rgb :rgbcolor)                              ; true color   )(def-mactype :colorspecptr (find-mactype '(:pointer :colorspec)))(defrecord CSpecArray (array (array :colorspec 1)))(defrecord xColorSpec    (value :signed-integer)                      ; index or other value   (rgb :rgbcolor)                              ; true color   (xalpha :signed-integer)   )(def-mactype :xcolorspecptr (find-mactype '(:pointer :xcolorspec)))(defrecord xCSpecArray (array (array :xcolorspec 1)))(defrecord (ColorTable :handle)    (ctSeed :signed-long)                        ; unique identifier for table   (ctFlags :signed-integer)                    ; high bit: 0 = PixMap; 1 = device   (ctSize :signed-integer)                     ; number of entries in CTTable   (ctTable :cspecarray)                        ; array [0..0] of ColorSpec   )(def-mactype :ctabptr (find-mactype '(:pointer :colortable)))(def-mactype :ctabhandle (find-mactype '(:handle :colortable)))(defrecord MatchRec    ;;Changing field red from signed-integer to unsigned-word to match C header (pretty-sure)   (red :unsigned-word)   ;;Changing field green from signed-integer to unsigned-word to match C header (pretty-sure)   (green :unsigned-word)   ;;Changing field blue from signed-integer to unsigned-word to match C header (pretty-sure)   (blue :unsigned-word)   (matchData :signed-long)   )(defrecord (PixMap :handle)    (baseAddr :pointer)                          ; pointer to pixels   (rowBytes :signed-integer)                   ; offset to next line   (bounds :rect)                               ; encloses bitmap   (pmVersion :signed-integer)                  ; pixMap version number   (packType :signed-integer)                   ; defines packing format   (packSize :signed-long)                      ; length of pixel data   (hRes :signed-long)                          ; horiz. resolution (ppi)   (vRes :signed-long)                          ; vert. resolution (ppi)   (pixelType :signed-integer)                  ; defines pixel type   (pixelSize :signed-integer)                  ; # bits in pixel   (cmpCount :signed-integer)                   ; # components in pixel   (cmpSize :signed-integer)                    ; # bits per component   (planeBytes :signed-long)                    ; offset to next plane   (pmTable (:handle :colortable))              ; color map for this pixMap   (pmReserved :signed-long)                    ; for future use. MUST BE 0   )(def-mactype :pixmapptr (find-mactype '(:pointer :pixmap)))(def-mactype :pixmaphandle (find-mactype '(:handle :pixmap)))(defrecord (PixPat :handle)    (patType :signed-integer)                    ; type of pattern   (patMap (:handle :pixmap))                   ; the pattern's pixMap   (patData :handle)                            ; pixmap's data   (patXData :handle)                           ; expanded Pattern data   (patXValid :signed-integer)                  ; flags whether expanded Pattern valid   (patXMap :handle)                            ; Handle to expanded Pattern data   (pat1Data :pattern)                          ; old-Style pattern/RGB color   )(def-mactype :pixpatptr (find-mactype '(:pointer :pixpat)))(def-mactype :pixpathandle (find-mactype '(:handle :pixpat)))(defrecord (CCrsr :handle)    (crsrType :signed-integer)                   ; type of cursor   (crsrMap (:handle :pixmap))                  ; the cursor's pixmap   (crsrData :handle)                           ; cursor's data   (crsrXData :handle)                          ; expanded cursor data   (crsrXValid :signed-integer)                 ; depth of expanded data (0 if none)   (crsrXHandle :handle)                        ; future use   (crsr1Data :bits16)                          ; one-bit cursor   (crsrMask :bits16)                           ; cursor's mask   (crsrHotSpot :point)                         ; cursor's hotspot   (crsrXTable :signed-long)                    ; private   (crsrID :signed-long)                        ; private   )(def-mactype :ccrsrptr (find-mactype '(:pointer :ccrsr)))(def-mactype :ccrsrhandle (find-mactype '(:handle :ccrsr))); $IFC OLDROUTINELOCATIONS (defrecord (CIcon :handle)    (iconPMap :pixmap)                           ; the icon's pixMap   (iconMask :bitmap)                           ; the icon's mask   (iconBMap :bitmap)                           ; the icon's bitMap   (iconData :handle)                           ; the icon's data   (iconMaskData (:array :signed-integer 1))    ; icon's mask and BitMap data   )(def-mactype :ciconptr (find-mactype '(:pointer :cicon)))(def-mactype :ciconhandle (find-mactype '(:handle :cicon))); $ENDC(defrecord (GammaTbl :handle)    (gVersion :signed-integer)                   ; gamma version number   (gType :signed-integer)                      ; gamma data type   (gFormulaSize :signed-integer)               ; Formula data size   (gChanCnt :signed-integer)                   ; number of channels of data   (gDataCnt :signed-integer)                   ; number of values/channel   (gDataWidth :signed-integer)                 ; bits/corrected value (data packed to next larger byte size)   (gFormulaData (:array :signed-integer 1))    ; data for formulas followed by gamma values   )(def-mactype :gammatblptr (find-mactype '(:pointer :gammatbl)))(def-mactype :gammatblhandle (find-mactype '(:handle :gammatbl)))(defrecord (ITab :handle)    (iTabSeed :signed-long)                      ; copy of CTSeed from source CTable   (iTabRes :signed-integer)                    ; bits/channel resolution of iTable   (iTTable (:array :signed-byte 1))            ;  Byte ; byte colortable index values   )(def-mactype :itabptr (find-mactype '(:pointer :itab)))(def-mactype :itabhandle (find-mactype '(:handle :itab)))(defrecord (SProcRec :handle)    (nxtSrch :handle)                            ; SProcHndl Handle to next SProcRec   (srchProc :pointer)                          ; search procedure proc ptr   )(def-mactype :sprocptr (find-mactype '(:pointer :sprocrec)))(def-mactype :sprochndl (find-mactype '(:handle :sprocrec)))(defrecord (CProcRec :handle)    (nxtComp :handle)                            ; CProcHndl Handle to next CProcRec   (compProc :pointer)                          ; complement procedure proc ptr   )(def-mactype :cprocptr (find-mactype '(:pointer :cprocrec)))(def-mactype :cprochndl (find-mactype '(:handle :cprocrec)))(defrecord (GDevice :handle)    (gdRefNum :signed-integer)                   ; driver's unit number   (gdID :signed-integer)                       ; client ID for search procs   (gdType :signed-integer)                     ; fixed/CLUT/direct   (gdITable (:handle :itab))                   ; Handle to inverse lookup table   (gdResPref :signed-integer)                  ; preferred resolution of GDITable   (gdSearchProc (:handle :sprocrec))           ; search proc list head   (gdCompProc (:handle :cprocrec))             ; complement proc list   (gdFlags :signed-integer)                    ; grafDevice flags word   (gdPMap (:handle :pixmap))                   ; describing pixMap   (gdRefCon :signed-long)                      ; reference value   (gdNextGD :handle)                           ; GDHandle Handle of next gDevice   (gdRect :rect)                               ;  device's bounds in global coordinates   (gdMode :signed-long)                        ; device's current mode   (gdCCBytes :signed-integer)                  ; depth of expanded cursor data   (gdCCDepth :signed-integer)                  ; depth of expanded cursor data   (gdCCXData :handle)                          ; Handle to cursor's expanded data   (gdCCXMask :handle)                          ; Handle to cursor's expanded mask   (gdReserved :signed-long)                    ; future use. MUST BE 0   )(def-mactype :gdptr (find-mactype '(:pointer :gdevice)))(def-mactype :gdhandle (find-mactype '(:handle :gdevice)))(defrecord (GrafVars :handle)    (rgbOpColor :rgbcolor)                       ; color for addPin  subPin and average   (rgbHiliteColor :rgbcolor)                   ; color for hiliting   (pmFgColor :handle)                          ; palette Handle for foreground color   (pmFgIndex :signed-integer)                  ; index value for foreground   (pmBkColor :handle)                          ; palette Handle for background color   (pmBkIndex :signed-integer)                  ; index value for background   (pmFlags :signed-integer)                    ; flags for Palette Manager   )(def-mactype :gvarptr (find-mactype '(:pointer :grafvars)))(def-mactype :gvarhandle (find-mactype '(:handle :grafvars)))(defrecord CQDProcs    (textProc :pointer)   (lineProc :pointer)   (rectProc :pointer)   (rRectProc :pointer)   (ovalProc :pointer)   (arcProc :pointer)   (polyProc :pointer)   (rgnProc :pointer)   (bitsProc :pointer)   (commentProc :pointer)   (txMeasProc :pointer)   (getPicProc :pointer)   (putPicProc :pointer)   (opcodeProc :pointer)                        ; fields added to QDProcs   (newProc1 :pointer)   (newProc2 :pointer)   (newProc3 :pointer)   (newProc4 :pointer)   (newProc5 :pointer)   (newProc6 :pointer)   )(def-mactype :cqdprocsptr (find-mactype '(:pointer :cqdprocs)))(defrecord CGrafPort    (device :signed-integer)   (portPixMap (:handle :pixmap))               ; port's pixel map   (portVersion :signed-integer)                ; high 2 bits always set   (grafVars :handle)                           ; Handle to more fields   (chExtra :signed-integer)                    ; character extra   (pnLocHFrac :signed-integer)                 ; pen fraction   (portRect :rect)   (visRgn (:handle :region))   (clipRgn (:handle :region))   (bkPixPat (:handle :pixpat))                 ; background pattern   (rgbFgColor :rgbcolor)                       ; RGB components of fg   (rgbBkColor :rgbcolor)                       ; RGB components of bk   (pnLoc :point)   (pnSize :point)   (pnMode :signed-integer)   (pnPixPat (:handle :pixpat))                 ; pen's pattern   (fillPixPat (:handle :pixpat))               ; fill pattern   (pnVis :signed-integer)   (txFont :signed-integer)   (txFace :unsigned-byte)                      ; txFace is unpacked byte  push as short   (txMode :signed-integer)   (txSize :signed-integer)   (spExtra :signed-long)   (fgColor :signed-long)   (bkColor :signed-long)   (colrBit :signed-integer)   (patStretch :signed-integer)   (picSave :handle)   (rgnSave :handle)   (polySave :handle)   (grafProcs (:pointer :cqdprocs))   )(def-mactype :cgrafptr (find-mactype '(:pointer :cgrafport)))(def-mactype :cwindowptr (find-mactype '(:pointer :cgrafport)))(defrecord ReqListRec    (reqLSize :signed-integer)                   ; request list size   (reqLData (:array :signed-integer 1))        ; request list data   )(defrecord OpenCPicParams    (srcRect :rect)   (hRes :signed-long)   (vRes :signed-long)   (version :signed-integer)   (reserved1 :signed-integer)   (reserved2 :signed-long)   )(defrecord CursorImageRec    (majorVersion :unsigned-integer)   (minorVersion :unsigned-integer)   (cursorPixMap (:handle :pixmap))   (cursorBitMask (:handle :bitmap))   )(def-mactype :cursorimageptr (find-mactype '(:pointer :cursorimagerec)))(def-mactype :deviceloopdrawingprocptr (find-mactype ':pointer));  PROCEDURE DeviceLoopDrawing(depth: INTEGER; deviceFlags: INTEGER; targetDevice: GDHandle; userData: LONGINT); (def-mactype :deviceloopdrawingupp (find-mactype ':pointer))(defconstant $uppDeviceLoopDrawingProcInfo #x3E80);  PROCEDURE (2 byte param, 2 byte param, 4 byte param, 4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDeviceLoopDrawingProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDeviceLoopDrawingProc" ((depth :signed-integer) (deviceFlags :signed-integer) (targetDevice (:handle :gdevice)) (userData :signed-long) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC(defrecord QDGlobals    (privates (:array :character 76 :packed))   (randSeed :signed-long)   (screenBits :bitmap)   (arrow :cursor)   (dkGray :pattern)   (ltGray :pattern)   (gray :pattern)   (black :pattern)   (white :pattern)   (thePort (:pointer :grafport))   )(def-mactype :qdglobalsptr (find-mactype '(:pointer :qdglobals)))(def-mactype :qdglobalshdl (find-mactype '(:handle :qdglobals)));  To be in sync with the C interface to QuickDraw globals, pascal code must now ;  qualify the QuickDraw globals with “qd.” (e.g. InitGraf(@qd.thePort);  )       ; $PUSH; $J+; $POP; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InitGraf" ((globalPtr :pointer))   nil   (:stack-trap #xA86E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OpenPort" ((port (:pointer :grafport)))   nil   (:stack-trap #xA86F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InitPort" ((port (:pointer :grafport)))   nil   (:stack-trap #xA86D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ClosePort" ((port (:pointer :grafport)))   nil   (:stack-trap #xA87D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetPort" ((port (:pointer :grafport)))   nil   (:stack-trap #xA873)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetPort" ((port (:pointer (:pointer :grafport))))   nil   (:stack-trap #xA874)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GrafDevice" ((device :signed-integer))   nil   (:stack-trap #xA872)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetPortBits" ((bm (:pointer :bitmap)))   nil   (:stack-trap #xA875)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PortSize" ((width :signed-integer) (height :signed-integer))   nil   (:stack-trap #xA876)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MovePortTo" ((leftGlobal :signed-integer) (topGlobal :signed-integer))   nil   (:stack-trap #xA877)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetOrigin" ((h :signed-integer) (v :signed-integer))   nil   (:stack-trap #xA878)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetClip" ((rgn (:handle :region)))   nil   (:stack-trap #xA879)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetClip" ((rgn (:handle :region)))   nil   (:stack-trap #xA87A)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ClipRect" ((r (:pointer :rect)))   nil   (:stack-trap #xA87B)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_BackPat" ((pat (:pointer :pattern)))   nil   (:stack-trap #xA87C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InitCursor" ()   nil   (:stack-trap #xA850)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetCursor" ((crsr (:pointer :cursor)))   nil   (:stack-trap #xA851)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_HideCursor" ()   nil   (:stack-trap #xA852)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ShowCursor" ()   nil   (:stack-trap #xA853)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ObscureCursor" ()   nil   (:stack-trap #xA856)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_HidePen" ()   nil   (:stack-trap #xA896)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ShowPen" ()   nil   (:stack-trap #xA897)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetPen" ((pt (:pointer :point)))   nil   (:stack-trap #xA89A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetPenState" ((pnState (:pointer :penstate)))   nil   (:stack-trap #xA898)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetPenState" ((pnState (:pointer :penstate)))   nil   (:stack-trap #xA899)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PenSize" ((width :signed-integer) (height :signed-integer))   nil   (:stack-trap #xA89B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PenMode" ((mode :signed-integer))   nil   (:stack-trap #xA89C)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PenPat" ((pat (:pointer :pattern)))   nil   (:stack-trap #xA89D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PenNormal" ()   nil   (:stack-trap #xA89E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MoveTo" ((h :signed-integer) (v :signed-integer))   nil   (:stack-trap #xA893)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_Move" ((dh :signed-integer) (dv :signed-integer))   nil   (:stack-trap #xA894)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_LineTo" ((h :signed-integer) (v :signed-integer))   nil   (:stack-trap #xA891)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_Line" ((dh :signed-integer) (dv :signed-integer))   nil   (:stack-trap #xA892)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ForeColor" ((color :signed-long))   nil   (:stack-trap #xA862)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_BackColor" ((color :signed-long))   nil   (:stack-trap #xA863)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ColorBit" ((whichBit :signed-integer))   nil   (:stack-trap #xA864)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetRect" ((r (:pointer :rect)) (left :signed-integer) (top :signed-integer) (right :signed-integer) (bottom :signed-integer))   nil   (:stack-trap #xA8A7)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OffsetRect" ((r (:pointer :rect)) (dh :signed-integer) (dv :signed-integer))   nil   (:stack-trap #xA8A8)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InsetRect" ((r (:pointer :rect)) (dh :signed-integer) (dv :signed-integer))   nil   (:stack-trap #xA8A9)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SectRect" ((src1 (:pointer :rect)) (src2 (:pointer :rect)) (dstRect (:pointer :rect)))   (:stack :boolean)   (:stack-trap #xA8AA)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_UnionRect" ((src1 (:pointer :rect)) (src2 (:pointer :rect)) (dstRect (:pointer :rect)))   nil   (:stack-trap #xA8AB)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EqualRect" ((rect1 (:pointer :rect)) (rect2 (:pointer :rect)))   (:stack :boolean)   (:stack-trap #xA8A6)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EmptyRect" ((r (:pointer :rect)))   (:stack :boolean)   (:stack-trap #xA8AE)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FrameRect" ((r (:pointer :rect)))   nil   (:stack-trap #xA8A1)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PaintRect" ((r (:pointer :rect)))   nil   (:stack-trap #xA8A2)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EraseRect" ((r (:pointer :rect)))   nil   (:stack-trap #xA8A3)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InvertRect" ((r (:pointer :rect)))   nil   (:stack-trap #xA8A4)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillRect" ((r (:pointer :rect)) (pat (:pointer :pattern)))   nil   (:stack-trap #xA8A5)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FrameOval" ((r (:pointer :rect)))   nil   (:stack-trap #xA8B7)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PaintOval" ((r (:pointer :rect)))   nil   (:stack-trap #xA8B8)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EraseOval" ((r (:pointer :rect)))   nil   (:stack-trap #xA8B9)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InvertOval" ((r (:pointer :rect)))   nil   (:stack-trap #xA8BA)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillOval" ((r (:pointer :rect)) (pat (:pointer :pattern)))   nil   (:stack-trap #xA8BB)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FrameRoundRect" ((r (:pointer :rect)) (ovalWidth :signed-integer) (ovalHeight :signed-integer))   nil   (:stack-trap #xA8B0)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PaintRoundRect" ((r (:pointer :rect)) (ovalWidth :signed-integer) (ovalHeight :signed-integer))   nil   (:stack-trap #xA8B1)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EraseRoundRect" ((r (:pointer :rect)) (ovalWidth :signed-integer) (ovalHeight :signed-integer))   nil   (:stack-trap #xA8B2)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InvertRoundRect" ((r (:pointer :rect)) (ovalWidth :signed-integer) (ovalHeight :signed-integer))   nil   (:stack-trap #xA8B3)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillRoundRect" ((r (:pointer :rect)) (ovalWidth :signed-integer) (ovalHeight :signed-integer) (pat (:pointer :pattern)))   nil   (:stack-trap #xA8B4)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FrameArc" ((r (:pointer :rect)) (startAngle :signed-integer) (arcAngle :signed-integer))   nil   (:stack-trap #xA8BE)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PaintArc" ((r (:pointer :rect)) (startAngle :signed-integer) (arcAngle :signed-integer))   nil   (:stack-trap #xA8BF)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EraseArc" ((r (:pointer :rect)) (startAngle :signed-integer) (arcAngle :signed-integer))   nil   (:stack-trap #xA8C0)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InvertArc" ((r (:pointer :rect)) (startAngle :signed-integer) (arcAngle :signed-integer))   nil   (:stack-trap #xA8C1)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillArc" ((r (:pointer :rect)) (startAngle :signed-integer) (arcAngle :signed-integer) (pat (:pointer :pattern)))   nil   (:stack-trap #xA8C2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_NewRgn" ()   (:stack (:handle :region))   (:stack-trap #xA8D8)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OpenRgn" ()   nil   (:stack-trap #xA8DA)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CloseRgn" ((dstRgn (:handle :region)))   nil   (:stack-trap #xA8DB)); $ENDC#|                                              ; $IFC NOT SystemSevenOrLater ; CONST |#                                             ; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_BitMapToRegionGlue" ((region (:handle :region)) (bMap (:pointer :bitmap)))   :signed-integer   () )                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_BitMapToRegion" ((region (:handle :region)) (bMap (:pointer :bitmap)))   (:stack :signed-integer)   (:stack-trap #xA8D7)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposeRgn" ((rgn (:handle :region)))   nil   (:stack-trap #xA8D9)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CopyRgn" ((srcRgn (:handle :region)) (dstRgn (:handle :region)))   nil   (:stack-trap #xA8DC)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetEmptyRgn" ((rgn (:handle :region)))   nil   (:stack-trap #xA8DD)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetRectRgn" ((rgn (:handle :region)) (left :signed-integer) (top :signed-integer) (right :signed-integer) (bottom :signed-integer))   nil   (:stack-trap #xA8DE)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_RectRgn" ((rgn (:handle :region)) (r (:pointer :rect)))   nil   (:stack-trap #xA8DF)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OffsetRgn" ((rgn (:handle :region)) (dh :signed-integer) (dv :signed-integer))   nil   (:stack-trap #xA8E0)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InsetRgn" ((rgn (:handle :region)) (dh :signed-integer) (dv :signed-integer))   nil   (:stack-trap #xA8E1)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SectRgn" ((srcRgnA (:handle :region)) (srcRgnB (:handle :region)) (dstRgn (:handle :region)))   nil   (:stack-trap #xA8E4)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_UnionRgn" ((srcRgnA (:handle :region)) (srcRgnB (:handle :region)) (dstRgn (:handle :region)))   nil   (:stack-trap #xA8E5)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DiffRgn" ((srcRgnA (:handle :region)) (srcRgnB (:handle :region)) (dstRgn (:handle :region)))   nil   (:stack-trap #xA8E6)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_XorRgn" ((srcRgnA (:handle :region)) (srcRgnB (:handle :region)) (dstRgn (:handle :region)))   nil   (:stack-trap #xA8E7)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_RectInRgn" ((r (:pointer :rect)) (rgn (:handle :region)))   (:stack :boolean)   (:stack-trap #xA8E9)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EqualRgn" ((rgnA (:handle :region)) (rgnB (:handle :region)))   (:stack :boolean)   (:stack-trap #xA8E3)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EmptyRgn" ((rgn (:handle :region)))   (:stack :boolean)   (:stack-trap #xA8E2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FrameRgn" ((rgn (:handle :region)))   nil   (:stack-trap #xA8D2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PaintRgn" ((rgn (:handle :region)))   nil   (:stack-trap #xA8D3)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EraseRgn" ((rgn (:handle :region)))   nil   (:stack-trap #xA8D4)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InvertRgn" ((rgn (:handle :region)))   nil   (:stack-trap #xA8D5)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillRgn" ((rgn (:handle :region)) (pat (:pointer :pattern)))   nil   (:stack-trap #xA8D6)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ScrollRect" ((r (:pointer :rect)) (dh :signed-integer) (dv :signed-integer) (updateRgn (:handle :region)))   nil   (:stack-trap #xA8EF)); $ENDC; CONST                                         ; CONST; CONST; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CopyBits" ((srcBits (:pointer :bitmap)) (dstBits (:pointer :bitmap)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)) (mode :signed-integer) (maskRgn (:handle :region)))   nil   (:stack-trap #xA8EC)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SeedFill" ((srcPtr :pointer) (dstPtr :pointer) (srcRow :signed-integer) (dstRow :signed-integer) (height :signed-integer) (words :signed-integer) (seedH :signed-integer) (seedV :signed-integer))   nil   (:stack-trap #xA839)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CalcMask" ((srcPtr :pointer) (dstPtr :pointer) (srcRow :signed-integer) (dstRow :signed-integer) (height :signed-integer) (words :signed-integer))   nil   (:stack-trap #xA838)); $ENDC; CONST                                         ; CONST; CONST; CONST; CONST; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CopyMask" ((srcBits (:pointer :bitmap)) (maskBits (:pointer :bitmap)) (dstBits (:pointer :bitmap)) (srcRect (:pointer :rect)) (maskRect (:pointer :rect)) (dstRect (:pointer :rect)))   nil   (:stack-trap #xA817)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OpenPicture" ((picFrame (:pointer :rect)))   (:stack (:handle :picture))   (:stack-trap #xA8F3)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PicComment" ((kind :signed-integer) (dataSize :signed-integer) (dataHandle :handle))   nil   (:stack-trap #xA8F2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ClosePicture" ()   nil   (:stack-trap #xA8F4)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DrawPicture" ((myPicture (:handle :picture)) (dstRect (:pointer :rect)))   nil   (:stack-trap #xA8F6)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_KillPicture" ((myPicture (:handle :picture)))   nil   (:stack-trap #xA8F5)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OpenPoly" ()   (:stack (:handle :polygon))   (:stack-trap #xA8CB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ClosePoly" ()   nil   (:stack-trap #xA8CC)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_KillPoly" ((poly (:handle :polygon)))   nil   (:stack-trap #xA8CD)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OffsetPoly" ((poly (:handle :polygon)) (dh :signed-integer) (dv :signed-integer))   nil   (:stack-trap #xA8CE)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FramePoly" ((poly (:handle :polygon)))   nil   (:stack-trap #xA8C6)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PaintPoly" ((poly (:handle :polygon)))   nil   (:stack-trap #xA8C7)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ErasePoly" ((poly (:handle :polygon)))   nil   (:stack-trap #xA8C8)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InvertPoly" ((poly (:handle :polygon)))   nil   (:stack-trap #xA8C9)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillPoly" ((poly (:handle :polygon)) (pat (:pointer :pattern)))   nil   (:stack-trap #xA8CA)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetPt" ((pt (:pointer :point)) (h :signed-integer) (v :signed-integer))   nil   (:stack-trap #xA880)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_LocalToGlobal" ((pt (:pointer :point)))   nil   (:stack-trap #xA870)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GlobalToLocal" ((pt (:pointer :point)))   nil   (:stack-trap #xA871)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_Random" ()   (:stack :signed-integer)   (:stack-trap #xA861)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StuffHex" ((thingPtr :pointer) (s (:string 255)))   nil   (:stack-trap #xA866)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetPixel" ((h :signed-integer) (v :signed-integer))   (:stack :boolean)   (:stack-trap #xA865)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ScalePt" ((pt (:pointer :point)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)))   nil   (:stack-trap #xA8F8)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MapPt" ((pt (:pointer :point)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)))   nil   (:stack-trap #xA8F9)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MapRect" ((r (:pointer :rect)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)))   nil   (:stack-trap #xA8FA)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MapRgn" ((rgn (:handle :region)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)))   nil   (:stack-trap #xA8FB)); $ENDC; CONST                                         ; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MapPoly" ((poly (:handle :polygon)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)))   nil   (:stack-trap #xA8FC)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetStdProcs" ((procs (:pointer :qdprocs)))   nil   (:stack-trap #xA8EA)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdRect" ((verb :signed-byte) (r (:pointer :rect)))   nil   (:stack-trap #xA8A0)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdRRect" ((verb :signed-byte) (r (:pointer :rect)) (ovalWidth :signed-integer) (ovalHeight :signed-integer))   nil   (:stack-trap #xA8AF)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdOval" ((verb :signed-byte) (r (:pointer :rect)))   nil   (:stack-trap #xA8B6)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdArc" ((verb :signed-byte) (r (:pointer :rect)) (startAngle :signed-integer) (arcAngle :signed-integer))   nil   (:stack-trap #xA8BD)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdPoly" ((verb :signed-byte) (poly (:handle :polygon)))   nil   (:stack-trap #xA8C5)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdRgn" ((verb :signed-byte) (rgn (:handle :region)))   nil   (:stack-trap #xA8D1)); $ENDC; CONST                                         ; CONST; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdBits" ((srcBits (:pointer :bitmap)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)) (mode :signed-integer) (maskRgn (:handle :region)))   nil   (:stack-trap #xA8EB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdComment" ((kind :signed-integer) (dataSize :signed-integer) (dataHandle :handle))   nil   (:stack-trap #xA8F1)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdGetPic" ((dataPtr :pointer) (byteCount :signed-integer))   nil   (:stack-trap #xA8EE)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdPutPic" ((dataPtr :pointer) (byteCount :signed-integer))   nil   (:stack-trap #xA8F0)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_AddPt" ((src :point) (dst (:pointer :point)))   nil   (:stack-trap #xA87E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_EqualPt" ((pt1 :point) (pt2 :point))   (:stack :boolean)   (:stack-trap #xA881)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PtInRect" ((pt :point) (r (:pointer :rect)))   (:stack :boolean)   (:stack-trap #xA8AD)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_Pt2Rect" ((pt1 :point) (pt2 :point) (dstRect (:pointer :rect)))   nil   (:stack-trap #xA8AC)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PtToAngle" ((r (:pointer :rect)) (pt :point) (angle (:pointer :signed-integer)))   nil   (:stack-trap #xA8C3)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SubPt" ((src :point) (dst (:pointer :point)))   nil   (:stack-trap #xA87F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PtInRgn" ((pt :point) (rgn (:handle :region)))   (:stack :boolean)   (:stack-trap #xA8E8)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_StdLine" ((newPt :point))   nil   (:stack-trap #xA890)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OpenCPort" ((port (:pointer :cgrafport)))   nil   (:stack-trap #xAA00)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InitCPort" ((port (:pointer :cgrafport)))   nil   (:stack-trap #xAA01)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CloseCPort" ((port (:pointer :cgrafport)))   nil   (:stack-trap #xA87D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_NewPixMap" ()   (:stack (:handle :pixmap))   (:stack-trap #xAA03)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposePixMap" ((pm (:handle :pixmap)))   nil   (:stack-trap #xAA04)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CopyPixMap" ((srcPM (:handle :pixmap)) (dstPM (:handle :pixmap)))   nil   (:stack-trap #xAA05)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_NewPixPat" ()   (:stack (:handle :pixpat))   (:stack-trap #xAA07)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposePixPat" ((pp (:handle :pixpat)))   nil   (:stack-trap #xAA08)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CopyPixPat" ((srcPP (:handle :pixpat)) (dstPP (:handle :pixpat)))   nil   (:stack-trap #xAA09)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PenPixPat" ((pp (:handle :pixpat)))   nil   (:stack-trap #xAA0A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_BackPixPat" ((pp (:handle :pixpat)))   nil   (:stack-trap #xAA0B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetPixPat" ((patID :signed-integer))   (:stack (:handle :pixpat))   (:stack-trap #xAA0C)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MakeRGBPat" ((pp (:handle :pixpat)) (myColor (:pointer :rgbcolor)))   nil   (:stack-trap #xAA0D)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillCRect" ((r (:pointer :rect)) (pp (:handle :pixpat)))   nil   (:stack-trap #xAA0E)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillCOval" ((r (:pointer :rect)) (pp (:handle :pixpat)))   nil   (:stack-trap #xAA0F)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillCRoundRect" ((r (:pointer :rect)) (ovalWidth :signed-integer) (ovalHeight :signed-integer) (pp (:handle :pixpat)))   nil   (:stack-trap #xAA10)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillCArc" ((r (:pointer :rect)) (startAngle :signed-integer) (arcAngle :signed-integer) (pp (:handle :pixpat)))   nil   (:stack-trap #xAA11)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillCRgn" ((rgn (:handle :region)) (pp (:handle :pixpat)))   nil   (:stack-trap #xAA12)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FillCPoly" ((poly (:handle :polygon)) (pp (:handle :pixpat)))   nil   (:stack-trap #xAA13)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_RGBForeColor" ((color (:pointer :rgbcolor)))   nil   (:stack-trap #xAA14)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_RGBBackColor" ((color (:pointer :rgbcolor)))   nil   (:stack-trap #xAA15)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetCPixel" ((h :signed-integer) (v :signed-integer) (cPix (:pointer :rgbcolor)))   nil   (:stack-trap #xAA16)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetPortPix" ((pm (:handle :pixmap)))   nil   (:stack-trap #xAA06)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetCPixel" ((h :signed-integer) (v :signed-integer) (cPix (:pointer :rgbcolor)))   nil   (:stack-trap #xAA17)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetForeColor" ((color (:pointer :rgbcolor)))   nil   (:stack-trap #xAA19)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetBackColor" ((color (:pointer :rgbcolor)))   nil   (:stack-trap #xAA1A)); $ENDC; CONST                                         ; CONST; CONST; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SeedCFill" ((srcBits (:pointer :bitmap)) (dstBits (:pointer :bitmap)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)) (seedH :signed-integer) (seedV :signed-integer) (matchProc :pointer) (matchData :signed-long))   nil   (:stack-trap #xAA50)); $ENDC; CONST                                         ; CONST; CONST; CONST; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CalcCMask" ((srcBits (:pointer :bitmap)) (dstBits (:pointer :bitmap)) (srcRect (:pointer :rect)) (dstRect (:pointer :rect)) (seedRGB (:pointer :rgbcolor)) (matchProc :pointer) (matchData :signed-long))   nil   (:stack-trap #xAA4F)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OpenCPicture" ((newHeader (:pointer :opencpicparams)))   (:stack (:handle :picture))   (:stack-trap #xAA20)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_OpColor" ((color (:pointer :rgbcolor)))   nil   (:stack-trap #xAA21)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_HiliteColor" ((color (:pointer :rgbcolor)))   nil   (:stack-trap #xAA22)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposeCTable" ((cTable (:handle :colortable)))   nil   (:stack-trap #xAA24)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetCTable" ((ctID :signed-integer))   (:stack (:handle :colortable))   (:stack-trap #xAA18)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetCCursor" ((crsrID :signed-integer))   (:stack (:handle :ccrsr))   (:stack-trap #xAA1B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetCCursor" ((cCrsr (:handle :ccrsr)))   nil   (:stack-trap #xAA1C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_AllocCursor" ()   nil   (:stack-trap #xAA1D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposeCCursor" ((cCrsr (:handle :ccrsr)))   nil   (:stack-trap #xAA26)); $ENDC; $IFC OLDROUTINELOCATIONS ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetCIcon" ((iconID :signed-integer))   (:stack (:handle :cicon))   (:stack-trap #xAA1E)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_PlotCIcon" ((theRect (:pointer :rect)) (theIcon (:handle :cicon)))   nil   (:stack-trap #xAA1F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposeCIcon" ((theIcon (:handle :cicon)))   nil   (:stack-trap #xAA25)); $ENDC; $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetStdCProcs" ((procs (:pointer :cqdprocs)))   nil   (:stack-trap #xAA4E)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetMaxDevice" ((globalRect (:pointer :rect)))   (:stack (:handle :gdevice))   (:stack-trap #xAA27)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetCTSeed" ()   (:stack :signed-long)   (:stack-trap #xAA28)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetDeviceList" ()   (:stack (:handle :gdevice))   (:stack-trap #xAA29)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetMainDevice" ()   (:stack (:handle :gdevice))   (:stack-trap #xAA2A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetNextDevice" ((curDevice (:handle :gdevice)))   (:stack (:handle :gdevice))   (:stack-trap #xAA2B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_TestDeviceAttribute" ((gdh (:handle :gdevice)) (attribute :signed-integer))   (:stack :boolean)   (:stack-trap #xAA2C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetDeviceAttribute" ((gdh (:handle :gdevice)) (attribute :signed-integer) (value :boolean))   nil   (:stack-trap #xAA2D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InitGDevice" ((qdRefNum :signed-integer) (mode :signed-long) (gdh (:handle :gdevice)))   nil   (:stack-trap #xAA2E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_NewGDevice" ((refNum :signed-integer) (mode :signed-long))   (:stack (:handle :gdevice))   (:stack-trap #xAA2F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DisposeGDevice" ((gdh (:handle :gdevice)))   nil   (:stack-trap #xAA30)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetGDevice" ((gd (:handle :gdevice)))   nil   (:stack-trap #xAA31)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetGDevice" ()   (:stack (:handle :gdevice))   (:stack-trap #xAA32)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_Color2Index" ((myColor (:pointer :rgbcolor)))   (:stack :signed-long)   (:stack-trap #xAA33)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_Index2Color" ((index :signed-long) (aColor (:pointer :rgbcolor)))   nil   (:stack-trap #xAA34)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InvertColor" ((myColor (:pointer :rgbcolor)))   nil   (:stack-trap #xAA35)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_RealColor" ((color (:pointer :rgbcolor)))   (:stack :boolean)   (:stack-trap #xAA36)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetSubTable" ((myColors (:handle :colortable)) (iTabRes :signed-integer) (targetTbl (:handle :colortable)))   nil   (:stack-trap #xAA37)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_MakeITable" ((cTabH (:handle :colortable)) (iTabH (:handle :itab)) (res :signed-integer))   nil   (:stack-trap #xAA39)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_AddSearch" ((searchProc :pointer))   nil   (:stack-trap #xAA3A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_AddComp" ((compProc :pointer))   nil   (:stack-trap #xAA3B)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DelSearch" ((searchProc :pointer))   nil   (:stack-trap #xAA4C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DelComp" ((compProc :pointer))   nil   (:stack-trap #xAA4D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetClientID" ((id :signed-integer))   nil   (:stack-trap #xAA3C)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ProtectEntry" ((index :signed-integer) (protect :boolean))   nil   (:stack-trap #xAA3D)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_ReserveEntry" ((index :signed-integer) (reserve :boolean))   nil   (:stack-trap #xAA3E)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetEntries" ((start :signed-integer) (count :signed-integer) (aTable (:pointer :cspecarray)))   nil   (:stack-trap #xAA3F)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SaveEntries" ((srcTable (:handle :colortable)) (resultTable (:handle :colortable)) (selection (:pointer :reqlistrec)))   nil   (:stack-trap #xAA49)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_RestoreEntries" ((srcTable (:handle :colortable)) (dstTable (:handle :colortable)) (selection (:pointer :reqlistrec)))   nil   (:stack-trap #xAA4A)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_QDError" ()   (:stack :signed-integer)   (:stack-trap #xAA40)); $ENDC; CONST                                         ; CONST; CONST; CONST; CONST; CONST; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_CopyDeepMask" ((srcBits (:pointer :bitmap)) (maskBits (:pointer :bitmap)) (dstBits (:pointer :bitmap)) (srcRect (:pointer :rect)) (maskRect (:pointer :rect)) (dstRect (:pointer :rect)) (mode :signed-integer) (maskRgn (:handle :region)))   nil   (:stack-trap #xAA51)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_DeviceLoop" ((drawingRgn (:handle :region)) (drawingProc :pointer) (userData :signed-long) (flags :signed-long))   nil   (:stack-trap #xABCA)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetMaskTable" ()   :pointer   (#xA836 #x2E88) ); $ENDC; $IFC OLDROUTINENAMES ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap ("_DisposPixMap" "DisposePixMap")         ((pm (:handle :pixmap)))   nil   (:stack-trap #xAA04)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap ("_DisposPixPat" "DisposePixPat")         ((pp (:handle :pixpat)))   nil   (:stack-trap #xAA08)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap ("_DisposCTable" "DisposeCTable")         ((cTable (:handle :colortable)))   nil   (:stack-trap #xAA24)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap ("_DisposCCursor" "DisposeCCursor")         ((cCrsr (:handle :ccrsr)))   nil   (:stack-trap #xAA26)); $ENDC; $IFC OLDROUTINELOCATIONS ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap ("_DisposCIcon" "DisposeCIcon")         ((theIcon (:handle :cicon)))   nil   (:stack-trap #xAA25)); $ENDC; $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap ("_DisposGDevice" "DisposeGDevice")         ((gdh (:handle :gdevice)))   nil   (:stack-trap #xAA30)); $ENDC; $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := QuickdrawIncludes; $ENDC                                         ; __QUICKDRAW__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'Quickdraw);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch(DEFCONSTANT $DEVICELOOPFLAGS17 17);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS22 22);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS5 5);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS12 12);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS4 4);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS28 28);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS16 16);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS21 21);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS15 15);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS20 20);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS8 8);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS27 27);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS14 14);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS9 9);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS19 19);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS6 6);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS25 25);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS31 31);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS11 11);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS18 18);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS3 3);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS24 24);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS7 7);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS30 30);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS26 26);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS23 23);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS29 29);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS10 10);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:QUICKDRAW.patch (DEFCONSTANT $DEVICELOOPFLAGS13 13)