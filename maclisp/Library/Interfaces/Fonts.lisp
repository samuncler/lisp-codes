(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Fonts.p"; at Tuesday June 6,1995 2:09:16 pm.; ;  	File:		Fonts.p;  ;  	Contains:	Font Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __FONTS__; $SETC __FONTS__ := 1; $I+; $SETC FontsIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $systemFont 0)(defconstant $applFont 1)(defconstant $newYork 2)(defconstant $geneva 3)(defconstant $monaco 4)(defconstant $venice 5)(defconstant $london 6)(defconstant $athens 7)(defconstant $sanFran 8)(defconstant $toronto 9)(defconstant $cairo 11)(defconstant $losAngeles 12)(defconstant $times 20)(defconstant $helvetica 21)(defconstant $courier 22)(defconstant $symbol 23)(defconstant $mobile 24)(defconstant $commandMark 17)(defconstant $checkMark 18)(defconstant $diamondMark 19)(defconstant $appleMark 20)(defconstant $propFont 36864)(defconstant $prpFntH 36865)(defconstant $prpFntW 36866)(defconstant $prpFntHW 36867)(defconstant $fixedFont 45056)(defconstant $fxdFntH 45057)(defconstant $fxdFntW 45058)(defconstant $fxdFntHW 45059)(defconstant $fontWid 44208)(defrecord FMInput    (family :signed-integer)   (size :signed-integer)   (face :unsigned-byte)   (needBits :boolean)   (device :signed-integer)   (numer :point)   (denom :point)   )(defrecord FMOutput    (errNum :signed-integer)   (fontHandle :handle)   (boldPixels :unsigned-byte)   (italicPixels :unsigned-byte)   (ulOffset :unsigned-byte)   (ulShadow :unsigned-byte)   (ulThick :unsigned-byte)   (shadowPixels :unsigned-byte)   (extra :signed-byte)   (ascent :unsigned-byte)   (descent :unsigned-byte)   (widMax :unsigned-byte)   (leading :signed-byte)   (curStyle :signed-byte)   (numer :point)   (denom :point)   )(def-mactype :fmoutptr (find-mactype '(:pointer :fmoutput)))(defrecord FontRec    (fontType :signed-integer)                   ; font type   (firstChar :signed-integer)                  ; ASCII code of first character   (lastChar :signed-integer)                   ; ASCII code of last character   (widMax :signed-integer)                     ; maximum character width   (kernMax :signed-integer)                    ; negative of maximum character kern   (nDescent :signed-integer)                   ; negative of descent   (fRectWidth :signed-integer)                 ; width of font rectangle   (fRectHeight :signed-integer)                ; height of font rectangle   ;;Changing field owtloc from signed-integer to unsigned-word to match C header (pretty-darn-sure)   (owTLoc :unsigned-word)                      ; offset to offset/width table   (ascent :signed-integer)                     ; ascent   (descent :signed-integer)                    ; descent   (leading :signed-integer)                    ; leading   (rowWords :signed-integer)                   ; row width of bit image / 2    )(defrecord FMetricRec    (ascent :signed-long)                        ; base line to top   (descent :signed-long)                       ; base line to bottom   (leading :signed-long)                       ; leading between lines   (widMax :signed-long)                        ; maximum character width   (wTabHandle :handle)                         ; handle to font width table   )(def-mactype :fmetricrecptr (find-mactype '(:pointer :fmetricrec)))(def-mactype :fmetricrechandle (find-mactype '(:handle :fmetricrec)))(defrecord WidEntry    (widStyle :signed-integer)                   ; style entry applies to   )(defrecord WidTable    (numWidths :signed-integer)                  ; number of entries - 1   )(defrecord AsscEntry    (fontSize :signed-integer)   (fontStyle :signed-integer)   (fontID :signed-integer)                     ; font resource ID   )(defrecord FontAssoc    (numAssoc :signed-integer)                   ; number of entries - 1   )(defrecord StyleTable    (fontClass :signed-integer)   (offset :signed-long)   (reserved :signed-long)   (indexes (:array :character 48 :packed))   )(defrecord NameTable    (stringCount :signed-integer)   (baseFontName (:string 255))   )(defrecord KernPair    (kernFirst :character)                       ; 1st character of kerned pair   (kernSecond :character)                      ; 2nd character of kerned pair   (kernWidth :signed-integer)                  ; kerning in 1pt fixed format   )(defrecord KernEntry    (kernStyle :signed-integer)                  ; style the entry applies to   (kernLength :signed-integer)                 ; length of this entry   )(defrecord KernTable    (numKerns :signed-integer)                   ; number of kerning entries   )(defrecord WidthTable    (tabData (:array :signed-long 256))          ; character widths   (tabFont :handle)                            ; font record used to build table   (sExtra :signed-long)                        ; space extra used for table   (style :signed-long)                         ; extra due to style   (fID :signed-integer)                        ; font family ID   (fSize :signed-integer)                      ; font size request   (face :signed-integer)                       ; style (face) request   (device :signed-integer)                     ; device requested   (inNumer :point)                             ; scale factors requested   (inDenom :point)                             ; scale factors requested   (aFID :signed-integer)                       ; actual font family ID for table   (fHand :handle)                              ; family record used to build up table   (usedFam :boolean)                           ; used fixed point family widths   (aFace :unsigned-byte)                       ; actual face produced   (vOutput :signed-integer)                    ; vertical scale output value   (hOutput :signed-integer)                    ; horizontal scale output value   (vFactor :signed-integer)                    ; vertical scale output value   (hFactor :signed-integer)                    ; horizontal scale output value   (aSize :signed-integer)                      ; actual size of actual font used   (tabSize :signed-integer)                    ; total size of table   )(defrecord FamRec    (ffFlags :signed-integer)                    ; flags for family   (ffFamID :signed-integer)                    ; family ID number   (ffFirstChar :signed-integer)                ; ASCII code of 1st character   (ffLastChar :signed-integer)                 ; ASCII code of last character   (ffAscent :signed-integer)                   ; maximum ascent for 1pt font   (ffDescent :signed-integer)                  ; maximum descent for 1pt font   (ffLeading :signed-integer)                  ; maximum leading for 1pt font   (ffWidMax :signed-integer)                   ; maximum widMax for 1pt font   (ffWTabOff :signed-long)                     ; offset to width table   (ffKernOff :signed-long)                     ; offset to kerning table   (ffStylOff :signed-long)                     ; offset to style mapping table   (ffProperty (:array :signed-integer 9))      ; style property info   (ffIntl (:array :signed-integer 2))          ; for international use   (ffVersion :signed-integer)                  ; version number   ); $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_InitFonts" ()   nil   (:stack-trap #xA8FE)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetFontName" ((familyID :signed-integer) (name (:pointer (:string 255))))   nil   (:stack-trap #xA8FF)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_GetFNum" ((name (:string 255)) (familyID (:pointer :signed-integer)))   nil   (:stack-trap #xA900)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_RealFont" ((fontNum :signed-integer) (size :signed-integer))   (:stack :boolean)   (:stack-trap #xA902)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetFontLock" ((lockFlag :boolean))   nil   (:stack-trap #xA903)); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FMSwapFont" ((inRec (:pointer :fminput)))   (:stack (:pointer :fmoutput))   (:stack-trap #xA901)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_SetFScaleDisable" ((fscaleDisable :boolean))   nil   (:stack-trap #xA834)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator basic-stack-trap(deftrap "_FontMetrics" ((theMetrics (:pointer :fmetricrec)))   nil   (:stack-trap #xA835)); $ENDC;; Warning: No calling method defined for this trap;; Using mcl2 version of setfractenable because there is no implementation in the new headers(deftrap "_SetFractEnable" ((fractenable :boolean)) nil (:stack-trap 43028)); $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_GetDefFontSize" ()   :signed-integer   (#x3EB8 #xBA8 #x6604 #x3EBC #xC) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_IsOutline" ((numer :point) (denom :point))   (:stack :boolean)   (:stack-trap #xA854 :d0 0 numer denom)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetOutlinePreferred" ((outlinePreferred :boolean))   nil   (:stack-trap #xA854 :d0 1 outlinePreferred)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetOutlinePreferred" ()   (:stack :boolean)   (:stack-trap #xA854 :d0 9)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_OutlineMetrics" ((byteCount :signed-integer) (textPtr :pointer) (numer :point) (denom :point) (yMax (:pointer :signed-integer)) (yMin (:pointer :signed-integer)) (awArray (:pointer :signed-long)) (lsbArray (:pointer :signed-long)) (boundsArray (:pointer :rect)))   (:stack :signed-integer)   (:stack-trap #xA854 :d0 8 byteCount textPtr numer denom yMax yMin awArray lsbArray boundsArray)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_SetPreserveGlyph" ((preserveGlyph :boolean))   nil   (:stack-trap #xA854 :d0 10 preserveGlyph)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_GetPreserveGlyph" ()   (:stack :boolean)   (:stack-trap #xA854 :d0 11)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_FlushFonts" ()   (:stack :signed-integer)   (:stack-trap #xA854 :d0 12)); $ENDC; $IFC NOT CFMSYSTEMCALLS;; Generated by translator read-word-from-memory(deftrap "_GetSysFont" ()   (:no-trap :signed-integer)   (:no-trap (%get-signed-word (%int-to-ptr 2982))));  MOVE.w $0BA6,(SP) ; $ENDC; $IFC NOT CFMSYSTEMCALLS;; Generated by translator read-word-from-memory(deftrap "_GetAppFont" ()   (:no-trap :signed-integer)   (:no-trap (%get-signed-word (%int-to-ptr 2436))));  MOVE.w $0984,(SP) ; $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := FontsIncludes; $ENDC                                         ; __FONTS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Fonts)