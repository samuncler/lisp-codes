(in-package :TRAPS);;;;;;;;;;;;;;;;;;;;;;;;;;; Modification History;;;; 03/06/96 bill Map old names to new names;;; Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Script.p"; at Tuesday June 6,1995 2:02:32 pm.; ;  	File:		Script.p;  ;  	Contains:	Script Manager interfaces;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __SCRIPT__; $SETC __SCRIPT__ := 1; $I+; $SETC ScriptIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC; 	ConditionalMacros.p											#|                                              ; $IFC UNDEFINED __QUICKDRAW__|#(require-interface 'Quickdraw)#|                                              ; $I Quickdraw.p |#                                             ; $ENDC; 	MixedMode.p													; 	QuickdrawText.p												; $IFC UNDEFINED __INTLRESOURCES__(require-interface 'IntlResources)              ; $I IntlResources.p; $ENDC#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC; 	OSUtils.p													; 		Memory.p												; $PUSH; $ALIGN MAC68K; $LibExport+;  Script System constants (defconstant $smSystemScript -1)                ; designates system script.(defconstant $smCurrentScript -2)               ; designates current font script.(defconstant $smAllScripts -3)                  ; designates any script	(defconstant $smRoman 0)                        ; Roman(defconstant $smJapanese 1)                     ; Japanese(defconstant $smTradChinese 2)                  ; Traditional Chinese(defconstant $smKorean 3)                       ; Korean(defconstant $smArabic 4)                       ; Arabic(defconstant $smHebrew 5)                       ; Hebrew(defconstant $smGreek 6)                        ; Greek(defconstant $smCyrillic 7)                     ; Cyrillic(defconstant $smRSymbol 8)                      ; Right-left symbol(defconstant $smDevanagari 9)                   ; Devanagari(defconstant $smGurmukhi 10)                    ; Gurmukhi(defconstant $smGujarati 11)                    ; Gujarati(defconstant $smOriya 12)                       ; Oriya(defconstant $smBengali 13)                     ; Bengali(defconstant $smTamil 14)                       ; Tamil(defconstant $smTelugu 15)                      ; Telugu(defconstant $smKannada 16)                     ; Kannada/Kanarese(defconstant $smMalayalam 17)                   ; Malayalam(defconstant $smSinhalese 18)                   ; Sinhalese(defconstant $smBurmese 19)                     ; Burmese(defconstant $smKhmer 20)                       ; Khmer/Cambodian(defconstant $smThai 21)                        ; Thai(defconstant $smLaotian 22)                     ; Laotian(defconstant $smGeorgian 23)                    ; Georgian(defconstant $smArmenian 24)                    ; Armenian(defconstant $smSimpChinese 25)                 ; Simplified Chinese(defconstant $smTibetan 26)                     ; Tibetan(defconstant $smMongolian 27)                   ; Mongolian(defconstant $smGeez 28)                        ; Geez/Ethiopic(defconstant $smEthiopic 28)                    ; Synonym for smGeez(defconstant $smEastEurRoman 29)                ; Synonym for smSlavic(defconstant $smVietnamese 30)                  ; Vietnamese(defconstant $smExtArabic 31)                   ; extended Arabic(defconstant $smUninterp 32)                    ; uninterpreted symbols, e.g. palette symbols(defconstant $smKlingon 32)                     ; Klingon; Obsolete names for script systems (kept for backward compatibility)(defconstant $smChinese 2)                      ; (use smTradChinese or smSimpChinese)(defconstant $smRussian 7)                      ; (old name for smCyrillic);  smMaldivian = 25;         (no more smMaldivian!)(defconstant $smAmharic 28)                     ; (old name for smGeez)(defconstant $smSlavic 29)                      ; (old name for smEastEurRoman)(defconstant $smSindhi 31)                      ; (old name for smExtArabic);  Language Codes (defconstant $langEnglish 0)                    ;  smRoman script (defconstant $langFrench 1)                     ;  smRoman script (defconstant $langGerman 2)                     ;  smRoman script (defconstant $langItalian 3)                    ;  smRoman script (defconstant $langDutch 4)                      ;  smRoman script (defconstant $langSwedish 5)                    ;  smRoman script (defconstant $langSpanish 6)                    ;  smRoman script (defconstant $langDanish 7)                     ;  smRoman script (defconstant $langPortuguese 8)                 ;  smRoman script (defconstant $langNorwegian 9)                  ;  smRoman script (defconstant $langHebrew 10)                    ;  smHebrew script (defconstant $langJapanese 11)                  ;  smJapanese script (defconstant $langArabic 12)                    ;  smArabic script (defconstant $langFinnish 13)                   ;  smRoman script (defconstant $langGreek 14)                     ;  smGreek script (defconstant $langIcelandic 15)                 ;  extended Roman script (defconstant $langMaltese 16)                   ;  extended Roman script (defconstant $langTurkish 17)                   ;  extended Roman script (defconstant $langCroatian 18)                  ;  Serbo-Croatian in extended Roman script (defconstant $langTradChinese 19)               ;  Chinese in traditional characters (defconstant $langUrdu 20)                      ;  smArabic script (defconstant $langHindi 21)                     ;  smDevanagari script (defconstant $langThai 22)                      ;  smThai script (defconstant $langKorean 23)                    ;  smKorean script (defconstant $langLithuanian 24)                ;  smEastEurRoman script (defconstant $langPolish 25)                    ;  smEastEurRoman script (defconstant $langHungarian 26)                 ;  smEastEurRoman script (defconstant $langEstonian 27)                  ;  smEastEurRoman script (defconstant $langLettish 28)                   ;  smEastEurRoman script (defconstant $langLatvian 28)                   ;  Synonym for langLettish (defconstant $langSaamisk 29)                   ;  ext. Roman script, lang. of the Sami/Lapp people of Scand. (defconstant $langLappish 29)                   ;  Synonym for langSaamisk (defconstant $langFaeroese 30)                  ;  smRoman script (defconstant $langFarsi 31)                     ;  smArabic script (defconstant $langPersian 31)                   ;  Synonym for langFarsi (defconstant $langRussian 32)                   ;  smCyrillic script (defconstant $langSimpChinese 33)               ;  Chinese in simplified characters (defconstant $langFlemish 34)                   ;  smRoman script (defconstant $langIrish 35)                     ;  smRoman script (defconstant $langAlbanian 36)                  ;  smRoman script (defconstant $langRomanian 37)                  ;  smEastEurRoman script (defconstant $langCzech 38)                     ;  smEastEurRoman script (defconstant $langSlovak 39)                    ;  smEastEurRoman script (defconstant $langSlovenian 40)                 ;  smEastEurRoman script (defconstant $langYiddish 41)                   ;  smHebrew script (defconstant $langSerbian 42)                   ;  Serbo-Croatian in smCyrillic script (defconstant $langMacedonian 43)                ;  smCyrillic script (defconstant $langBulgarian 44)                 ;  smCyrillic script (defconstant $langUkrainian 45)                 ;  smCyrillic script (defconstant $langByelorussian 46)              ;  smCyrillic script (defconstant $langUzbek 47)                     ;  smCyrillic script (defconstant $langKazakh 48)                    ;  smCyrillic script (defconstant $langAzerbaijani 49)               ;  Azerbaijani in smCyrillic script (USSR) (defconstant $langAzerbaijanAr 50)              ;  Azerbaijani in smArabic script (Iran) (defconstant $langArmenian 51)                  ;  smArmenian script (defconstant $langGeorgian 52)                  ;  smGeorgian script (defconstant $langMoldavian 53)                 ;  smCyrillic script (defconstant $langKirghiz 54)                   ;  smCyrillic script (defconstant $langTajiki 55)                    ;  smCyrillic script (defconstant $langTurkmen 56)                   ;  smCyrillic script (defconstant $langMongolian 57)                 ;  Mongolian in smMongolian script (defconstant $langMongolianCyr 58)              ;  Mongolian in smCyrillic script (defconstant $langPashto 59)                    ;  smArabic script (defconstant $langKurdish 60)                   ;  smArabic script (defconstant $langKashmiri 61)                  ;  smArabic script (defconstant $langSindhi 62)                    ;  smExtArabic script (defconstant $langTibetan 63)                   ;  smTibetan script (defconstant $langNepali 64)                    ;  smDevanagari script (defconstant $langSanskrit 65)                  ;  smDevanagari script (defconstant $langMarathi 66)                   ;  smDevanagari script (defconstant $langBengali 67)                   ;  smBengali script (defconstant $langAssamese 68)                  ;  smBengali script (defconstant $langGujarati 69)                  ;  smGujarati script (defconstant $langPunjabi 70)                   ;  smGurmukhi script (defconstant $langOriya 71)                     ;  smOriya script (defconstant $langMalayalam 72)                 ;  smMalayalam script (defconstant $langKannada 73)                   ;  smKannada script (defconstant $langTamil 74)                     ;  smTamil script (defconstant $langTelugu 75)                    ;  smTelugu script (defconstant $langSinhalese 76)                 ;  smSinhalese script (defconstant $langBurmese 77)                   ;  smBurmese script (defconstant $langKhmer 78)                     ;  smKhmer script (defconstant $langLao 79)                       ;  smLaotian script (defconstant $langVietnamese 80)                ;  smVietnamese script (defconstant $langIndonesian 81)                ;  smRoman script (defconstant $langTagalog 82)                   ;  smRoman script (defconstant $langMalayRoman 83)                ;  Malay in smRoman script (defconstant $langMalayArabic 84)               ;  Malay in smArabic script (defconstant $langAmharic 85)                   ;  smEthiopic script (defconstant $langTigrinya 86)                  ;  smEthiopic script (defconstant $langGalla 87)                     ;  smEthiopic script (defconstant $langOromo 87)                     ;  Synonym for langGalla (defconstant $langSomali 88)                    ;  smRoman script (defconstant $langSwahili 89)                   ;  smRoman script (defconstant $langRuanda 90)                    ;  smRoman script (defconstant $langRundi 91)                     ;  smRoman script (defconstant $langChewa 92)                     ;  smRoman script (defconstant $langMalagasy 93)                  ;  smRoman script (defconstant $langEsperanto 94)                 ;  extended Roman script (defconstant $langWelsh 128)                    ;  smRoman script (defconstant $langBasque 129)                   ;  smRoman script (defconstant $langCatalan 130)                  ;  smRoman script (defconstant $langLatin 131)                    ;  smRoman script (defconstant $langQuechua 132)                  ;  smRoman script (defconstant $langGuarani 133)                  ;  smRoman script (defconstant $langAymara 134)                   ;  smRoman script (defconstant $langTatar 135)                    ;  smCyrillic script (defconstant $langUighur 136)                   ;  smArabic script (defconstant $langDzongkha 137)                 ;  (lang of Bhutan) smTibetan script (defconstant $langJavaneseRom 138)              ;  Javanese in smRoman script (defconstant $langSundaneseRom 139)             ;  Sundanese in smRoman script ;  Obsolete names, kept for backward compatibility (defconstant $langPortugese 8)                  ;  old misspelled version, kept for compatibility (defconstant $langMalta 16)                     ;  old misspelled version, kept for compatibility (defconstant $langYugoslavian 18)               ;  (use langCroatian, langSerbian, etc.) (defconstant $langChinese 19)                   ;  (use langTradChinese or langSimpChinese) (defconstant $langLapponian 29)                 ;  Synonym for langSaamisk, not correct name ;  Regional version codes (defconstant $verUS 0)(defconstant $verFrance 1)(defconstant $verBritain 2)(defconstant $verGermany 3)(defconstant $verItaly 4)(defconstant $verNetherlands 5)(defconstant $verFrBelgiumLux 6)                ;  French for Belgium & Luxembourg (defconstant $verSweden 7)(defconstant $verSpain 8)(defconstant $verDenmark 9)(defconstant $verPortugal 10)(defconstant $verFrCanada 11)(defconstant $verNorway 12)(defconstant $verIsrael 13)(defconstant $verJapan 14)(defconstant $verAustralia 15)(defconstant $verArabic 16)                     ;  synonym for verArabia (defconstant $verFinland 17)(defconstant $verFrSwiss 18)                    ;  French Swiss (defconstant $verGrSwiss 19)                    ;  German Swiss (defconstant $verGreece 20)(defconstant $verIceland 21)(defconstant $verMalta 22)(defconstant $verCyprus 23)(defconstant $verTurkey 24)(defconstant $verYugoCroatian 25)               ;  Croatian system for Yugoslavia (defconstant $verNetherlandsComma 26)(defconstant $verBelgiumLuxPoint 27)(defconstant $verCanadaComma 28)(defconstant $verCanadaPoint 29)(defconstant $vervariantPortugal 30)(defconstant $vervariantNorway 31)(defconstant $vervariantDenmark 32)(defconstant $verIndiaHindi 33)                 ;  Hindi system for India (defconstant $verPakistan 34)(defconstant $verTurkishModified 35)(defconstant $verGreekAncient 40)(defconstant $verLithuania 41)(defconstant $verPoland 42)(defconstant $verHungary 43)(defconstant $verEstonia 44)(defconstant $verLatvia 45)(defconstant $verLapland 46)(defconstant $verFaeroeIsl 47)(defconstant $verIran 48)(defconstant $verRussia 49)(defconstant $verIreland 50)                    ;  English-language version for Ireland (defconstant $verKorea 51)(defconstant $verChina 52)(defconstant $verTaiwan 53)(defconstant $verThailand 54)(defconstant $verCzech 56)(defconstant $verSlovak 57)(defconstant $verGenericFE 58)(defconstant $verMagyar 59)(defconstant $verBengali 60)(defconstant $verByeloRussian 61)(defconstant $verUkrania 62)(defconstant $verItalianSwiss 63)(defconstant $verAlternateGr 64)(defconstant $minCountry #$verUS)(defconstant $maxCountry #$verAlternateGr)      ;  changed from verThailand when additional enums added ;  Obsolete region code names, kept for backward compatibility (defconstant $verBelgiumLux 6)                  ;  (use verFrBelgiumLux instead, less ambiguous) (defconstant $verArabia 16)(defconstant $verYugoslavia 25)                 ;  (use verYugoCroatian instead, less ambiguous) (defconstant $verIndia 33)                      ;  (use verIndiaHindi instead, less ambiguous) ;  Calendar Codes (defconstant $calGregorian 0)(defconstant $calArabicCivil 1)(defconstant $calArabicLunar 2)(defconstant $calJapanese 3)(defconstant $calJewish 4)(defconstant $calCoptic 5)(defconstant $calPersian 6);  Integer Format Codes (defconstant $intWestern 0)(defconstant $intArabic 1)(defconstant $intRoman 2)(defconstant $intJapanese 3)(defconstant $intEuropean 4)(defconstant $intOutputMask #x8000);  CharByte byte types (defconstant $smSingleByte 0)(defconstant $smFirstByte -1)(defconstant $smLastByte 1)(defconstant $smMiddleByte 2);  CharType field masks (defconstant $smcTypeMask #xF)(defconstant $smcReserved #xF0)(defconstant $smcClassMask #xF00)(defconstant $smcOrientationMask #x1000)        ; two-byte script glyph orientation(defconstant $smcRightMask #x2000)(defconstant $smcUpperMask #x4000)(defconstant $smcDoubleMask #x8000);  Basic CharType character types (defconstant $smCharPunct #x0)(defconstant $smCharAscii #x1)(defconstant $smCharEuro #x7)(defconstant $smCharExtAscii #x7)               ;  More correct synonym for smCharEuro ;  Additional CharType character types for script systems (defconstant $smCharKatakana #x2)               ; Japanese Katakana(defconstant $smCharHiragana #x3)               ; Japanese Hiragana(defconstant $smCharIdeographic #x4)            ; Hanzi, Kanji, Hanja(defconstant $smCharTwoByteGreek #x5)           ; 2-byte Greek in Far East systems(defconstant $smCharTwoByteRussian #x6)         ; 2-byte Cyrillic in Far East systems(defconstant $smCharBidirect #x8)               ; Arabic/Hebrew(defconstant $smCharContextualLR #x9)           ; Contextual left-right: Thai, Indic scripts(defconstant $smCharNonContextualLR #xA)        ; Non-contextual left-right: Cyrillic, Greek(defconstant $smCharHangul #xC)                 ; Korean Hangul(defconstant $smCharJamo #xD)                   ; Korean Jamo(defconstant $smCharBopomofo #xE)               ; Chinese Bopomofo;  old names for some of above, for backward compatibility (defconstant $smCharFISKana #x2)                ; Katakana(defconstant $smCharFISGana #x3)                ; Hiragana(defconstant $smCharFISIdeo #x4)                ; Hanzi, Kanji, Hanja(defconstant $smCharFISGreek #x5)               ; 2-byte Greek in Far East systems(defconstant $smCharFISRussian #x6)             ; 2-byte Cyrillic in Far East systems;  CharType classes for punctuation (smCharPunct) (defconstant $smPunctNormal #x0)(defconstant $smPunctNumber #x100)(defconstant $smPunctSymbol #x200)(defconstant $smPunctBlank #x300);  Additional CharType classes for punctuation in two-byte systems (defconstant $smPunctRepeat #x400)              ;  repeat marker (defconstant $smPunctGraphic #x500)             ;  line graphics ;  CharType Katakana and Hiragana classes for two-byte systems (defconstant $smKanaSmall #x100)                ; small kana character(defconstant $smKanaHardOK #x200)               ; can have dakuten(defconstant $smKanaSoftOK #x300)               ; can have dakuten or han-dakuten;  CharType Ideographic classes for two-byte systems (defconstant $smIdeographicLevel1 #x0)          ; level 1 char(defconstant $smIdeographicLevel2 #x100)        ; level 2 char(defconstant $smIdeographicUser #x200)          ; user char;  old names for above, for backward compatibility (defconstant $smFISClassLvl1 #x0)               ; level 1 char(defconstant $smFISClassLvl2 #x100)             ; level 2 char(defconstant $smFISClassUser #x200)             ; user char;  CharType Jamo classes for Korean systems (defconstant $smJamoJaeum #x0)                  ; simple consonant char(defconstant $smJamoBogJaeum #x100)             ; complex consonant char(defconstant $smJamoMoeum #x200)                ; simple vowel char(defconstant $smJamoBogMoeum #x300)             ; complex vowel char;  CharType glyph orientation for two-byte systems (defconstant $smCharHorizontal #x0)             ;  horizontal character form, or for both (defconstant $smCharVertical #x1000)            ;  vertical character form ;  CharType directions (defconstant $smCharLeft #x0)(defconstant $smCharRight #x2000);  CharType case modifers (defconstant $smCharLower #x0)(defconstant $smCharUpper #x4000);  CharType character size modifiers (1 or multiple bytes). (defconstant $smChar1byte #x0)(defconstant $smChar2byte #x8000);  TransliterateText target types for Roman (defconstant $smTransAscii 0)                   ; convert to ASCII(defconstant $smTransNative 1)                  ; convert to font script(defconstant $smTransCase #xFE)                 ; convert case for all text(defconstant $smTransSystem #xFF)               ; convert to system script;  TransliterateText target types for two-byte scripts (defconstant $smTransAscii1 2)                  ; 1-byte Roman(defconstant $smTransAscii2 3)                  ; 2-byte Roman(defconstant $smTransKana1 4)                   ; 1-byte Japanese Katakana(defconstant $smTransKana2 5)                   ; 2-byte Japanese Katakana(defconstant $smTransGana2 7)                   ; 2-byte Japanese Hiragana (no 1-byte Hiragana)(defconstant $smTransHangul2 8)                 ; 2-byte Korean Hangul(defconstant $smTransJamo2 9)                   ; 2-byte Korean Jamo(defconstant $smTransBopomofo2 10)              ; 2-byte Chinese Bopomofo;  TransliterateText target modifiers (defconstant $smTransLower #x4000)              ; target becomes lowercase(defconstant $smTransUpper #x8000)              ; target becomes uppercase;  TransliterateText resource format numbers (defconstant $smTransRuleBaseFormat 1)          ; Rule based trsl resource format (defconstant $smTransHangulFormat 2)            ; Table based Hangul trsl resource format;  TransliterateText property flags (defconstant $smTransPreDoubleByting 1)         ; Convert all text to double byte before transliteration(defconstant $smTransPreLowerCasing 2)          ; Convert all text to lower case before transliteration;  TransliterateText source mask - general (defconstant $smMaskAll #xFFFFFFFF)             ; Convert all text;  TransliterateText source masks (defconstant $smMaskAscii #x1)                  ; 2^smTransAscii(defconstant $smMaskNative #x2)                 ; 2^smTransNative;  TransliterateText source masks for two-byte scripts (defconstant $smMaskAscii1 #x4)                 ; 2^smTransAscii1(defconstant $smMaskAscii2 #x8)                 ; 2^smTransAscii2(defconstant $smMaskKana1 #x10)                 ; 2^smTransKana1(defconstant $smMaskKana2 #x20)                 ; 2^smTransKana2(defconstant $smMaskGana2 #x80)                 ; 2^smTransGana2(defconstant $smMaskHangul2 #x100)              ; 2^smTransHangul2(defconstant $smMaskJamo2 #x200)                ; 2^smTransJamo2(defconstant $smMaskBopomofo2 #x400)            ; 2^smTransBopomofo2;  Result values from GetScriptManagerVariable and SetScriptManagerVariable calls. (defconstant $smNotInstalled 0)                 ; routine not available in script(defconstant $smBadVerb -1)                     ; Bad verb passed to a routine(defconstant $smBadScript -2)                   ; Bad script code passed to a routine;  Values for script redraw flag. (defconstant $smRedrawChar 0)                   ; Redraw character only(defconstant $smRedrawWord 1)                   ; Redraw entire word (2-byte systems)(defconstant $smRedrawLine -1)                  ; Redraw entire line (bidirectional systems);  GetScriptManagerVariable and SetScriptManagerVariable verbs (defconstant $smVersion 0)                      ; Script Manager version number(defconstant $smMunged 2)                       ; Globals change count(defconstant $smEnabled 4)                      ; Count of enabled scripts, incl Roman(defconstant $smBidirect 6)                     ; At least one bidirectional script(defconstant $smFontForce 8)                    ; Force font flag(defconstant $smIntlForce 10)                   ; Force intl flag(defconstant $smForced 12)                      ; Script was forced to system script(defconstant $smDefault 14)                     ; Script was defaulted to Roman script(defconstant $smPrint 16)                       ; Printer action routine(defconstant $smSysScript 18)                   ; System script(defconstant $smLastScript 20)                  ; Last keyboard script(defconstant $smKeyScript 22)                   ; Keyboard script(defconstant $smSysRef 24)                      ; System folder refNum(defconstant $smKeyCache 26)                    ; obsolete(defconstant $smKeySwap 28)                     ; Swapping table handle(defconstant $smGenFlags 30)                    ; General flags long(defconstant $smOverride 32)                    ; Script override flags(defconstant $smCharPortion 34)                 ; Ch vs SpExtra proportion;  New for System 7.0: (defconstant $smDoubleByte 36)                  ; Flag for double-byte script installed(defconstant $smKCHRCache 38)                   ; Returns pointer to KCHR cache(defconstant $smRegionCode 40)                  ; Returns current region code (verXxx)(defconstant $smKeyDisableState 42)             ; Returns current keyboard disable state;  GetScriptVariable and SetScriptVariable verbs.; Note: Verbs private to script systems are negative, while; those general across script systems are non-negative. (defconstant $smScriptVersion 0)                ; Script software version(defconstant $smScriptMunged 2)                 ; Script entry changed count(defconstant $smScriptEnabled 4)                ; Script enabled flag(defconstant $smScriptRight 6)                  ; Right to left flag(defconstant $smScriptJust 8)                   ; Justification flag(defconstant $smScriptRedraw 10)                ; Word redraw flag(defconstant $smScriptSysFond 12)               ; Preferred system font(defconstant $smScriptAppFond 14)               ; Preferred Application font(defconstant $smScriptBundle 16)                ; Beginning of itlb verbs(defconstant $smScriptNumber 16)                ; Script itl0 id(defconstant $smScriptDate 18)                  ; Script itl1 id(defconstant $smScriptSort 20)                  ; Script itl2 id(defconstant $smScriptFlags 22)                 ; flags word(defconstant $smScriptToken 24)                 ; Script itl4 id(defconstant $smScriptEncoding 26)              ; id of optional itl5, if present(defconstant $smScriptLang 28)                  ; Current language for script(defconstant $smScriptNumDate 30)               ; Script Number/Date formats.(defconstant $smScriptKeys 32)                  ; Script KCHR id(defconstant $smScriptIcon 34)                  ; ID # of SICN or kcs#/kcs4/kcs8 suite(defconstant $smScriptPrint 36)                 ; Script printer action routine(defconstant $smScriptTrap 38)                  ; Trap entry pointer(defconstant $smScriptCreator 40)               ; Script file creator(defconstant $smScriptFile 42)                  ; Script file name(defconstant $smScriptName 44)                  ; Script name;  There is a hole here for old Kanji private verbs 46-76 ; ;  New for System 7.0: (defconstant $smScriptMonoFondSize 78)          ; default monospace FOND (hi) & size (lo)(defconstant $smScriptPrefFondSize 80)          ; preferred FOND (hi) & size (lo)(defconstant $smScriptSmallFondSize 82)         ; default small FOND (hi) & size (lo)(defconstant $smScriptSysFondSize 84)           ; default system FOND (hi) & size (lo)(defconstant $smScriptAppFondSize 86)           ; default app FOND (hi) & size (lo)(defconstant $smScriptHelpFondSize 88)          ; default Help Mgr FOND (hi) & size (lo)(defconstant $smScriptValidStyles 90)           ; mask of valid styles for script(defconstant $smScriptAliasStyle 92)            ; style (set) to use for aliases;  Special script code values for International Utilities (defconstant $iuSystemScript -1)                ;  <obsolete>  system script (defconstant $iuCurrentScript -2)               ;  <obsolete>  current script (for font of grafPort) ;  Negative verbs for KeyScript (defconstant $smKeyNextScript -1)               ;  Switch to next available script (defconstant $smKeySysScript -2)                ;  Switch to the system script (defconstant $smKeySwapScript -3)               ;  Switch to previously-used script ;  New for System 7.0: (defconstant $smKeyNextKybd -4)                 ;  Switch to next keyboard in current keyscript (defconstant $smKeySwapKybd -5)                 ;  Switch to previously-used keyboard in current keyscript (defconstant $smKeyDisableKybds -6)             ;  Disable keyboards not in system or Roman script (defconstant $smKeyEnableKybds -7)              ;  Re-enable keyboards for all enabled scripts (defconstant $smKeyToggleInline -8)             ;  Toggle inline input for current keyscript (defconstant $smKeyToggleDirection -9)          ;  Toggle default line direction (TESysJust) (defconstant $smKeyNextInputMethod -10)         ;  Switch to next input method in current keyscript (defconstant $smKeySwapInputMethod -11)         ;  Switch to last-used input method in current keyscript (defconstant $smKeyDisableKybdSwitch -12)       ;  Disable switching from the current keyboard (defconstant $smKeySetDirLeftRight -15)         ;  Set default line dir to left-right, align left (defconstant $smKeySetDirRightLeft -16)         ;  Set default line dir to right-left, align right (defconstant $smKeyRoman -17)                   ;  Set keyscript to Roman. Does nothing if Roman-only; 										system, unlike KeyScript(smRoman) which forces; 										an update to current default Roman keyboard ;  Bits in the smScriptFlags word; (bits above 8 are non-static) (defconstant $smsfIntellCP 0)                   ; Script has intelligent cut & paste(defconstant $smsfSingByte 1)                   ; Script has only single bytes(defconstant $smsfNatCase 2)                    ; Native chars have upper & lower case(defconstant $smsfContext 3)                    ; Script is contextual(defconstant $smsfNoForceFont 4)                ; Script will not force characters(defconstant $smsfB0Digits 5)                   ; Script has alternate digits at B0-B9(defconstant $smsfAutoInit 6)                   ; Auto initialize the script(defconstant $smsfUnivExt 7)                    ; Script is handled by universal extension(defconstant $smsfSynchUnstyledTE 8)            ; Script synchronizes for unstyled TE(defconstant $smsfForms 13)                     ; Uses contextual forms for letters(defconstant $smsfLigatures 14)                 ; Uses contextual ligatures(defconstant $smsfReverse 15)                   ; Reverses native text, right-left;  Bits in the smGenFlags long.; First (high-order) byte is set from itlc flags byte. (defconstant $smfShowIcon 31)                   ; Show icon even if only one script(defconstant $smfDualCaret 30)                  ; Use dual caret for mixed direction text(defconstant $smfNameTagEnab 29)                ; Reserved for internal use(defconstant $smfUseAssocFontInfo 28)           ; Use the associated font info for FontMetrics calls <48>;  Roman script constants ;  The following are here for backward compatibility, but should not be used. ;  This information should be obtained using GetScript. (defconstant $romanSysFond #x3FFF)              ; system font id number(defconstant $romanAppFond 3)                   ; application font id number(defconstant $romanFlags #x7)                   ; roman settings;  Script Manager font equates. (defconstant $smFondStart #x4000)               ; start from 16K(defconstant $smFondEnd #xC000)                 ; past end of range at 48K;  Miscellaneous font equates. (defconstant $smUprHalfCharSet #x80)            ; first char code in top half of std char set;  Character Set Extensions (defconstant $diaeresisUprY #xD9)(defconstant $fraction #xDA)(defconstant $intlCurrency #xDB)(defconstant $leftSingGuillemet #xDC)(defconstant $rightSingGuillemet #xDD)(defconstant $fiLigature #xDE)(defconstant $flLigature #xDF)(defconstant $dblDagger #xE0)(defconstant $centeredDot #xE1)(defconstant $baseSingQuote #xE2)(defconstant $baseDblQuote #xE3)(defconstant $perThousand #xE4)(defconstant $circumflexUprA #xE5)(defconstant $circumflexUprE #xE6)(defconstant $acuteUprA #xE7)(defconstant $diaeresisUprE #xE8)(defconstant $graveUprE #xE9)(defconstant $acuteUprI #xEA)(defconstant $circumflexUprI #xEB)(defconstant $diaeresisUprI #xEC)(defconstant $graveUprI #xED)(defconstant $acuteUprO #xEE)(defconstant $circumflexUprO #xEF)(defconstant $appleLogo #xF0)(defconstant $graveUprO #xF1)(defconstant $acuteUprU #xF2)(defconstant $circumflexUprU #xF3)(defconstant $graveUprU #xF4)(defconstant $dotlessLwrI #xF5)(defconstant $circumflex #xF6)(defconstant $tilde #xF7)(defconstant $macron #xF8)(defconstant $breveMark #xF9)(defconstant $overDot #xFA)(defconstant $ringMark #xFB)(defconstant $cedilla #xFC)(defconstant $doubleAcute #xFD)(defconstant $ogonek #xFE)(defconstant $hachek #xFF);  TokenType values (defconstant $tokenIntl 4)                      ; the itl resource number of the tokenizer(defconstant $tokenEmpty -1)                    ; used internally as an empty flag(defconstant $tokenUnknown 0)                   ; chars that do not match a defined token type(defconstant $tokenWhite 1)                     ; white space(defconstant $tokenLeftLit 2)                   ; literal begin(defconstant $tokenRightLit 3)                  ; literal end(defconstant $tokenAlpha 4)                     ; alphabetic(defconstant $tokenNumeric 5)                   ; numeric(defconstant $tokenNewLine 6)                   ; new line(defconstant $tokenLeftComment 7)               ; open comment(defconstant $tokenRightComment 8)              ; close comment(defconstant $tokenLiteral 9)                   ; literal(defconstant $tokenEscape 10)                   ; character escape (e.g. '\' in "\n", "\t")(defconstant $tokenAltNum 11)                   ; alternate number (e.g. $B0-B9 in Arabic,Hebrew)(defconstant $tokenRealNum 12)                  ; real number(defconstant $tokenAltReal 13)                  ; alternate real number(defconstant $tokenReserve1 14)                 ; reserved(defconstant $tokenReserve2 15)                 ; reserved(defconstant $tokenLeftParen 16)                ; open parenthesis(defconstant $tokenRightParen 17)               ; close parenthesis(defconstant $tokenLeftBracket 18)              ; open square bracket(defconstant $tokenRightBracket 19)             ; close square bracket(defconstant $tokenLeftCurly 20)                ; open curly bracket(defconstant $tokenRightCurly 21)               ; close curly bracket(defconstant $tokenLeftEnclose 22)              ; open guillemet(defconstant $tokenRightEnclose 23)             ; close guillemet(defconstant $tokenPlus 24)(defconstant $tokenMinus 25)(defconstant $tokenAsterisk 26)                 ; times/multiply(defconstant $tokenDivide 27)(defconstant $tokenPlusMinus 28)                ; plus or minus symbol(defconstant $tokenSlash 29)(defconstant $tokenBackSlash 30)(defconstant $tokenLess 31)                     ; less than symbol(defconstant $tokenGreat 32)                    ; greater than symbol(defconstant $tokenEqual 33)(defconstant $tokenLessEqual2 34)               ; less than or equal, 2 characters (e.g. <=)(defconstant $tokenLessEqual1 35)               ; less than or equal, 1 character(defconstant $tokenGreatEqual2 36)              ; greater than or equal, 2 characters (e.g. >=)(defconstant $tokenGreatEqual1 37)              ; greater than or equal, 1 character(defconstant $token2Equal 38)                   ; double equal (e.g. ==)(defconstant $tokenColonEqual 39)               ; colon equal(defconstant $tokenNotEqual 40)                 ; not equal, 1 character(defconstant $tokenLessGreat 41)                ; less/greater, Pascal not equal (e.g. <>)(defconstant $tokenExclamEqual 42)              ; exclamation equal, C not equal (e.g. !=)(defconstant $tokenExclam 43)                   ; exclamation point(defconstant $tokenTilde 44)                    ; centered tilde(defconstant $tokenComma 45)(defconstant $tokenPeriod 46)(defconstant $tokenLeft2Quote 47)               ; open double quote(defconstant $tokenRight2Quote 48)              ; close double quote(defconstant $tokenLeft1Quote 49)               ; open single quote(defconstant $tokenRight1Quote 50)              ; close single quote(defconstant $token2Quote 51)                   ; double quote(defconstant $token1Quote 52)                   ; single quote(defconstant $tokenSemicolon 53)(defconstant $tokenPercent 54)(defconstant $tokenCaret 55)(defconstant $tokenUnderline 56)(defconstant $tokenAmpersand 57)(defconstant $tokenAtSign 58)(defconstant $tokenBar 59)                      ; vertical bar(defconstant $tokenQuestion 60)(defconstant $tokenPi 61)                       ; lower-case pi(defconstant $tokenRoot 62)                     ; square root symbol(defconstant $tokenSigma 63)                    ; capital sigma(defconstant $tokenIntegral 64)                 ; integral sign(defconstant $tokenMicro 65)(defconstant $tokenCapPi 66)                    ; capital pi(defconstant $tokenInfinity 67)(defconstant $tokenColon 68)(defconstant $tokenHash 69)                     ; e.g. #(defconstant $tokenDollar 70)(defconstant $tokenNoBreakSpace 71)             ; non-breaking space(defconstant $tokenFraction 72)(defconstant $tokenIntlCurrency 73)(defconstant $tokenLeftSingGuillemet 74)(defconstant $tokenRightSingGuillemet 75)(defconstant $tokenPerThousand 76)(defconstant $tokenEllipsis 77)(defconstant $tokenCenterDot 78)(defconstant $tokenNil 127)(defconstant $delimPad -2);  obsolete, misspelled token names kept for backward compatibility (defconstant $tokenTilda 44)(defconstant $tokenCarat 55);  Table selectors for GetItlTable (defconstant $smWordSelectTable 0)              ;  get word select break table from 'itl2' (defconstant $smWordWrapTable 1)                ;  get word wrap break table from 'itl2' (defconstant $smNumberPartsTable 2)             ;  get default number parts table from 'itl4' (defconstant $smUnTokenTable 3)                 ;  get unToken table from 'itl4' (defconstant $smWhiteSpaceList 4)               ;  get white space list from 'itl4' (defconstant $iuWordSelectTable 0)              ;  <obsolete>  get word select break table from 'itl2' (defconstant $iuWordWrapTable 1)                ;  <obsolete>  get word wrap break table from 'itl2' (defconstant $iuNumberPartsTable 2)             ;  <obsolete>  get default number parts table from 'itl4' (defconstant $iuUnTokenTable 3)                 ;  <obsolete>  get unToken table from 'itl4' (defconstant $iuWhiteSpaceList 4)               ;  <obsolete>  get white space list from 'itl4' ;  end of stuff moved from Packages.h (defconstant $tokenOK 0)                        ;  TokenResults (defconstant $tokenOverflow 1)                  ;  TokenResults (defconstant $stringOverflow 2)                 ;  TokenResults (defconstant $badDelim 3)                       ;  TokenResults (defconstant $badEnding 4)                      ;  TokenResults (defconstant $crash 5)                          ;  TokenResults (def-mactype :tokenresults (find-mactype ':signed-byte))(defrecord CharByteTable (array (array :character 256 :packed)))(def-mactype :tokentype (find-mactype ':signed-integer))(defrecord DelimType (array (array :signed-integer 2)))(defrecord CommentType (array (array :signed-integer 4)))(defrecord TokenRec    (theToken :signed-integer)   (position :pointer)                          ; pointer into original source   (length :signed-long)                        ; length of text in original source   (stringPosition (:pointer (:string 255)))    ; Pascal/C string copy of identifier   )(def-mactype :tokenrecptr (find-mactype '(:pointer :tokenrec)))(defrecord TokenBlock    (source :pointer)                            ; pointer to stream of characters   (sourceLength :signed-long)                  ; length of source stream   (tokenList :pointer)                         ; pointer to array of tokens   (tokenLength :signed-long)                   ; maximum length of TokenList   (tokenCount :signed-long)                    ; number tokens generated by tokenizer   (stringList :pointer)                        ; pointer to stream of identifiers   (stringLength :signed-long)                  ; length of string list   (stringCount :signed-long)                   ; number of bytes currently used   (doString :boolean)                          ; make strings & put into StringList   (doAppend :boolean)                          ; append to TokenList rather than replace   (doAlphanumeric :boolean)                    ; identifiers may include numeric   (doNest :boolean)                            ; do comments nest?   (leftDelims (:array :signed-integer 2))   (rightDelims (:array :signed-integer 2))   (leftComment (:array :signed-integer 4))   (rightComment (:array :signed-integer 4))   (escapeCode :signed-integer)                 ; escape symbol code   (decimalCode :signed-integer)   (itlResource :handle)                        ; handle to itl4 resource of current script   (reserved (:array :signed-long 8))           ; must be zero!   )(def-mactype :tokenblockptr (find-mactype '(:pointer :tokenblock))); $IFC NOT CFMSYSTEMCALLS;; Generated by translator read-word-from-memory(deftrap "_GetSysDirection" ()   (:no-trap :signed-integer)   (:no-trap (%get-signed-word (%int-to-ptr 2988))));  MOVE.w $0BAC,(SP) ; $ENDC; $IFC NOT CFMSYSTEMCALLS;; Inline instructions called as foreign function(deftrap-inline "_SetSysDirection" ((value :signed-integer))   nil   (#x31DF #xBAC) )                             ;  MOVE.w (SP)+,$0BAC ; $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_FontScript" ()   (:stack :signed-integer)   (:stack-trap #xA8B5 ((+ (ash 33280 16) 0) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_IntlScript" ()   (:stack :signed-integer)   (:stack-trap #xA8B5 ((+ (ash 33280 16) 2) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_KeyScript" ((code :signed-integer))   nil   (:stack-trap #xA8B5 code ((+ (ash 32770 16) 4) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_CharByte" ((textBuf :pointer) (textOffset :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textOffset ((+ (ash 33286 16) 16) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_CharType" ((textBuf :pointer) (textOffset :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textOffset ((+ (ash 33286 16) 18) :signed-longint))); $ENDC; CONST                                         ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_IsCmdChar" ((event (:pointer :eventrecord)) (test :signed-integer))   (:stack :boolean)   (:stack-trap #xA8B5 event test ((+ (ash 33286 16) 65488) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_Transliterate" ((srcHandle :handle) (dstHandle :handle) (target :signed-integer) (srcMask :signed-long))   (:stack :signed-integer)   (:stack-trap #xA8B5 srcHandle dstHandle target srcMask ((+ (ash 33294 16) 24) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_ParseTable" ((table (:pointer :charbytetable)))   (:stack :boolean)   (:stack-trap #xA8B5 table ((+ (ash 33284 16) 34) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_IntlTokenize" ((tokenParam (:pointer :tokenblock)))   (:stack :signed-byte)   (:stack-trap #xA8B5 tokenParam ((+ (ash 33284 16) 65530) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_FontToScript" ((fontNumber :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA8B5 fontNumber ((+ (ash 33282 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_GetScriptManagerVariable" ((selector :signed-integer))   (:stack :signed-long)   (:stack-trap #xA8B5 selector ((+ (ash 33794 16) 8) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SetScriptManagerVariable" ((selector :signed-integer) (param :signed-long))   (:stack :signed-integer)   (:stack-trap #xA8B5 selector param ((+ (ash 33286 16) 10) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_GetScriptVariable" ((script :signed-integer) (selector :signed-integer))   (:stack :signed-long)   (:stack-trap #xA8B5 script selector ((+ (ash 33796 16) 12) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SetScriptVariable" ((script :signed-integer) (selector :signed-integer) (param :signed-long))   (:stack :signed-integer)   (:stack-trap #xA8B5 script selector param ((+ (ash 33288 16) 14) :signed-longint))); $ENDC;   New for 7.1  ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_GetScriptUtilityAddress" ((selector :signed-integer) (Before :boolean) (script :signed-integer))   (:stack :pointer)   (:stack-trap #xA8B5 selector Before script ((+ (ash 50180 16) 56) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SetScriptUtilityAddress" ((selector :signed-integer) (Before :boolean) (routineAddr :pointer) (script :signed-integer))   nil   (:stack-trap #xA8B5 selector Before routineAddr script ((+ (ash 49160 16) 58) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_GetScriptQDPatchAddress" ((trapNum :signed-integer) (Before :boolean) (forPrinting :boolean) (script :signed-integer))   (:stack :pointer)   (:stack-trap #xA8B5 trapNum Before forPrinting script ((+ (ash 50182 16) 60) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_SetScriptQDPatchAddress" ((trapNum :signed-integer) (Before :boolean) (forPrinting :boolean) (routineAddr :pointer) (script :signed-integer))   nil   (:stack-trap #xA8B5 trapNum Before forPrinting routineAddr script ((+ (ash 49162 16) 62) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_CharacterByteType" ((textBuf :pointer) (textOffset :signed-integer) (script :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textOffset script ((+ (ash 49670 16) 16) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_CharacterType" ((textBuf :pointer) (textOffset :signed-integer) (script :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA8B5 textBuf textOffset script ((+ (ash 49670 16) 18) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_TransliterateText" ((srcHandle :handle) (dstHandle :handle) (target :signed-integer) (srcMask :signed-long) (script :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA8B5 srcHandle dstHandle target srcMask script ((+ (ash 49678 16) 24) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap "_FillParseTable" ((table (:pointer :charbytetable)) (script :signed-integer))   (:stack :boolean)   (:stack-trap #xA8B5 table script ((+ (ash 49668 16) 34) :signed-longint))); $ENDC;  Moved from Packages.h ; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetIntlResource" ((theID :signed-integer))   (:stack :handle)   (:stack-trap #xA9ED theID (6 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_SetIntlResource" ((refNum :signed-integer) (theID :signed-integer) (intlHandle :handle))   nil   (:stack-trap #xA9ED refNum theID intlHandle (8 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_ClearIntlResourceCache" ()   nil   (:stack-trap #xA9ED (24 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap "_GetIntlResourceTable" ((script :signed-integer) (tableCode :signed-integer) (itlHandle (:pointer :handle)) (offset (:pointer :signed-long)) (length (:pointer :signed-long)))   nil   (:stack-trap #xA9ED script tableCode itlHandle offset length (36 :signed-integer))); $ENDC; $IFC OLDROUTINENAMES ; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline ("_SetSysJust" "SetSysDirection")  ((newDirection :signed-integer))   nil   (#x31DF #xBAC) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator read-word-from-memory(deftrap ("_GetSysJust" "GetSysDirection")         ()   (:no-trap :signed-integer)   (:no-trap (%get-signed-word (%int-to-ptr 2988)))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_Font2Script" "FontToScript")          ((fontNumber :signed-integer))   (:stack :signed-integer)   (:stack-trap #xA8B5 fontNumber ((+ (ash 33282 16) 6) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GetEnvirons" "GetScriptManagerVariable")         ((selector :signed-integer))   (:stack :signed-long)   (:stack-trap #xA8B5 selector ((+ (ash 33794 16) 8) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_SetEnvirons" "SetScriptManagerVariable")         ((selector :signed-integer) (param :signed-long))   (:stack :signed-integer)   (:stack-trap #xA8B5 selector param ((+ (ash 33286 16) 10) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_GetScript" "GetScriptVariable")         ((script :signed-integer) (verb :signed-integer))   (:stack :signed-long)   (:stack-trap #xA8B5 script verb ((+ (ash 33796 16) 12) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-longword-on-stack(deftrap ("_SetScript" "SetScriptVariable")         ((script :signed-integer) (verb :signed-integer) (param :signed-long))   (:stack :signed-integer)   (:stack-trap #xA8B5 script verb param ((+ (ash 33288 16) 14) :signed-longint))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IUGetIntl" "GetIntlResource")         ((theID :signed-integer))   (:stack :handle)   (:stack-trap #xA9ED theID (6 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IUSetIntl" "SetIntlResource")         ((refNum :signed-integer) (theID :signed-integer) (intlHandle :handle))   nil   (:stack-trap #xA9ED refNum theID intlHandle (8 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IUClearCache" "ClearIntlResourceCache")          ()   nil   (:stack-trap #xA9ED (24 :signed-integer))); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator push-a-constant-word-on-stack(deftrap ("_IUGetItlTable" "GetIntlResourceTable")         ((script :signed-integer) (tableCode :signed-integer) (itlHandle (:pointer :handle)) (offset (:pointer :signed-long)) (length (:pointer :signed-long)))   nil   (:stack-trap #xA9ED script tableCode itlHandle offset length (36 :signed-integer))); $ENDC; $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := ScriptIncludes; $ENDC                                         ; __SCRIPT__#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC(provide-interface 'Script);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SCRIPT.patch(DEFTRAP ("_STRING2DATE" "StringToDate")         ((TEXTPTR :POINTER) (TEXTLEN :SIGNED-LONG)          (THECACHE (:POINTER :DATECACHERECORD))          (LENGTHUSED (:POINTER :SIGNED-LONG))          (DATETIME (:POINTER :LONGDATEREC)))         (:STACK :SIGNED-INTEGER)         (:STACK-TRAP 43189 TEXTPTR TEXTLEN THECACHE LENGTHUSED DATETIME          ((+ (ASH 33300 16) 65526) :SIGNED-LONGINT)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SCRIPT.patch (DEFTRAP ("_FORMATX2STR" "ExtendedToString")         ((X :POINTER) (MYCANONICAL :NUMFORMATSTRING) (PARTSTABLE :NUMBERPARTS)          (OUTSTRING (:POINTER (:STRING 255))))         (:STACK :SIGNED-INTEGER)         (:STACK-TRAP 43189 X MYCANONICAL PARTSTABLE OUTSTRING          ((+ (ASH 33296 16) 65512) :SIGNED-LONGINT)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SCRIPT.patch (DEFTRAP ("_STRING2TIME" "StringToTime")         ((TEXTPTR :POINTER) (TEXTLEN :SIGNED-LONG)          (THECACHE (:POINTER :DATECACHERECORD))          (LENGTHUSED (:POINTER :SIGNED-LONG))          (DATETIME (:POINTER :LONGDATEREC)))         (:STACK :SIGNED-INTEGER)         (:STACK-TRAP 43189 TEXTPTR TEXTLEN THECACHE LENGTHUSED DATETIME          ((+ (ASH 33300 16) 65524) :SIGNED-LONGINT)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SCRIPT.patch (DEFTRAP ("_STR2FORMAT" "StringToFormatRec")         ((INSTRING (:STRING 255)) (PARTSTABLE :NUMBERPARTS)          (OUTSTRING (:POINTER :NUMFORMATSTRING)))         (:STACK :SIGNED-INTEGER)         (:STACK-TRAP 43189 INSTRING PARTSTABLE OUTSTRING          ((+ (ASH 33292 16) 65516) :SIGNED-LONGINT)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SCRIPT.patch (DEFTRAP ("_FORMAT2STR" "FormatRecToString")         ((MYCANONICAL :NUMFORMATSTRING) (PARTSTABLE :NUMBERPARTS)          (OUTSTRING (:POINTER (:STRING 255)))          (POSITIONS (:POINTER :TRIPLEINT)))         (:STACK :SIGNED-INTEGER)         (:STACK-TRAP 43189 MYCANONICAL PARTSTABLE OUTSTRING POSITIONS          ((+ (ASH 33296 16) 65514) :SIGNED-LONGINT)));; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:SCRIPT.patch (DEFTRAP ("_FORMATSTR2X" "StringToExtended")         ((SOURCE (:STRING 255)) (MYCANONICAL :NUMFORMATSTRING)          (PARTSTABLE :NUMBERPARTS) (X :POINTER))         (:STACK :SIGNED-INTEGER)         (:STACK-TRAP 43189 SOURCE MYCANONICAL PARTSTABLE X          ((+ (ASH 33296 16) 65510) :SIGNED-LONGINT)))