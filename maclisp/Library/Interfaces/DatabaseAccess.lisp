(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:DatabaseAccess.p"; at Tuesday June 6,1995 2:07:20 pm.; ;  	File:		DatabaseAccess.p;  ;  	Contains:	Database Access Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in ÒMPW LatestÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __DATABASEACCESS__; $SETC __DATABASEACCESS__ := 1; $I+; $SETC DatabaseAccessIncludes := UsingIncludes; $SETC UsingIncludes := 1; $IFC UNDEFINED __RESOURCES__(require-interface 'Resources)                  ; $I Resources.p; $ENDC; 	Types.p														; 		ConditionalMacros.p										; 	MixedMode.p													; 	Files.p														; 		OSUtils.p												; 			Memory.p											; $PUSH; $ALIGN MAC68K; $LibExport+(defconstant $typeNone :|none|)(defconstant $typeDate :|date|)(defconstant $typeTime :|time|)(defconstant $typeTimeStamp :|tims|)(defconstant $typeDecimal :|deci|)(defconstant $typeMoney :|mone|)(defconstant $typeVChar :|vcha|)(defconstant $typeVBin :|vbin|)(defconstant $typeLChar :|lcha|)(defconstant $typeLBin :|lbin|)(defconstant $typeDiscard :|disc|);  "dummy" types for DBResultsToText (defconstant $typeUnknown :|unkn|)(defconstant $typeColBreak :|colb|)(defconstant $typeRowBreak :|rowb|);  pass this in to DBGetItem for any data type (defconstant $typeAnyType 0);  infinite timeout value for DBGetItem ;  messages for status functions for DBStartQuery (defconstant $kDBUpdateWind 0)(defconstant $kDBAboutToInit 1)(defconstant $kDBInitComplete 2)(defconstant $kDBSendComplete 3)(defconstant $kDBExecComplete 4)(defconstant $kDBStartQueryComplete 5);  messages for status functions for DBGetQueryResults (defconstant $kDBGetItemComplete 6)(defconstant $kDBGetQueryResultsComplete 7)(defconstant $kDBWaitForever -1);   flags for DBGetItem  (defconstant $kDBLastColFlag #x1)(defconstant $kDBNullFlag #x4)(def-mactype :dbtype (find-mactype ':ostype))(def-mactype :dbasyncparmblkptr (find-mactype '(:pointer :dbasyncparamblockrec))); ; 		DBCompletionProcPtr uses register based parameters on the 68k and cannot; 		be written in or called from a high-level language without the help of; 		mixed mode or assembly glue.; ; 		In:; 		 => pb          	A1.L; 	(def-mactype :dbcompletionprocptr (find-mactype ':pointer));  register PROCEDURE DBCompletion(pb: DBAsyncParmBlkPtr); (def-mactype :dbcompletionupp (find-mactype ':pointer))(defrecord DBAsyncParamBlockRec    (completionProc :pointer)                    ;  pointer to completion routine    (result :signed-integer)                     ;  result of call    (userRef :signed-long)                       ;  for application's use    (ddevRef :signed-long)                       ;  for ddev's use    (reserved :signed-long)                      ;  for internal use    )(defconstant $uppDBCompletionProcInfo #xB802)   ;  Register PROCEDURE (4 bytes in A1); ; $IFC NOT GENERATINGCFM                        ; To be implemented:  Glue to move parameters into registers.; $ENDC;; Warning: No calling method defined for this trap(deftrap-inline "_CallDBCompletionProc" ((pb (:pointer :dbasyncparamblockrec)) (userRoutine :pointer))   nil   () )                                         ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDBCompletionProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC(defrecord ResListElem    (theType :ostype)                            ;  resource type    (id :signed-integer)                         ;  resource id    )(def-mactype :reslistptr (find-mactype '(:pointer :reslistelem)))(def-mactype :reslisthandle (find-mactype '(:handle :reslistelem)));  structure for query list in QueryRecord (defrecord (QueryArray :handle) (array (array :handle 256)))(def-mactype :querylistptr (find-mactype '(:pointer :queryarray)))(def-mactype :querylisthandle (find-mactype '(:handle :queryarray)))(defrecord (QueryRecord :handle)    (version :signed-integer)                    ;  version    (id :signed-integer)                         ;  id of 'qrsc' this came from    (queryProc :handle)                          ;  handle to query def proc    (ddevName (:string 63))                      ;  ddev name    (host (:string 255))                         ;  host name    (user (:string 255))                         ;  user name    (password (:string 255))                     ;  password    (connStr (:string 255))                      ;  connection string    (currQuery :signed-integer)                  ;  index of current query    (numQueries :signed-integer)                 ;  number of queries in list    (queryList (:handle :queryarray))            ;  handle to array of handles to text    (numRes :signed-integer)                     ;  number of resources in list    (resList (:handle :reslistelem))             ;  handle to array of resource list elements    (dataHandle :handle)                         ;  for use by query def proc    (refCon :signed-long)                        ;  for use by application    )(def-mactype :queryptr (find-mactype '(:pointer :queryrecord)))(def-mactype :queryhandle (find-mactype '(:handle :queryrecord)));  structure of column types array in ResultsRecord (defrecord (ColTypesArray :handle) (array (array :ostype 256)))(def-mactype :coltypesptr (find-mactype '(:pointer :coltypesarray)))(def-mactype :coltypeshandle (find-mactype '(:handle :coltypesarray)))(defrecord DBColInfoRecord    (len :signed-integer)   (places :signed-integer)   (flags :signed-integer)   )(defrecord (ColInfoArray :handle) (array (array :dbcolinforecord 256)))(def-mactype :colinfoptr (find-mactype '(:pointer :colinfoarray)))(def-mactype :colinfohandle (find-mactype '(:handle :colinfoarray)))(defrecord ResultsRecord    (numRows :signed-integer)                    ;  number of rows in result    (numCols :signed-integer)                    ;  number of columns per row    (colTypes (:handle :coltypesarray))          ;  data type array    (colData :handle)                            ;  actual results    (colInfo (:handle :colinfoarray))            ;  DBColInfoRecord array    )(def-mactype :dbquerydefprocptr (find-mactype ':pointer));  FUNCTION DBQueryDef(VAR sessID: LONGINT; query: QueryHandle): OSErr; (def-mactype :dbstatusprocptr (find-mactype ':pointer));  FUNCTION DBStatus(message: INTEGER; result: OSErr; dataLen: INTEGER; dataPlaces: INTEGER; dataFlags: INTEGER; dataType: DBType; dataPtr: Ptr): BOOLEAN; (def-mactype :dbresulthandlerprocptr (find-mactype ':pointer));  FUNCTION DBResultHandler(dataType: DBType; theLen: INTEGER; thePlaces: INTEGER; theFlags: INTEGER; theData: Ptr; theText: Handle): OSErr; (def-mactype :dbquerydefupp (find-mactype ':pointer))(def-mactype :dbstatusupp (find-mactype ':pointer))(def-mactype :dbresulthandlerupp (find-mactype ':pointer))(defconstant $uppDBQueryDefProcInfo #x3E0)      ;  FUNCTION (4 byte param, 4 byte param): 2 byte result; (defconstant $uppDBStatusProcInfo #xFAA90)      ;  FUNCTION (2 byte param, 2 byte param, 2 byte param, 2 byte param, 2 byte param, 4 byte param, 4 byte param): 1 byte result; (defconstant $uppDBResultHandlerProcInfo #x3EAE0);  FUNCTION (4 byte param, 2 byte param, 2 byte param, 2 byte param, 4 byte param, 4 byte param): 2 byte result; ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDBQueryDefProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDBStatusProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDBResultHandlerProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDBQueryDefProc" ((sessID (:pointer :signed-long)) (query (:handle :queryrecord)) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDBStatusProc" ((message :signed-integer) (result :signed-integer) (dataLen :signed-integer) (dataPlaces :signed-integer) (dataFlags :signed-integer) (dataType :ostype) (dataPtr :pointer) (userRoutine :pointer))   :boolean   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDBResultHandlerProc" ((dataType :ostype) (theLen :signed-integer) (thePlaces :signed-integer) (theFlags :signed-integer) (theData :pointer) (theText :handle) (userRoutine :pointer))   :signed-integer   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_InitDBPack" ()   :signed-integer   (#x3F3C #x4 #x303C #x100 #xA82F) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBInit" ((sessID (:pointer :signed-long)) (ddevName (:string 63)) (host (:string 255)) (user (:string 255)) (passwd (:string 255)) (connStr (:string 255)) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 3586 sessID ddevName host user passwd connStr asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBEnd" ((sessID :signed-long) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1027 sessID asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBGetConnInfo" ((sessID :signed-long) (sessNum :signed-integer) (returnedID (:pointer :signed-long)) (version (:pointer :signed-long)) (ddevName (:pointer (:string 63))) (host (:pointer (:string 255))) (user (:pointer (:string 255))) (network (:pointer (:string 255))) (connStr (:pointer (:string 255))) (start (:pointer :signed-long)) (state (:pointer :signed-integer)) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 5892 sessID sessNum returnedID version ddevName host user network connStr start state asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBGetSessionNum" ((sessID :signed-long) (sessNum (:pointer :signed-integer)) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1541 sessID sessNum asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBSend" ((sessID :signed-long) (text :pointer) (len :signed-integer) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1798 sessID text len asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBSendItem" ((sessID :signed-long) (dataType :ostype) (len :signed-integer) (places :signed-integer) (flags :signed-integer) (buffer :pointer) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 2823 sessID dataType len places flags buffer asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBExec" ((sessID :signed-long) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1032 sessID asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBState" ((sessID :signed-long) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1033 sessID asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBGetErr" ((sessID :signed-long) (err1 (:pointer :signed-long)) (err2 (:pointer :signed-long)) (item1 (:pointer (:string 255))) (item2 (:pointer (:string 255))) (errorMsg (:pointer (:string 255))) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 3594 sessID err1 err2 item1 item2 errorMsg asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBBreak" ((sessID :signed-long) (abort :boolean) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1291 sessID abort asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBGetItem" ((sessID :signed-long) (timeout :signed-long) (dataType (:pointer :ostype)) (len (:pointer :signed-integer)) (places (:pointer :signed-integer)) (flags (:pointer :signed-integer)) (buffer :pointer) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 4108 sessID timeout dataType len places flags buffer asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBUnGetItem" ((sessID :signed-long) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1037 sessID asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBKill" ((asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 526 asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBGetNewQuery" ((queryID :signed-integer) (query (:pointer (:handle :queryrecord))))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 783 queryID query)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBDisposeQuery" ((query (:handle :queryrecord)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 528 query)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBStartQuery" ((sessID (:pointer :signed-long)) (query (:handle :queryrecord)) (statusProc :pointer) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 2065 sessID query statusProc asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBGetQueryResults" ((sessID :signed-long) (results (:pointer :resultsrecord)) (timeout :signed-long) (statusProc :pointer) (asyncPB (:pointer :dbasyncparamblockrec)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 2578 sessID results timeout statusProc asyncPB)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBResultsToText" ((results (:pointer :resultsrecord)) (theText (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1043 results theText)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBInstallResultHandler" ((dataType :ostype) (theHandler :pointer) (isSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1300 dataType theHandler isSysHandler)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBRemoveResultHandler" ((dataType :ostype))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 533 dataType)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DBGetResultHandler" ((dataType :ostype) (theHandler (:pointer :pointer)) (getSysHandler :boolean))   (:stack :signed-integer)   (:stack-trap #xA82F :d0 1302 dataType theHandler getSysHandler)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := DatabaseAccessIncludes; $ENDC                                         ; __DATABASEACCESS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'DatabaseAccess);; This form has been added from patch file HD:CCL3.0d17:Interface Translator:legacies:DatabaseAccess.patch(DEFRECORD (RESLISTARRAY :HANDLE) (ARRAY (ARRAY :RESLISTELEM 256)))