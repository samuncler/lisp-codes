(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:GXMath.p"; at Tuesday June 6,1995 2:10:02 pm.; ;  	File:		GXMath.p;  ;  	Contains:	QuickDraw GX math routine interfaces.;  ;  	Version:	Technology:	Quickdraw GX 1.1;  				Package:	Universal Interfaces 2.1§1 in ÒMPW PrereleaseÓ on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Modification History;;;;;; 04/17/97 bill  patches from Peter Bengston;;;#|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC#|                                              ; $IFC NOT UsingIncludes |#                                             ; $ENDC; $IFC UNDEFINED __GXMATH__; $SETC __GXMATH__ := 1; $I+; $SETC GXMathIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __CONDITIONALMACROS__|#(require-interface 'ConditionalMacros)#|                                              ; $I ConditionalMacros.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __TYPES__|#(require-interface 'Types)#|                                              ; $I Types.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __FIXMATH__|#(require-interface 'FixMath)#|                                              ; $I FixMath.p |#                                             ; $ENDC; $PUSH; $ALIGN MAC68K; $LibExport+; $SETC mathTypesIncludes := 1(defrecord gxPoint    (x :signed-long)   (y :signed-long)   )(def-mactype :gxcolorvalue (find-mactype ':signed-integer))(defrecord gxPolar    (radius :signed-long)   (angle :signed-long)   )(defrecord gxMapping    (map (:array :signed-long 3 3))   )(defconstant $gxColorValue1 #xFFFF)             ;  gxColorValue 1.0 (defconstant $gxPositiveInfinity #x7FFFFFFF)    ;  for Fixed and Fract (defconstant $gxNegativeInfinity #x80000000)    ;  for Fixed and Fract ; $SETC mathRoutinesIncludes := 1; CONST;; Inline instructions called as foreign function(deftrap-inline "_CopyToMapping"  ((target (:pointer :gxmapping))   (source (:pointer :gxmapping)))  (:pointer :gxmapping)  (:c #x303C #x31 #xA832))(deftrap-inline "_InvertMapping"  ((target (:pointer :gxmapping))   (source (:pointer :gxmapping)))  (:pointer :gxmapping)  (:c #x303C #x32 #xA832))(deftrap-inline "_MapMapping"  ((target (:pointer :gxmapping))   (source (:pointer :gxmapping)))  (:pointer :gxmapping)  (:c #x303C #x33 #xA832))(deftrap-inline "_MoveMapping"  ((target (:pointer :gxmapping)) (hoffset :signed-long)   (voffset :signed-long))  (:pointer :gxmapping)  (:c #x303C #x34 #xA832))(deftrap-inline "_MoveMappingTo"  ((target (:pointer :gxmapping)) (hposition :signed-long)   (vposition :signed-long))  (:pointer :gxmapping)  (:c #x303C #x35 #xA832))(deftrap-inline "_NormalizeMapping"  ((target (:pointer :gxmapping)))  (:pointer :gxmapping)  (:c #x303C #x36 #xA832))(deftrap-inline "_RotateMapping"  ((target (:pointer :gxmapping)) (angle :signed-long)   (xcenter :signed-long) (ycenter :signed-long))  (:pointer :gxmapping)  (:c #x303C #x37 #xA832))(deftrap-inline "_ScaleMapping"  ((target (:pointer :gxmapping)) (hfactor :signed-long)   (vfactor :signed-long) (xcenter :signed-long)   (ycenter :signed-long))  (:pointer :gxmapping)  (:c #x303C #x38 #xA832))(deftrap-inline "_ResetMapping"  ((target (:pointer :gxmapping)))  (:pointer :gxmapping)  (:c #x303C #x39 #xA832))(deftrap-inline "_SkewMapping"  ((target (:pointer :gxmapping)) (skewx :signed-long)   (skewy :signed-long) (xcenter :signed-long)   (ycenter :signed-long))  (:pointer :gxmapping)  (:c #x303C #x3A #xA832))(deftrap-inline "_MapPoints"  ((source (:pointer :gxmapping)) (count :signed-long)   (vector (:pointer :gxpoint)))  nil  (:c #x303C #x3B #xA832));; patch arg 3 :gxpoint -> (:pointer :gxpoint)(deftrap-inline "_FirstBit"  ((x :signed-long))  :signed-integer  (:c #x303C #x3C #xA832))(deftrap-inline "_WideScale"  ((source (:pointer :wide)))  :signed-integer  (:c #x303C #x3D #xA832))(deftrap-inline "_LinearRoot"  ((first :signed-long) (last :signed-long)   (t :signed-long))  :signed-integer  (:c #x303C #x3E #xA832))(deftrap-inline "_QuadraticRoot"  ((first :signed-long) (control :signed-long)   (last :signed-long) (t :signed-long))  :signed-integer  (:c #x303C #x3F #xA832))(deftrap-inline "_PolarToPoint"  ((ra (:pointer :gxpolar)) (xy (:pointer :gxpoint)))  (:pointer :gxpoint)  (:c #x303C #x40 #xA832))(deftrap-inline "_PointToPolar"  ((xy (:pointer :gxpoint)) (ra (:pointer :gxpolar)))  (:pointer :gxpolar)  (:c #x303C #x41 #xA832))(deftrap-inline "_FractCubeRoot"  ((source :signed-long))  :signed-long  (:c #x303C #x42 #xA832))(deftrap-inline "_FractDivide"  ((dividend :signed-long) (divisor :signed-long))  :signed-long  (:c #x303C #x43 #xA832))(deftrap-inline "_FractMultiply"  ((multiplicand :signed-long) (multiplier :signed-long))  :signed-long  (:c #x303C #x44 #xA832))(deftrap-inline "_FractSineCosine"  ((degrees :signed-long) (cosine (:pointer :signed-long)))  :signed-long  (:c #x303C #x45 #xA832))(deftrap-inline "_FractSquareRoot"  ((source :signed-long))  :signed-long  (:c #x303C #x46 #xA832))(deftrap-inline "_FixedDivide"  ((dividend :signed-long) (divisor :signed-long))  :signed-long  (:c #x303C #x47 #xA832))(deftrap-inline "_FixedMultiply"  ((multiplicand :signed-long) (multiplier :signed-long))  :signed-long  (:c #x303C #x48 #xA832))(deftrap-inline "_MultiplyDivide"  ((source :signed-long) (multiplier :signed-long)   (divisor :signed-long))  :signed-long  (:c #x303C #x49 #xA832))(deftrap-inline "_Magnitude"  ((deltax :signed-long) (deltay :signed-long))  :signed-long  (:c #x303C #x4A #xA832))(deftrap-inline "_VectorMultiplyDivide"  ((count :signed-long) (vector1 (:pointer :signed-long))   (step1 :signed-long) (vector2 (:pointer :signed-long))   (step2 :signed-long) (divisor :signed-long))  :signed-long  (:c #x303C #x4B #xA832))(deftrap-inline "_WideAdd"  ((target (:pointer :wide)) (source (:pointer :wide)))  :wideptr  (:c #x303C #x4C #xA832))(deftrap-inline "_WideCompare"  ((target (:pointer :wide)) (source (:pointer :wide)))  :signed-integer  (:c #x303C #x4D #xA832))(deftrap-inline "_WideNegate"  ((target (:pointer :wide)))  :wideptr  (:c #x303C #x4E #xA832))(deftrap-inline "_WideShift"  ((target (:pointer :wide)) (shift :signed-long))  :wideptr  (:c #x303C #x4F #xA832))(deftrap-inline "_WideSquareRoot"  ((source (:pointer :wide)))  :signed-long  (:c #x303C #x50 #xA832))(deftrap-inline "_WideSubtract"  ((target (:pointer :wide)) (source (:pointer :wide)))  :wideptr  (:c #x303C #x51 #xA832))(deftrap-inline "_WideMultiply"  ((multiplicand :signed-long) (multiplier :signed-long)   (target (:pointer :wide)))  :wideptr  (:c #x303C #x52 #xA832))(deftrap-inline "_WideDivide"  ((dividend (:pointer :wide)) (divisor :signed-long)   (remainder (:pointer :signed-long)))  :signed-long  (:c #x303C #x53 #xA832))(deftrap-inline "_WideWideDivide"  ((dividend (:pointer :wide)) (divisor :signed-long)   (remainder (:pointer :signed-long)))  :wideptr  (:c #x303C #x55 #xA832))(deftrap-inline "_VectorMultiply"  ((count :signed-long) (vector1 (:pointer :signed-long))   (step1 :signed-long) (vector2 (:pointer :signed-long))   (step2 :signed-long) (dot (:pointer :wide)))  :wideptr  (:c #x303C #x54 #xA832))(deftrap-inline "_RandomBits"  ((count :signed-long) (focus :signed-long))  :signed-long  (:c #x303C #x56 #xA832))(deftrap-inline "_SetRandomSeed"  ((seed (:pointer :wide)))  nil  (:c #x303C #x57 #xA832))(deftrap-inline "_GetRandomSeed"  ((seed (:pointer :wide)))  :wideptr  (:c #x303C #x58 #xA832))(provide-interface 'gxmath);;; 1 patched