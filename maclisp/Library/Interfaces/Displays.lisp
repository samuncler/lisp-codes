(in-package :TRAPS); Generated from #P"HD:CCL3.0d17:Interface Translator:Source interfaces:Pascal Interfaces:Displays.p"; at Tuesday June 6,1995 2:08:01 pm.; ;  	File:		Displays.p;  ;  	Contains:	Display Manager Interfaces.;  ;  	Version:	Technology:	System 7.5;  				Package:	Universal Interfaces 2.0 in “MPW Latest” on ETO #17;  ;  	Copyright:	© 1984-1995 by Apple Computer, Inc.;  				All rights reserved.;  ;  	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter;  				stack.  Include the file and version information (from above);  				in the problem description and send to:;  					Internet:	apple.bugs@applelink.apple.com;  					AppleLink:	APPLE.BUGS;  ; #|                                              ; $IFC UNDEFINED UsingIncludes; $SETC UsingIncludes := 0 |#                                             ; $ENDC; $IFC NOT UsingIncludes; $ENDC; $IFC UNDEFINED __DISPLAYS__; $SETC __DISPLAYS__ := 1; $I+; $SETC DisplaysIncludes := UsingIncludes; $SETC UsingIncludes := 1#|                                              ; $IFC UNDEFINED __CONDITIONALMACROS__|#(require-interface 'ConditionalMacros)#|                                              ; $I ConditionalMacros.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __COMPONENTS__|#(require-interface 'Components)#|                                              ; $I Components.p |#                                             ; $ENDC; 	Types.p														; 	MixedMode.p													; $IFC UNDEFINED __VIDEO__(require-interface 'Video)                      ; $I Video.p; $ENDC; 	Quickdraw.p													; 		QuickdrawText.p											#|                                              ; $IFC UNDEFINED __APPLEEVENTS__|#(require-interface 'AppleEvents)#|                                              ; $I AppleEvents.p |#                                             ; $ENDC; 	Errors.p													; 	Memory.p													; 	OSUtils.p													; 	Events.p													; 	EPPC.p														; 		AppleTalk.p												; 		Files.p													; 		PPCToolbox.p											; 		Processes.p												; 	Notification.p												#|                                              ; $IFC UNDEFINED __WINDOWS__|#(require-interface 'Windows)#|                                              ; $I Windows.p |#                                             ; $ENDC; 	Controls.p													; 		Menus.p													#|                                              ; $IFC UNDEFINED __EVENTS__|#(require-interface 'Events)#|                                              ; $I Events.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __PROCESSES__|#(require-interface 'Processes)#|                                              ; $I Processes.p |#                                             ; $ENDC#|                                              ; $IFC UNDEFINED __DIALOGS__|#(require-interface 'Dialogs)#|                                              ; $I Dialogs.p |#                                             ; $ENDC; 	TextEdit.p													; $PUSH; $ALIGN MAC68K; $LibExport+;  AppleEvents Core Suite (defconstant $kAESystemConfigNotice :|cnfg|);  Core Suite types (defconstant $kAEDisplayNotice :|dspl|)(defconstant $kAEDisplaySummary :|dsum|)(defconstant $keyDMConfigVersion :|dmcv|)(defconstant $keyDMConfigFlags :|dmcf|)(defconstant $keyDMConfigReserved :|dmcr|)(defconstant $keyDisplayID :|dmid|)(defconstant $keyDisplayComponent :|dmdc|)(defconstant $keyDisplayDevice :|dmdd|)(defconstant $keyDisplayFlags :|dmdf|)(defconstant $keyDisplayMode :|dmdm|)(defconstant $keyDisplayModeReserved :|dmmr|)(defconstant $keyDisplayReserved :|dmdr|)(defconstant $keyDisplayMirroredId :|dmmi|)(defconstant $keyDeviceFlags :|dddf|)(defconstant $keyDeviceDepthMode :|dddm|)(defconstant $keyDeviceRect :|dddr|)(defconstant $keyPixMapRect :|dpdr|)(defconstant $keyPixMapHResolution :|dphr|)(defconstant $keyPixMapVResolution :|dpvr|)(defconstant $keyPixMapPixelType :|dppt|)(defconstant $keyPixMapPixelSize :|dpps|)(defconstant $keyPixMapCmpCount :|dpcc|)(defconstant $keyPixMapCmpSize :|dpcs|)(defconstant $keyPixMapAlignment :|dppa|)(defconstant $keyPixMapResReserved :|dprr|)(defconstant $keyPixMapReserved :|dppr|)(defconstant $keyPixMapColorTableSeed :|dpct|)(defconstant $keySummaryMenubar :|dsmb|)(defconstant $keySummaryChanges :|dsch|)(defconstant $keyDisplayOldConfig :|dold|)(defconstant $keyDisplayNewConfig :|dnew|)(defconstant $dmOnlyActiveDisplays #$true)(defconstant $dmAllDisplays #$false);  Switch Flags (defconstant $kNoSwitchConfirmBit 0)            ;  Flag indicating that there is no need to confirm a switch to this mode (defconstant $kDepthNotAvailableBit 1)          ;  Current depth not available in new mode (defconstant $kShowModeBit 3)                   ;  Show this mode even though it requires a confirm. (defconstant $kModeNotResizeBit 4)              ;  Do not use this mode to resize display (for cards that mode drives a different connector). ; 	Summary Change Flags (sticky bits indicating an operation was performed); 	For example, moving a display then moving it back will still set the kMovedDisplayBit.; (defconstant $kBeginEndConfigureBit 0)(defconstant $kMovedDisplayBit 1)(defconstant $kSetMainDisplayBit 2)(defconstant $kSetDisplayModeBit 3)(defconstant $kAddDisplayBit 4)(defconstant $kRemoveDisplayBit 5)(defconstant $kNewDisplayBit 6)(defconstant $kDisposeDisplayBit 7)(defconstant $kEnabledDisplayBit 8)(defconstant $kDisabledDisplayBit 9)(defconstant $kMirrorDisplayBit 10)(defconstant $kUnMirrorDisplayBit 11); 	Power Mode constants for AVPowerStateRec.powerState.	(defconstant $kAVPowerOff 0)(defconstant $kAVPowerStandby 1)(defconstant $kAVPowerSuspend 2)(defconstant $kAVPowerOn 3);  Notification Messages for extended call back routines (defconstant $kDMNotifyInstalled 1)             ;  At install time (defconstant $kDMNotifyEvent 2)                 ;  Post change time (defconstant $kDMNotifyRemoved 3)               ;  At remove time (defconstant $kDMNotifyPrep 4)                  ;  Pre change time (defconstant $kDMNotifyExtendEvent 5)           ;  Allow registrees to extend apple event before it is sent (defconstant $kDMNotifyDependents 6)            ;  Minor notification check without full update ;  Notification Flags (defconstant $kExtendedNotificationProc 65536);  types for notifyType (defconstant $kFullNotify 0)                    ;  This is the appleevent whole nine yards notify (defconstant $kFullDependencyNotify 1)          ;  Only sends to those who want to know about interrelated functionality (used for updating UI) ;  DisplayID/DeviceID constants (defconstant $kDummyDeviceID #xFF)              ;  This is the ID of the dummy display, used when the last “real” display is disabled.(defconstant $kInvalidDisplayID #x0)            ;  This is the invalid ID(defconstant $kFirstDisplayID #x100);  bits for panelListFlags (defconstant $kAllowDuplicatesBit 0);  Constants for fidelity checks (defconstant $kNoFidelity 0)(defconstant $kMinimumFidelity 1)(defconstant $kDefaultFidelity 500)             ;  I'm just picking a number for Apple default panels and engines(defconstant $kDefaultManufacturerFidelity 1000);  I'm just picking a number for Manufacturer's panels and engines (overrides apple defaults)(defconstant $kAnyPanelType 0)                  ;  Pass to DMNewEngineList for list of all panels (as opposed to specific types)(defconstant $kAnyEngineType 0)                 ;  Pass to DMNewEngineList for list of all engines(defconstant $kAnyDeviceType 0)                 ;  Pass to DMNewDeviceList for list of all devices(defconstant $kAnyPortType 0)                   ;  Pass to DMNewDevicePortList for list of all devices;  portListFlags for DM_NewDevicePortList ;  Should offline devices be put into the port list (such as dummy display) (defconstant $kPLIncludeOfflineDevicesBit 0)(def-mactype :dmfidelitytype (find-mactype ':signed-long));  AVID is an ID for ports and devices the old DisplayID type; 	is carried on for compatibility; (def-mactype :avidtype (find-mactype ':signed-long))(def-mactype :displayidtype (find-mactype ':signed-long))(def-mactype :dmlisttype (find-mactype ':pointer))(def-mactype :dmlistindextype (find-mactype ':signed-long))(defrecord AVPowerStateRec    ;;Changing field powerstate from signed-long to unsigned-long to match C header (pretty-darn-sure)   (powerState :unsigned-long)   ;;Changing field powerflags from signed-long to unsigned-long to match C header (pretty-darn-sure)   (powerFlags :unsigned-long)   ;;Changing field powerreserved1 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (powerReserved1 :unsigned-long)   ;;Changing field powerreserved2 from signed-long to unsigned-long to match C header (pretty-darn-sure)   (powerReserved2 :unsigned-long)   )(def-mactype :avpowerstateptr (find-mactype '(:pointer :avpowerstaterec)))(defrecord DMComponentListEntryRec    (itemID :signed-long)                        ;  DisplayID Manager   (itemComponent (:pointer :componentrecord))  ;  Component Manager   (itemDescription :componentdescription)      ;  We can always construct this if we use something beyond the compontent mgr.   (itemClass :ostype)                          ;  Class of group to put this panel (eg geometry/color/etc for panels, brightness/contrast for engines, video out/sound/etc for devices)   (itemFidelity :signed-long)                  ;  How good is this item for the specified search?   ;;Changing field itemflags from signed-long to unsigned-long to match C header (pretty-darn-sure)   (itemFlags :unsigned-long)                   ;  Set to 0 (future expansion)   (itemReserved :ostype)                       ;  What kind of code does the itemReference point to  (right now - kPanelEntryTypeComponentMgr only)   ;;Changing field itemfuture from signed-long to unsigned-long to match C header (pretty-darn-sure)   (itemFuture :unsigned-long)                  ;  Set to 0 (future expansion - probably an alternate code style)   )(def-mactype :dmcomponentlistentryptr (find-mactype '(:pointer :dmcomponentlistentryrec)));  ••• Move AVLocationRec to AVComponents.i AFTER AVComponents.i is created(defrecord AVLocationRec    ;;Changing field locationconstant from signed-long to unsigned-long to match C header (pretty-darn-sure)   (locationConstant :unsigned-long)            ;  Set to 0 (future expansion - probably an alternate code style)   )(def-mactype :avlocationptr (find-mactype '(:pointer :avlocationrec)))(defrecord DMDisplayModeListEntryRec    ;;Changing field displaymodeflags from signed-long to unsigned-long to match C header (pretty-darn-sure)   (displayModeFlags :unsigned-long)   (displayModeSwitchInfo (:pointer :vdswitchinforec))   (displayModeResolutionInfo (:pointer :vdresolutioninforec))   (displayModeTimingInfo (:pointer :vdtiminginforec))   (displayModeSmallestRect (:pointer :rect))   ;  Smallest Mode Rect   (displayModeLargestRect (:pointer :rect))    ;  Largest Mode Rect   (displayModeName (:pointer (:string 255)))   ;  Name of the timing mode   )(def-mactype :dmdisplaymodelistentryptr (find-mactype '(:pointer :dmdisplaymodelistentryrec)))(defrecord DependentNotifyRec    (notifyType :ostype)                         ;  What type was the engine that made the change (may be zero)   (notifyClass :ostype)                        ;  What class was the change (eg geometry, color etc)   (notifyPortID :signed-long)                  ;  Which device was touched (kInvalidDisplayID -> all or none)   (notifyComponent (:pointer :componentinstancerecord));  What engine did it (may be 0)?   ;;Changing field notifyversion from signed-long to unsigned-long to match C header (pretty-darn-sure)   (notifyVersion :unsigned-long)               ;  Set to 0 (future expansion)   ;;Changing field notifyflags from signed-long to unsigned-long to match C header (pretty-darn-sure)   (notifyFlags :unsigned-long)                 ;  Set to 0 (future expansion)   ;;Changing field notifyreserved from signed-long to unsigned-long to match C header (pretty-darn-sure)   (notifyReserved :unsigned-long)              ;  Set to 0 (future expansion)   ;;Changing field notifyfuture from signed-long to unsigned-long to match C header (pretty-darn-sure)   (notifyFuture :unsigned-long)                ;  Set to 0 (future expansion)   )(def-mactype :dependentnotifyptr (find-mactype '(:pointer :dependentnotifyrec)))(def-mactype :dmnotificationprocptr (find-mactype ':pointer));  PROCEDURE DMNotification(VAR theEvent: AppleEvent); (def-mactype :dmextendednotificationprocptr (find-mactype ':pointer));  PROCEDURE DMExtendedNotification(userData: UNIV Ptr; theMessage: INTEGER; notifyData: UNIV Ptr); (def-mactype :dmcomponentlistiteratorprocptr (find-mactype ':pointer));  PROCEDURE DMComponentListIterator(userData: UNIV Ptr; itemIndex: DMListIndexType; componentInfo: DMComponentListEntryPtr); (def-mactype :dmdisplaymodelistiteratorprocptr (find-mactype ':pointer));  PROCEDURE DMDisplayModeListIterator(userData: UNIV Ptr; itemIndex: DMListIndexType; displaymodeInfo: DMDisplayModeListEntryPtr); (def-mactype :dmnotificationupp (find-mactype ':pointer))(def-mactype :dmextendednotificationupp (find-mactype ':pointer))(def-mactype :dmcomponentlistiteratorupp (find-mactype ':pointer))(def-mactype :dmdisplaymodelistiteratorupp (find-mactype ':pointer))(defconstant $uppDMNotificationProcInfo #xC0)   ;  PROCEDURE (4 byte param); (defconstant $uppDMExtendedNotificationProcInfo #xEC0);  PROCEDURE (4 byte param, 2 byte param, 4 byte param); (defconstant $uppDMComponentListIteratorProcInfo #xFC0);  PROCEDURE (4 byte param, 4 byte param, 4 byte param); (defconstant $uppDMDisplayModeListIteratorProcInfo #xFC0);  PROCEDURE (4 byte param, 4 byte param, 4 byte param); ; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDMNotificationProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDMExtendedNotificationProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDMComponentListIteratorProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM ;; Generated by translator basic-stack-trap(deftrap "_NewDMDisplayModeListIteratorProc" ((userRoutine :pointer))   (:stack :pointer)   (:stack-trap #x2E9F)); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDMNotificationProc" ((theEvent (:pointer :aedesc)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDMExtendedNotificationProc" ((userData :pointer) (theMessage :signed-integer) (notifyData :pointer) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDMComponentListIteratorProc" ((userData :pointer) (itemIndex :signed-long) (componentInfo (:pointer :dmcomponentlistentryrec)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Inline instructions called as foreign function(deftrap-inline "_CallDMDisplayModeListIteratorProc" ((userData :pointer) (itemIndex :signed-long) (displaymodeInfo (:pointer :dmdisplaymodelistentryrec)) (userRoutine :pointer))   nil   (#x205F #x4E90) ); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DMGetFirstScreenDevice" ((activeOnly :boolean))   (:stack (:handle :gdevice))   (:stack-trap #xABEB :d0 0 activeOnly)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DMGetNextScreenDevice" ((theDevice (:handle :gdevice)) (activeOnly :boolean))   (:stack (:handle :gdevice))   (:stack-trap #xABEB :d0 1 theDevice activeOnly)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DMDrawDesktopRect" ((globalRect (:pointer :rect)))   nil   (:stack-trap #xABEB :d0 2 globalRect)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DMDrawDesktopRegion" ((globalRgn (:handle :region)))   nil   (:stack-trap #xABEB :d0 3 globalRgn)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMBeginConfigureDisplays" ((displayState (:pointer :handle)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 518 displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMEndConfigureDisplays" ((displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 519 displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMAddDisplay" ((newDevice (:handle :gdevice)) (driver :signed-integer) (mode :signed-long) (reserved :signed-long) (displayID :signed-long) (displayComponent (:pointer :componentrecord)) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 3336 newDevice driver mode reserved displayID displayComponent displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMMoveDisplay" ((moveDevice (:handle :gdevice)) (x :signed-integer) (y :signed-integer) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1545 moveDevice x y displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMDisableDisplay" ((disableDevice (:handle :gdevice)) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1034 disableDevice displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMEnableDisplay" ((enableDevice (:handle :gdevice)) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1035 enableDevice displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMRemoveDisplay" ((removeDevice (:handle :gdevice)) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1036 removeDevice displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMSetMainDisplay" ((newMainDevice (:handle :gdevice)) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1040 newMainDevice displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMSetDisplayMode" ((theDevice (:handle :gdevice)) (mode :signed-long) (depthMode (:pointer :signed-long)) (reserved :signed-long) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2577 theDevice mode depthMode reserved displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMCheckDisplayMode" ((theDevice (:handle :gdevice)) (mode :signed-long) (depthMode :signed-long) (switchFlags (:pointer :signed-long)) (reserved :signed-long) (modeOk (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 3090 theDevice mode depthMode switchFlags reserved modeOk)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetDeskRegion" ((desktopRegion (:pointer (:handle :region))))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 531 desktopRegion)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMRegisterNotifyProc" ((notificationProc :pointer) (whichPSN (:pointer :processserialnumber)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1044 notificationProc whichPSN)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMRemoveNotifyProc" ((notificationProc :pointer) (whichPSN (:pointer :processserialnumber)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1045 notificationProc whichPSN)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMQDIsMirroringCapable" ((qdIsMirroringCapable (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 534 qdIsMirroringCapable)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMCanMirrorNow" ((canMirrorNow (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 535 canMirrorNow)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMIsMirroringOn" ((isMirroringOn (:pointer :boolean)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 536 isMirroringOn)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMMirrorDevices" ((gD1 (:handle :gdevice)) (gD2 (:handle :gdevice)) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1561 gD1 gD2 displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMUnmirrorDevice" ((gDevice (:handle :gdevice)) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1050 gDevice displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetNextMirroredDevice" ((gDevice (:handle :gdevice)) (mirroredDevice (:pointer (:handle :gdevice))))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1051 gDevice mirroredDevice)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DMBlockMirroring" ()   (:stack :signed-integer)   (:stack-trap #xABEB :d0 28)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DMUnblockMirroring" ()   (:stack :signed-integer)   (:stack-trap #xABEB :d0 29)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetDisplayMgrA5World" ((dmA5 (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 542 dmA5)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetDisplayIDByGDevice" ((displayDevice (:handle :gdevice)) (displayID (:pointer :signed-long)) (failToMain :boolean))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1311 displayDevice displayID failToMain)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetGDeviceByDisplayID" ((displayID :signed-long) (displayDevice (:pointer (:handle :gdevice))) (failToMain :boolean))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1312 displayID displayDevice failToMain)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMSetDisplayComponent" ((theDevice (:handle :gdevice)) (displayComponent (:pointer :componentrecord)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1057 theDevice displayComponent)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetDisplayComponent" ((theDevice (:handle :gdevice)) (displayComponent (:pointer (:pointer :componentrecord))))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1058 theDevice displayComponent)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMNewDisplay" ((newDevice (:pointer (:handle :gdevice))) (driverRefNum :signed-integer) (mode :signed-long) (reserved :signed-long) (displayID :signed-long) (displayComponent (:pointer :componentrecord)) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 3363 newDevice driverRefNum mode reserved displayID displayComponent displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMDisposeDisplay" ((disposeDevice (:handle :gdevice)) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1060 disposeDevice displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator moveq-word-to-d0(deftrap "_DMResolveDisplayComponents" ()   (:stack :signed-integer)   (:stack-trap #xABEB :d0 37)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMRegisterExtendedNotifyProc" ((notifyProc :pointer) (notifyUserData :pointer) (nofifyOnFlags :signed-integer) (whichPSN (:pointer :processserialnumber)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2031 notifyProc notifyUserData nofifyOnFlags whichPSN)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMRemoveExtendedNotifyProc" ((notifyProc :pointer) (notifyUserData :pointer) (whichPSN (:pointer :processserialnumber)) (removeFlags :signed-integer))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1830 notifyProc notifyUserData whichPSN removeFlags)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMNewAVPanelList" ((displayID :signed-long) (panelType :ostype) (minimumFidelity :signed-long) (panelListFlags :signed-long) (reserved :signed-long) (thePanelCount (:pointer :signed-long)) (thePanelList (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 3111 displayID panelType minimumFidelity panelListFlags reserved thePanelCount thePanelList)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMNewAVEngineList" ((displayID :signed-long) (engineType :ostype) (minimumFidelity :signed-long) (engineListFlags :signed-long) (reserved :signed-long) (engineCount (:pointer :signed-long)) (engineList (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 3112 displayID engineType minimumFidelity engineListFlags reserved engineCount engineList)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMNewAVDeviceList" ((deviceType :ostype) (deviceListFlags :signed-long) (reserved :signed-long) (deviceCount (:pointer :signed-long)) (deviceList (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2601 deviceType deviceListFlags reserved deviceCount deviceList)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMNewAVPortListByPortType" ((subType :ostype) (portListFlags :signed-long) (reserved :signed-long) (devicePortCount (:pointer :signed-long)) (theDevicePortList (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2602 subType portListFlags reserved devicePortCount theDevicePortList)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetIndexedComponentFromList" ((panelList :pointer) (itemIndex :signed-long) (reserved :signed-long) (listIterator :pointer) (userData :pointer))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2603 panelList itemIndex reserved listIterator userData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMDisposeList" ((panelList :pointer))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 556 panelList)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetNameByAVID" ((theID :signed-long) (name (:pointer (:string 255))))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1069 theID name)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMNewAVIDByPortComponent" ((thePortComponent (:pointer :componentrecord)) (portKind :ostype) (reserved :signed-long) (newID (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2094 thePortComponent portKind reserved newID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetPortComponentByAVID" ((thePortID :signed-long) (thePortComponent (:pointer (:pointer :componentrecord))) (theDesciption (:pointer :componentdescription)) (thePortKind (:pointer :ostype)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2095 thePortID thePortComponent theDesciption thePortKind)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMSendDependentNotification" ((notifyType :ostype) (notifyClass :ostype) (displayID :signed-long) (notifyComponent (:pointer :componentinstancerecord)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2608 notifyType notifyClass displayID notifyComponent)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMDisposePortComponent" ((thePortComponent (:pointer :componentrecord)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 561 thePortComponent)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMSaveScreenPrefs" ((reserved1 :signed-long) (saveFlags :signed-long) (reserved2 :signed-long))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1586 reserved1 saveFlags reserved2)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMNewAVIDByDeviceComponent" ((theDeviceComponent (:pointer :componentrecord)) (portKind :ostype) (reserved :signed-long) (newID (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2099 theDeviceComponent portKind reserved newID)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMNewAVPortListByDeviceAVID" ((theID :signed-long) (minimumFidelity :signed-long) (portListFlags :signed-long) (reserved :signed-long) (devicePortCount (:pointer :signed-long)) (theDevicePortList (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 3124 theID minimumFidelity portListFlags reserved devicePortCount theDevicePortList)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetDeviceComponentByAVID" ((theDeviceID :signed-long) (theDeviceComponent (:pointer (:pointer :componentrecord))) (theDesciption (:pointer :componentdescription)) (theDeviceKind (:pointer :ostype)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2101 theDeviceID theDeviceComponent theDesciption theDeviceKind)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMNewDisplayModeList" ((displayID :signed-long) (modeListFlags :signed-long) (reserved :signed-long) (thePanelCount (:pointer :signed-long)) (thePanelList (:pointer :pointer)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2614 displayID modeListFlags reserved thePanelCount thePanelList)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetIndexedDisplayModeFromList" ((panelList :pointer) (itemIndex :signed-long) (reserved :signed-long) (listIterator :pointer) (userData :pointer))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2615 panelList itemIndex reserved listIterator userData)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetGraphicInfoByAVID" ((theID :signed-long) (theAVPcit (:pointer (:handle :picture))) (theAVIconSuite (:pointer :handle)) (theAVLocation (:pointer :avlocationrec)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2104 theID theAVPcit theAVIconSuite theAVLocation)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetAVPowerState" ((theID :signed-long) (getPowerState (:pointer :avpowerstaterec)) (reserved1 :signed-long))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2105 theID getPowerState reserved1)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMSetAVPowerState" ((theID :signed-long) (setPowerState (:pointer :avpowerstaterec)) (reserved1 :signed-long) (displayState :handle))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 2106 theID setPowerState reserved1 displayState)); $ENDC; $IFC NOT GENERATINGCFM;; Generated by translator put-a-constant-word-in-d0(deftrap "_DMGetDeviceAVIDByPortAVID" ((portAVID :signed-long) (deviceAVID (:pointer :signed-long)))   (:stack :signed-integer)   (:stack-trap #xABEB :d0 1083 portAVID deviceAVID)); $ENDC; $ALIGN RESET; $POP; $SETC UsingIncludes := DisplaysIncludes; $ENDC                                         ; __DISPLAYS__; $IFC NOT UsingIncludes; $ENDC(provide-interface 'Displays)