;;;-*-Mode: LISP; Package: CCL -*-;;	Change History (most recent first):;;  11 1/22/97 akh  probably no change;;  8 7/18/96  akh  preserve dead-keys state;;  5 6/8/95   akh  use 2.0.1 versions of choose-directory-dialog;;  (do not edit before this line!!);; old-file-dialog.lisp - System 6 compatible file dialogs; Copyright 1995 Digitool, Inc. The 'tool rules!#| Note for MCL users:The three functions choose-file-dialog, choose-new-file-dialog, andchoose-directory-dialog and their support functions are defined herefor those users who are using System Software Version 6.x on theirMacintosh. (Users who have System 7 or later would normally use theupdated versions of these functions, from "Library;new-file-dialogs.lisp";however, a bug in the Mac OS can cause those functions to crash - seethat file for details.)To install the code from this file permanently into your MCL environment,you can load it and then use save-application to create a new Lisp image,or you can put this form in your init.lisp file:(require 'old-file-dialogs)|#(in-package "CCL"); Modification History;;  9/05/96 slh   rearranged for easier compiling; restoring-dead-keys macro; 08/27/96 bill  without-event-processing => with-foreign-window in;                choose-file-dialog, choose-new-file-dialog, choose-directory-dialog.; -------------  4.0b1;  8/05/96 slh  bind redefine warning vars; choose-file-dialog: removed spurious;               "test" keyword; get-dead-keys-state for backwards compat.;  5/31/96 slh  in-package AGAIN; 04/24/96 bill put-external-scrap in choose-new-file-dialog; ------------- MCL-PPC 3.9; 02/09/96 bill wrap without-event-processing around calls to #_SFGetFile & friends.; 11/29/95 bill New names for dialog and control manager functions;               to avoid trap emulator.; 11/14/95 bill restore defpascal's; 4/26/95 slh   new file(eval-when (:execute :compile-toplevel)  (require "LISPEQU")  (require "SYSEQU")  (defmacro restoring-dead-keys (&body body)    (let ((dead-state (gensym)))      `(let ((,dead-state (get-dead-keys-state)))         (unwind-protect           (progn ,@body)           (set-dead-keys ,dead-state)))))  ); backward compat.(unless (fboundp 'get-dead-keys-state)  (defun get-dead-keys-state ()    (let* ((kchr-ptr (%get-ptr (%get-ptr (%int-to-ptr #x2b6)) 14))           (base-table (%inc-ptr kchr-ptr 260))           (table (%null-ptr)))      (declare (dynamic-extent kchr-ptr base-table table))      (dolist (table-entry *default-dead-keys*)        (%setf-macptr table (%inc-ptr base-table (* 128 (car table-entry))))        (dolist (keycode (cdr table-entry))          (when (eq 0 (%get-byte table  keycode))            ; so if any one is dead we assume all dead - morbid            (return-from get-dead-keys-state t)))))))(defun bg-choose-file-error (name)  (error "Attempt to invoke ~A dialog in background" name))(defpascal sf-hook (:word item :ptr dlg :word)  (declare (special %button-string%))  (%run-masked-periodic-tasks)  (rlet ((type :integer)(item-ptr :handle)(rect :pointer))    (#_GetDialogItem dlg 1 type item-ptr rect)    (when (or (eq item -1)              (%stack-block ((s 256))                (#_GetControlTitle (%get-ptr item-ptr) s)                (flet ((save-p (s)                         (and (eq (%get-byte s) 4)                              (dotimes (i 4 t)                                (unless (eq (%get-byte s (1+ i))                                            (%char-code (schar "Save" i)))                                  (return nil))))))                  (and (save-p s)                       (not (save-p %button-string%))))))      (#_SetControlTitle (%get-ptr item-ptr) %button-string%)))  item)(defpascal sf-choose-directory-hook (:word item :ptr dlg :word)  (declare (special %selectedp%))  (%run-masked-periodic-tasks)  (let ((inc 75)        (new-size nil))    (case item      (-1       (#_SizeWindow dlg (+ inc (rref dlg windowrecord.portrect.right))(rref dlg windowrecord.portrect.bottom) 0)       (rlet ((type :integer)(item-ptr :handle)(rect :pointer)              (type2 :integer)(item-ptr2 :handle)(rect2 :pointer))         ;;cancel button         (#_GetDialogItem dlg 3 type item-ptr rect)         (incf (rref rect rect.right) inc)         (setq new-size (subtract-points (rref rect rect.bottomright) (rref rect rect.topleft)))         (#_SizeControl :pointer (%get-ptr item-ptr) :long new-size)         (#_SetDialogItem dlg 3 4 (%get-ptr item-ptr) rect)         ;;New Button         (#_GetDialogItem dlg 2 type2 item-ptr2 rect2)         (decf (rref rect rect.top) 25)         (decf (rref rect rect.bottom) 25)         (#_SetDialogItem dlg 2 4 (%get-ptr item-ptr2) rect)         (#_MoveControl :pointer (%get-ptr item-ptr2) :long (rref rect rect.topleft))         (#_SizeControl :pointer (%get-ptr item-ptr2) :long new-size)         (with-pstrs ((sp "Select Current Folder"))           (#_SetControlTitle (%get-ptr item-ptr2) sp))         ;;Open Button                  (#_GetDialogItem dlg 1 type item-ptr rect)         (incf (rref rect rect.right) inc)         (incf (rref rect rect.top) -25)         (incf (rref rect rect.bottom) -25)         (#_MoveControl :pointer (%get-ptr item-ptr) :long (rref rect rect.topleft))         (#_SizeControl :pointer (%get-ptr item-ptr) :long new-size)         (#_SetDialogItem dlg 1 4 (%get-ptr item-ptr) rect)         ;;Eject Button         (#_GetDialogItem dlg 5 type item-ptr rect)         (incf (rref rect rect.right) inc)         (incf (rref rect rect.top) -25)         (incf (rref rect rect.bottom) -25)         (#_MoveControl :pointer (%get-ptr item-ptr) :long (rref rect rect.topleft))         (#_SizeControl :pointer (%get-ptr item-ptr) :long new-size)         (#_SetDialogItem dlg 5 4 (%get-ptr item-ptr) rect)         ;;Desktop Button         (#_GetDialogItem dlg 6 type item-ptr rect)         (incf (rref rect rect.right) inc)         (incf (rref rect rect.top) -25)         (incf (rref rect rect.bottom) -25)         (#_MoveControl :pointer (%get-ptr item-ptr) :long (rref rect rect.topleft))         (#_SizeControl :pointer (%get-ptr item-ptr) :long new-size)         (#_SetDialogItem dlg 6 4 (%get-ptr item-ptr) rect)         ;;Line         (#_GetDialogItem dlg 9 type item-ptr rect)         (incf (rref rect rect.right) inc)         (incf (rref rect rect.top) -25)         (incf (rref rect rect.bottom) -25)         (#_SetDialogItem dlg 9 0 (%get-ptr item-ptr) rect)         ;;Volume         (#_GetDialogItem dlg 4 type item-ptr rect)         (incf (rref rect rect.top) -25)         (incf (rref rect rect.bottom) -25)         (#_SetDialogItem dlg 4 0 (%get-ptr item-ptr) rect)         ))      (2 (setq %selectedp% t))))  item)(defun choose-file-ddir ()  (%stack-block ((pb $ioPBSize))    (%put-word pb (- (%get-word (%int-to-ptr $SFSaveDisk))) $ioVRefNum)    (%put-long pb (%get-long (%int-to-ptr $CurDirStor)) $ioDirID)    (setq *last-choose-file-directory* (directory-namestring (%dir-path-from-iopb pb)))))(let ((*warn-if-redefine* nil)      (*warn-if-redefine-kernel* nil))(defun choose-file-dialog (&key directory                                mac-file-type                                mac-file-creator                                (button-string "Open")                                &aux (ntypes -1) (offset 0))  ;Do you get a feeling some of this stuff is not quite finished?  ; too true!  (declare (ignore mac-file-creator))    (when (or (and directory                 (setq directory (directory-namestring (full-pathname directory))))            (setq directory (choose-file-default-directory)))    (set-choose-file-default-directory directory))  (if mac-file-type    (setq ntypes (if (listp mac-file-type) (length mac-file-type) 1)))  ;Would be neat if we could SELECT the default filename...  (restoring-dead-keys   (rlet ((sf :sfreply))     (%vstack-block (tp (%ilsl 2 (%imax 1 ntypes)))       (if (listp mac-file-type)         (dolist (type mac-file-type)           (%put-ostype tp type offset)           (setq offset (%i+ offset 4)))         (%put-ostype tp mac-file-type))       (with-pstr (%button-string% button-string)         (declare (special %button-string%))         (unless *foreground* (bg-choose-file-error "Choose File"))         (with-foreign-window           (#_SFGetFile #@(100 40) *null-ptr* *null-ptr* ntypes tp sf-hook sf))))     (unless (rref sf sfreply.good)       (choose-file-ddir)(throw-cancel :cancel))         (%stack-block ((pb $ioPBSize))       (%put-ptr pb (%inc-ptr sf 10) $ioFileName) ;sf.fname       (%put-word pb (rref sf sfreply.vrefnum) $ioVRefNum)       (%put-long pb 0 $ioDirID)       (let ((val (%path-from-iopb pb)))                 (%put-word pb (rref sf sfreply.vrefnum) $ioVRefNum)         (#_closeWD pb)         (setq *last-choose-file-directory* (directory-namestring val))         val)))))(defun choose-new-file-dialog (&key directory                                    (prompt "As...")                                    (button-string "Save")                                    &aux name)  (when directory     (setq name (mac-file-namestring (file-namestring directory)))    (setq directory (full-pathname directory)))  (when (or (and directory                 (pathname-directory directory)                 (setq directory (directory-namestring directory)))            (setq directory (choose-file-default-directory)))     (set-choose-file-default-directory directory))  (restoring-dead-keys   (rlet ((sf :sfreply))     (with-pstrs ((pp prompt)                  (np (or name  "")))       (with-pstr (%button-string% button-string)         (declare (special %button-string%))         (unless *foreground* (bg-choose-file-error "Choose New File"))         (put-external-scrap)         (with-foreign-window           (#_SFPutFile #@(100 40) pp np sf-hook sf))))     (unless (rref sf sfreply.good)(choose-file-ddir) (throw-cancel :cancel))     (%stack-block ((pb $ioPBSize))       (%put-ptr pb (%inc-ptr sf 10) $ioFileName) ;sf.fname       (%put-word pb (rref sf sfreply.vrefnum) $ioVRefNum)       (%put-long pb 0 $ioDirID)       (let ((val (%path-from-iopb pb)))                 (%put-word pb (rref sf sfreply.vrefnum) $ioVRefNum)         (#_CloseWD pb)         (setq *last-choose-file-directory* (directory-namestring val))         val)))))(defun choose-directory-dialog (&key directory)  (when (or (and directory (setq directory (full-pathname directory)))            (setq directory (choose-file-default-directory)))    (set-choose-file-default-directory directory))  (restoring-dead-keys   (rlet ((sf :sfreply))     (let* ((%selectedp% nil))       (declare (special %selectedp%))       (%stack-block ((tp 4))         (%put-ostype tp :nada)         (unless *foreground* (bg-choose-file-error "Choose directory"))         (with-foreign-window           (#_SFGetFile #@(100 40) (%null-ptr) (%null-ptr) 1 tp sf-choose-directory-hook sf)))       (when %selectedp%          (return-from choose-directory-dialog           (choose-file-ddir)))       (unless (rref sf sfreply.good)(choose-file-ddir) (cancel))       (%stack-block ((pb $IOPBSIZE))         (%put-ptr pb (%inc-ptr sf 10) $ioFileName) ;sf.fname         (%put-word pb (rref sf sfreply.vrefnum) $ioVRefNum)         (%put-long pb 0 $ioDirID)         (let ((val (%path-from-iopb pb)))           (%put-word pb (rref sf sfreply.vrefnum) $ioVRefNum)           (#_CloseWD pb)           (setq *last-choose-file-directory* (directory-namestring val))           val))))))) ; (let ((*warn-...))); End of old-file-dialogs.lisp