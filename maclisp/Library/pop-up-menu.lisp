;;-*- Mode: Lisp; Package: CCL -*-;;	Change History (most recent first):;;  3 10/5/97  akh  see below;;  2 8/25/97  akh  optimiizations for long menus;;  11 1/22/97 akh  fix view-draw-contents for non-color window.;;  8 5/23/96  akh  fixes for non-roman script in view-font, or menu-item-title, dont lsh ff;;  7 5/20/96  akh  nuke random bold font, lose draw-popup-title-string-in-rect, indentation;;  2 10/17/95 akh  merge patches;;  3 4/10/95  akh  probably no change;;  2 4/6/95   akh  add optional crescent for pull-down-menu;;  7 3/14/95  akh  no change;;  6 2/9/95   akh  add-menu-items sets style more often;;  5 2/7/95   akh  tweak the guy who sets menu-item-style to match parent;;  4 2/6/95   akh  put back old version of view-draw-contents - prefer crop title with ... vs clip it. Also clipped pull-downs too much.;;                  Put some bizarre bold stuff back to plain.;;  2 2/3/95   slh  merge w/new-pop-up-menus.lisp; copyright thang;;  (do not edit before this line!!);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  pop-up-menu.lisp;;;;;;  Copyright 1989-1994 Apple Computer, Inc.;;  Copyright 1995 Digitool, Inc.;;;;  This file implements pop-up menus, according to the Apple standard.;;  it also shows how multiple inheritance can be handy! oh really;;;; Classes defined in this file:;;;;   pop-up-menu        - pop-up-menus that deal better with non-chicago fonts;;   action-pop-up-menu - like a menubar menu (no outline, no triangle);;   pull-down-menu     - like a menubar menu (no outline, no triangle);;   typein-menu        - you can pick a value or type in your own;;      typein-menu-menu    - the little menu inside a typein-menu;;      typein-menu-item    - menu-items in a typein-menu must be of this class;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Mod History;;;; 10/01/97 akh  menu-enable/disable - don't inval view unless necessary;; 07/23/97 akh  add-menu-items - only call set-menu-item-check mark if was non nil;; 12/10/96 akh fix view-draw-contents for non-color window.;;  9/11/96 bill  (method view-click-event-handler (pop-up-menu t)) does nothing;;                if the pop-up menu is disabled.;; -------------- 4.0b1;; -------------- 3.9;; akh nuke random bold font, lose draw-popup-title-string-in-rect, indentation;; 03/26/96 gb    lowmem accessors.;; 02/29/96 bill  export action-pop-up-menu as suggested by Andrew Begel;; 12/05/95 slh   update trap names;; 11/30/95 slh   fix _PopUpMenuSelect call for PPC;;  3/16/95 slh   added action-pop-up-menu;;  2/02/95 slh   merge pop-up-menu.lisp with new-pop-up-menu.lisp;; -------------  3.0d17;; 12/29/94 akh   merge with d13;;                menu-select inverts pull-down-menu before action rather than view-click-event-handler doing it after;;                (action can cause redraw which makes parity wrong - and it looks better);;                highlight-title is an initarg;;                crop titles that don't fit, do menu-item-action with event-processing enabled ;;                set-pop-up-menu-default-item does invalidate-view stead of most callers, set-view-size and position;;                don't if same making resizing dialogs less bouncy. ;; 06/07/94 bill  (method remove-menu-items :around (pop-up-menu));; -------------  3.0d13;; 10/16/93 alice menu-disable and enable for typein-menu do menu and editable-text;; 10/15/93 alice view-draw-contents more tasteful when disabled and color or gray scale.;;		      and menu-select of typein-menu-menu puts back the top edge correctly when disabled.;; 09/19/93 alice Add-menu-items leaves the default-item number unchanged and fixes the;;	            check marks or sets it to 1 if any items and default-item previously 0.;; 04/10/93 alice view-click-event-handler for pop-up-menu make sure he's still there;;		      after menu-select;; 02/18/93 alice position of title is f(leading), typein-menu-menu has a menu-select;;		      method that erases a pixel or two, v-offset is now 2 for both flavors of typein;; 02/17/93 straz tiny triangles for small menus (e.g. Geneva 9);;                editable-text (subview of typein-menu) inherits container's view-font;;                dialog-item-enable/disable for typein-menu;; 02/15/93 alice title (the text to left) does not hilite and is not mouse sensitive;;                default size of typein accounts for title;;                auto-update-default back to nil for pull-down-menu;; 02/15/93 straz view-draw-contents on pop-up-menu, dtrt if no selection;;                auto-update-default t for pull-down-menu;;                add documentation, bold fcn names, clean up file text;; 02/03/93 alice pop-up is no longer a dialog-item - use menu-enable, menu-title etc.;; 01/18/93 alice add pull-down-menu and typein-menu;; 11/11/92 bill  Straz'es patch to add specify background color with :menu-body.;;11/05/92 alice view-default-size dtrt if no items and :sequence;;11/04/92 alice set-view-position does invalidate view - for ift, export a few;;----------- 2.0;; patch 0 Make hierarchical pop-up menus work correctly.;;     Fix redrawing on set-view-size of a pop-up-menu;; --------------- 2.0f3;; 03/19/92 alice in menu-select (menu-items menu) => (menu-items selected-menu);; 10/18/91 bill  optimize view-draw-contents a little.;;                Adjust position of pop up menu;; 10/15/91 bill  window-font -> view-font;;                Add the little System 7 triangle.;;--------------  2.0b3;; 06/21/91 bill  wkf's mod: Add foreground color for titles of pop up menus.;;--------------  2.0b2 ;;;;;;;;;;;;;;;;;;;;;;  packages, proclamations, and requires;;(in-package :ccl)(eval-when (eval compile)  (require :toolequ))(eval-when (:compile-toplevel :load-toplevel :execute)  (export '(pop-up-menu selected-item pop-up-menu-item-display            pop-up-menu-default-item set-pop-up-menu-default-item            pop-up-menu-auto-update-default set-pop-up-item-check-mark            pull-down-menu            typein-menu action-pop-up-menu) :ccl)); Hah - no more dialog item!(defclass pop-up-menu (menu simple-view)  ((width-correction :allocation :class :initform 0                     :accessor pop-up-menu-width-correction)   (menu-rect :initform nil :accessor pop-up-menu-rect)   (title-rect :initform nil :accessor pop-up-menu-title-rect)   (default-item :initarg :default-item :initform 1                 :accessor pop-up-menu-default-item)   (auto-update-default :initarg :auto-update-default :initform t                        :accessor pop-up-menu-auto-update-default)   (item-display :initarg :item-display :initform :selection                 :accessor pop-up-menu-item-display)   (cached-title :initform nil :accessor pop-up-menu-cached-title))  (:default-initargs    :view-position nil     :view-size nil    :menu-title ""    :view-font '("Chicago" 12 :plain)));------(defmethod set-pop-up-menu-default-item ((menu pop-up-menu) num)  (let* ((old (pop-up-menu-default-item menu))         (items (menu-items menu)))        (prog1       num        (when (neq old num)        (when (neq old 0)          (set-pop-up-item-check-mark (nth (1- old) items) nil))        (when (and num (neq num 0))          (set-pop-up-item-check-mark (nth (1- num) items) t))        (setf (pop-up-menu-default-item menu) num)        (when (eq (pop-up-menu-item-display menu) :selection)          (invalidate-view menu))))))(defmethod install-view-in-window ((menu pop-up-menu) dialog &aux ok)    (declare (ignore dialog))    (menu-install menu)  (without-interrupts ; this is what dialog-item buys us   (unwind-protect     (let ((container (view-container menu)))       (set-default-size-and-position menu container)       (setq ok t))     (unless ok       (set-view-container menu nil))))  (size-rectangles menu)  (invalidate-view menu));;;;;;;;;;;;;;;;;;;;;;;;  definitions for pop-up menus;;#|(defmethod initialize-instance ((menu pop-up-menu) &rest initargs &key dialog-item-text)  (declare (dynamic-extent initargs))  (if dialog-item-text    (apply #'call-next-method menu :menu-title dialog-item-text initargs)    (call-next-method)))|#(defmethod initialize-instance :after ((menu pop-up-menu) &rest initargs &key highlight-title)  (declare (ignore initargs))  (when highlight-title (view-put menu :highlight-title t))  (let ((default (pop-up-menu-default-item menu)))        (when (and default (neq default 0))      (setq default (nth (1- default) (menu-items menu)))      (when default (set-pop-up-item-check-mark default t)))));------------; Geometry(defmethod set-view-size ((menu pop-up-menu) h &optional v)    (declare (ignore h v))  (let ((old-size (view-size menu)))    (call-next-method)    (when (not (eql old-size (view-size menu)))      (size-rectangles menu)      (setf (pop-up-menu-cached-title menu) nil)      (invalidate-view menu t))))(defmethod set-view-position ((menu pop-up-menu) h &optional v)  ;(declare (ignore h v))  (when (not (eql (view-position menu) (make-point h v)))    (call-next-method)    (size-rectangles menu)    (invalidate-view menu t)))(defmethod size-rectangles ((menu pop-up-menu))  "does a lot of tweaking to get the thing to draw right"  (let* ((my-pos (view-position menu))         (my-size (view-size menu)))    (when (and my-pos my-size)      (setq my-size (add-points my-size #@(-1 -1)))      (let* ((text (menu-title menu))             (title-offset (make-point (if (eql 0 (length text))                                         0                                         (+ 8 (string-width                                               text                                               (or (view-font menu)                                                   (view-font (view-window menu))))))                                       0))             (menu-rect (or (pop-up-menu-rect menu)                            (setf (pop-up-menu-rect menu) (make-record :rect))))             (title-rect (or (pop-up-menu-title-rect menu)                             (setf (pop-up-menu-title-rect menu)                                   (make-record :rect)))))        (rset menu-rect :rect.topleft (add-points my-pos title-offset))        (rset menu-rect :rect.bottomright (add-points my-pos my-size))        (rset title-rect :rect.topleft (add-points my-pos #@(0 1)))        (rset title-rect :rect.bottomright (make-point (+ (point-h my-pos)                                                          title-offset)                                                       (+ (point-v my-pos)                                                          (point-v my-size)                                                          -2)))))))(defmethod view-default-size ((menu pop-up-menu))  (multiple-value-bind (ff ms)(view-font-codes menu)    (let* ((item-display (slot-value menu 'item-display))           (max-menu-width (max 10 (if (stringp item-display)                                     (font-codes-string-width item-display ff ms)                                     (if (and (eq item-display :selection)                                              (not (menu-items menu)))                                       (font-codes-string-width  "<no items>" ff ms)                                       0))))           (title (menu-title menu))           (title-width (if (eq 0 (length title)) 0 (font-codes-string-width title ff ms))))      ;(when ff (setq ff (logand ff #xffff0000))) ; nuke boldness if any      (setq max-menu-width            (+ (if (eq 0 title-width) 9 18)               ; we used to dolist always               (if (eq item-display :selection)                 (let ((item-max (max-menu-width menu)))                   (if (> item-max max-menu-width)                     item-max                     max-menu-width))                 max-menu-width)))      (multiple-value-bind (a d w l)(font-codes-info ff ms)        (make-point (+  title-width  max-menu-width (if (pull-down-menu-p menu) 5 (+ 12 w))) ; was 15                    (+ a d l 4))))))(defmethod point-in-click-region-p ((menu pop-up-menu) where)  ; prevent changing selection when mouse doesn't move.  (when (view-contains-point-p menu where)    (let ((lh (view-font-line-height menu))          (vh (point-v (view-size menu)))          (rect (pop-up-menu-rect menu)))      (declare (fixnum lh vh))      (and (< (rref rect :rect.left) (point-h where)              (- (rref rect :rect.right) (menu-display-h-offset menu)))           (or (< vh (+ 2 lh))                         (let* ((v-where (point-v where))                      (v-pos (point-v (view-position menu)))                      (offset (menu-display-v-offset menu)))                 (and (> v-where (+ offset v-pos))                      (< v-where                         (+ v-pos lh offset)))))))))(defmethod menu-display-v-offset ((menu pop-up-menu))  1)(defmethod menu-display-h-offset ((menu pop-up-menu))  1);-------------; Appearance(defmethod part-color ((menu menu) key)  (or (getf (slot-value menu 'color-list) key nil)      (case key (:menu-body *white-color*))))#|(defmethod draw-popup-title-string-in-rect ((menu pop-up-menu) string rect)  (with-cstrs ((text string))    (#_TETextBox text (length string) rect #$teJustLeft)))|#(defmethod view-draw-contents ((menu pop-up-menu) &aux (items (menu-items menu)))  (let* (;(pos (view-position menu))         (text (menu-title menu)) ;(dialog-item-text menu))         (ti-rect (pop-up-menu-title-rect menu))         (no-title (equal text ""))         (item-display (pop-up-menu-item-display menu))         (enabled (menu-enabled-p menu))         (colorp (and (color-or-gray-p menu)(window-color-p (view-window menu))))         (pull-down-p (pull-down-menu-p menu)))    (with-focused-dialog-item (menu)  ; take font from item, draw in containers coords - this is the other thing that dialog item gives us      (multiple-value-bind (a d w leading)(view-font-codes-info menu)        (declare (ignore a))        (rlet ((a-rect :rect))          (copy-record (pop-up-menu-rect menu) :rect a-rect)          (let ((mi-title (cond ((eq item-display :selection)                                 (let ((selection (pop-up-menu-default-item menu)))                                   (cond ((null items) "<No Items>")                                         ((zerop selection) "<No selection>")                                         (t (menu-item-title                                             (nth (- selection 1) items))))))                                ((stringp item-display)                                 item-display)                                (t                                  (format nil "~a" item-display)))))            (with-fore-color (if (and (not enabled) colorp)                               *gray-color*                               (part-color menu :menu-title)) ; 21-Jun-91 -wkf              (with-back-color (part-color menu :menu-body) ; 10-Nov-92 -straz                (unless no-title                  (#_EraseRect :ptr ti-rect)                  (#_MoveTo :word (+ (rref ti-rect rect.left) 3) ; (+ (point-h pos) 3)                   :word (- (rref ti-rect rect.bottom) (+ d leading)))                  (with-pstrs ((di-title text))                    (#_DrawString :ptr di-title)))                ;  (#_OffsetRect :ptr a-rect :long #@(0 -1))                (#_FillRect :ptr a-rect :ptr *white-pattern*)                (cond ((not pull-down-p)                       (#_FrameRect :ptr a-rect)                       (#_MoveTo :word (+ (rref a-rect rect.left) 3)                        :word (rref a-rect rect.bottom))                       (#_LineTo :word (rref a-rect rect.right)                        :word (rref a-rect rect.bottom))                       (#_LineTo :word (rref a-rect rect.right)                        :word (+ (rref a-rect rect.top) 2)))                      ((crescent menu)                       (let ((tl (rref a-rect rect.topleft)))                         (#_moveto :long tl)                         (dolist (length '(5 3 2 1 0 0))                           (#_line :word length :word 0)                           (#_move :word (- length) :word 1)))))                                                       (#_InsetRect :ptr a-rect :long #@(1 1))                (let* ((left (+ (rref a-rect rect.left)(if pull-down-p 6 (max 6 w))))                       (right (rref a-rect rect.right))                       (bottom (rref a-rect rect.bottom)))                  (#_MoveTo :word left :word  (- bottom (+ leading 1 d)))                  (with-clip-rect-intersect a-rect                    (draw-string-crop mi-title (- right left (if pull-down-p 0 12)))                    (#_MoveTo :word (- right (+ 4 11))                     :word (- (ash (+ bottom (rref a-rect :rect.top)) -1)                              2)))                  ; Draw the little triangle.                  (unless pull-down-p                    (draw-triangle menu)))))))                         (unless (or enabled colorp)          (rlet ((ps :penstate))            (with-item-rect (rect menu)              (#_InsetRect :ptr rect :long #@(0 -1))              (#_GetPenState :ptr ps)              (#_PenPat :ptr *gray-pattern*)              (#_PenMode :word 11)              (#_PaintRect :ptr rect)              (unless no-title (#_PaintRect ti-rect)) ; ??              (#_SetPenState :ptr ps))))))))(defmethod draw-triangle ((menu pop-up-menu))  (cond ((< 16 (point-v (view-size menu)))      ; Big triangle         (#_line :long #@(10 0))         (#_line :long #@(-5 5))         (#_line :long #@(-4 -4))         (#_line :long #@(7 0))         (#_line :long #@(-3 3))         (#_line :long #@(-2 -2))         (#_line :long #@(3 0))         (#_line :long #@(-1 1)))        (t         (#_move 2 0)         (#_line :long #@(6 0))         (#_line :long #@(-3 3))         (#_line :long #@(-2 -2))         (#_line :long #@(3 0))         (#_line :long #@(-1 1)))));-------------; Click event handling(defmethod menu-disable ((menu pop-up-menu))  (when (menu-enabled-p menu)    (invalidate-view menu)    (call-next-method)))(defmethod menu-enable ((menu pop-up-menu))  (when (not (menu-enabled-p menu))    (invalidate-view menu)    (call-next-method)))(defmethod dialog-item-enable ((menu pop-up-menu))  (menu-enable menu))(defmethod dialog-item-disable ((menu pop-up-menu))  (menu-disable menu))(defmethod view-click-event-handler ((menu pop-up-menu) where)  (declare (ignore where))  (when (menu-enabled-p menu)    (let ((no-text (eq 0  (length (menu-title menu)))))          (unless no-text        ; want to hilite not invert        (title-hilite menu))      (menu-select menu 0)              (unless no-text        (title-hilite menu t)))))(defmethod title-hilite ((menu pop-up-menu) &optional un)   (when (view-get menu :highlight-title)     (let ((rect (pop-up-menu-title-rect menu)))       (when rect         (if un           (invalidate-view menu)           (progn             (#_LMSetHiliteMode (%ilogand2 #x7f (#_LMGetHiliteMode)))             (with-focused-view (view-container menu)               (#_InvertRect rect))))))));-------------; Adding/removing items(defmethod add-menu-items ((menu pop-up-menu) &rest items)  (declare (ignore items))  (call-next-method)  (when (pop-up-menu-auto-update-default menu)    (let* ((default (pop-up-menu-default-item menu))           (items (menu-items menu)))      (when items        (when nil          (dolist (item items)            (when (menu-item-check-mark item)              (set-menu-item-check-mark item nil))))        (cond ((and default (neq default 0))               (set-pop-up-menu-default-item menu 0)               (set-pop-up-menu-default-item menu default))              (t (set-pop-up-menu-default-item menu 1)))))))(defmethod add-menu-items :after ((menu pop-up-menu) &rest items)  ; fix this mess or nuke it and do in main method  ;  nb changing the font of a menu on the fly wont do item style today  (let ((style-num (lsh (logand (view-font-codes menu) #xffff) -8)))    (when (neq style-num #.(cdr (assq :plain *style-alist*)))      (let ((style (inverse-style-arg style-num)))        (dolist (i items)          (when (not (menu-item-style i))            (set-menu-item-style i style))))))  (setf (pop-up-menu-cached-title menu) nil))(defmethod remove-menu-items :after ((menu pop-up-menu) &rest ignore)  (declare (ignore ignore))  (setf (pop-up-menu-cached-title menu) nil)  ;(setf (pop-up-menu-default-item menu) 0) ; nah, use around method below  ); This prevents the default item from becoming larger than the; number of items in the menu. It also keeps the default-item; constant even if its position changes.(defmethod remove-menu-items :around ((menu pop-up-menu) &rest items)  (declare (ignore items))  (let* ((default-item-number (pop-up-menu-default-item menu))         (default-item (unless (eql default-item-number 0)                         (nth (1- default-item-number) (menu-items menu)))))    (unwind-protect      (call-next-method)      (when default-item        (let ((index (position default-item (menu-items menu))))          (setf (pop-up-menu-default-item menu)                (if index (1+ index) 1)))))));---------------; Selection(defmethod selected-item ((menu pop-up-menu))  (nth (1- (pop-up-menu-default-item menu)) (menu-items menu)));Update the menu's items then displays the pop-menu.  Default-item is the;item which will come up selected  when the menu is displayed.(defmethod menu-select ((menu pop-up-menu) num                        &aux selection                        selected-menu                        selected-menu-item                        (a-rect (pop-up-menu-rect menu))                        (pos (with-focused-view (view-container menu)                               (%local-to-global                                 (wptr menu)                                (rref a-rect :rect.topleft)))))  (declare (ignore num))  (menu-update menu)  (multiple-value-bind (ff ms)(view-font-codes menu)  (let* ((handle (menu-handle menu))         (cached-title (pop-up-menu-cached-title menu))         (items (menu-items menu))         (orig (if items (menu-item-title (car items))))         (font (ash ff -16))         (font-size (logand ms #xffff))         (sysfont (#_LMGetSysFontFam))         (sys-size (#_LMGetSysFontSize))         (same-p  (and (= font sysfont)                       (or (eq sys-size font-size)                           (and (zerop sys-size)                                (eq font-size 12))))))     (when (and (not cached-title) items)      (setq cached-title (adjusted-menu-item-title menu)))    (unwind-protect      (progn        (when cached-title (set-menu-item-title (car items) cached-title))        (unless same-p          (#_LMSetSysFontFam font)          (#_LMSetSysFontSize font-size)          (#_LMSetLastSPExtra -1))        (setq selection (#_PopUpMenuSelect                         :ptr handle                         :word (+ (point-v pos) (menu-display-v-offset menu))                         :word (+ (point-h pos) (menu-display-h-offset menu))                         :word (or (pop-up-menu-default-item menu) 0)                         :long)              ;we get the selected menu in case you want to break the rules              ;and use heirarchical menus in a pop-up menu              selected-menu (menu-object (ash (logand #xFFFF0000 selection) -16))              selected-menu-item (logand #x0000FFFF selection)))      (unless same-p          (#_LMSetSysFontFam sysfont)          (#_LMSetSysFontSize sys-size)          (#_LMSetLastSPExtra -1))                (when cached-title        (set-menu-item-title (car items) orig)        (setf (pop-up-menu-cached-title menu) cached-title)))    (when (typep menu 'pull-down-menu) ; gag-puke      (#_InvertRect :ptr (pop-up-menu-rect menu)))    (unless (eq selected-menu-item 0)      (let* ((items (menu-items selected-menu))             (update (pop-up-menu-auto-update-default menu)))        (when update          (set-pop-up-menu-default-item menu                (if (eq selected-menu menu)                  selected-menu-item                  (let ((1st-level-submenu selected-menu))                    (loop                      (let ((owner (menu-owner 1st-level-submenu)))                        (if (eq owner menu)                          (return (1+ (position 1st-level-submenu (menu-items menu)))))                        (if (null owner)                          (return (pop-up-menu-default-item menu)))                        (setq 1st-level-submenu owner)))))))        (with-event-processing-enabled           (when update (event-dispatch))  ; let it be drawn                    (menu-item-action           (nth (- selected-menu-item 1) items))))))))  ;---------; Install/deinstall menu; dont lose the default item(defmethod menu-install ((menu pop-up-menu))  "Creates the actual Macintosh menu with all of the menu's current items."  (let* ((menu-items (menu-items menu))         (default (pop-up-menu-default-item menu)))    (apply #'remove-menu-items menu menu-items)    (init-menu-id menu)    (with-pstrs ((menu-title (menu-title menu)))      (let ((menu-handle (#_NewMenu :word (slot-value menu 'menu-id)                          :ptr menu-title                          :ptr)))        (#_InsertMenu :ptr menu-handle                     :word -1)        (setf (slot-value menu 'menu-handle) menu-handle)))    (let* ((colors (part-color-list menu)))      (loop        (unless colors (return))        (set-part-color menu (pop colors) (pop colors))))    (apply #'add-menu-items menu menu-items)    (when (and default (neq 0 default))      (set-pop-up-menu-default-item menu default)))); need this for kanji menu items (defmethod menu-install :after ((menu pop-up-menu))  ; Need to make extended string titles appear in some extended script  ; need to do this even if menu-script is "osaka" - weird  (let* ((menu-script (ff-script (view-font-codes menu)))         (mscript-2byte (two-byte-script-p menu-script))         ;(system-script (#_GetScriptManagerVariable #$smSysScript))         (xstr-script (extended-string-script)))    (when (or (and xstr-script) mscript-2byte)  ; (neq xstr-script menu-script))      (let ((the-script (if mscript-2byte  menu-script xstr-script)))        (dolist (item (menu-items menu))          (let ((title (menu-item-title item)))            (when (or mscript-2byte                      (and (extended-string-p title)                           (real-xstring-p title)))  ; stuff I don't understand              (set-command-key item (code-char #x1c))  ; backarrrow              (unless (eq 0 the-script)                (set-menu-item-icon-num item the-script)))))))))(defmethod menu-deinstall ((menu pop-up-menu))  (let* ((*menubar-frozen* t))    (call-next-method)))(defmethod remove-view-from-window ((menu pop-up-menu))  (menu-deinstall menu)  (call-next-method)  (without-interrupts   (dispose-record (pop-up-menu-rect menu) :rect)   (setf (pop-up-menu-rect menu) nil)   (dispose-record (pop-up-menu-title-rect menu) :rect)   (setf (pop-up-menu-title-rect menu) nil)));;;;;;;;;;;;;;;;;;;;; action-pop-up-menu;;;; An action-pop-up-menu should have a separator as the second item;;; the menu will pop up over the separator, so a quick click doesn't;; cause anything to happen.(defclass action-pop-up-menu (pop-up-menu)  ())(defmethod view-click-event-handler :before ((menu action-pop-up-menu) where)  (declare (ignore where))  (set-pop-up-menu-default-item menu 2))(defmethod view-click-event-handler :after ((menu action-pop-up-menu) where)  (declare (ignore where))  (set-pop-up-menu-default-item menu 1));;;;;;;;;;;;;;;;;;;;; pull-down-menu;;;; omits the triangle and outline. No default(defclass pull-down-menu (pop-up-menu)  ((:crescent :initarg :crescent :initform nil :reader crescent))  (:default-initargs    :auto-update-default nil    :default-item 0))(defmethod menu-display-v-offset ((menu pull-down-menu))  (1- (point-v (view-size menu))))(defun pull-down-menu-p (menu)  (typep menu 'pull-down-menu))(defmethod view-click-event-handler ((menu pull-down-menu) where)  (declare (ignore where))  (with-focused-view (view-container menu)  ; << focus she said    (#_InvertRect :ptr (pop-up-menu-rect menu))    (menu-select menu 0)))(defmethod point-in-click-region-p ((menu pull-down-menu) where)  ; in this case it can be anyplace  (view-contains-point-p menu where))  ;;;;;;;;;;;;;;;;;;;;; typein-menu ;;;; its items should be of type typein-menu-item(defclass typein-menu (view)  ((menu :initform nil :accessor typein-menu-menu)   (menu-position :initarg :menu-position :initform :right :reader typein-menu-menu-position)    (editable-text :initform nil                  :accessor typein-editable-text))  (:default-initargs    :menu-class 'typein-menu-menu    :view-subviews nil    :editable-text-class 'editable-text-dialog-item))(defmethod menu-disable ((menu typein-menu))  (let ((mm (typein-menu-menu menu)))    (when (menu-enabled-p mm)      (menu-disable mm)      (dialog-item-disable (typein-editable-text menu))      (invalidate-view menu))))  ; get the title if any(defmethod menu-enable ((menu typein-menu))  (let ((mm (typein-menu-menu menu)))    (unless (menu-enabled-p mm)      (menu-enable mm)      (dialog-item-enable (typein-editable-text menu))      (invalidate-view menu))))(defclass typein-menu-menu (pop-up-menu)()  (:default-initargs    ;:auto-update-default nil    :item-display ""    :default-item 0))(defmethod initialize-instance :after ((view typein-menu-menu) &rest initargs &key &allow-other-keys)  (declare (ignore initargs)));---------(defmethod add-menu-items ((menu typein-menu-menu) &rest items)  (let* ((second (second items))         (typein-p (and second (string= (menu-item-title second) "-"))))    (if (not typein-p)      (apply #'call-next-method             menu             (make-instance 'typein-menu-item :menu-item-title "None")             (make-instance 'menu-item :menu-item-title "-")             items)      (call-next-method))))(defmethod menu-display-v-offset ((menu typein-menu-menu))  (case (typein-menu-menu-position (view-container menu))    (:left 2) ; line up with title & text, doesn't cover the control (could erase it oneself)    (t 2)))   ; maybe we will; do we really want these dudes to have titles?(defmethod size-rectangles ((menu typein-menu-menu))  (let ((title (menu-title menu)))    (if (eq (length title) 0)      (call-next-method)      (let* ((my-pos (view-position menu))             (my-size (view-size menu)))        (when (and my-pos my-size)          (multiple-value-bind (ff ms)(view-font-codes menu)            (setq my-size (add-points my-size #@(-1 -1)))            (let* ((menu-rect (or (pop-up-menu-rect menu)                                  (setf (pop-up-menu-rect menu) (make-record :rect))))                   (title-rect (or (pop-up-menu-title-rect menu)                                   (setf (pop-up-menu-title-rect menu)                                         (make-record :rect))))                   (title-width (+ 8 (font-codes-string-width title ff ms))))              (rset menu-rect :rect.topleft my-pos)              (rset menu-rect :rect.bottomright (add-points my-pos my-size))              (rset title-rect :rect.topleft (make-point 0 (+ (point-v my-pos) 2)))              (rset title-rect :rect.bottomright (make-point title-width                                                             (+ (point-v my-size)                                                                (point-v my-pos)                                                                -1))))))))))(defmethod menu-select ((menu typein-menu-menu) num)  (declare (ignore num))  (let ((num (pop-up-menu-default-item menu)))    (if (and num (> num 1))      (call-next-method)            (let* ((c (view-container menu))             (pos (typein-menu-menu-position c))             (view-pos (view-position menu))             (w (- (point-h (view-size menu)) 2))             (tl view-pos)             (br (make-point (point-h (view-size c)) 1))             t-pos t-w)        (when (eq pos :left)          (let ((text (typein-editable-text c)))            (setq t-pos (subtract-points (view-position text) #@(2 2)))            (setq t-w (+  (point-h (view-size text)) 3))            (setq tl #@(0 0))))        (rlet ((rect :rect :topleft tl :bottomright br))          ; erase top edge which is not obscured by the menu contents          (#_eraserect rect)          (call-next-method)          ; restore top edge          (if (menu-enabled-p menu)            (progn                              (#_moveto :long view-pos)              (#_line :word w :word 0)              (when (eq pos :left)                (#_moveto :long t-pos)                (#_line :word t-w :word 0)))            (invalidate-corners c tl br)))))))(defmethod initialize-instance ((view typein-menu) &rest initargs                                &key view-size                                view-position                                menu-class                                menu-position                                menu-items                                menu-title                                view-font                                item-display                                (draw-outline -2)                                (dialog-item-text "")                                editable-text-class)  (declare (dynamic-extent initargs)(ignore menu-position menu-items menu-title item-display))  (apply #'call-next-method view          :view-size view-size    ; make default size&pos work right         :view-position view-position         initargs)  (let ((menu (apply #'make-instance menu-class                                    :view-container view                     ;:dialog-item-text nil ; ??                     initargs)))    (setf (typein-menu-menu view) menu)        (let* ((edit (make-instance editable-text-class                  :view-container view                                    :draw-outline draw-outline                  (if view-font :view-font :ignore) view-font                  ;:margin  (max (nth-value 2 (font-codes-info ff ms)) 6)                  :dialog-item-text dialog-item-text                  :allow-returns nil :allow-tabs nil)))      (setf (typein-editable-text view) edit))    (when view-size (view-size-parts view))))(defmethod view-default-size ((view typein-menu))  (multiple-value-bind (ff ms) (view-font-codes view)    (let ((text (typein-editable-text view))          (menu (typein-menu-menu view)))      (if (and text menu)        (let* ((size (or (view-size text) (view-default-size text)))               (h (max 100 (point-h size)))               (title (menu-title menu))               (title-width (if (eq 0 (length title)) 0 (font-codes-string-width title ff ms))))          (make-point (+ h title-width 28) (+ 4 (point-v size))))))))(defmethod view-size-parts ((view typein-menu))    (let* ((size (view-size view))         (size-v (point-v size))         (size-h (point-h size))         (menu (typein-menu-menu view))         (text (typein-editable-text view))         (title (menu-item-title menu))         (title-width 0))    (multiple-value-bind (ff ms)(view-font-codes view)      (when (not (eql 0 (length title)))                (setq title-width (+ 8 (font-codes-string-width title ff ms))))      (let* ()              (set-view-size menu (make-point (+ 22 0)  size-v))        (set-view-size text (make-point (- size-h (+ 28 title-width)) (- size-v 4)))        (case (typein-menu-menu-position view)          (:left (set-view-position menu (make-point title-width 0))                 (set-view-position text (make-point (+ 26 title-width ) 2)))          (t            (set-view-position menu (make-point (+  size-h -22) 0))           (set-view-position text (make-point (+ 2 title-width)  2))))))))(defmethod set-default-size-and-position ((view typein-menu) &optional container)  (declare (ignore container))  (call-next-method)  (view-size-parts view))    ;-----------(defmethod install-view-in-window ((menu typein-menu) dialog &aux ok)    (declare (ignore dialog))  (without-interrupts   (unwind-protect     (let ((container (view-container menu)))       (set-default-size-and-position menu container)       (setq ok t))     (unless ok       (set-view-container menu nil))))  (call-next-method)); do we want to  deal with vertical changes as well? naah(defmethod set-view-size ((view typein-menu) h &optional v)  (declare (ignore h v))  (let ((menu (typein-menu-menu view)))    (setf (pop-up-menu-cached-title menu) nil)    (call-next-method)    (view-size-parts view))  (view-size view))(defmethod menu-display-h-offset ((menu typein-menu-menu))  (case (typein-menu-menu-position (view-container menu))    ((:right :left)      1)    (t  ; this we probably won't ever use          (let* ((text-size (point-h (view-size (typein-editable-text                                             (view-container menu))))))              (- -5 text-size)))))(defun max-menu-width (menu)  (multiple-value-bind (ff ms)(view-font-codes menu)    ;(setq ff (logand ff #Xffff0000))    (let* ((max 0))      (dolist (m (menu-items menu) max)        (when (> (setq m (font-codes-string-width (menu-item-title m)                                                  ff ms))                 max)          (setq max m))))))    ; vanilla menu-item action functions do not take an argument!(defclass typein-menu-item (menu-item) ())(defmethod menu-item-action ((item typein-menu-item))  (let ((action (menu-item-action-function item)))        (let* ((menu (menu-item-owner item))           (ti (typein-editable-text (view-container menu)))           (new-text (if (and (eq 1 (pop-up-menu-default-item menu))                              (string= "None" (menu-item-title item)))                       ""                        (menu-item-title item))))      (when (not (string= (dialog-item-text ti)                          new-text)) ; prevents flashies        (set-dialog-item-text ti new-text))      (let ((items (menu-items menu)))        (dolist (i items)          (when (menu-item-check-mark i)            (set-pop-up-item-check-mark i nil)            (return))))      (set-pop-up-item-check-mark item t))    (if action (funcall action item))))(defun set-pop-up-item-check-mark (item mark)  (let ((menu (menu-item-owner item)))    (when (and menu (eq mark t)               (neq (ash (view-font-codes menu) -16)                    ;; (#_LMGetsysfontfam) ; you really mean is it chicago                    #.(ash (font-codes '("chicago")) -16)))      (setq mark #\dot)) ; or #\altCheckMark    (set-menu-item-check-mark item mark)))  (defmethod view-click-event-handler ((menu typein-menu-menu) where)  (declare (ignore where))    (let* ((ti (typein-editable-text (view-container menu)))         (items (menu-items menu))         (text-p (not (= 0 (dialog-item-text-length ti)))))    (when (not items)      (add-menu-items menu)      (setq items (menu-items menu)))    (if text-p      (let ((str (dialog-item-text ti)))        (unless          (let ((n 1))            (dolist (item (menu-items menu) nil)              (when (string-equal str (menu-item-title item))                (set-pop-up-menu-default-item menu n)                (return t))              (setq n (1+ n))))          (setf (pop-up-menu-cached-title menu) nil)          (set-menu-item-title (car items) str)          (set-pop-up-menu-default-item menu 1)))      (progn        (when (not (string= (menu-item-title (car items)) "None"))          (setf (pop-up-menu-cached-title menu) nil)                    (set-menu-item-title (car items) "None"))        (set-pop-up-menu-default-item menu 1)))    (with-focused-view (view-container menu)      (call-next-method))            (when (dialog-item-enabled-p ti) ; let it be typeable always - gratuitous change - forget it      (set-current-key-handler (view-window menu) ti))));----------; Menu body width(defmethod menu-body-width ((menu pop-up-menu))  (let* ((ti-rect (pop-up-menu-title-rect menu))         (ti-width (- (rref ti-rect rect.right) (rref ti-rect rect.left))))    (- (point-h (view-size menu)) ti-width)))(defmethod menu-body-width ((menu typein-menu-menu))  (let* ((ti-rect (pop-up-menu-title-rect menu))         (ti-width (- (rref ti-rect rect.right) (rref ti-rect rect.left))))    (- (point-h (view-size (view-container menu))) ti-width)));--------; Adjusted menu-item title(defmethod adjusted-menu-item-title ((menu pop-up-menu))  ; gag  (let ((items (menu-items menu)))    (when  items      (multiple-value-bind (ff ms) (view-font-codes menu)        ;(setq ff (logand ff #xffff0000))        (let* ((w (nth-value 2 (font-codes-info ff ms)))               (max (+ w 12 (max-menu-width menu)))               (width (menu-body-width menu)))          ;(print (list max width))          (when (< max width)            (setq max (+ w 13 (font-codes-string-width (menu-item-title (car items)) ff ms)))            (let* ((ss (font-codes-string-width " " ff ms))                   (first (car items)))                         (%str-cat (menu-item-title first)                        (make-array (ceiling (- width max) ss)                                    :element-type 'base-character                                    :initial-element #\space)))))))))(defmethod adjusted-menu-item-title ((menu pull-down-menu))  (declare (ignore menu)))(defmethod adjusted-menu-item-title ((menu typein-menu-menu))  (case (typein-menu-menu-position (view-container menu))    (:right nil)    (t (call-next-method))));-------(provide 'pop-up-menu)#|;------------------------------------------;;;; Test code;;; a "menubar" in a dialog(defclass my-menubar (inspector::bottom-line-mixin view) ()); This draws the cool little black crescent-shaped fillet in the ; upper-left corner of the pseudo-menubar.;(defmethod view-draw-contents ((view my-menubar))  (call-next-method)  (#_moveto 0 0)  (dolist (length '(3 1 0 0))    (#_line length 0)    (#_move (- length) 1)))(defmethod view-default-size ((view my-menubar))  (let ((container (view-container view)))            (when container             (make-point (point-h (view-size container))                  (+ (view-font-line-height view) 4)))))(defmethod install-view-in-window ((view my-menubar) w)  (declare (ignore w))  (multiple-value-bind (ff ms)(view-font-codes view)    (let ((container (view-container view)))      (when ff        (do-subviews (sub view)          (set-view-font-codes sub ff ms)))      ; sets slots      (set-default-size-and-position view container)      (call-next-method)      (invalidate-view view))))(defvar pop-up)(defvar pop-up-2)(defvar typein-right)(defvar typein-left)(defvar pull-down)(defvar my-dial)(defun test ()  (setq pop-up        (make-instance 'pop-up-menu          :menu-title "A pop-up-menu"          :view-font '("geneva" 10 :plain) ;'("Osaka" 10 :SRCOR :PLAIN (:COLOR-INDEX 0))          :view-position #@(20 25)          :highlight-title t          :menu-items          (list           (make-instance 'menu-item             :menu-item-title "item one"             :menu-item-action #'(lambda () (print 1)))           (make-instance 'menu-item             :menu-item-title "item two"             :menu-item-action #'(lambda () (print 2)))           (make-instance 'menu-item             :menu-item-title "item three"             :menu-item-action #'(lambda () (print 3)))           (make-instance 'menu-item             :menu-item-title "item fourteen"             :menu-item-action #'(lambda () (print 14))))))    (setq pop-up-2        (make-instance 'pop-up-menu          :item-display "A pop-up-menu"          :view-position #@(20 55)          :view-font '("Geneva" 9)          :menu-items          (list           (make-instance 'menu-item             :menu-item-title "item one"             :menu-item-action #'(lambda () (print 1)))           (make-instance 'menu-item             :menu-item-title "item two"             :menu-item-action #'(lambda () (print 2)))           (make-instance 'menu-item             :menu-item-title "item three"             :menu-item-action #'(lambda () (print 3)))           (make-instance 'menu-item             :menu-item-title "item fourteen"             :menu-item-action #'(lambda () (print 14))))))    (setq typein-right        (make-instance 'typein-menu          :view-position #@(20 80)          :menu-title "A type-in (right) menu"          :menu-position :right  ; also try :left          :menu-items          (list (make-instance 'typein-menu-item                                  :menu-item-title "elephant"                  :menu-item-action #'(lambda (item)(declare (ignore item))(print 'babar)))                (make-instance 'typein-menu-item                                  :menu-item-title "peanut soup"                  :menu-item-action #'(lambda (item)(declare (ignore item))(print 'babar))))))  (setq typein-left        (make-instance 'typein-menu          :menu-title "A type-in (left) menu"          :view-position #@(20 115)          :menu-position :left          :view-font '("geneva" 9)  ; try this          :menu-items          (list (make-instance 'typein-menu-item                                  :menu-item-title "elephant"                  :menu-item-action #'(lambda (item)(declare (ignore item))(print 'babar)))                (make-instance 'typein-menu-item                                  :menu-item-title "peanut soup"                  :menu-item-action #'(lambda (item)(declare (ignore item))(print 'babar))))))  (let* ((bar (make-instance 'my-menubar               ; :view-font '("geneva" 10)  ; try this               :view-subviews                (list                  (make-instance 'pull-down-menu                   :item-display "Commands"                   :view-position #@(1 1)                   :menu-items                   (list (make-instance 'menu-item                           :menu-item-title "Eat it"                           :menu-item-action #'(lambda ()(print 'yum!)))                         (make-instance 'menu-item                           :menu-item-title "Inspect it"                           :menu-item-action #'(lambda ()(print 'hmm!)))                         (make-instance 'menu-item                           :menu-item-title "Send it to Mom"                           :menu-item-action #'(lambda ()(print 'mom!)))))))))    (setq my-dial (make-instance 'dialog   :color-p nil                  :view-size #@(300 210)                  :window-title "Pop-up Menu Test"                  :view-subviews (list bar pop-up pop-up-2                                        typein-right typein-left                                       )))))(test)        ;; try me!|##|	Change History (most recent last):	1	2/17/93	straz	added to Leibniz	2	2/17/93	straz	tiny triangles, editable-text inherits font, dialog-item-enable/disable	3	2/18/93	straz	support icons	4	3/01/93	straz	fold in Alice's changes	5	7/16/93	straz	fix view-default-size for typein-menu|# ;(do not edit past this line!!);;;    2   4/06/94  bill         1.8d319;;;    3   4/28/94  bill         1.8d355;;;    4   8/16/94  ows          1.9d045