; -*- Mode: Lisp; Package: CCL; -*-; 11/27/97 akh make-eql-combined-method - fix when sub-dispatch? is true(in-package :ccl)(let ((*warn-if-redefine* nil)      (*warn-if-redefine-kernel* nil))(defun make-eql-combined-method (eql-methods methods cpls gf argnum sub-dispatch? &optional                                             (method-combination *standard-method-combination*))  (let ((eql-ms (copy-list eql-methods))        (precedence-list (%gf-precedence-list (combined-method-gf gf)))        (standard-mc? (eq method-combination *standard-method-combination*))        (real-gf (combined-method-gf gf))        eql-method-alist        (can-use-eq? t))    (unless sub-dispatch?      (setq methods (sort-methods methods cpls precedence-list)))    (while eql-ms      (let ((eql-element (cadr (nth argnum (%method-specializers (car eql-ms)))))            (this-element-methods eql-ms)            cell last-cell)        (if (or (and (numberp eql-element) (not (fixnump eql-element)))                (macptrp eql-element))          (setq can-use-eq? nil))        (setf eql-ms (%cdr eql-ms)              (%cdr this-element-methods) nil              cell eql-ms)        (while cell          (if (eql eql-element                     (cadr (nth argnum (%method-specializers (car cell)))))            (let ((cell-save cell))              (if last-cell                (setf (%cdr last-cell) (cdr cell))                (setq eql-ms (cdr eql-ms)))              (setf cell (cdr cell)                    (%cdr cell-save) this-element-methods                    this-element-methods cell-save))            (setq last-cell cell                  cell (cdr cell))))        (let* ((sorted-methods                (sort-methods (nreconc (copy-list this-element-methods)                                       (copy-list methods))                              cpls                              precedence-list))               (method-list (and standard-mc? (compute-method-list sorted-methods))))          (when (or (not standard-mc?)                    sub-dispatch?  ;; <<                    (memq method-list this-element-methods)                    (and (consp method-list)                         (labels ((member-anywhere (tem mlist)                                    (member tem mlist                                            :test #'(lambda (tem el)                                                      (if (listp el)                                                        (member-anywhere tem el)                                                        (member el tem))))))                           (member-anywhere this-element-methods method-list))))            ; Do EQL comparison only if the EQL methods can run            ; (e.g. does not come after a primary method that does not call-next-method)            (push (cons eql-element                        (if sub-dispatch?                          (make-n+1th-arg-combined-method                           sorted-methods gf argnum)                          (if standard-mc?                            (make-standard-combined-method sorted-methods nil gf)                            (compute-effective-method-function                             real-gf method-combination sorted-methods))))                  eql-method-alist)))))    ;;eql-method-alist has (element . combined-method) pairs.    ;;for now, we're going to use assq or assoc    (let ((default-method (if sub-dispatch?                            (make-n+1th-arg-combined-method                             methods gf argnum)                            (if standard-mc?                              (make-standard-combined-method methods nil gf t)                              (compute-effective-method-function                               real-gf method-combination methods)))))      (if eql-method-alist        (%cons-combined-method          gf (cons argnum (cons eql-method-alist default-method))         (if can-use-eq?            #'%%assq-combined-method-dcode           #'%%assoc-combined-method-dcode)         t)        default-method)))))