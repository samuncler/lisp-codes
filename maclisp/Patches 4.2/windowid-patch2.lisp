(in-package :ccl);;;  home grown windoids return and work in OS 8.5;;; thanks to Alan Ruttenberg;;; if ccl::*use-old-style-windoids* is nil (the initial value) then if :window-type is one of;;; (:windoid :windoid-with-grow :windoid-with-zoom  :windoid-with-zoom-grow;;;    :windoid-side :windoid-side-with-grow :windoid-side-with-zoom :windoid-side-with-zoom-grow))));;; you will get an OS flavored windoid with a gray scale fatter title bar and other options;;;  specified by the type.;;; If *use-old-style-windoids* is true, then if :window-type is :windoid (the default for ;;;  (make-instance 'windoid ...) you will get the old style MCL home grown windoid with a thin title bar;;; if :window-type is any other windoid type you will get an OS flavored windoid of that type.(defparameter *grow-procids*  (list #$documentProc #$zoomDocProc #$floatGrowProc #$floatZoomGrowProc #$floatSideGrowProc #$floatSideZoomGrowProc))(defvar *use-old-style-windoids* nil)(let ((*warn-if-redefine-kernel* nil)      (*warn-if-redefine* nil))(defparameter *window-type-procid-alist* `((:document . ,#$nogrowdocproc)   (:movable-dialog . ,#$movabledboxproc)   (:document-with-grow . ,#$documentproc)   (:document-with-zoom . ,#$zoomdocproc)   (:document-with-zoom-no-grow . ,#$zoomnogrow)   (:tool . ,#$rdocproc)   (:double-edge-box . ,#$dboxproc)   (:single-edge-box . ,#$plaindbox)   (:shadow-edge-box . ,#$altdboxproc)   ;(:windoid . 32)  ;; huh   (:windoid . ,#$floatProc)   (:windoid-with-grow . ,#$floatGrowProc)   (:windoid-with-zoom . ,#$floatZoomProc)   (:windoid-with-zoom-grow . ,#$floatZoomGrowProc)   (:windoid-side . ,#$floatSideProc)   (:windoid-side-with-grow . ,#$floatSideGrowProc)   (:windoid-side-with-zoom . ,#$floatSideZoomProc)   (:windoid-side-with-zoom-grow . ,#$floatSideZoomGrowProc)))   (defparameter *window-type-foos*   '(member :document :movable-dialog :document-with-grow :document-with-zoom :document-with-zoom-no-grow    :tool :double-edge-box :single-edge-box :shadow-edge-box :windoid    :windoid-with-grow   :windoid-with-zoom   :windoid-with-zoom-grow   :windoid-side   :windoid-side-with-grow   :windoid-side-with-zoom   :windoid-side-with-zoom-grow    ))(defmethod window-make-parts ((window window)                              &key (view-position (view-default-position window))                                   (view-size (view-default-size window))                                   (window-type :document-with-zoom)                                   back-color                                   content-color                                   procid                                   (window-title "Untitled")                                   (close-box-p t)                                   (color-p t)                                   (grow-icon-p nil gip?))  (unless (wptr window)    (if procid (setq gip? nil grow-icon-p nil))    (when gip?      (if grow-icon-p        (cond ((eq window-type :document) (setq window-type :document-with-grow))              ((eq window-type :windoid) (setq window-type :windoid-with-grow))              ((eq window-type :windoid-side)(setq window-type :windoid-side-with-grow))              ((eq window-type :windoid-with-zoom)(setq window-type :windoid-with-zoom-grow))              ((eq window-type :windoid-side-with-zoom)(setq window-type :windoid-side-with-zoom-grow))              ((not (memq  window-type '(:document-with-grow :document-with-zoom                                         :windoid-with-grow :windoid-with-zoom-grow :windoid-side-with-grow                                         :windoid-side-with-zoom-grow)))               (setq gip? nil grow-icon-p nil)))        (cond ((eq window-type :document-with-grow) (setq window-type :document))              ((eq window-type :document-with-zoom) (setq window-type :document-with-zoom-no-grow))              ((eq window-type :windoid-with-grow) (setq window-type :windoid))              ((eq window-type :windoid-side-with-grow)(setq window-type :windoid-side))              ((eq window-type :windoid-side-with-zoom-grow)(setq window-type :windoid-side-with-zoom))              ;; this is wrong?              ((not (memq window-type '(:document :document-with-zoom)))               (setq gip? nil grow-icon-p nil)))))    (let* ((wptr (%new-window (or procid window-type)                              view-position                              view-size                              close-box-p                              nil                              color-p))           (procid (rref wptr windowrecord.refCon)))   ; %new-window leaves it there      (setf (wptr window) wptr)      (set-window-title window window-title)      (setf (slot-value window 'grow-icon-p)            (if gip? grow-icon-p (memq procid  *grow-procids*)))      (when content-color        (set-part-color window :content content-color)        ;(set-part-color window :title-bar *white-color*) doesnt help        )      (when back-color        (setf (slot-value window 'back-color) back-color)  ; <<        (set-back-color window back-color)))))(defvar *use-old-style-windoids* nil)(defmethod initialize-instance ((windoid windoid) &rest initargs &key                                 (window-show t)                                (window-type nil wt?)                                ;(windowdefproc *windoid-wdef-handle*)                                (windowdefproc                                 (if (and window-type (eq window-type :windoid) *use-old-style-windoids*)                                   *windoid-wdef-handle*                                   (#_getresource :WDEF #$kFloatingWindowDefinition)))  ; 124                                )  (declare (dynamic-extent initargs))  (if (and wt? window-type (not (memq window-type '(:windoid :windoid-with-grow                                                    :windoid-with-zoom                                                    :windoid-with-zoom-grow                                                    :windoid-side                                                    :windoid-side-with-grow                                                    :windoid-side-with-zoom                                                    :windoid-side-with-zoom-grow))))    (call-next-method)        (progn      #+ignore      (when wt?        (loop (unless (remf initargs :window-type) (return))))      (apply #'call-next-method windoid :window-show nil initargs)      (let ((wptr (wptr windoid)))        (when wptr                          ; may have failed          (when (and windowdefproc (not (%null-ptr-p windowdefproc)))            (rset wptr windowrecord.windowdefproc windowdefproc))          #+ignore          (when (not (memq window-type '(:windoid-with-grow :windoid-with-zoom-grow :windoid-side-with-grow                                         :windoid-side-with-zoom-grow)))            (setf (slot-value windoid 'grow-icon-p) nil))          (if window-show (window-show windoid)))))))(defun windoid-calc-regions (wptr &aux (rgn (#_NewRgn)))  (rlet ((r :rect))    (copy-record (rref wptr windowrecord.portrect) :rect r)    (let ((foo (rref wptr :windowrecord.portbits.rowbytes)))      (if (minusp foo)   ;; ???             (#_offsetRect          r          (- (rref (rref wptr windowrecord.portbits.baseaddr) :pixmap.bounds.left))         (- (rref (rref wptr windowrecord.portbits.baseaddr) :pixmap.bounds.top)))        (#_offsetRect         r         (- (rref wptr windowrecord.portbits.bounds.left))         (- (rref wptr windowrecord.portbits.bounds.top)))))    ;;Calculate content region    (#_RectRgn (rref wptr windowrecord.contRgn) r)    ;;Calculate Structure Region    (decf (rref r rect.top) (%i+ $windoid-title-bar-height 1))    (decf (rref r rect.left))    (incf (rref r rect.bottom))    (incf (rref r rect.right))    (#_RectRgn (rref wptr windowrecord.strucRgn) r)    ;;Calculate drop shadow    (incf (rref r rect.top) $windoid-shadow-indent)    (incf (rref r rect.left) $windoid-shadow-indent)    (incf (rref r rect.bottom))    (incf (rref r rect.right))    (#_RectRgn rgn r)    (#_UnionRgn (rref wptr windowrecord.strucrgn) rgn (rref wptr windowrecord.strucrgn))    (#_DisposeRgn rgn)))(defmethod view-default-position ((view windoid))  ;; in case the "title" bar is on de side  #@(16 44)))