; -*- Mode: Lisp; Package: CCL; -*-(in-package :ccl)(let ((*warn-if-redefine* nil)      (*warn-if-redefine-kernel* nil))(defun daylight-saving-time-p (hour date month day &optional minute)  "Arguments are in Standard Time   True from the 2AM Standard Time on the first sunday in April   until 1AM Standard Time (2AM Daylight Time) on the last sunday in October"  ;; use minute if want 2aM in april to be different from 2:01 ??  (declare (ignore minute))  (and    (<= 4 month 10)   (let ((first-sunday (rem (+ date (- 6 day)) 7)))     (if (zerop first-sunday) (setq first-sunday 7))     (cond ((= month 4)            (or (> date first-sunday)                (and (= date first-sunday)                     (if (= hour 2) (values t t) (> hour 2)))))           ((= month 10)            (let ((last-sunday (+ first-sunday (* (floor (- 31 first-sunday) 7) 7))))              (or (< date last-sunday)                  (and (= date last-sunday)                       (< hour 1)))))   ; -dds Changed from 2 to 1           (t t)))))(defun encode-universal-time (second minute hour date month year                                     &optional (time-zone (get-time-zone) tz-p)                                     &aux utime)  (if (<= 0 year 99)    (let ((current-year (nth-value 5 (get-decoded-time))))      (setq year (+ year (* 100 (truncate (- current-year 50) 100))))      (if (> (abs (- year current-year)) 50) (setq year (+ year 100)))))  (if (< year 1900)    (error "Universal time is not defined for year: ~s." year))  (rlet ((dt :longDateRec))    (rset dt longDateRec.era 0)    (rset dt longDateRec.second second)    (rset dt longDateRec.minute minute)    (rset dt longDateRec.hour hour)    (rset dt longDateRec.day date)    (rset dt longDateRec.month month)    (rset dt longDateRec.year year)    (setq utime (+ (* 3600 time-zone) $mac-time-offset (encode-long-time dt (not tz-p))))    (when (not tz-p)  ;; there are no internal callers so tz-p true is unlikely      (multiple-value-bind (dst magic-hour)                           (daylight-saving-time-p hour date month                                                    (mod (+ 5 (rref dt longDateRec.dayofweek)) 7)                                                   minute)        (when (and dst (not magic-hour))  ; i.e. after 2AM - want 2am and 3am on magic day to be the SAME          (setq utime (- utime 3600)))))    (when (eql year 2401)      (incf utime *2401-correction*))    utime))(defun univ-daylight-saving-time-p (&optional (univ-time (get-universal-time))                                              (time-zone (get-time-zone)))  (rlet ((dt :longDateRec))    (let ((mac-time (- univ-time $mac-time-offset (* 3600 time-zone))))            (decode-long-time (ash mac-time -16) (logand mac-time #xffff) dt))    (let ((hour  (rref dt longDateRec.hour))          (date  (rref dt longDateRec.day))          (month (rref dt longDateRec.month))          (minute (rref dt longDateRec.minute))          (day   (mod (+ (rref dt longDateRec.dayofweek) 5) 7)))      (multiple-value-bind (dst-p magic-hour-p)                           (daylight-saving-time-p hour date month day minute)        (declare (ignore magic-hour-p))        dst-p        ;(if magic-hour-p nil dst-p)        ))))(defun decode-universal-time (univ-time                              &optional (time-zone (get-time-zone) tz-p))  (declare (ignore tz-p))    (let ((dst-p (univ-daylight-saving-time-p univ-time time-zone)))    (rlet ((dt :longDateRec))      (let ((mac-time (- univ-time $mac-time-offset (* 3600 time-zone))))        (if dst-p (setq mac-time (+ mac-time 3600)))  ; weird        (decode-long-time (ash mac-time -16) (logand mac-time #xffff) dt)        (let ((hour  (rref dt longDateRec.hour))              (date  (rref dt longDateRec.day))              (month (rref dt longDateRec.month))              (day   (mod (+ (rref dt longDateRec.dayofweek) 5) 7)))          (values            (rref dt longDateRec.second)           (rref dt longDateRec.minute)           hour           date           month           (rref dt longDateRec.year)           day           dst-p           time-zone)))))))