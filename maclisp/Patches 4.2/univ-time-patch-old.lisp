; -*- Mode: Lisp; Package: CCL; -*-(in-package :ccl)(let ((*warn-if-redefine-kernel* nil)      (*warn-if-redefine* nil))(defun encode-universal-time (second minute hour date month year                                     &optional (time-zone (get-time-zone) tz-p)                                     &aux utime)  (if (<= 0 year 99)    (let ((current-year (nth-value 5 (get-decoded-time))))      (setq year (+ year (* 100 (truncate (- current-year 50) 100))))      (if (> (abs (- year current-year)) 50) (setq year (+ year 100)))))  (if (< year 1900)    (error "Universal time is not defined for year: ~s." year))  (rlet ((dt :longDateRec))    (rset dt longDateRec.era 0)    (rset dt longDateRec.second second)    (rset dt longDateRec.minute minute)    (rset dt longDateRec.hour hour)    (rset dt longDateRec.day date)    (rset dt longDateRec.month month)    (rset dt longDateRec.year year)    (setq utime (+ (* 3600 time-zone) $mac-time-offset (encode-long-time dt (not tz-p))))    (if (and (not tz-p) (daylight-saving-time-p hour date month (mod (+ 5 (rref dt longDateRec.dayofweek)) 7)))      (setq utime (- utime 3600)))    (when (eql year 2401)      (incf utime *2401-correction*))    utime)))