; -*- Mode: Lisp; Package: CCL; -*-(in-package :ccl); 11/28/97 akh   fix shared-initialize (and thus initialize-instance also) to check initargs if called;;               outsize the scope of make-instance or reinitialize-instance(eval-when (:compile-toplevel :load-toplevel :execute)  (defvar *instance-being-initialized* nil))(let ((*warn-if-redefine* nil)      (*warn-if-redefine-kernel* nil))(defun %make-std-instance (class initargs)  (setq initargs (default-initargs class initargs))  (when initargs    (apply #'check-initargs           nil class initargs t           #'initialize-instance #'allocate-instance #'shared-initialize           (aux-init-functions class)))  (let ((instance (apply #'allocate-instance class initargs)))    ;(dbg 445)    (let ((*instance-being-initialized* instance))      (apply #'initialize-instance instance initargs)      instance)))(defmethod reinitialize-instance ((instance standard-object) &rest initargs)  (declare (dynamic-extent initargs))  (when initargs    (check-initargs      instance nil initargs t #'reinitialize-instance #'shared-initialize))  (let ((*instance-being-initialized* instance))    (apply 'shared-initialize instance nil initargs)))(defmethod shared-initialize ((instance standard-object) slot-names &rest initargs)  (declare (dynamic-extent initargs))  (when (and initargs (not (eq instance *instance-being-initialized*)))    (let ((class (class-of instance)))      (apply #'check-initargs instance class  initargs t #'shared-initialize              (aux-init-functions class)             )))  (%shared-initialize instance slot-names initargs)))