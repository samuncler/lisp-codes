; -*- Mode: Lisp; Package: CCL; -*-(in-package :ccl);; some array conditions(let ((*warn-if-redefine-kernel* nil)      (*warn-if-redefine* nil))(define-condition array-error (simple-error))(define-condition array-subscript-out-of-bounds (array-error))  ;; <<(define-condition array-wrong-number-of-subscripts (array-error))(define-condition array-element-type-mismatch (array-error))(defun condition-arg (thing args type)  (cond ((condition-p thing) (if args (%err-disp $xtminps) thing))        ((symbolp thing) (apply #'make-condition thing args))        ;; god awful kludge cause I'm confused about path from kernel to %error - it varies bet 68K and PPC        ;; so this is a little bit ass backwards, bass ackwards        ((and (eq type 'simple-error)              (stringp thing)              (cond ((string= thing (%rsc-string $xarroob))                     (make-condition 'array-subscript-out-of-bounds :format-string thing :format-arguments args))                    ((string= thing (%rsc-string $xnotelt))                     (make-condition 'array-element-type-mismatch :format-string thing :format-arguments args))                     ((string= thing (%rsc-string $XNDIMS))                     (make-condition 'array-wrong-number-of-subscripts :format-string thing :format-arguments args)))));;<<        (t (make-condition type :format-string thing :format-arguments args)))))