#[WM-DOCUMENT ( :TOP-LEVEL-WINDOWS (#[LEXICAL-CHARACTER-SET-WINDOW ( :WINDOW-CONTENTS "character-sort-orderabcdefghijklmnopqrstuvwxyz'-_0123456789sequence-sort-ordercharacter-subsetsVowel	{aeiou}Consonant	{bcdfghjklmnpqrstvwxyz}" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[SURFACE-CHARACTER-SET-WINDOW ( :WINDOW-CONTENTS "character-sort-orderabcdefghijklmnopqrstuvwxyz'-_0123456789sequence-sort-order" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[FEATURE-DOMAINS-WINDOW ( :WINDOW-CONTENTS "Cat	(Numeral         Art         Onomat         Interj         Conjunct         Prep         Adv         Adj         V         Pron         N         Det)AForm	(Superlative         Comparative         Absolute)Tense	(Past         Present)Person	(2nd         1st)VForm	(Present         S_Form         ED_Participle         ING_Participle         Past         Base)Homograph	(ONE                 TWO)Function	(Aux                 Modal)PCat	(NonPersonal         Personal)PForm	(P_Gen         P_Indep         P_Determ         Refl_PL         Refl_SG         P_Obj         P_Subj)Gen	(F         M)Pers	(3rd         2nd_Archaic         2nd         1st)Unusual	(Form)ICat	(Invariable         Onomat         Interj         Conjunct         Preposition         Adv-Suffix         Adv-Stem         Adj-Suffix         Adj-Stem         V-Suffix_to_be         V-Suffix_ModAux         V_Irregular         V-Suffix         V-Stem         V_Regular         P-Suffix         P-Base         N_Irregular         N-Suffix         N_Regular_Variable         Invariable_Suffix         N-Stem         N_Regular_Invariable         Det-Suffix         Det-Base)DCat	(Postdet         Central         Predet)Num	(PL         SG)RIRule	(Onomat         Interj         Conjunct         Preposition         Adv_Periphrasis         Adv_Regular         Adj_Periphrasis         Adj_Regular         V_Treatment_of_E         V_Treatment_of_Y         V_Doubling_of_Consonant         V_Regular         Relative/Interrogative         Possessive         Reflexive         Personal         Unusual_Form         Doubling_of_Consonant         Treatment_of_Y         Addition_of_E         Regular_Plural         Plural_Invariable         Singular_Invariable         Postdet         Central         Predet)IIRule	(Adv_Irregular         Adj_Irregular         Verb_to_be         Modal_Aux         Different_Past/ED_Part/V_Base_Change_7c         Different_Past/ED_Part/V_Base_Change_7b         Different_Past/ED_Part/V_Base_Change_7a         Different_Past/ED_Participle_6E         Different_Past/ED_Participle_6D         Different_Past/ED_Participle_6C         Different_Past/ED_Participle_6B         Different_Past/ED_Participle_6A         ED_Participle_Two_Suffixes_5         Identical_Past/ED_Part/V_Base_Change_4i         Identical_Past/ED_Part/V_Base_Change_4h         Identical_Past/ED_Part/V_Base_Change_4g         Identical_Past/ED_Part/V_Base_Change_4f         Identical_Past/ED_Part/V_Base_Change_4e         Identical_Past/ED_Part/V_Base_Change_4d         Identical_Past/ED_Part/V_Base_Change_4c         Identical_Past/ED_Part/V_Base_Change_4b         Identical_Past/ED_Part/V_Base_Change_4a         Identical_Base/Past/ED_Participle_3         Identical_Past/ED_Participle_2f         Identical_Past/ED_Participle_2e         Identical_Past/ED_Participle_2d         Identical_Past/ED_Participle_2c         Identical_Past/ED_Participle_2b         Identical_Past/ED_Participle_2a         Identical_Past/ED_Participle_1c         Identical_Past/ED_Participle_1b         Identical_Past/ED_Participle_1a         Foreign_Plural         Zero_Plural         Nouns_en_Plural         Mutation         Voicing         Treatment_of_Y         Identical_Base/Past/ED_Participle)WFCat	(ICF-FCF         Hyphen         NCF-Link         FCF         ICF         Unique_Morpheme         NCF         Neoclassical_Compounding         Compound_Other         Compound_Adverbs         Compound_Adjectives         Compound_Verbs         Ad_Hoc_Element         Linking-element         Compound_Nouns         Compounding         Affix         Derivation_Like         Unique         Compound_Like         Unique_Elements         Conversion         Adj_To_Adv         Adj_To_V         Adj_To_N         V_To_Adj         V_To_N         N_To_Adv         N_To_Adj         N_To_V         Adv_To_Adv         Adj_To_Adj         V_To_V         Suffix         Prefix         N_To_N         Derivation         Combining-form_Compounds)link	(Element)RWFRule	(ICF+Link+Adj_To_Adj         N+Link+FCF_To_N         ICF+Link+FCF_To_N         ICF+FCF_To_N         Num+Num         Particle+ING_Part         Particle+Adj         Adv+Adj         Adj+Part         Adj+Adj         V+Adj         V+V         N+Part         N+Adj         Particle+V         Adj+V         Ad_Hoc_Compound_To_N         V+Particle         Particle+N         V+V_To_SG_Invariable         V+N         Pron+N         Adj+N_To_N_SG_Invariable         Adj+N         N+V         N+N_To_N_SG_Invariable         N+N         Adj_To_V         Adj_To_N_PL_Invariable         Adj_To_N_SG_Invariable         Adj_To_N_Regular         V_To_N         N_To_Adj         N_To_V         Adj_Suffixation_To_N_Invariable         Adj_Suffixation         V_Participle         V_ED_Part_Prefixation         V_Suffixation_To_N_Invariable         V_Suffixation         N_Prefixation_To_Treatment_of_Y         Adv_Prefixation         Adv_Suffixation_Particle+Suff         Adj_Prefixation_To_Periphrasis         Adj_Prefixation         V_Prefixation         N_Suffixation_To_Uncount         N_Suffixation_To_Zero_Pl         N_Suffixation_To_Y         N_Suffixation         N_Prefixation         ICF+N_To_N)IWFRule	(Prefix+Unique         Unique+Adj         Unique+N)WFSRule	(Doubling_of_Consonant_2         Mute_Base_Ending         e_deletion_ING_Part         y-i-conversion)ISRule	(e_deletion_2         e_deletion         y_i_change_Past_&_ED_Part         y_ie_change_S_Form         es_S_Form         Doubling_of_Consonant_2         es_Plural         Plural-y-deletion-&-ie-insertion)Manner	(Personal)" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[FEATURE-DEPENDENCIES-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[SPELLING-RULES-WINDOW ( :WINDOW-CONTENTS "(Cat N)	(ISRule Plural-y-deletion-&-ie-insertion)	\"(.*[bcdghklmnprstuvxz])y|(.*qu)y/\\1ie\"	(ICat N_Regular_Variable.N-Suffix)(Num PL)	(ISRule es_Plural)	\"(.*)(sh|s|z|x|ch)\" (ICat N_Regular_Variable)	\"s/es\" (ICat N-Suffix)(Num PL)(Cat V);;;    	(ISRule Doubling_of_Consonant);;;    	\"(.*[{Vowel}])([dglmnr])/\\1\\2\\2\" (ICat V_Regular)(ICat V-Stem)	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ING_Participle)|(ICat V-Suffix)(VForm ED_Participle)	(ISRule Doubling_of_Consonant_2)	\"(.*{Consonant}{Vowel})([dglmnrt])/\\1\\2\\2\" (ICat V_Irregular)(ICat V-Stem)	(ICat V-Suffix)(VForm ING_Participle)	(ISRule es_S_Form)	\"(.*)(sh|s|z|x|ch|o)\" (ICat V_Regular)|(ICat V_Irregular)	\"s/es\" (ICat V-Suffix)(VForm S_Form)	(ISRule y_ie_change_S_Form)	\"(.*[^{Vowel}])y/\\1ie\" (ICat V-Stem)	(ICat V-Suffix)(VForm S_Form)	(ISRule y_i_change_Past_&_ED_Part)	\"(.*[^{Vowel}])y/\\1i\" (ICat V_Regular)(ICat V-Stem)	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);;;     removed can be managed by e deletion;;;    	(ISRule Mute_Base_Ending);;;    	\"(.*)([t|v])e/\\1\\2\" (ICat V-Stem)	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ING_Participle)|(ICat V-Suffix)(VForm ED_Participle) ; after rule 1	(ISRule e_deletion)	\"(.*{Consonant})e/\\1\" (ICat V-Stem)	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ING_Participle)|(ICat V-Suffix)(VForm ED_Participle)	(ISRule e_deletion_2)	\"(.*)([eyo])e/\\1\\2\" (ICat V-Stem)	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);--------------------------------------------------------------------------------------------------------------------------------------------------------------------;Cat N;;;    (WFSRule final-e-deletion-before-vowel-suffix);;;    \"(.*)e/\\1\" (Cat N)(ICat N-Stem)	(WFCat Suffix);;;    ;Cat Adj(WFSRule y-i-conversion)\"(.*)y/\\1i\" (Cat Adj)(ICat Adj-Stem)	(WFCat Suffix);Cat V(WFSRule e_deletion_ING_Part)\"(.*[^aeiou])e/\\1\" (ICat V-Stem)	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ING_Participle)|(ICat V-Suffix)(VForm ED_Participle)(WFSRule Mute_Base_Ending)\"(.*)([t|v])e/\\1\\2\" (ICat V-Stem)	(ICat V-Suffix)(VForm Base)(WFSRule Doubling_of_Consonant_2)\"(.*{Consonant}{Vowel})([dglmnrt])/\\1\\2\\2\" (ICat V_Irregular)(ICat V-Stem)	(ICat V-Suffix)(VForm ING_Participle);;;    (WFSRule es_S_Form);;;    \"(.*)(sh|s|z|x|ch|o)\" (ICat V_Irregular)|(ICat V_Irregular)	\"s/es\" (ICat V-Suffix)(VForm S_Form) ; undo etc." :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[FUNCTIONS-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[INFLECTION-WINDOW ( :TREE-COLLECTION #[WM-TREE-COLLECTION ( :ELEMENTS #(#[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . N)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N_Irregular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N_Regular_Variable|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N);Regular s-Plural (Quirk 1972:172-3);-----------------------------------entry	LU \"void\"	\"computer\" \"computer\" ;  WF biocomputerentry	LU \"void\"	\"friend\" \"friend\" ; WF befriendentry	LU \"void\"	\"hand\" \"hand\" ; WF shorthandentry	LU \"void\"	\"work\" \"work\" ; WF homeworkentry	LU \"void\"	\"problem\" \"problem\" ; WF problematic" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Regular_Plural|)) :MOD2-P T) NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS ";-th+-s and f+s combinations -> standard s-plural rule cf. examples in Quirk 176-7citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N)ISRules\"/es\" (ICat N-Suffix)(Num PL)\"(.*)f/\\1v\"	(Num PL) ; rule f>v\"(.*)fe/\\1v\"	(Num PL) ; rule fe>v;Voicing and -s plural;---------------------;f>ventry	LU \"void\"	\"calf\" \"calf\" \"calv\"entry	LU \"void\"	\"wolf\" \"wolf\" \"wolv\"entry	LU \"void\"	\"life\" \"life\" \"liv\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Voicing|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Stem|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"			(Num SG)\"s\" \"s\" \"es\" \"'s\"	(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Suffix|)) :MOD2-P T) NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"					(Num SG)\"\" \"\" \"a\" \"ae\" \"s\" \"es\" \"en\" \"i\" \"im\" \"x\"	(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Stem|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N)ISRules\"/en\" (ICat N-Suffix)(Num PL)\"(.*child)/\\1r\"	(Num PL) ; eg. grandchildentry	LU \"void\"	\"ox\" \"ox\"entry	LU \"void\"	\"child\" \"child\" \"childr\";mutation + -en endingentry	LU \"void\"	\"brother\" \"brother\" \"brethr\"	ISRules	\"brother/brethr\"	(Num PL)	\"brethr/brother\"	\"en/s\" (Num PL) value" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Nouns_en_Plural|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N); sheep type 4.69entry	LU \"void\"	\"sheep\" \"sheep\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Zero_Plural|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Stem|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N)ISRules\"(.*)a/\\1\"			\"/ae\" (ICat N-Suffix)(Num PL)\"(.*)um/\\1\"			\"/a\" (ICat N-Suffix)(Num PL)\"(.*)us/\\1\"			\"/i\" (ICat N-Suffix)(Num PL) ; exceptions: genus/genera corpus/corpora\"(.*)(ex|ix)/\\1ic\"		\"/es\" (ICat N-Suffix)(Num PL)\"(.*)(i)(s)/\\1e\\3\"		(ICat N-Suffix)(Num PL) ; i-e Mutation\"(.*)on/\\1\"			\"/a\" (ICat N-Suffix)(Num PL)\"(.*)(eau|ieu)/\\1\\2\"		\"/x\" (ICat N-Suffix)(Num PL)\"(kibbutz|cherub|seraph)/\\1\"	\"/im\" (ICat N-Suffix)(Num PL);p. 182, 4.75 FOREIGNentry	LU \"void\"	\"cactus\" \"cactus\" \"cact\" ;p 182entry	LU \"void\"	\"genus\" \"genus\" \"gener\"	ISRules	\"gen/gener\"	\"/a\" (ICat N-Suffix)(Num PL) ; fixes default us/i conversion" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Foreign_Plural|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N)ISRules\"(.*)oo(.*)/\\1ee\\2\" (ICat N-Stem)	(Num PL)\"(.*)ous(.*)/\\1ic\\2\" (ICat N-Stem)	(Num PL)\"(.*)(m)(a)(n)/\\1\\2e\\4\" (ICat N-Stem)	(Num PL);complete according to 'A Gr of Contemp English'entry	LU \"void\"	\"foot\" \"foot\" \"feet\"entry	LU \"void\"	\"tooth\" \"tooth\" \"teeth\"entry	LU \"void\"	\"goose\" \"goose\" \"geese\"entry	LU \"void\"	\"louse\" \"louse\" \"lice\"entry	LU \"void\"	\"mouse\" \"mouse\" \"mice\"entry	LU \"void\"	\"man\" \"man\" \"men\"entry	LU \"void\"	\"woman\" \"woman\" \"women\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Mutation|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N_Regular_Invariable|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem.Invariable)	(ICat Invariable_Suffix)(Num SG)word-forms(ICat N-Stem.Invariable)	(ICat Invariable_Suffix)(Num SG);4.49 Concrete mass nouns: features Num SG,PL may be useful at a later stage (syntax: verb agreement);reclassification of mass nouns can be covered by regular s-plural formationentry	LU \"void\"	\"gold\" \"gold\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Singular_Invariable|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem.Invariable)	(ICat Invariable_Suffix)(Num PL)word-forms(ICat N-Stem.Invariable)	(ICat Invariable_Suffix)(Num PL);4.54 summation pluralsentry	LU \"void\"	\"scissors\" \"scissors\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Plural_Invariable|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"		(VForm Base)\"s\" \"s\" \"es\"	(VForm S_Form)\"ed\" \"ed\"	(VForm Past)\"ing\" \"ing\"	(VForm ING_Participle)\"ed\" \"ed\"	(VForm ED_Participle)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"		(Num SG)\"\" \"\"		(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Invariable_Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat Invariable)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Stem|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . V)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V_Regular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V_Irregular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Stem|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix);3.56 Regular Lexical verbs;-------------------------;like and try treated elsewhereentry	LU \"void\"	\"talk\" \"talk\" ; WF talkativeentry	LU \"void\"	\"walk\" \"walk\" ; WF walk (N)entry	LU \"void\"	\"look\" \"look\"entry	LU \"void\"	\"laugh\" \"laugh\"entry	LU \"void\"	\"enter\" \"enter\"entry	LU \"void\"	\"visit\" \"visit\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |V_Regular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"				(VForm Base)\"s\" \"s\" \"es\" \"\"			(VForm S_Form)\"ed\" \"ed\" \"e\" \"d\" \"t\" \"\"	(VForm Past)\"ing\" \"ing\"			(VForm ING_Participle)\"ed\" \"ed\" \"t\" \"d\" \"en\" \"n\" \"\"	(VForm ED_Participle)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*rn|.*{Vowel}l)\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)ll/\\1l\"		\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value;3.65 CLASS 1 (burn, etc);1aentry	LU \"void\"	\"burn\" \"burn\";;;    entry	LU \"void\";;;    	\"dwell\" \"dwell\" \"dwel\";;;    ;;;    entry	LU \"void\";;;    	\"learn\" \"learn\";;;    ;;;    entry	LU \"void\";;;    	\"smell\" \"smell\" \"smel\";;;    ;;;    entry	LU \"void\";;;    	\"spell\" \"spell\" \"spel\";;;    ;;;    entry	LU \"void\";;;    	\"spill\" \"spill\" \"spil\";;;    ;;;    entry	LU \"void\";;;    	\"spoil\" \"spoil\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Participle_1a|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);former entry-specific spelling rules\"(.*)bet/\\1bett\"	\"/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)bid/\\1bad\"		\"/e\" (ICat V-Suffix)(VForm Past) value\"(.*)bid/\\1bidd\"	\"/en\" (ICat V-Suffix)(VForm ED_Participle) value\"(.*)knit/\\1knitt\"	\"/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)quit/\\1quitt\"	\"/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)quit/\\1quitt\"	(ICat V-Suffix)(VForm ING_Participle) ; exception of global doubling of consonant 2\"(.*)rid/\\1ridd\"	\"/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)shit/\\1shat\"	\"/\" (ICat V-Suffix)(VForm Past) value\"(.*)sweat\"		\"/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)wed/\\1wedd\"	\"/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)wet/\\1wett\"	\"/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value;3.67 CLASS 3 (cut, etc)entry	LU \"void\"	\"bet\" \"bet\" \"bett\";;;    entry	LU \"void\";;;    	\"bid\" \"bid\" \"bidd\" \"bad\";;;    ;;;    entry	LU \"void\";;;    	\"burst\" \"burst\";;;    ;;;    entry	LU \"void\";;;    	\"cast\" \"cast\";;;    ;;;    entry	LU \"void\";;;    	\"cost\" \"cost\";;;    ;;;    entry	LU \"void\";;;    	\"cut\" \"cut\" \"cutt\";;;    ;;;    entry	LU \"void\";;;    	\"hit\" \"hit\" \"hitt\";;;    ;;;    entry	LU \"void\";;;    	\"hurt\" \"hurt\";;;    ;;;    entry	LU \"void\";;;    	\"knit\" \"knit\" \"knitt\";;;    ;;;    entry	LU \"void\";;;    	\"let\" \"let\" \"lett\";;;    ;;;    entry	LU \"void\";;;    	\"put\" \"put\" \"putt\";;;    ;;;    entry	LU \"void\";;;    	\"quit\" \"quit\" \"quitt\";;;    ;;;    entry	LU \"void\";;;    	\"rid\" \"rid\" \"ridd\";;;    ;;;    entry	LU \"void\";;;    	\"set\" \"set\" \"sett\";;;    ;;;    entry	LU \"void\";;;    	\"shed\" \"shed\" \"shedd\";;;    ;;;    entry	LU \"void\";;;    	\"shit\" \"shit\" \"shat\" \"shitt\";;;    ;;;    entry	LU \"void\";;;    	\"shut\" \"shut\" \"shutt\";;;    ;;;    entry	LU \"void\";;;    	\"slit\" \"slit\" \"slitt\";;;    ;;;    entry	LU \"void\";;;    	\"split\" \"split\" \"splitt\";;;    ;;;    entry	LU \"void\";;;    	\"spread\" \"spread\";;;    ;;;    entry	LU \"void\";;;    	\"sweat\" \"sweat\";;;    ;;;    entry	LU \"void\";;;    	\"thrust\" \"thrust\";;;    ;;;    entry	LU \"void\";;;    	\"wed\" \"wed\" \"wedd\";;;    ;;;    entry	LU \"void\";;;    	\"wet\" \"wet\" \"wett\";;;    " :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Base/Past/ED_Participle_3|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)(ee)([dt])/\\1e\\3\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) ; general rule for bleed, breed, feed, etc.\"(.*)hold/\\1held\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)lead/\\1led\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)read/\\1read\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)sped/\\1speed\"	\"/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value;3.68 CLASS 4 (meet, etc.);4a;;;    entry	LU \"void\";;;    	\"bleed\" \"bleed\" \"bled\";;;    ;;;    entry	LU \"void\";;;    	\"breed\" \"breed\" \"bred\";;;    ;;;    entry	LU \"void\";;;    	\"feed\" \"feed\" \"fed\";;;    ;;;    entry	LU \"void\";;;    	\"hold\" \"hold\" \"held\";;;    ;;;    entry	LU \"void\";;;    	\"lead\" \"lead\" \"led\"entry	LU \"void\"	\"meet\" \"meet\" \"met\";;;    entry	LU \"void\";;;    	\"read\" \"read\";;;    ;;;    entry	LU \"void\";;;    	\"speed\" \"speed\" \"sped\";;;    " :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Part/V_Base_Change_4a|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)paradigms(Cat V)ISRules\"ed/n\" (ICat V-Suffix)(VForm ED_Participle) value;former entry-specific spelling rules\"(.*)shear/\\1shor\"	\"n/n\" (ICat V-Suffix)(VForm ED_Participle) ; readaptation of side-effects from above spelling-rule\"(.*)swell/\\1swoll\"	\"n/en\" (ICat V-Suffix)(VForm ED_Participle);3.69 CLASS 5 (mow, etc);;;    entry	LU \"void\";;;    	\"hew\" \"hew\";;;    ;;;    entry	LU \"void\";;;    	\"mow\" \"mow\";;;    ;;;    entry	LU \"void\";;;    	\"saw\" \"saw\";;;    ;;;    entry	LU \"void\";;;    	\"sew\" \"sew\";;;    ;;;    entry	LU \"void\";;;    	\"shear\" \"shear\" \"shor\";;;    ;;;    entry	LU \"void\";;;    	\"show\" \"show\";;;    ;;;    entry	LU \"void\";;;    	\"sow\" \"sow\";;;    ;;;    entry	LU \"void\";;;    	\"strew\" \"strew\"entry	LU \"void\"	\"swell\" \"swell\" \"swoll\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |ED_Participle_Two_Suffixes_5|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*e)av/\\1f\"		\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*ea[^rv])/\\1\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)(ee)([lp])/\\1e\\3\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);\"(.*)clef/\\1clov\"	\"t/e\" (ICat V-Suffix)(VForm Past) value\"(.*)clef/\\1clov\"	\"t/en\" (ICat V-Suffix)(VForm ED_Participle) value\"(.*)knel/\\1kneel\"	\"t/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value;\"(.*)fle/\\1fl\"		(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) ; cf. global (ISRule e_deletion_2);3.66 CLASS 2 (bring, etc);2a;;;    entry	LU \"void\";;;    	\"bereave\" \"bereave\" \"bereav\" \"beref\";;;    ;;;    entry	LU \"void\";;;    	\"cleave\" \"cleave\" \"cleav\" \"clov\" \"clef\";;;    ;;;    entry	LU \"void\";;;    	\"leave\" \"leave\" \"leav\" \"lef\"	(ICat V-Stem);;;    	deleted-forms	(VForm Past)	2;;;    			(VForm ED_Participle)	2;;;    entry	LU \"void\"	\"deal\" \"deal\"	deleted-forms	(VForm Past)	2			(VForm ED_Participle)	2entry	LU \"void\"	\"dream\" \"dream\"entry	LU \"void\"	\"lean\" \"lean\";;;    entry	LU \"void\";;;    	\"leap\" \"leap\";;;    ;;;    entry	LU \"void\";;;    	\"mean\" \"mean\";;;    	deleted-forms	(VForm Past)	2;;;    			(VForm ED_Participle)	2;;;    ;;;    entry	LU \"void\";;;    	\"creep\" \"creep\" \"crep\";;;    ;;;    entry	LU \"void\";;;    	\"feel\" \"feel\" \"fel\";;;    ;;;    entry	LU \"void\";;;    	\"keep\" \"keep\" \"kep\";;;    ;;;    entry	LU \"void\";;;    	\"kneel\" \"kneel\" \"knel\";;;    ;;;    entry	LU \"void\";;;    	\"sleep\" \"sleep\" \"slep\";;;    ;;;    entry	LU \"void\";;;    	\"sweep\" \"sweep\" \"swep\";;;    ;;;    entry	LU \"void\";;;    	\"weep\" \"weep\" \"wep\";;;    ;;;    entry	LU \"void\";;;    	\"flee\" \"flee\" \"fl\" ; cf. kneel;;;    " :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Participle_2a|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules;6Aa\"(.*{Consonant})(ea|ee|oo)(.*)/\\1o\\3\"	\"ed/e\" (ICat V-Suffix)(VForm Past)\"(.*{Consonant})(ea|ee|oo)(.*)/\\1o\\3\"	\"ed/en\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)wak/\\1wok\"		\"ed/e\" (ICat V-Suffix)(VForm Past) value\"(.*)wak/\\1wok\"		\"ed/en\" (ICat V-Suffix)(VForm ED_Participle) value;;6Ab, readaptation of 6Aa 1+2\"(.*)bor/\\1borne\"	\"en/\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)swor\"		\"en/n\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)tor\"		\"en/n\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)wor\"		\"en/n\" (ICat V-Suffix)(VForm ED_Participle);6Ac\"(.*)(i)([dt])/\\1\\2\\3\"		\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)(i)([dt])/\\1\\2\\3\\3\"	\"/en\" (ICat V-Suffix)(VForm ED_Participle) value\"(.*)chidd/\\1chid\"		\"en/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value;6Ad\"(.*)forget/\\1forgot\"		\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)forget/\\1forgott\"	\"ed/en\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)trod\"		\"e/\" (ICat V-Suffix)(VForm Past) ; Readaptation of 6Aa\"(.*)trod/trodd\"	(ICat V-Suffix)(VForm ED_Participle) ; \";6Ae\"(.*)lie/\\1ly\"		(ICat V-Suffix)(VForm ING_Participle)\"(.*)lie/\\1lay\"		\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)lie/\\1lai\"		\"ed/n\" (ICat V-Suffix)(VForm ED_Participle);3.70 CLASS 6 (know, etc) ;6Aaentry	LU \"void\"	\"break\" \"break\" \"brok\"entry	LU \"void\"	\"choose\" \"choose\" \"choos\" \"chos\";;;    entry	LU \"void\";;;    	\"freeze\" \"freeze\" \"freez\" \"froz\";;;    ;;;    entry	LU \"void\";;;    	\"speak\" \"speak\" \"spok\";;;    ;;;    entry	LU \"void\";;;    	\"steal\" \"steal\" \"stol\";;;    ;;;    entry	LU \"void\";;;    	\"wake\" \"wake\" \"wak\" \"wok\";;;    ;;;    ;;;    entry	LU \"void\";;;    ;;;    	\"awaken\" \"awaken\";;;    ;;;    entry	LU \"void\";;;    	\"weave\" \"weave\" \"weav\" \"wov\";;;    ;;;    ;;;    ;;;    ;6Ab;;;    ;;;    entry	LU \"void\";;;    	\"bear\" \"bear\" \"bor\" \"borne\";;;    ;;;    entry	LU \"void\";;;    	\"swear\" \"swear\" \"swor\";;;    ;;;    entry	LU \"void\";;;    	\"tear\" \"tear\" \"tor\";;;    ;;;    entry	LU \"void\";;;    	\"wear\" \"wear\" \"wor\";;;    ;;;    ;;;    ;;;    ;6Ac there are variants !;;;    ;;;    entry	LU \"void\";;;    	\"bite\" \"bite\" \"bit\" \"bitt\";;;    ;;;    entry	LU \"void\";;;    	\"chide\" \"chide\" \"chid\" \"chidd\";;;    ;;;    entry	LU \"void\";;;    	\"hide\" \"hide\" \"hid\" \"hidd\";;;    ;;;    ;;;    ;;;    ;6Ad;;;    ;;;    entry	LU \"void\";;;    	\"forget\" \"forget\" \"forgett\" \"forgot\" \"forgott\";;;    ;;;    entry	LU \"void\";;;    	\"tread\" \"tread\" \"trod\" \"trodd\";;;    ;;;    ;;;    ;;;    ;;;    ;6Ae;;;    ;;;    entry	(Homograph ONE)		LU \"void\";;;    	\"lie\" \"lie\" \"ly\" \"lay\" \"lai\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Different_Past/ED_Participle_6A|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules;7a\"(.*)(i)(.*)/\\1a\\3\"			\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)(i)(.*)/\\1u\\3\"			\"ed/\" (ICat V-Suffix)(VForm ED_Participle);\"(.*)(i)({Consonant})(.*)/\\1\\2\\3\\3\\4\"	(ICat V-Suffix)(VForm ING_Participle); now global \"(.*)shrank/\\1shrunk\"	\"/\" (ICat V-Suffix)(VForm Past) value\"(.*)sprang/\\1sprung\"	\"/\" (ICat V-Suffix)(VForm Past) value\"(.*)stank/\\1stunk\"	\"/\" (ICat V-Suffix)(VForm Past) value;3.71 CLASS 7 (swim, etc) ;7a;;;    entry	LU \"void\";;;    	\"begin\" \"begin\" \"beginn\" \"began\" \"begun\"entry	LU \"void\"	\"drink\" \"drink\" \"drank\" \"drunk\";;;    entry	LU \"void\";;;    	\"ring\" \"ring\" \"rang\" \"rung\";;;    ;;;    entry	LU \"void\";;;    	\"shrink\" \"shrink\" \"shrank\" \"shrunk\";;;    ;;;    entry	LU \"void\";;;    	\"sing\" \"sing\" \"sang\" \"sung\";;;    ;;;    entry	LU \"void\";;;    	\"sink\" \"sink\" \"sank\" \"sunk\";;;    ;;;    entry	LU \"void\";;;    	\"spring\" \"spring\" \"sprang\" \"sprung\";;;    ;;;    entry	LU \"void\";;;    	\"stink\" \"stink\" \"stank\" \"stunk\";;;    ;;;    entry	LU \"void\";;;    	\"swim\" \"swim\" \"swimm\" \"swam\" \"swum\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Different_Past/ED_Part/V_Base_Change_7a|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "; Closed class items" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Det|)) :MOD2-P T) NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix_ModAux)(VForm Present)word-forms(ICat V-Stem)		(ICat V-Suffix_ModAux)ISRules\"(c|sh|w).*/\\1ould\"	(ICat V-Suffix_ModAux)(VForm Past)\"may/might\"		(ICat V-Suffix_ModAux)(VForm Past)\"might/could\"		(ICat V-Suffix_ModAux)(VForm Past) value\"dare/dar\"		\"/ed\" (ICat V-Suffix_ModAux)(VForm Past);Quirk 1972, 103entry	(Function Modal)	LU \"can\"	\"can\" \"can\" \"could\"entry	(Function Modal)	LU \"may\"	\"may\" \"may\" \"could\" \"might\"entry	(Function Modal)	LU \"will\"	\"will\" \"will\" \"would\"entry	(Function Modal)	LU \"shall\"	\"shall\" \"shall\" \"should\"entry	(Function Modal)	LU \"must\"	\"must\" \"must\"	deleted-forms	(VForm Past)entry	(Function Modal)	LU \"ought\"	\"ought\" \"ought\"	deleted-forms	(VForm Past)entry	(Function Modal)	LU \"need\"	\"need\" \"need\"	deleted-forms	(VForm Past)entry	(Function Modal)	LU \"dare\"	\"dare\" \"dare\" \"dar\";past of must and ought (had to) is a syntactic phenomenon and should be;treated by phrase manager" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Modal_Aux|)) :MOD2-P T) NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base)	(ICat P-Suffix)(PForm P_Subj)(ICat P-Base)	(ICat P-Suffix)(PForm P_Obj)(ICat P-Base)	(ICat P-Suffix)(PForm P_Gen)word-forms(ICat P-Base)	(ICat P-Suffix)(PForm P_Subj)(ICat P-Base)	(ICat P-Suffix)(PForm P_Obj)(ICat P-Base)	(ICat P-Suffix)(PForm P_Gen)paradigms(Cat Pron); Table 6.33 Quirk et al 1985entry	(PCat Personal)	LU \"void\"	\"who\" \"who\"	ISRules	\"/m\" (PForm P_Obj)entry	(PCat Personal)	LU \"void\"	\"that\" \"that\" \"who\"	ISRules	\"that/who\"	(PForm P_Gen)entry	(PCat NonPersonal)	LU \"void\"	\"which\" \"which\" \"who\"	ISRules	\"which/who\"	(PForm P_Gen); (PForm P_Gen) who in this case a formative not \"who\"; zero is simply not realized as usual; restrictive vs. nonrestrictive not relevant here" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Relative/Interrogative|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base)	(ICat P-Suffix)(PForm P_Determ)(ICat P-Base)	(ICat P-Suffix)(PForm P_Indep)word-forms(ICat P-Base)	(ICat P-Suffix)(PForm P_Determ)(ICat P-Base)	(ICat P-Suffix)(PForm P_Indep)paradigms(Cat Pron)entry	(Pers 1st)(Num SG)	LU \"void\"	\"my\" \"my\" \"mine\"	ISRules	\"my/mine\"	\"s/\" (PForm P_Indep)entry	(Pers 1st)(Num PL)	LU \"void\"	\"our\" \"our\"entry	(Pers 2nd)(Num SG)(Num PL)	LU \"void\"	\"your\" \"your\"entry	(Pers 3rd)(Num SG)(Gen M)	LU \"void\"	\"his\" \"his\"	ISRules	\"s/\" (PForm P_Indep)entry	(Pers 3rd)(Num SG)(Gen F)	LU \"void\"	\"her\" \"her\"entry	(Pers 3rd)(Num SG)	LU \"void\"	\"its\" \"its\"	deleted-forms	(PForm P_Indep)entry	(Pers 3rd)(Num PL)	LU \"void\"	\"their\" \"their\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Possessive|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Adj|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Prep|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Adj-Stem|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"		(AForm Absolute)\"er\" \"er\" \"\"	(AForm Comparative)\"est\" \"est\" \"\"	(AForm Superlative)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Adj-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Preposition)word-forms(ICat Preposition)entry	LU \"void\"	\"after\" \"after\" ; WF after-dinnerentry	LU \"void\"	\"between\" \"between\" ; WF go-betweenentry	LU \"void\"	\"in\" \"in\"entry	LU \"void\"	\"on\" \"on\" ; WF onward Adj+Adventry	LU \"void\"	\"out\" \"out\" ; WF outhouseentry	LU \"void\"	\"of\" \"of\"entry	LU \"void\"	\"under\" \"under\" ; WF undlerlieentry	LU \"void\"	\"down\" \"down\" ; WF downhillentry	LU \"void\"	\"off\" \"off\" ; WF off-hand" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Preposition|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Adv|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix_to_be)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix_to_be)entry	(Function Aux)	LU \"be\"	\"be\" \"be\" \"am\" \"are\" \"is\" \"was\" \"were\"	ISRules	\"be/am\"		(Tense Present)(Person 1st)(Num SG)	\"be/are\"	(Tense Present)(Person 2nd)(Num SG)	\"be/is\"		(VForm S_Form)	\"be/are\"	(Tense Present)(Num PL)	\"be/was\"	(Tense Past)(Person 1st)(Num SG)	\"be/were\"	(Tense Past)(Person 2nd)(Num SG)	\"is/was\"	(Tense Past)(VForm S_Form)	\"be/were\"	(Tense Past)(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Verb_to_be|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"		(VForm Base)\"\" \"\"		(Tense Present)(Person 1st)(Num SG)\"\" \"\"		(Tense Present)(Person 2nd)(Num SG)\"\" \"\"		(Tense Present)(VForm S_Form)\"\" \"\"		(Tense Present)(Num PL)\"\" \"\"		(Tense Past)(Person 1st)(Num SG)\"\" \"\"		(Tense Past)(Person 2nd)(Num SG)\"\" \"\"		(Tense Past)(VForm S_Form)\"\" \"\"		(Tense Past)(Num PL)\"ing\" \"ing\"	(VForm ING_Participle)\"en\" \"en\"	(VForm ED_Participle)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Suffix_to_be|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Preposition|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Adv-Stem)		(ICat Adv-Suffix)(AForm Absolute)word-forms(ICat Adv-Stem)		(ICat Adv-Suffix)paradigms(Cat Adv);Quirk et al 1972 p.291-93entry	LU \"void\"	\"soon\" \"soon\"entry	LU \"void\"	\"not\" \"not\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Adv_Regular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Adv-Stem)		(ICat Adv-Suffix)(AForm Absolute)word-forms(ICat Adv-Stem)		(ICat Adv-Suffix)paradigms(Cat Adv)entry	LU \"void\"	\"well\" \"well\" \"bett\" \"b\"	ISRules	\"well/bett\"	(AForm Comparative)	\"well/b\"	(AForm Superlative)entry	LU \"void\"	\"badly\" \"badly\" \"worse\" \"worst\"	ISRules	\"badly/worse\"	\"er/\" (AForm Comparative)	\"badly/worst\"	\"est/\" (AForm Superlative)entry	LU \"void\"	\"little\" \"little\" \"less\" \"least\"	ISRules	\"little/less\"	\"er/\" (AForm Comparative)	\"little/least\"	\"est/\" (AForm Superlative)entry	LU \"void\"	\"far\" \"far\" \"farth\" \"furth\"	ISRules	\"far/furth\"	(AForm Comparative)	\"furth/farth\"	\"er/er\" (AForm Comparative) value	\"far/furth\"	(AForm Superlative)	\"furth/farth\"	\"est/est\" (AForm Superlative) valueentry	LU \"void\"	\"much\" \"much\" \"more\" \"most\"	ISRules	\"much/more\"	\"er/\" (AForm Comparative)	\"much/most\"	\"est/\" (AForm Superlative); Notes; it would be a good thing if the value keyword could accept an index; to allow ordering -> two lines instead of four; far entered in RIRule Adj-Irregular Lexicographer may take adj and specify the; same forms with the value adv; handling more ???" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Adv_Irregular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Adv-Stem)word-forms(ICat Adv-Stem)paradigms(Cat Adv)entry	LU \"void\"	\"ever\" \"ever\";Periphrasis: Comparative and Superlative with PM ??" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Adv_Periphrasis|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Adv-Stem|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"		(AForm Absolute)\"er\" \"er\" \"\"	(AForm Comparative)\"est\" \"est\" \"\"	(AForm Superlative)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Adv-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Conjunct|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Conjunct)word-forms(ICat Conjunct)entry	LU \"void\"	\"and\" \"and\"entry	LU \"void\"	\"but\" \"but\"entry	LU \"void\"	\"although\" \"although\"entry	LU \"void\"	\"if\" \"if\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Conjunct|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Conjunct|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Interj|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Interj)word-forms(ICat Interj)entry	LU \"void\"	\"ouch\" \"ouch\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Interj|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Interj|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Onomat|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Onomat)word-forms(ICat Onomat)entry	LU \"void\"	\"rat-a-tat-tat\" \"rat-a-tat-tat\";hiss, buzz" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Onomat|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Onomat|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Adj-Stem)		(ICat Adj-Suffix)(AForm Absolute)word-forms(ICat Adj-Stem)		(ICat Adj-Suffix)paradigms(Cat Adj)ISRules\"(.*)y/\\1i\"		(AForm Comparative)|(AForm Superlative) ; y->i\"(..)(d|g)/\\1\\2\\2\"	(AForm Comparative)|(AForm Superlative)\"(.*)e/\\1\"		(AForm Comparative)|(AForm Superlative) ; wide ->wid : doubling before wide\"(.*)le/\\1l\"		(AForm Comparative)|(AForm Superlative);Quirk et al 1972 p.291-93;(1) aboveentry	LU \"void\"	\"happy\" \"happy\" \"happi\";(2) aboveentry	LU \"void\"	\"big\" \"big\" \"bigg\";;;    entry	LU \"void\";;;    	\"sad\" \"sad\" \"sadd\";;;    ;;;    entry	LU \"void\";;;    	\"mad\" \"mad\" \"madd\" ; WF madman;;;    ;;;    entry	LU \"void\";;;    	\"green\" \"green\" ; WF greenfly, dark green;;;    ;;;    entry	LU \"void\";;;    	\"sick\" \"sick\" ; WF homesick, sick (N);;;    ;;;    entry	LU \"void\";;;    	\"cold\" \"cold\" ; WF stone-cold;;;    ;;;    entry	LU \"void\";;;    	\"long\" \"long\" ; WF long-distance;;;    ;;;    entry	LU \"void\";;;    	\"high\" \"high\" ; WF high church;;;    ;;;    entry	LU \"void\";;;    	\"rough\" \"rough\" ; WF roughride;;;    ;;;    entry	LU \"void\";;;    	\"dark\" \"dark\" ; WF dark green, dark (N);;;    ;;;    entry	LU \"void\";;;    	\"new\" \"new\" ; WF renew;;;    ;;;    entry	LU \"void\";;;    	\"warm\" \"warm\" ; WF lukewarm;;;    ;;;    entry	LU \"void\";;;    	\"dry\" \"dry\" \"dri\" \"drie\" ; WF dry (V);;;    ;;;    ;(3) above;;;    ;;;    entry	LU \"void\";;;    	\"wide\" \"wide\" \"wid\" ; WF widen;;;    ;;;    entry	LU \"void\";;;    	\"safe\" \"safe\" \"saf\" ; WF fail safe;;;    ;;;    entry	LU \"void\";;;    	\"free\" \"free\" \"fre\" ; WF free-thinking;;;    ;;;    entry	LU \"void\";;;    	\"pure\" \"pure\" \"pur\" \"puri\" ; WF purify;;;    ;;;    entry	LU \"void\";;;    	\"short\" \"short\" ; WF shorthand;;;    ;;;    entry	LU \"void\";;;    	\"little\" \"little\" \"littl\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Adj_Regular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Adj-Stem)		(ICat Adj-Suffix)(AForm Absolute)word-forms(ICat Adj-Stem)		(ICat Adj-Suffix)paradigms(Cat Adj)entry	LU \"void\"	\"good\" \"good\" \"bett\" \"b\"	ISRules	\"good/bett\"	(AForm Comparative)	\"good/b\"	(AForm Superlative)entry	LU \"void\"	\"bad\" \"bad\" \"worse\" \"worst\"	ISRules	\"bad/worse\"	\"er/\" (AForm Comparative)	\"bad/worst\"	\"est/\" (AForm Superlative);;;    entry	LU \"void\";;;    	\"far\" \"far\" \"farth\" \"furth\";;;    ;;;    	ISRules;;;    	\"far/furth\"	(AForm Comparative);;;    	\"furth/farth\"	\"er/er\" (AForm Comparative) value;;;    	\"far/furth\"	(AForm Superlative);;;    	\"furth/farth\"	\"est/est\" (AForm Superlative) value;;;    ;;;    entry	LU \"void\";;;    	\"old\" \"old\" \"eld\";;;    ;;;    	ISRules;;;    	\"old/eld\"	(AForm Comparative);;;    	\"eld/old\"	(AForm Comparative) value;;;    	\"old/eld\"	(AForm Superlative);;;    	\"eld/old\"	(AForm Superlative) value;;;    ;;;    ; Notes;;;    ; it would be a good thing if the value keyword could accept an index;;;    ; to allow ordering -> two lines instead of four;;;    ;;;;    ; in the case of elder it would be a good thing to add individual features;;;    ; to word forms but not to the citation form" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Adj_Irregular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Adj-Stem)word-forms(ICat Adj-Stem); possibility to specify deleted forms at this pointparadigms(Cat Adj)entry	LU \"void\"	\"ferocious\" \"ferocious\" \"feroc\"entry	LU \"void\"	\"complex\" \"complex\";;;    entry	LU \"void\";;;    	\"blind\" \"blind\" ; WF colour blind;;;    ;;;    entry	LU \"void\";;;    	\"legal\" \"legal\" ; used in WF il-legal;;;    ;;;    entry	LU \"void\";;;    	\"patient\" \"patient\" ; use in WF im-patient;;;    ;;;    entry	LU \"void\";;;    	\"moral\" \"moral\" ; use in WF a-moral, im-moral;;;    ;;;    entry	LU \"void\";;;    	\"rational\" \"rational\" ; used in WF ir-rational;;;    ;;;    entry	LU \"void\";;;    	\"fortunate\" \"fortunate\" ; used in WF un-fortunate-ly;;;    ;;;    entry	LU \"void\";;;    	\"common\" \"common\" ; used in WF commonplace;;;    ;;;    entry	LU \"void\";;;    	\"human\" \"human\" ; used in WF human (N);;;    ;;;    entry	LU \"void\";;;    	\"secure\" \"secure\" \"secur\" ; used in WF security;;;    ;;;    entry	LU \"void\";;;    	\"capable\" \"capable\" \"capabil\" ; used in WF capability;;;    ;;;    entry	LU \"void\";;;    	\"curious\" \"curious\" \"curios\" ; used in WF curiosity;;;    ;;;    entry	LU \"void\";;;    	\"savage\" \"savage\" \"savag\" \"savagi\" ; used in WF savagize;Periphrasis: Comparative and Superlative treated by PM ??; ... gradability is primarily a semantic matter: ... Huddleston, p. 303; example also in Huddl.;for the explanation of non-gradability see Quirk 85, p.1540" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Adj_Periphrasis|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N)ISRules;changes nouns in o to -oes in the plural\"(.*)o\"		\"s/es\" (Num PL) ; cf. global spelling rule es_Plural; (a) ADDITION OF E after sibilants;----------------------------------entry	LU \"void\"	\"gas\" \"gas\"entry	LU \"void\"	\"box\" \"box\"entry	LU \"void\"	\"buzz\" \"buzz\"entry	LU \"void\"	\"veto\" \"veto\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Addition_of_E|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(DCat Predet)(ICat Det-Base)	(ICat Det-Suffix)(Num SG)(DCat Predet)(ICat Det-Base)	(ICat Det-Suffix)(Num PL)word-forms(DCat Predet)(ICat Det-Base)	(ICat Det-Suffix)(Num SG)(DCat Predet)(ICat Det-Base)	(ICat Det-Suffix)(Num PL)paradigms(Cat Det); all, both, halfentry	LU \"void\"	\"all\" \"all\"entry	LU \"void\"	\"both\" \"both\"	deleted-forms	(Num SG)entry	LU \"void\"	\"half\" \"half\"; all, whole;		all -> all, both, halfentry	LU \"void\"	\"whole\" \"whole\"	deleted-forms	(Num PL);multipliersentry	LU \"void\"	\"double\" \"double\"; fractions -> word-formation; suchentry	LU \"void\"	\"such\" \"such\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Predet|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(DCat Central)(ICat Det-Base)	(ICat Det-Suffix)(Num SG)(DCat Central)(ICat Det-Base)	(ICat Det-Suffix)(Num PL)word-forms(DCat Central)(ICat Det-Base)	(ICat Det-Suffix)(Num SG)(DCat Central)(ICat Det-Base)	(ICat Det-Suffix)(Num PL)paradigms(Cat Det); Articlesentry	(Cat Art)	LU \"void\"	\"the\" \"the\"entry	(Cat Art)	LU \"void\"	\"a\" \"a\"	deleted-forms	(Num PL)	ISRules	\"/n\" (ICat Det-Suffix)(Num SG)	\"n/\" (ICat Det-Suffix)(Num SG) value; Other central determinersentry	LU \"void\"	\"this\" \"this\" \"these\"	ISRules	\"this/these\"	(Num PL)entry	LU \"void\"	\"that\" \"that\" \"those\"	ISRules	\"that/those\"	(Num PL)entry	LU \"void\"	\"no\" \"no\" ; no pron function (idem)entry	LU \"void\"	\"enough\" \"enough\"	deleted-forms	(Num SG)entry	LU \"void\"	\"either\" \"either\"	deleted-forms	(Num PL)entry	LU \"void\"	\"neither\" \"neither\"	deleted-forms	(Num PL);entry	LU \"void\"	\"every\" \"every\" ; no pron function (cf. Quirk 1985: 255) 	deleted-forms	(Num PL)entry	LU \"void\"	\"each\" \"each\"	deleted-forms	(Num PL);entry	LU \"void\"	\"some\" \"some\"	deleted-forms	(Num SG) ; pl. uncount, adv etc.entry	LU \"void\"	\"any\" \"any\"	deleted-forms	(Num PL) ; sg. + ncoun, adv" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Central|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(DCat Postdet)(ICat Det-Base)	(ICat Det-Suffix)(Num SG)(DCat Postdet)(ICat Det-Base)	(ICat Det-Suffix)(Num PL)word-forms(DCat Postdet)(ICat Det-Base)	(ICat Det-Suffix)(Num SG)(DCat Postdet)(ICat Det-Base)	(ICat Det-Suffix)(Num PL)paradigms(Cat Det);(a) Cardinal numeralsentry	(Cat Numeral)	LU \"void\"	\"one\" \"one\" \"a\"	deleted-forms	(Num PL)	ISRules	\"one/a\" valueentry	(Cat Numeral)	LU \"void\"	\"two\" \"two\"	deleted-forms	(Num SG)entry	(Cat Numeral)	LU \"void\"	\"twenty\" \"twenty\"	deleted-forms	(Num SG);(b) Ordinal numeralsentry	LU \"void\"	\"first\" \"first\";(c) Closed class quantifiersentry	(DCat Predet)	LU \"void\"	\"many\" \"many\" ; SG \"Many a good student\" can functiona as PreDet and formalentry	LU \"void\"	\"few\" \"few\"	deleted-forms	(Num SG)entry	LU \"void\"	\"several\" \"several\"	deleted-forms	(Num SG)entry	LU \"void\"	\"much\" \"much\"	deleted-forms	(Num PL)entry	LU \"void\"	\"little\" \"little\"	deleted-forms	(Num PL);(d) Open class quantifiersentry	LU \"void\"	\"plenty\" \"plenty\"	deleted-forms	(Num SG)entry	LU \"void\"	\"great\" \"great\"	deleted-forms	(Num PL)entry	LU \"void\"	\"lots\" \"lots\"	deleted-forms	(Num SG)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Postdet|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(DCat Predet)_	(DCat Central)_	(DCat Postdet)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Det-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)paradigms(Cat V)ISRules;a\"(.*)layed/\\1laid\"	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)payed/\\1paid\"	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);b\"(.*)die/\\1dy\"		(ICat V-Suffix)(VForm ING_Participle)\"(.*)die/\\1di\"		(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)lie/\\1ly\"		(ICat V-Suffix)(VForm ING_Participle)\"(.*)lie/\\1li\"		(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.60 Treatment of -y;--------------------;(a) bases ending in a consonant + y (ie+s, i+ed);------------------------------------------------entry	LU \"void\"	\"carry\" \"carry\" \"carrie\" \"carri\"entry	LU \"void\"	\"try\" \"try\" \"trie\" \"tri\"entry	LU \"void\"	\"lay\" \"lay\" \"laid\"entry	LU \"void\"	\"pay\" \"pay\" \"paid\"entry	LU \"void\"	\"play\" \"play\"entry	LU \"void\"	\"stay\" \"stay\"entry	LU \"void\"	\"die\" \"die\" \"dy\" \"di\"entry	(Homograph TWO)		LU \"void\"	\"lie\" \"lie\" \"ly\" \"li\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |V_Treatment_of_Y|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N)ISRules\"/s\" (ICat N-Suffix)(Num PL); (b) TREATMENT OF -Y;--------------------; exceptions (Quirk 1972: 173)entry	LU \"void\"	\"standby\" \"standby\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Treatment_of_Y|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N);global spelling rule: Plural-y-deletion-&-ie-insertion; (b) TREATMENT OF -Y;--------------------; exceptions (Quirk 1972: 173)entry	LU \"void\"	\"body\" \"body\" \"bodie\" \"bodi\" ; WF embody \"bodi\" for SFormentry	LU \"void\"	\"party\" \"party\" \"partie\" ; WF garden_party" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Treatment_of_Y|)) :MOD2-P T) NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\" \"n\"	(Num SG)\"\" \"\"		(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Det-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Pron|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)word-forms(ICat N-Stem)	(ICat N-Suffix)(Num SG)(ICat N-Stem)	(ICat N-Suffix)(Num PL)paradigms(Cat N)ISRules\"(.*)({Consonant})/\\1\\2\\2\" (ICat N-Stem)	(ICat N-Suffix)(Num PL)\"s/es\" (Num PL)\"(.*bus)s/\\1\" (ICat N-Stem) value;(d) DOUBLING OF CONSONANT  ;no abbreviationsentry	LU \"void\"	\"bus\" \"bus\" \"buss\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Doubling_of_Consonant|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |P-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"			(PForm P_Subj)\"\" \"\" \"m\"		(PForm P_Obj)\"se\" \"se\" \"\"		(PForm P_Gen)\"\" \"\"			(PForm P_Determ)\"s\" \"s\" \"\"		(PForm P_Indep)\"self\" \"self\"		(PForm Refl_SG)\"selves\" \"selves\"	(PForm Refl_PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |P-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*[ln])d/\\1\"		\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.65 CLASS 1 (burn, etc);1b;;;    entry	LU \"void\";;;    	\"bend\" \"bend\" \"ben\";;;    entry	LU \"void\"	\"build\" \"build\" \"buil\";;;    entry	LU \"void\";;;    	\"lend\" \"lend\" \"len\";;;    ;;;    entry	LU \"void\";;;    	\"rend\" \"rend\" \"ren\";;;    ;;;    entry	LU \"void\";;;    	\"send\" \"send\" \"sen\";;;    ;;;    entry	LU \"void\";;;    	\"spend\" \"spend\" \"spen\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Participle_1b|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)mak/\\1made\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.65 CLASS 1 (burn, etc);1centry	(Function Aux)	LU \"void\"	\"have\" \"have\" \"hav\" \"had\" \"ha\"	ISRules	\"have/ha\"	(ICat V-Suffix)(VForm S_Form)	\"hav/had\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)entry	LU \"void\"	\"make\" \"make\" \"mak\" \"made\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Participle_1c|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)beseech/\\1besough\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)bring/\\1brough\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)buy/\\1bough\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)catch/\\1caugh\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)seek/\\1sough\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)teach/\\1taugh\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)think/\\1though\"	\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.66 CLASS 2 (bring, etc);2b;;;    entry	LU \"void\";;;    	\"beseech\" \"beseech\" \"besough\";;;    entry	LU \"void\"	\"bring\" \"bring\" \"brough\"entry	LU \"void\"	\"buy\" \"buy\" \"bough\";;;    entry	LU \"void\";;;    	\"catch\" \"catch\" \"caugh\";;;    ;;;    entry	LU \"void\";;;    	\"seek\" \"seek\" \"sough\";;;    ;;;    entry	LU \"void\";;;    	\"teach\" \"teach\" \"taugh\";;;    ;;;    entry	LU \"void\";;;    	\"think\" \"think\" \"though\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Participle_2b|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base)	(ICat P-Suffix)(PForm P_Subj)(ICat P-Base)	(ICat P-Suffix)(PForm P_Obj)word-forms(ICat P-Base)	(ICat P-Suffix)(PForm P_Subj)(ICat P-Base)	(ICat P-Suffix)(PForm P_Obj)paradigms(Cat Pron)entry	(Pers 1st)(Num SG)	LU \"void\"	\"i\" \"i\" \"me\"	ISRules	\"i/me\"	(PForm P_Obj)entry	(Pers 1st)(Num PL)	LU \"void\"	\"we\" \"we\" \"us\"	ISRules	\"we/us\"	(PForm P_Obj)entry	(Pers 2nd)(Num SG)(Num PL)	LU \"void\"	\"you\" \"you\"entry	(Pers 3rd)(Num SG)(Gen M)	LU \"void\"	\"he\" \"he\" \"him\"	ISRules	\"he/him\"	(PForm P_Obj)entry	(Pers 3rd)(Num SG)(Gen F)	LU \"void\"	\"she\" \"she\" \"her\"	ISRules	\"she/her\"	(PForm P_Obj)entry	(Pers 3rd)(Num SG)	LU \"void\"	\"it\" \"it\"entry	(Pers 3rd)(Num PL)	LU \"void\"	\"they\" \"they\" \"them\"	ISRules	\"they/them\"	(PForm P_Obj)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Personal|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"ed/t\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.66 CLASS 2 (bring, etc);2centry	LU \"void\"	\"lose\" \"lose\" \"los\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Participle_2c|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)ell/\\1ol\"		\"ed/d\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.66 CLASS 2 (bring, etc);2dentry	LU \"void\"	\"tell\" \"tell\" \"tol\"entry	LU \"void\"	\"sell\" \"sell\" \"sol\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Participle_2d|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules;2a\"ed/d\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.66 CLASS 2 (bring, etc);2eentry	LU \"void\"	\"hear\" \"hear\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Participle_2e|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)say/\\1sai\"		\"ed/d\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.66 CLASS 2 (bring, etc);2fentry	LU \"void\"	\"say\" \"say\" \"sai\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Participle_2f|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)(a|i)(ng|nk|ck|g)/\\1u\\3\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)hung/\\1hang\"	\"/ed\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)spin/\\1spun\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)spun/\\1span\"	\"/\" (ICat V-Suffix)(VForm Past) value ; Quirk 1972 archaic!;\"(.*)strik/\\1struck\"	\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)strik/\\1stricken\"	\"ed/\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)stricken/\\1struck\"	\"/\" (ICat V-Suffix)(VForm ED_Participle) value;\"(.*)win/\\1won\"		\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.68 CLASS 4 (meet, etc.);;;    entry	LU \"void\";;;    	\"cling\" \"cling\" \"clung\";;;    ;;;    entry	LU \"void\";;;    	\"dig\" \"dig\" \"digg\" \"dug\";;;    ;;;    entry	LU \"void\";;;    	\"fling\" \"fling\" \"flung\"entry	LU \"void\"	\"hang\" \"hang\" \"hung\";;;    entry	LU \"void\";;;    	\"sling\" \"sling\" \"slung\";;;    ;;;    entry	LU \"void\";;;    	\"slink\" \"slink\" \"slunk\";;;    ;;;    entry	LU \"void\";;;    	\"spin\" \"spin\" \"span\" \"spinn\" \"spun\";;;    ;;;    entry	LU \"void\";;;    	\"stick\" \"stick\" \"stuck\";;;    ;;;    entry	LU \"void\";;;    	\"sting\" \"sting\" \"stung\";;;    ;;;    entry	LU \"void\";;;    	\"strike\" \"strike\" \"strik\" \"struck\" \"stricken\";;;    ;;;    entry	LU \"void\";;;    	\"string\" \"string\" \"strung\";;;    ;;;    entry	LU \"void\";;;    	\"swing\" \"swing\" \"swung\";;;    ;;;    entry	LU \"void\";;;    	\"win\" \"win\" \"winn\" \"won\";;;    ;;;    entry	LU \"void\";;;    	\"wring\" \"wring\" \"wrung\";;;    ;;;    " :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Part/V_Base_Change_4b|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)(ind)/\\1ound\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.68 CLASS 4 (meet, etc.)entry	LU \"void\"	\"bind\" \"bind\" \"bound\";;;    entry	LU \"void\";;;    	\"find\" \"find\" \"found\";;;    ;;;    entry	LU \"void\";;;    	\"grind\" \"grind\" \"ground\";;;    ;;;    entry	LU \"void\";;;    	\"wind\" \"wind\" \"wound\";;;    " :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Part/V_Base_Change_4c|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)light/\\1lit\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value\"(.*)slid/\\1slid\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.68 CLASS 4 (meet, etc.)entry	LU \"void\"	\"light\" \"light\" \"lit\";;;    ;;;    entry	LU \"void\";;;    	\"slide\" \"slide\" \"slid\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Part/V_Base_Change_4d|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)sit/\\1sat\"		\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)spit/\\1spit\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)spit/\\1spat\"	\"/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value ; cf. Cobuild 1987: 1405;3.68 CLASS 4 (meet, etc.)entry	LU \"void\"	\"sit\" \"sit\" \"sitt\" \"sat\";;;    entry	LU \"void\";;;    	\"spit\" \"spit\" \"spitt\" \"spat\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Part/V_Base_Change_4e|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)get/\\1got\"		\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle)\"(.*)shin/\\1shone\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle) value ; cf. Quirk 1985\"(.*)shoot/\\1shot\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.68 CLASS 4 (meet, etc.)entry	LU \"void\"	\"get\" \"get\" \"gett\" \"got\";;;    entry	LU \"void\";;;    	\"shine\" \"shine\" \"shin\" \"shone\";;;    ;;;    ;;;    ;;;    entry	LU \"void\";;;    	\"shoot\" \"shoot\" \"shot\";;;    " :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Part/V_Base_Change_4f|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)fight/\\1fought\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.68 CLASS 4 (meet, etc.)entry	LU \"void\"	\"fight\" \"fight\" \"fought\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Part/V_Base_Change_4g|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)stand/\\1stood\"	\"ed/\" (ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ED_Participle);3.68 CLASS 4 (meet, etc.)entry	LU \"void\"	\"stand\" \"stand\" \"stood\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Part/V_Base_Change_4h|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)strid/\\1strode\"	\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)strid/\\1stridden\"	\"ed/\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)stridden/\\1strid\"	\"/\" (ICat V-Suffix)(VForm ED_Participle) value\"(.*)strid/\\1strode\"	(ICat V-Suffix)(VForm ED_Participle) value ; cf. Quirk 1985;3.68 CLASS 4 (meet, etc.)entry	LU \"void\"	\"stride\" \"stride\" \"strid\" \"strode\" \"stridden\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Identical_Past/ED_Part/V_Base_Change_4i|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules;once entry-specific spelling rules\"(.*)com/\\1came\"	\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)com/\\1come\"	\"ed/\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)run/\\1ran\"		\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)run/\\1run\"		\"ed/\" (ICat V-Suffix)(VForm ED_Participle);3.71 CLASS 7 (swim, etc) ;7bentry	LU \"void\"	\"come\" \"come\" \"com\" \"came\"entry	LU \"void\"	\"run\" \"run\" \"runn\" \"ran\" \"run\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Different_Past/ED_Part/V_Base_Change_7b|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)go/\\1went\"		\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)go/\\1gone\"		\"ed/\" (ICat V-Suffix)(VForm ED_Participle);3.71 CLASS 7 (swim, etc) ;7centry	LU \"void\"	\"go\" \"go\" \"went\" \"gone\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Different_Past/ED_Part/V_Base_Change_7c|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules;6Ba\"(.*)ow/\\1ew\"			\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)ow/\\1ow\"			\"ed/n\" (ICat V-Suffix)(VForm ED_Participle);6Bb\"(.*)ak/\\1ook\"			\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)ak\"			\"ed/en\" (ICat V-Suffix)(VForm ED_Participle);6Bc\"(.*)forbid/\\1forbad\"	\"/e\" (ICat V-Suffix)(VForm Past) ; cf avove\"(.*)forbad/\\1forbad\"	\"e/\" (ICat V-Suffix)(VForm Past) value\"(.*)forbid/\\1forbidd\"	\"ed/en\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)giv/\\1gav\"		\"ed/e\" (ICat V-Suffix)(VForm Past)\"(.*)giv\"		\"ed/en\" (ICat V-Suffix)(VForm ED_Participle);6Bd\"(.*)draw/\\1drew\"	\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)draw\"		\"ed/n\" (ICat V-Suffix)(VForm ED_Participle);6Be\"(.*)fall/\\1fell\"	\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)fall\"		\"ed/en\" (ICat V-Suffix)(VForm ED_Participle);6Bf\"(.*)eat/\\1ate\"		\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)eat\"		\"ed/en\" (ICat V-Suffix)(VForm ED_Participle);6Bg\"(.*)se/\\1see\" ; readaptation of e_deletion_2\"(.*)see/\\1saw\"		\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)see\"		\"ed/n\" (ICat V-Suffix)(VForm ED_Participle);6Bh\"(.*)slay/\\1slew\"	\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)slay/\\1slai\"	\"ed/n\" (ICat V-Suffix)(VForm ED_Participle);3.70 CLASS 6 (know, etc) ;6Baentry	LU \"void\"	\"blow\" \"blow\" \"blew\";;;    entry	LU \"void\";;;    	\"grow\" \"grow\" \"grew\";;;    ;;;    entry	LU \"void\";;;    	\"know\" \"know\" \"knew\";;;    ;;;    entry	LU \"void\";;;    	\"throw\" \"throw\" \"threw\";;;    ;;;    ;;;    ;;;    ;6Bb;;;    ;;;    entry	LU \"void\";;;    	\"forsake\" \"forsake\" \"forsak\" \"forsook\";;;    ;;;    entry	LU \"void\";;;    	\"shake\" \"shake\" \"shak\" \"shook\";;;    ;;;    entry	LU \"void\";;;    	\"take\" \"take\" \"tak\" \"took\";;;    ;;;    ;;;    ;;;    ;6Bc;;;    ;;;    entry	LU \"void\";;;    	\"forbid\" \"forbid\" \"forbidd\" \"forbad\";;;    	deleted-forms	(VForm ED_Participle)	2;;;    ;;;    ;;;    entry	LU \"void\";;;    	\"give\" \"give\" \"giv\" \"gav\";;;    ;;;    ;;;    ;;;    ;;;    ;6Bd;;;    ;;;    entry	LU \"void\";;;    	\"draw\" \"draw\" \"drew\";;;    ;;;    ;;;    ;;;    ;6Be;;;    ;;;    entry	LU \"void\";;;    	\"fall\" \"fall\" \"fell\";;;    ;;;    ;;;    ;6Bf;;;    ;;;    entry	LU \"void\";;;    	\"eat\" \"eat\" \"ate\";;;    ;;;    ;;;    ;6Bg;;;    ;;;    entry	LU \"void\";;;    	\"see\" \"see\" \"saw\";;;    ;;;    ;6Bh;;;    ;;;    entry	LU \"void\";;;    	\"slay\" \"slay\" \"slew\" \"slai\";;;    ;;;    " :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Different_Past/ED_Participle_6B|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules;6Ca\"(dr|r|sm|str|wr)(i)([dsktv])/\\1o\\3\"	\"ed/e\" (ICat V-Suffix)(VForm Past)\"(.*)(i)([dt])/\\1\\2\\3\\3\"	\"/en\" (ICat V-Suffix)(VForm ED_Participle)\"(.*)(i)([sv])/\\1\\2\\3\"		\"/en\" (ICat V-Suffix)(VForm ED_Participle);6Cb\"(.*)fly/\\1flew\"	\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)fly/\\1flow\"	\"ed/n\" (ICat V-Suffix)(VForm ED_Participle);6Cc\"(.*)do/\\1did\"		\"ed/\" (ICat V-Suffix)(VForm Past)\"(.*)do/\\1done\"		\"ed/\" (ICat V-Suffix)(VForm ED_Participle);3.70 CLASS 6 (know, etc) ;6Caentry	LU \"void\"	\"drive\" \"drive\" \"driv\" \"drov\";;;    entry	LU \"void\";;;    	\"ride\" \"ride\" \"rid\" \"rod\" \"ridd\";;;    ;;;    entry	LU \"void\";;;    	\"rise\" \"rise\" \"ris\" \"ros\";;;    ;;;    entry	LU \"void\";;;    	\"smite\" \"smite\" \"smit\" \"smot\" \"smitt\";;;    ;;;    ;	strike cf. IIRule ... 4b;;;    ;;;    entry	LU \"void\";;;    	\"strive\" \"strive\" \"striv\" \"strov\";;;    ;;;    ;;;    entry	LU \"void\";;;    	\"write\" \"write\" \"writ\" \"wrot\" \"writt\";;;    ;;;    ;;;    ;6Cb;;;    ;;;    entry	LU \"void\";;;    	\"fly\" \"fly\" \"flie\" \"flew\" \"flow\";;;    ;;;    ;;;    ;6Cc;;;    ;;;    entry	(Function Aux)	LU \"void\";;;    	\"do\" \"do\" \"doe\" \"did\" \"done\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Different_Past/ED_Participle_6C|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules;6D\"ed/\" (ICat V-Suffix)(VForm Past)\"ed/en\" (ICat V-Suffix)(VForm ED_Participle);3.70 CLASS 6 (know, etc) ;6Dentry	LU \"void\"	\"beat\" \"beat\" \"beaten\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Different_Past/ED_Participle_6D|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules;6E;\"(.*)div/\\1dove\"	\"ed/\" (ICat V-Suffix)(VForm Past) value ; AmE \"(.*)thriv/\\1throv\"	\"ed/e\" (ICat V-Suffix)(VForm Past);3.70 CLASS 6 (know, etc) ;6Eentry	LU \"void\"	\"dive\" \"dive\" \"div\" ; \"dove\";;;    entry	LU \"void\";;;    	\"thrive\" \"thrive\" \"thriv\" \"throv\";;;    " :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Different_Past/ED_Participle_6E|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)({Consonant})/\\1\\2\\2\"	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ING_Participle)|(ICat V-Suffix)(VForm ED_Participle);the following spelling rules are optional and can be activated on request;;;    \"(.*)signall/\\1signal\"		(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ING_Participle)|(ICat V-Suffix)(VForm ED_Participle) value;;;    \"(.*)travell/\\1travel\"		(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ING_Participle)|(ICat V-Suffix)(VForm ED_Participle) value;;;    \"(.*)programm/\\1program\"	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ING_Participle)|(ICat V-Suffix)(VForm ED_Participle) value;;;    \"(.*)worshipp/\\1worship\"	(ICat V-Suffix)(VForm Past)|(ICat V-Suffix)(VForm ING_Participle)|(ICat V-Suffix)(VForm ED_Participle) valueentry	LU \"void\"	\"beg\" \"beg\" \"begg\"entry	LU \"void\"	\"permit\" \"permit\" \"permitt\"entry	LU \"void\"	\"occur\" \"occur\" \"occurr\"entry	LU \"void\"	\"prefer\" \"prefer\" \"preferr\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |V_Doubling_of_Consonant|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"		(VForm Present)\"\" \"\" \"ed\"	(VForm Past)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Suffix_ModAux|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Stem)		(ICat V-Suffix)(VForm Base)word-forms(ICat V-Stem)		(ICat V-Suffix)ISRules\"(.*)dy/\\1dye\"			(ICat V-Suffix)(VForm ING_Participle)entry	LU \"void\"	\"create\" \"create\" \"creat\"entry	LU \"void\"	\"dance\" \"dance\" \"danc\" ; WF dancing team" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |V_Treatment_of_E|)) :MOD2-P T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :ELEMENTS-FREE-LIST #*000010001000000000000000000000000000101000000000000000000000000000000000000100000000000000000000000000000011111111111111111111111111111111111111111111 :ELEMENTS-EXTEND-SIZE 50 :TREE ((ROOT 35 0 77 22 41 46 42 55 58 61) (0 16 2 1) (2 3 67 74 78 6 7) (1 73 5 15 11 12 14 10 9) (16 17 18 21 20) (22 23 24) (23 26 103 72 105 13 19) (24 28 81 82 32 83 85 86 87 88 29 30 89 90 91 92 93 94 95 96 31 33 99 100 101 102 34 97 98 37 47 25 27 104 48) (35 68 69 70 71 76) (77 84 40 39 79 80) (41 64 65 66 43 44) (46 50 51 52 53 54) (42 45 49) (55 56 57) (58 59 60) (61 62 63)) :COLLAPSED-SUBTREES (46 41 22 24 23 0 77 1 2 16 35 42 55 58 61))) #[WORD-FORMATION-WINDOW ( :TREE-COLLECTION #[WM-TREE-COLLECTION ( :ELEMENTS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :ELEMENTS-FREE-LIST #*111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 :ELEMENTS-EXTEND-SIZE 50 :TREE ((ROOT)) :COLLAPSED-SUBTREES NIL)) #[KEY-WORDS-WINDOW ( :WINDOW-CONTENTS "pp = (Cat V)(VForm ED_Participle)" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[TRANSFORMATIONS-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[PERIPHR-INFL-WINDOW ( :WINDOW-CONTENTS "Perfect(Cat V)^(VForm ED_Participle)^(Tense Perfect) + pp = (POS 1)(CFORM 2)(PERC 1)(Cat V)(Tense Perfect); have done, has done, had done, having done" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[PM-TEST-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[TEST-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[MESSAGE-WINDOW ( :WINDOW-CONTENTS "iyouhesheitwetheywillshall" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[CLASS-WINDOW ( :TREE-COLLECTION #[WM-TREE-COLLECTION ( :ELEMENTS #(NIL NIL #[CLASS-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|PIClass| . |Auxiliary|)) :MOD2-P T) #[CLASS-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "SYNTAX-TREE(VP V V)MODIFICATIONSV >TRANSFORMATIONS-PERIPHR-INFLPerfectEXAMPLE<have> pphave (Cat V)-" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|PIClass| . |Perfect|)) :MOD2-P T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :ELEMENTS-FREE-LIST #*0000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 :ELEMENTS-EXTEND-SIZE 50 :TREE ((ROOT 2) (2 3)) :COLLAPSED-SUBTREES NIL)) #[CLITIC-WINDOW ( :TREE-COLLECTION #[WM-TREE-COLLECTION ( :ELEMENTS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :ELEMENTS-FREE-LIST #*0000000001010010000100001111111111111111111111111111111111111111111111111111111111111111111111111111 :ELEMENTS-EXTEND-SIZE 50 :TREE ((ROOT)) :COLLAPSED-SUBTREES NIL))) :PM-DEFINER #[DEFINITION ( :UNITS-TO-SAVE NIL :LAST-SOURCES NIL))