#[WM-DOCUMENT ( :TOP-LEVEL-WINDOWS (#[LEXICAL-CHARACTER-SET-WINDOW ( :WINDOW-CONTENTS "character-sort-orderA a àB bC cD dE e é èF fG gH hI i ì íJ jK kL lM mN nO o ò óP pQ qR rS sT tU u ùV vW wX xY yZ z-’+§&ïsequence-sort-order" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[SURFACE-CHARACTER-SET-WINDOW ( :WINDOW-CONTENTS "character-sort-ordera àbcde é èfghi ìjklmno òpqrstu ùvwxyz’-sequence-sort-order" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[FEATURE-DOMAINS-WINDOW ( :WINDOW-CONTENTS "Cat	(N         Adj         V         Adv         Art         Def         Indef         Pron         Prep         Prep+Art         Conjunct         Interj         Onomat)Manner	(Qual         Indic         Indef         Interrog         Dimostr         Rel         Poss         Personal)Degree	(Compar         Elative)Decl	(Strong)Mod	(Inf         Ind         Conj         Cond         Imp         Gerund         Part-Pres         Part-Pass)Temp	(Pres         Impf         Pass-Rem         Fut)Pers	(1st         2nd         3rd)Num	(PL         SG         sg         pl)Gen	(M         F         N         V)Case	(Nom         Obl-Aton-Indir         Obl-Aton-Dir         Obl-Ton-Dir         Obl-Ton-Prep)ICat	(N-Base         N-Suffix         A-Base         A-Suffix         V-Base         V-Infix         V-Suffix         Adv         P-Base         P-Suffix         Art-Base         Art-Suffix         Prep-Coded         Prep-Entered         Prep+Art         Conjunct         Interj         Onomat         Regular         Reg         Irregular         Irreg         V-Regular         V-Irregular         Var         Invariable         Invar         Hard-Coded         Entered         Pres         Pass-Rem         Part-Pass         Indic         Personal         Poss         Poss-Invar         Elision         Apocope         Prevoc         Precons         Full-Form         Neuter         Base-1         Base-2         Suffix-1         Suffix-2         Double-PL         No-SG         No-PL         Irreg-PL         Compound         Empty         Underspec         carcere         eco         bello         buono         grande         santo         quello         tale-quale         un+o         1st         2nd         3rd         Other         +at         +it         +ut         +isc         +a         +A         +e         +i         +I         +o         +O         +re         +a/+e         +a/+i         +e/+i         +e/i         +o/+i         +o/+a         +e/+e/+i/+i         +o/+a/+i/+e         +a/+i/+e         +o+a/+i+e         +o/a/i/e         +trice         +tore)RIRule	(A-Invariable         A-Regular         Adverb         Compound-N+A         Compound-N+N         Conjunct         Double-PL         Indic-Invar-No-PL         Indic-Invariable         Interj         ISuffix-Empty         ISuffix-Underspecified         N-Regular         N-Irregular         N-Invariable         Neuter         Onomat         Prep-Entered         Pron-Invar         Pron-Invar-No-PL         un+o-No-SG         un+o-No-PL         un+o         1st-Conjug         2nd-Conjug         3rd-Conjug         3rd-Conjug-Infix         +a/+e         +a/+e-Two-PL-Forms         +a/+i         +a/+i/+e         +e/+i         +e/+e/+i/+i         +e/e/i/i         +o/+a         +o/+a/+i/+e         +o/+a/+i/+e-Two-PL-Forms         +o+a/+i+e         +o/a/i/e-No-SG         +o/a/i/e-No-PL         +o/a/i/e         +o/+i         +o/+i-Two-PL-Forms         +tore/+trice)IIRule	(A-Coded         A-Poss         A-Poss-Invar         Art-Def         Art-Indef         Gender-V         Irreg-PL         Irreg_PRem+Irreg_PP         Irreg_PRem+Reg_PP         Reg+Irreg_PRem/PP         Reg_PRem+Reg_PP         Prep+Art         Prep-Coded         Pron-Personal         Pron-Poss         Pron-Poss-Invar         1st-Conjug         2nd-Conjug         3rd-Conjug         3rd-Conjug-Infix         bello         buono         essere         carcere         eco         grande         quello         santo         tale-quale         +e/+i         +o/+i)ISRule	(A-Cons[cg]i+a/[cg]+e         A-i+o/+i         A-[cg]+[ao]/[cg]h+e         A-[cg]+[ao]/[cg]h+i         C/c         Delete-4th-+         Delete-3rd-+         Delete-2nd-+         Delete-1st-+         G/g         i-tonica/i         N-i+o/+i         N-Cons[cg]i+a/[cg]+e         N-[cg]+[ao]/[cg]h+[ei]         V-Delete-Stressed-i         V-Delete-Unstressed-i         V-[cg]i+are/[cg]+[ei         V-[cg]+are/[cg]h+[ei])" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[FEATURE-DEPENDENCIES-WINDOW ( :WINDOW-CONTENTS "(Cat N)		demands	Gen(Cat Adj)	demands	Manner(Cat Pron)	demands	Manner" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[SPELLING-RULES-WINDOW ( :WINDOW-CONTENTS ";-------------------------------------------------------------------------------; ISRULES;-------------------------------------------------------------------------------(Cat N)	(ISRule N-[cg]+[ao]/[cg]h+[ei])	\"(.*[cg])/\\1h\" (ICat N-Base)^(ICat +e/+i)		\"+e|+i\" (ICat N-Suffix); 	fungo/funghi, ficco/ficchi, farmaco/farmachi (amiC+i, voc+e/voc+i); 	streg+a/stregh+e, amic+a/amich+e ecc.	(ISRule N-Cons[cg]i+a/[cg]+e)	\"(.*[cglnrs][cg])i/\\1\" (ICat N-Base)	\"+e\" (ICat N-Suffix)(Num PL); 	caccia/cacce, spiaggia/spiagge, provincia/province; cia rsp. gia kann nur stehen nach cglnrs	(ISRule N-i+o/+i)	\"(.*)i/\\1\" (ICat N-Base)	\"+i\" (ICat N-Suffix)(Num PL); 	studio/studi, figlio/figli; not zìo/zii;-------------------------------------------------------------------------------(Cat Adj)	(ISRule A-[cg]+[ao]/[cg]h+i)	\"(.*[cg])/\\1h\" (ICat A-Base)^(ICat +e/+e/+i/+i)		\"+i\" (ICat A-Suffix)(Num PL); 	antico/antichi, largo/larghi; nicht: pratiCo/pratici, antropofaGo/antropofagi; nor dolc+e/dolc+i; 	ebenfalls nicht conservatric+i (vor Gen F)	(ISRule A-[cg]+[ao]/[cg]h+e)	\"(.*[cgCG])/\\1h\" (ICat A-Base)^(ICat +e/+e/+i/+i)	\"+e\" (ICat A-Suffix)(Num PL); 	antico/antiche, largo/larghe, pratiCo/pratiche, antropofaGo/antropofaghe, nicht dolc+e; 	Unterscheidung in 2 Regeln (+i und +e) nötig, weil immer h vor +e, aber nicht immer h vor +i.	(ISRule A-i+o/+i)	\"(.*)i/\\1\" (ICat A-Base)	\"+i\" (ICat A-Suffix)(Num PL); 	vario/vari, grigio/grigi, sveglio/svegli; nicht: pìo/pii	(ISRule A-Cons[cg]i+a/[cg]+e)	\"(.*[cglnrs][cg])i/\\1\" (ICat A-Base)	\"+e\" (ICat A-Suffix)(Num PL);	lercio/lerce, liscio/lisce; nicht: grigio/grigie, fradicio/fradicie; 	im Gegensatz zu Nomen keine Ausnahmen und Doppelformen.;	cia rsp. gia kann nur stehen nach cglnrs;-------------------------------------------------------------------------------(Cat V)	(ISRule V-[cg]+are/[cg]h+[ei])	\"(.*[cg])/\\1h\" (ICat V-Base.1st)	\"+e|+i.*\" (ICat V-Infix)|(ICat V-Suffix) ; -care, -gare insert h: manch+i, manchiamo, pagherò	(ISRule V-[cg]i+are/[cg]+[ei)	\"(.*[cg])i/\\1\" (ICat V-Base.1st)	\"+e|+i.*\" (ICat V-Infix)|(ICat V-Suffix) ; -ciare, giare delete diacritic i: bruc-i, bruc-erà, mang-ino	(ISRule V-Delete-Unstressed-i)	\"(.*)i/\\1\" (ICat V-Base.1st)		\"+i.*\" (ICat V-Suffix) ;		-iare delete unstressed i: stud-iamo, stud-i, tagl-iate, tagl-ino (not inví-i, inví-ino)	(ISRule V-Delete-Stressed-i)	\"(.*)í/\\1\" (ICat V-Base.1st)		\"+iamo|+iate\" (ICat V-Suffix) ; inviamo/inviate;-------------------------------------------------------------------------------(ISRule C/c)\"(.*)C(.*)/\\1c\\2\"(ISRule G/g)\"(.*)G(.*)/\\1g\\2\"(ISRule i-tonica/i)\"(.*)í(.*)/\\1i\\2\"(ISRule Delete-1st-+)\"(.*)+(.*)/\\1\\2\"(ISRule Delete-2nd-+)\"(.*)+(.*)/\\1\\2\"(ISRule Delete-3rd-+)\"(.*)+(.*)/\\1\\2\"(ISRule Delete-4th-+)\"(.*)+(.*)/\\1\\2\"" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[FUNCTIONS-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[INFLECTION-WINDOW ( :TREE-COLLECTION #[WM-TREE-COLLECTION ( :ELEMENTS #(#[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . N)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Regular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |N-Regular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Base.+a/+e)	(ICat N-Suffix.+a)(Num SG)word-forms(ICat N-Base.+a/+e)	(ICat N-Suffix.+a)(Num SG)(ICat N-Base.+a/+e)	(ICat N-Suffix.+e)(Num PL)paradigms(Cat N)entry	(Gen F)	\"streg\" \"streg\" \"stregh\"entry	(Gen F)	\"rig\" \"rig\" \"righ\"entry	(Gen F)	\"vit\" \"vit\"entry	(Gen F)	\"strad\" \"strad\"entry	(Gen F)	\"terr\" \"terr\"entry	(Gen F)	\"pecor\" \"pecor\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+a/+e|)) :MOD2-P T) NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Base.+a/+i)	(ICat N-Suffix.+a)(Num SG)word-forms(ICat N-Base.+a/+i)	(ICat N-Suffix.+a)(Num SG)(ICat N-Base.+a/+i)	(ICat N-Suffix.+i)(Num PL)paradigms(Cat N)entry	(Gen M)	\"poet\" \"poet\"entry	(Gen M)	\"duc\" \"duc\" \"duch\"; ebenso die beiden Feminina ala/ali, arma/armi" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+a/+i|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Base.+o/+i)	(ICat N-Suffix.+o)(Num SG)word-forms(ICat N-Base.+o/+i)	(ICat N-Suffix.+o)(Num SG)(ICat N-Base.+o/+i)	(ICat N-Suffix.+i)(Num PL)paradigms(Cat N)entry	(Gen M)	\"ragazz\" \"ragazz\"entry	(Gen M)	\"porC\" \"porc\" \"porch\"entry	(Gen M)	\"giorn\" \"giorn\"entry	(Gen M)	\"fuoc\" \"fuoc\" \"fuoch\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+o/+i|)) :MOD2-P T) NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Base.+o/+a)	(ICat N-Suffix.+O)(Num SG)(Gen M)word-forms(ICat N-Base.+o/+a)	(ICat N-Suffix.+O)(Num SG)(Gen M)(ICat N-Base.+o/+a)	(ICat N-Suffix.+A)(Num PL)(Gen F)paradigms(Cat N)entry	(Gen M)	\"pai\" \"pai\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+o/+a|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Base.+e/+i)	(ICat N-Suffix.+e)(Num SG)word-forms(ICat N-Base.+e/+i)	(ICat N-Suffix.+e)(Num SG)(ICat N-Base.+e/+i)	(ICat N-Suffix.+i)(Num PL)paradigms(Cat N)entry	(Gen F)	\"voc\" \"voc\" \"voci\"entry	(Gen M)	\"nom\" \"nom\" \"nnom\"entry	(Gen M)	\"pan\" \"pan\" \"pan\"entry	(Gen M)	\"sangu\" \"sangu\"entry	(Gen M)	\"color\" \"color\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+e/+i|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat N-Base.Double-PL)	(ICat N-Suffix.+O)(Num SG)(Gen M)word-forms(ICat N-Base.Double-PL)	(ICat N-Suffix.+O)(Num SG)(Gen M)(ICat N-Base.Double-PL)	(ICat N-Suffix.+I)(Num PL)(Gen M)(ICat N-Base.Double-PL)	(ICat N-Suffix.+A)(Num PL)(Gen F)paradigms(Num SG)(Num PL)entry	(Gen M)	\"bracci\" \"bracc\" \"bracci\"entry	(Gen M)	\"corn\" \"corn\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Double-PL|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat +a/+e)_	(ICat +a/+i)_	(ICat +o/+i)_	(ICat +o/+a)_	(ICat +e/+i)_	(ICat Double-PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+a\" \"a\"	(ICat +a)(Num SG)\"+e\" \"e\"	(ICat +e)(Num SG)\"+e\" \"e\"	(ICat +e)(Num PL)\"+i\" \"i\"	(ICat +i)(Num PL)\"+o\" \"o\"	(ICat +o)(Num SG)\"+a\" \"a\"	(ICat +A)(Num PL)(Gen F)\"+i\" \"i\"	(ICat +I)(Num PL)(Gen M)\"+o\" \"o\"	(ICat +O)(Num SG)(Gen M)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Irregular|)) :MOD2-P T) NIL NIL NIL NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS ";;;    Wenn V-Subbäume zusammengenommen werden unter (Cat V), d.h. (RIRule V-Regular);;;    und (RIRule V-Irregular) anstelle von (ICat Regular) resp. (ICat Irrregular), ;;;    dann erübrigen sich separates Fenster für V-Base und Knoten V-Infix, V-Suffix ;;;    für V-Irregular. Sie sind bei beiden Subbäumen identisch.;;;    Ebenso: (ICat V-Coded) zu (RIRule V-Coded)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . V)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Regular|)) :MOD2-P T) NIL NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Invariable|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat N-Base)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(Num SG)_	(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Underspec|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"\" \"\"	(Num SG)\"\" \"\"	(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Empty|)) :MOD2-P T) NIL NIL NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Hard-Coded|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Irreg-PL|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Irreg-PL.N-Base)	(ICat N-Suffix.+o)(Num SG)word-forms(ICat Irreg-PL.N-Base)	(ICat N-Suffix.+o)(Num SG)(ICat Irreg-PL.N-Base)	(ICat N-Suffix.+i)(Num PL)paradigms(Cat N)ISRules\"(.*)uom/\\1uomin\"		(Num PL)\"(.*)di/\\1de\"			(Num PL); uomo/uomini, galantuomo/galantuomini, poveruomo/poveruomini; dio/dei, semidio/semideientry	(Gen M)	\"uom\" \"uom\" \"uomin\"	(ICat N-Base)entry	(Gen M)	\"dí\" \"di\" \"de\"		(ICat N-Base)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |+o/+i|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Irreg-PL.N-Base)	(ICat N-Suffix.+e)(Num SG)word-forms(ICat Irreg-PL.N-Base)	(ICat N-Suffix.+e)(Num SG)(ICat Irreg-PL.N-Base)	(ICat N-Suffix.+i)(Num PL)paradigms(Cat N)ISRules\"(.*)bu/\\1buo\"	(Num PL); Prefissati???entry	(Gen M)	\"bu\" \"bu\" \"buo\"	(ICat N-Base)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |+e/+i|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Gender-V|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat carcere.N-Base)	(ICat carcere.N-Suffix)(Num SG)(Gen V)word-forms(ICat carcere.N-Base)	(ICat carcere.N-Suffix)(Num SG)(Gen M)(ICat carcere.N-Base)	(ICat carcere.N-Suffix)(Num SG)(Gen F)(ICat carcere.N-Base)	(ICat carcere.N-Suffix)(Num PL)paradigms(Num SG)(Num PL)entry	(Gen V)	\"carcer\" \"carcer\"	(ICat N-Base)	\"+e\" \"e\"		(ICat N-Suffix)(Num SG)(Gen V)	\"+e\" \"e\"		(ICat N-Suffix)(Num SG)(Gen M)	\"+e\" \"e\"		(ICat N-Suffix)(Num SG)(Gen F)	\"+i\" \"i\"		(ICat N-Suffix)(Num PL)(Gen F)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |carcere|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat eco.N-Base)	(ICat eco.N-Suffix)(Num SG)(Gen V)word-forms(ICat eco.N-Base)	(ICat eco.N-Suffix)(Num SG)(Gen M)(ICat eco.N-Base)	(ICat eco.N-Suffix)(Num SG)(Gen F)(ICat eco.N-Base)	(ICat eco.N-Suffix)(Num PL)(Gen M)paradigms(Num SG)(Num PL)entry	(Gen V)	\"ec\" \"ec\" \"ech\"	(ICat N-Base)	\"+o\" \"o\"	(ICat N-Suffix)(Num SG)(Gen V)	\"+o\" \"o\"	(ICat N-Suffix)(Num SG)(Gen M)	\"+o\" \"o\"	(ICat N-Suffix)(Num SG)(Gen F)	\"+i\" \"i\"	(ICat N-Suffix)(Num PL)(Gen M)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |eco|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat N-Base)(Num SG)_	(ICat N-Base)(Num PL)_	(ICat N-Suffix)(Num SG)_	(ICat N-Suffix)(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Irreg-PL|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat N-Base)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(ICat +o)(Num SG)\"+e\" \"e\"	(ICat +e)(Num SG)\"+i\" \"i\"	(ICat +i)(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |N-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat N-Base)_	(ICat N-Suffix)(Num SG)(Gen V)_	(ICat N-Suffix)(Num SG)(Gen M)_	(ICat N-Suffix)(Num SG)(Gen F)_	(ICat N-Suffix)(Num PL)(Gen F)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |carcere|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat N-Base)_	(ICat N-Suffix)(Num SG)(Gen V)_	(ICat N-Suffix)(Num SG)(Gen M)_	(ICat N-Suffix)(Num SG)(Gen F)_	(ICat N-Suffix)(Num PL)(Gen M)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |eco|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Adj|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Manner| . |Qual|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "; Unterteilung in (ICat A-Regular), (ICat Irregular) etc. um Kompilation; zu vereinfachen; es gibt mehrere Subbäume." :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Regular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |A-Regular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat A-Base.+o/+a/+i/+e)	(ICat A-Suffix.+o)(Num SG)(Gen M)word-forms(ICat A-Base.+o/+a/+i/+e)	(ICat A-Suffix.+o)(Num SG)(Gen M)(ICat A-Base.+o/+a/+i/+e)	(ICat A-Suffix.+a)(Num SG)(Gen F)(ICat A-Base.+o/+a/+i/+e)	(ICat A-Suffix.+i)(Num PL)(Gen M)(ICat A-Base.+o/+a/+i/+e)	(ICat A-Suffix.+e)(Num PL)(Gen F)paradigms(Num SG)(Num PL)entry	\"fals\" \"fals\"entry	\"secc\" \"secc\" \"secch\"entry	\"ver\" \"ver\"entry	\"nuov\" \"nuov\" \"nov\"entry	\"ner\" \"ner\"entry	\"sacr\" \"sacr\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+o/+a/+i/+e|)) :MOD2-P T) NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat A-Base.+e/+e/+i/+i)	(ICat A-Suffix.+e)(Num SG)(Gen M)word-forms(ICat A-Base.+e/+e/+i/+i)	(ICat A-Suffix.+e)(Num SG)(Gen M)(ICat A-Base.+e/+e/+i/+i)	(ICat A-Suffix.+e)(Num SG)(Gen F)(ICat A-Base.+e/+e/+i/+i)	(ICat A-Suffix.+i)(Num PL)(Gen M)(ICat A-Base.+e/+e/+i/+i)	(ICat A-Suffix.+i)(Num PL)(Gen F)paradigms(Num SG)(Num PL)entry	\"dolc\" \"dolc\" \"dolci\"entry	\"fort\" \"fort\"entry	\"facil\" \"facil\"entry	\"util\" \"util\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+e/+e/+i/+i|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat A-Base.+a/+i/+e)	(ICat A-Suffix.+a)(Num SG)(Gen M)word-forms(ICat A-Base.+a/+i/+e)	(ICat A-Suffix.+a)(Num SG)(Gen M)(ICat A-Base.+a/+i/+e)	(ICat A-Suffix.+a)(Num SG)(Gen F)(ICat A-Base.+a/+i/+e)	(ICat A-Suffix.+i)(Num PL)(Gen M)(ICat A-Base.+a/+i/+e)	(ICat A-Suffix.+e)(Num PL)(Gen F); cf. Serianni p. 167paradigms(Num SG)(Num PL)entry	LU \"bla\"	\"idiot\" \"idiot\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+a/+i/+e|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat +o/+a/+i/+e)_	(ICat +e/+e/+i/+i)_	(ICat +a/+i/+e)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |A-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+a\" \"a\"	(ICat +a)(Num SG)(Gen M)\"+a\" \"a\" \"\"	(ICat +a)(Num SG)(Gen F)\"+e\" \"e\"	(ICat +e)(Num SG)(Gen M)\"+e\" \"e\" \"\"	(ICat +e)(Num SG)(Gen F)\"+e\" \"e\"	(ICat +e)(Num PL)(Gen F)\"+i\" \"i\"	(ICat +i)(Num PL)(Gen M)\"+i\" \"i\"	(ICat +i)(Num PL)(Gen F)\"+o\" \"o\" \"\"	(ICat +o)(Num SG)(Gen M)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |A-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Irregular|)) :MOD2-P T) NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen M)(Num SG)word-forms(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen M)(Num SG)(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen F)(Num SG)(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen M)(Num PL)(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen F)(Num PL)paradigms(Cat Adj)entry	LU \"bla\"	\"blu\" \"blu\"	(ICat A-Base)	\"\" \"\"		(ICat A-Suffix)(Num SG)(Gen M)	\"\" \"\"		(ICat A-Suffix)(Num SG)(Gen F)	\"\" \"\"		(ICat A-Suffix)(Num PL)(Gen M)	\"\" \"\"		(ICat A-Suffix)(Num PL)(Gen F);;;    die letzten drei Endungen mittels CopyFrom-2 Befehl;;;    Evtl gleiche Lösung wie bei den Nomen, d.h. mit hartkodierten Endungen und Ableitungsbasis" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |A-Invariable|)) :MOD2-P T) NIL NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat A-Base)_	(ICat A-Suffix)(Gen M)(Num SG)_	(ICat A-Suffix)(Gen F)(Num SG)_	(ICat A-Suffix)(Gen M)(Num PL)_	(ICat A-Suffix)(Gen F)(Num PL); Copy-From-Function funktioniert, es müssen aber alle Formative in Regel angegeben werden." :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Invariable|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Hard-Coded|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |A-Coded|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat bello.A-Base)	(ICat bello.A-Suffix)(Num SG)(Gen M)(ICat Full-Form)word-forms(ICat bello.A-Base)	(ICat bello.A-Suffix)(Num SG)(Gen M)(ICat bello.A-Base)	(ICat bello.A-Suffix)(Num SG)(Gen F)(ICat bello.A-Base)	(ICat bello.A-Suffix)(Num PL)(Gen M)(ICat bello.A-Base)	(ICat bello.A-Suffix)(Num PL)(Gen F)paradigms(Num SG)(Gen M)(Num SG)(Gen F)(Num PL)(Gen M)(Num PL)(Gen F)ISRules\"(.*)bell/\\1bel\" (ICat A-Base)		(ICat A-Suffix.Apocope)\"(.*)bell/\\1be\" (ICat A-Base)		(ICat A-Suffix.Precons)(Num PL)(Gen M)\"(.*)bell/\\1begl\" (ICat A-Base)		(ICat A-Suffix.Prevoc)(Num PL)(Gen M)entry	LU \"bla\"	\"bell\" \"begl\" \"be\" \"bel\" \"bell\"	(ICat A-Base)	\"+o\" \"o\"			(ICat A-Suffix)(Num SG)(Gen M)(ICat Full-Form)	\"+a\" \"a\"			(ICat A-Suffix)(Num SG)(Gen F)(ICat Full-Form)	\"+i\" \"i\"			(ICat A-Suffix)(Num PL)(Gen M)(ICat Full-Form)	\"+e\" \"e\"			(ICat A-Suffix)(Num PL)(Gen F)(ICat Full-Form)	\"+’\" \"’\"			(ICat A-Suffix)(Num SG)(Gen M)(ICat Elision)	\"+’\" \"’\"			(ICat A-Suffix)(Num SG)(Gen F)(ICat Elision)	\"+\" \"\"				(ICat A-Suffix)(Num SG)(Gen M)(ICat Apocope)	\"+i\" \"i\"			(ICat A-Suffix)(Num PL)(Gen M)(ICat Precons)	\"+i\" \"i\"			(ICat A-Suffix)(Num PL)(Gen M)(ICat Prevoc)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |bello|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat buono.A-Base)	(ICat buono.A-Suffix)(Num SG)(Gen M)(ICat Full-Form)word-forms(ICat buono.A-Base)	(ICat buono.A-Suffix)(Num SG)(Gen M)(ICat buono.A-Base)	(ICat buono.A-Suffix)(Num SG)(Gen F)(ICat buono.A-Base)	(ICat buono.A-Suffix)(Num PL)(Gen M)(ICat buono.A-Base)	(ICat buono.A-Suffix)(Num PL)(Gen F)paradigms(Num SG)(Gen M)(Num SG)(Gen F)(Num PL)(Gen M)(Num PL)(Gen F)entry	LU \"bla\"	\"buon\" \"buon\"	(ICat A-Base)	\"+o\" \"o\"	(ICat A-Suffix)(Num SG)(Gen M)(ICat Full-Form)	\"+a\" \"a\"	(ICat A-Suffix)(Num SG)(Gen F)(ICat Full-Form)	\"+i\" \"i\"	(ICat A-Suffix)(Num PL)(Gen M)(ICat Full-Form)	\"+e\" \"e\"	(ICat A-Suffix)(Num PL)(Gen F)(ICat Full-Form)	\"+\" \"\"		(ICat A-Suffix)(Num SG)(Gen M)(ICat Apocope)	\"+’\" \"’\"	(ICat A-Suffix)(Num SG)(Gen F)(ICat Elision)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |buono|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat grande.A-Base)	(ICat grande.A-Suffix)(Num SG)(Gen M)(ICat Full-Form)word-forms(ICat grande.A-Base)	(ICat grande.A-Suffix)(Num SG)(Gen M)(ICat grande.A-Base)	(ICat grande.A-Suffix)(Num SG)(Gen F)(ICat grande.A-Base)	(ICat grande.A-Suffix)(Num PL)(Gen M)(ICat grande.A-Base)	(ICat grande.A-Suffix)(Num PL)(Gen F)paradigms(Num SG)(Gen M)(Num SG)(Gen F)(Num PL)(Gen M)(Num PL)(Gen F)ISRules\"(.*)grand/\\1gran\" (ICat A-Base)	(ICat A-Suffix.Apocope)entry	LU \"bla\"	\"grand\" \"grand\" \"gran\"	(ICat A-Base)	\"+e\" \"e\"		(ICat A-Suffix)(Num SG)(Gen M)(ICat Full-Form)	\"+e\" \"e\"		(ICat A-Suffix)(Num SG)(Gen F)(ICat Full-Form)	\"+i\" \"i\"		(ICat A-Suffix)(Num PL)(Gen M)(ICat Full-Form)	\"+i\" \"i\"		(ICat A-Suffix)(Num PL)(Gen F)(ICat Full-Form)	\"+\" \"\"			(ICat A-Suffix)(Num SG)(Gen M)(ICat Apocope)	\"+\" \"\"			(ICat A-Suffix)(Num SG)(Gen F)(ICat Apocope)	\"+\" \"\"			(ICat A-Suffix)(Num PL)(Gen M)(ICat Apocope)	\"+\" \"\"			(ICat A-Suffix)(Num PL)(Gen F)(ICat Apocope)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |grande|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat santo.A-Base)	(ICat santo.A-Suffix)(Num SG)(Gen M)(ICat Full-Form)word-forms(ICat santo.A-Base)	(ICat santo.A-Suffix)(Num SG)(Gen M)(ICat santo.A-Base)	(ICat santo.A-Suffix)(Num SG)(Gen F)(ICat santo.A-Base)	(ICat santo.A-Suffix)(Num PL)(Gen M)(ICat santo.A-Base)	(ICat santo.A-Suffix)(Num PL)(Gen F)paradigms(Num SG)(Gen M)(Num SG)(Gen F)(Num PL)(Gen M)(Num PL)(Gen F)ISRules\"(.*)sant/\\1san\" (ICat A-Base)	(ICat A-Suffix.Apocope)entry	LU \"bla\"	\"sant\" \"san\" \"sant\"	(ICat A-Base)	\"+o\" \"o\"		(ICat A-Suffix)(Num SG)(Gen M)(ICat Full-Form)	\"+a\" \"a\"		(ICat A-Suffix)(Num SG)(Gen F)(ICat Full-Form)	\"+i\" \"i\"		(ICat A-Suffix)(Num PL)(Gen M)(ICat Full-Form)	\"+e\" \"e\"		(ICat A-Suffix)(Num PL)(Gen F)(ICat Full-Form)	\"+’\" \"’\"		(ICat A-Suffix)(Num SG)(Gen M)(ICat Elision)	\"+’\" \"’\"		(ICat A-Suffix)(Num SG)(Gen F)(ICat Elision)	\"+\" \"\"			(ICat A-Suffix)(Num SG)(Gen M)(ICat Apocope)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |santo|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat A-Base)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Full-Form)_	(ICat A-Suffix)(Num SG)(Gen F)(ICat Full-Form)_	(ICat A-Suffix)(Num PL)(Gen M)(ICat Full-Form)_	(ICat A-Suffix)(Num PL)(Gen F)(ICat Full-Form)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Elision)_	(ICat A-Suffix)(Num SG)(Gen F)(ICat Elision)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Apocope)_	(ICat A-Suffix)(Num PL)(Gen M)(ICat Precons)_	(ICat A-Suffix)(Num PL)(Gen M)(ICat Prevoc)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |bello|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat A-Base)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Full-Form)_	(ICat A-Suffix)(Num SG)(Gen F)(ICat Full-Form)_	(ICat A-Suffix)(Num PL)(Gen M)(ICat Full-Form)_	(ICat A-Suffix)(Num PL)(Gen F)(ICat Full-Form)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Apocope)_	(ICat A-Suffix)(Num SG)(Gen F)(ICat Elision)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |buono|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat A-Base)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Full-Form)_	(ICat A-Suffix)(Num SG)(Gen F)(ICat Full-Form)_	(ICat A-Suffix)(Num PL)(Gen M)(ICat Full-Form)_	(ICat A-Suffix)(Num PL)(Gen F)(ICat Full-Form)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Apocope)_	(ICat A-Suffix)(Num SG)(Gen F)(ICat Apocope)_	(ICat A-Suffix)(Num PL)(Gen M)(ICat Apocope)_	(ICat A-Suffix)(Num PL)(Gen F)(ICat Apocope)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |grande|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat A-Base)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Full-Form)_	(ICat A-Suffix)(Num SG)(Gen F)(ICat Full-Form)_	(ICat A-Suffix)(Num PL)(Gen M)(ICat Full-Form)_	(ICat A-Suffix)(Num PL)(Gen F)(ICat Full-Form)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Elision)_	(ICat A-Suffix)(Num SG)(Gen F)(ICat Elision)_	(ICat A-Suffix)(Num SG)(Gen M)(ICat Apocope)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |santo|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS ";;;    Alle aggettivi indicativi (indefiniti, dimostrativi ecc. sind unter dieser ICat;;;    versammelt. Genaue Manner-Angabe erfolgt als individually added feature. Da;;;    Qual und Poss in Bezug auf Manner homogenere Gruppen sind kann dort die ;;;    Manner-Zuteilung automatisch im Baum erfolgen." :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Indic|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Entered|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat A-Base.+o+a/+i+e)	(ICat A-Suffix.+o)(Gen M)(Num SG)word-forms(ICat A-Base.+o+a/+i+e)	(ICat A-Suffix.+o)(Gen M)(Num SG)(ICat A-Base.+o+a/+i+e)	(ICat A-Suffix.+a)(Gen F)(Num SG)(ICat A-Base.+o+a/+i+e)	(ICat A-Suffix.+i)(Gen M)(Num PL)(ICat A-Base.+o+a/+i+e)	(ICat A-Suffix.+e)(Gen F)(Num PL)paradigms(Num SG)(Num PL)entry	(Manner Indef)	\"molt\" \"molt\"entry	(Manner Indef)	\"poc\" \"poc\" \"poch\"entry	(Manner Indef)	\"parecchi\" \"parecch\" \"parecchi\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+o+a/+i+e|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat A-Base.un+o)	(ICat A-Suffix.+o)(Gen M)(Num SG)word-forms(ICat A-Base.un+o)	(ICat A-Suffix.+o)(Gen M)(Num SG)(ICat A-Base.un+o)	(ICat A-Suffix.Apocope)(Gen M)(Num SG)(ICat A-Base.un+o)	(ICat A-Suffix.+a)(Gen F)(Num SG)(ICat A-Base.un+o)	(ICat A-Suffix.Elision)(Gen F)(Num SG)(ICat A-Base.un+o)	(ICat A-Suffix.+i)(Gen M)(Num PL)(ICat A-Base.un+o)	(ICat A-Suffix.+e)(Gen F)(Num PL)paradigms(Num SG)(Num PL)entry	(Manner Indef)	\"alcun\" \"alcun\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |un+o|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat A-Base.un+o)	(ICat A-Suffix.+o)(Gen M)(Num SG)word-forms(ICat A-Base.un+o)	(ICat A-Suffix.+o)(Gen M)(Num SG)(ICat A-Base.un+o)	(ICat A-Suffix.Apocope)(Gen M)(Num SG)(ICat A-Base.un+o)	(ICat A-Suffix.+a)(Gen F)(Num SG)(ICat A-Base.un+o)	(ICat A-Suffix.Elision)(Gen F)(Num SG)paradigms(Num SG)entry	(Manner Indef)	\"nessun\" \"nessun\"; ebenfalls cadauno, ciascuno, ciascheduno, niuno & veruno (beide ant.,lett.) " :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |un+o-No-PL|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat A-Base.un+o)	(ICat A-Suffix.+o)(Gen M)(Num SG)word-forms(ICat A-Base.un+o)	(ICat A-Suffix.+i)(Gen M)(Num PL)(ICat A-Base.un+o)	(ICat A-Suffix.+e)(Gen F)(Num PL)paradigms(Num PL)entry	(Manner Indef)	\"talun\" \"talun\"; nach Garz nur PL, das Pron jedoch kennt alle 4 Formen; ebenfalls nur PL (auch das Pron) certuno" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |un+o-No-SG|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen M)(Num SG)word-forms(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen M)(Num SG)(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen F)(Num SG)(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen M)(Num PL)(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen F)(Num PL)paradigms(Cat Adj)entry	(Manner Interrog)	\"che\" \"che\"	(ICat A-Base)	\"+\" \"\"		(ICat A-Suffix)(Gen M)(Num SG)	\"+\" \"\"		(ICat A-Suffix)(Gen F)(Num SG)	\"+\" \"\"		(ICat A-Suffix)(Gen M)(Num PL)	\"+\" \"\"		(ICat A-Suffix)(Gen F)(Num PL)entry	(Manner Indef)(Degree Compar)	LU \"molto\"	\"più\" \"più\"	(ICat A-Base)	\"+\" \"\"		(ICat A-Suffix)(Gen M)(Num SG)	\"+\" \"\"		(ICat A-Suffix)(Gen F)(Num SG)	\"+\" \"\"		(ICat A-Suffix)(Gen M)(Num PL)	\"+\" \"\"		(ICat A-Suffix)(Gen F)(Num PL)entry	(Manner Indef)(Degree Compar)	LU \"poco\"	\"meno\" \"meno\"	(ICat A-Base)	\"+\" \"\"		(ICat A-Suffix)(Gen M)(Num SG)	\"+\" \"\"		(ICat A-Suffix)(Gen F)(Num SG)	\"+\" \"\"		(ICat A-Suffix)(Gen M)(Num PL)	\"+\" \"\"		(ICat A-Suffix)(Gen F)(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Indic-Invariable|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen M)(Num SG)word-forms(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen M)(Num SG)(ICat Invariable.A-Base)	(ICat Invariable.A-Suffix)(Gen F)(Num SG)paradigms(Num SG)entry	(Manner Indef)	\"ogni\" \"ogni\"	(ICat A-Base)	\"+\" \"\"		(ICat A-Suffix)(Gen M)(Num SG)	\"+\" \"\"		(ICat A-Suffix)(Gen F)(Num SG); qualsiasi, qualche, più ecc." :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Indic-Invar-No-PL|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat +o+a/+i+e)_	(ICat un+o)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |A-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(ICat +o)(Num SG)(Gen M)\"+a\" \"a\"	(ICat +a)(Num SG)(Gen F)\"+i\" \"i\"	(ICat +i)(Num PL)(Gen M)\"+e\" \"e\"	(ICat +e)(Num PL)(Gen F)\"+\" \"\"		(ICat Apocope)(Gen M)(Num SG)\"+’\" \"’\"	(ICat Elision)(Gen F)(Num SG)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |A-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat A-Base)_	(ICat A-Suffix)(Gen M)(Num SG)_	(ICat A-Suffix)(Gen F)(Num SG)_	(ICat A-Suffix)(Gen M)(Num PL)_	(ICat A-Suffix)(Gen F)(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Invariable|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Hard-Coded|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat quello.A-Base)	(ICat quello.A-Suffix)(Gen M)(Num SG)(ICat Full-Form)word-forms(ICat quello.A-Base)	(ICat quello.A-Suffix)(Gen M)(Num SG)(ICat quello.A-Base)	(ICat quello.A-Suffix)(Gen F)(Num SG)(ICat quello.A-Base)	(ICat quello.A-Suffix)(Gen M)(Num PL)(ICat quello.A-Base)	(ICat quello.A-Suffix)(Gen F)(Num PL)paradigms(Gen M)(Num SG)(Gen F)(Num SG)(Gen M)(Num PL)(Gen F)(Num PL)entry	(Manner Dimostr)	\"quell\" \"quegl\" \"que\" \"quel\" \"quell\"	(ICat A-Base)	\"+o\" \"o\"				(ICat A-Suffix)(Gen M)(Num SG)(ICat Full-Form)	\"+a\" \"a\"				(ICat A-Suffix)(Gen F)(Num SG)(ICat Full-Form)	\"+i\" \"i\"				(ICat A-Suffix)(Gen M)(Num PL)(ICat Full-Form)	\"+e\" \"e\"				(ICat A-Suffix)(Gen F)(Num PL)(ICat Full-Form)	\"+’\" \"’\"				(ICat A-Suffix)(Gen M)(Num SG)(ICat Elision)	\"+’\" \"’\"				(ICat A-Suffix)(Gen F)(Num SG)(ICat Elision)	\"+\" \"\"					(ICat A-Suffix)(Gen M)(Num SG)(ICat Apocope)	\"+i\" \"i\"				(ICat A-Suffix)(Gen M)(Num PL)(ICat Precons)	\"+i\" \"i\"				(ICat A-Suffix)(Gen M)(Num PL)(ICat Prevoc)	ISRules	\"quell/quel\" (ICat A-Base)	(ICat Apocope)	\"quell/que\" (ICat A-Base)	(ICat Precons)	\"quell/quegl\" (ICat A-Base)	(ICat Prevoc)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |quello|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat tale-quale.A-Base)	(ICat tale-quale.A-Suffix)(Gen M)(Num SG)(ICat Full-Form)word-forms(ICat tale-quale.A-Base)	(ICat tale-quale.A-Suffix)(Gen M)(Num SG)(ICat tale-quale.A-Base)	(ICat tale-quale.A-Suffix)(Gen F)(Num SG)(ICat tale-quale.A-Base)	(ICat tale-quale.A-Suffix)(Gen M)(Num PL)(ICat tale-quale.A-Base)	(ICat tale-quale.A-Suffix)(Gen F)(Num PL)paradigms(Gen M)(Num SG)(Gen F)(Num SG)(Gen M)(Num PL)(Gen F)(Num PL)entry	(Manner Dimostr)(Manner Indef)	\"tal\" \"tal\"	(ICat A-Base)	\"+e\" \"e\"	(ICat A-Suffix)(Gen M)(Num SG)(ICat Full-Form)	\"+e\" \"e\"	(ICat A-Suffix)(Gen F)(Num SG)(ICat Full-Form)	\"+i\" \"i\"	(ICat A-Suffix)(Gen M)(Num PL)(ICat Full-Form)	\"+i\" \"i\"	(ICat A-Suffix)(Gen F)(Num PL)(ICat Full-Form)	\"+\" \"\"		(ICat A-Suffix)(Gen M)(Num SG)(ICat Apocope)	\"+\" \"\"		(ICat A-Suffix)(Gen F)(Num SG)(ICat Apocope)entry	(Manner Interrog)(Manner Rel)	LU \"bla\"	\"qual\" \"qual\"	(ICat A-Base)	\"+e\" \"e\"	(ICat A-Suffix)(Gen M)(Num SG)(ICat Full-Form)	\"+e\" \"e\"	(ICat A-Suffix)(Gen F)(Num SG)(ICat Full-Form)	\"+i\" \"i\"	(ICat A-Suffix)(Gen M)(Num PL)(ICat Full-Form)	\"+i\" \"i\"	(ICat A-Suffix)(Gen F)(Num PL)(ICat Full-Form)	\"+\" \"\"		(ICat A-Suffix)(Gen M)(Num SG)(ICat Apocope)	\"+\" \"\"		(ICat A-Suffix)(Gen F)(Num SG)(ICat Apocope)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |tale-quale|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat A-Base)_	(ICat A-Suffix)(Gen M)(Num SG)(ICat Full-Form)_	(ICat A-Suffix)(Gen F)(Num SG)(ICat Full-Form)_	(ICat A-Suffix)(Gen M)(Num PL)(ICat Full-Form)_	(ICat A-Suffix)(Gen F)(Num PL)(ICat Full-Form)_	(ICat A-Suffix)(Gen M)(Num SG)(ICat Elision)_	(ICat A-Suffix)(Gen F)(Num SG)(ICat Elision)_	(ICat A-Suffix)(Gen M)(Num SG)(ICat Apocope)_	(ICat A-Suffix)(Gen M)(Num PL)(ICat Precons)_	(ICat A-Suffix)(Gen M)(Num PL)(ICat Prevoc)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |quello|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat A-Base)_	(ICat A-Suffix)(Gen M)(Num SG)(ICat Full-Form)_	(ICat A-Suffix)(Gen F)(Num SG)(ICat Full-Form)_	(ICat A-Suffix)(Gen M)(Num PL)(ICat Full-Form)_	(ICat A-Suffix)(Gen F)(Num PL)(ICat Full-Form)_	(ICat A-Suffix)(Gen M)(Num SG)(ICat Apocope)_	(ICat A-Suffix)(Gen F)(Num SG)(ICat Apocope)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |tale-quale|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Manner| . |Poss|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat A-Base.Poss)	(ICat A-Suffix.+o)(Gen M)(Num SG)word-forms(ICat A-Base.Poss)	(ICat A-Suffix.+o)(Gen M)(Num SG)(ICat A-Base.Poss)	(ICat A-Suffix.+a)(Gen F)(Num SG)(ICat A-Base.Poss)	(ICat A-Suffix.+i)(Gen M)(Num PL)(ICat A-Base.Poss)	(ICat A-Suffix.+e)(Gen F)(Num PL)paradigms(Gen M)(Num SG)(Gen F)(Num SG)(Gen M)(Num PL)(Gen F)(Num PL)entry	(Pers 1st)(Num sg)	\"mí\" \"mie\" \"mi\"	ISRules	\"mi/mie\" (ICat A-Base)	(ICat +i)entry	(Pers 2nd)(Num sg)	\"tu\" \"tuo\" \"tu\"	ISRules	\"tu/tuo\" (ICat A-Base)	(ICat +i)entry	(Pers 3rd)(Num sg)	\"su\" \"suo\" \"su\"	ISRules	\"su/suo\" (ICat A-Base)	(ICat +i)entry	(Pers 1st)(Num pl)	\"nostr\" \"nostr\"entry	(Pers 2nd)(Num pl)	\"vostr\" \"vostr\"entry	\"propri\" \"propri\" \"propr\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |A-Poss|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat A-Base.Poss-Invar)	(ICat A-Suffix.Invar)(Gen M)(Num SG)word-forms(ICat A-Base.Poss-Invar)	(ICat A-Suffix.Invar)(Gen M)(Num SG)(ICat A-Base.Poss-Invar)	(ICat A-Suffix.Invar)(Gen F)(Num SG)(ICat A-Base.Poss-Invar)	(ICat A-Suffix.Invar)(Gen M)(Num PL)(ICat A-Base.Poss-Invar)	(ICat A-Suffix.Invar)(Gen F)(Num PL)paradigms(Gen M)(Num SG)(Gen F)(Num SG)(Gen M)(Num PL)(Gen F)(Num PL)entry	(Pers 3rd)(Num pl)	\"loro\" \"loro\"; ebenso altrui; Aufteilung und Spezifizierung von A-Root und A-Suffix sind stark verändert im Vergleich zu Liz-Version" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |A-Poss-Invar|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat Poss)_	(ICat Poss-Invar)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |A-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(ICat +o)(Gen M)(Num SG)\"+a\" \"a\"	(ICat +a)(Gen F)(Num SG)\"+i\" \"i\"	(ICat +i)(Gen M)(Num PL)\"+e\" \"e\"	(ICat +e)(Gen F)(Num PL)\"+\" \"\"		(ICat Invar)(Gen M)(Num SG)\"+\" \"\"		(ICat Invar)(Gen F)(Num SG)\"+\" \"\"		(ICat Invar)(Gen M)(Num PL)\"+\" \"\"		(ICat Invar)(Gen F)(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |A-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem.(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg);ind.fut.(ICat V-Base.Pres.1st)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.1st)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Imp);gerundio(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Gerund);part.pres.(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Part-Pres);part.pass.(ICat V-Base.Pres.1st)	(ICat V-Infix.+at.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules; dittongo mobile\"(.*)O(.*)/\\1uo\\2\" (ICat V-Base)	\"anno|[aio]no|[aio]\" (ICat V-Suffix)\"(.*)O(.*)/\\1o\\2\" (ICat V-Base)entry	\"pag\" \"pagh\" \"pag\"entry	\"mangi\" \"mang\" \"mangi\"entry	\"bruci\" \"bruc\" \"bruci\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |1st-Conjug|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem. regolare(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix.2nd)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg);ind.fut.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Imp);gerundio(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Part-Pres);part.pass.regolare(ICat V-Base.Pres.2nd)	(ICat V-Infix.+ut.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules\".*[^t]\" (ICat V-Base.2nd)	\"e/ett\"		\"i\" (ICat V-Suffix)(Temp Pass-Rem) value\".*[^t]\" (ICat V-Base.2nd)	\"e/ett\"		\"é/e\" (ICat V-Suffix)(Temp Pass-Rem) value\".*[^t]\" (ICat V-Base.2nd)	\"e/ett\"		\"rono/ero\" (ICat V-Suffix)(Temp Pass-Rem) value\".*\" (ICat V-Base.2nd)		\"e/\"		\"é\" (ICat V-Suffix)(Temp Pass-Rem)entry	\"cred\" \"cred\"		(ICat V-Base)(ICat 2nd)entry	\"batt\" \"batt\"		(ICat V-Base)(ICat 2nd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |2nd-Conjug|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg);ind.fut.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Imp);gerundio(ICat V-Base.Pres.3rd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Part-Pres);part.pass.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+it.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)entry	\"part\" \"part\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |3rd-Conjug|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Pron|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Entered|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+o)(Gen M)(Num SG)word-forms(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+o)(Gen M)(Num SG)(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+a)(Gen F)(Num SG)(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+i)(Gen M)(Num PL)(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+e)(Gen F)(Num PL)paradigms(Cat Pron)entry	(Manner Dimostr)	\"quest\" \"quest\"entry	(Manner Indef)	\"un\" \"un\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+o/a/i/e|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+o)(Gen M)(Num SG)word-forms(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+o)(Gen M)(Num SG)(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+a)(Gen F)(Num SG)paradigms(Cat Pron)entry	(Manner Indef)	\"nessun\" \"nessun\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+o/a/i/e-No-PL|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+o)(Gen M)(Num SG)word-forms(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+i)(Gen M)(Num PL)(ICat P-Base.+o/a/i/e)	(ICat P-Suffix.+e)(Gen F)(Num PL)paradigms(Cat Pron)entry	(Manner Indef)	\"certun\" \"certun\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+o/a/i/e-No-SG|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base.+e/i)	(ICat P-Suffix.+e)(Gen M)(Num SG)word-forms(ICat P-Base.+e/i)	(ICat P-Suffix.+e)(Gen M)(Num SG)(ICat P-Base.+e/i)	(ICat P-Suffix.+e)(Gen F)(Num SG)(ICat P-Base.+e/i)	(ICat P-Suffix.+i)(Gen M)(Num PL)(ICat P-Base.+e/i)	(ICat P-Suffix.+i)(Gen F)(Num PL)paradigms(Cat Pron)entry	(Manner Dimostr)(Manner Indef)	\"tal\" \"tal\"entry	(Manner Dimostr)(Manner Indef)	\"qual\" \"qual\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |+e/e/i/i|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base.Invar)	(ICat P-Suffix.Invar)(Num SG)(Gen M)word-forms(ICat P-Base.Invar)	(ICat P-Suffix.Invar)entry	(Manner Interrog)	\"chi\" \"chi\"entry	(Manner Rel)	\"che\" \"che\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Pron-Invar|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base.Invar)	(ICat P-Suffix.Invar)(Num SG)(Gen M)word-forms(ICat P-Base.Invar)	(ICat P-Suffix.Invar)(Num SG)paradigms(Num SG)entry	(Manner Indef)	\"chiunque\" \"chiunque\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Pron-Invar-No-PL|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base.Neuter)	(ICat P-Suffix.Neuter)(Gen N)word-forms(ICat P-Base.Neuter)	(ICat P-Suffix.Neuter)(Gen N)paradigms(Gen N)entry	(Manner Indef)	\"niente\" \"niente\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Neuter|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat +o/a/i/e)_	(ICat +e/i)_	(ICat Invar)_	(ICat Neuter)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |P-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(ICat +o)(Gen M)(Num SG)\"+a\" \"a\"	(ICat +a)(Gen F)(Num SG)\"+i\" \"i\"	(ICat +i)(Gen M)(Num PL)\"+e\" \"e\"	(ICat +e)(Gen F)(Num PL)\"+e\" \"e\"	(ICat +e)(Gen M)(Num SG)\"+e\" \"e\"	(ICat +e)(Gen F)(Num SG)\"+i\" \"i\"	(ICat +i)(Gen F)(Num PL)\"+\" \"\"		(ICat Invar)(Gen M)(Num SG)\"+\" \"\"		(ICat Invar)(Gen F)(Num SG)\"+\" \"\"		(ICat Invar)(Gen M)(Num PL)\"+\" \"\"		(ICat Invar)(Gen F)(Num PL)\"+\" \"\"		(ICat Neuter)(Gen N)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |P-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Manner| . |Personal|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Personal)word-forms(ICat Personal); Nominativoentry	(Case Nom)(Pers 1st)(Num sg)	\"io\" \"io\"entry	(Case Nom)(Pers 2nd)(Num sg)	\"tu\" \"tu\"entry	(Case Nom)(Pers 3rd)(Num sg)(Gen M)	\"egli\" \"egli\"entry	(Case Nom)(Pers 3rd)(Num sg)(Gen M)	\"esso\" \"esso\"entry	(Case Nom)(Pers 3rd)(Num sg)(Gen M)	\"lui\" \"lui\"entry	(Case Nom)(Pers 3rd)(Num sg)(Gen F)	\"ella\" \"ella\"entry	(Case Nom)(Pers 3rd)(Num sg)(Gen F)	\"essa\" \"essa\"entry	(Case Nom)(Pers 3rd)(Num sg)(Gen F)	\"lei\" \"lei\"entry	(Case Nom)(Pers 1st)(Num pl)	\"noi\" \"noi\"entry	(Case Nom)(Pers 2nd)(Num pl)	\"voi\" \"voi\"entry	(Case Nom)(Pers 3rd)(Num pl)(Gen M)	\"loro\" \"loro\"entry	(Case Nom)(Pers 3rd)(Num pl)(Gen F)	\"loro\" \"loro\"entry	(Case Nom)(Pers 3rd)(Num pl)(Gen M)	\"essi\" \"essi\"entry	(Case Nom)(Pers 3rd)(Num pl)(Gen F)	\"esse\" \"esse\"; etc für forme atone e toniche Obl-Dir e Obl-Indir; obliquo tonico diretto (\"vedo te\" accusativo tonico)entry	(Case Obl-Ton-Dir)(Pers 1st)(Num sg)	\"me\" \"me\"entry	(Case Obl-Ton-Dir)(Pers 2nd)(Num sg)	\"te\" \"te\"entry	(Case Obl-Ton-Dir)(Pers 3rd)(Num sg)(Gen M)	\"lui\" \"lui\"entry	(Case Obl-Ton-Dir)(Pers 3rd)(Num sg)(Gen M)	\"lei\" \"lei\"entry	(Case Obl-Ton-Dir)(Pers 1st)(Num pl)	\"noi\" \"noi\"entry	(Case Obl-Ton-Dir)(Pers 2nd)(Num pl)	\"voi\" \"voi\"entry	(Case Obl-Ton-Dir)(Pers 3rd)(Num pl)(Gen M)	\"loro\" \"loro\"entry	(Case Obl-Ton-Dir)(Pers 3rd)(Num pl)(Gen F)	\"loro\" \"loro\"; obliquo atono indiretto (\"ti vedo\", accusativo atono)entry	(Case Obl-Aton-Dir)(Pers 1st)(Num sg)	\"mi\" \"mi\"entry	(Case Obl-Aton-Dir)(Pers 2nd)(Num sg)	\"ti\" \"ti\"entry	(Case Obl-Aton-Dir)(Pers 3rd)(Num sg)(Gen M)	\"lo\" \"lo\"entry	(Case Obl-Aton-Dir)(Pers 3rd)(Num sg)(Gen M)	\"la\" \"la\"entry	(Case Obl-Aton-Dir)(Pers 1st)(Num pl)	\"ci\" \"ci\"entry	(Case Obl-Aton-Dir)(Pers 2nd)(Num pl)	\"vi\" \"vi\"entry	(Case Obl-Aton-Dir)(Pers 3rd)(Num pl)(Gen M)	\"li\" \"li\"entry	(Case Obl-Aton-Dir)(Pers 3rd)(Num pl)(Gen F)	\"le\" \"le\"; obliquo atono indiretto (\"gli date qc.\" dativo atono)entry	(Case Obl-Aton-Indir)(Pers 1st)(Num sg)	\"mi\" \"mi\"entry	(Case Obl-Aton-Indir)(Pers 2nd)(Num sg)	\"ti\" \"ti\"entry	(Case Obl-Aton-Indir)(Pers 3rd)(Num sg)(Gen M)	\"gli\" \"gli\"entry	(Case Obl-Aton-Indir)(Pers 3rd)(Num sg)(Gen M)	\"le\" \"le\"entry	(Case Obl-Aton-Indir)(Pers 1st)(Num pl)	\"ci\" \"ci\"entry	(Case Obl-Aton-Indir)(Pers 2nd)(Num pl)	\"vi\" \"vi\"entry	(Case Obl-Aton-Indir)(Pers 3rd)(Num pl)(Gen M)	\"loro\" \"loro\"entry	(Case Obl-Aton-Indir)(Pers 3rd)(Num pl)(Gen F)	\"loro\" \"loro\"; obliquo tonico preposizionale (\"di, da, con, per etc. me\"entry	(Case Obl-Ton-Prep)(Pers 1st)(Num sg)	\"me\" \"me\"entry	(Case Obl-Ton-Prep)(Pers 2nd)(Num sg)	\"te\" \"te\"entry	(Case Obl-Ton-Prep)(Pers 3rd)(Num sg)(Gen M)	\"lui\" \"lui\"entry	(Case Obl-Ton-Prep)(Pers 3rd)(Num sg)(Gen M)	\"lei\" \"lei\"entry	(Case Obl-Ton-Prep)(Pers 1st)(Num pl)	\"noi\" \"noi\"entry	(Case Obl-Ton-Prep)(Pers 2nd)(Num pl)	\"voi\" \"voi\"entry	(Case Obl-Ton-Prep)(Pers 3rd)(Num pl)(Gen M)	\"loro\" \"loro\"entry	(Case Obl-Ton-Prep)(Pers 3rd)(Num pl)(Gen F)	\"loro\" \"loro\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Pron-Personal|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Personal|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Manner| . |Poss|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base.Poss)	(ICat P-Suffix.Poss)(Gen M)(Num SG)word-forms(ICat P-Base.Poss)	(ICat P-Suffix.Poss)entry	(Pers 1st)(Num sg)	\"mi\" \"mi\" \"mie\"	ISRules	\"mi/mie\"	\"i\" (Num PL)entry	(Pers 2nd)(Num sg)	\"tu\" \"tu\" \"tuo\"	ISRules	\"tu/tuo\"	\"i\" (Num PL)entry	(Pers 3rd)(Num sg)	\"su\" \"su\" \"suo\"	ISRules	\"su/suo\"	\"i\" (Num PL)entry	(Pers 1st)(Num pl)	\"nostr\" \"nostr\"entry	(Pers 1st)(Num pl)	\"vostr\" \"vostr\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Pron-Poss|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat P-Base.Poss-Invar)	(ICat P-Suffix.Poss-Invar)(Gen M)(Num SG)word-forms(ICat P-Base.Poss-Invar)	(ICat P-Suffix.Poss-Invar)entry	(Pers 3rd)(Num pl)	LU \"bla\"	\"loro\" \"loro\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Pron-Poss-Invar|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat Poss)_	(ICat Poss-Invar)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |P-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(ICat Poss)(Num SG)(Gen M)\"+a\" \"a\"	(ICat Poss)(Num SG)(Gen F)\"+i\" \"i\"	(ICat Poss)(Num PL)(Gen M)\"+e\" \"e\"	(ICat Poss)(Num PL)(Gen F)\"+\" \"\"		(ICat Poss-Invar)(Num SG)(Gen M)\"+\" \"\"		(ICat Poss-Invar)(Num SG)(Gen F)\"+\" \"\"		(ICat Poss-Invar)(Num PL)(Gen M)\"+\" \"\"		(ICat Poss-Invar)(Num PL)(Gen F)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |P-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+isc)	(ICat V-Suffix.3rd)(Num SG)(Mod Ind)(Temp Pres)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Num PL)(Pers 1st)(Mod Ind)(Temp Pres)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Num PL)(Pers 2nd)(Mod Ind)(Temp Pres)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+isc)	(ICat V-Suffix.3rd)(Num PL)(Pers 3rd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg);ind.fut.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+isc)	(ICat V-Suffix.Other)(Num SG)(Mod Conj)(Temp Pres)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.Other)(Num PL)(Pers 1st)(Mod Conj)(Temp Pres)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.Other)(Num PL)(Pers 2nd)(Mod Conj)(Temp Pres)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+isc)	(ICat V-Suffix.Other)(Num PL)(Pers 3rd)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.3rd)	(ICat V-Infix.+isc)	(ICat V-Suffix.3rd)(Num SG)(Mod Imp)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Num PL)(Pers 1st)(Mod Imp)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Num PL)(Pers 2nd)(Mod Imp)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+isc)	(ICat V-Suffix.3rd)(Num PL)(Pers 3rd)(Mod Imp);gerundio(ICat V-Base.Pres.3rd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Part-Pres);part.pass.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+it.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)entry	\"fin\" \"fin\"entry	\"pul\" \"pul\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |3rd-Conjug-Infix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat 1st)(ICat Pres)_	(ICat 2nd)(ICat Pres)_	(ICat 3rd)(ICat Pres)_	(ICat Pass-Rem)(Decl Strong)_	(ICat Part-Pass)(Decl Strong)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+a\" \"a\"		(ICat +a)\"+e\" \"e\" \"ett\" \"\"	(ICat +e)\"+i\" \"i\"		(ICat +i)\"+isc\" \"isc\"		(ICat +isc)\"+at\" \"at\"		(ICat +at)(ICat Part-Pass)\"+ut\" \"ut\"		(ICat +ut)(ICat Part-Pass)\"+it\" \"it\"		(ICat +it)(ICat Part-Pass)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Infix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+re\" \"re\" \"r\"	(ICat +re)\"+r\" \"r\"	(ICat Apocope)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Inf|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Ind|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Pres|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(Num SG)(Pers 1st)\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+a\" \"a\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ate\" \"ate\"	(Num PL)(Pers 2nd)\"+ano\" \"ano\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |1st|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(Num SG)(Pers 1st)\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+e\" \"e\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ete\" \"ete\"	(Num PL)(Pers 2nd)\"+ono\" \"ono\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |2nd|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(Num SG)(Pers 1st)\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+e\" \"e\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ite\" \"ite\"	(Num PL)(Pers 2nd)\"+ono\" \"ono\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |3rd|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+vo\" \"vo\"	(Num SG)(Pers 1st)\"+vi\" \"vi\"	(Num SG)(Pers 2nd)\"+va\" \"va\"	(Num SG)(Pers 3rd)\"+vamo\" \"vamo\"	(Num PL)(Pers 1st)\"+vate\" \"vate\"	(Num PL)(Pers 2nd)\"+vano\" \"vano\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Impf|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+i\" \"i\"		(Num SG)(Pers 1st)\"+sti\" \"sti\"		(Num SG)(Pers 2nd)\"+ò\" \"ò\"		(Num SG)(Pers 3rd)(ICat 1st)\"+é\" \"é\" \"e\"		(Num SG)(Pers 3rd)(ICat 2nd)\"+ì\" \"ì\"		(Num SG)(Pers 3rd)(ICat 3rd)\"+mmo\" \"mmo\"		(Num PL)(Pers 1st)(ICat Reg)\"+ste\" \"ste\"		(Num PL)(Pers 2nd)(ICat Reg)\"+rono\" \"rono\" \"ero\"	(Num PL)(Pers 3rd)(ICat Reg)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Pass-Rem|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+rò\" \"rò\"	(Num SG)(Pers 1st)\"+rai\" \"rai\"	(Num SG)(Pers 2nd)\"+rà\" \"rà\"	(Num SG)(Pers 3rd)\"+remo\" \"remo\"	(Num PL)(Pers 1st)\"+rete\" \"rete\"	(Num PL)(Pers 2nd)\"+ranno\" \"ranno\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Fut|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Conj|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Pres|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+i\" \"i\"	(Num SG)(Pers 1st)\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+i\" \"i\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+iate\" \"iate\"	(Num PL)(Pers 2nd)\"+ino\" \"ino\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |1st|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+a\" \"a\"	(Num SG)(Pers 1st)\"+a\" \"a\"	(Num SG)(Pers 2nd)\"+a\" \"a\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+iate\" \"iate\"	(Num PL)(Pers 2nd)\"+ano\" \"ano\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Other|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+ssi\" \"ssi\"	(Num SG)(Pers 1st)\"+ssi\" \"ssi\"	(Num SG)(Pers 2nd)\"+sse\" \"sse\"	(Num SG)(Pers 3rd)\"+ssimo\" \"ssimo\"	(Num PL)(Pers 1st)\"+ste\" \"ste\"	(Num PL)(Pers 2nd)\"+ssero\" \"ssero\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Impf|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Cond|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+rei\" \"rei\"	(Num SG)(Pers 1st)\"+resti\" \"resti\"	(Num SG)(Pers 2nd)\"+rebbe\" \"rebbe\"	(Num SG)(Pers 3rd)\"+remmo\" \"remmo\"	(Num PL)(Pers 1st)\"+reste\" \"reste\"	(Num PL)(Pers 2nd)\"+rebbero\" \"rebbero\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Pres|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Imp|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+a\" \"a\"	(Num SG)(Pers 2nd)\"+i\" \"i\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ate\" \"ate\"	(Num PL)(Pers 2nd)\"+ino\" \"ino\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |1st|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+a\" \"a\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ete\" \"ete\"	(Num PL)(Pers 2nd)\"+ano\" \"ano\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |2nd|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+a\" \"a\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ite\" \"ite\"	(Num PL)(Pers 2nd)\"+ano\" \"ano\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |3rd|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+ando\" \"ando\"	(ICat 1st)\"+endo\" \"endo\"	(ICat Other)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Gerund|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+ante\" \"ante\" \"ant\"			(ICat 1st)\"+ente\" \"ente\" \"ent\"			(ICat 2nd)\"+ente\" \"ente\" \"iente\" \"ent\" \"ient\"	(ICat 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Part-Pres|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(Num SG)(Gen M)\"+a\" \"a\"	(Num SG)(Gen F)\"+i\" \"i\"	(Num PL)(Gen M)\"+e\" \"e\"	(Num PL)(Gen F)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Part-Pass|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Irregular|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |1st-Conjug|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem.(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg);ind.fut.(ICat V-Base.Pres.1st)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.1st)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.1st)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Imp);gerundio(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Gerund);part.pres.(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Part-Pres);part.pass.(ICat V-Base.Pres.1st)	(ICat V-Infix.+at.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules; andare\".*and\" (ICat V-Base)		\"e/\"	(Temp Fut)|(Mod Cond) ; andrò, andrebbe\"(.*)and/\\1vad\"			\"anno|ano|a|o\" (ICat V-Suffix)^(Mod Ind)(Temp Pres)(Pers 2nd)(Num PL) ; vado, vada, vadano (not andate)\"(.*)vad/\\1v\"			\"anno|a\" (Mod Ind)(Temp Pres)|(Mod Imp)(Pers 2nd) ; vanno, va, va!\"(.*)and/\\1va\"			\"i|’\" (Mod Ind)(Temp Pres)|(Mod Imp) ; vai, vai!, va’!entry	\"and\" \"and\" \"vad\" \"va\" \"v\"	(ICat V-Base)(ICat 1st)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Reg_PRem+Reg_PP|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem.(ICat V-Base.Pass-Rem)			(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.1st)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)			(ICat V-Suffix.Irreg)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.1st)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 1st)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pres.1st)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pass-Rem)			(ICat V-Suffix.Irreg)(Pers 3rd)(Num PL)(Mod Ind)(Temp Pass-Rem);ind.fut.(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.1st)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.1st)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.1st)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Imp);gerundio(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Gerund);part.pres.(ICat V-Base.Pres.1st)				(ICat V-Suffix.1st)(Mod Part-Pres);part.pass.(ICat V-Base.Pres.1st)	(ICat V-Infix.+at.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules\"(.*st|.*d)/\\1a\" (ICat 1st)		\"i|’\" (Mod Ind)(Temp Pres)|(Mod Imp) ; dai, stai\".*d\" (ICat 1st)			\"a/à\" (Mod Ind)(Temp Pres)(Pers 3rd)(Num SG) ; dà\".*.st\" (ICat 1st)			\"a/à\" (Mod Ind)(Temp Pres)(Pers 3rd)(Num SG) ; ristà, sottostà\".*.d|.*.st\" (ICat 1st)			\"o/ò\" (Mod Ind)(Temp Pres)(Pers 1st)(Num SG) ; ridò, soprastò\"(.*d|.*st)/\\1i\" (ICat 1st)		\"ano|a\" (Mod Conj)(Temp Pres)|(Mod Imp)^(Pers 2nd)\"(.*)died/\\1dett\"			(Temp Pass-Rem) value ; diede + detteentry	\"d\" \"d\" \"da\" \"di\"	(ICat V-Base)(ICat 1st)	\"died\" \"died\" \"dett\"	(ICat V-Base)(ICat Pass-Rem)entry	\"st\" \"st\" \"sta\" \"sti\"	(ICat V-Base)(ICat 1st)	\"stett\" \"stett\"		(ICat V-Base)(ICat Pass-Rem)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Irreg_PRem+Reg_PP|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |2nd-Conjug|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "; also for devolvere/devoluto and esigere/esatto, i.e. for the only examples with Reg Pass-Rem and Irreg- PP.; Irreg PP forms by entry ISRulescitation-forms(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem. regolare(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix.2nd)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg);ind.fut.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Imp);gerundio(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Part-Pres);part.pass.regolare(ICat V-Base.Pres.2nd)	(ICat V-Infix.+ut.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules\".*[^t]\" (ICat V-Base.2nd)	\"e/ett\"		\"i\" (ICat V-Suffix)(Temp Pass-Rem) value\".*[^t]\" (ICat V-Base.2nd)	\"e/ett\"		\"é/e\" (ICat V-Suffix)(Temp Pass-Rem) value\".*[^t]\" (ICat V-Base.2nd)	\"e/ett\"		\"rono/ero\" (ICat V-Suffix)(Temp Pass-Rem) value\".*\" (ICat V-Base.2nd)		\"e/\"		\"é\" (ICat V-Suffix)(Temp Pass-Rem); syncopated Fut/Cond\"pot|.*dov|.*god\" (ICat V-Base)	\"e/\"		(Temp Fut)|(Mod Cond) ; potrò; dovrò, godrò; Diphthong / \"ablaut\" with accentuated stem\"(.*)sed/\\1sied\"				\"a.*|o.*|[ie]\" (ICat V-Suffix) ; siedo, possiedi, soprassiede\"(.*)sed/\\1sied\"				\"e\"		(Temp Fut)|(Mod Cond) value ; sederò + siederò, possederei + possiederei; dovere\"(.*)dov/\\1dev\"					\"a.*|o.*|[ie]\" (ICat V-Suffix) ; devo, deve, ridevono\"(.*)dev/\\1debb\" (ICat V-Base)			\"a.*|o.*\" value ; deva + debba, devono + debbono\"(.*)dov/\\1dobb\" (ICat V-Base)			\"iamo|iate\" ; dobbiamo, dobbiateentry	\"god\" \"god\"		(ICat V-Base)(ICat 2nd)entry	\"pot\" \"pot\" \"poss\" \"puo\" \"può\"	(ICat V-Base)(ICat 2nd)	deleted-forms	(Mod Imp)	ISRules	\"pot/poss\"	\"[ao].*|iamo|iate\"	\"pot/puo\"	\"i\"	\"pot/può\"	\"e/\" (ICat V-Suffix)(Mod Ind)(Temp Pres)entry	\"dov\" \"dov\" \"dev\" \"dobb\" \"debb\"	(ICat V-Base)(ICat 2nd)	deleted-forms	(Mod Imp)			(Mod Part-Pres)entry	\"sed\" \"sed\" \"sied\"		(ICat V-Base)(ICat 2nd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Reg_PRem+Reg_PP|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem. irregolare(ICat V-Base.Pass-Rem)				(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Irreg)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 1st)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Irreg)(Pers 3rd)(Num PL)(Mod Ind)(Temp Pass-Rem);ind.fut.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Imp);gerundio(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Part-Pres);part.pass.regolare(ICat V-Base.Pres.2nd)	(ICat V-Infix.+ut.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules; syncopated Fut/Cond\".*cad|.*sap|.*av\" (ICat V-Base)		\"e/\"		(Temp Fut)|(Mod Cond) ; cadrò, saprò, avrò\"(.*)dol/\\1dor\" (ICat V-Base)			\"e/\"		(Temp Fut)|(Mod Cond) ; dorrò, condorrà etc.\"(.*)vol/\\1vor\" (ICat V-Base)			\"e/\"		(Temp Fut)|(Mod Cond) ; vorrò, rivorrà etc.\"(.*)ten/\\1ter\" (ICat V-Base)			\"e/\"		(Temp Fut)|(Mod Cond) ; terrò, conterrà, apparterrebbe etc.; syncopated Inf/Fut/Cond\"(.*)bev/\\1be\" (ICat V-Base)			\"e/\"		(Mod Inf) ; bevere/ bere\"(.*)bev/\\1ber\" (ICat V-Base)			\"e/\"		(Temp Fut)|(Mod Cond) ; bevere/ berrò; two stems present\"(.*ten|.*dol)/\\1g\" (ICat V-Base)		\"a.*|o.*\" ; tengo, mantenga, contengono etc.; dolgo\"(.*)vol/\\1vogli\" (ICat V-Base)			\"a.*|o.*\" ; voglio, voglia\"(.*ac)/\\1ci\" (ICat V-Base)			\"a.*|o.*\" ; piaccio, giaccia, tacciano; Diphthong / \"ablaut\" (with accentuated stem)\"(.*)vol/\\1vuol\"				\"[ie]\" (ICat V-Suffix)(Mod Ind)(Temp Pres) ; vuo(l)i, vuole\"(.*)ten/\\1tien\"				\"[ie]\" (ICat V-Suffix) ; tieni, appartiene\"(.*)dol/\\1duol\"				\"[ie]\" (ICat V-Suffix) ; duoli, duole; see also nuocere Entry-ISrules; More Individual Single Word-Forms; giacere, piacere, tacere\"(.*ac)/\\1c\" (ICat V-Base)			\"iamo|iate\" ; giacciamo, piacciate, tacciamo\"(.*tac)c/\\1\" (ICat V-Base)			\"iamo|iate\" value ; tacciamo + taciamo (Serianni p.371 §163 vs Garzanti s.v.); volere\"(.*)vol/\\1vogl\" (ICat V-Base)			\"iamo|iate|i\" ; vogliamo, vogliate, vogli (Imperative)\"(.*)vuol/\\1vuo\" (ICat V-Base)			\"i\" (Mod Ind)(Temp Pres) ; vuoi\".*vol/vogli\" (ICat V-Base)			\"ete/ate\" (Mod Imp) ; vogliateentry	\"sap\" \"sap\" \"s\" \"sa\" \"sapp\" \"sappi\"	(ICat V-Base)(ICat 2nd)	\"sepp\" \"sepp\"				(ICat V-Base)(ICat Pass-Rem)	ISRules	\"sap/s\"		\"o\" (Pers 1st)(Num SG)(Mod Ind)(Temp Pres)	\"sap/sa\"	\"i\" (Pers 2nd)(Num SG)(Mod Ind)(Temp Pres)	\"sap/sa\"	\"e/\" (Pers 3rd)(Num SG)(Mod Ind)(Temp Pres)	\"sap/sappi\"	\"iamo\" (Pers 1st)(Num PL)(Mod Ind)(Temp Pres)	\"sap/s\"		\"ono/anno\" (Pers 3rd)(Num PL)(Mod Ind)(Temp Pres)	\"sap/sappi\"	(Mod Conj)(Temp Pres)|(Mod Imp)	\"sappi\"		\"ete/ate\" (Mod Imp)(Pers 2nd)(Num PL)	\"sappi/sapp\"	\"i.*\"	\"sap\"		\"ente/iente\" (Mod Part-Pres)entry	\"av\" \"av\" \"h\" \"ha\" \"abb\" \"abbi\"	(ICat V-Base)(ICat 2nd)	\"ebb\" \"ebb\"			(ICat V-Base)(ICat Pass-Rem)	ISRules	\"av/h\"		\"o\" (Pers 1st)(Num SG)(Mod Ind)(Temp Pres)	\"av/ha\"		\"i\" (Pers 2nd)(Num SG)(Mod Ind)(Temp Pres)	\"av/ha\"		\"e/\" (Pers 3rd)(Num SG)(Mod Ind)(Temp Pres)	\"av/abbi\"	\"iamo\" (Pers 1st)(Num PL)(Mod Ind)(Temp Pres)	\"av/h\"		\"ono/anno\" (Pers 3rd)(Num PL)(Mod Ind)(Temp Pres)	\"av/abbi\"	(Mod Conj)(Temp Pres)|(Mod Imp)	\"abbi\"		\"ete/ate\" (Mod Imp)(Pers 2nd)(Num PL)	\"abbi/abb\"	\"i.*\"entry	\"cad\" \"cad\"		(ICat V-Base)(ICat 2nd)	\"cadd\" \"cadd\"		(ICat V-Base)(ICat Pass-Rem)entry	\"bev\" \"bev\" \"be\" \"ber\"	(ICat V-Base)(ICat 2nd)	\"bevv\" \"bevv\"		(ICat V-Base)(ICat Pass-Rem)entry	\"tac\" \"tac\" \"tacci\" \"tacc\" \"taci\"	(ICat V-Base)(ICat 2nd)	\"tacqu\" \"tacqu\"				(ICat V-Base)(ICat Pass-Rem)entry	\"piac\" \"piac\" \"piacci\" \"piacc\" \"piaci\"	(ICat V-Base)(ICat 2nd)	\"piacqu\" \"piacqu\"			(ICat V-Base)(ICat Pass-Rem)entry	\"vol\" \"vol\" \"vogli\" \"vuol\" \"vuo\" \"vogl\" \"vor\"	(ICat V-Base)(ICat 2nd)	\"voll\" \"voll\"					(ICat V-Base)(ICat Pass-Rem)entry	\"ten\" \"ten\" \"teng\" \"tien\" \"ter\"	(ICat V-Base)(ICat 2nd)	\"tenn\" \"tenn\"			(ICat V-Base)(ICat Pass-Rem)entry	\"conosc\" \"conosc\" \"conosci\"	(ICat V-Base)(ICat 2nd)	\"conobb\" \"conobb\"		(ICat V-Base)(ICat Pass-Rem)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Irreg_PRem+Reg_PP|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem. irregolare(ICat V-Base.Pass-Rem)				(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Irreg)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 1st)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Irreg)(Pers 3rd)(Num PL)(Mod Ind)(Temp Pass-Rem);ind.fut.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Imp);gerundio(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Part-Pres);part.pass.irregolare(ICat V-Base.Part-Pass)			(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules; syncopated Fut/Cond\".*viv|par\" (ICat V-Base)	\"e/\"		(Temp Fut)|(Mod Cond) ; vivrò, rivedremo; parrebbe\"(.*)man/\\1mar\" (ICat V-Base)			\"e/\"		(Temp Fut)|(Mod Cond) ; rimanere/rimarrò, permanere/permarrebbe\"(.*)val/\\1var\" (ICat V-Base)			\"e/\"		(Temp Fut)|(Mod Cond) ; varrò, rivarrà etc.; syncopated Inf/Fut/Cond\"(.*)dic/\\1di\" (ICat V-Base)			\"e/\"		(Mod Inf)|(Temp Fut)|(Mod Cond) ; dicere/dire, dirò,\"(.*)duc/\\1dur\" (ICat V-Base)			\"e/\"		(Mod Inf)|(Temp Fut)|(Mod Cond) ; conducere/condurre, condurrò (ibid. ad-, de-, in-, intro-, pro-, ricon-, ripro-, se-, tra-durre)\"(.*)pon/\\1por\" (ICat V-Base)			\"e/\"		(Mod Inf)|(Temp Fut)|(Mod Cond) ; porre, porrò (com-, ante-, contra-, de-, dis-, es- etc -porre)\"(.*)tra/\\1trar\" (ICat V-Base)			\"e/\"		(Mod Inf)|(Temp Fut)|(Mod Cond) ; trarre, trarró (as-, at-, con-, de-, dis, pro-, ri- etc. -porre)\"(.*)fac/\\1fa\" (ICat V-Base)			\"e/\"		(Mod Inf)|(Temp Fut)|(Mod Cond) ; facere/fare, rifarò, disfarebbe etc.; two stems present\"(.*man|.*val|.*pon)/\\1g\"		\"a.*|o.*\"; rimango, permangano etc.; valgo, prevalga etc.; pongo, compongono, opponga etc.; dolgo; \"(.*)gli/\\1lg\" (ICat V-Base)			\"a.*|o.*\" ; scegliere/scelgo, cogliere/colga, togliere/tolgano, sciogliere/sciolga\"(.*)gn/\\1ng\" (ICat V-Base)			\"a.*|o.*\" ; spegnere/spengo, spenga, spengono\"(.*)gli/\\1gl\" (ICat V-Base)			\"i.*\" ;	scegliere/scegl-i, cogliere/cogl-ino, togliere/togl-iamo, sciogliere/sciogl-i\"(.*)tra/\\1tragg\" (ICat V-Base)			\"a.*|o.*\" ; traggo, ritragga, sotraggono, etc.\"(.*)fac/\\1facci\" (ICat V-Base)			\"ano|[ao]\" ; faccio, rifaccia, \"(.*)fac/\\1facc\" (ICat V-Base)			\"iamo|iate\" ; facciamo, disfacciate etc.; Diphthong / \"ablaut\" with accentuated stem\"(.*)uo(.*)/\\1o\\2\"				\"e\" (ICat V-Infix)	(ICat V-Suffix)^(Mod Inf) value ; cocevo +cuocevo, muovessi + movessi, scuoterò + scoterò,\"(.*)uo(.*)/\\1o\\2\"				\"iamo|ete|iate|endo|ente\" (ICat V-Suffix) value ; cuociamo + cociamo, muovate + movate, scuotete + scotete,; More Individual Single Word-Forms; dire\"(.*)dic/\\1di\"					\"ete/te\" (Mod Ind)(Temp Pres)(Pers 2nd)(Num PL)|(Mod Imp)(Pers 2nd)(Num PL) ; dicete/dite\"(r?i?)dic/\\1di\"				\"i/’\" (Mod Imp)(Pers 2nd)(Num SG); cuocere\"(.*cuoc)/\\1i\" (ICat V-Base)			\"a.*|o.*\"; fare\"(.*)fac/\\1fa\" (ICat V-Base)				\"i\" (Pers 2nd)(Num SG)(Mod Ind)(Temp Pres)|(Pers 2nd)(Num SG)(Mod Imp)\"(.*)fac/\\1fa\" (ICat V-Base)				\"e/\" (Pers 3rd)(Num SG)(Mod Ind)(Temp Pres)\"(.*)fac/\\1fa\" (ICat V-Base)				\"ete/te\" (Pers 2nd)(Num PL)\"(.*)fac/\\1f\" (ICat V-Base)				\"ono/anno\" (Pers 3rd)(Num PL)(Mod Ind)(Temp Pres)\"(.*)fa\" (ICat V-Base)				\"i/\" (Pers 2nd)(Num SG)(Mod Imp) value ; fai + fa!\"(.*)fa\" (ICat V-Base)				\"i/’\" (Pers 2nd)(Num SG)(Mod Imp) value ; fai + fa’;;;    ; return infinitive syncope with cons+re;;;    \".*r\" (ICat V-Base)	\"\" (ICat V-Infix)	\"r/re\" (Mod Inf)(ICat Apocope) ; condurr/condurre (condur ???)entry	\"fac\" \"fac\" \"fa\" \"facci\" \"facc\" \"f\"	(ICat V-Base)(ICat 2nd)	\"fec\" \"fec\"			(ICat V-Base)(ICat Pass-Rem)	\"fatt\" \"fatt\"		(ICat V-Base)(ICat Part-Pass)entry	\"soddisfac\" \"soddisfac\" \"soddisfa\" \"soddisfacci\" \"soddisfacc\" \"soddisf\" \"soddisfà\"	(ICat V-Base)(ICat 2nd)	\"soddisfec\" \"soddisfec\"			(ICat V-Base)(ICat Pass-Rem)	\"soddisfatt\" \"soddisfatt\"		(ICat V-Base)(ICat Part-Pass)	ISRules	\"soddisfacci/soddisf\"	\"o\" (Mod Ind)(Temp Pres) value	\"soddisfacci/soddisf\"	\"o/ò\" (Mod Ind)(Temp Pres) value	\"soddisfa/soddisf\"	\"i\" (Mod Ind)(Temp Pres) value;;;    	\"soddisfa/soddisfà\"	\"\" (Mod Ind)(Temp Pres) value	\"soddisf\"		\"anno/ano\" (Mod Ind)(Temp Pres) value	\"soddisfacci/soddisf\"	\"a(.*)/i\\1\" (Mod Conj)(Temp Pres) value ; soddisfi, soddisfino	\"soddisfa/soddisfe\"	(Temp Fut)|(Mod Cond) valueentry	\"legg\" \"legg\" \"leggi\"	(ICat V-Base)(ICat 2nd)	\"less\" \"less\"		(ICat V-Base)(ICat Pass-Rem)	\"lett\" \"lett\"		(ICat V-Base)(ICat Part-Pass)entry	\"discut\" \"discut\"	(ICat V-Base)(ICat 2nd)	\"discuss\" \"discuss\"	(ICat V-Base)(ICat Pass-Rem)	\"discuss\" \"discuss\"	(ICat V-Base)(ICat Part-Pass)entry	\"prend\" \"prend\"		(ICat V-Base)(ICat 2nd)	\"pres\" \"pres\"		(ICat V-Base)(ICat Pass-Rem)	\"pres\" \"pres\"		(ICat V-Base)(ICat Part-Pass)entry	\"par\" \"par\" \"pai\" \"pa\" \"parv\"	(ICat V-Base)(ICat 2nd)	\"parv\" \"parv\"		(ICat V-Base)(ICat Pass-Rem)	\"pars\" \"pars\"		(ICat V-Base)(ICat Part-Pass)	ISRules	\"par/pai\"	\"[ao].*\"	\"par/pa\"	\"iamo|iate\"	\"par/parv\"	\"ente\"entry	\"pon\" \"pon\" \"por\" \"pong\"	(ICat V-Base)(ICat 2nd)	\"pos\" \"pos\"			(ICat V-Base)(ICat Pass-Rem)	\"post\" \"post\"			(ICat V-Base)(ICat Part-Pass)entry	\"val\" \"val\" \"valg\" \"var\"	(ICat V-Base)(ICat 2nd)	\"vals\" \"vals\"			(ICat V-Base)(ICat Pass-Rem)	\"vals\" \"vals\"			(ICat V-Base)(ICat Part-Pass)entry	\"cogli\" \"cogli\" \"cogl\" \"colg\"	(ICat V-Base)(ICat 2nd)	\"cols\" \"cols\"			(ICat V-Base)(ICat Pass-Rem)	\"colt\" \"colt\"			(ICat V-Base)(ICat Part-Pass)entry	\"scegli\" \"scegli\" \"scegl\" \"scelg\"	(ICat V-Base)(ICat 2nd)	\"scels\" \"scels\"			(ICat V-Base)(ICat Pass-Rem)	\"scelt\" \"scelt\"			(ICat V-Base)(ICat Part-Pass)entry	\"togli\" \"togli\" \"togl\" \"tolg\"	(ICat V-Base)(ICat 2nd)	\"tols\" \"tols\"			(ICat V-Base)(ICat Pass-Rem)	\"tolt\" \"tolt\"			(ICat V-Base)(ICat Part-Pass)entry	\"dic\" \"dic\" \"di\" \"dici\"	(ICat V-Base)(ICat 2nd)	\"diss\" \"diss\"		(ICat V-Base)(ICat Pass-Rem)	\"dett\" \"dett\"		(ICat V-Base)(ICat Part-Pass);;;    ; -durre = inexistent entry, needed as base for prefixed derivatives condurre, addurre, tradurre, produrre etc.;;;    entry	LU \"void\";;;    	\"duc\" \"duc\" \"dur\" \"duci\"	(ICat V-Base)(ICat 2nd);;;    	\"duss\" \"duss\"			(ICat V-Base)(ICat Pass-Rem);;;    	\"dott\" \"dott\"			(ICat V-Base)(ICat Part-Pass)entry	\"viv\" \"viv\"		(ICat V-Base)(ICat 2nd)	\"viss\" \"viss\"		(ICat V-Base)(ICat Pass-Rem)	\"viss+ut\" \"vissut\"	(ICat V-Base)(ICat Part-Pass)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Irreg_PRem+Irreg_PP|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "; for all verbs of 2nd conjugation with regular and irregular forms for pass. rem and/or part. pass; non existing forms have to be deleted.citation-forms(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem. regolare + irregolare(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)				(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix.2nd)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Irreg)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 1st)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 2nd)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Pers 3rd)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Irreg)(Pers 3rd)(Num PL)(Mod Ind)(Temp Pass-Rem);ind.fut.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Imp);gerundio(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Part-Pres);part.pass.regolare(ICat V-Base.Pres.2nd)	(ICat V-Infix.+ut.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass);part.pass.irregolare(ICat V-Base.Part-Pass)			(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules; regulat pass-rem-forms in -ett-\".*[^t]\" (ICat V-Base.2nd)	\"e/ett\"		\"i\" (ICat V-Suffix)(Temp Pass-Rem) value\".*[^t]\" (ICat V-Base.2nd)	\"e/ett\"		\"é/e\" (ICat V-Suffix)(Temp Pass-Rem) value\".*[^t]\" (ICat V-Base.2nd)	\"e/ett\"		\"rono/ero\" (ICat V-Suffix)(Temp Pass-Rem) value\".*\" (ICat V-Base.2nd)		\"e/\"		\"é\" (ICat V-Suffix)(Temp Pass-Rem); syncopated Fut/Cond\"rived|avved|ved\" (ICat V-Base)	\"e/\"		(Temp Fut)|(Mod Cond) ; vedrò, rivedrebbe, avvedràentry	\"perd\" \"perd\"		(ICat V-Base)(ICat 2nd)	\"pers\" \"pers\"		(ICat V-Base)(ICat Pass-Rem)	\"pers\" \"pers\"		(ICat V-Base)(ICat Part-Pass)entry	\"ved\" \"ved\"		(ICat V-Base)(ICat 2nd)	\"vid\" \"vid\"		(ICat V-Base)(ICat Pass-Rem)	\"vist\" \"vist\"		(ICat V-Base)(ICat Part-Pass)	deleted-forms	(Temp Pass-Rem)(Pers 1st)(Num SG)	1			(Temp Pass-Rem)(Pers 1st)(Num SG)	2			(Temp Pass-Rem)(Pers 3rd)(Num SG)	1			(Temp Pass-Rem)(Pers 3rd)(Num SG)	2			(Temp Pass-Rem)(Pers 3rd)(Num PL)	1			(Temp Pass-Rem)(Pers 3rd)(Num PL)	2" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Reg+Irreg_PRem/PP|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.2nd)	(ICat V-Infix.+e)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.2nd)				(ICat V-Suffix)(Mod Ind)(Temp Impf)(Num SG)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Ind)(Temp Impf)(Pers 1st)(Num PL)(ICat V-Base.Pres.2nd)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Ind)(Temp Impf)(Pers 2nd)(Num PL)(ICat V-Base.Pres.2nd)				(ICat V-Suffix)(Mod Ind)(Temp Impf)(Pers 3rd)(Num PL);ind.pass-rem. irregolare(ICat V-Base.Pass-Rem)				(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)				(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Irreg)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Reg)(Mod Ind)(Temp Pass-Rem);ind.fut.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.2nd)				(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.2nd)	(ICat V-Infix.+a)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Imp);gerundio(ICat V-Base.Pres.2nd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.2nd)				(ICat V-Suffix.2nd)(Mod Part-Pres);part.pass.irregolare(ICat V-Base.Part-Pass)			(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules\"ess/son\"		\"o\" (Mod Ind)(Temp Pres)\"ess/se\"		\"i\" (Mod Ind)(Temp Pres)\"ess/è\"			\"e/\" (Mod Ind)(Temp Pres)\"ess/s\"			\"iamo|iate\"\"ess/si\"		\"ete\" (Mod Ind)(Temp Pres)\"ess/s\"			\"ono\" (Mod Ind)(Temp Pres)\"ess/er\"	\"a\"	(Mod Ind)(Temp Impf)\"ess/er\"		(Mod Ind)(Temp Impf)\"er\"			\"v(.*)/\\1\" (Mod Ind)(Temp Impf)\"fu\"			\"e/\" (Temp Pass-Rem)\"fu/fo\"			\"s.*\" (Temp Pass-Rem)\"ess/s\"		\"a\"	(Temp Fut)|(Mod Cond)\"ess/si\"		\"a.*\" (Mod Conj)(Temp Pres)|(Mod Imp)\"ess/fo\"		(Mod Conj)(Temp Impf)\"ess/si\"		\"ete/ate\" (Mod Imp)\"ess/si\"		\"i\" (Mod Imp)entry	\"ess\" \"ess\" \"son\" \"se\" \"è\" \"s\" \"si\" \"er\" \"fo\"	(ICat V-Base)(ICat 2nd)	\"fu\" \"fu\" \"fo\"		(ICat V-Base)(ICat Pass-Rem)	\"stat\" \"stat\"		(ICat V-Base)(ICat Part-Pass)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |essere|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |3rd-Conjug|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg);ind.fut.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Imp);gerundio(ICat V-Base.Pres.3rd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Part-Pres);part.pass.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+it.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules; sincopatet future\".*ud\" (ICat V-Base)		\"i/\"		(Temp Fut)|(Mod Cond) value ; udiro + udrò; two stems-present\"(.*sal)/\\1g\" (ICat V-Base)			\"[ao].*\" (ICat V-Suffix) ; salire/salgo, assalgano,\"(.*)ud/\\1od\" (ICat V-Base)			\"[ao].*|[ei]\" (ICat V-Suffix) ; udire/odo, odano, oda, odi, ode\"(.*)usc/\\1esc\" (ICat V-Base)			\"[ao].*|[ei]\" (ICat V-Suffix) ; uscire/esco, escano, riesca, esci, riesce; cucire\"(.*cuc)/\\1i\" (ICat V-Base)			\"[ao].*\" (ICat V-Suffix) ; cucio, scucia, ricuciono; udire\".*ud\" (ICat V-Base)		\"ente/iente\" (Mod Part-Pres) value ; udente + udienteentry	\"sal\" \"sal\" \"salg\"	(ICat V-Base)entry	\"ud\" \"ud\" \"od\"		(ICat V-Base)entry	\"usc\" \"usc\" \"esc\"	(ICat V-Base)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Reg_PRem+Reg_PP|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "; includes apparire, comparire, disparire, scomparire. The regular forms on -isc- have to be inserted in regular IRule (different \"morphological lexemes\")citation-forms(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix.+re)(Mod Inf)word-forms;infinito(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Inf);ind.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Ind)(Temp Pres);ind.impf.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Ind)(Temp Impf);ind.pass-rem.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)				(ICat V-Suffix)(Pers 1st)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 2nd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Irreg)(Pers 3rd)(Num SG)(Mod Ind)(Temp Pass-Rem)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 1st)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 2nd)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Pers 3rd)(Num PL)(Mod Ind)(Temp Pass-Rem)(ICat Reg)(ICat V-Base.Pass-Rem)				(ICat V-Suffix.Irreg)(Pers 3rd)(Num PL)(Mod Ind)(Temp Pass-Rem);ind.fut.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Ind)(Temp Fut);congiunt.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.Other)(Mod Conj)(Temp Pres);congiunt.impf.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Conj)(Temp Impf);cond.pres.(ICat V-Base.Pres.3rd)	(ICat V-Infix.+i)	(ICat V-Suffix)(Mod Cond)(Temp Pres);imperativo(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Imp);gerundio(ICat V-Base.Pres.3rd)				(ICat V-Suffix.Other)(Mod Gerund);part.pres.(ICat V-Base.Pres.3rd)				(ICat V-Suffix.3rd)(Mod Part-Pres);part.pass. regolare(ICat V-Base.Pres.3rd)	(ICat V-Infix.+it.Part-Pass)	(ICat V-Suffix)(Mod Part-Pass);part.pass.irregolare(ICat V-Base.Part-Pass)			(ICat V-Suffix)(Mod Part-Pass)paradigms(Mod Inf)(Mod Ind)(Temp Pres)(Mod Ind)(Temp Impf)(Mod Ind)(Temp Pass-Rem)(Mod Ind)(Temp Fut)(Mod Conj)(Temp Pres)(Mod Conj)(Temp Impf)(Mod Cond)(Temp Pres)(Mod Imp)(Mod Gerund)(Mod Part-Pres)(Mod Part-Pass)ISRules; syncopated fut/cond:\"(.*)ven/\\1ver\" (ICat V-Base)		\"i/\"		(Temp Fut)|(Mod Cond) ; verrò, converrà, avverrebbe etc.\"(.*)mor\" (ICat V-Base)			\"i/\"		(Temp Fut)|(Mod Cond) value ; morrò + morirò, morrebbe + morirebbe; two stems present\"(.*ven)/\\1g\" (ICat V-Base)		\"a.*|o.*\" ; vengo, convenga etc.\"(.*)mor/\\1muoi\" (ICat V-Base)		\"a.*|o.*\" ; muoio, muoiano etc.\"(.*)par/\\1pai\" (ICat V-Base)		\"a.*|o.*\" ; appaio, compaiono, scompaia etc.; Diphthong (with accentuated stem)\"(.*)ven/\\1vien\"				\"[ie]\" (ICat V-Suffix) ; vieni, avviene\"(.*)mor/\\1muor\"				\"[ie]\" (ICat V-Suffix) ; muori, muore; Part-Pres\"(.*off)r/\\1er\" (ICat V-Base)		\"ente\" (Mod Part-Pres) ; sofferente, offerente,\".*ven\" (ICat V-Base)			\"ente/iente\" (Mod Part-Pres)entry	\"apr\" \"apr\"		(ICat V-Base)(ICat 3rd)	\"apers\" \"apers\"		(ICat V-Base)(ICat Pass-Rem)	\"apert\" \"apert\"		(ICat V-Base)(ICat Part-Pass)	deleted-forms	(Mod Part-Pass)(Num SG)(Gen M)	1			(Mod Part-Pass)(Num SG)(Gen F)	1			(Mod Part-Pass)(Num PL)(Gen M)	1			(Mod Part-Pass)(Num PL)(Gen F)	1entry	\"copr\" \"copr\"		(ICat V-Base)(ICat 3rd)	\"copers\" \"copers\"	(ICat V-Base)(ICat Pass-Rem)	\"copert\" \"copert\"	(ICat V-Base)(ICat Part-Pass)	deleted-forms	(Mod Part-Pass)(Num SG)(Gen M)	1			(Mod Part-Pass)(Num SG)(Gen F)	1			(Mod Part-Pass)(Num PL)(Gen M)	1			(Mod Part-Pass)(Num PL)(Gen F)	1entry	\"offr\" \"offr\" \"offer\"	(ICat V-Base)(ICat 3rd)	\"offers\" \"offers\"	(ICat V-Base)(ICat Pass-Rem)	\"offert\" \"offert\"	(ICat V-Base)(ICat Part-Pass)	deleted-forms	(Mod Part-Pass)(Num SG)(Gen M)	1			(Mod Part-Pass)(Num SG)(Gen F)	1			(Mod Part-Pass)(Num PL)(Gen M)	1			(Mod Part-Pass)(Num PL)(Gen F)	1entry	\"soffr\" \"soffr\" \"soffer\"	(ICat V-Base)(ICat 3rd)	\"soffers\" \"soffers\"		(ICat V-Base)(ICat Pass-Rem)	\"soffert\" \"soffert\"		(ICat V-Base)(ICat Part-Pass)	deleted-forms	(Mod Part-Pass)(Num SG)(Gen M)	1			(Mod Part-Pass)(Num SG)(Gen F)	1			(Mod Part-Pass)(Num PL)(Gen M)	1			(Mod Part-Pass)(Num PL)(Gen F)	1entry	\"ven\" \"ven\" \"veng\" \"vien\" \"ver\"	(ICat V-Base)(ICat 3rd)	\"venn\" \"venn\"		(ICat V-Base)(ICat Pass-Rem)	\"ven+ut\" \"venut\"	(ICat V-Base)(ICat Part-Pass)	deleted-forms	(Mod Part-Pass)(Num SG)(Gen M)	1			(Mod Part-Pass)(Num SG)(Gen F)	1			(Mod Part-Pass)(Num PL)(Gen M)	1			(Mod Part-Pass)(Num PL)(Gen F)	1			(Temp Pass-Rem)(Pers 1st)(Num SG)	1			(Temp Pass-Rem)(Pers 3rd)(Num SG)	1			(Temp Pass-Rem)(Pers 3rd)(Num PL)	1entry	\"mor\" \"mor\" \"muoi\" \"muor\"	(ICat V-Base)(ICat 3rd)	\"xmorx\" \"xmorx\"			(ICat V-Base)(ICat Pass-Rem)	\"mort\" \"mort\"			(ICat V-Base)(ICat Part-Pass)	deleted-forms	(Mod Part-Pass)(Num SG)(Gen M)	1			(Mod Part-Pass)(Num SG)(Gen F)	1			(Mod Part-Pass)(Num PL)(Gen M)	1			(Mod Part-Pass)(Num PL)(Gen F)	1			(Temp Pass-Rem)(Pers 1st)(Num SG)	2			(Temp Pass-Rem)(Pers 3rd)(Num SG)	2			(Temp Pass-Rem)(Pers 3rd)(Num PL)	2" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Reg+Irreg_PRem/PP|)) :MOD2-P T) NIL NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(ICat 1st)(ICat Pres)_	(ICat 2nd)(ICat Pres)_	(ICat Pass-Rem)(Decl Strong)_	(ICat Part-Pass)(Decl Strong)_	(ICat 3rd)(ICat Pres)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+a\" \"a\"		(ICat +a)\"+e\" \"e\" \"\" \"ett\"	(ICat +e)\"+i\" \"i\" \"\"		(ICat +i)\"+isc\" \"isc\"		(ICat +isc)\"+at\" \"at\"		(ICat +at)(ICat Part-Pass)\"+ut\" \"ut\"		(ICat +ut)(ICat Part-Pass)\"+it\" \"it\"		(ICat +it)(ICat Part-Pass)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Infix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |V-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+re\" \"re\"	(ICat +re)\"+r\" \"re\" \"r\"	(ICat Apocope)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Inf|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Ind|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Pres|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\" \"ò\"	(Num SG)(Pers 1st)\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+a\" \"a\" \"à\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ate\" \"ate\"	(Num PL)(Pers 2nd)\"+anno\" \"anno\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |1st|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\" \"ò\"		(Num SG)(Pers 1st)\"+i\" \"i\"		(Num SG)(Pers 2nd)\"+e\" \"e\" \"\"		(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"		(Num PL)(Pers 1st)\"+ete\" \"ete\" \"te\"	(Num PL)(Pers 2nd)\"+ono\" \"ono\" \"anno\" \"ano\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |2nd|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(Num SG)(Pers 1st)\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+e\" \"e\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ite\" \"ite\"	(Num PL)(Pers 2nd)\"+ono\" \"ono\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |3rd|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+vo\" \"vo\" \"o\"	(Num SG)(Pers 1st)\"+vi\" \"vi\" \"i\"	(Num SG)(Pers 2nd)\"+va\" \"va\" \"a\"	(Num SG)(Pers 3rd)\"+vamo\" \"vamo\"	(Num PL)(Pers 1st)\"+vate\" \"vate\"	(Num PL)(Pers 2nd)\"+vano\" \"vano\" \"ano\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Impf|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+i\" \"i\"	(Num SG)(Pers 1st)\"+sti\" \"sti\"	(Num SG)(Pers 2nd)\"+ò\" \"ò\"	(Num SG)(Pers 3rd)(ICat 1st)\"+é\" \"é\" \"e\"	(Num SG)(Pers 3rd)(ICat 2nd)\"+ì\" \"ì\"	(Num SG)(Pers 3rd)(ICat 3rd)\"+mmo\" \"mmo\"	(Num PL)(Pers 1st)(ICat Reg)\"+ste\" \"ste\"	(Num PL)(Pers 2nd)(ICat Reg)\"+rono\" \"rono\" \"ero\"	(Num PL)(Pers 3rd)(ICat Reg)\"+e\" \"e\" \"\"	(Num SG)(Pers 3rd)(ICat Irreg)\"+ero\" \"ero\"	(Num PL)(Pers 3rd)(ICat Irreg)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Pass-Rem|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+rò\" \"rò\"	(Num SG)(Pers 1st)\"+rai\" \"rai\"	(Num SG)(Pers 2nd)\"+rà\" \"rà\"	(Num SG)(Pers 3rd)\"+remo\" \"remo\"	(Num PL)(Pers 1st)\"+rete\" \"rete\"	(Num PL)(Pers 2nd)\"+ranno\" \"ranno\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Fut|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Conj|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Pres|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+i\" \"i\"	(Num SG)(Pers 1st)\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+i\" \"i\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+iate\" \"iate\"	(Num PL)(Pers 2nd)\"+ino\" \"ino\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |1st|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+a\" \"a\" \"i\"	(Num SG)(Pers 1st)\"+a\" \"a\" \"i\"	(Num SG)(Pers 2nd)\"+a\" \"a\" \"i\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+iate\" \"iate\"	(Num PL)(Pers 2nd)\"+ano\" \"ano\" \"ino\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Other|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+ssi\" \"ssi\"	(Num SG)(Pers 1st)\"+ssi\" \"ssi\"	(Num SG)(Pers 2nd)\"+sse\" \"sse\"	(Num SG)(Pers 3rd)\"+ssimo\" \"ssimo\"	(Num PL)(Pers 1st)\"+ste\" \"ste\"	(Num PL)(Pers 2nd)\"+ssero\" \"ssero\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Impf|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Cond|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+rei\" \"rei\"	(Num SG)(Pers 1st)\"+resti\" \"resti\"	(Num SG)(Pers 2nd)\"+rebbe\" \"rebbe\"	(Num SG)(Pers 3rd)\"+remmo\" \"remmo\"	(Num PL)(Pers 1st)\"+reste\" \"reste\"	(Num PL)(Pers 2nd)\"+rebbero\" \"rebbero\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Temp| . |Pres|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Imp|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+a\" \"a\"	(Num SG)(Pers 2nd)\"+’\" \"’\"	(Num SG)(Pers 2nd)\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+a\" \"a\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ate\" \"ate\"	(Num PL)(Pers 2nd)\"+ano\" \"ano\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |1st|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+i\" \"i\" \"’\" \"\"		(Num SG)(Pers 2nd)\"+a\" \"a\"		(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"		(Num PL)(Pers 1st)\"+ete\" \"ete\" \"te\" \"ate\"	(Num PL)(Pers 2nd)\"+ano\" \"ano\"		(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |2nd|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+i\" \"i\"	(Num SG)(Pers 2nd)\"+a\" \"a\"	(Num SG)(Pers 3rd)\"+iamo\" \"iamo\"	(Num PL)(Pers 1st)\"+ite\" \"ite\"	(Num PL)(Pers 2nd)\"+ano\" \"ano\"	(Num PL)(Pers 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |3rd|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+ando\" \"ando\"	(ICat 1st)\"+endo\" \"endo\"	(ICat Other)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Gerund|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+ante\" \"ante\" \"ant\"			(ICat 1st)\"+ente\" \"ente\" \"iente\" \"ent\" \"ient\"	(ICat 2nd)\"+ente\" \"ente\" \"iente\" \"ent\" \"ient\"	(ICat 3rd)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Part-Pres|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(Num SG)(Gen M)\"+a\" \"a\"	(Num SG)(Gen F)\"+i\" \"i\"	(Num PL)(Gen M)\"+e\" \"e\"	(Num PL)(Gen F)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Mod| . |Part-Pass|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Prep|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Adv|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Adv)word-forms(ICat Adv)entry	\"infatti\" \"infatti\"entry	\"molto\" \"molto\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Adverb|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Adv|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Prep-Entered)word-forms(ICat Prep-Entered)entry	\"per\" \"per\"entry	\"sotto\" \"sotto\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Prep-Entered|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Prep-Coded)word-forms(ICat Prep-Coded)entry	\"a\" \"a\"entry	\"con\" \"con\" \"co\"entry	\"da\" \"da\"entry	\"di\" \"di\" \"de\"entry	\"in\" \"in\" \"ne\"entry	\"su\" \"su\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Prep-Coded|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Prep-Entered|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Prep-Coded|)) :MOD2-P T) NIL NIL NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Art|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(Cat Def)word-forms(Cat Def)paradigms(Cat Def)entry	(Gen M)(Num SG)	\"il\" \"il\" \"l\"entry	(Num SG)(Gen M)	\"lo\" \"lo\" \"llo\"entry	(Num SG)(Gen M)(ICat Elision)	\"l’\" \"l’\" \"ll’\"entry	(Num SG)(Gen F)	LU \"bla\"	\"la\" \"la\" \"lla\"entry	(Num SG)(Gen F)(ICat Elision)	\"l’\" \"l’\" \"ll’\"entry	(Num PL)(Gen M)	\"i\" \"i\"entry	(Num PL)(Gen M)	\"gli\" \"gli\"entry	(Num PL)(Gen M)(ICat Elision)	\"gl’\" \"gl’\"entry	(Num PL)(Gen F)	\"le\" \"le\" \"lle\"entry	(Num PL)(Gen F)(ICat Elision)	\"l’\" \"l’\" \"ll’\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Art-Def|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(Cat Indef)(ICat Art-Base)	(ICat Art-Suffix)(Gen M)(Num SG)(ICat Full-Form)word-forms(Cat Indef)(ICat Art-Base)	(ICat Art-Suffix)paradigms(Cat Indef)entry	\"un\" \"un\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|IIRule| . |Art-Indef|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Def|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_	(Cat Indef)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Art-Base|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "fully specified IFormatives\"+o\" \"o\"	(Gen M)(Num SG)(ICat Full-Form)\"+\" \"\"		(Gen M)(Num SG)(ICat Apocope)\"+a\" \"a\"	(Gen F)(Num SG)(ICat Full-Form)\"+’\" \"’\"	(Gen M)(Num SG)(ICat Elision)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Art-Suffix|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|Cat| . |Conjunct|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Conjunct)word-forms(ICat Conjunct)entry	\"e\" \"e\"entry	\"o\" \"o\"entry	\"ma\" \"ma\"entry	\"siccome\" \"siccome\"" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |Conjunct|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "underspecified IFormatives_" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|ICat| . |Conjunct|)) :MOD2-P T) NIL NIL NIL NIL NIL NIL NIL #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |N-Invariable|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Invariable.N-Base)		(ICat Invariable.N-Suffix.Underspec)(Num SG)word-forms(ICat Invariable.N-Base)		(ICat Invariable.N-Suffix.Underspec)(Num SG)(ICat Invariable.N-Base)		(ICat Invariable.N-Suffix.Underspec)(Num PL)paradigms(Cat N)entry	(Gen F)	\"speci\" \"speci\" \"spec\"	(ICat N-Base)	\"+e\" \"e\"		(ICat N-Suffix)(Num SG)	\"+e\" \"e\"		(ICat N-Suffix)(Num PL)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |ISuffix-Underspecified|)) :MOD2-P T) #[INFLECTION-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "citation-forms(ICat Invariable.N-Base)		(ICat Invariable.N-Suffix.Empty)(Num SG)word-forms(ICat Invariable.N-Base)		(ICat Invariable.N-Suffix.Empty)(Num SG)(ICat Invariable.N-Base)		(ICat Invariable.N-Suffix.Empty)(Num PL)paradigms(Cat N)entry	(Gen F)	\"città\" \"città\"		(ICat N-Base)" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|RIRule| . |ISuffix-Empty|)) :MOD2-P T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :ELEMENTS-FREE-LIST #*0000100100000011110011000001110000000000000000010000010110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000111000000000111111100011111111111111111111111111111111111111111 :ELEMENTS-EXTEND-SIZE 50 :TREE ((ROOT 0 42 18 190 92 180 179 196) (0 1 13 30) (1 2 11 12) (2 3 5 6 8 9 10) (13 206 22) (22 23 24) (24 25 26) (30 31 34 37 40 41) (31 32 33) (34 35 36) (37 38 39) (42 43 68 84) (43 44 52 58) (44 45 50 51) (45 46 48 49) (52 54 57) (58 59 64 65 66 67) (59 60 61 62 63) (68 69 79) (69 70 71 72 73 74 75 76 77 78) (79 80 81 82 83) (84 85 86 87 88) (92 93 103 106) (93 94 95 96 97 98 99 100 101 102) (103 104 105) (106 107 108 109 110) (18 19 138) (19 89 90 91 111 112 113 114) (114 115 116 124 129 131 135 136 137) (116 117 121 122 123) (117 118 119 120) (124 125 128) (125 126 127) (129 130) (131 132 133 134) (138 139 142 148 153 154 155) (139 140 141) (142 143 144 145 146 147) (148 149 150) (155 156 157 165 170 172 176 177 178) (157 158 162 163 164) (158 159 160 161) (165 166 169) (166 167 168) (170 171) (172 173 174 175) (180 181 182) (179 183 184 185 186) (190 191 192 193 194 195) (196 197 198) (206 207 208)) :COLLAPSED-SUBTREES (0 1 2 13 22 24 30 31 34 37 42 43 44 45 52 58 59 68 69 79 84 92 93 103 106 18 19 114 116 117 124 125 129 131 138 139 142 148 155 157 158 165 166 170 172 180 179 190 196 206))) #[WORD-FORMATION-WINDOW ( :TREE-COLLECTION #[WM-TREE-COLLECTION ( :ELEMENTS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :ELEMENTS-FREE-LIST #*11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 :ELEMENTS-EXTEND-SIZE 50 :TREE ((ROOT)) :COLLAPSED-SUBTREES NIL)) #[KEY-WORDS-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[TRANSFORMATIONS-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[PERIPHR-INFL-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[PM-TEST-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[TEST-WINDOW ( :WINDOW-CONTENTS "pecoraterrastradavitarigastregaducapoetafuocogiornoporcoragazzopaiocoloresanguepanenomevocecornocarcereecodiouomobuespeciecittàbellobuonograndesantoblusacroneronuovoveroseccofalsoutilefacilefortedolceidiotauscireudiresaliremorireveniresoffrireoffrirecoprireapriresederedoverepoteregodereconosceretenerevolerepiaceretacereberecadereaveresapereviverediretoglieresceglierecoglierevalereporreparereprenderediscutereleggeresoddisfarefarevedereperdereessereandarestaredarepulirefinirepartirebatterecrederebruciaremangiarepagareloropropriovostronostrosuotuomioqualetalequelloognimenopiùchetalunonessunoalcunoparecchiopoco" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[MESSAGE-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :MOD2-P T) #[CLASS-WINDOW ( :TREE-COLLECTION #[WM-TREE-COLLECTION ( :ELEMENTS #(NIL NIL #[CLASS-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|PHClass| . NP)) :MOD2-P T) #[CLASS-NODE-TEXT-WINDOW ( :WINDOW-CONTENTS "SYNTAX-TREE(NP Art (NP Adj N))MODIFICATIONSAdj <TRANSFORMATIONS-EXAMPLEla dolce vitala	(Cat Art)(Cat Def)(Num SG)(Gen F)dolce	(Cat Adj)(Manner Qual)(Num SG)(Gen F)vita	(Cat N)(Gen F)(Num SG)-" :HELP-LOC NIL :APPL-LABELS NIL :NODE-NAME ((|PHClass| . |Art+[Adj+N]|)) :MOD2-P T) NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :ELEMENTS-FREE-LIST #*0000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 :ELEMENTS-EXTEND-SIZE 50 :TREE ((ROOT 2) (2 3)) :COLLAPSED-SUBTREES NIL)) #[CLITIC-WINDOW ( :TREE-COLLECTION #[WM-TREE-COLLECTION ( :ELEMENTS #(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) :ELEMENTS-FREE-LIST #*1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 :ELEMENTS-EXTEND-SIZE 50 :TREE ((ROOT)) :COLLAPSED-SUBTREES NIL))) :PM-DEFINER #[DEFINITION ( :UNITS-TO-SAVE NIL :LAST-SOURCES NIL))