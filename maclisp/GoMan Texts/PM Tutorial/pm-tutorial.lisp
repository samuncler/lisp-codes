(setf (logical-pathname-translations "PM Tutorial")         `(("**;*.*" "GoMan texts:PM tutorial;**;")))(setf (logical-pathname-translations "PM Tutorial Documents")         `(("**;*.*" "PM Tutorial:Tutorial Documents;**;")));----------------------------------------------------------------------------------------------------(defun load-the-document (label-id &optional (dir "Tutorial Documents:"))  (with-cursor *arrow-cursor*    (cond ((y-or-n-dialog            (format nil                    "The document '~A' needs to be loaded.~%~%~%Do you want to load it manually or automatically?"                    label-id)            :size #@(400 150)            :cancel-text nil            :yes-text "Automatic"            :no-text "Manual")           (oou::floating-message-dialog (format nil                                                 "Load the document '~A' first."                                                 label-id))           (let* ((pathname (format nil "~A~A" dir label-id))                  (document-id (get-document-id *xf-application* pathname)))             (unless document-id               (assure-application *wm-application* "Switch to server and load the document.")               (mapcar #'menu-enable (menubar))               (highlight-menu (find-menu "Server"))               (setf document-id (load-server-document *xf-application* pathname)))             (assure-application *xf-application* "Switch to client and open the document from server.")             (when document-id               (mapcar #'menu-enable (menubar))               (highlight-menu (find-menu "File"))               (open-document-from-server *xf-application* document-id)               (oou::floating-message-dialog "Document loaded.")               (find-window label-id))))          (t t))));----------------------------------------------------------------------------------------------------(defvar word-manager nil)(setf word-manager (make-instance 'menu                                    :menu-title "WordManager"                                    :menu-items                                    (list                                    #| (make-instance 'menu-item                                       :menu-item-title "Functions"                                       :menu-item-action #'(lambda ()                                                             ($window-open xf-doc                                                                           (elt (top-level-window-nick-names) 5))))|#                                     (make-instance 'menu-item                                      :menu-item-title "Set Lexeme Browser Default"                                      :command-key #\4                                      :menu-item-action #'(lambda (&aux (window (front-window)))                                                            (cond ((typep window 'ld-ModLexeme-dialog)                                                                   (setf (ld-mod-default-aspects) (aspects window))                                                                   (setf (ld-mod-default-view-size) (view-size window)))                                                                  ((typep window 'ld-lexeme-dialog)                                                                   (setf (ld-default-aspects) (aspects window))                                                                   (setf (ld-default-view-size) (view-size window))))))                                     (make-instance 'window-menu-item                                       :menu-item-title "Set WF Cluster Depth..."                                       :menu-item-action #'call-set-wf-cluster-default)                                     (make-instance 'menu-item                                             :menu-item-title "-")                                     (make-instance 'window-menu-item                                                    :menu-item-title "Check Syntax"                                                    :command-key #\T                                                    :menu-item-action 'check-syntax-command)                                     (make-instance 'window-menu-item                                                    :menu-item-title "Run Compiler"                                                    :command-key #\R                                                    :menu-item-action 'compile-incremental-command)                                     (make-instance 'window-menu-item                                                    :menu-item-title "Compile All"                                                    :menu-item-action 'compile-from-scratch-command)                                     ;ah                                     (make-instance 'window-menu-item                                       :menu-item-title "Compile CF Rules"                                       :command-key #\Z                                       :menu-item-action 'compile-cf-rules-command)                                     (make-instance 'menu-item                                                    :menu-item-title "-")                                     (make-instance 'window-menu-item                                                    :menu-item-title "Retrieve lexicalized Entries"                                                    :command-key #\L                                                    :menu-item-action 'call-retrieve-lexicalized-Entries)                                     ;ah                                     (make-instance 'window-menu-item                                       :menu-item-title "Analyze tentative Entries"                                       :command-key #\J                                       :menu-item-action 'call-analyze-tentative-Entries)                                     (make-instance 'menu-item                                                    :menu-item-title "-")                                     (make-instance 'window-menu-item                                                    :menu-item-title "Simple Lexicographer Entries"                                                    :menu-item-action 'new-simple-entry-command)                                     (make-instance 'window-menu-item                                                    :menu-item-title "Complex Lexicographer Entries"                                                    :menu-item-action 'new-complex-entry-command)                                     (make-instance 'window-menu-item                                                    :menu-item-title "Change Lexicographer Entries"                                                    :command-key #\M                                                    :menu-item-action 'new-change-entry-dialog)                                     (make-instance 'window-menu-item                                                    :menu-item-title "Delete Lexicographer Entries"                                                    :command-key #\D                                                    :menu-item-action 'new-delete-entry-dialog)                                     )))(defvar help nil)(setf help (make-instance 'menu             :menu-title "Help"             :menu-items             (list              (make-instance 'menu-item                :menu-item-title "Word Manager : The Book"                :menu-item-action 'open-wordmanager-book)              (make-instance 'menu-item                :menu-item-title "Tutorial    Word Manager"                :menu-item-action 'open-Tutorial)              (make-instance 'menu-item                :menu-item-title "Tutorial    Phrase Manager"                :menu-item-action 'open-PM-Tutorial)              (make-instance 'menu-item                :menu-item-title "English Morphology"                :menu-item-action 'open-english-morphology)              (make-instance 'menu-item                :menu-item-title "Glossary"                :menu-item-action 'open-Glossary)              )))(defun open-PM-Tutorial ()  (let ((file (or (probe-file "goman texts:PM Tutorial;PM-Tutorial.dformatted")                  (probe-file "Allegro;goman texts:PM Tutorial:PM-Tutorial.dformatted")                  (choose-file-dialog :mac-file-type :GMRE                                       :directory (when (probe-file "goman texts:Tutorial;")                                                   "GoMan Texts:")))))    (when (probe-file file)      (oou::show-document oou::*the-librarian* file))))(defun open-english-morphology ()  (ed-beep))(setf text-edit-menubar   (list *apple-menu* file-menu edit-menu word-manager phrase-manager windows help));----------------------------------------------------------------------------------------------------(defclass XF-RETRIEVE-BROWSER (layout-mixin help-mixin window)  ((wm-document :initarg :wm-document :accessor wm-document)   (minimal-size :initarg :minimal-size :accessor minimal-size)   (structure :initarg :structure :accessor structure)   (selected :initform 0 :accessor selected)   (sel-minimal :initform 0 :accessor sel-minimal)   (sel-word :initform 0 :accessor sel-word)   (retrieved :initarg :retrieved :accessor retrieved)   (no-idiom :initform nil :accessor no-idiom)   (words-p :initform t :accessor words-p))  (:default-initargs    :minimal-size (make-record :rect :topleft #@(365 460)                               :bottomright (make-point *screen-width* *screen-height*))    :structure nil))(defclass xf-retrieve-browser-pop-up-menu (help-mixin unibas-pop-up-menu)  ())(defmethod application-item-name ((self xf-retrieve-browser-pop-up-menu) window)  (format nil          "~A-~A"          (window-title window)          (view-nick-name self)          ))(defclass xf-retrieve-browser-static-text (help-mixin static-text-dialog-item)  ())(defmethod application-item-name ((self xf-retrieve-browser-static-text) window)  (format nil          "~A-~A"          (window-title window)          (view-nick-name self)          ))(defclass xf-retrieve-browser-sequence-dialog-item (help-mixin sequence-dialog-item)  ())(defmethod application-item-name ((self xf-retrieve-browser-sequence-dialog-item) window)  (format nil          "~A-~A"          (window-title window)          (view-nick-name self)          ))(flet ((pop1 (object &key no-idiom)          (make-instance 'xf-retrieve-browser-pop-up-menu            :view-position #@(0 0)            :view-size #@(5 5)            :view-nick-name 'pop-selection            :item-display "Selection"            :menu-items             (list             (make-instance 'menu-item               :menu-item-title "Words"               :menu-item-action #'(lambda ()                                      (when (not (words-p object))                                       (set-window-for-words object))))             (if no-idiom               (values)               (make-instance 'menu-item                 :menu-item-title "Syntax Tree"                 :menu-item-action #'(lambda ()                                       (when (words-p object)                                         (set-window-for-tree object))))))))       (pop2 (ob)          (make-instance 'xf-retrieve-browser-pop-up-menu            :view-position #@(0 0)            :view-size #@(5 5)            :view-nick-name 'pop-minimal            :item-display " Action"            :menu-items             (list             (make-instance 'menu-item               :menu-item-title "Show PHClass"               :menu-item-action #'(lambda ()                                     (let* ((doc (wm-document ob)))                                       (cell-select (get-minimal-subview ob) 0 (sel-minimal ob))                                       (send (communication doc) 'get-class-node-ix (address doc)                                             :arguments                                              (list (car (elt (get-solution-index (elt (structure ob) (selected ob)))(sel-minimal ob)))                                                   (cdr (elt (get-solution-index (elt (structure ob) (selected ob)))(sel-minimal ob))) nil)                                             :continuation (list '$window-open doc)))))             (make-instance 'menu-item               :menu-item-title "Specification"               :menu-item-action #'(lambda ()                                     (let ((index (car (elt (get-solution-index (elt (structure ob) (selected ob)))(sel-minimal ob))))                                           (title (elt (table-sequence (get-minimal-subview ob)) (sel-minimal ob)))                                           (doc (wm-document ob)))                                       (send (communication doc) 'get-content-as-string (address doc)                                             :arguments (list index nil)                                             :continuation (list 'instantiate-definition doc                                                                 (list index title nil)))))))))       (pop3 (ob)          (make-instance 'xf-retrieve-browser-pop-up-menu            :view-position #@(0 0)            :view-size #@(5 5)            :view-nick-name 'pop-periphr            :item-display " Action"            :menu-items             (list             (make-instance 'menu-item               :menu-item-title "Show PIClass"               :menu-item-action #'(lambda ()                                     (let* ((cell (car (selected-cells (get-periphr-subview ob))))                                            (which (if cell (cell-to-index (get-periphr-subview ob) cell) 0))                                            (doc (wm-document ob))                                            (word (get-actual-word ob)))                                       #|(if (no-idiom ob)                                                    (elt (elt (structure ob) (selected ob)) (sel-word ob))                                                    (elt (get-solution-words (elt (structure ob) (selected ob))) (sel-word ob)))))|#                                       (if (table-sequence (get-periphr-subview ob))                                         (let ((index (car (elt (get-verb-rules word) which))))                                           (cell-select (get-periphr-subview ob) 0 which)                                           (send (communication doc) 'get-class-node-ix (address doc)                                                 :arguments (list index which t)                                                 :continuation (list '$window-open doc)))))))             (make-instance 'menu-item               :menu-item-title "Specification"               :menu-item-action #'(lambda ()                                     (let* ((cell (car (selected-cells (get-periphr-subview ob))))                                            (which (if cell (cell-to-index (get-periphr-subview ob) cell) 0))                                            (word (get-actual-word ob))                                            (doc (wm-document ob)))                                       (if (table-sequence (get-periphr-subview ob))                                         (let ((index (car (elt (get-verb-rules word) which)))                                               (title (second (elt (get-verb-rules word) which))))                                           (cell-select (get-periphr-subview ob) 0 which)                                           (send (communication doc) 'get-content-as-string (address doc)                                                 :arguments (list index t)                                                 :continuation (list 'instantiate-definition doc                                                                     (list index title t)))))))))))       (pop4 (ob)          (make-instance 'xf-retrieve-browser-pop-up-menu            :view-position #@(0 0)            :view-size #@(5 5)            :view-nick-name 'pop-clitics            :item-display " Action"            :menu-items             (list             (make-instance 'menu-item               :menu-item-title "No clitics"               :menu-item-action #'(lambda ()                                     (let* ((word (if (no-idiom ob)                                                    (elt (elt (structure ob) (selected ob)) (sel-word ob))                                                    (elt (car (get-solution-words (elt (structure ob) (selected ob)))) (sel-word ob))))                                            (clitic (get-clitic-node word)))                                       (if clitic                                         (let ((index (car clitic)))                                           (cell-select (get-words-subview ob) 0 (sel-word ob))                                           ($window-open (wm-document ob) (cons (elt (top-level-window-nick-names) 15) index)))))))             (make-instance 'menu-item               :menu-item-title "-"))))       (set-vertical-space (space)          (:vbox (:width :filler :height space)))       (set-static-and-pop-up (text pop-up &key no-idiom)          (let ((static (make-instance 'xf-retrieve-browser-static-text                          :view-nick-name 'static-text-1                          :dialog-item-text text))                (static2 (make-instance 'xf-retrieve-browser-static-text                           :view-nick-name 'static-text-2                           :dialog-item-text "No matched idioms")))            (:vbox (:width :filler :height 25)                   (:hbox (:height 20 :width :filler)                          (:hbox (:width 20))                          (:hbox (:height 20 :width 325)                                 (:fbox () static)                                 (:fbox () (if no-idiom static2 pop-up)))                          (:hbox ())))))       (set-two-statics (text1 text2)          (let ((static1 (make-instance 'xf-retrieve-browser-static-text                           :view-nick-name 'static-text-3                           :dialog-item-text text1))                (static2 (make-instance 'xf-retrieve-browser-static-text                           :dialog-item-text text2                           :view-nick-name 'trans)))            (:vbox (:width :filler :height 20)                   (:hbox (:height 20 :width :filler)                          (:hbox (:width 20))                          (:hbox (:height 20 :width 325)                                 (:fbox () static1)                                 (:fbox () static2))                          (:hbox ())))))       (set-static (text)          (let ((static (make-instance 'xf-retrieve-browser-static-text                          :dialog-item-text text)))            (:vbox (:width :filler :height 25)                   (:hbox (:height 20 :width :filler)                          (:hbox (:width 20))                          (:hbox (:height 20 :width 300)                                 (:fbox () static))                          (:hbox ())))))       (set-sequence (list h ob seq-nn &key action)          (let ((sequence (make-instance 'xf-retrieve-browser-sequence-dialog-item                            :table-sequence list                            :view-nick-name seq-nn                            :dialog-item-action                             #'(lambda (item)                                (let ((cell (car (selected-cells item))))                                  (if cell                                    (cond ((eql action :retrieve)                                           (update-from-retrieve ob (cell-to-index item cell)))                                          ((eql action :minimal)                                           (update-from-minimal ob (cell-to-index item cell)))                                          ((eql action :words)                                           (update-from-words ob (cell-to-index item cell))))))))))            (:vbox (:width :filler :height h)                   (:hbox (:height h :width :filler)                          (:hbox (:width 20))                          (:hbox (:height h :width '(:filler :min 300))                                 (:fbox () sequence))                          (:hbox (:width 20))))))       (set-tree (text)         (let ((static (make-instance 'xf-retrieve-browser-static-text                            :dialog-item-text text                            :view-nick-name 'tree)))            (:vbox (:width :filler :height :filler)                   (:hbox (:height :filler :width :filler)                          (:hbox (:width 20))                          (:hbox (:height (:filler :min 100) :width '(:filler :min 300))                                 (:fbox () static))                          (:hbox (:width 20)))))))        ;---------------------------------------------------------------------------------------------  ; method SET-WINDOW-FOR-WORDS  ;---------------------------------------------------------------------------------------------    (defmethod set-window-for-words ((ob xf-retrieve-browser) &key (retrieved (retrieved ob)))    (setf (words-p ob) t)    (setf (layout ob)          (if (no-idiom ob)            (:vbox (:width :filler :height :filler)                 (set-vertical-space 10)                 (set-static-and-pop-up "Retrieved forms" (pop1 ob) :no-idiom (no-idiom ob))                 (set-sequence retrieved 60 ob 'retr :action :retrieve)                 (set-vertical-space 10)                 (set-static-and-pop-up "Words" (pop4 ob))                 (set-sequence (get-actual-words ob) '(:filler :min 50) ob 'words :action :words)                 (set-vertical-space 10)                 (set-static "Morphological features")                 (set-sequence (get-actual-features ob) '(:filler :min 50) ob 'features)                 (set-vertical-space 10)                 (set-static-and-pop-up "Periphrastic inflections" (pop3 ob))                 (set-sequence (get-actual-periphr-infl ob) '(:filler :min 50) ob 'periphr)                 (set-vertical-space 20))          (:vbox (:width :filler :height :filler)                 (set-vertical-space 10)                 (set-static-and-pop-up "Retrieved forms" (pop1 ob) :no-idiom (no-idiom ob))                 (set-sequence retrieved 60 ob 'retr :action :retrieve)                 (set-vertical-space 10)                 (set-static-and-pop-up "Minimal forms" (pop2 ob))                 (set-sequence (get-actual-minimal ob) 60 ob 'minimal :action :minimal)                 (set-vertical-space 10)                 (set-two-statics "Transformation:" (get-actual-trans ob))                 (set-vertical-space 10)                 (set-static-and-pop-up "Words" (pop4 ob))                 (set-sequence (get-actual-words ob) '(:filler :min 50) ob 'words :action :words)                 (set-vertical-space 10)                 (set-static "Morphological features")                 (set-sequence (get-actual-features ob) '(:filler :min 50) ob 'features)                 (set-vertical-space 10)                 (set-static-and-pop-up "Periphrastic inflections" (pop3 ob))                 (set-sequence (get-actual-periphr-infl ob) '(:filler :min 50) ob 'periphr)                 (set-vertical-space 20))))    (cell-select (get-retrieve-subview ob) 0 (selected ob))    (unless (no-idiom ob)       (progn        (cell-select (get-minimal-subview ob) 0 (sel-minimal ob))        (disable-pop-up-words ob)))    (cell-select (get-words-subview ob) 0 (sel-word ob))    (set-pop-up-clitic ob)    (set-pop-up-word-specification ob)    (set-pop-up-periphrastics ob)    (update-for-bug ob))    ;---------------------------------------------------------------------------------------------  ; method SET-WINDOW-FOR-TREE  ;---------------------------------------------------------------------------------------------    (defmethod set-window-for-tree ((ob xf-retrieve-browser) &key (retrieved (retrieved ob)))     (setf (words-p ob) nil)    (setf (layout ob)          (:vbox (:width :filler :height :filler)                 (set-vertical-space 10)                 (set-static-and-pop-up "Retrieved forms" (pop1 ob))                 (set-sequence retrieved 60 ob 'retr :action :retrieve)                 (set-vertical-space 10)                 (set-static-and-pop-up "Minimal forms" (pop2 ob))                 (set-sequence (get-actual-minimal ob) 60 ob 'minimal :action :minimal)                 (set-vertical-space 10)                 ;;(set-two-statics "Class:" "class-name")                 (set-two-statics "Transformation:" (get-actual-trans ob))                 (set-vertical-space 10)                 (set-static "Syntax Tree:")                 (set-tree (get-actual-tree ob))                 (set-vertical-space 20)))    (cell-select (get-retrieve-subview ob) 0 (selected ob))    (cell-select (get-minimal-subview ob) 0 (sel-minimal ob))    (disable-pop-up-tree ob)    (update-for-bug ob)))(defmethod oou::highlight :before ((self XF-RETRIEVE-BROWSER))  (assure-application *xf-application*));-----------------------------------------------------------------------------------------------------; open German-PM:(defmethod create-application-item ((label-id (eql (intern "German-PM" :oou))))  (load-the-document label-id "PM Tutorial Documents:")); open Italian-PM-W1:(defmethod create-application-item ((label-id (eql (intern "Italian-PM-W1" :oou))))  (load-the-document label-id "PM Tutorial Documents:")); open Italian-PM-W2:(defmethod create-application-item ((label-id (eql (intern "Italian-PM-W2" :oou))))  (load-the-document label-id "PM Tutorial Documents:")); highlite menu PhraseManager(defmethod create-application-item ((label-id (eql (intern "Client-PM-Menu" :oou))))  (assure-application *xf-application*)  (highlight-menu (find-menu "PhraseManager"))  t); highlite menu Windows (defmethod create-application-item ((label-id (eql (intern "Client-Windows-Menu" :oou))))  (assure-application *xf-application*)  (highlight-menu (find-menu "Windows"))  t)(defun find-German-PM-Retrieve-Browser ()  (find-if #'(lambda (win)                              (and (string= (window-title win)                             "German-PM:Retrieval Dialog")                    (equal (mapcar #'(lambda (element)                                       (element-string element))                                   (car (structure win)))                           '("er" "hat" "in" "das" "gras" "gebissen"))))           (windows :class 'xf-retrieve-browser :include-invisibles t))); Retrieve Dialog(defmethod create-application-item ((label-id (eql (intern "German-PM:RETRIEVE-BROWSER" :oou))))  (assure-application *xf-application*)  (or (find-German-PM-Retrieve-Browser)      (floating-message-dialog        "The Retrieval Dialog of 'er hat ins gras gebissen' is not opened yet. To open it:Select the sentence in the PM Test window and choose 'Recognize' in the 'PhraseManager' menu"       :size #@(500 120))      t))(defmethod create-application-item ((label-id (eql (intern "German-PM: PM-TEST" :oou))))  (assure-application *xf-application*)  (floating-message-dialog "The Window PM-Test is not opened yet.You can open it by clicking the 'PM test' button in the document window of the database.":size #@(500 150))  t)(defmethod create-application-item ((label-id (eql (intern "Italian-PM-W1: CLASS" :oou))))  (assure-application *xf-application*)  (floating-message-dialog "The Class Window is not opened yet.You can open it by clicking the 'Class' button in the document window of the database.":size #@(500 150))  t)