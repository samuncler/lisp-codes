@Chapter{Introduction}This tutorial is an introduction to the work with Phrase Manager. Itshould make you familiar with the tools, functions, commands, etc.you can dispose of in the Phrase Manager interface.Phrase Manager (PM) offers a formalism for the specification ofso-called multi-word units, from periphrastic inflectional formslike "have learned" and "will learn" up to idiomatic phrases like thefamous "kick the bucket". The knowledge specification in PM relies on the morphologicalknowledge defined in Word Manager (WM). Though WM and PM areconceptually divided into two separate modules, they arestrongly interconnected through a well-defined interface.Therefore, familiarity with the WM formalism is imperative for agood understanding of PM and this tutorial!!The WM-Formalism will not be explained here. However, you can consult theWM-Glossary whenever it is necessary (choose 'Glossary' in the 'Help' menu when youwant to consult it). Furthermore, references are made to the @Document-Link{ "Phrase Manager Book" | "Book:WM-Bibliography" | "PM-book"} and to severalWM-PM databases. The references are marked in the text by italics. Whenever you wish or areinvited to read one of the items reference is made to, just click the text in italics. @Chapter{What’s in PM}In a first step, you are going to see what kind of phenomena can be modelledby using PM:@Application-Link{ "Open German-PM" | "German-PM" }The @Application-Link{ "Document Window" | "German-PM" } of the tutorialdatabase “German-PM” is now on your screen. Open the PM test window. Youcan do so by clicking the button @Application-Link{ "PM test" |"German-PM-PM test-button" } in the document window.   In the window, there are three lines of text. @ItemSelect the first line with the mouse (a triple click on the line selects thewhole line)@End-Item @Itemchoose “Recognize” in the @Application-Link{ "Phrase Manager Menu" |"Client-PM-Menu" } or type CTRL+K (this command is only availablewhen a test window is selected) @End-Item If you have carried out the two steps correctly, this should be displayed on yourscreen: @Figure{ "Retrieval Dialog: “in das gras beissen”" | "128" | 463 | 558 }The @Application-Link{ "first text field" |"German-PM:Retrieval Dialog-RETR" }, underneath the title retrieved forms, showsa modified version of the sentence that you have selected in the PM-Test window. The @Application-Link{ "second text field" |"German-PM:Retrieval Dialog-MINIMAL" } shows, as its title indicates,the so-called minimal form of the retrieved sentence."ins gras beissen" (literally: 'to bite into the grass') is a German equivalent ofthe English expression "to kick the bucket", meaning - in the same“distinguished” style - "to die"."er hat ins gras gebissen" ('he has bitten into the grass') is a manifestation of thesame sentence with the verb in the 3rd person singular of the German perfecttense and the personal pronoun of the 3rd person masculine singular "er". TheEnglish translation is "he has kicked the bucket". What other kinds of information contains this Retrieval Dialog?@Section{Idiomatic Expressions}The sentence "er hat ins gras gebissen" has been retrieved as an utterance of theexpression "ins gras beissen" (more precisely: "in das gras beissen", but we willsee this later).  This is shown in the @Application-Link{ "second text field" |"German-PM:Retrieval Dialog-MINIMAL"}. "ins gras beissen" is the so-called minimal form. A minimal form (also called"headphrase" or "canonical form") is the form of an idiom where no syntactictransformation has been applied and where all words that do not contribute to theidiomatic meaning of the expression are removed. Compare the sentence "er hat in das gras gebissen" with the minimal form: theverbform is in the infinitive and the personal pronoun "er", that does notcontribute to the idiomatic meaning of the expression, is not comprised in theminimal form.@ItemGo back to the @Application-Link{ "Retrieval Dialog" |"German-PM:RETRIEVE-BROWSER" } of "er hat ins gras gebissen". @End-Item @ItemNext to the title 'Minimal forms' there is a pull-down menu called 'Action'. Go intoit and choose 'Specification' @End-Item A window showing the specification of the expression "in das gras beissen" isopened:@ItemHEADPHRASE: specification of the minimal form of the expression. Theheadphrase can contain the specification of different possible inflectional modifications.Here, the pointed brackets ("<...>") indicate, that the word "beissen" can beinflected.@End-Item @ItemRESTRICTIONS: morphological restrictions. All words occurring in theheadphrase are specified with morphological restrictions. Some words cannot inflect,others inflect freely and others undergo just a limited set of inflections. Theseinflectional degrees are specified by means of the wordform features defined inWM."in", "das" and "gras" do not inflect in this expression, therefore they arespecified with a feature set that defines them as one particular wordform. On the other hand, "beissen" does inflect in all but the wordforms of the passive.Therefore it is specified with the feature (Cat V), common to all the wordformsof a verb. Only the wordforms of the passive are excluded:@Verbatim 	^(Form Passive)@End-Verbatim@End-Item @ItemMODIFICATIONS: Under modifications, you specify how the phrase can be modifiedby “external” words. External words are words that can be added withinthe phrase without damaging its idiosyncratic meaning (= discontinuity). Eachword of the phrase can be associated with modifications indicating that it canbe associated with external words on its right-hand "<" or its left-hand ">" side.  The verb "beissen" can be associated with external words on its right-hand side.E.g.: @Verbatim 		er beisst HEUTE NOCH ins gras		(he’ll kick the bucket this very day)@End-VerbatimTry it out: Type the above German sentence into the @Application-Link{"PM-Test" | "German-PM: PM-TEST" } window (use lowercase charactersonly), select it with a triple click and choose 'Recognize' in the@Application-Link{ "Phrase Manager Menu" | "Client-PM-Menu" } (the command isonly available when the PM-Test window is selected). If you have done everything correctly (e.g. no typing errors), a new retrievaldialog should be opened. Although the analysed sentence is interrupted by the“external” words "heute" and "noch", the system has recognized the minimal form"in das gras beissen". This thanks to the modification specifying that "beissen"can have external words on its right-hand side.Other "interruptions" of the phrase are not allowed. Try to have analysed thesentence "er beisst ins grüne gras" which has only the literal meaning "he bitesinto the green grass". Since neither "in" nor "gras" are allowed to have externalwords on any side, the system, correctly, won’t find a minimal form. @End-Item Before you go on reading, close the Retrieval Dialogs of @Verbatim 		er beisst heute noch in das gras	er beisst in das grüne gras@End-Verbatim and select the window entitled "in das gras beissen" (tip: to select a window that ishidden behind other windows, you can use the menu @Application-Link{ "Windows" |"Client-Windows-Menu" }. @ItemCLASS: indicates which class the phrase belongs to. A class describes anddefines a certain morphosyntactic type of idiomatic expressions. Our examplebelongs to a type with the following syntactical structure:@Figure{ "Syntax tree of “ins gras beissen”" | "129" | 218 | 153 }@End-Item Other idiomatic expressions belonging to the same class are @Verbatim 	auf der hand liegen		to be lying on the hand = to be obvious	aus dem ärmel schütteln		to shake out of the sleeve = to produce just like that 	auf dem hohen ross sitzen		to be sitting on the high horse = to be on one’s high horse @End-Verbatim You can see another representation of this syntax tree in the @Application-Link{"Retrieval Dialog" | "German-PM:RETRIEVE-BROWSER" } of "er hat in das grasgebissen":@Item	Select the Retrieval Dialog@End-Item @Item	Go to the pull-down menu 'Selection' next to the title "Retrieved forms"@End-Item @Item	Choose 'Syntax Tree'.@End-Item The syntax tree of the idiomatic expression, as it appears in the analysedsentence, will be shown.The syntax tree is used by the system to recognize predefined syntacticaltransformations like, in this case, inversion.@Figure{ "Inversion; example “ins gras beissen”" | "130" | 283 | 188 }How all these information (headphrase definition, modifications, transformations,morphological restrictions, etc.) is to be specified will be shown later.@Section{Periphrastic Inflection}@ItemGo back to the @Application-Link{"Retrieval Dialog" | "German-PM:RETRIEVE-BROWSER" } of "er hat in das grasgebissen" @End-Item@ItemGo to the pull-down menu 'Selection' next to the title 'Retrieved forms'@End-Item @ItemChoose 'Words' (when the option 'Words' is already selected, the commandis not available). @End-ItemThe @Application-Link{ "text field" | "German-PM:Retrieval Dialog-WORDS" }entitled 'Words' lists all the wordforms occurring in the analysed sentence. The @Application-Link{ "text field" | "German-PM:Retrieval Dialog-FEATURES" }underneath it shows the morphological features of a selected wordform. You canselect a wordform by clicking it in the wordform list of the text field with thetitle 'Words'. @ItemHave a look at the morphological features of some of the listed wordforms.@End-ItemThe interesting case here is the wordform "hat gebissen" ('has bitten') with itsmorphological features. When you open the lexeme browser of the verb "beissen" you will see that itdoes not contain analytical wordforms like e.g. "hat gebissen". Check it yourselfby opening its lexeme browser. You can open its lexeme browser the “usual” way (using the command'Retrieve lexicalized Entries' in the @Application-Link{ "WordManager menu"| "Client-WM-Menu" } or typing CTRL+L when a wordform of theverb is selected in one of the test windows). However, it is also possible to open the lexeme browser of"beissen" directly from the retrieval dialog. @ItemSelect the wordform "hat gebissen" in the field 'Words'.@End-Item@ItemGo to the menu 'Action' next to the title 'Words' and choose the option"beissen" -> the lexeme browser will be opened. @End-Item@ItemHave a look at the wordforms of the verb (either subparadigm bysubparadigm or all at once by choosing 'Wordforms' in the upper pull-downmenu of the browser) @End-Item Indeed, there is no wordform@Verbatim 	hat gebissen	(Cat V)(Mod Ind)(Temp Perf)(Pers 3rd)(Num SG)@End-Verbatimalthough - as we have seen - this wordform is listed under Words inthe retrieval dialog of "er hat in das gras gebissen". Go back to the retrieval dialog and select "hat gebissen" in the 'Words' field. Then,have a look at the  @Application-Link{ "last text field" | "German-PM:Retrieval Dialog-PERIPHR" }, entitled'Periphrastic inflections' @Figure{ "Field “Periphrastic inflections”" | "131" | 481 | 163 }This indicates that "hat gebissen" has been analised  as a wordform of "beissen"by a function called AUXILIARY-PERF. Furthermore, one can see that this functioncombines "haben" ('have') with a past participle ("pp"). Functions specifying analytical wordforms (or periphrastic inflection) like@Verbatim 	hat gebissen	has bitten	sarà fatto		(Italian: 'will be done')	aurait vu		(French: 'would have seen')	wird gegessen haben	(German: 'will have eaten')	etc.@End-Verbatim can be specified in PM. These functions recognize thecombination of two elements specified in Word Manager as onewordform. E.g. the combination of a wordform of the verb "haben"plus a past participle ("pp") forms a wordformof the perfect tense. Basically, periphrastic inflections are specified like idiomatic expressions.Choose 'Specification' in the pull-down menu 'Action' next to the title'Periphrastic inflections'. In the appearing window you can see, that such aspecification consists of a Headphrase, Restrictions, Modifications and theIndication of a Class, too.Further specifications are defined in a separate window, the window'Periphrastic Inflections'. You can open it by clicking the button@Application-Link{ "periphr" | "German-PM-periphr-button" } in the documentwindow. @Figure{ "Window “Periphrastic Inflections”" | "132" | 693 | 212 }Here you can specify, among other things:@Itemwhich one of the inflectional paradigms of the two elements the recognizedwordform belongs toe.g. "hat gebissen" is a wordform of "beissen", not of "haben")@End-Item @Itemthe attribution of the morphosyntactic features to the analyticalwordforme.g. (Mod Ind)(Temp Perf)(Pers 3rd)(Num SG) to "hat gebissen"@End-Item Details concerning the specification of periphrastic inflections will betreated later. All the German tenses formed by periphrastic inflection are specified inGerman-PM. Have a look at some of the following expressions.@ItemCopy them into the PM-Test window@End-Item @Itemselect one expression at a time@End-Item 	@Itemchoose 'Recognize' in the PraseManager menu or type CTRL+K@End-Item @Verbatim 	sie ist gegangen			'she has gone'	du wirst kommen				'you will come'	ich würde gegangen sein			'I would have gone'	wir wären geschlagen worden		'we would have been beaten'	du hättest ins gras gebissen		'you would have bitten...'	du würdest ins gras gebissen haben	'you would have bitten...'	@End-Verbatim @Section{Clitics}The phenomenon of clitics is generally explained as the leaning of one ormore unstressed words (bound words) against a stressed one. The line betweenbound and free words, however, is sometimes difficult to trace. In PhraseManager, we handle as clitics “only” the cases where different syntacticforms are bound into a single text word. The purpose of the clitic analysis isto separate the different components of a fused text word:@Verbatim 		cannot		->	can not	he’ll go	->	he will go	j’accuse	->	je accuse	(French: 'I accuse')	am Abend	->	an dem Abend	(German: 'in the evening')	dimmelo		->	dì me lo	(Italian: 'say me it' = 'say it to me') @End-VerbatimAn example of a clitic analysis can be observed in our example "ins grasbeissen". @ItemGo back to @Application-Link{ "German-PM" | "German-PM" }, into the@Application-Link{ "PM test" | "German-PM-PM test-button" } Window@End-Item@ItemSelect the sentence "er hat ins gras gebissen"@End-Item @ItemChoose 'Recognize' in the PhraseManager menu (or press CRTL+K)@End-Item When you compare the input sentence in the test window to the result of theanalysis under 'Retrieved forms' in the retrieval dialog, you will see that thefused wordform "ins" has been separated into the words "in" and "das". This has been done by a so-called clitic rule (CRule). Have a look at the cliticrule:@ItemSelect the wordform "in" or "das" in the 'Words' field of the retrieval dialog.@End-Item @ItemGot to the menu 'Action' next to the title 'Words'@End-Item @ItemChoose the option (CRule Prep+Article)@End-Item The window (CRule Prep+Article) contains all the Clitic Rules specifying combinations ofGerman prepositions with articles to fused wordforms. The first line is the CRuleresponsible for the splitting up of "ins" into "in" and "das. The exact syntax ofthese rules will be explained later. To see some more sentences with clitics, copy the expressions below into the PM-Test window,select them one at a time and have them analysed in the usual manner ('Recognize'in the 'PhraseManager' menu or CTRL+K)@Verbatim 	ich bin zur oma gegangen	'I went to grandma’s'	sie hat’s geändert		'she has changed it'	heute wird’s gut gehen		'today, it will work,  we will manage (well)'@End-Verbatim @Chapter{Reading}An overview of Phrase Manager is given in the introductory chapter of the @Document-Link{"Phrase Manager Book" | "Book:WM-Bibliography" | "PM-book"}. We suggest that you have a lookat Chapter 1 (pp.  3-13) before you go on with the Tutorial. @Chapter{A first Phrase Class: The Guided Tour} In this chapter, we are going to show you the specification of a first idiom class(phrase class or PHClass) with one specific idiomatic expression.Just read, observe and try to execute the commands and the typing exactly as youwill be asked to do. After this presentation, you will be invited to specify a rule byyourself.First of all, you have to open the database we are going to work with: @Application-Link{ "Open Italian-PM-W1" | "Italian-PM-W1" } It is an Italian database. "PM" stands for Phrase Manager, "W1" for work-database#1 (there are more to come...). It is a tutorial database and therefore incomplete(e.g. no wordformation). However, it contains all the information needed for thespecification of some phrase classes. We suggest that you make yourself acquainted with it by using the@Application-Link{ "general browser" | "Italian-PM-W1-browser-button" } and byopening some lexeme browsers. Most of the WM-entries are listed in the@Application-Link{ "WM test" | "Italian-PM-W1-WM test-button" } window.Especially for people with no knowledge of the Italian language it might be veryuseful to have a look at the inflectional  paradigms of some nouns, adjectives andverbs. @Item Go into the database Italian-PM-W1 and have a look at someentries@End-Item @Section{The Class Tree}@Label{ "class-tree" }(If you haven’t done it yet, open @Application-Link{ "Italian-PM-W1" |"Italian-PM-W1" }) The example phrase for the phrase class we are going to specify is:@Verbatim 		la dolce vita@End-Verbatim It is a noun phrase with an article, an adjective and a noun. @Figure{ "Syntax Tree “la dolce vita”" | "134" | 393 | 255 }We mention the syntactic structure of this expression because, in Phrase Manager,the main criterion for the categorization of phrase classes is their syntacticstructure.According to this categorization principle, the following expressions belong to thesame PHClass:@Verbatim 		il bel mondo		(the beautiful world = the jet-set)	una buona testa		(a good head = an intelligent person)	le belle arti		(the fine arts)@End-Verbatim The phrase classes are structured in a hierarchic tree-structure similar tothe inflection or the wordformation tree in Word Manager. The class tree is specified in the so-called 'Class' window. You can open it byclicking the @Application-Link{ "class button" | "Italian-PM-W1-class-button"}in the document window.@Item	Open the Class window@End-Item The window displayed on your screen, now, should be empty except for the word"root". It is the root node of the class tree. You are supposed to be familiar with the handling of the tree of the Classwindow; it works exactly the same as the trees in the windows Inflection andWordformation. You will find the usual tree-commands in the@Application-Link{ "Edit menu" | "Client-Edit-Menu" }. The PHClasses are specified in the leave nodes of the tree. For theclass of "la dolce vita", we suggest a node name like (PHClass Art+[Adj+N]).Since the syntactic structure is the main criterion for the categorization ofclasses, one preferably takes node names related to the syntactic structure ofthe classes. For the time being, we suggest an intermediate node (PHClass NP) between theroot node and the leave node. As usual in WM and in PM, other names andstructures are possible. However, the features used in the tree for thestructuring of phrase classes must obligatorily have the attribute 'PHClass'.@ItemGo into the Class window (open it first, if you have not done that, yet)@End-Item @ItemSelect the root node by clicking it	@End-Item   @ItemChoose 'New Son' in the @Application-Link{ "Edit menu" | "Client-Edit-Menu" }@End-Item @ItemType @Verbatim (PHClass NP)@End-Verbatim  into the dialogue box; payattention to typing errors, especially regarding the obligatory value "PHClass".@End-Item@ItemClick OK@End-Item @ItemThen, in the same manner, add a new son to the node (PHClass NP). Nameit (PHClass Art+[Adj+N]). @End-Item The Class window should now look like this:@Figure{ "Class Window" | "135" | 261 | 267 }@Section{Specification of the PHClass}(If you want to work with the tutorial and you have not done the previoussection, you have to  go back and work it through. Otherwise it will not bepossible to execute the commands. So, if necessary: @Link{ "Go back" |"class-tree" }) Now that we have specified an initial class tree, we can tackle the definition ofa first PHClass.@ItemOpen the class window by double-clicking the node (PHClass Art+[Adj+N]) inthe @Application-Link{ "Class window" | "Italian-PM-W1: CLASS" }@End-Item The specification of a PHClass consists of several subparts, each of themintroduced by a title. We are going to specify them step by step. @Subsection{Syntax Tree}@Label{ "syntax-tree" }The first step is the specification of the syntax tree.The syntax tree characterizes all phrases of the class. The tree willbe  associated with every idiom that is entered in this PHClass. It isused for the definition of syntactic transformations like, e.g.inversion (see next section Transformation).Type into the window (PHClass Art+[Adj+N]): @ItemSYNTAX-TREE@End-Item @ItemNewline@End-Item @Item(NP Art (NP Adj N))@End-Item@ItemNewline@End-Item The window should now look like this:@Figure{ "Syntax-Tree (PHClass Art+[Adj+N])" | "136" | 395 | 241 }The notation of the syntax tree is linear. One pair of brackets enclosesthe parent node and its direct son nodes. E.g.: Have a look at the structure of "la dolce vita" and compare it tothe linear notation. @Figure{ "Syntax Tree Notation " | "137" | 379 | 294 }The symbols used as node names can represent syntactic structures ormorphological categories. If they represent morphological categories,you must verify that the symbol you use for a certain categoryactually corresponds to the symbol used in WM for the same category.Here, e.g. "Adj" and not "A" for adjective, since in the inflectionpart of Italian-PM-W1 adjectives have the feature (Cat Adj). This supports the automatic matching of syntax-trees with newinserted phrases. @SubSection{Modifications}@Label{ "modifications" }@ItemType@Verbatim 		MODIFICATIONS@End-Verbatim on a new line underneath the syntax-tree specification in the PHClasswindow (PHClass Art+[Adj+N). @End-Item Under modifications, you specify how the phrase can be modifiedby "external" words. External words are words that can be addedwithin the phrase without damaging its idiosyncratic meaning (=discontinuity). Here, you can specify global modifications, i.e. modifications that arepermitted for all idioms associated with this PHClass. Each word type of the phrase can be associated with modificationsindicating that it can be associated with external words on its right-hand"<" or its left-hand ">" side. For the class of "la dolce vita", one global modifications is allowed.The adjective can be associated with external words on its left-hand side.E.g.:@Verbatim 	la BELLA dolce vita	('the beautiful sweet life')	una VERA buona testa	('a really intelligent person')@End-Verbatim @Item	Type	Adj <	on a new line underneath the title MODIFICATIONS. The Symbol	"Adj" and the modification character "<" are separated by a White	Space. @End-ItemThis means that the adjective can have one or more “external words”on its left-hand side. The PHClass window should now look like this: @Figure{ "Global Modifications (PHClass Art+[Adj+N])" | "138" | 383 |273 } @SubSection{Transformations}@Label{ "transformations" }@ItemType@Verbatim 		TRANSFORMATIONS@End-Verbatim on a new line underneath the modifications in the PHClasswindow (PHClass Art+[Adj+N). @End-ItemTransformation Rules are rules that specify possible syntactic transformationslike e.g. inversion and other changes in word-order. They are specifiedelsewhere together with a rule identifier. By means of these rule identifiers you specify which transformation rules may be appliedon the PHClass, i.e. which syntactical transformations the idioms of a class can undergowithout losing their idiomatic meaning.The word-order in expressions of the "la dolce vita" type can’t be changed. E.g.:@Verbatim 		una buona testa = fig. 'an intelligent person'	una testa buona = only lit. 'a good head'@End-Verbatim Since no syntactical transformations are possible, no transformation rule identifier mustbe specified. This is indicated by a hyphen.@ItemType a hyphen ("-") on a new line underneath the title TRANSFORMATIONS@End-ItemThe PHClass window should now look like this: @Figure{ "Transformations (PHClass Art+[Adj+N])" | "139" | 383 |273 }@SubSection{Example}@Label{ "example" }Like in Inflection or Wordformation Rules in WM, you have to specify atleast one hard coded example for each PHClass. We are going to specify"la dolce vita" as example phrase for the (PHClass Art+[Adj+N]).On a new line underneath the Transformations in the PHClasswindow (PHClass Art+[Adj+N]), type: @Item	@Verbatim EXAMPLE@End-Verbatim @End-Item @Item	Newline@End-Item @Item	@Verbatim la dolce vita@End-Verbatim @End-Item @Item	Newline@End-Item @Figure{ "Example Phrase (PHClass Art+[Adj+N])" | "140" | 329 | 281 } None of the three wordforms in the example phrase may be modified byinflection (e.g. plural *"le dolci vite" or superlative "la dolcissimavita"). As we will specify more precisely later, this is “indicated” bythe lack of any special characters in the example phrase. So, onlyphrases containing exactly the three wordforms specified in theexample phrase will be recognized as idiomatic expression. Each example is followed by the specification of morphologicalrestrictions. They allow the disambiguation of homographic wordformsand the specification to what extend words may inflect (provided thatthe words in the example phrase are allowed to inflect).Morphological restrictions are specified by means of the wordformfeatures defined in WM. Each wordform is specified on a new line: firstits surface string, then the wordform features:On a new line underneath the example phrase, type:@Verbatim 		la	(Cat Art)(Cat Def)(Num SG)(Gen F)	dolce	(Cat Adj)(Manner Qual)(Num SG)(Gen F)	vita	(Cat N)(Gen F)(Num SG)@End-Verbatim @Figure{ "Morphological Restrictions “la dolce vita”" | "141" | 325 | 282} Since none of the wordforms in "la dolce vita" is allowed to inflect, wehave indicated the full set of wordform features that specify exactlyone wordform.There are two possibilities to detect or check the exact wordformfeatures of a given wordform. @ItemOpen to the message window of Italian-PM-W1.@End-Item  @ItemType the three wordforms "la", "dolce", "vita"@End-Item @ItemOpen their lexical browser one by one (select a wordform andpress CTRL+L)@End-Item@ItemCheck the relevant wordform features@End-Item A quicker and more practical manner is to@ItemGo to the message window of Italian-PM-W1.@End-Item  @ItemType the three wordforms "la", "dolce", "vita"@End-Item @ItemSelect one wordform at a time@End-Item @ItemChoose 'Recognize' in the @Application-Link{ "Phrase ManagerMenu" | "Client-PM-Menu" } (or press CTRL+K)@End-Item@Item In the Retrieval Dialog, under 'Morphological features', you willfind the wordform together with its whole set of wordform features.When a wordform is homographic (e.g. "la"), all homographs will belisted with their wordform features.@End-Item This second method of checking the wordform featuresfacilitates the disambiguation of homographic wordforms. @ItemTry out both ways (lexeme browser and PM-retrieval-dialog) to checkif the morphological restrictions we specified are correct.@End-ItemFinally, underneath the morphological restrictions, you have the possibility tospecify individual modifications, i.e. modifications that are only allowedwith this particular phrase. We have already specified a general modificationallowing the adjective being associated with “external” words on its left-handside (see above @Link{ "Modifications" | "modifications" }). The example "la dolce vita" does not allow any other modification. So, @Itemtype ahyphen on a new line underneath the morphological restrictions and close thePHClass specification with a Newline @End-Item The Class window should now look like this:@Figure{ "(PHClass Art+[Adj+N])" | "142" | 384 | 312 }This is the complete specification of the first PHClass!@Section{Compilation}@Label{ "compilation" }@ItemIf you have carried out all steps described in the previous section, you can nowcompile the PM-part of your work database as described below.@End-Item@Item If you have not worked through the previous section, we suggest that you do sobefore you go on with this tutorial. So, @Link{ "go back" | "class-tree" }.@End-Item@ItemIf you have worked through the previous sections in an earlier session - or ifyou are only interested in what follows - you can open a copy of the databaseItalian-PM-W1. @Application-Link{ "Open Italian-PM-W2" | "Italian-PM-W2" }.@End-Item To compile the database: @ItemChoose 'Run Compiler' or 'Compile All' in the@Application-Link{ "Phrase Manager Menu" | "Client-PM-Menu" }. The commandsare only available when a database is selected.@End-Item @ItemClick OK in the dialog box.@End-ItemIf you have carried out all specification steps correctly, the following messagewill be displayed in the message window:@Verbatim  > PM Compilation ok. It took ... seconds.@End-Verbatim Since the PM-database is still very small, the indicated compilation time canbe 0 seconds. ----------------------------------------------------------If you have made any mistakes, the system will warn you with anacoustic signal and an error message. If this is the case, try to correctthe error. If you do not succeed in detecting and correcting the error, we suggest that youclose the database Italian-PM-W1 WITHOUT saving it. Then, @Link{ "go back" |"class-tree" } and try it once again. If that does not work either, you can openthe database  @Application-Link{ "Italian-PM-W2" | "Italian-PM-W2" } and dothe compilation there. ----------------------------------------------------------When the database is successfully compiled, you can test the PHClassspecification:@ItemOpen the Messages window or the PM-test window of the Italian-PM database youare currently in. @End-Item @ItemType the phrase "la dolce vita"@End-Item @ItemSelect the phrase (e.g. by a triple click)@End-Item@ItemChoose 'Recognize' in the 'PhraseManger' menu@End-Item If the specification has been done correctly, the Retrieval Dialog displays in itsfirst text field the analysed phrase, in its second text field the minimal form ofthe expression (here, the analysed phrase and the minimal form of the expressionare identical): @Figure{ "Retieval Dialog “la dolce vita”" | "143" | 379 | 221 }----------------------------------------------------------If however the result of the phrase analysis is different from what theabove figure shows, you have probably made a mistake somewhere. Theindication next to the title 'Retrieved forms'@Verbatim 	No matched idioms @End-Verbatim means that the analysed sentence has not been recognized as the idiomaticexpression we have specified in the previous sections.  Check your specification inItalian-PM-W1; especially the morphological restrictions in theExample specification (see figure 'Morphological Restrictions' under@Link{ "Example" | "example" }). ----------------------------------------------------------When the phrase has been recognized as an idiomatic expression, theRetrieval dialog will look as shown in the above figure.@ItemHave a look at the syntax tree and at the wordforms. Move around in theretrieval dialog by choosing the different available commands in itspull-down-menus. Most of the retrievable information should beunderstandable without any comments. If not, it will becomeclearer later in this tutorial.@End-Item The sentence has been recognized as an idiomatic expression. Now, wecan test other utterances. Copy them into the Messages or the PM-Testwindow and have them analysed (select them and press CTRL+K).@Item@Verbatim le dolci vite@End-Verbatim Plural of "la dolce vita"; should not be recognized as an utterance of theidiom "la dolce vita". The wordforms of the idiom are not allowed toinflect. Cf. section @Link{ "Example" | "example" }.@End-Item @Item@Verbatim la vera dolce vita@End-Verbatim 'the real sweet life'; should be recognized as idiomatic expression. Theadjective may have “external words” on its left-hand side. Cf. section@Link{ "Modifications" | "modifications" }. @End-Item @Item@Verbatim la vita dolce@End-Verbatim inversion of adjective and noun; should not be recognized as idiomaticexpression. No syntactical transformations are allowed for the idiom.Cf. section @Link{ "Transformations" | "transformations" }. @End-Item@Item@Verbatim la dolce sacra vita@End-Verbatim'the sweet holy life'; should not be recognized as idiomatic expression.“External” words are not allowed on the right-hand side of the adjective noron the left-hand side of the noun. Cf. section @Link{ "Modifications" |"modifications" }. @End-Item When the results of the retrieves are as described, the specification ofthe first PHClass is correct. You can go on to the specification of asecond PHClass. @Chapter{A Second PHClass}@Label{ "2nd-PHClass" }The first PHClass embraces expression of the type article + adjective + noun("la dolce vita", "una buona testa"). The second PHClass has a slightly different syntactic structure. Examples are:@Verbatim 	la pecora nera		'the black sheep'	una notte bianca	'a white night' = 'a sleepless night'	il carbone bianco	'the white coal' = 'hydroelectric power'@End-Verbatim As you have probably discovered, the syntactical structure of this type ofexpressions is: article + adjective + noun. This structure does not fit thestructure of the first PHClass we have specified. Therefore, anotherPHClass has to be specified. It is your task to specify this second PHClass. You are going to try this in thedatabase Italian-PM-W2. It is a copy of the database we have worked with untilnow. The example phrase will be "la pecora nera" ('the black sheep').As a little support, some additional linguistic information for the ones who donot know Italian and a summary description of the steps you have to take willbe given. In case you do not remember everything presented in the previoussections, references are made to a help-document and/or to the correspondingpassages of the specification of the first PHClass.Follow the suggestions step by step, or - if you feel sure enough - try it all byyourself. So, @Application-Link{ "open Italian-PM-W2" | "Italian-PM-W2" }First of all, open the @Application-Link{ "Class window" |"Italian-PM-W2-class-button" }, extend the tree and have a good look at the specificationof the (PHClass Art+[Adj+N]). Then, you can start the specification of the second PH-Class:1) Consider the example phrases and define their syntax tree. This will help you tofind a suitable name for the new PHClass and a suitable position in theclass-tree. The example phrases are:@Verbatim 		la pecora nera	una notte bianca	il carbone bianco@End-Verbatim Cf. First part of section @Link{ "The Class Tree" | "class-tree" } (@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-1" |"Help-1" }) 2) Add a new class node to the class-tree. Cf. Continuation of section @Link{ "The Class Tree" | "class-tree" } (@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-1" |"Help-2" }) 3) Open the new PHClass window and write a specification for the "la pecoranera" class. The specification can be subdivided into the following steps:3.1) Specify the Syntax-Tree. Cf. section @Link{ "Syntax-Tree" | "syntax-tree"} (@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-1" |"Help-3.1" }) 3.2.) Specify the Modifications. In the expressions of the "la pecora nera" type,the noun can be associated with external words on its left-hand side. E.g.:@Verbatim 		la solita pecora nera		'the usual black sheep'	il vero carbone bianco		'the real white coal'		@End-Verbatim Other modifications are not possible with this type of expressions. Cf. section@Link{ "Modifications" | "modifications" } (@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-1" | "Help-3.2"}). 3.3) Specify the Transformations. No syntactical transformation areallowed with this type of phrases. Cf. Section @Link{ "Transformations"| "transformations" } (@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-1" |"Help-3.3" }). 3.4.) Specify the Example phrase. The example phrase is @Verbatim "la pecora nera"@End-Verbatim None of the wordforms can be inflected without the expression loosing itsidiosyncratic meaning. Remember that you have to specify MorphologicalRestrictions for each wordform, and that the Example specification is closedwith the specification of individual modifications (No individual modificationswith "la pecora nera"). Cf. section @Link{ "Example" | "example" }(@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-1" | "Help-3.4"}). 4) Compile the database. Cf. section @Link{ "Compilation" | "compilation" }(@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-1" | "Help-4"}). 5) Check the correctness of your specification (@Document-Link{ "Help" |"GoMan Texts:PM Tutorial;PM-Support-1" | "Help-5" }). The specification of the second PHClass is completed!@Chapter{Reading}In the previous chapters, two simple PHClasses have been specified. Inthe following chapters, some other tools available in Phrase Managerwill be presented. The first one concerns the specification ofperiphrastic inflection clusters like "have gone", "aurait fait", "sonoandato", "wird gegangen sein", "more beautiful", "most delightful"etc. We suggest that you read, in the @Document-Link{ "Phrase Manager Book" |"Book:WM-Bibliography" | "PM-book"}, pp. 48-50 and pp. 78-81 on Periphrastic Inflection Rules,before you go on with the tutorial. @Chapter{Periphrastic Inflection Class: The guided Tour}@Label{ "periphrastic-inflection-tour" }PIClass stands for Periphrastic Inflection Class. In a PIClass, youspecify classes of periphrastic inflection clusters. PIClasses are treated as a particular kind of phrases. The onlydifference between PHClasses and PIClasses is that a PIClass mustcontain a reference to a so called Periphrastic Inflection Rule.  In the following sections, we are going to specify a PIClass and thecorresponding Periphrastic Inflection Rules for the German perfectand past perfect. @Section{The Data: German Perfect Tense}@Label{ "data-perfect" }The German Perfect tense is formed with thepresent tense of the auxiliary "haben" or "sein" and the past participle:@Verbatim 	ich bin gegangen		ich habe gebissen	du bist gegangen		du hast gebissen	er ist gegangen			sie hat gebissen	wir sind gegangen		wir haben gebissen	ihr seid gegangen		ihr habt gebissen	sie sind gegangen		sie haben gebissen	'I have gone'			'I have bitten'	etc.				etc.@End-Verbatim The general rule is that transitive verbs take "haben" and intransitiveverbs take "sein". In this form, this is rather an approximation than a rule,because there are a quite a lot of exceptions. Anyhow, the choice of theauxiliary does not bother us, here. More detailed information will be given during the specification of thePIClass and the periphrastic inflection rule.@Application-Link{ "Open German-PM-W1" | "German-PM-W1" }@Section{The Class Tree}@Label{ "class-tree-2" }Periphrastic Inflection Classes (PIClasses) are specified in the sameclass tree as PHClasses. So, open the @Application-Link{ "Classwindow" | "German-PM-W1-class-button" } of German-PM-W1.The class window already contains a PHClass subtree (PHClass VP).PHClasses and PIClasses must be specified in different subtrees.Therefore, we are going to specify a new parent node:@ItemIn the class window, select the node (PHClass VP)@End-Item @ItemChoose 'New Brother' in the @Application-Link{ "Edit" |"Client-Edit-Menu" } menu@End-Item@ItemInto the dialogue box, type @Verbatim (PIClass Auxiliary)@End-Verbatim The attribute "PIClass" (Periphrastic Inflection Class) is obligatory,the value "Auxiliary" is chosen freely.@End-Item@ItemClick OK.@End-Item Then, we can add another node for the PIClass specifying the perfecttense. We will call it (PIClass Perfect)@ItemIn the usual manner, add a new son node to the(PIClass Auxiliary) and name it (PIClass Perfect).@End-Item The class window should now look like this (PHClass subtree can also bepartially or fully extended):@Figure{ "PIClass Subtree “Auxiliary”" | "144" | 256 | 260 } @Section{Specification of the PIClass}In the previous section, we have specified a node for the first PIClass.Now, we can start its specification:@ItemOpen the window (PIClass Perfect) by double-clicking it.@End-Item The specification of a PIClass does not differ much from the specificationof a PHClass. It consists of the same subparts, each of them introduced bya title. Again, we are going to specify them step by step. Since the German perfect tense has more syntactical “instability” than thefirst two PHClasses, there will be quite a lot of specification work to do.This can be a little confusing, but just read, observe, execute thecommands and the typing exactly as you will be asked to, and try not toloose track of what we are doing. @SubSection{Syntax Tree}@Label{ "syntax-tree-2" }The syntax tree of the German perfect tense can be represented as follows:@Figure{ "Syntax Tree German Perfect Tense" | "146" | 294 | 110 } In the representation used in Phrase Manager - one pair of bracketsencloses the parent node and its direct son nodes - the syntax tree mustbe specified like this:@Verbatim (VP V V)@End-Verbatim So, open the window (PIClass Perfect) by double-clicking it (if you haven’tdone that, yet) and type:@Item@Verbatim SYNTAX-TREE@End-Verbatim @End-Item  @ItemNewline@End-Item @Item@Verbatim (VP V V)@End-Verbatim @End-Item @ItemNewline@End-Item The PIClass window should now look like this:@Figure{ "Syntax Tree (PIClass Perfect)" | "147" | 362 | 138 }@SubSection{Modifications}@Label{ "modifications-2" }As you probably remember, Modifications specify which words of a phrase maybe associated with “external” words. As for the German perfect tense,external words may stand between the two verbforms:@Verbatim 		ich BIN noch nicht GEGANGEN						'I have not yet gone'	sie IST früh nach Hause GEGANGEN					'she has gone home early'	 er HAT den Hund GESCHLAGEN					'he has beaten the dog'@End-Verbatim This can be expressed in two manners: @Itemexternal words are associated on the right-hand side of the firstverbform: @Verbatim V-1 >@End-Verbatim @End-Item @Itemexternal words are associated on the left-hand side of the second verbform:@Verbatim V-2 <@End-Verbatim @End-Item When a syntax tree has two or more identical symbols (here: V), they can bereferred to by digits indicating their position (left to right) in the tree. ThusV-1 and V-2. When no digit is indicated, the first symbol from the left istaken. We are going to specify the first solution mentioned above, i.e. the firstverbform may be associated with external words on its right-hand side. On a new line underneath the specification of the syntax tree, type:@Item@Verbatim MODIFICATIONS@End-Verbatim @End-Item@ItemNewline@End-Item@Item@Verbatim V >@End-Verbatim It would be equally correct to specify: @Verbatim V-1 >@End-Verbatim@End-Item This is how the PIClass window should look like, now:@Figure{ "Modifications (PIClass Perfect)" | "148" | 369 | 165 } @SubSection{Transformations}@Label{ "transformations-2" }Transformations define what kind of syntactic transformations (changes inword order) are possible with the phrase class.The two verb-forms of the German perfect are inverted in subordinateclauses: @Verbatim	main clause			subordinateich BIN GEGANGEN		weil ich GEGANGEN BIN'I have gone'			'because I have gone' wir HABEN den hund GESCHLAGEN	daß wir den Hund GESCHLAGEN HABEN'we have beaten the dog'	'that we have beaten the dog'@End-Verbatim This inversion is handled by a transformation rule we will call "VV-Inversion".Transformation rules are not specified within the PIClass but in a separatewindow 'Transformations'. There, they are specified together with arule identifier. By means of these rule identifiers, you specify in theclass window which transformation may be applied on the class. In thisway, transformations that are valid for several classes have to bespecified only once. Let’s go back to our PIClass to clarify this:On a new line underneath the specification of the modifications, type:@Item@Verbatim TRANSFORMATIONS@End-Verbatim @End-Item@ItemNewline@End-Item@Item@Verbatim VV-Inversion@End-Verbatim @End-Item@ItemNewline@End-Item @Figure{ "Transformations (PIClass Perfect)" | "149" | 368 | 186 }"VV-Inversion" is the rule identifier of the transformation rule we still haveto specify. @SubSubSection{Specification of a transformation rule}@ItemOpen the Transformations window of German-PM-W1 by clicking thebutton @Application-Link{ "transf" | "German-PM-W1-transf-button" }in the document window.@End-Item The window already contains a transformation rule with the identifier"PPV-Inversion". It is responsible for a transformation in the PHClassrepresented by the example phrase "ins gras beissen", i.e. the phrase we haveseen in the introductory section of this tutorial (section "What’s in PM"). Go into the window and type on a new line, underneath the already specifiedtransformation rule:@Item@Verbatim VV-Inversion		@End-Verbatim(this is the identifier of the newrule) @End-Item @ItemNewline@End-Item@Item(VP V-1 V-2) -> (VP V-2 V-1)@End-Item@ItemNewline@End-Item @Figure{ "Transformations: “VV-Inversion”" | "151" | 378 | 166 }The flash is the combination of a hyphen "-" and a pointed bracket ">". On the left-hand side of the flash, we have specified the syntax treeof the periphrastic inflection phrase as it is specified in the PIClass.The two identical symbols are numbered from left to right (V-1 andV-2). On the right-hand side of the flash, we have specified the syntax treeof the modified phrase, i.e. the syntax tree of the phrase after thetransformation. V-1 and V-2  may be inverted.@Figure{ "Transformation “VV-Inversion”" | "150" | 273 | 116 } This syntactical transformation is possible for all phrase classescontaining the reference "VV-Inversion" under TRANSFORMATIONS. Atthis stage of the specification, this holds for the (PIClass Perfect).Close now the window Transformations and go back to the PIClass Perfect.@SubSection{Periphrastic Inflection}@Label{ "periphrastic-inflection" }Under the subtitle "PERIPHR-INFL" you specify a reference to theperiphrastic inflection rule(s) responsible for the PIClass. Periphrasticinflection rules define how the elements of periphrastic inflections arerecognized and what feature structures should be built for theirrepresentation.Like transformations, periphrastic inflection rules are not specifiedwithin the PIClass definition. They are formalized in a separate windowtogether with a PI-rule identifier. By means of these rule identifiers,you specify in the PIClass window which PI-rules are responsible forthe class.The periphrastic inflection rules for the German perfect tense will becalled "Auxiliary-Perfect". We will see later, how this rule is to bespecified. For the time being, we will only specify the reference to it.So, go into the window (PIClass Perfect). On a new line, under thespecification of the Transformations, type:@Item@Verbatim PERIPHR-INFL@End-Verbatim@End-Item@ItemNewline@End-Item@Item@Verbatim Auxiliary-Perfect@End-Verbatim @End-Item@ItemNewline@End-Item @Figure{ "Periph-Infl (PIClass Perfect)" | "152" | 407 | 217 }@SubSection{Example}@SubSubSection{Example Phrase}@Label{ "example-phrase" }The example phrase for German perfect tense is quite simple. The verbs"haben" and "sein", respectively, are combined with a past participle.In the window (PIClass Perfect), on a new line, type@Item@Verbatim EXAMPLE@End-Verbatim@End-Item  @ItemNewline@End-Item @Item@Verbatim <haben>@End-VerbatimThe pointed brackets indicate that "haben" may be inflected.@End-Item@ItemWhite Space (or Tab)@End-Item @Item@Verbatim pp@End-Verbatim"pp" stands for "participle perfect" = past participle. It is a keywordthat we will have to specify in a separate window. @End-Item @ItemNewline@End-Item The example specification@Verbatim <haben> pp@End-Verbatim says, that an inflected wordform of the lexeme "haben" and a pastparticiple are combined to form an entity. @SubSubSection{Keyword Specification}@Label{ "keyword-specification" }To indicate the past participle, we used the keyword "pp". Keywords aresimple identifiers representing feature sets. They are used to avoidredundancies in specifications and can be used in different parts of aPM-formalization. The specification of keywords takes place in the window'Keywords'. @ItemClick the @Application-Link{ "keywords button" |"German-PM-W1-keywords-button" } in the document window to open thewindow. @End-Item The window already contains three keywords. To add our new keyword@Itemgo into the window 'Key-Words'@End-Item @Itemon a new line, type:@Verbatim pp = (Cat V)(Mod Part)(Temp Perf)@End-Verbatim @End-Item As you see, the syntax of a keyword specification is very simple:On the left-hand side of the equals sign ("="), you specify the keyword. The onlyrestriction is that a keyword must not be homographic with any wordform ofany lexeme stored or likely ever to be stored in the database. On the right-hand side, you indicate the feature or feature set the keywordstands for. In our German database, the past participle is defined by thefeature set we have just specified in the keyword-window. After the specification of the keyword, close the window key-words and go backto the (PIClass Perfect)@SubSubSection{Morphological Restrictions}@Label{ "morphological-restrictions-2" }Like an example phrase in a PHClass definition, an example in a PIClass mustcontain morphological restrictions. Morphological restrictions allow thedisambiguation of homographic wordforms and the specification to whatextend words may inflect.There are two elements in the example phrase: "<haben>" and "pp". @Item "haben" may be inflected. To what extend is not relevant here, as we will see withthe specification of the periphrastic inflection rule(s). So, type on a new line,underneath the example phrase:@Verbatim haben   (Cat V)@End-Verbatim @End-Item @ItemThe keyword "pp" is already specified as a past participle (cf. previous subsection).Nevertheless, we want to add a morphological restriction: only pp’s of verbs specifiedwith the feature (Aux haben) have a perfect tense with "haben". Therefore, type ona new line:@Verbatim pp   (Cat V)(Aux haben)@End-Verbatim @End-Item Do not forget, that every example must be closed by the indication of individualmodifications. There are none. @ItemType a hyphen "-", on a new line.@End-Item @Figure{ "Example Specification (PIClass Perfect)" | "153" | 414 | 284 }This was the specification of the example phrase for the perfect with "haben". @ItemTry now to specify the example phrase for "sein". Start with the subtitleEXAMPLE on a new line and continue analogously to the example with "haben".@End-Item The window (PIClass Perfect) should now look like this:@Figure{ "(PIClass Perfect)" | "156" | 397 | 376 }The specification of the PIClass is now completed. However, we still have tospecify the Periphrastic Inflection Rule for the perfect tense.@Section{Periphrastic Inflection Rules, Some Remarks}@Label{ "periphrastic-inflection-rules" }In the subsection @Link{ "Periphrastic Inflection" | "periphrastic-inflection" } wehave specified a reference to a Periphrastic inflection rule we have named"Auxiliary-Perfect". This PIRule still remains to be specified. PIRules define several characteristics of a periphrastic inflection type. We willdescribe them briefly before we are going to specify the PIRule for German perfecttense: PIRules define@Itemwhich wordforms exactly are combined into a periphrastic inflection form: e.g. theindicative present ("have", "has") plus the past participle for the English perfecttense, the indicative past ("had") plus the past participle for the English pastperfect. @End-Item @Itemthe position where the new combined form must be placed in a phrase: In e.g.German "ich BIN  nach Hause GEGANGEN" the position of the cluster must be theposition of the auxiliary: "ich BIN GEGANGEN nach Hause" (facilitates the phraserecognition, especially with transformations)@End-Item @Item the citation form of the lexeme the cluster belongs to. E.g. the superlative "mostinteresting" must be attributed to the adjective "interesting", not to "most".@End-Item @Itemattribution of specific features: e.g. (Degree Compar) and (Degree Super) tocomparative forms like "more interesting" and "most interesting".@End-Item@Itempercolation of features from one of the elements of the cluster: e.g. number andperson features from the auxiliary in English perfect tense:@Verbatimhas (Pers 3)(Num Sing)		has been (Pers 3)(Num SG)@End-Verbatim @End-Item @Section{Specification of the PIRule}@Label{ "PIRule-specification" }Now, let’s go back to our database @Application-Link{ "German-PM-W1" |"German-PM-W1" } (you should have worked through the previous sections startingfrom “7. Periphrastic Inflection: The guided Tour”). @ItemOpen the window Periphrastic-Inflections by clicking the @Application-Link{"periphr" | "German-PM-W1-periphr-button" } button in the document window.@End-Item @ItemIn the window, type the rule identifier we have chosen in the subsection @Link{"Periphrastic Inflection" | "periphrastic-inflection" }: @Verbatim Auxiliary-Perfect@End-Verbatim @End-Item The actual PIRule is specified under this title. A PIRule consists of two partsseparated by an equals sign. On the left-hand side, you specify which wordforms of the lexemes specified in thePIClass form the cluster. The specification is done by means of wordformfeatures and keywords. For the German perfect tense, the wordforms of the indicative present (Mod Ind)(Temp Pres) of "haben" or "sein" are combined with a past participle. So,type: @ItemNewline@End-Item @Item@Verbatim (Cat V)(Mod Ind)(Temp Pres) + pp@End-Verbatim The wordforms of the present are qualified by these features;  we have alreadydefined the keyword "pp" for all past participles (cf. @Link{ "KeywordSpecification" | "keyword-specification" })@End-Item  @Itemone or more White Spaces (or Tabs), than the equals sign "=".@End-Item On the right-hand side of the equals sign, you specify some characteristics of thecombined periphrastic inflection cluster. Let’s first do the typing:@Itemone or more White Spaces (or Tabs)@End-Item @Item@Verbatim (POS 1)(CFORM 2)(PERC 1)(Cat V)(Mod Ind)(Temp Perf)@End-Verbatim @End-Item @Figure{ "PIRule Auxiliary-Perfect" | "155" | 574 | 200 }Have your PERIPHR-INFL window with the PIRule specification on your screen whilereading the following.This is what the right-hand side of the rule specifies @SubSection{Position}(POS 1) defines that the position of the cluster in a phrase is the same as theposition of the first element (1) on the left-hand side, i.e. the position of theperfect tense in an analysed phrase is the same as the position of the auxiliary.For example, the sentences@Verbatim 	er HAT den Hund GESCHLAGEN	sie IST nach Hause GEGANGEN@End-Verbatim will be analysed as@Verbatim 	er HAT GESCHLAGEN den Hund	sie IST GEGANGEN nach Hause @End-VerbatimThis facilitates the specification of transformations and modifications. In Germanclauses, the position of the inflected verbform does not depend on whether it is amain verb or an auxiliary. Compare the following sentences (in the present tense)with the example phrases above:@Verbatim 	er SCHLÄGT den Hund	sie GEHT nach Hause @End-Verbatim 	 Sentences with periphrastic tense forms can thus be treated as sentences withsimple tense forms.  @SubSection{Citation Form}(CFORM 2) defines that the cluster belongs to the same citation form andconsequently to the same lexeme as the second element on the left-hand side, i.e.perfect tense clusters belong to the same lexeme as the past participle:@Verbatim 	ist gegangen 	= wordform of "gehen", not of "sein"	hat geschlagen = wordform of "schlagen", not of "haben". @End-Verbatim @SubSection{Wordform Features}@Label{ "wordform-features" }The wordform features of the periphrastic inflection forms are the combination oftwo types of features.(PERC 1) defines that the cluster inherits all wordform features of the firstelement that are NOT used in the restriction on the left-hand side. e.g.@Verbatim "ist" (Cat V)(Mod Ind)(Temp Pres)(Pers 3rd)(Num SG)@End-Verbatim The first three features (Cat V)(Mod Ind)(Temp Pres) are used in the restriction onthe left-hand side (cf. the PERIPHR-INFL Window). Therefore, only (Pers 1) and (Num SG) are inherited. The other relevant wordform features are specified in the PIRule, after thePercolation definition: (Cat V)(Mod Ind)(Temp Perf). For the verbform "ist gegangen" this results in the wordform features:@Verbatim 	(Cat V)(Mod Ind)(Temp Perf)(Pers 3rd)(Num SG)@End-Verbatim @Section{Compilation}@Label{ "compilation-2" }The specification of the first Periphrastic Inflection class is now completed. If youhave followed all the steps from the beginning of this chapter (@Link{ "PeriphrasticInflection: The Guided Tour" | "periphrastic-inflection-tour" }), you can now compile yourversion of the database German-W1.@ItemChoose 'Run Compiler' in the @Application-Link{ "Phrase Manager Menu" |"Client-PM-Menu" } @End-Item @ItemClick OK in the dialogue box@End-Item If you have carried out all specification steps correctly, the following messagewill be displayed in the message window:@Verbatim  > PM Compilation ok. It took ... seconds.@End-Verbatim ----------------------------------------------------------If you have made any mistakes, the system will warn you with anacoustic signal and an error message. If this is the case, correctthe error and try to compile the PM-specification again.If you do not succeed in detecting and correcting the error, we suggest that youclose the database German-PM-W1 WITHOUT saving it. Then, @Link{ "go back" |"periphrastic-inflection-tour" } and try it once again. If that does not work either, you canopen the database  @Application-Link{ "German-PM-W2" | "German-PM-W2" } to compare it toyour specification or simply to go further with this tutorial. It is an alreadycompiled copy of the specification we described for German-PM-W1. ----------------------------------------------------------When the database is successfully compiled, you can test the PIClassspecification:@ItemOpen the 'Message' or the PM-Test window by clicking the correspondingbutton in the document window of the database.@End-Item @ItemType the examples given below into the window@End-Item @ItemSelect them one by one (e.g. with a triple-click)@End-Item @ItemChoose 'Recognize' in the @Application-Link{ "PhraseManager Menu" |"Client-PM-Menu" } (or type CTRL+K)@End-Item @ItemCompare the results of the retrieve with the comments to theexamples below.@End-Item ***1) @Verbatim ich bin gegangen	@End-Verbatim 'I have gone'Must be recognized as wordform of "gehen":@Figure{ "Retrieval dialog “ich bin gegangen" | "157" | 430 | 289 }Note the indication of the periphrastic inflection in the last text field.***2)@Verbatim  er hat geschlagen	@End-Verbatim 'he has beaten'Must be recognized as wordform of "schlagen" with the features @Verbatim (Cat V)(Mod Ind)(Temp Perf)(Pers 3rd)(Num SG) @End-Verbatim ***3) @Verbatim *du hast gegangen		*du bist geschlagen@End-Verbatim May not be recognized as wordforms of "gehen" and "schlagen", respectively."gehen" is specified with the entry feature (Aux sein), "schlagen" with theentry feature (Aux haben). Therefore, the two sentences do not meet themorphological restrictions specified with the example phrases in the (PIClassPerfect). Cf. @Link{ "Morphological Restrictions " |"morphological-restrictions-2" }. *** 4)@Verbatim  ich bin heute gekommen		@End-Verbatim lit.  'I have cometoday' "bin gekommen" must be recognized as 1st person singular perfect tense of"kommen". The first verbform may be associated with external words (here:"heute") on its right-hand side. Cf. @Link{ "Modifications" | "modifications-2" }***5)@Verbatim  wir haben diesen menschen gekannt			@End-Verbatim 'we have known this person' "haben gekannt" must be recognized as perfect tense of "kennen"(modifications; cf. 4). Note that "haben gekannt" can be the 1st and the 3rdperson plural. This, because in these two persons of the present indicative"haben" is ambiguous. This ambiguity is correctly percolated on theperiphrastic cluster (for feature percolation cf. @Link{ "WordformFeatures" | "wordform-features" }) ***6)@Verbatim 	dass ich gegangen bin 		'that I have gone'	dass wir geschlagen haben	'that we have beaten'@End-Verbatim Must be recognized as wordforms of "gehen" and "schlagen", respectively.In subordinate clauses like these, the word order in the perfect cluster isinverted. Therefore, inversion must be allowed; cf. @Link{"Transformations" | "transformations-2" }***7) As a last test, we can take the example of the first PHClass ("in das grasbeissen"):@Verbatim 	er hat ins gras gebissen	dass er ins gras gebissen hat@End-Verbatim '(that) he has bitten into the grass' = 'he has kicked the bucket' In both sentences (main and subordinate clause), "hat gebissen" must berecognized as the 3rd person singular perfect tense of "beissen".  Note the positionof the cluster in the analysed sentence. ******Finally:@ItemIf you haven’t opened it yet, open @Application-Link{ "German-PM-W2" |"German-PM-W2" }. @End-Item @ItemOpen the window @Application-Link{ "Periphrastic Inflection" |"German-PM-W2-periphr-button" }@End-Item @ItemHave a look at the rules under the title "Auxiliary-Perfect".@End-Item The first line is the rule for the German perfect tense as we have specified it inthis chapter. The second line is the rule for German pluperfect@Verbatim 		sie war gegangen	'she had gone'	er hatte geschlagen	'he had beaten'@End-Verbatim The pluperfect is formed exactly as the perfect tense except for the tense of theauxiliaries "haben" and "sein". Instead of in the present tense, they are used inthe past (imperfect). This is indicated by the feature (Temp Impf) on the left-handside of the equals sign.On the right-hand side, the only thing that changes is the added tense feature:(Temp Plusq) (= plusquamperfect) Both rules are specified under the rule identifier "Auxiliary-Perfect". This is theidentifier reference is made to in the (PIClass Perfect). In this manner, both theperfect and the pluperfect are defined by the same PIClass. @ItemAnalyse the following sentences (type them into the message window,select them and press CTRL+K):@Verbatimsie war gegangen		hattest du geschlagen@End-Verbatim @End-Item@Chapter{Periphrastic Inflection: A Second PIClass}@Label{ "2nd-periphrastic-class" }In the previous chapter, we have specified a PIClass for the German perfecttense. You will now try to specify a PIClass for the German future. The future is formed with the present tense of the auxiliary "werden" and theinfinitive:@Verbatim 	ich werde gehen		'I shall/will go'	du wirst kennen		'you will know'	er wird rennen		'he will run'	wir werden haben	'we shall/will have'	ihr werdet kommen	'you will come'	sie werden sein		'they will be'@End-Verbatim As a little support, some additional linguistic information for the ones whodo not know German and a summary description of the steps you have to takewill be given. In case you do not remember everything presented in theprevious sections, references are made to a help-document and/or to thecorresponding passages of the specification of the first PHClass.Follow the suggestions step by step and do not hesitate to use the specification of the(PIClass Perfect) as a reminder.  @Application-Link{ "Open German-PM-W3" | "German-PM-W3" }@ItemOpen the lexical browser of "werden" and have look at the wordforms of theindicative present in order to get acquainted with the features you will haveto use. @End-Item @Item Then, open the @Application-Link{ "class window" |"German-PM-W3-class-button" }, extend the PIClass Tree and open the window(PIClass Perfect). Have a good look at the specification of this PIClass and keep itopen on your screen. It will help you to specify the PIClass for the future tense.@End-Item @ItemFinally, start the specification following the steps indicated below.@End-Item 1) Add a new PIClass node for the future tense. Give it an appropriatename. Cf. section @Link{ "Class Tree " | "class-tree-2" } (@Document-Link{"Help" | "GoMan Texts:PM Tutorial;PM-Support-2" | "Help-1" }). 2) Open the new PIClass window and start with the specification of the syntaxtree. Do not hesitate to open the window (PIClass Perfect) as an additionalsupport for your specification. Cf. section @Link{ "Syntax Tree" |"syntax-tree-2" }. (@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-2" | "Help-2" })3) Specify the Modifications. In the German future tense,external words may stand between the two verbforms:@Verbatim 	sie WIRD morgen GEHEN				'she will go tomorrow'	du WIRST den Hund nie mehr SCHLAGEN  		'you will never beat the dog again'@End-Verbatim Cf. section @Link{ "Modifications" | "modifications-2" }. (@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-2" | "Help-3" }) 4) Specify the Transformations. The two verb-forms of the German future areinverted in subordinate clauses: @Verbatim	main clause			subordinatedu WIRST GEHEN			weil du GEHEN WIRST'you will go'			'because you will go' sie WERDEN Probleme HABEN	daß sie Probleme HABEN WERDEN'they will have problems'	'that they will have problems'@End-Verbatim cf. section @Link{ "Transformations" | "transformations-2" }. (@Document-Link{ "Help" | "GoMan Texts:PM Tutorial;PM-Support-2" | "Help-4" }) 5) Specify a reference to a Periphrastic Inflection Rule. We suggest that,for the time being, you just specify a rule identifier. The specification orthe Periphrastic Inflection Rule will be done later. Cf. section@Link{ "Periphrastic Inflection" | "periphrastic-inflection" }.(@Document-Link { "Help" | "GoMan Texts:PM Tutorial;PM-Support-2" |"Help-5" }) 6) Specify an example phrase with the corresponding morphologicalrestrictions. Remember that the future is formed with an inflected wordform of "werden"and an infinitive. For the infinitve you will have to specify a keyword. In order to view the features of the relevant wordforms, open the lexicalbrowser of "werden" and of another verb (for the infinitive) Finally, do not forget to specify the individual modifications. There are nonefor the future tense. Cf. sections @Link{ "Example Phrase" | "example-phrase" }, @Link{ "KeywordSpecification" | "keyword-specification" }, @Link{ "Morphological Restrictions" |"morphological-restrictions-2" }. (@Document-Link { "Help" | "GoMan Texts:PM Tutorial;PM-Support-2" | "Help-6" }) 7) Specify a Periphrastic Inflection Rule for the future tense in thecorresponding window. It might be helpful to open the window@Application-Link{ "Periphrastic Inflections" |"German-PM-W3-periphr-button" } and to have a look at the PIRules under"Auxiliary-Perfect" in order to see what elements must be specified. For a wordform of the future we suggest the following feature set:@Verbatim  "wirst gehen"	(Cat V)(Mod Ind)(Temp Fut)(Pers 2nd)(Num SG)@End-Verbatimwhere the person and number features are inherited from the auxiliary:@Verbatim "wirst"	(Cat V)(Mod Ind)(Temp Pres)(Pers 2nd)(Num SG)@End-Verbatim Cf. sections @Link{ "Periphrastic Inflection Rules" |"periphrastic-inflection-rules" } and @Link{ "Specification of a PIRule" |"PIRule-specification" }. (@Document-Link { "Help" | "GoMan Texts:PM Tutorial;PM-Support-2" |"Help-7" }) 8) Compile the database and check the correctness of your specification.Cf. section @Link{ "Compilation" | "compilation-2" }. (@Document-Link {"Help" | "GoMan Texts:PM Tutorial;PM-Support-2" | "Help-8" }) The specification of the PIClass for the German future is completed!!!The specification of periphrastic inflection classes and rules can be more complex thanthe two examples discussed in this Tutorial. We suggest that you read thecorresponding chapters in the @Document-Link{ "Phrase Manager Book" |"Book:WM-Bibliography" | "PM-book"}. Furthermore, the database German (if available)contains a complete specification of the periphrastic verb inflection of German. @Chapter{Reading}The following sections will present the so-called Clitic Rules. The phenomenon of clitics is generally explained as the leaning of one ormore unstressed words (bound words) against a stressed one. The line betweenbound and free words, however, is sometimes difficult to trace. In PhraseManager, we handle as clitics “only” the cases where different syntacticforms are bound into a single text word. The purpose of the clitic analysis isto separate the different components of a fused text word:@Verbatim 		cannot		->	can not	he’ll go	->	he will go	j’accuse	->	je accuse	(French: 'I accuse')	am Abend	->	an dem Abend	(German: 'in the evening')	dimmelo		->	dì me lo	(Italian: 'say me it' = 'say it to me') @End-VerbatimBefore you go on with the Tutorial, we suggest that you read, in the @Document-Link{ "Phrase Manager Book" | "Book:WM-Bibliography" | "PM-book"}, pp. 62-70 in order to get a firstimpression of how clitics are treated in Phrase Manager.@Chapter{Clitic Rules}@Label{ "clitic-rules" }This chapter will present the specification of a clitic rule for therecognition of contractions of the modal "will" and personal pronouns inEnglish: @Verbatim 		I'll	=	I shall/will	you'll	=	you will	he'll =		he will	etc.@End-Verbatim We are going to present the clitic rule in a database called English-PM-W1.It is a working copy containing the specification of a part of Englishinflectional morphology. The specification will be explained step by step.You will be invited to execute the steps after having read their description.@Section{The Data}@Label{ "data-english" }For the sake of clarity, we will not go into details concerning thedistribution of the modals "shall" and "will", that, in fact, is more complexthan the data we will present here.We will specify Clitic Rules that analyse the following contracted forms:@Verbatim 		I'll	=	I shall / I will	you'll	=	you will	he'll	=	he will	she'll	= 	she will	it'll	=	it will	we'll	=	we shall / we will	they'll	= 	they will@End-Verbatim Let’s first of all have a look at the elements these contracted formsconsists of.@Item@Application-Link{ "Open English-PM-W1" | "English-PM-W1" }@End-Item @Item  Open the @Application-Link{ "messages window" | "English-PM-W1-messages-button" }@End-Item @ItemSelect the personal pronouns one by oneand open their lexical browser (press CTRL+L).@End-ItemThe wordforms "i" (no capitals are used in this database), "you", "he","she", etc. are all specified by the features (Cat Pron)(PForm P_Subj).Some of them ("you", "it") have homographs with the feature (PFormP_Obj). Since contraction with "will" occurs only with subject forms ofthe personal pronouns, we can say that:all forms that can be combined with "’ll" are qualified by the features (Cat Pron)(PFormP_Subj). @ItemIn the messages window, select the wordform "will"and open its lexemebrowser (press CTRL+L). Do the same with "shall". @End-Item The lexemes "will" and "shall" are qualified by the features (CatV)(Function Modal). The wordforms "will" and "shall" have the wordformfeature (Cat V)(VForm Present).@Section{CElement and CRule Specification}Clitic Rules define, on the one hand, what kind of elements can be foundtogether and, on the other hand, how they have to be divided intoseparate wordforms. In the rules, you specify the elements that can be found inclitic expressions. When the elements are subject to graphic modifications, they must bespecified as so-called CElements (Clitic Elements) with all their stringvariants. In our case, the modals "will" and "shall" will have to be specified as aCElements, since they have the string variant "'ll" in the contracted“clitic-form”. @SubSection{Clitic Tree}You specify the (CElements) and the (CRules) in the window 'Clitic'.There, you can define them hierarchically in a tree structure similar tothe tree structure in WM and in the class window. @ItemTo open the window, click the @Application-Link{ "clitic button" |"English-PM-W1-clitic-button" } in the document window.@End-Item We first have to specify the CElements. For our example, "will" and"shall" must be specified as CElements. We suggest the followingstructure.@ItemGo into the window 'clitic'@End-Item @Itemselect the root node@End-Item @Itemadd a new son node using the 'New Son' command in the Edit menu;name it @Verbatim (CElement Verb)@End-Verbatim @End-Item@Itemselect the new node (CElement Verb)@End-Item @Itemadd a new son node using the 'New Son' command in the Edit menu,name it @Verbatim (CElement will)@End-Verbatim@End-Item@Figure{ "Clitic Tree with CElement node" | "158" | 315 | 281 }As usual, other tree structures and other node names are possible. However,CElement nodes must obligatorily contain the attribute 'CElement'. TheCElements as well as the CRules are specified in the leave nodes. The clitic tree editor does not differ from other tree editors you havealready worked with. Therefore, you should already be familiar with itshandling. The CElement node for "shall" will be specified later.@SubSection{CElement Specification}@Label{ "CElement-specification" }@ItemOpen the window (CElement will) by double-clicking the node in theClitic window.@End-Item A CElement must be specified by a form that can be retrieved from the WMdictionary, followed by a list of possible string variants. The string variantsare simply handled as strings and do not necessarily have to be found inthe WM dictionary.@Item	Go into the window (CElement will) and type:@Verbatim 		(CElement Full-Form) 	"will"	(Cat V)(Function Modal)	(CElement Clit-Form)	"'ll"@End-VerbatimThe elements on one line are separated by one or more White Spaces or Tabs.@End-Item @Figure{ "(CElement will)" | "159" | 380 | 192 } (CElement Full-Form) and (CElement Clit-Forms) are the features specifyingthe two variants of the (CElement will).The first variant must be a wordform that can be found in the WM dictionary.It consists of a surface string ("will") and the entry features qualifying thelexeme the wordform belongs to (Cat V)(Function Modal).The second form is the string variant the wordform assumes in a contractedform ("'ll"). @SubSection{CRule Specification}We first have to create a leave node for the rule specification. Rule nodesmust have the attribute "CRule".@ItemGo into the window 'Clitic' and select the node(CElement Verb) @End-Item @Itemadd a new brother node and name it@Verbatim (CRule Pron+will/shall)@End-Verbatim @End-Item @Figure{ "Clitic Tree with CRule node" | "160" | 315 | 238 } For the time being, this structuring is highly arbitrary. It will be moremotivated when more clitic rules are specified.A CRule defines on its left-hand side, which elements must be found in thecontracted form. On its right-hand side, it specifies by which individualwordforms the contracted form has to be replaced when analysed. @ItemOpen the window (CRule Pron+will/shall) by double-clicking its node in theClitic window.@End-Item @ItemType:@Verbatim(Cat Pron)(PForm P_Subj) + (CElement Verb.will.Clit-Form)@End-Verbatim@End-Item This is the left-hand side of the CRule. It defines that the “clitic form”to be recognized is the combination of a wordform with the features (CatPron)(PForm P_Subj) plus a CElement qualified by the feature set(CElement Verb.will.Clit-Form). As we have seen in the data , all the wordforms that can be combined with"'ll" ("i", "you", "he", "she", etc.) are qualified by the features (CatPron)(PForm P_Subj). Cf. @Link{ "The Data" | "data-english" }As we have defined earlier, the CElement with the feature set (CElementVerb.will.Clit-Form) is "'ll". Cf. @Link{ "CElement Specification" |"CElement-specification" }. The forms meeting the left-hand restriction of the CRule are, thus, thefollowing:"i'll", "you'll", "he'll", "she'll", "it'll", "we'll", "they'll" which are exactly the forms we want to have analysed.In the Rule window, on the same line, type: @Itemone or more White Spaces (or Tabs)@End-Item@Item= (equals sign)@End-Item@Itemone or more White Spaces (or Tabs)@End-Item@Item@Verbatim(Cat Pron)(PForm P_Subj), (CElement Verb.will.Full-Form)@End-Verbatim@End-Item @ItemNewline@End-Item @Figure{ "(CRule Pron+will/shall)" | "161" | 743 | 159 } The right-hand side of the rule says that the left-hand side has to bere-written as the same wordform (Cat Pron)(PForm P_Subj) and aCElement with the feature set (CELement Verb.will.Full-Form).The CElement matching this restriction is "will" (Cat V)(Function Modal).Cf. @Link{ "CElement Specification" |"CElement-specification" } When a form like, e.g. "he'll" is analysed, the form meets the restrictionson the left-hand side of this CRule:@Verbatim		"he" (Cat Pron)(PForm P_Subj)	"'ll" (CElement Verb.will.Clit-Form)@End-Verbatim Consequently, the form will be rewritten as the same pronoun "he" andthe (CElement Verb.will.Full-Form) "will":@Verbatim 	"he will"@End-Verbatim @Section{Compilation}Now, you can compile the first CRule specification.@ItemChoose 'Run Compiler' in the @Application-Link{ "Phrase Manager Menu" |"Client-PM-Menu" } @End-Item @ItemClick OK in the dialogue box@End-Item If you have carried out all specification steps correctly, the following messagewill be displayed in the message window:@Verbatim  > PM Compilation ok. It took ... seconds.@End-Verbatim ----------------------------------------------------------If you have made any mistakes, the system will warn you with anacoustic signal and an error message. If this is the case, correctthe error and try to compile the PM-specification again.If you do not succeed in detecting and correcting the error, we suggest that youclose the database English-PM-W1 WITHOUT saving it. Then, @Link{ "go back" |"clitic-rules" } and try it once again. ----------------------------------------------------------When the database is successfully compiled, you can test the CRule specification:@ItemOpen the 'Message' or the PM-Test window.@End-Item @ItemType the examples given below into the window@End-Item @ItemSelect them one by one (e.g. by a triple-click)@End-Item @ItemChoose 'Recognize' in the @Application-Link{ "PhraseManager Menu" |"Client-PM-Menu" } (or type CTRL+K)@End-Item Examples:@Verbatim 		i'll	you'll	he'll	she'll	it'll	we'll	they'll	* me'll@End-Verbatim For all but the last example, a retrieval dialog must be opened that looks similar to this:@Figure{ "Retrieval Dialogue of “she'll”" | "162" | 442 | 310 }If the forms are not recognized ("Word not defined"), you have made a mistake. You will haveto go back to the begin of this chapter and check your specification thoroughly. Pay attentionto typing errors! (@Link{ "Go back" | "clitic-rules" }). However, it is correct when the last example  "me'll" is not recognized and the messageswindow displays this message: @Verbatim 	Word not defined@End-Verbatim The pronoun "me" does not match the restriction which states that the pronoun musthave the feature (PForm P_Subj). Cf. lexeme browser of "me". @Section{Some Adjustments With “shall”}@Label{ "shall" }(Before starting with this section, you must have done the previous sections on Clitics.Otherwise you will not be able to execute the commands. If necessary, @Link{ "go back"| "clitic-rules" }). So far, the CElements and the CRules cover only contractions with "will". As we haveshown in the presentation of the data, "i'll" and "we'll" can also be the contraction of "ishall" and "we shall" (cf. @Link{ "The Data" | "data-english" }). To cover these contractions, too, we have to specify another CElement and another CRule.Let’s first define the CElement:@SubSection{CElement}@ItemGo into the @Application-Link{ "Clitic window" | "English-PM-W1-clitic-button" } ofEnglish-PM-W1@End-Item @ItemSelect the node (CElement will) and add a new brother using the 'New Brother' commandin the Edit menu; name it@Verbatim 	(CElement shall)@End-Verbatim @End-Item@Figure{ "Clitic Tree with node (CElement shall)" | "163" | 260 | 139 }@ItemDouble-Click the node (CElement shall) to open the its window	@End-Item @ItemDouble-Click the node (CElement will) to open the its window	@End-Item @Item Have a look at the specification of the CElements in the window (CElement will)and try to do the specification for the CElements in the window (CElements shall).Try it by yourself! Then, check it with the figure below. @End-Item @Figure{ "(CElement shall)" | "164" | 393 | 180 } @ItemCheck your specification (typing mistakes?!), correct it if necessary. If you have not yettyped anything, type the above specification into the window (CElement shall).@End-Item The first element (CElement Full-Form) is the string of the wordform as it can be found inthe WM dictionary and the feature set qualifying the lexeme the wordform belongs to. The second element (CElement Clit-Form) is the string variant the wordform assumes incontracted forms.@SubSection{CRule}Now, we can write a CRule for the contracted forms with "shall". It would be possible tocreate a new CRule node, but we prefer to specify the rule in the same CRule nodeas the rule for contracted forms with "will".@ItemGo into the @Application-Link{ "Clitic window" | "English-PM-W1-clitic-button" }and open the Window (CRule Pron+will/shall).@End-Item Remember that the left-hand side of a CRule defines the elements the “clitic form”must be combined of. The elements are "i" or "we" and "'ll".The wordforms "i" and "we" can be specified in two different manners:@ItemBy means of restrictions on the wordform features: The feature set matching both "i"and "we" (but no other wordform) is @Verbatim 	(Cat Pron)(Pers 1st)(PForm P_Subj)@End-Verbatim Open their lexical browser to check this (Type them into the messages window, selectthem and press CTRL+L). @End-Item@ItemBy means of feature and string restrictions: "i and "we" belong to the group ofwordforms qualified by the features (Cat Pron)(PForm P_Subj). Instead of the feature(Person 1st), you can also specify the string of their citation form (between braces):@Verbatim (Cat Pron)(PForm P_Subj) {"i", "we"}@End-Verbatim The restriction on strings is particularly convenient when two or morewordforms do not have a common feature set that is not shared by other wordforms (e.g."i" and "you"). @End-Item The second element of the “clitic form” ("'ll") is a CElement qualified by the feature set@Verbatim 	(CElement Verb.shall.Clit-Form)@End-VerbatimCf. window (CElement shall). The left-hand side of the new CRule can be specified as follows:@ItemGo into the window (CRule Pron+will/shall)@End-Item @ItemOn a new line, type:@Verbatim	(Cat Pron)(PForm P_Subj) {"i", "we"} + (CElement Verb.shall.Clit-Form)@End-Verbatim@End-Item On the right-hand side of the CRule, you define by which wordforms thecontracted form has to be replaced when analysed:@ItemOn the same line, type White Space, equals sign "=", White Space@End-Item @ItemThen, type:@Verbatim	(Cat Pron)(PForm P_Subj), (CElement Verb.shall.Full-Form)@End-Verbatim i.e. the “clitic-form” is to be replaced by the same pronoun and "shall" (cf. window(CElement shall)).@End-Item @Figure{ "(CRule Pron+will/shall)" | "165" | 821 | 129 } @SubSection{Compilation}Now, you can compile the new CRule specification.@ItemChoose 'Run Compiler' in the @Application-Link{ "Phrase Manager Menu" |"Client-PM-Menu" } @End-Item @ItemClick OK in the dialogue box@End-Item If you have carried out all specification steps correctly, the following messagewill be displayed in the message window:@Verbatim  > PM Compilation ok. It took ... seconds.@End-Verbatim ----------------------------------------------------------If you have made any mistakes, the system will warn you with anacoustic signal and an error message. If this is the case, correctthe error and try to compile the PM-specification again.If you do not succeed in detecting and correcting the error, go back to the beginning ofthis section and compare your specification with the description given there.Typing mistakes?! (@Link{ "Go back" | "shall" })----------------------------------------------------------When the database is successfully compiled, you can test the CRule specification:@ItemOpen the 'Message' or the PM-Test window by clicking the correspondingbutton in the document window of the database.@End-Item @ItemType the examples given below into the window@End-Item @ItemSelect them one by one (e.g. by a triple-click)@End-Item @ItemChoose 'Recognize' in the @Application-Link{ "PhraseManager Menu" |"Client-PM-Menu" } (or type CTRL+K)@End-Item Examples:@Verbatim  	i'll	we'll	you'll	he'll	they'll@End-Verbatim For the first examples, a retrieval dialog similar to this should be opened:@Figure{ "Retrieval Dialog “we'll”" | "166" | 392 | 342 }The retrieval dialog indicates two solutions1) "we shall"; this form has been analysed by the second CRule2) "we will"; this form has been analysed by the first CRuleFor the other forms, the system correctly analyses one form only, viz. the formwith "will". "you'll", "he'll" and "they'll" do not match the restrictions of thesecond CRule. @Chapter{A Final Remark}The specification of idiomatic expressions, periphrastic inflections and clitic clusterscan be quite complex — more complex than the few examples presented in this tutorial.For this reason, the presentation of the PM-formalism makes no claim to beexhaustive. The formalism offers a wider range of possibilities than the limitedspace allowed us to present here. To become more acquainted with PM and all its possibilities, you will have to consult the@Document-Link{ "Phrase Manager Book" | "Book:WM-Bibliography" | "PM-book"} and to have alook at other specifications like the database German-StB (if available). But most of all, wesuggest that you try it out by yourself. After all, “in doing we learn”. 