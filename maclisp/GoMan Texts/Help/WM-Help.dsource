@Chapter{Alphabetic Character}@Index{alphabetic character}@Label{ "alphabetic-character" }The alphabetic characters in WM are:@Verbatim 	a b c d e f g h i j k l m n o p q r s t u v w x y z	A B C D E F G H I J K L M N O P Q R S T U V W X Y Z	0 1 2 3 4 5 6 7 8 9	+ - * @ $ % ^ & _ \ < > ~ [ ]@End-Verbatim See also Word Manager book, @Document-Link{ "Section 2.2.2." |"GoMan Texts:The Book;The Book" | "Section-2.2.2." } (printed version p.40) @Chapter{Attribute, Value}@Index{attribute}@Index{value}@Label{ "attribute" }@Label{ "value" }(Not to be confused with "value" in @Link{ "'value' spelling rules" | "value-rule" })A bracketed attribute-value-pair forms a @Link{ "feature" |"feature" }. Attributes and values are both so-called WMSymbols. The syntax ofthese symbols is restricted to sequences of what isdefined as @Link{ "alphabetic characters" | "alphabetic-character" }.Upper and lower case characters are significant for the distinctionof attributes and values, resp. E.g.:@Verbatim (Gender Fem) ­ (Gender fem) ­ (gender fem)@End-Verbatim WMSymbols must not consist of character sequenceswhich could be mistaken for numbers. E.g. (person 1st) or (person _1),but not (person 1) for the first person.Attributes may be specified only once (while it is legal to have thesame values for different attributes).@Chapter{Browser}@Index{browser}@Label{ "browser" }@Section{General Entity Browser}@Index{general entity browser}@Label{ "general-entity-browser" }(To get acquainted with the general browser, you can go to thecorresponding lesson in the@Document-Link{ "tutorial" | "GoMan Texts:Tutorial;Tutorial" |"General-Entity-Browser" }) When a database has been compiled, the General Browser offers viewson all the entities Word Manager works with and on a great variety ofrelations between them.The following items will be presented:¥ How to open the General Browser¥ How to retrieve WM-entities¥ The menu "Aspects"¥ The menu "History"@SubSection{Open the General Browser}@Label{ "open-general-browser" }The browser is opened by clicking the button "browser" in the@Link{ "document window" | "document-window" }. @SubSection{How to Retrieve WM-Entities}@Label{ "retrieving-entities" }Entities can be selected on the basis of their type (menu"Entity Restrictions": Inflection Rules, Wordformation Rules, SpellingRules, Entries) and  the features they have (menu "FeatureRestriction": features, strings).To select an Item: @Itemchoose an entity in the pull-down menu "Entity Restriction"  @End-Item@Itemin the pull-down menu "Feature Restriction", choose one or more@Link{ "attributes" | "attribute" } and the corresponding @Link{"values" | "value" }. If you want to state or add a string restriction onentries, choose the "String" command in the same menu and type astring restriction in the appearing dialogue box (e.g. all entriesbeginning with "a" = "a.*") @End-Item @Itemclick "Retrieve"@End-Item @Itemall the elements matching the chosen restrictions will be listed inthe central textfield (if nothing is listed, there are no elementsmatching the restrictions) @End-Item Note that it is possible to choose a combination of featurerestrictions. E.g. (Cat N) and (Gender F). Therefore, to specifyrestrictions for a second search,  the previous restrictions have to bedeleted:@Itemclick into the textfield displaying the feature restrictions@End-Item @Itemselect the feature(s) to be deleted with the mouse@End-Item @Itempress CTRL+X@End-Item @Itemchoose new (entities and) features and click "Retrieve"@End-Item @SubSection{'Aspects': More Information on Selected Entities}@Label{ "aspects" }The pull-down menu "Aspects" offers different views on entitieslisted in the central textfield of the browser.To select an entity, click it in the central textfield. The selecteditem is displayed  white on black.The options available in the menu "aspects" depend on the type of theselected entity. Only the relevant options are listed. The optionsshould be easily understandable. Otherwise, consult the Helpprogram under the name of the option. Only one of them is mentionedhere:The option "Specification" opens the WM-window in which theselected Entity is specified. @SubSection{The Menu 'History'}The pull-down menu "History" lists all the retrieval steps you madesince the browser has been opened. To go one or more steps back,choose the step you want to go back to in the menu "History". Note that the "History" is initiated each time you open the browserand deleted each time you close it.   @Section{Lexeme Browser}@Index{lexeme browser}@Label{ "lexeme-browser" }(To get acquainted with the lexeme browser, you can go to thecorresponding lesson in the@Document-Link{ "tutorial" | "GoMan Texts:Tutorial;Tutorial" |"Lexeme Browser" }) The information retrievable in a lexeme browser is focused onindividual entries. The following items will be treated:¥ How to open a lexeme browser¥ Information retrievable in a lexeme browser¥ How to trace wordformation relations@SubSection{Open a Lexeme Browser}@ItemWith the mouse, select a wordform you listed in the Test Window (see @Link{"Document Window" | "document-window" }) or in the@Link{ " Message Window" |"message-window" }.  If no wordform of the lexeme you want to have a look at islisted, type it into one of the two windows and select it. A selected wordform isdispayed white on black. @End-Item  @ItemChoose "Retrieve lexicalized Entries" in the "WordManager" menu orpress CTRL+L.@End-Item@Item The lexeme browser of the corresponding lexeme will beopened. If the wordform you selected does not belong to a lexemestored in the database, the system warns you with the message "Nomatching lexicalized Entries". Check for typing errors. @End-Item @SubSection{Information in a Lexeme Browser} Underneath the title "Lexemes", the upper textfield in the LexemeBrowser Window shows the @Link{ "lexeme identifier" | "lexeme-identifier" } ofthe lexeme. Underneath, the name of the inflection rule the lexeme belongs to isdisplayed. When the wordform you selected to open the browser is homographic,the lexeme identifiers of all the lexemes the homograph belongs to areshown. In these cases, the information retrievable in the lexemebrowser belongs to the lexeme that is selected. You select alexeme identifier by clicking it in the textfield. The upper pull-down menu offers different views on the lexeme. Whenthe browser is opened, the option "Paradigms" is on. This is the default view given by the system. You can change this default to any otherof the views listed below. In the upper pull-down menu, choose the view you want to bethe initial view when a lexeme browser is opened. Then, choose the command 'SetLexeme Browser Default' in the 'WordManager' menu. The seleceted option will be thedefault view.  These are the views available in a lexeme browser:@ItemParadigms: shows the subparadigms of the @Link{ "inflectional paradigm" |"paradigm" } of the lexeme and the corresponding wordforms. A subparadigms isselected by clicking it in the field entitled "Paradigms". The individualwordforms, too, can be viewed, in the same manner as in the option"Wordforms" (see below). @End-Item @ItemWordforms: shows all the @Link{ "wordforms" | "wordform" } of the inflectionalparadigm of the lexeme. A first field displays the wordform(s) used as @Link{"citation form" | "citation-form" }. A second field lists all the wordforms ofthe lexeme. The pull-down menu next to the title of the field"Wordforms" offers two different views on the individual wordforms(select a wordform by clicking it): @ItemFormatives: shows the @Link{ "Inflection Formatives" | "IFormative" } the selectedwordform is composed of@End-Item@ItemISRule Application: shows the @Link{ "Inflection Spelling Rules" | "ISRule" } appliedon the wordform@End-Item @End-Item @Item Creation History: this option is only available for@Link{ "complex entries" | "complex-entry" }. It shows:@Item the Wordformation Rule that created the lexeme @End-Item@Itemthe @Link{ "source formatives" | "source-IFormative-specification" }; when youclick on an inflection formative listed among the source formatives, thecorresponding lexeme browser is opened@End-Item @Itemthe @Link{ "target formatives" | "target-IFormative-specification" }@End-Item@Itemthe @Link{ "wordformation spelling rules" | "WFSRule" } appliedduring the creation of the lexeme.@End-Item @End-Item @ItemGeneration History: This option is only available for entries that aresource entries for at least one complex entry. It shows a list ofentries that are derived from the lexeme. When the pull-down menu next to the title "Generation History" is on"New Browser", you can open the lexeme browser of a derived entry byclicking it in the field. When the pull-down menu next to the title "Generation History" is on"WFSRule Appl.", the browser shows @Itemthe Wordformation Rule that created the selected complex entry@End-Item@Itemthe @Link{ "target formatives" | "target-IFormative-specification" } of theselected complex entry created by the Wordformation Rule @End-Item@Itemthe @Link{ "Wordformation Spelling Rules" | "WFSRule" } applied on the selectedtarget formatives @End-Item@End-Item @Item	WF Cluster: Opens the '@Link{ "WF Cluster" | "WF-cluster" }' view of a particular	lexeme.@End-Item@ItemDeleted Forms: shows the wordforms that have been specified as@Link{ "deleted forms" | "deleted-forms" }@End-Item @ItemISRules: lists all the @Link{ "Inflection Spelling Rules" | "ISRule" } applied duringthe creation of the inflectional paradigm of the lexeme@End-Item@ItemWFSRules: lists all the @Link{ "Wordformation Spelling Rules" | "WFSRule" } appliedduring the creation of the lexeme. Only available for complex entries.@End-Item@ItemSpecification: Opens the Inflection Rule Window (if it is a simple entry) or theWordformation Rule window (if it is a complex entry) of the rule by which the lexemehas been created. With hard coded entries, you can view the specification of theentry itself.@End-Item @SubSection{How to Trace Wordformation Relations}The lexeme browser allows you to trace the creation history and the generation historyof complex entries. If there are no wordformation relations, the commands explainedbelow are not available. To have an overall view on the wordformation relations of a particular entry, choose@Link{ "WF Cluster" | "WF-cluster" } in the upper selection menu of its lexeme browser.To have a more particular view on the entries derived from the lexeme you are viewing:@Itemchoose Generation History in the upper pull-down menu of the lexeme browser@End-Item @Itema list of derived entries is displayed (at least one)@End-Item@Itemselect the derived entry you want to see by clicking it@End-Item @Itemthe lexeme browser of the derived entry will be opened@End-Item To have a more particular view on the entry (or entries), the selected lexeme is derivedfrom: @Itemchoose Cration History in the upper pull-down menu of the lexeme browser@End-Item @Itemin the field "source formatives", click on the Inflection Formative belonging to thesource lexeme you want to view@End-Item @Itemthe lexeme browser of the basis lexeme will be opened@End-Item By reapeating these steps on the same lexeme browser or on a series of consecutivelexeme browsers, you can move around in the derivational paradigms of complexentries. @Chapter{Character Sequence Sort Order}@Index{character sequence sort order}@Label{ "character-sequence-sort-order" }Subwindow of windows @Link{ "Surface Character Set" |"surface-character-set"} and @Link{ "Lexical Character Set" |"lexical-character-set"}. For some natural languages it is conventional that the alphabetical sort orderof particular characters is identical  to that of specific sequences of characters.Typical examples are the german umlaut characters "", "", "", "", "", "", and thedouble-s "§", whose alphabetical sort order is usually to be taken to be the same asthat of the sequences "Ae", "ae", "Oe", "oe", "Ue", "ue", and "ss", respectively. Thecharacter sequence sort order subwindow allows the specification of such exceptionalordering conventions.For German, a possible specification would be the following:@Example{Character Sequence Sort Order German}@Verbatim 	Ae  ae 	Oe  oe 	Ue  ue 	ss §@End-Verbatim@End-Example The elements to be specified may either be single characters orsequences of two characters.The elements on one line define one group of characters and character sequences.All the characters and character sequences on the same line are treated as if theywere identical to the first character sequence specified on the line. @Chapter{Character Sort Order}@Index{character sort order}@Label{ "character-sort-order" }In the windows @Link{ "Surface Character Set" | "surface-character-set" }and @Link{ "Lexical Character Set" | "lexical-character-set" }, the CharacterSort Order lists the characters in alphabetical order. In a newdatabase, a default list of the common lowercase characters is given. @Section{Primary and Secondary Sort Order}The ranking distinguishes a primary and a secondary sort order, where the primarysort order of a character is defined by the line in which it is specified, the secondarysort order by the position within the line. A possible specification for the German character set could be the following:@Example{Character Sort Order German}@Verbatim 	A  a 	B b	C c	D d	E e	etc.@End-Verbatim @End-Example The primary order takes precedence over the secondary, i.e. when two characters arecompared, the primary ranking is consulted first; the secondary order is onlyconsulted if the primary order of two compared characters is equal. E.g.:@Example{Primary and Secondary Sort Order}@Verbatim 	Br >  Bett				Bar	Bar >  Bett		=>		Br	Bar > Br				Bett@End-Verbatim @End-Example @SubSection{Declaration of Characters}@ItemCharacters can be added@Itemto the primary sort order by typing them on a new line@End-Item @Itemto the secondary sort order by typing them on the same line as alreadey declaredcharacters, separated from them by a white space@End-Item @End-Item @ItemTo delete characters (also characters of the initial default list),select them and press Backspace or CTRL+X. @End-Item @ItemPrimary and secondary sort order can be changed. Delete thecharacter and add (paste) it on the line and the position you want it torank.@End-Item @Chapter{Citation Forms}@Index{citation-form}@Label{ "citation-form" } The citation form is the @Link{ "wordform" | "wordform" } of a lexeme which isused to identify the dictionary entry defining the lexeme. Traditionally, thecitation form is the infinitive for verbs, the (nominative) singular fornouns, etc.The @Link{ "surface string" | "surface-string" } of the first citation formtogether with the @Link{ "entry features" | "entry-feature" } of the lexeme formthe @Link{ "lexeme identifier" | "lexeme-identifier" } of a lexeme. The citation-form(s) are specified in the @Link{ "IRule specification" |"IRule-specification" } under the headword "citation-forms":@Item@Verbatim citation-forms@End-Verbatim@End-Item  @ItemNewline@End-Item @Itemone or more @Link{ "wordform-specifications" | "wordform-specification" }; i.e.specification of the wordform(s) you want to be used as citationform(s)@End-Item @ItemNewline@End-Item @Chapter{Comments}@Index{comments}@Label{ "comments" } For documentation and exampling, comments can be inserted in all specification windows. Everywhere, where the WM-syntax demands a newline, a comment canbe inserted. It starts with a semicolon (;), either on a new line or onthe same line as the specification text, separated from it by a space.The semicolons can be manually typed in or automatically insertedwith the 'Insert ";"' command in the Edit menu. The command insertsthree semicolons on each new line of selected text. In principle, only @Link{ "alphabetic characters" |"alphabetic-character" }, spaces, tabs and full-stops are allowed incomments. (The reason for this restriction is, that comments are disregarded completely by thesystem so that the transformations applied to system characters inorder to guarantee portability, does not see comments). @Chapter{Compilation}@Index{compilation}@Label{ "compilation"}The compilation transforms the contents of the database as specifiedby the linguist into an internal format. Whenever the specification ismodified, the database must be compiled.The compilation commands are in the WordManager menu:@Item@Index{Compile All}Compile All: compiles the whole database@End-Item @Item@Index{Run Compiler}Run Compiler: Compiles only the parts of thedatabase (@Link{ "inflection units" | "inflection-unit" } and@Link{ "wordformation units" | "wordformation-unit" }, resp.) that have beenchanged since the last compilation. Especially in larger databases, this commandis very usefull to avoid long compilation times. @End-Item The handling is the same for both compilation commands:@ItemIn the 'WordManager' menu, choose 'Run Compiler' or 'Compile All', respectively.@End-Item @ItemIn the appearing dialogue box you have two options. They are onwhen marked with an "x" in the little choice box. They are off,when the choice box is empty. To put them on and off, clickthe choice boxes.@Item@Index{monitor Entries}monitor Entries: all hard coded entries affectedby the compilation are displayd in the @Link{ "message window" |"message-window" } @End-Item@Item@Index{extensive testing}extensive testing: during compilation, thesystem checks if all entities specified in the database (rules,formatives, features) are used at least once. It helps to avoidsuperfluous material in the database. The extensive testing takes extratime. Therefore, it is not recommended to have this option constantlyon in larger databases.@End-Item@End-Item @ItemClick 'OK' to initiate the compilation or 'Cancel' to cancel it.@End-ItemThe system will compile (part of) the database. When it is successfullyconcluded, the following message is given in the message window: @Verbatim compilation took ... seconds @End-Verbatim If there are syntax errors, errors in the organization of theinflection or the wordformation tree, etc. the compilation isinterrupted and an error message is given in the @Link{ "message window" |"message-window" }. When this is the case, correct the error and restart thecompilation with the 'Run Compiler' command. We suggest that you always do a @Link{ "syntax check" | "syntax-check" } beforeinitiating a compilation. The syntax check detects syntax errors faster than thecompilation command.@Chapter{Creation History}@Index{creation history}see "Information in a Lexeme Browser" under @Link{ "Lexeme Browser" |"lexeme-browser" }. @Chapter{Deleted Forms}@Index{deleted forms}@Label{ "deleted-forms" }Deleted forms are the wordforms that are deleted from theinflectional paradigm of a lexeme with an incomplete paradigm. Examples ofwords with a defective inflectional paradigm are: @Example{Defectives}English: "scissors" = noun with no singular formGerman: "Furcht" ('fear') = noun with no plural formsItalian: "bisognare" ('to be neccessary') = verb used in 3rd persons singular andplural, only @End-Example To avoid the specification of separate IRules, you can insertthese words into the corresponding regular IRules and specify the lacking forms asdeleted forms.@Section{Specification of Deleted Forms}The specification of deleted forms is an optional part of an @Link{ "entryspecification" | "entry-specification" } (cf. there, step 8). After the specification of the strings (and features) of the new entry, type:@ItemNewline@End-Item @Itemtab@End-Item @Itemkeyword: @Verbatim deleted-forms@End-Verbatim @End-Item @Itemtab@End-Item @Item@Link{ "wordform features" | "wordform-feature" } of the wordforms that must bedeleted.Cf. examples below @End-Item @ItemNewline@End-Item To add more specifications, type:@Itemtab (one or more)@End-Item @Itemwordform features of the wordforms that must be deleted@End-Item @ItemNewline@End-Item @Section{Examples}@Example{Deleted Forms ÒFurchtÓ}The German noun "Furcht" ('fear') has no plural forms:@Verbatim	entry	(Gender Fem)		"furcht" "furcht" "frcht"		deleted-forms	(Num PL)@End-Verbatim @End-Example @Example{Deleted Forms ÒbisognareÓ}Of the Italian verb "bisognare" ('to be necessary'), the non-finite forms and the 3rdpersons singular and plural are used, only:@Verbatim 	entry		"bisogn" "bisogn"		deleted-forms	(Person 1st)				(Person 2nd)@End-Verbatim @End-Example All wordforms having in their wordform features the feature(s) specified under"deleted-forms" are deleted from the inflectional paradigm.Therefore,  it is usually sufficient to specify, e.g.:@Itemonly the feature (Num PL) for thedeletion of all four plural forms of a German noun paradigm. @End-Item @Itemonly the features (Person 1st) and (Person 2nd) to delete the 1st and the 2ndpersons singular AND plural in ALL modes and tenses of an Italian verbalparadigm. @End-Item@Chapter{Daughter Rules}@Index{daughter rule}@Index{WFRule specialization}@Label{ "daughter-rule" }A daughter rule is a WFRule specialization connected with a @Link{ "fully specifiedWFormative" | "fully-specified-WFFormative" }. Daughter rules allow you to formulate general WFRules and to specialize themaccording to the idiosyncrasies of particular WFFormatives. @ItemParticular WFFormatives can attach to entries of certain inflectional classes,only => specialization of the source specification.@End-Item@ItemParticular WFFormatives can cause certain morphographic modificationsoccurring only with them => specification of specific Wordformation Spelling Rules @End-Item@ItemParticular WFFormatives can determine the inflectional class and/or certainentry features (e.g. gender) of the derivative=> specialization of the target specification. @End-ItemThe following items will be treated below:@ItemSpecification of a Daughter Rule@End-Item@ItemConstraints@End-Item@ItemExamples@End-Item @Section{Specification of a Daughter Rule}Like ÒsimpleÓ WFFormatives, WFFormatives with a WFRule specializationare specified in a leave node of the @Link{ "wordformation tree" |"wordformation-tree" }, in the same @Link{ "wordformation unit" |"wordformation-unit" } as the general ÒparentÓ rule.Note that ÒsimpleÓ WFFormatives and WFFormatives with a WFRule specializationmay not be specified in the same window.Full specification of a WFRule specialization (steps in square brackets areoptional; cf. below: Constraints): 1) keyword:@Verbatim fully specified WFFormatives@End-Verbatim2) Newline3) lexical string of the WFFormative4) white space5) surface string(s) of the WFFormative6) [tab 7) WFCat feature(s)]8) Newline9) WFRule name of the parent WFRule. The ÒparentÓ rule must be unambiguouslyspecified. 10) Newline¥ Source Specialization11) [keyword: @Verbatim source@End-Verbatim 12) Newline13) @Link{ "source IRule specification" | "source-IRule-specification" }; optionallywith @Link{ "entry feature constraint" | "entry-feature-constraint" } or @Link{"feature propagation" | "feature-propagation" }] ¥ WFRule-WFSRule Specification14)  [Newline15) @Link{ "WFRule-specific WFSRule" | "WFRule-specific-WFSRule" }].¥ Target Specialization16) [Newline17) keyword: @Verbatim target@End-Verbatim 18) Newline19) @Link{ "target IRule specification" | "target-IRule-specification" }; optionallywith @Link{ "individually added features" | "individually-added-feature" }]. ¥ Entry Specification20) Newline21) keyword: @Verbatim entries@End-Verbatim 22) one or more @Link{ "source constraints" | "source-constraint" }.To specify another daughter rule in the same window, repeat the relevant steps ofsteps 2 to 22.@Section{Some Constraints}@ItemA WFRule specialization (= daughter rule) has three optional parts:@Itemsource specialization (steps: 11-13)@End-Item @ItemWFRule-WFSRule specialization (step 15)@End-Item @Itemtarget specialization (steps 17-19)@End-Item At least one of these three optional parts must be contained in a WFRulespecification. @End-Item  @ItemFully specified WFFormatives with WFRule specializations and thecorresponding ÒparentÓ WFRules must be specified in the same @Link{"wordformation unit" | "wordformation-unit" }. @End-Item@ItemWFRules that match fully specified WFFormatives with a WFRule specialization maynot have @Link{ "source constraints" | "source-constraint" }. Source constraintsmust be specified with the daughter rules. @End-Item @ItemIf there is a target specialization in a daughter rule, it may specialize onlythe specification of @Link{ "individually added features" |"individually-added-feature" } and the @Link{ "target IRule" |"target-IRule-specification" }. The target IRule may only be specialized whenthe parent WFRule has a @Link{ "wildcard IRule" | "wildcard-IRule" } as targetIRule and no @Link{ "IRule propagation" | "IRule-propagation" }.Individually target added features may only be specified when they are disjointwith the union of the propagated features and the individually target added featuresspecified in the parent WFRule.@End-Item @Section{Examples}@Example{Daughter Rule: Italian Noun-To-Noun Suffixing}The general mechanism attaches a derivationalnoun suffix to a noun stem. The inflectional class and the gender of thederivatives, however, are determined by the suffix:@Verbatim 	Suffix:				"-ari(o)"	Inflectional Class Derivative:	+o/+i-class	Gender Derivative:		masculine	Basis, e.g.:			"biblioteca"	Derivative Sing/Plur:		"bibliotecari-o/bibliotecar-i"	Suffix:				"-eri(a)"	Inflectional Class Derivative:	+a/+e-class	Gender Derivative:		feminine	Basis, e.g.:			"pizza"	Derivative Sing/Plur:		"pizzeri-a/pizzeri-e"@End-VerbatimIf a WFRule (RWFRule N-To-N.Suffixing) combines a noun stem with aN-To-N-suffix, and the the target IRule is specified as a @Link{ "wildcard-IRule" |"wildcard-IRule" }, the suffixes must be specified with a WFRule specialization ofthe following kind: @Figure{ "Target Specialization" | "134" | 421 | 436 }@End-Example @Example{Daughter Rule: German Suffixing with Ò-inÓ}German derivation of feminine nouns from masculine nouns by suffixing with thesuffix "in". Source entries must be masculine nouns, i.e. noun entries with theentry feature (Gender Masc). The derivatives are all feminine, i.e. the feature (GenderFem) can be attributet automatically as a target added feature. E.g. @Verbatim 	linguist (Gender Masc)	>	linguistin (Gender Fem)	doktor (Gender Masc	>	doktorin (Gender Fem)	tiger (Gender Masc)	>	tigerin (Gender Fem)@End-Verbatim IF a WFRule (RWFRule N-To-N.Suffixing) combines a noun stem with aN-To-N-suffix, and the the target IRule is specified as a wildcard-IRule, thesuffix "in" must be specified with a WFRule specialization of the following kind: @Figure{ "Source and Target Specialization" | "133" | 518 | 269 }@End-Example @Example{Daughter Rule: English adjective prefixing with the prefix ÒinÓ}The prefix "in" has somemorphophonological variants:@Verbatim 	"il" before "l"			in + legal = illegal	"im" before "b", "m", "p"	in + possible = impossible	"ir" before "r"			in + regular = irregular@End-Verbatim These morphophonological modifications can be formalized in a daughter ruleconnected with the prefix "in" (other solutions are possible). Given a WFRule(Adj-To-Adj.Prefixing) that combines a prefix with an adjective stem into a newadjective stem of the same inflection class, the prefix "in" could be specified asfollows: @Figure{ "WFRule-WFSRule specialization" | "135" | 457 | 338 }@End-Example @Chapter{Document Window}@Index{document window}@Label{ "document-window" }Whenever you load a WM-Database, the corresponding document window isdisplayed.  @Figure{ "Document Window ÒGerman-StBÓ" | "131" | 327 | 248 }The document window is a dialogue window containing several buttons that giveyou access to the different parts of the linguistÕs interface. Click the buttons toopen them. The 'title bar' indicates the name of the database you are working in orjust looking at. The document window is subdivided in three parts. First row:@Item'browser': opens the @Link{ "General Entity Browser" |"general-entity-browser" } @End-Item @Item'messages': opens the @Link{ "message window" | "message-window"}@End-Item The eight buttons under the title "Word Manager" open the different subparts ofthe WM-formalism:@Item'lex char': opens the @Link{ "Lexical Character Set" | "lexical-character-set"} @End-Item  @Item'surf char': opens the @Link{ "Surface Character Set" |"surface-character-set" } @End-Item  @Item'feat dom': opens the window @Link{ "Feature Domains" |"feature-domains"}@End-Item@Item'feat dep': opens the window @Link{ "Feature Dependencies" |"feature-dependency" } @End-Item@Item'inflection': opens the window Inflection in which you organize and specifiythe @Link{ "Inflection Rules" | "IRule" } and @Link{ "Inflection Formatives" |"IFormative" }. See @Link{ "Inflection Tree" | "inflection-tree" }.@End-Item  @Item'wordform': opens the window Wordformation, in which you organize andspecifiy the @Link{ "Wordformation Rules" | "WFRule" } and @Link{"Wordformation Formatives" | "WFFormative" }. See @Link{ "WordformationTree" | "wordformation-tree" }.@End-Item @Item'spelling': opens the Spelling Rule window in which the @Link{ "GeneralSpelling Rules" | "general-SRule" } are specified.@End-Item @Item'WM test': opens the Word Manager Test window. This is a text window notused by Word Manager. It is meant to be used for test purposes (e.g. to opena particular @Link{ "lexeme browser" | "lexeme-browser" }) and as a kind ofnotepad for the linguist to list the @Link{ "hard-coded example entries" |"hard-coded-entry" } specified in the database.@End-Item Under the title Phrase Manager there are another 6 buttons. Phrase Manager is anextension of the system that will not be treated in this document.@Chapter{Entry}@Index{entry}@Label{ "entry" }An entry is the instantiation of an @Link{ "Inflection Rule" | "IRule" },generated by the firing of an Inflection Rule. In most cases, the notion ofentry is equivalent to the notion of @Link{ "lexeme" | "lexeme" }. For the specification of an entry, cf. @Link{ "entry specification" |"entry-specification" }. @Section{Simple Entry}@Index{simple entry}@Label{ "simple-entry" }A simple entry is an entry created by the direct firing of an @Link{ "InflectionRule" | "IRule" }. Usually, it will be a morphological simplex. Cf. @Link{ "ComplexEntry" | "complex-entry" }. @Section{Complex Entry}@Index{complex entry}@Label{ "complex-entry" }A complex entry is an entry created by the indirect firing of anInflection Rule, where "indirect" means that it is fired by theapplication of a @Link{ "Wordformation Rule" | "WFRule" }. Compounds andderivatives are typical complex entries. Cf. @Link{ "Simple Entry" |"simple-entry" }. @Section{Hard Coded Entry}@Index{hard coded entry}@Label{ "hard-coded-entry" }Hard coded entries are entries that are specified by the linguist inthe rule specification (see @Link{ "entry specification" |"entry-specification" }, cf. @Link{ "Lexicographer Entries" | "lexicographer-entry"}). The functions of hard coded entries are: @Itemexample entries: During compilation, every rule specified in theWM-database is executed so that many of the possible syntacticand semantic errors that might have been made in the rulespecification can be spotted before the database is madeavailable to the lexicographer. As a consequence, the linguistmust include hard coded entries so that each rule can be fired.@End-Item@Itemirregular entries: Irregular Inflection Rules (@Link{ "IIRules" | "IIRule" })and Irregular Wordformation Rules (@Link{ "IWFRules" | "IWFRule" }) are notaccessable from the lexicographerÕs interface. Therefore, entries belongingto an irregular inflection class and those formed by an irregularwordformation process must be inserted into the database ashard coded entries.@End-Item  @Section{Lexicographer Entry}@Index{lexicographer entry}@Label{ "lexicographer-entry" }A lexicographer entry is an entry made through the application of theLexicographer Entry commands in the WordManager menu. In contrast to@Link{ "hard coded entries" | "hard-coded-entry" }, they are no part of therule specification. When a database is compiled, the Lexicographer Entries are deleted. Therefore, they must besaved with the 'Export Lexicographer Entries' command @Index{ExportLexicographer Entries} in the server and, after compilation, re-importet with the'Import Lexicographer Entries' command @Index{Import Lexicographer Entries}inthe server. @Section{Fictional Entry}@Index{fictional entry}@Label{ "fictional-entry" }Fictional entries have the same status as normal @Link{ "entries" | "entry" } exceptthat they are marked. Interfaces can be equipped with functionsdifferentiating fictional entries from normal ones, e.g. suppressingthem.Fictional entries are used, e.g.@Itemfor 'families' of words that are related by derivational rules, butfor which the common base form is missing. E.g. the Germanprefixed verbs "ausstatten", "bestatten", "erstatten","gestatten", where the base verb "statten" does not exist inmodern language use. @End-Item @Itemwhen intermediate derivational states are missing. E.g. theItalian adjective "immancabile" (= prefix "in" + verb stem "manc"+ suffix "abile"), where neither "immancare" nor "mancabile" areItalian words and where we cannot speak of a regularparasinthetic affixation. @End-Item In this cases, possible but nonexisting words like "statten" and"mancabile" that are needed in derivational paradigms can bespecified as fictional entries.@Link{ "Hard coded entries" | "hard-coded-entry" } can be specified asfictional entries by using the keyword "fictional-entry" instead of theregular "entry" in the @Link{ "entry specification" |"entry-specification" }. @Link{ "Lexicographer entries" | "lexicographer-entry" }can be markedas fictional entries by clicking the box "Fictional" in the lower leftcorner of the Add-Lexicographer-Entries dialogue boxes. @Section{Entry Specification}@Index{entry specification}@Label{ "entry-specification" }In an entry specification, the strings of the @Link{ "underspecifiedIFormatives" | "underspecified-IFormative" } occurring in the relevant @Link{"Inflection Rule" | "IRule" } are specified. If necessary, @Link{ "individually addedfeatures" | "individually-added-feature" } and @Link{ "entry-specific ISRules" |"entry-specific-ISRule" } can be formulated, too. The specifiaction of @Link{ "lexicographer entries" | "lexicographer-entry" } isdone through a lexicographer interface or the lexicographer entries commands inthe Edit menu.  The specification of @Link{ "hard coded entries" | "hard-coded-entry" } is done in the in the corresponding @Link{ "Inflection Rule" | "IRule-specification" } window or the corresponding @Link{ "Wordformation Rule" | "WFRule-specification" } window, respectively. To make an entry specification for a hard coded entry,  type (optional steps are insquare brackets "[] "): @Item1) @Verbatim entry   @End-Verbatim   or@Verbatim    fictional-entry@End-Verbatimcf. @Link{ "fictional entry" | "fictional-entry" }@End-Item @Item2) [tab @Link{ "individually-added-feature(s)" |"individually-added-feature" }] @End-Item @Item3) newline@End-Item @Item4) tab @Link{ "lexical string" | "lexical-string" }Note that in wordformation rules the lexical string must be specified inthe form as it will be inserted into the target IRule, i.e. as it is after theapplication of ALL @Link{ "WFSRules" | "WFSRule" }.@End-Item @Item5) white-space @Link{ "surface string" | "surface-string" }@Itemat least one surface string in Inflection Rules@End-Item  @ItemNO surface strings in Wordformation Rules@End-Item @Item all possible surface strings of a formative must be specified with the@Link{ "simple entry" | "simple-entry" } in the Inflection Rule, i.e. including thesurface forms the formative can have in @Link{ "complex entries" |"complex-entry" } (e.g. for German "Frau > Fru-lein " the surface string "fru "must be specified with the simple entry "frau "). @End-Item @Itemadditional surface strings are added after awhite-space.@End-Item @End-Item@Item6) [tab qualifying-feature-set]in order to specify unambigously which formative the stringsbelong to; only necessary when an IRule contains more than oneunderspecified IFormative; you add the specification of a further underspecified formative byrepeating steps 3) to 6)@End-Item @Item7) [newline@End-Item @Item8) tab @Link{ "deleted forms" | "deleted-forms" }]@End-Item @Item9) [newline@End-Item @Item10) tab @Link{ "entry-specific ISRules" | "entry-specific-ISRule" }] @End-Item@Item11) newline@End-Item@Chapter{Entry Feature Constraint}@Index{entry feature constraint}@Label{ "entry-feature-constraint" }An entry feature constraint is an optional part of the @Link{ "sourcespecification" | "source" } in a wordformation rule. The entry feature constraint is applied on the @Link{ "entry features"| "entry-feature" } of individual source-entry. Itallows the specification of two things:@Item	a @Link{ "feature propagation" | "feature-propagation" }@End-Item @Itema constraint on the entry features and thus a constraint on theentries that will match with the source.E.g.: the German suffix "-in" is used to form feminine nouns frommasculine nouns (e.g. "linguist" masc. > "linguistin" fem.). It can only beattached to masculine nouns. This restriction can be formulated with anentry feature constraint on the gender feature (see example below). @End-Item @Section{Specification of an entry feature constraint}An entry feature constraint is specified on the same line as thespecification of the source IRule:@Item@Link{ "source IRule" | "source-IRule-specification" }@End-Item @Itemtab@End-Item @Itemkeyword: @Verbatim entry-features@End-Verbatim@End-Item  @Itemwhite space@End-Item @Item@Link{ "entry feature(s)" | "entry-feature" }@End-Item @Example{Source Constraint: German Suffixing with ÒinÓ}Source constraint of the WFRule for the Suffixing of Germanregular masculine nouns with the suffix "-in": @Verbatim 	source	(RIRule N-Regular)	entry-features (Gender Masc) 		1	(ICat N-Stem)	2	"in"	(WFCat N-Suffix)@End-Verbatim 	Only regular noun entries with the entry feature (Gender Masc) can besource entry for the suffixing with "in". @End-Example @Chapter{Features}@Index{feature}@Index{feature-set}@Label{ "feature" }Features are used for the rule and formative specification. They aredeclared in the window @Link{ "Feature Domains" | "feature-domains" }.A feature is an attribute value pair. The first element iscalled @Link{ "attribute" | "attribute" }, the second element is called@Link{ "value" | "value" }. Between attribute and value stands awhite  space; the attribute value pair is in round brackets:Feature = @Verbatim (attribute value)@End-Verbatim @Section{feature set}In a feature set, the individual features are not separated from eachother. E.g.:@Verbatim (Cat N)(Gender Fem)(Num SG)@End-Verbatim When two or more features of a feature set share the sameattribute, they can (but do not obligatorily need to) be written inone pair of brackets:Open brackets, common attribute, white space, first value, fullstop, second value, [full stop, third value, etc.], close brackets. E.g.:@Example{Feature Sets}@Verbatim (RIRule N-Regular)(RIRule o/i) = (RIRule N-Regular.o/i)(ICat A-Stem)(ICat Irreg)(ICat Invar) = (ICat A-Stem.Irreg.Invar)(ICat N-Suffix)(ICat o)(Num PL) = (ICat N-Suffix.o)(Num PL)@End-Verbatim @End-Example @Section{Entry Feature}@Index{entry feature}@Label{ "entry-feature" }Entry features are features associated with @Link{ "lexemes" | "lexeme" }. Togetherwith the @Link{ "surface string" | "surface-string" } of the first @Link{ "citationform" | "citation-form" }, they form the @Link{ "lexeme identifier" |"lexeme-identifier" }. The entry feature set consists of to types of features:@Item the @Link{ "individually added features" |"individually-added-feature" }. @End-Item @Itemthe intersection of the @Link{ "wordform features" |"wordform-feature" } of the wordforms of a lexeme, i.e. the entryfeatures consist of those wordform features which occur in allwordforms of a lexeme. The assumption is, that features that are valid for all wordforms of alexeme are valid for the whole lexeme, too (e.g. (Cat N) is valid for allwordforms of a noun entry as well as for the whole noun entry).@End-Item@Section{ICat Feature}@Index{ICat feature}@Label{ "ICat-feature" }An ICat feature is a @Link{ "feature" | "feature" } with the  special, reserved @Link{"attribute" | "attribute" } "ICat". ICat stands for Inflectional Category.When @Link{ "IFormatives" | "IFormative" } are combined into @Link{ "wordforms" |"wordform" }, their lexical strings and their features are combined. In theresulting feature set, all ICat features are NOT percolatet, i.e not used for theconstruction of the @Link{ "wordform features" | "wordform-feature" }. Consequently, ICat features are typically features that are primarilyused for the organization of the @Link{ "inflection tree" | "inflection-tree" } andfor the rule internal distinction of formatives. From the linguistic point of view,they are not features that express a grammatical role of a wordform.@Example{ICat Features}The combination of the two formatives@Verbatim 	"Schlauch" (Cat N)(ICat N-Stem)	"es"	(ICat N)(ICat N-Suffix)(Num SG)(Case Gen)@End-Verbatim results in the wordform@Verbatim "Schlauches"	(Cat N)(Num SG)(Case Gen)@End-Verbatim The ICat Features (ICat N-Stem) and (ICat N-Suffix) are not percolated tobe part of the wordform features.  @End-ExampleApart from their special interpretation as far as percolation is concerned, ICat featuresare treated like ordinary features. @Section{IIRule Feature}@Index{IIRule feature}@Label{ "IIRule-feature" }An IIRule feature is a feature with the special, reserved @Link{ "attribute" |"attribute"} "IIRule". IIRule stands for Irregular Inflection Rule. IIRule features specify @Link{ "Irregular Inflection Rules" | "IIRule" },i.e. inflection rules that are not accessable for the lexicographer. Cf.@Link{ "RIRule feature" | "RIRule-feature" } and @Link{ "inflection tree" |"inflection-tree" }. @Section{Individually Added Feature}@Index{individually added feature}@Index{added features}@Label{ "individually-added-feature" }Individually added features are @Link{ "entry features" |"entry-feature" } that are individually associated with lexemes. Theytypically specify grammatical functions that cannot be derived fromthe intersection of the @Link{ "wordform features" |"wordform-feature" } of a lexeme. An example is the gender attribution with German nouns.The gender is an inherent property of the noun. This information is notrelevant for inflection, but can play an important role inwordformation (p.e. the forming of feminine nouns with the suffix"-in" is possible only with masculine nouns; e.g. linguist ->linguistin). Therefore, it is desirable to have a gender feature associated witheach noun. Since gender is not (or only partially) related toinflectional categories, it must be associated with a lexeme asindividually added feature. @SubSection{Specification of individually added features}¥ The specifiaction of individually added features is done within the@Link{ "entry specification" | "entry-specification" }. Thefeatures are added on the same line as the keyword "entry",separated from it by a tab. @Example{Individually Added Feature (Gender Fem)}The German noun entry "Frau" with the individually added feature(Gender Fem): @Verbatim 	entry	(Gender Fem)	"Frau" "Frau" "Fru"@End-Verbatim @End-Example ¥ In wordformation rules, individually target added features can be specifiedto be added automatically to each entry formed by the rule. E.g. in thewordformation rules for German nouns formed with the suffixes "-in","-ung", "-heit", the gender feature can be added automatically, sincethese derived nouns are always feminine.  Such an automatic attribution of individual added features is specifiedin the @Link{ "target specification" | "target" } of the WFRule, on the same line asthe keyword "target", tab, "added-features", white space, individuallyadded feature(s). E.g.: @Example{Individually Target Added Feature}@Verbatim target	added-features (Gender Fem) @End-Verbatim @End-Example @Section{IWFRule Feature}@Index{IWFRule feature}@Label{ "IWFRule-feature" }An IWFRule feature is a feature with the special, reserved @Link{ "attribute" |"attribute"} "IWFRule". IWFRule stands for Irregular WordformationRule. IWFRule features specify @Link{ "Irregular Wordformation Rules" |"IWFRule" }, i.e. wordformation rules that are not accessable for thelexicographer. Cf. @Link{ "RWFRule feature" | "RWFRule-feature" } and@Link{ "wordformation unit" | "wordformation-unit" }. @Section{RIRule Feature}@Index{RIRule feature}@Label{ "RIRule-feature" }An RIRule feature is a feature with the special, reserved @Link{ "attribute" |"attribute" } "RIRule". RIRule stands for Regular Inflection Rule. RIRule features specify @Link{ "Regular Inflection Rules" | "RIRule" }, i.e.inflection rules defining open morphological classes. Consequently, theyare accessable for the lexicographer.Cf. @Link{ "IIRule feature" | "IIRule-feature" } and @Link{ "inflection tree" |"inflection-tree" }. @Section{RWFRule Feature}@Index{RWFRule feature}@Label{ "RWFRule-feature" }An RWFRule feature is a feature with the  special, reserved @Link{ "attribute" |"attribute" } "RWFRule". RWFRule stands for Regular WordformationRule. RWFRule features specify @Link{ "Regular Wordformation Rules" | "RWFRule" }, i.e.wordformation rules defining open, productive wordformationprocesses. Consequently, RWFRules are accessable for the lexicographer.Cf. @Link{ "IWFRule feature" | "IWFRule-feature" } and @Link{ "Wordformation Unit" |"wordformation-unit" }. @Section{WFCat Feature}@Index{WFCat feature}@Label{ "WFCat-feature" }A WCat feature is a feature with the special, reserved @Link{ "attribute" | "attribute"} "WFCat". WFCat stands for Wordformation Category. WFCat Features are used for the organization and the specification of the@Link{ "wordformation tree" | "wordformation-tree" } and the @Link{"wordformation formatives" | "WFFormative" }. @Section{Wordform Feature}@Index{wordform feature}@Label{ "wordform-feature" }Wordform features are @Link{ "features" | "feature" } that are associated with a@Link{ "wordform" | "wordform" }. When @Link{ "IFormatives" | "IFormative" } arecombined into wordforms, their strings and their qualifying features arecombined. A wordform is thus a combination of the strings and the feature sets ofits formatives. Basically, wordform features are the @Link{ "feature set" |"feature-set" } resulting from this combination. Since they shouldcontain only features indicating grammatical roles (gender, number,mode, person, etc.), the @Link{ "ICat features" | "ICat-feature" } are notused for the construction of the wordform features.@Example{Wordform Features}The combination of the two formatives@Verbatim 	"Schlauch" (Cat N)(ICat N-Stem)	"es"	(ICat N)(ICat N-Suffix)(Num SG)(Case Gen)@End-Verbatim results in the wordform@Verbatim "Schlauches"	(Cat N)(Num SG)(Case Gen)@End-Verbatim The ICat Features (ICat N-Stem) and (ICat N-Suffix) are not percolated tobe part of the wordform features. @End-Example @Chapter{Feature Dependency}@Index{feature dependency}@Label{ "feature-dependency" }Feature dependencies are constraints that must be satisfied within @Link{ "entryfeature" | "entry-feature" } sets. They are expressed in the window Feature Dependencies. The window is opened byclicking the 'feat dep' button in the @Link{ "document window" |"document-window" }. Their syntax is simple. @Example{Feature Dependency}@Verbatim (Cat N)		demands		Gender@End-Verbatim@End-Example  The first feature specifies the condition under which the constraint must beapplied, the @Link{ "attribute" | "attribute" } (here: 'Gender')  specifies theconstraint which must be satisfied. Inbetween, you type: tab, the keyword"demands", tab. The above example demands that all entry feature sets containing the feature (CatN) comprise a feature with the attribute 'Gender'. It does not matter, whether the expected feature is attributed by a rule or as an@Link{ "individually added feature" | "individually-added-feature" },as long as the condition formulated in the feature dependecy issatisfied.  @Chapter{Feature Domains}@Index{feature domains}@Label{ "feature-domains" }The feature domains window contains the declaration of all @Link{"features" | "feature" } used in the database. It is a lists all @Link{"attributes" | "attribute" } with their possible @Link{ "values" | "value"}.                The feature domains window is opened by clicking the 'featdom' button in the @Link{ "document window" | "document-window" }. The declaration of features in the feature domains can be donemanually. An easier way , however, is using the 'Check Syntax'command in the Edit Menu. See @Link{ "Syntax Check. " | "syntax-check" }@Chapter{Feature Propagation}@Index{feature propagation}@Label{ "feature-propagation" }A feature propagation is a kind of @Link{ "entry feature constraint"| "entry-feature-constraint" }. A feature propagation will copy the@Link{ "entry features" | "entry-feature" } from the source entry to the targetentry. This propagation is particularly useful for the 'transfer'of @Link{ "individually added features" | "individually-added-feature" }. E.g. Most prefixed Italian nouns have the same gender as the base noun("direttore" masc. > "vicedirettore" (masc.);  "direttrice" fem.> "vicediretrice" fem.). This inheritance can be expressed by a featurepropagation (see example below).@Section{Specification of an entry feature propagation}A feature propagation is specified on the same line as thespecification of the source IRule:@Item@Link{ "source IRule" | "source-IRule-specification" }@End-Item @Itemtab@End-Item @Itemkeyword: @Verbatim entry-features@End-Verbatim@End-Item  @Itemwhite space@End-Item @Item@Verbatim (attribute >)@End-Verbatim The the @Link{ "attribute" | "attribute" } indicates the feature class that hasto be propagated, the @Link{ "value" | "value" } is replaced by ">". @End-Item @Example{Feature Propagation: Prefixing of Regular Italian Nouns}@Verbatim 	source	1	(WFCat Prefix)	(RIRule N-Regular)	entry-features (Gender >)		2	(ICat N-Stem)@End-Verbatim @End-Example  The gender feature of the source entry will be propagated as gender featureof the target entry.@Chapter{Formative}@Index{formative}@Label{ "formative" }A formative is a distributional segment of a @Link{ "wordform" | "wordform" }.Inflection rules combine formatives into wordforms and paradigms.Wordformation rules combine formatives into new, complexformatives. A formative consists of the following parts:@Item	a @Link{ "lexical string" | "lexical-string" }@End-Item@Item	all relevant @Link{ "surface strings" | "surface-string" }	@End-Item@Item	at least one qualifying @Link{ "feature" | "feature" }@End-ItemThere are several kinds of formatives:@Item	@Link{ "fully specified IFormatives" |	"fully-specified-IFormative" } @End-Item@Item	@Link{ "underspecified IFormatives" |	"underspecified-IFormative" } @End-Item@Item	@Link{ "fully specified WFFormatives" |	"fully-specified-WFFormative" } @End-Item@Item	@Link{ "underspecified WFFormatives" |	"underspecified-WFFormative" } @End-Item @Section{Complex Formative}@Index{complex formative}@Label{ "complex-formative" }A complex formative is defined as a @Link{ "formative" | "formative" } which hasbeen instantiated by the indirect firing of an IRule, i.e. its string specification isthe result of the firing of a wordformation rule. In consequence, all complexformatives are instantiated @Link{ "underspecified IFormatives" |"underspecified-IFormative" } or instantiated @Link{ "underspecifiedWFFormatives" | "underspecified-WFFormative" }. Cf. @Link{ "simple formative" | "simple-formative" }@Section{Fully Specified IFormative}@Index{fully specified IFormative}@Label{ "fully-specified-IFormative" }Fully specified IFormatives are @Link{ "Inflection Formatives" | "IFormative" } thatare entirely specified in the rule specification, i.e. both the strings and thequalifying features are defined in the @Link{ "inflection tree" | "inflection-tree" }. Typical fully specified IFormatives are inflectional affixes, becausethey constitute a closed class of elements. Open class elements likestems are typically defined as @Link{ "underspecified IFormatives" |"underspecified-IFormative" }. @SubSection{Specification of fully specified IFormatives}Fully specified IFormatives are specified in the Inflection Window, in aformative leaf node of the @Link{ "inflection tree" | "inflection-tree" } (see @Link{"inflection unit" | "inflection-unit" }). In the formative window, the following must be specified (steps in squarebrackest are optional): @Item1) keyword: @Verbatim fully specified IFormatives@End-Verbatim@End-Item @Item2) Newline@End-Item @Item3) @Link{ "lexical string" | "lexical-string" } of the formative@End-Item @Item4) white space@End-Item @Item5) @Link{ "surface string" | "surface-string" } of the formative (if more than one,separated from the first one by a white space; note that all possible surfacestring variants of a fully specified IFormative must be specified here, includingthe surface variants the formative may have in further derivations). @End-Item @Item[6) tab@End-Item @Item7) local @Link{ "feature(s)" | "feature" }]Note that only local features must be specified here. Bylocal features we mean features that are distinctive at this level of the inflection tree.  The entire feature set of a formative consists of the union of all features specified on the way from the root to the node, except the features with the @Link{ "attribute" | "attribute" } "RIRule" or "IIRule". When there is no need to specify distinctive local features, the steps6) and 7) can be left out.@End-Item@Item8) Newline@End-Item To add more formatives in the same window, repeat steps 3) to 8). IFormatives can also be specified in a @Link{ "IFormative group" |"IFormative-group" }. @Section{Fully Specified WFFormative}@Index{fully specified WFFormative}@Label{ "fully-specified-WFFormative" }Fully specified WFFormatives are @Link{ "Wordformation Formatives" |"WFFormative" } that are entirely specified in the rule specification, i.e. both thestrings and the qualifying features are defined in the @Link{ "wordformation tree"| "wordformation-tree" }. Typical fully specified WFFormatives are derivational affixes, becausethey constitute a closed class of elements. Open classwordformation elements are specified as @Link{ "underspecifiedWFFormatives" | "underspecified-WFFormative" }. Below, the specification of ÒsimpleÓ WFFormatives is presented. For WFFormativeswith a WFRule specialization, see @Link{ "daughter rules" | "daughter-rule" }.@SubSection{Specification of fully specified WFFormatives}Fully specified WFFormatives are specified in the Wordformation Window, ina formative leaf node of the wordformation tree (cf. @Link{ "wordformation unit" |"wordformation-unit" }). In the formative window, the following must be specified (steps in squarebrackest are optional): @Item1) keyword: @Verbatim fully specified WFFormatives@End-Verbatim@End-Item @Item2) Newline@End-Item @Item3) @Link{ "lexical string" | "lexical-string" } of the formative@End-Item @Item4) white space@End-Item @Item5) @Link{ "surface string" | "surface-string" } of the formative (if more than one,separated from the first one by a white space; note that all possible surfacestring variants of a fully specified WFFormative must be specified here).@End-Item @Item[6) tab@End-Item @Item7) local @Link{ "WFCat feature(s)" | "WFCat-feature" }]Note that only local features must be specified here. Bylocal features we mean features that are distinctive at this level of the wordformation tree.  The entire feature set of a formative consists of the union of all WFCat features specified on the way from the root to the node. When there is no need to specify distinctive local features, the steps6) and 7) can be left out.@End-Item @Item8) Newline@End-Item To add more formatives in the same window, repeat steps 3) to 8). WFFormatives can also be specified in a @Link{ "WFFormative group" |"WFFormative-group" }. @Section{IFormative}@Index{IFormative}@Label{ "IFormative" }IFormatives are @Link{ "formatives" | "formative" } that are used by@Link{ "inflection rules" | "IRule" } to build up wordforms and paradigms. Theyare specified in the @Link{ "inflection tree" | "inflection-tree" }, either as @Link{"fully specified IFormatives" | "fully-specified-IFormative" } or as @Link{"underspecified IFormatives" | "underspecified-IFormative" }. 'IFormative' stands for 'Inflection Formative'.@Section{IFormative Group}@Index{IFormative group}@Label{ "IFormative-group" }@Link{ "IFormatives" | "IFormative" } can be specified in a IFormative group. Afeature set common to a list of formatives is taken on a separate line at thebeginning of the group. The members of the group are indented by one tab. Both @Link{ "fully specified IFormatives" | "fully-specified-IFormative" } and@Link{ "underspecified IFormatives" | "underspecified-IFormative" } can bespecified in IFormative groups. The syntax for the specification of the singleformatives in the group is the same as for ungrouped formatives, with theexception that the single formatives of a group must be indented one tab. The figure shows the example of a specification of Dutch verb suffixes:@Figure{ "IFormative groups" | "128" | 414 | 387 }The advantage of using IFormative groups over specifying the formatives inseparate formative windows is, here, that all suffixes belonging to a specificinflection unit can be kept in a single window. Note that IFormative groups do not allow ungrouped IFormatives in the samewindow. @Section{Simple Formative}@Index{simple formative}@Label{ "simple-formative" }A simple formative is defined as a formative whose string is 'directly' specified,i.e. it is either a @Link{ "fully specified IFormative" |"fully-specified-IFormative" }, a @Link{ "fully specified WFFormative" |"fully-specified-WFFormative" }, or a formative which has been instantiated bythe direct firing of an Inflection Rule. Cf. @Link{ "complex formative" | "complex-formative" }. @Section{Underspecified IFormative}@Index{underspecified IFormative}@Label{ "underspecified-IFormative" }An underspecified IFormative is an @Link{ "Inflection Formative" |"IFormative" } for which only the features are specified within therule specification.An IRule is fired, when the strings of all underspecified IFormatives defined init are specified.The corresponding strings are specified when an entry is specified,either in the entry specification of a @Link{ "hard coded entry" |"hard-coded-entry" } or with the specification of a @Link{ "lexicographerentry" | "lexicographer-entry" }, or as the result of the application of awordformation rule. Typical underspecified IFormatives are stems, becausethey constitute an open class of elements. Closed class elements likeinflectional affixes are typically defined as @Link{ "fully specifiedIFormatives" | "fully-specified-IFormative" }. @SubSection{Specification of Underspecified IFormatives}Underspecified IFormatives are specified in the Inflection Window, in aformative leaf node of the @Link{ "inflection tree" | "inflection-tree" } (cf.@Link{ "inflection unit" | "inflection-unit" }). In the formative window, the following must be specified (steps in squarebrackest are optional): @Item1) keyword: @Verbatim underspecified IFormatives@End-Verbatim@End-Item @Item2) Newline@End-Item @Item3) Underscore ("_")The underscore is a placeholder for the strings that will be specified with the@Link{ "entry specification" | "entry-specification" }.@End-Item @Item[4) tab@End-Item @Item5) local @Link{ "feature(s)" | "feature" }]Note that only local features must be specified here. Bylocal features we mean features that are distinctive at this level of the inflection tree.  The entire feature set of a formative consists of the union of all features specified on the way from the root to the node, except the features with the @Link{ "attribute" | "attribute" } RIRule or IIRule. When there is no need to specify distinctive local features, the steps4) and 5) can be left out.@End-Item@Item6) Newline@End-Item To add more formatives in the same window, repeat steps 3) to6).IFormatives can also be specified in a @Link{ "IFormative group" |"IFormative-group" }. @Section{Underspecified WFFormative}@Index{underspecified WFFormative}@Label{ "underspecified-WFFormative" }An underspecified WFFormative is an @Link{ "Wordformation Formative" |"WFFormative" } for which only the features are specified within therule specification.The corresponding strings are specified when an entry is specified,either in the entry specification of a @Link{ "hard coded entry" |"hard-coded-entry" } or with the specification of a @Link{ "lexicographerentry" | "lexicographer-entry" }. Typical underspecified WFFormatives are bound stems in neoclassical compounds,because they constitute an open class of elements. E.g. the bound stems "morf(o)"and "log(o)" in "morfology" (cf. "Bound Stems" in the second half of Section 5.2.1. ofthe Word Manager book; printed version p.159-162). Closed class elements likeinflectional affixes are typically defined as @Link{ "fully specifiedWFFormatives" | "fully-specified-WFFormative" }. @SubSection{Specification of Underspecified WFFormatives}Underspecified WFFormatives are specified in the Wordformation Window, in aformative leaf node of the @Link{ "wordformation tree" | "wordformation-tree" }(cf. @Link{ "wordformation unit" | "wordformation-unit" }). In the formative window, the following must be specified (steps in squarebrackest are optional): @Item1) keyword: @Verbatim underspecified WFFormatives@End-Verbatim@End-Item @Item2) Newline@End-Item @Item3) Underscore ("_")The underscore is a placeholder for the strings that will be specified with the@Link{ "entry specification" | "entry-specification" }.@End-Item @Item[4) tab@End-Item @Item5) local @Link{ "WFC feature(s)" | "WFCat-feature" }]Note that only local features must be specified here. Bylocal features we mean features that are distinctive at this level of the wordformtion tree.  The complete feature set of a formative consists of the union of all WFCat features specified on the way from the root to the node. When there is no need to specify distinctive local features, the steps4) and 5) can be left out.@End-Item@Item6) Newline@End-Item To add more formatives in the same window, repeat steps 3) to6).WFFormatives can also be specified in a @Link{ "WFFormative group" |"WFFormative-group" }. @Section{WFFormative}@Index{WFFormative}@Label{ "WFFormative" }WFFormatives are @Link{ "formatives" | "formative" } that are usedby wordformation rules to instantiate @Link{ "underspecified inflection formatives" |"underspecified-IFormative" } of new @Link{ "complex entries" | "complex-entry"}. They are specified in the @Link{ "wordformation tree" | "wordformation-tree" },either as @Link{ "fully specified WFFormatives" | "fully-specified-WFFormative" } or as@Link{ "underspecified WFFormatives" | "underspecified-WFFormative" }. 'WFFormative' stands for 'Wordformation Formative'.@Section{WFFormative Group}@Index{WFFormative group}@Label{ "WFFormative-group" }@Link{ "WFFormatives" | "WFFormative" } can be specified in a WFFormative group.A feature set common to a list of formatives is taken on a separate line at thebeginning of the group. The members of the group are indented by one tab. Both @Link{ "fully specified WFFormatives" | "fully-specified-WFFormative" } and@Link{ "underspecified WFFormatives" | "underspecified-WFFormative" } can bespecified in WFFormative groups. The syntax for the specifiaction of the singleformatives in the group is the same as for ungrouped formatives, with theexception that the single formatives of a group must be indented one line. The figure shows the example of a specification of Italian derivational suffixes(noun-to-adjective derivation): @Figure{ "WFFormative groups" | "129" | 495 | 292 }The advantage of using WFFormative groups over specifying the formatives inseparate formative windows is, here, that affixes belonging to a specificwordformation class can be kept in a single window. Note that WFFormative groups do not allow ungrouped WFFormatives in the samewindow. @Chapter{Generation History}@Index{generation history}see "Information in a Lexeme Browser" under @Link{ "Lexeme Browser" |"lexeme-browser" }. @Chapter{IIRule}@Index{IIRule}@Label{ "IIRule" }IIRule stands for Irregular @Link{ "Inflection Rule" | "IRule" }. IIRules arecharacterized by the obligatory @Link{ "attribute" | "attribute" } "IIRule" intheir Rule name. E.g.: @Verbatim (IIRule V-Irregular). @End-Verbatim Besides @Link{ "RIRules" | "RIRule" } (Regular Inflection Rules), WordManager has IIRules. IIRules define the inflectional paradigms of irregularlyinflecting lexemes. Since irregular lexemes are a closed class, theIIRules are not presented as an option for the direct classification ofnew words to the lexicographer. Consequently, all irregular entries must be specified by thelinguist within the IIRule as @Link{ "hard coded entries" |"hard-coded-entry" }. Exceptions are irregularly inflecting entriesthat are derived by a regular wordformation rule (@Link{ "RWFRule" | "RWFRule" }).They can be specified 'indirectly' by the lexicographer through the application of aRWFRule. Typical examples of IIRules are IRules for irregular verbs(English: "go"; German: "fahren"; Italian "fare"). Typical examples ofentries into an IIRule formed by a RWFRule areprefixed irregular verbs (English: "undergo"; German: "wegfahren";Italian "disfare"). Cf. @Link{ "IRule specification" | "IRule-specification" }.@Chapter{Inflectional Paradigms}@Index{inflectional paradigms}@Index{paradigms}@Label{ "paradigm" }The inflectional paradigm of a lexeme is defined as the set of @Link{"wordforms" | "wordform" } of the lexeme.In Word Manager, the representation of inflectional paradigms issubdivided in subparadigms. Subparadigms correspond by default to the setof wordforms defined by one line in the @Link{ "wordform specification" |"wordform-specification" }. When this default representation is not adequat, you can optionally defineanother division into subparadigms in the @Link{ "IRule specification" |"IRule-specification" }. The paradigm definition starts underneath the @Link{ "wordform specification" |"wordform-specification" } on a new line:@Itemkeyword: @Verbatim paradigms@End-Verbatim @End-Item @ItemNewline @End-Item @ItemCommon feature(s) of the wordforms of the first subparadigm  @End-Item @ItemNewline @End-Item @ItemCommon feature(s) of the wordforms of the second subparadigm @End-Item@ItemNewline @End-Item @Itemetc. @End-Item Tip: It is possible to specify only one 'subparadigm'. This is usefull, whenyou do not want an inflectional paradigm to be divided into subparadigms,even though the wordform specification comprises more than one line. Cf.Tutorial, @Document-Link{ "Section 7.2.6.2" | "Tutorial:Tutorial" |"Paradigms" } The example shows a possible subdivision into subparadigms forDutch nouns: @Example{Paradigms: Dutch Verbs}@Verbatim 	paradigms	(Mode Infinitive)	(Mode Ind)(Tense Pres)	(Mode Ind)(Tense Past)	(Mode Imperative)	(Mode Participle)@End-Verbatim@End-Example All wordforms in the paradigm of a Dutch verb having, e.g., the features(Mode Ind) and (Tense Pres) in their @Link{ "wordform features" |"wordform-feature" } will be united in one subpardigm when represented inthe paradigm view of, e.g., the @Link{ "lexeme browser" | "lexeme-browser".}. @Chapter{Inflection Rule}@Index{inflection rule}@Index{irregular inflection rule}@Index{regular inflection rule}See @Link{ "IRule" | "IRule" }Irregular Inflection Rule see @Link{ "IIRule" | "IIRule" }Regular Inflection Rule see @Link{ "RIRule" | "RIRule" }Inflection Rule specification see @Link{ "IRule specification" |"IRule-specification" }. @Chapter{Inflection Tree}@Index{inflection tree}@Label{ "inflection-tree" }For handling of the tree editor see @Link{ "tree editor" | "tree-editor" }.In the Inflection tree, @Link{ "IRules" | "IRule" } and @Link{ "IFormatives" |"IFormative" } are specified and hierarchically structured.  By means of@Link{ "features" | "feature" }, the tree is structered into @Link{ "inflectionunits" | "inflection-unit" } within which the IRules operate on the IFormatives.The rules and the formatives are specified in the leave nodes.  There are different types of features:@Item@Link{ "RIRule features" | "RIRule-feature" } and @Link{ "IIRule features" |"IIRule-feature" } = features with the @Link{ "attribute" | "attribute" } "RIRule"or "IIRule". Cf. @Link{ "inflection unit" | "inflection-unit" }.@End-Item @Item@Link{ "ICat features" | "ICat-feature" } = features with the attribute "ICat".@End-Item @ItemOther features = features with any attribute except theattributes "RIRule", "IIRule", "ICat". @End-Item The leave nodes for the @Link{ "specification of IRules" | "IRule-specification" }must have an RIRule or an IIRule feature. The complete name of an IRule is thesum of all RIRule features or IIRule features, respectively, encountered on theway down from the root node to the leave node.The leave nodes for the specification of @Link{ "IFormatives" |"IFormative" } must have an ICat feature or a "other" feature. Thecomplete feature set of an IFormative is the sum of all features, except "RIRule"and "IIRule" features, encountered on the way down from the root node to theleave node, plus the features specified directly with the formative.@Section{Some Constraints On The Tree Organization}General:  @Item On each node level, the local feature sets qualifying inflectionunits or leave nodes must be distinct, i.e. the sets must be pairwisenon-identical and no set may be a subset of another set.@End-Item@ItemA combined feature set of an inflection unit or a leave node may not haveredundant features, i.e. each feature on the path from the root to a node mustbe unique.@End-ItemIRule features:@ItemEach complete IRule name must be distinct, i.e. complete IRule names mustbe pairwise non-identical and no complete IRule name may be a subset ofanother complete IRule name. @End-Item@ItemA complete IRule name may not contain redundant features, i.e. each IRulefeature on the path from the root to the leave node must be unique.@End-Item IFormative features:@ItemOn each node level (this includes the features specified directly with theformatives), the feature sets qualifying formatives must be distinct,which means that the sets must be pairwise non-identical and no set maybe a subset of another set. @End-Item@ItemCombined qualifying feature sets of formatives (this includes the featuresspecified directly with the formatives) may not contain redundant featuresi.e. each feature on the path from the root to a node must be unique.@End-Item@ItemNone of the combined qualifiying feature sets of formatives (this includesthe features specified directly with the formatives) may be a subset of anyother.@End-Item @Chapter{Inflection Unit}@Index{inflection unit}@Label{ "inflection-unit" }An inflection unit is a construct that groups a set of @Link{ "IRules" |"IRUle" } and @Link{ "IFormatives" | "IFormative" } into an entity. Themajor charactersitic of an inflection unit is that the IRules specifiedwithin it operate exclusively over the IFormatives specified within it.The specification of inflection units allows you to factor yourspecification into entities within which you can work 'locally'.Furthermore, they faciliate the @Link{ "compilation" | "compilation" } inlarger databases: When you choose the 'Run Compiler' command in theEdit menu, only the inflection units that have been modified since thelast compilation are recompiled.  The beginning of an inflection unit is marked by a @Link{ "RIRulefeature" | "RIRule-feature" } or an @Link{ "IIRule feature" |"IIRule-feature" }, where the first marks a RIRule unit and the second anIIRule unit. All IRules and IFormatives specified at the beginning leveland the underlying levels of the subtree belong to the same inflectionunit. First, the @Link{ "IRules" | "IRule" } are specified, followed by the@Link{ "IFormatives" | "IFormative" }. @Example{Inflection Units: Italian Verb Subtree}@Verbatim 	(Cat N)		(ICat N-Regular)			(RIRule o/i)			(RIRule a/e)			(RIRule e/i)			(ICat N-Stem)			(ICat N-Suffix)				(Num SG)				(Num PL)		(ICat N-Irregular)			(IIRule Irreg_Stem)			(IIRule Defective)				(IIRule No_SG)				(IIRUle No_PL)			(ICat N-Stem)			(ICat N-Suffix)@End-Verbatim @End-Example The example shows a possible (incomplete) subtree for Italian nouninflection. It comprises two inflection units:@Itema RIRule unit for regular nouns, initiatet by the (RIRule o/i)@End-Item@Iteman IIRule unit for irregular nouns, initiated by the (IIRuleIrreg_Stem) @End-Item@Chapter{IRule}@Index{IRule}@Label{ "IRule" }IRule stands for Inflection Rule. As the name indicates, IRules defineinflectional morphology.IRules combine @Link{ "IFormatives" | "IFormative" } into @Link{ "wordforms" |"wordform" } and group these wordforms to @Link{ "inflectional paradigms" |"paradigm" }. One IRule describes one inflectional class. There is a distinction between @Link{ "RIRules" | "RIRule" } for regularinflectional classes and @Link{ "IIRules" | "IIRule" } for irregularinflectional classes. As far as the @Link{ "IRule specification" |"IRule-specification" } is concerned, there is only one difference betweenthese two types: RIRules must obligatorily have an @Link{ "RIRule feature" |"RIRule-feature" } name, whereas IIRule must obligatorily have an @Link{"IIRule feature" | "IIRule-feature" } name.   The full name of an RIRule is the sum of all the RIRule featuresencountered between the root node and the RIRule node, i.e. the node inwhich the RIRule is specified.  The full name of an IIRule is the sum of all the IIRule featuresencountered between the root node and the IIRule node, i.e. the node inwhich the IIRule is specified.  The full name of an IRule must be distinct for each IRule.Note, that RIRules and IIRules must be specified in separate @Link{"inflection units" | "inflection-unit" }. @Chapter{IRule Propagation}@Index{IRule propagation}@Label{ "IRule-propagation" }An IRule propagation is a subpart of a @Link{ "source" | "source" }specification in a WFRule.An IRule propagation will copy the IRule of the source entry to be the IRuleof the target entry, i.e. the source IRule becomes the target IRule. Thisallows generalizations of WFRules, e.g. with prefixing and compounding. E.g. in German, prefixed words and compounds belong in mostcases to the same inflection class as their second element. E.g.: "fahren" (irreg. verb: "fuhr/gefahren") => "befahren" (irreg verb: "befuhr/befahren"); "Buch" (plur. "Bcher") => "Schulbuch" (plur. "Schulbcher")This type of IRule inheritance can be expressed by an IRule propagation (seeexample below) cf. @Link{ "feature propagation" | "feature-propagation" }@Section{Specification of an IRule propagation}An IRule propagation is specified on the same line as the @Link{ "sourceIRule specification" | "source-IRule-specification" }: @Itemsource IRule specification@End-Item @Itemwhite space@End-Item @Itemtype ">"@End-Item @Example{IRule Propagation: German Noun Compounding}@Verbatim 	source	(Cat N)		(?IRule ?)		1	(ICat N-Stem)	(Cat N)		(?IRule ?) >		2	(ICat N-Stem)@End-Verbatim@End-Example The IRule of the second element will be propagated as target IRule, i.e. thecompound will be inserted into the same IRule as the second base noun. Note, that when you specify an IRule propagation, the target IRule dependson the IRule of the source entry.  Therefore - in order to avoid any contradictory specifications - the @Link{ "targetIRule specification" | "target-IRule-specification" } must obligatorily be specifiedas a wildcard rule @Verbatim (?IRule ?)@End-Verbatim @Chapter{IRule Specification }@Index{IRule specification} @Label{ "IRule-specification" }The specification of an @Link{ "IRule" | "IRule" } takes place in the windowconnected to a RIRule or an IIRule leaf node in the @Link{ "inflection tree" |"inflection-tree" }. A window is opended by double-clicking the leaf node. The syntax for the specification of @Link{ "RIRules" | "RIRule" } and @Link{"IIRules" | "IIRule" } is exactly the same. An IRule specification comprises the following parts (items in squarebrackets are optional): @Itemspecification of the @Link{ "citation form(s)" | "citation-form" }@End-Item @Itemspecification of the @Link{ "wordforms" | "wordform-specification" }@End-Item @Item[specification of @Link{ "subparadigms" | "paradigm" } ] @End-Item @Item[ @Link{ "IRule-specific spelling rules" | "IRule-specific-ISRule" } ]@End-Item @Item@Link{ "entry specification" | "entry-specification" }@End-Item@Chapter{IWFRule}@Index{IWFRule}@Label{ "IWFRule" }IWFRule stands for Irregular @Link{ "Wordformation Rule" | "WFRule" }.IWFRules are characterized by the obligatory @Link{ "attribute" | "attribute"} "IWFRule" in their rule name. E.g.: @Verbatim (IWFRule Adv+Prep)@End-Verbatim. Besides @Link{ "RWFRules" | "RWFRule" } (Regular Wordformation Rules),Word Manager has IWFRules. IWFRules define irregular, unproductivewordforming processes that produced a limited number of derivatives.Since IWFRules define unproductive processes, they are not presented as anoption for the classification of new words to the lexicographer. Consequently, all 'irregularly' formed derivatives must be specifiedby the linguist within the IWFRule as @Link{ "hard coded entries" |"hard-coded-entry" }. @Chapter{Lexeme}@Index{lexeme}@Label{ "lexeme" }A lexeme is the instantiation of an @Link{ "Inflection Rule" | "IRule" },generated by the firing of an Inflection Rule. In most cases, the notion oflexeme is equivalent to the notion of @Link{ "entry" | "entry" }. In traditionaldictionaries, a lexeme is represented by one headword that stands for all@Link{ "wordforms" | "wordform" } derivable from it by inflection. A lexeme is an @Link{ "inflectional paradigm" | "paradigm" } with its name. Thename of a Word-Manager-Lexeme is the @Link{ "Lexeme Identifier" |"lexeme-identifier" }.@Chapter{Lexeme Identifier}@Index{lexeme identifier}@Label{ "lexeme-identifier" }The lexeme identifier is the name of a lexeme. It consists of:@Itemthe @Link{ "surface string" | "surface-string" } of the first @Link{ "citation form" |"citation-form" } @End-Item@Itemthe @Link{ "entry features" | "entry-feature" } of the lexeme (i.e. theintersection of the @Link{ "wordform features" | "wordform-feature" } ofthe wordforms of the lexeme plus the @Link{ "individually added features" |"individually-added-feature" }. @End-Item The lexeme identifier identifies the lexeme in the database. Therefore, itmust be unique. When two entries have the same lexeme identifier, thesystem warns the linguist with the message that the lexeme "xy" is notunique. In this cases, the linguist has to specify additional features todistinguish them.   E.g. the English verbs "ring" ("ringed", "ringed") and "ring" ("rang", "rung"),could both result to have the lexeme identifier@Verbatim 	"ring" (Cat V)@End-Verbatim When this is the case, the linguist must distinguish them with @Link{"individually added features" | "individually-added-feature" }. E.g.@Verbatim 	"ring"	(Cat V)(Conjug Weak)	"ring"	(Cat V)(Conjug Strong)@End-Verbatim (Conjug Strong) and (Conjug Weak) are the individually added features. Note,that individually added features like all other features must be declared inthe @Link{ "feature domains" | "feature-domains" }. @Chapter{Lexical Character Set}@Index{lexical character set}@Label{ "lexical-character-set" }The lexical character set window lists all characters that are used for therepresentation of strings in the database. The window is opended byclicking the 'lex char' button in the @Link{ "document window" |"document-window" }.In the lexical character set, all characters must be declared that are usedfor the representation of @Link{ "lexical strings" | "lexical-string" }. Thelexical character set must be a superset of the @Link{ "surface characterset" | "surface-character-set" }.For the specification of lexical characters see @Link{ "character sort order" |"character-sort-order" } and @Link{ "character sequence sort order" |"character-sequence-sort-order" }.@Chapter{Lexical String}@Index{lexical string}@Label{ "lexical-string" }Lexical strings are used for linguistically motivated abstractions of@Link{ "surface strings" | "surface-string" }. They allow the use of speciallexical characters like morpheme boundaries (e.g. "+", "#") ormorphophonetic characters (see example below). Lexical strings are composed of lexical characters. They must bedeclared in the @Link{ "lexical character set" |"lexical-character-set" }. Lexical strings are transformed into @Link{ "surface strings" | "surface-string" }by the application of @Link{ "spelling rules" | "spelling-rule" }.@Example{Lexical Strings: German Umlaut With Plural Forms}@Verbatim 	SG: "Fuchs"		PL: "Fchse"	('fox')	SG: "Luchs"		PL: "Luchse"	('lynx')@End-VerbatimThe lexichal strings of the stems of these two nouns are@Verbatim "FUchs" and "Luchs"@End-Verbatim A spelling rule transforms in plural forms the "U" into "" whereasthe "u" in the same position remains unaltered. @End-Example @Chapter{Message Window}@Index{message window}@Label{ "message-window" }When compilation has been completed successfully, or when problems ariseduring compilation or syntax check, relevant messages will bedisplayed in the message window.Like the WM Test window, the message window can also be used for testpurposes (e.g. to open a @Link{ "lexeme browser" | "lexeme-browser" }). The message window is opened automatically, when WM displays a message. Youcan open it manually by clicking the 'message' button in the @Link{ "documentwindow" | "document-window" }.  @Chapter{RIRule}@Index{RIRule}@Label{ "RIRule" }RIRule stands for Regular @Link{ "Inflection Rule" | "IRule" }. RIRules arecharacterized by the obligatory @Link{ "attribute" | "attribute" } "RIRule" intheir Rule name. E.g.: @Verbatim (RIRule V-Regular). @End-Verbatim In contrast to @Link{ "IIRules" | "IIRule" }, RIRules define regularinflectional paradigms, i.e. the paradigms of open lexeme classes.Consequently, they are accessable for the direct specification of@Link{ "lexicographer entries" | "lexicographer-entry" }. Cf. @Link{ "IRule specification" | "IRule-specification" }.@Chapter{RWFRule}@Index{RWFRule}@Index{Regular Wordformation Rule}@Label{ "RWFRule" }RWFRule stands for Regular @Link{ "Wordformation Rule" | "WFRule" }.RWFRules are characterized by the obligatory @Link{ "attribute" | "attribute"} "RWFRule" in their rule name. E.g. (RWFRule N-Prefixing).In contrast to @Link{ "IWFRules" | "IWFRule" }, RWFRules define regular,productive wordforming processes. Consequently, they are accessable forthe specification of @Link{ "lexicographer entries" | "lexicographer-entry" }.Cf. @Link{ "WFRule specification" | "WFRule-specification" }. @Chapter{Source}@Index{source}@Label{ "source" }The source is the first part of a @Link{ "WFRule specification" |"WFRule-specification" }. The source of a WFRule specifies whichformatives out of which IRules are to be combined when the rule is fired. The source specification starts with the keyword "@Verbatimsource@End-Verbatim", followed the specification of the source formatives.Within the specification of the source formatives, we distinguish two typesof formatives:@ItemWordformation formatives (@Link{ "WFFormatives" | "WFFormative" }).@End-Item @ItemInflection formatives (@Link{ "IFormatives" | "IFormative" }), i.e. formativesthat are taken from a source entry.@End-Item @Section{Specification of WFFormatives as Source Formatives}The specification starts on a new line. Steps in square brackets areoptional: @ItemNewline@End-Item @ItemdigitThe digit is the index representing the source formative in the @Link{ "targetIFormative specification" | "target-IFormative-specification" }. For aWFRule with, e.g. two source elements, the digits "1" and "2" must be used.For an WFRule with three source elements, the digits "1", "2" and "3" mustbe used, etc. The order of assignment of the digits is arbitrary, though.@End-Item @Item[tab @End-Item @Item@Link{ "string restriction" | "string-restriction" } ]@End-Item @Itemtab@End-Item @Itemmatching feature (set)The feature(s) must identify the formative or the formative class that maybe used by the WFRule. The @Link{ "WFFormatives" | "WFFormative" } must bespecified in the same @Link{ "Wordformation Unit" | "wordformation-unit"}@End-Item @ItemNewline@End-Item @Section{Specification of a IFormatives as Source Formatives}The specification starts on a new line. Steps in square brackets areoptional: @ItemNewline@End-Item @Item@Link{ "source IRule specification" | "source-IRule-specification" }Here, you specify the IRule(s) out of which the source entries may be taken.@End-Item@Item[tab@End-Item @Item@Link{ "IRule propagation" | "IRule-propagation" }]@End-Item @Item[tab@End-Item @Item@Link{ "entry feature constraint" | "entry-feature-constraint" }]@End-Item @ItemNewline@End-Item@Item@Link{ "source IFormative specification" |"source-IFormative-specification" } Here, you specify which IFormatives are to be taken out of the sourceIRule. @End-Item @ItemNewline@End-Item @Section{Source IFormative Specification}@Index{source IFormative specification}@Label{ "source-IFormative-specification" }The source IFormative specification is a subpart of the @Link{ "source" |"source" } specification in a WFRule. It starts on a new line, underneath the@Link{ "source IRule specification" | "source-IRule-specification" }.Here, you specify which IFormatives out of the @Link{ "source IRule" |"source-IRule-specification" } is to be taken to form the new complexentry. Steps in square brackets are optional: @ItemNewline@End-Item @Itemtab@End-Item @ItemdigitThe digit is the index representing the source formative in the @Link{ "targetIFormative specification" | "target-IFormative-specification" }. For aWFRule with two source elements, the digits "1" and "2" must be used.For an WFRule with three source elements, the digits "1", "2" and "3" mustbe used, etc. The order of assignment of the digits is arbitrary though.@End-Item @Item[tab @End-Item@Item@Link{ "string restriction" | "string-restriction" }]@End-Item @Itemtab@End-Item@Itemmatching feature (set)The feature(s) must identify the IFormative class that is to be used by theWFRule.   @End-Item@ItemNewline@End-Item When more than one formative is to be taken out of the same source IRule,the above steps must be reapeated for each formative. @Section{Source IRule Specification (IRule match)}@Index{source IRule specification}@Index{IRule match}@Label{ "source-IRule-specification" }The source IRule specification is a subpart of the @Link{ "source" | "source"} specification in a WFRule.Here, you specify the source IRule(s) of a Wordformation Rule, i.e. the IRulesout of which the @Link{ "source IFormatives" |"source-IFormative-specification" } are to be taken to form new complexentries.The source IRule specification starts on a new line, after the keyword"source" or after a preceding source formative specification. It is writtenon one line, concluded with a Newline. Optionally, an @Link{ "IRulepropagation" | "IRule-propagation" } and/or an @Link{ "entry featureconstraint" | "entry-feature-constraint" } may be inserted on the same line. There are several possibilities to specify source IRules, all explainedbelow. The examples assume an inflection subtree for Verbs (Cat V), subdividedinto regular verbs (RIRule Regular) and irregular verbs (IIRule Irregular),each with three conjugation classes. @Verbatim 	(Cat V)		(RIRule V-Regular)			(RIRule 1st-Conjug)			(RIRule 2nd-Conjug)			(RIRule 3rd-Conjug)		(IIRule V-Irregular)			(IIRule 1st-Conjug)			(IIRule 2nd-Conjug)			(IIRule 3rd-Conjug)@End-Verbatim @Example{Source IRule Specifictions}@ItemOne single IRule is source IRule: You specifiy the name of the IRule. Apartial name is sufficient, as long as the IRule is identified unambiguously.E.g. regular verbs of the first conjugation class: @Verbatim (RIRule V-Regular.1st-Conjugation)   @End-Verbatim or simply@Verbatim (RIRule 1st Conjug) @End-Verbatim @End-Item @ItemTwo or more individual IRules are source IRule: you specify the IRulenames separatet from each other by the 'or' character "|". E.g. regular andirregular verbs of the 1st conjugation class: @Verbatim (RIRule 1st-Conjug)|(IIRule 1st-Conjug)@End-Verbatim @End-Item @ItemAll IRules belonging to an IRule-subtree are source IRule: You specifiy thenode name of the subtree. E.g. all regular verbs:@Verbatim (RIRule V-Regular)@End-Verbatim  @End-Item @ItemAll IRules belonging to an IRule-subtree with the exception of one (ormore): You specify the node name of the subtree, the 'except' character"^" and the name of the excepted IRule. E.g. all regular verbs except theverbs of the third conjugation class:@Verbatim (RIRule V-Regular)^(RIRule 3rd-Conjug)@End-Verbatim @End-Item @Item All IRules of two (or more) IRule-Subtrees are source IRules. Youspecify the node names of the subtrees, separated from each other by the'or' character "|" . Combinations with the 'except' mode are possible. E.g. allregular verbs and all irregular verbs except the latter of the 3rdconjugation class: @Verbatim (RIRule V-Regular)|(IIrule V-Irregular)^(IIRule 3rd-Conjug) @End-Verbatim@End-Item @ItemAll IRules belonging to an inflection subtree that is not initiated by aRIRule or IIRule feature. You specify the node name of the subtree, tab,@Verbatim (?IRule ?)@End-Verbatim . E.g. all verbs:@Verbatim (Cat V)	(?IRule ?)@End-Verbatim This specifiaction, too, can be combined with the 'except' mode. E.g. Allverbs except the irregular verbs of the 3rd conjugation class: @Verbatim (Cat V)	(?IRule ?)^(IIRule 3rd-Conjug)@End-Verbatim  @End-Item @End-Example @Chapter{Source-Constraint}@Index{source-constraint}@Label{ "source-constraint" }A source constraint is the part of a @Link{ "WFRule specification" |"WFRule-specification" } in which the the @Link{ "hard coded entries" |"hard-coded-entry" } are specified. At least one source constraint is obligatory for each WFRule. Exception: WFRulesthat match WFFormatives with a WFRule specialization, i.e. WFRules withÒ@Link{ "daughter rules" | "daughter-rule" }Ó. In this case, the source specificationsare specified with the Òdaughter ruleÓ. A source constraint starts with the keyword @Verbatim source-constraint @End-Verbatim on a new line underneath the @Link{ "target specification" | "target" }. Underneath the keyword, you repeat - as it were - the @Link{ "sourcespecification" | "source" } of the WFRule. Here, however, the source IRule and thesource formatives must be unambigously defined. Usually, this means that thename of one particular source IRule and the @Link{ "lexical strings" |"lexical-string" } of the particular formatives are to be given. The syntax of this part of a source constraint is very similar to the syntax ofthe @Link{ "source specification" | "source" }: For @Link{ "WFFormatives" | "WFFormative" }:@ItemNewline@End-Item @Itemdigit	(the same digit the formative has in the source specification)@End-Item @Item@Link{ "lexical string" | "lexical-string" } of the WFFormative@End-Item @ItemNewline@End-Item For @Link{ "IFormatives" | "IFormative" } (steps in square brackets are optional):@ItemNewline@End-Item @ItemIRule name@End-Item @ItemNewline@End-Item @Itemtab@End-Item @Itemdigit (the same digit the formative has in the source specification)@End-Item @Itemtab@End-Item @Item@Link{ "lexical string" | "lexical-string" } of the IFormative@End-Item @Item[tab @End-Item @Itemqualifying-feature (set)]The indication of the qualifying features of an IFormative is necessary whenmore than one formative is taken out of the same IRule.@End-Item @ItemNewline@End-Item When all items occurring in the source have been specified in this manner, youspecifiy the actual entry as an @Link{ "entry specification" |"entry-specification" }. For each hard coded complex entry, you have to specify a source constraint.@Chapter{Spelling Rule}@Index{spelling rule}@Label{ "spelling-rule" }Spelling rules are string manipulation rules. They allow thespecification of morphophonological (and other) phenomena connected withinflection and wordformation, respectively.There are two general types of spelling rules:@Item@Link{ "ISRules" | "ISRule" } (Inflection Spelling Rules)@End-Item @Item@Link{ "WFSRules" | "WFSRule" } (Wordformation Spelling Rules)@End-Item Both ISRules and WFSRules can be @Item@Link{ "general spelling rules" | "general-SRule" }@End-Item @Itemrule-specific spelling rules (@Link{ "IRule-specific ISRules" |"IRule-specific-ISRule" } or @Link{ "WFRule-specific WFSRules" |"WFRule-specific-WFSRule" }) @End-Item@Itementry-specific spelling rules (@Link{ "entry-specific ISRules" |"entry-specific-ISRule" } or @Link{ "entry-specific WFSRules" |"entry-specific-WFSRule" } @End-Item All types of spelling rules can be formulated as @Link{ "'value' spelling rules" |"value-rule" }. @Section{Entry-specific ISRules}@Index{entry-specificic ISRules}@Label{ "entry-specific-ISRule" }Entry-specific ISRules are @Link{ "inflection spelling rules" | "ISRule" }that are applied exclusively on the particular entry they are specified with(cf. @Link{ "order of spelling rule application" | "spelling-rule-order" }). They specify idiosyncratic inflectional phenomena. E.g.: irregular pluralforms: Engl: "tooth/teeth"; Ital: "uomo/uomini"; German: "atlas/atlanten" etc.Entry-specific ISRules are specified within the @Link{ "entry specification"| "entry-specification" }. They start on a new line, after the specification ofthe lexical and surface strings of the source entry, or, if necessary, afterthe specification of the deleted-forms:@ItemNewline tab@End-Item @Itemkeyword: @Verbatim ISRules @End-Verbatim@End-Item @ItemNewline tab@End-Item @Itemspelling rule body (see @Link{ "syntax spelling rules" | "spelling-rule-syntax" })When more than one spelling rule has to be specified, they are added directly underneath the first one (type: Newline, Tab, second spelling rule body, etc.) @End-Item @ItemNewline@End-Item @Example{Entry-Specific ISRule} for the irregular Italian noun sing. "uomo" / plur. "uomini": @Verbatim 	entry		(Gender M)		"uom" "uom" "uomin"		ISRules		"uom/uomin"	"i" (ICat N-Suffix)(Num PL)@End-Verbatim @End-Example Note, that all surface forms produced by any type of spelling rule have to bespecified with the formative. Here: "uomin".@Section{General ISRule and General WFSRule}@Index{general spelling rule}@Index{general ISRule}@Index{general WFSRule}@Label{ "general-SRule" }A general ISRule is an @Link{ "inflection spelling rule" | "ISRule" } that isapplied on all entries of all inflection classes.  A general WFSRule is a@Link{ "wordformation spelling rule" | "WFSRule" } that is applied on allentries of all wordformation classes.  Exceptions are @Link{ "spelling rulegroups" | "spelling-rule-group" }. Both general ISRules and general WFSRules are specified in the SpellingRule Window. You open the window by clicking the 'spelling' button in the@Link{ "document window" | "document-window" }. A general spelling rule consists of a name and a body, both specified on a newline. The name is a @Link{ "feature" | "feature" }. The attribute is obligatorily "ISRule"for ISRules and "WFSRule" for WFSRules. The corresponding value can be choosenarbitrarily, the only condition being that every name is unique. It is preferableto choose transparent names (cf. examples below). Note that in Spelling Rule namesonly so-called@Link{ "alphabetic characters" | "alphabetic-character" } are allowed For the specification of spelling rule body see @Link{ "syntax of spelling rules" |"spelling-rule-syntax" }.@Example{General ISRule and General WFSRule}@Verbatim 	(ISRule h-insertion)	"(.*c)/\1h" (ICat N-Stem)	"[ei]" (ICat N-Suffix)	(WFSRule Delete_Final_e)	"(.*)e/\1" (ICat N-Stem)	(WFCat Suffix)@End-Verbatim @End-Example @Section{Entry-specific WFSRules}@Index{entry-specificic WFSRules}@Label{ "entry-specific-WFSRule" }Entry-specific WFSRules are @Link{ "wordformation spelling rules" |"WFSRule" } that are applied exclusively on the particular entry they arespecified with (cf. @Link{ "order of spelling rule application" |"spelling-rule-order" }). They specify idiosyncratic wordformation phenomena. E.g.: Engl.:modifications of the stem in "private > privacy"; German: e-insertion with"spontan > spontaneitt"; t-insertion with "kennen > kenntnis", etc.Entry-specific WFSRules are  specified  in the wordformation rulespecification, between the @Link{ "source-constraint" | "source-constraint"} and the @Link{ "entry specification" | "entry-specification" }: @ItemNewline@End-Item @Itemkeyword: @Verbatim WFSRules @End-Verbatim@End-Item @ItemNewline@End-Item @Itemspelling rule body (see @Link{ "syntax spelling rules" | "spelling-rule-syntax" })When more than one spelling rule has to be specified, they are added directly underneath the first one (type: Newline, second spelling rule body, etc.) @End-Item @ItemNewline@End-Item The example shows the source constraint for the V-To-N Derivation"kennen > kenntnis" with the entry specific WFSRule for the t-insertion:@Example{Entry-Specific WFSRule}@Verbatim 	source-constraint	(RIRule V-Irregular.No-Detachable-Prefix)		1	"kenn	2	"nis"	WFSRules	"kenn/kennt" (ICat V-Stem)	"nis" (WFCat Suffix)	entry		"kenntnis"@End-Verbatim @End-Example Note, that all surface forms produced by any type of spelling rule have to bespecified with the formative. Here, the surface string "kennt" must bespecified as a surface form of the base entry, i.e. as a surface form of theverb stem of the entry "kennen". @Section{IRule-specific ISRules}@Index{IRule-specific ISRules}@Label{ "IRule-specific-ISRule" }IRule-specific ISRules are @Link{ "inflection spelling rules" | "ISRule" } thatare exclusively applied on the formatives of entries that are defined by theinflection rule the ISRule is specified with.  They are used to specify morphophonological or morphographic phenomenaconnected with a particular inflectional class. E.g. German nouns withthe feminine forming suffix "-in": doubling of the "-n" in final position ofthe singular when combined with plural suffix: sing. "studentin", plur."studentinnen" ('female student'). Such a morphographic modification has to be specified for thecorresponding inflectional class only => IRule-specific ISRule.IRule-specific ISRules are specified within the @Link{ "IRule specification"| "IRule-specification" }, on a new line, underneath the specification of thewordforms or - when @Link{ "subparadigms" | "paradigms" } have been specified -underneath the specification of the subparadigms:@ItemNewline@End-Item @Itemkeyword: @Verbatim ISRules @End-Verbatim@End-Item @ItemNewline@End-Item @Itemspelling rule body (see @Link{ "syntax spelling rules" | "spelling-rule-syntax" })When more than one spelling rule has to be specified, they are added directly underneath the first one (type: Newline, second spelling rule body, etc.) @End-Item @ItemNewline@End-Item  @Section{ISRule} @Index{ISRule}@Index{inflection spelling rule} @Label{ "ISRule" }ISRules (Inflection Spelling Rules) are @Link{ "spelling rules" |"spelling-rule" } that are applied within inflection. When formatives are combined to wordforms, ISRules transform @Link{"lexical strings" | "lexical-string" } of the formatives into @Link{ "surfacestrings" | "surface-string" } before these surface strings are concatenatedto orthographic representations of wordforms. An Inflection Rule (@Link{ "IRule" | "IRule" }) defines a sequence offormatives that should be combined into a wordform. Before the stringcombination takes place, the entire sequence of ISRules is applied onthe formative sequence, one after the other, in their @Link{ "order ofspecification" | "spelling-rule-order" }. ISRules can be:@Item@Link{ "general ISRules" | "general-SRule" }@End-Item @Item@Link{ "IRule-specific ISRules" | "IRule-specific-ISRule" }@End-Item @Item@Link{ "entry-specific ISRules" | "entry-specific-ISRule" }@End-Item @Section{WFRule-specific WFSRules}@Index{WFRule-specific WFSRules}@Label{ "WFRule-specific-WFSRule" }WFRule-specific WFSRules are @Link{ "wordformation spelling rules" |"WFSRule" } that are exclusively applied on the formatives of entries thatare combined by the wordformation rule the WFSRule is specified with.  They are used to specify morphophonological or morphographic phenomenaconnected with a particular wordformation class. E.g. prefix "in-" in Englishor Italian: assimiliation of the "n" to the initial consonant (b, m, p, l, r) ofthe following stem: "in+possible" / "impossible", "in+legal" / "illegal","in+relevant" / "irrelevant", etc. This morphophonological phenomenon has to be specified within aparticular wordformation process only => WFRule-specific WFSRule. WFRule-specific WFSRules are specified within the @Link{ "WFRulespecification" | "WFRule-specification" }, on a new line, between the@Link{ "source" | "source" } and the @Link{ "target" | "target" } specification: @ItemNewline@End-Item @Itemkeyword: @Verbatim WFSRules @End-Verbatim@End-Item @ItemNewline@End-Item @Itemspelling rule body (see @Link{ "syntax spelling rules" | "spelling-rule-syntax" })When more than one spelling rule has to be specified, they are added directly underneath the first one (type: Newline, second spelling rule body, etc.) @End-Item @ItemNewline@End-Item The example shows a possible specification of a wordformation rule forprefixing of English adjectives, with some WFSRules for the prefix "in-":@Example{WFRule-Specific WFSRule}@Figure{ "WFRule-specific WFSRule" | "130" | 410 | 307 }@End-Example @Section{WFSRule}@Index{WFSRule}@Index{wordformation spelling rule}@Label{ "WFSRule" }WFSRules (Wordformation Spelling Rules) are @Link{ "spelling rules" |"spelling-rule" } that are applied within wordformation.When a wordformation rule combines @Link{ "lexical strings" |"lexical-string" } of source formatives into strings of target formatives,the entire set of WFSRules is applied on the formative sequence, one afterthe other, in their @Link{ "order of specification" | "spelling-rule-order" }. The resulting strings are still to be considered @Link{ "lexical strings" |"lexical-string" }. After their insertion into the target IRule, the wholeset of @Link{ "ISRules" | "ISRule" } is applied on them when they arecombined into wordforms.WFSRules can be:@Item@Link{ "general WFSRules" | "general-SRule" }@End-Item @Item@Link{ "WFRule-specific WFSRules" | "WFRule-specific-WFSRule" }@End-Item @Item@Link{ "entry-specific WFSRules" | "entry-specific-WFSRule" }@End-Item @Chapter{Spelling Rule Group}@Index{spelling rule group}@Label{ "spelling-rule-group" }@Link{ "General spelling rules" | "general-SRule" } can be grouped into so-calledspelling rule groups. A spelling rule group consists of a list of spelling rules(@Link{ "ISRules" | "ISRule" } or @Link{ "WFSRules" | "WFSRule" }) preceded by afeature or feature set. The spelling rules of the group apply to the formativesqualified by the feature (set), only. Spelling rule groups are used for the specification of morphographic phenomenathat affect only a particular group of inflectional or wordformation classes (e.g.all nouns, all regular adjectives, all N-to-N derivations, etc.)A spelling rule group is specified in the Spelling Rule Window. The window isopened by clicking the 'spelling' button in the document window: @ItemNewline@End-Item @Itemfeature or feature set@End-Item @Itemnewline@End-Item @Itemtab@End-Item @Item@Link{ "general spelling rule" | "general-SRule" }@End-Item @Itemnewline@End-Item @Itemtab@End-Item @Itemgeneral spelling rule@End-Item @Itemnewline@End-Item @Itemetc.@End-Item @Example{Spelling Rule Groups}@Verbatim 	(Cat Noun)		(ISRule h-insertion)		"(.*c)/\1h" (ICat N-Stem)	"[ei]"				(ISRule i-deletion)		(.*c)i/\1h" (ICat N-Stem)	"[ei]"	(RIRule Replace_Special_Character_C)	"(.*)C/\1c" (ICat N-Stem)|(ICat A-Stem)|(ICat V-Stem)@End-Verbatim@End-Example The example shows a spelling rule group initiated by the feature (Cat Noun).The rules specified in the group apply exclusively on formatives with thefeature (Cat Noun). The group is followd by a general spelling rule that applieson all inflection formatives.@Chapter{Spelling Rule Order}@Index{spelling rule order}@Label{ "spelling-rule-order" }@Link{ "Spelling rules" | "spelling-rule" } are applied one after the other, intheir order of specification. When a spelling rule is applied, the lexical string of a formative is replacedaccording to the @Link{ "string replacement" | "string-replacement" } specifiedin the rule. After that, the following spelling rules are applied on the formative(of course, only if the formative meets the restrictions formulated in thespelling rules). The final result is defined by the string of the formative whichremains after the application of the last rule.The application order for both @Link{ "ISRules" | "ISRule" } and @Link{ "WFSRules"| "WFSRule" } is defined as follows: @Itemfirst, the @Link{ "general spelling rules" | "general-SRule" }, from top tobottom, as they are specified in the spelling rule window,@End-Item@Itemsecond, the rule-specific spelling rules , from top to bottom, as the arespecified with the corresponding inflection or wordformation rule (cf. @Link{"IRule-rule specific ISRule" | "IRule-specific-ISRule" } and @Link{"WFRule-specific WFSRules" | "WFRule-specific-WFSRule" }),@End-Item @Itemthird, the entry-specific spelling rules, from top to bottom, as they arespecified in the corresponding @Link{ "entry specification" |"entry-specification" } (cf. @Link{ "entry-specific ISRules" |"entry-specific-ISRule" } and @Link{ "entry-specific WFSRules" |"entry-specific-WFSRule" }). @End-Item The set of WFSRules is applied when @Link{ "complex formatives" |"complex-formative" } are formed. Subsequently, the set of ISRules is applied onthese complex formatives, when they are composed to wordforms and inflectionalparadigms by the corresponding inflection rule. @Chapter{Spelling Rule Syntax}@Index{spelling rule syntax}@Index{spelling rule body}@Label{ "spelling-rule-syntax" }The syntax of a spelling rule body is the same for @Link{ "ISRules" | "ISRule" }and @Link{ "WFSRules" | "WFSRule" }; for general, rule-specific and forentry-specific spelling rules.  The following items will be presented:@Itemrestrictions on formatives@End-Item@Item@Link{ "string restrictions" | "string-restriction" }@End-Item @Item@Link{ "string replacement" | "string-replacement" }	@End-Item @Item@Link{ "feature restrictions" | "feature-restriction" }@End-Item @Item@Link{ "'value'-rules" | "value-rule" }@End-Item @Section{Restrictions on formatives}Spelling rules are applied on formatives or on combinations of formatives. Thereare two possibilities to specifiy the formative (class) the spelling rule must beapplied on: @Item@Link{ "string restrictions" | "string-restriction" }@End-Item @Item@Link{ "feature restrictions" | "feature-restriction" }@End-Item When the restriction on one formative consists of both a stringrestriction and a feature restriction, the restrictions are separated by a whitespace.  The string restriction precedes the feature restriction. E.g. all nounstems ending on c: @Verbatim ".*c" (ICat N-Stem)@End-Verbatim When the application of a spelling rule is restricted on a combination offormatives, the formative restrictions are separated by a tab. E.g. all noun stemsending on "c" when combined a) with a plural suffix, b) with a plural suffix "i": a)@Verbatim ".*c" (Cat N-Stem)	(ICat N-Suffix)(Num PL)@End-Verbatim b)@Verbatim ".*c" (Cat N-Stem)	"i" (ICat N-Suffix)(Num PL)@End-Verbatim @Section{String Restriction}@Index{string restriction}@Label{ "string-restriction" }The special characters and the syntax for string restrictions are the following:@Item@Verbatim "string"@End-Verbatim Each string is included in double quotes.@End-Item@Item@Verbatim "."@End-VerbatimThe full stop matches any character (defined as a lexical character in the @Link{"lexical character set" | "lexical-character-set" }) @End-Item @Item@Verbatim ".*"@End-Verbatim The full stop followed by an asterisk matches any string, including strings ofone character and empty strings@End-Item @Item@Verbatim ".*sh?"@End-Verbatim An expression of one of the preceding forms followed by a question markmatches a sequence of zero or one of the expression. The example matches withstrings ending in "sh" or "s". @End-Item @Item@Verbatim ".*[sxz]"@End-Verbatim A sequence of characters in square brackets matches any character in the sequence. The example matches all strings ending in "s", "x" or "z". @End-Item @Item@Verbatim ".*[^e]"		".*[^sxz]"@End-Verbatim A sequence of characters preceded by "^" and in square brackets matches any character NOT in the sequence. The examples match all strings not ending in "e" and not ending in "s", "x" or "z", respectively. @End-Item @Item@Verbatim	".*ity|.*acy"			"be.*|ent.*|ver.*"@End-Verbatim Expressions separated by "|" match any of the expressions. The first examplematches all strings ending in "-ity" or "-acy". The second example matches allstrings starting with "be-", "ent-" or "ver-".@End-Item @Section{String Replacement}@Index{string replacement}@Label{ "string-replacement" }The string replacement is the modification a @Link{ "spelling rule" |"spelling-rule" } perfoms on the string of a formative. A string replacement isformulated in double quotes, directly with the @Link{ "string restriction" |"string-restriction" } of the formative that has to be modified. @Item@Verbatim "lady/ladie"	"s" (ICat N-Suffix)(Num PL)@End-VerbatimThe expression on the left of the slash "/" is replaced by the expression onits right. In the example, the lexical string "lady" will be replaced by the surfacestring "ladie" (when combined with the plural suffix "s"; cf. "lady - ladies").@End-Item @Item@Verbatim	"(.*)y"	"(.*)+(ity)"@End-VerbatimAn expression in round brackets matches what the expressionitself matches. Round brackets are used, when whole or partialstrings are to be copied from the left side to the right side of thestring replacement (see above slash and below backslash).@End-Item @Item@Verbatim "(.*)y/\1ie"		"s" (ICat Suffix)	"(.*)+(ity)/\1\2"@End-Verbatim A backslash followed by a digit copies the bracketed expression representedby the digit over from the left to the right side of the string replacement. Thedigits correspond to the position of the bracketed expression in the string on theright side of the string replacement.In the first example, "1" stands for ".*".  Any string followed by "y" is replacedby the same string plus "ie" when combined with a suffix "s" (cf. "lady/ladie-s").In the second example "1" stands for ".*" and "2" for "ity". Any string followed bythe special character "+" and the sequence "ity" is replaced by the same stringand the sequence "ity", i.e. the "+" is not copied into the new string. @End-Item @Section{Feature Restriction}@Index{feature restriction}@Label{ "feature-restriction" }Feature restrictions are used in @Link{ "spelling rules" | "spelling-rule" } torestrict their application (cf. @Link{ "spelling rule syntax" |"spelling-rule-syntax" }). Feature restrictions use the @Link{ "features" | "feature" } by which the@Link{ "formatives" | "formative" } are specified. A feature restriction matchesall formatives for which the features defined in the restrictions are a subsetof the qualifying feature set. E.g. @Itemthe restriction @Verbatim (Cat N) @End-Verbatim  matches all formativescontaining this feature in their feature set.@End-Item@Item the restriction @Verbatim (Cat N)(ICat N-Stem)(ICat Regular)@End-Verbatim matches all formatives defined by this feature set. @End-ItemPositive restrictions are formulated like the two examples above by stating afeature or a feature set. Further possibilities are:@Item@Verbatim ^	e.g. (Cat N)(ICat N-Stem)^(ICat Irregular)@End-Verbatim Negative restrictions are introduced by "^". The example restriction matches allformatives qualified by the feature set (Cat N)(ICat N-Stem), except theformatives that are further specified by the feature (ICat Irregular) => all butthe irregular noun stems.@End-Item@Item@Verbatim |	e.g.	(Cat A-Stem)|(ICat N-Stem)		(ICat N-Stem)(ICat a/e)|(ICat N-Stem)(o/i)@End-Verbatim Alternatives are indicated by "|" (vertical dash). The first example restrictionmatches with all formatives that are specified by either the feature (ICatA-Stem) or the feature (ICat N-Stem) => all adjective and noun stems.The second example matches either noun stems that are specified by thefeature (ICat a/e) or noun stems that are specified by the feature (ICat o/i). The"or"-operator separates whole feature expressions. Consequently, the feature(ICat N-Stem)  has to be repeated for the second feature expression. @End-ItemCombinations of the "or" and "not" operators are possible:@Verbatim 	(ICat N-Stem)|(ICat A-Stem)|(ICat V-Stem)@End-Verbatim Either N-stem, A-stem or V-stem@Verbatim 	(ICat N-Interfix)|(ICat N-Suffix)^(Num Plur)@End-Verbatim Either N-Interfix or N-Suffix except N-Suffix with the feature for plural. The"not"-operator refers only to the feature (set) specified immediatly before it. @Verbatim 	(ICat Adj-Suffix)^(Gender Fem)^(Number Plur)@End-Verbatim All Adj-suffixes that are neither feminine nor plural. The "not" operators arecoordinated, not embedded. Therefore, the example does not only excludeadj-suffixes that are feminine AND plural, but also adj-suffixes that are feminine OR  plural. @Section{'Value' Spelling Rules}@Index{value spelling rules}@Label{ "value-rule" }A normal @Link{ "spelling rule" | "spelling-rule" } produces one output for eachinput string, i.e. the input string is replaced by an output string according to the@Link{ "string replacement" | "string-replacement" } formulated in the spellingrule. A 'value' spelling rule is a spelling rule with two outputs: 1) the modified stringand 2) the unmodified input string. @SubSection{ISRules As 'Value' Rules}When the 'value' rule is an @Link{ "ISRule" | "ISRule" }, the subsequent ISRules areapplied on both outputs, on the modified string and on the unmodified string. Inthis manner, it is possible to generate two @Link{ "surface strings" |"surface-string" } out of one @Link{ "lexical string" | "lexical-string" }. This can be useful for the specification of wordforms or even whole inflectionalparadigms with two correct surface variants. E.g. the English noun "inflection"and "inflexion", the Dutch verb "controleren" and "kontroleren", etc.@SubSection{WFSRules As  'Value' Rules}When the the 'value' rule is a @Link{ "WFSRule" | "WFSRule" }, it produces twooutput strings, too. Unlike  'value' ISRules, 'value' WFSRules serve"only" for the formulation of an option between the  modified and theunmodified string. Not both the strings are passed on, but only the one that is manuallychosen: with @Link{ "hard coded entries" | "hard-coded-entry" } when the lexicalstring in the @Link{ "entry specification" | "entry-specification" } of the WFRuleis specified; with @Link{ "lexicographer entries" | "lexicographer-entry" }, whenthe target is generated. 'Value' WFSRules are useful for the specification of wordformation processes,with which a certain morphographic phenomenon occurs with some entries anddoes not occur with others, and where this alternative is not formallypredictable. E.g. certain German wordformation suffixes provoke somestems to be umlauted, meanwhile other stems remain unaltered. Which stemsare umlauted and which are not, is not unambiguously predictable:@Verbatim 		Arzt	rzt-in			Zar	Zar-in	Hund	Hnd-in			Kunde	Kund-in@End-Verbatim By the formulation of a 'value' rule, both processes, with and without umlaut,can be specified in one WFRule.  @SubSection{Specification of a 'Value' Rule}A normal spelling rule is made a 'value' spelling rule by simply adding a whitespace and the keyword "value" at the right end of the @Link{ "spelling rule body" |"spelling-rule-syntax" }. E.g.:@Verbatim 	"inflection/inflexion" (ICat N-Stem) value@End-VerbatimThe input string is "inflection", the output strings are "inflexion" and theunmodified string "inflection". @Verbatim 	"C(.*)/k\1" (ICat V-Stem) value	"C(.*)/c\1" (ICat V-Stem)@End-Verbatim The input is, e.g. the dutch noun stem "Copie", the output of the first spellingrule is "kopie" and "Copie". The second spelling Rule replaces "Copie" by "copie".Consequently, the lexical string "Copie" has the two surface variants "copie" and"kopie". @Chapter{Surface Character Set}@Index{surface character set}@Label{ "surface-character-set" }The surface character set window lists all characters that are used for therepresentation of @Link{ "surface strings" | "surface-string" }. The window isopended by clicking the 'surf char' button in the @Link{ "document window" |"document-window" }.All characters listed in the surface character set must also be declared in the@Link{ "lexical character set" | "lexical-character-set" }.For the specification of surface characters see @Link{ "character sort order" |"character-sort-order" } and @Link{ "character sequence sort order" |"character-sequence-sort-order" }. @Chapter{Surface String}@Index{surface string}@Label{ "surface-string" }Surface strings are composed of surface characters that are declared in the@Link{ "surface character set" | "surface-character-set" }. Surface strings are strings that identify orthographic representations ofwordforms.@Link{ "Lexical strings" | "lexical-string" } are transformed into surface stringsby the application of @Link{ "spelling rules" | "spelling-rule" }. The surfacestring  of a wordform is the string combination after the application of allspelling rules.  @Chapter{Syntax Check}@Index{syntax check}@Label{ "syntax-check" }Menu 'WordManager', command 'Check Syntax'.The syntax checker discovers syntactic errors and presents a list of the@Link{ "features" | "feature" } not declared yet, asking if they should be added tothe @Link{ "feature domains" | "feature-domains" } window. The syntax checker is applied on the window that is selected at the moment thechecker is activated. When the selected window is the Inflection window or theWordformation window, the syntax of the whole @Link{ "inflection tree" |"inflection-tree" } or @Link{ "wordformation tree" | "wordformation-tree" },respectively, is checked. @Section{Error Messages}If the syntax in the checked window is correct, the @Link{ "message window" |"message-window" } is opened and the message "syntax o.k." is displayed. If the syntax in the checked window is not correct, the message window isopened and a relevant error message is displayed. When this is the case,  try tocorrect the syntax error and redo the syntax check. The error messages should beeasily understandable. If not, consult the relevant chapters in this Help programor in the Tutorial. @Section{Adding features automatically}The syntax checker can be used for the automatic declaration of new features inthe window @Link{ "Feature Domains" | "feature-domains" }:When the syntax in the checked window is correct, but contains new features notdeclared in the window Feature Domains, a dialogue window is opened. Itdisplays the features that are not declared.Select the features you want to be added to the feature domains. Pay attention to typing errors! You select a feature by clicking it. To select more than one, hold down theShift-key while clicking them. Click OK. The features are added to the feature domains.@Chapter{Target}@Index{target}@Label{ "target" }The target is the part of a @Link{ "WFRule specification" |"WFRule-specification" } that specifies how the formatives matched in the@Link{ "source" | "source" } are combined and used for the creation of newentries.The target specification starts after the @Link{ "source" | "source" }specification or after the optional specification of @Link{ "WFRule-specificspelling rules" | "WFRule-specific-WFSRule" } (steps in square brackets areoptional): @ItemNewline@End-Item @Itemkeyword: @Verbatim target@End-Verbatim@End-Item @Item[tab	@Link{ "individually added features" | "individually-added-feature" }]@End-Item @ItemNewline@End-Item @ItemSpecification of the @Link{ "target IRule" | "target-IRule-specification" }@End-Item @ItemNewline@End-Item @ItemSpecification of one or more @Link{ "target IFormatives" |"target-IFormative-specification" } @End-Item @Section{Target IFormative Specification}@Index{target IFormative specifiacation}@Label{ "target-IFormative-specification" }The target IFormative specifiction is a part of the @Link{ "target specification"| "target" }. A target formative specification defines how the @Link{ "sourceformatives" | "source" } are combined to new formatives of a new entry. Target formatives are the instantiation of the @Link{ "underspecifiedIFormatives" | "underspecified-IFormative" } occurring in the @Link{ "targetIRule" | "target-IRule-specification" }. Therfore, you must always specify asmany target IFormatives as there are underspecified IFormatives in the targetIRule (the IRule cannot be fired, otherwise). The target IFormative specification starts on a new line, underneath the @Link{"target IRule specification" | "target-IRule-specification" }:@ItemNewline@End-Item @Itemtab@End-Item @Itemdigit white-space digit [white-space digit etc.]The digits represent the strings of the source formatives defined in the @Link{"source" | "source" } with the same digit. The order of the digits defines theorder in which these  source strings are combined to form the string ofthe target IFormative. @End-Item @Itemtab@End-Item @Itemfeature (set) of the target IFormativeThe feature (set) of the target IFormative must unambigously identify theformative. Of course, the feature (set) must correspond to the feature (set) of anunderspecified IFormative defined in the target IRule. @End-Item@ItemNewline@End-Item If more target IFormatives need to be specified, repeat the above steps.@Section{Target IRule Specification}@Index{target IRule specification}@Label{ "target-IRule-specification" }The target IRule specification is a part of the @Link{ "target specification"| "target" } in a WFRule or a part of a target specialization in a @Link{ "daughterrule" | "daughter-rule" }. It specifies the @Link{ "IRule" | "IRule" } in which the@Link{ "target IFormative(s)" | "target-IFormative-specification" } must beinserted, i.e. it defines the inflectional class of the entries generated by theapplication of the WFRule. The target IRule must always be unambigously defined as one particular IRule.You type the name of the IRule on a newline, underneath the keyword"target". Exceptions are:@Itemwhen an @Link{ "IRule propagation" | "IRule-propagation" } has beenformulated in the source specification. In this case, you type a wildcardIRule instead of the name of a particular IRule. A wildcard IRule looks likethis: @Verbatim (?IRule ?)@End-Verbatim @End-Item @Item when the WFRule matches WFFormatives with a WFRule specialization, i.e.when you specify so-called @Link{ "daughter-rules" | "daughter-rule" }. In this case,too, you type a wildcard IRule @Verbatim (?IRule ?) @End-Verbatim . @End-Item These exceptions do not hold for target IRule specifications in daughter rules,because 1) when an IRule propagation has been formulated, there is no need tospecify a target IRule in the daughter rule, and 2) daughter IRules cannot havefurther daughter IRules. @Chapter{Tree Editor}@Index{tree editor}@Label{ "tree-editor" }The tree editor is a facility for the structuring of the @Link{ "inflection tree" |"inflection-tree" } and the @Link{ "wordformation tree" | "wordformation-tree" }. When you start a new database, the inflection window and the wordformation windoware empty, except for the "root" node. When you open an already existing database, cf.Delete/Collapse-command below. To modify a new or an already existing tree, the inflection window or thewordformation window must be selected. Then, the 'Edit' menu lists all the relevantcommands. Before you choose a command, you must select one node in the tree byclicking it. Selected nodes are displayed white on black.@ItemNew Son: Adds a new son node to the selected node.A dialogue box is opened in which you have to type the @Link{ "feature" | "feature" }you want to be the node name. Note that a feature must always be a bracketedattribute-value pair. @End-Item@ItemNew Brother: Adds a new node at the same tree level as the selected node.A dialogue box is opened in which you have to type the feature you want to be thenode name. Note that a feature must always be a bracketed attribute-value pair.@End-Item@ItemOpen Node Window: opens the window of the selected node. A node window canalso be opened by double-clicking the node. @ItemAll non-terminal nodes are comment windows, i.e. windows that are ignored bythe compiler. If you want to insert comments, use semicolons at the beginnign ofeach line. The semicolons can be manually typed in or automatically inserted withthe 'Insert ";"' command in the Edit menu (only available when a node window isopened). The command inserts three semicolons on each new line of selected text. @End-Item@ItemThe terminal (leave) nodes are used for the specification of rules and formatives.@End-Item @End-Item@ItemEdit Node Name: Opens a dialogue window containig the name of the selected node.The name can be changed.@End-Item@Item Cut Subtree: Deletes the selected node @Itemonly the selected node when it is a leave node@End-Item@Item the whole subtree starting from the selected node when it is a parent node@End-Item@End-Item @Item Copy Subtree: Copies the selected node @Itemonly the selected node when it is a leave node@End-Item@Item the whole subtree starting from the selected node when it is a parent node@End-Item@End-Item @ItemPaste Subtree As Son: Pastes the previously deleted or copied node/subtree as ason of the selected node.@End-Item  @ItemPaste Subtree As Brother: Pastes the previously deleted or copied node/subtree atthe same tree level as the selected node. @End-Item@ItemExpand/Collapse: Expands resp. collapses the subtree of the selected node. Nodeswith collapsed underlying subtrees are displayed in bold. When a database is opened, all subtrees up to the first level underneath the rootnode are collapsed. @End-Item@ItemCopy Node Name: Copies the name of the selected node. Useful, when complex nodenames have to be used in rule specifications or in comments. @End-Item@Chapter{WF Cluster}@Index{WF cluster}@Label{ "WF-cluster" }The view 'WF Cluster' is a graphical representation of the lexemes that, throughwordformation, are directly related to a particular lexeme. The WF Cluster view of a particular lexeme can be opened from its @Link{ "lexemebrowser" | "lexeme-browser" }: Open the lexeme browser of the lexeme and choose'WF Cluster' in the upper selection menu (or press CTRL+5).The view shows all lexemes from which the selected lexeme is derived and alllexemes that are derived from the selected lexeme. The selected lexeme isrepresented in bold characters: @ItemOn the left of the selected lexeme (creation history), allderivational steps down to the @Link{ "simple entries" | "simple-entry" } are shown. @End-Item@ItemOn the right of the selected lexeme (generation history), alllexemes that are derived from it are shown. If one of these derivatives is a compound,all the lexemes involved in its creation are also shown down to the simple entries.@End-Item Since in larger databases the clusters can grow very big, you have the possibilityto restrict the depth of the WF Cluster representation:@ItemSelect "Set WF Cluster Depth..." in the 'WordManager Menu'	@End-Item @ItemIn the dialogue box you can choose@Item	All: the clusters will be fully extended as described above.@End-Item @ItemSpecified Depth: you can restrict the depth of the creation and/or the generationhistory on 1, 2, 3, etc. steps.@End-Item 	@End-Item You can open the lexeme browser of every lexeme represented in the cluster bydouble-clicking it.To rearrange the representation of the cluster, you can move the lexeme nodesindividually. Just click and drag them. @Chapter{WFRule}@Index{WFRule}@Label{ "WFRule" }WFRule stands for Wordformation Rule. As the name indicates, WFRules definewordformation, i.e. derivation and compounding. WFRules combine @Link{ "IFormatives" | "IFormative" } of already storedentries and, optionally, @Link{ "WFFormatives" | "WFFormative" } into newIFormatives to form new, @Link{ "complex entries" | "complex-entry" }. OneWFRule describes one wordformation class or - in other words - onewordformation process. There is a distinction between @Link{ "RWFRules" | "RWFRule" } for regular,productive wordformation processes and @Link{ "IWFRules" | "IWFRule" } forirregular wordformation processes. As far as the @Link{ "WFRule specification" |"WFRule-specification" } is concerned, there is only one difference betweenthese two types: RWFRules must obligatorily have an @Link{ "RWFRule feature" |"RWFRule-feature" } name, whereas IWFRules must obligatorily have an @Link{"IWFRule feature" | "IWFRule-feature" } name.   The full name of an WFRule is the sum of all the featuresencountered between the root node and the WFRule node, i.e. the node inwhich the WFRule is specified.  The full name of an WFRule must be distinct for each WFRule.Note, that RWFRules and IWFRules must be specified in separate @Link{"wordformation units" | "wordformation-unit" }. @Chapter{WFRule Specification}@Index{WFRule specification} @Label{ "WFRule-specification" }The specification of a @Link{ "WFRule" | "WFRule" } takes place in a windowconnected to a RWFRule or an IWFRule leaf node in the @Link{ "wordformation tree"| "wordformation-tree" }. A window is opended by double-clicking the leaf node. The syntax for the specification of @Link{ "RWFRules" | "RWFRule" } and @Link{"IWFRules" | "IWFRule" } is exactly the same. A WFRule specification comprises the following parts (items in squarebrackets are optional): @Item@Link{ "source specification" | "source" }@End-Item @Itemnewline@End-Item @Item[ @Link{ "WFRule-specific WFSRules" | "WFRule-specific-WFSRule" }]@End-Item @Itemnewline@End-Item @Item@Link{ "target specification" | "target" }@End-Item @Itemnewline@End-Item @Item@Link{ "source constraint" | "source-constraint" } including an @Link{"entry specification" | "entry-specification" }When the WFRule matches WFFormatives with a WFRule specialization, so-called'@Link{ "daughter rules" | "daughter-rule" }', the source constraints may not beformulated in the WFRule itself. They must be specified with the daughter rule.@End-Item@ItemNewline@End-Item @Chapter{Wildcard IRule}@Index{wildcard IRule}@Label{ "wildcard-IRule" }Wildcard IRules are used in the @Link{ "target IRule specification" |"target-IRule-specification" }. A wildcard IRule denotes that the target IRule isdetermined somewhere else, either propagated from the source by an @Link{"IRule propagation" | "IRule-propagation" } or specified in a so-called @Link{"daughter rule" | "daughter-rule" }. A wildcard IRule looks as follows:@Verbatim (?IRule ?) @End-Verbatim @Chapter{Wordform}@Index{wordform}@Label{ "wordform" }A wordform is a particular, concrete representation and a grammatical role a@Link{ "lexeme" | "lexeme" } may assume in a text. The sum of the wordforms ofa lexeme is its @Link{ "inflectional paradigm" | "paradigm" }.When an @Link{ "IRule" | "IRule" } combines @Link{ "IFormatives" | "IFormative" }into wordforms, it combines @Link{ "lexical strings" | "lexical-string" } andfeatures. A wordform is thus a combination of the strings and the feature sets ofits formatives. It consists of a @Link{ "lexical string" | "lexical-string" }, a @Link{"surface string" | "surface-string" } and the corresponding @Link{ "wordformfeatures" | "wordform-feature" }. See @Link{ "wordform specification" | "wordform-specification" }.@Chapter{Wordform Specification}@Index{wordform specification}@Label{ "wordform-specification" }Wordform specifications are a part of an@Link{ " IRule specification" |"IRule-specification" }. They define which @Link{ "IFormatives" | "IFormative" }are to be combined into @Link{ "wordforms" | "wordform" }.  @ItemUnder the keyword "citation-forms", you specify the wordform(s) you wantto be used as @Link{ "citation form" | "citation-form" }. @End-Item@ItemThe specification of all wordforms belonging to the inflectional paradigmdefined by the IRule (usually including the form used as citation form) isspecified under the keyword@Verbatim word-forms@End-Verbatim that is written on a new line, underneath the specification of the citation form.@End-ItemThe formatives are represented by a feature or a feature set. The features matchexclusively the formatives specified in the same @Link{ "inflection unit" |"inflection-unit" }. The formatives specified on one line are separated from eachother by a tab. One line defines @Itemone wordform, when all features specified on it match only oneformative @End-Item@Itema set of wordforms, when a feature (set) specified on it matches a set offormatives. @End-Item@Example{Wordform Specification}Partial IRule for English nouns:@Verbatim 	citation-forms	(ICat N-Stem)		(ICat N-Suffix)(Num SG)	word-forms	(ICat N-Stem)		(ICat N-Suffix)@End-Verbatim @End-Example Given a set of noun suffixes consisting of two suffixes:	@Verbatim 	"" ""		(ICat N-Suffix)(Num SG)	"s" "s"		(ICat N-Suffix)(Num PL)@End-Verbatim and one noun stem (ICat N-Stem), the line under "citation-forms" generates onewordform (stem + suffix singular),  whereas the line under "word-forms"generates two wordforms (stem + suffix singular & stem + suffix plural). @Chapter{Wordformation Rule}@Index{wordformation rule}@Index{irregular wordformation rule}@Index{regular wordformation rule}See @Link{ "WFRule" | "WFRule" }Irregular Inflection Rule see @Link{ "IWFRule" | "IWFRule" }Regular Inflection Rule see @Link{ "RWFRule" | "RWFRule" }Wordformation Rule specification see @Link{ "WFRule specification" | "WFRule-specification" }. @Chapter{Wordformation Tree}@Index{wordformation tree}@Label{ "wordformation-tree" }For handling of the tree editor see @Link{ "tree editor" | "tree-editor" }.In the Wordformation tree, @Link{ "WFRules" | "WFRule" } and @Link{"WFFormatives" | "WFFormative" } are specified and hierarchically structured.  Bymeans of @Link{ "features" | "feature" }, the tree is structered into @Link{"wordformation units" | "wordformation-unit" } within which the WFRulesoperate on the WFFormatives. The rules and the formatives are specified in the leave nodes.  There are two different types of features:@Item@Link{ "RWFRule features" | "RWFRule-feature" } and @Link{ "IWFRule features" |"IWFRule-feature" } = features with the @Link{ "attribute" | "attribute" }"RWFRule" or "IWFRule". @End-Item @Item@Link{ "WFCat features" | "WFCat-feature" } = features with the attribute"WFCat". @End-Item WFCat features are used for the organization of @Link{ "wordformation units" |"wordformation-unit" }. Wordformation units are initiated by a WFRule feature. Within wordformation units, WFRule features are used for the structuring of rulewindows and WFCat features for the structuring of WFFormative windows.The leave nodes for the @Link{ "specification of WFRules" | "WFRule-specification" }must have an RWFRule or an IWFRule feature. The complete name of an WFRule is thesum of ALL features encountered on the way down from the root node to the leave node.The leave nodes for the specification of @Link{ "WFFormatives" | "WFFormative" } musthave an WFCat feature. The complete feature set of an WFFormative is the sum of allWFCat features encountered on the way down from the root node to the leave node, plusthe WFCat features specified directly with the formative. @Section{Some Constraints On The Tree Organization}General: @Item On each node level, the local feature sets qualifying wordformationunits or leave nodes must be distinct, i.e. the sets must be pairwise non-identicaland no set may be a subset of another set.@End-Item@ItemA combined feature set of a wordformation unit or a leave node may not haveredundant features, i.e. each feature on the path from the root to a node mustbe unique.@End-ItemWFRule features:@ItemEach complete WFRule name must be distinct, i.e. complete WFRule names mustbe pairwise non-identical and no complete WFRule name may be a subset ofanother complete WFRule name. @End-Item@ItemA complete WFRule name may not contain redundant features, i.e. each feature on thepath from the root to the leave node must be unique. @End-Item WFFormative features:@ItemOn each node level (this includes the WFCat features specified directly with theformatives), the feature sets qualifying formatives must be distinct,which means that the sets must be pairwise non-identical and no set maybe a subset of another set. @End-Item@ItemCombined qualifying feature sets of formatives (this includes the WFCat featuresspecified directly with the formatives) may not contain redundant featuresi.e. each WFCat feature on the path from the root to a node must be unique.@End-Item@ItemNone of the combined qualifiying feature sets of formatives (this includesthe WFCat features specified directly with the formatives) may be a subset of anyother.@End-Item @Chapter{Wordformation Unit}@Index{wordformation unit}@Label{ "wordformation-unit" }A wordformation unit is a construct that groups a set of @Link{ "WFRules" |"WFRUle" } and @Link{ "WFFormatives" | "WFFormative" } into an entity. Themajor charactersitic of a wordformation unit is that the WFRules specifiedwithin it operate exclusively over the WFFormatives specified within it.The specification of wordformation units allows you to factor yourspecification into entities within which you can work 'locally'.Furthermore, they faciliate the @Link{ "compilation" | "compilation" } inlarger databases: When you choose the 'Run Compiler' command in theEdit menu, only the wordformation units that have been modified since thelast compilation are recompiled.  The beginning of a wordformation unit is marked by a @Link{ "RWFRulefeature" | "RWFRule-feature" } or an @Link{ "IWFRule feature" |"IWFRule-feature" }, where the first marks a RWFRule unit and the second anIWFRule unit. All WFRules and WFFormatives specified at the beginning leveland the underlying levels of the subtree belong to the same inflectionunit. First, the @Link{ "WFRules" | "WFRule" } are specified, followed, optionally, by the @Link{ "WFFormatives" | "WFFormative" }. @Example{Wordformation Units: German Verb-To-Adjective Derivation}@Verbatim 	(WFCat V_To_Adj)		(WFCat Suffixing)			(RWFRule No_Umlaut)			(RWFRule Umlaut)			(WFCat Suffix)				(WFCat Without_Umlaut)				(WFCat With_Umlaut)		(WFCat Conversion)			(RWFRule Present_Participle)			(RWFRule Past_Participle)@End-Verbatim @End-ExampleThe example shows a possible (incomplete) subtree for Germanverb-to-adjective derivation with @Itema RWRule unit for suffixing, initiated by the (RWFRule No_Umlaut) @End-Item@Itema RWFRule unit for conversion, initiatet by the (RWFRule Present_Participle)@End-Item