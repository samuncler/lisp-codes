          1. Alphabetic Character      The alphabetic characters in WM are:      	a b c d e f g h i j k l m n o p q r s t u v w x y z	A B C D E F G H I J K L M N O P Q R S T U V W X Y Z	0 1 2 3 4 5 6 7 8 9	+ - * @ $ % ^ & _ \ < > ~ [ ]          See also Word Manager book, Section 2.2.2.   (printed version p.      40)      2. Attribute, Value      (Not to be confused with "value " in 'value' spelling rules   )      A bracketed attribute-value-pair forms a feature   .      Attributes and values are both so-called WMSymbols. The syntax      of these symbols is restricted to sequences of what is defined      as alphabetic characters   .      Upper and lower case characters are significant for the      distinction of attributes and values, resp. E.g.:      (Gender Fem) ­ (Gender fem) ­ (gender fem)     WMSymbols must not consist of character sequences which could      be mistaken for numbers. E.g. (person 1st) or (person _1), but not      (person 1) for the first person.      Attributes may be specified only once (while it is legal to have      the same values for different attributes).      3. Browser           3.1. General Entity Browser      (To get acquainted with the general browser, you can go to the      corresponding lesson in the tutorial   )      When a database has been compiled, the General Browser offers      views on all the entities Word Manager works with and on a great      variety of relations between them.      The following items will be presented:      ¥ How to open the General Browser      ¥ How to retrieve WM-entities      ¥ The menu "Aspects "      ¥ The menu "History "      3.1.1. Open the General Browser      The browser is opened by clicking the button "browser " in the      document window   .      3.1.2. How to Retrieve WM-Entities      Entities can be selected on the basis of their type (menu "Entity      Restrictions ": Inflection Rules, Wordformation Rules, Spelling      Rules, Entries) and the features they have (menu "Feature      Restriction ": features, strings).      To select an Item:         ¥  choose an entity in the pull-down menu "Entity             Restriction "         ¥  in the pull-down menu "Feature Restriction ", choose             one or more attributes   and the corresponding values   .             If you want to state or add a string restriction on             entries, choose the "String " command in the same menu             and type a string restriction in the appearing dialogue             box (e.g. all entries beginning with "a " = "a.* ")         ¥  click "Retrieve "         ¥  all the elements matching the chosen restrictions will             be listed in the central textfield (if nothing is listed,             there are no elements matching the restrictions)      Note that it is possible to choose a combination of feature      restrictions. E.g. (Cat N) and (Gender F). Therefore, to specify      restrictions for a second search, the previous restrictions have      to be deleted:         ¥  click into the textfield displaying the feature             restrictions         ¥  select the feature(s) to be deleted with the mouse         ¥  press CTRL+X         ¥  choose new (entities and) features and click "Retrieve "           3.1.3. 'Aspects': More Information on Selected Entities      The pull-down menu "Aspects " offers different views on      entities listed in the central textfield of the browser.      To select an entity, click it in the central textfield. The selected      item is displayed white on black.      The options available in the menu "aspects " depend on the type      of the selected entity. Only the relevant options are listed. The      options should be easily understandable. Otherwise, consult the      Help program under the name of the option. Only one of them is      mentioned here:      The option "Specification " opens the WM-window in which the      selected Entity is specified.      3.1.4. The Menu 'History'      The pull-down menu "History " lists all the retrieval steps you      made since the browser has been opened. To go one or more steps      back, choose the step you want to go back to in the menu "History      ".      Note that the "History " is initiated each time you open the      browser and deleted each time you close it.      3.2. Lexeme Browser      (To get acquainted with the lexeme browser, you can go to the      corresponding lesson in the tutorial   )      The information retrievable in a lexeme browser is focused on      individual entries. The following items will be treated:      ¥ How to open a lexeme browser      ¥ Information retrievable in a lexeme browser      ¥ How to trace wordformation relations      3.2.1. Open a Lexeme Browser              ¥  With the mouse, select a wordform you listed in the             Test Window (see Document Window   ) or in the             Message Window   . If no wordform of the lexeme you             want to have a look at is listed, type it into one of the             two windows and select it. A selected wordform is             dispayed white on black.         ¥  Choose "Retrieve lexicalized Entries " in the             "WordManager " menu or press CTRL+L.         ¥  The lexeme browser of the corresponding lexeme will be             opened. If the wordform you selected does not belong to             a lexeme stored in the database, the system warns you             with the message "No matching lexicalized Entries ".             Check for typing errors.           3.2.2. Information in a Lexeme Browser      Underneath the title "Lexemes ", the upper textfield in the      Lexeme Browser Window shows the lexeme identifier   of the      lexeme. Underneath, the name of the inflection rule the lexeme      belongs to is displayed.      When the wordform you selected to open the browser is      homographic, the lexeme identifiers of all the lexemes the      homograph belongs to are shown. In these cases, the information      retrievable in the lexeme browser belongs to the lexeme that is      selected. You select a lexeme identifier by clicking it in the      textfield.      The upper pull-down menu offers different views on the lexeme.      When the browser is opened, the option "Paradigms " is on.      This is the default view given by the system. You can change this      default to any other of the views listed below. In the upper      pull-down menu, choose the view you want to be the initial view      when a lexeme browser is opened. Then, choose the command 'Set      Lexeme Browser Default' in the 'WordManager' menu. The      seleceted option will be the default view.      These are the views available in a lexeme browser:         ¥  Paradigms: shows the subparadigms of the inflectional             paradigm   of the lexeme and the corresponding             wordforms. A subparadigms is selected by clicking it in             the field entitled "Paradigms ". The individual             wordforms, too, can be viewed, in the same manner as             in the option "Wordforms " (see below).         ¥  Wordforms: shows all the wordforms   of the             inflectional paradigm of the lexeme. A first field             displays the wordform(s) used as citation form   . A             second field lists all the wordforms of the lexeme. The             pull-down menu next to the title of the field             "Wordforms " offers two different views on the             individual wordforms (select a wordform by clicking it):                ¥  Formatives: shows the Inflection Formatives                      the selected wordform is composed of                ¥  ISRule Application: shows the Inflection                    Spelling Rules   applied on the wordform                     ¥  Creation History: this option is only available for             complex entries   . It shows:                ¥  the Wordformation Rule that created the                    lexeme                ¥  the source formatives   ; when you click on an                    inflection formative listed among the source                    formatives, the corresponding lexeme browser                    is opened                ¥  the target formatives                  ¥  the wordformation spelling rules   applied                    during the creation of the lexeme.                     ¥  Generation History: This option is only available for             entries that are source entries for at least one complex             entry. It shows a list of entries that are derived from             the lexeme.             When the pull-down menu next to the title "Generation             History " is on "New Browser ", you can open the lexeme             browser of a derived entry by clicking it in the field.             When the pull-down menu next to the title "Generation             History " is on "WFSRule Appl. ", the browser shows                ¥  the Wordformation Rule that created the                    selected complex entry                ¥  the target formatives   of the selected complex                    entry created by the Wordformation Rule                ¥  the Wordformation Spelling Rules   applied on                    the selected target formatives                     ¥  WF Cluster: Opens the ' WF Cluster   ' view of a             particular lexeme.         ¥  Deleted Forms: shows the wordforms that have been             specified as deleted forms           ¥  ISRules: lists all the Inflection Spelling Rules   applied             during the creation of the inflectional paradigm of the             lexeme         ¥  WFSRules: lists all the Wordformation Spelling Rules               applied during the creation of the lexeme. Only available             for complex entries.         ¥  Specification: Opens the Inflection Rule Window (if it is             a simple entry) or the Wordformation Rule window (if it             is a complex entry) of the rule by which the lexeme has             been created. With hard coded entries, you can view the             specification of the entry itself.           3.2.3. How to Trace Wordformation Relations      The lexeme browser allows you to trace the creation history and      the generation history of complex entries. If there are no      wordformation relations, the commands explained below are not      available.      To have an overall view on the wordformation relations of a      particular entry, choose WF Cluster   in the upper selection menu      of its lexeme browser.      To have a more particular view on the entries derived from the      lexeme you are viewing:         ¥  choose Generation History in the upper pull-down menu             of the lexeme browser         ¥  a list of derived entries is displayed (at least one)         ¥  select the derived entry you want to see by clicking it         ¥  the lexeme browser of the derived entry will be opened      To have a more particular view on the entry (or entries), the      selected lexeme is derived from:         ¥  choose Cration History in the upper pull-down menu of             the lexeme browser         ¥  in the field "source formatives ", click on the Inflection             Formative belonging to the source lexeme you want to             view         ¥  the lexeme browser of the basis lexeme will be opened      By reapeating these steps on the same lexeme browser or on a      series of consecutive lexeme browsers, you can move around in      the derivational paradigms of complex entries.      4. Character Sequence Sort Order      Subwindow of windows Surface Character Set   and Lexical      Character Set   .      For some natural languages it is conventional that the      alphabetical sort order of particular characters is identical to      that of specific sequences of characters. Typical examples are      the german umlaut characters " ", " ", " ", " ", " ", " ", and      the double-s "§ ", whose alphabetical sort order is usually to be      taken to be the same as that of the sequences "Ae ", "ae ", "Oe ",      "oe ", "Ue ", "ue ", and "ss ", respectively. The character sequence      sort order subwindow allows the specification of such      exceptional ordering conventions.      For German, a possible specification would be the following:      Example 4.1 Character Sequence Sort Order German                         	Ae  ae 	Oe  oe 	Ue  ue 	ss §                                                                                                  ×     The elements to be specified may either be single characters or      sequences of two characters.      The elements on one line define one group of characters and      character sequences. All the characters and character sequences      on the same line are treated as if they were identical to the      first character sequence specified on the line.      5. Character Sort Order      In the windows Surface Character Set   and Lexical Character Set        , the Character Sort Order lists the characters in alphabetical      order. In a new database, a default list of the common lowercase      characters is given.      5.1. Primary and Secondary Sort Order      The ranking distinguishes a primary and a secondary sort order,      where the primary sort order of a character is defined by the      line in which it is specified, the secondary sort order by the      position within the line.      A possible specification for the German character set could be      the following:      Example 5.1 Character Sort Order German             	A  a 	B b	C c	D d	E e	etc.                                                                                                  ×     The primary order takes precedence over the secondary, i.e. when      two characters are compared, the primary ranking is consulted      first; the secondary order is only consulted if the primary order      of two compared characters is equal. E.g.:      Example 5.2 Primary and Secondary Sort Order                         	Br >  Bett				Bar	Bar >  Bett		=>		Br	Bar > Br				Bett                                                                                                  ×          5.1.1. Declaration of Characters              ¥  Characters can be added                ¥  to the primary sort order by typing them on a                    new line                ¥  to the secondary sort order by typing them on                    the same line as alreadey declared characters,                    separated from them by a white space                     ¥  To delete characters (also characters of the initial             default list), select them and press Backspace or             CTRL+X.         ¥  Primary and secondary sort order can be changed. Delete             the character and add (paste) it on the line and the             position you want it to rank.           6. Citation Forms      The citation form is the wordform   of a lexeme which is used to      identify the dictionary entry defining the lexeme. Traditionally,      the citation form is the infinitive for verbs, the (nominative)      singular for nouns, etc.      The surface string   of the first citation form together with the      entry features   of the lexeme form the lexeme identifier   of a      lexeme.      The citation-form(s) are specified in the IRule specification        under the headword "citation-forms ":         ¥  citation-forms        ¥  Newline         ¥  one or more wordform-specifications   ; i.e.             specification of the wordform(s) you want to be used as             citation form(s)         ¥  Newline           7. Comments      For documentation and exampling, comments can be inserted in      all specification windows.      Everywhere, where the WM-syntax demands a newline, a      comment can be inserted. It starts with a semicolon (;), either on      a new line or on the same line as the specification text,      separated from it by a space.      The semicolons can be manually typed in or automatically      inserted with the 'Insert "; "' command in the Edit menu. The      command inserts three semicolons on each new line of selected      text.      In principle, only alphabetic characters   , spaces, tabs and      full-stops are allowed in comments.      (The reason for this restriction is, that comments are      disregarded completely by the system so that the      transformations applied to system characters in order to      guarantee portability, does not see comments).      8. Compilation      The compilation transforms the contents of the database as      specified by the linguist into an internal format. Whenever the      specification is modified, the database must be compiled.      The compilation commands are in the WordManager menu:         ¥  Compile All: compiles the whole database         ¥  Run Compiler: Compiles only the parts of the database (             inflection units   and wordformation units   , resp.) that             have been changed since the last compilation. Especially             in larger databases, this command is very usefull to             avoid long compilation times.      The handling is the same for both compilation commands:         ¥  In the 'WordManager' menu, choose 'Run Compiler' or             'Compile All', respectively.         ¥  In the appearing dialogue box you have two options. They             are on when marked with an "x " in the little choice box.             They are off, when the choice box is empty. To put them             on and off, click the choice boxes.                ¥  monitor Entries: all hard coded entries                    affected by the compilation are displayd in the                    message window                  ¥  extensive testing: during compilation, the                    system checks if all entities specified in the                    database (rules, formatives, features) are used                    at least once. It helps to avoid superfluous                    material in the database. The extensive testing                    takes extra time. Therefore, it is not                    recommended to have this option constantly on                    in larger databases.                     ¥  Click 'OK' to initiate the compilation or 'Cancel' to             cancel it.      The system will compile (part of) the database. When it is      successfully concluded, the following message is given in the      message window:      compilation took ... seconds      If there are syntax errors, errors in the organization of the      inflection or the wordformation tree, etc. the compilation is      interrupted and an error message is given in the message window        . When this is the case, correct the error and restart the      compilation with the 'Run Compiler' command.      We suggest that you always do a syntax check   before initiating      a compilation. The syntax check detects syntax errors faster      than the compilation command.      9. Creation History      see "Information in a Lexeme Browser " under Lexeme Browser   .      10. Deleted Forms      Deleted forms are the wordforms that are deleted from the      inflectional paradigm of a lexeme with an incomplete paradigm.      Examples of words with a defective inflectional paradigm are:      Example 10.1 Defectives             English: "scissors " = noun with no singular form             German: "Furcht " ('fear') = noun with no plural forms             Italian: "bisognare " ('to be neccessary') = verb used in             3rd persons singular and plural, only                             ×     To avoid the specification of separate IRules, you can insert      these words into the corresponding regular IRules and specify      the lacking forms as deleted forms.      10.1. Specification of Deleted Forms      The specification of deleted forms is an optional part of an entry      specification   (cf. there, step 8).      After the specification of the strings (and features) of the new      entry, type:         ¥  Newline         ¥  tab         ¥  keyword: deleted-forms        ¥  tab         ¥  wordform features   of the wordforms that must be             deleted.             Cf. examples below         ¥  Newline      To add more specifications, type:         ¥  tab (one or more)         ¥  wordform features of the wordforms that must be             deleted         ¥  Newline           10.2. Examples           Example 10.2 Deleted Forms ÒFurchtÓ             The German noun "Furcht " ('fear') has no plural forms:             	entry	(Gender Fem)		"furcht" "furcht" "frcht"		deleted-forms	(Num PL)                                                                                                  ×     Example 10.3 Deleted Forms ÒbisognareÓ             Of the Italian verb "bisognare " ('to be necessary'), the             non-finite forms and the 3rd persons singular and plural             are used, only:             	entry		"bisogn" "bisogn"		deleted-forms	(Person 1st)				(Person 2nd)                                                                                                  ×     All wordforms having in their wordform features the feature(s)      specified under "deleted-forms " are deleted from the      inflectional paradigm. Therefore, it is usually sufficient to      specify, e.g.:         ¥  only the feature (Num PL) for the deletion of all four             plural forms of a German noun paradigm.         ¥  only the features (Person 1st) and (Person 2nd) to             delete the 1st and the 2nd persons singular AND plural             in ALL modes and tenses of an Italian verbal paradigm.           11. Daughter Rules      A daughter rule is a WFRule specialization connected with a fully      specified WFormative   .      Daughter rules allow you to formulate general WFRules and to      specialize them according to the idiosyncrasies of particular      WFFormatives.         ¥  Particular WFFormatives can attach to entries of             certain inflectional classes, only             => specialization of the source specification.         ¥  Particular WFFormatives can cause certain             morphographic modifications occurring only with them             => specification of specific Wordformation Spelling             Rules         ¥  Particular WFFormatives can determine the inflectional             class and/or certain entry features (e.g. gender) of the             derivative             => specialization of the target specification.      The following items will be treated below:         ¥  Specification of a Daughter Rule         ¥  Constraints         ¥  Examples           11.1. Specification of a Daughter Rule      Like ÒsimpleÓ WFFormatives, WFFormatives with a WFRule      specialization are specified in a leave node of the wordformation      tree   , in the same wordformation unit   as the general ÒparentÓ      rule.      Note that ÒsimpleÓ WFFormatives and WFFormatives with a      WFRule specialization may not be specified in the same window.      Full specification of a WFRule specialization (steps in square      brackets are optional; cf. below: Constraints):      1) keyword: fully specified WFFormatives     2) Newline      3) lexical string of the WFFormative      4) white space      5) surface string(s) of the WFFormative      6) [tab      7) WFCat feature(s)]      8) Newline      9) WFRule name of the parent WFRule. The ÒparentÓ rule must be      unambiguously specified.      10) Newline      ¥ Source Specialization      11) [keyword: source     12) Newline      13) source IRule specification   ; optionally with entry feature      constraint   or feature propagation   ]      ¥ WFRule-WFSRule Specification      14) [Newline      15) WFRule-specific WFSRule   ].      ¥ Target Specialization      16) [Newline      17) keyword: target     18) Newline      19) target IRule specification   ; optionally with individually      added features   ].      ¥ Entry Specification      20) Newline      21) keyword: entries     22) one or more source constraints   .      To specify another daughter rule in the same window, repeat the      relevant steps of steps 2 to 22.      11.2. Some Constraints              ¥  A WFRule specialization (= daughter rule) has three             optional parts:                ¥  source specialization (steps: 11-13)                ¥  WFRule-WFSRule specialization (step 15)                ¥  target specialization (steps 17-19)             At least one of these three optional parts must be             contained in a WFRule specification.         ¥  Fully specified WFFormatives with WFRule             specializations and the corresponding ÒparentÓ WFRules             must be specified in the same wordformation unit   .         ¥  WFRules that match fully specified WFFormatives with             a WFRule specialization may not have source             constraints   . Source constraints must be specified             with the daughter rules.         ¥  If there is a target specialization in a daughter rule, it             may specialize only the specification of individually             added features   and the target IRule   .             The target IRule may only be specialized when the             parent WFRule has a wildcard IRule   as target IRule and             no IRule propagation   .             Individually target added features may only be specified             when they are disjoint with the union of the propagated             features and the individually target added features             specified in the parent WFRule.           11.3. Examples           Example 11.1 Daughter Rule: Italian Noun-To-Noun Suffixing             The general mechanism attaches a derivational noun             suffix to a noun stem. The inflectional class and the             gender of the derivatives, however, are determined by             the suffix:             	Suffix:				"-ari(o)"	Inflectional Class Derivative:	+o/+i-class	Gender Derivative:		masculine	Basis, e.g.:			"biblioteca"	Derivative Sing/Plur:		"bibliotecari-o/bibliotecar-i"	Suffix:				"-eri(a)"	Inflectional Class Derivative:	+a/+e-class	Gender Derivative:		feminine	Basis, e.g.:			"pizza"	Derivative Sing/Plur:		"pizzeri-a/pizzeri-e"                        If a WFRule (RWFRule N-To-N.Suffixing) combines a noun             stem with a N-To-N-suffix, and the the target IRule is             specified as a wildcard-IRule   , the suffixes must be             specified with a WFRule specialization of the following             kind:             Figure 11.1 Target Specialization                                                                                                  ×     Example 11.2 Daughter Rule: German Suffixing with Ò-inÓ             German derivation of feminine nouns from masculine             nouns by suffixing with the suffix "in ". Source entries             must be masculine nouns, i.e. noun entries with the             entry feature (Gender Masc). The derivatives are all             feminine, i.e. the feature (Gender Fem) can be attributet             automatically as a target added feature. E.g.             	linguist (Gender Masc)	>	linguistin (Gender Fem)	doktor (Gender Masc	>	doktorin (Gender Fem)	tiger (Gender Masc)	>	tigerin (Gender Fem)                        IF a WFRule (RWFRule N-To-N.Suffixing) combines a             noun stem with a N-To-N-suffix, and the the target             IRule is specified as a wildcard-IRule, the suffix "in "             must be specified with a WFRule specialization of the             following kind:             Figure 11.2 Source and Target Specialization                                                                                                  ×     Example 11.3 Daughter Rule: English adjective prefixing with      the prefix ÒinÓ             The prefix "in " has some morphophonological variants:             	"il" before "l"			in + legal = illegal	"im" before "b", "m", "p"	in + possible = impossible	"ir" before "r"			in + regular = irregular                        These morphophonological modifications can be             formalized in a daughter rule connected with the prefix             "in " (other solutions are possible). Given a WFRule             (Adj-To-Adj.Prefixing) that combines a prefix with an             adjective stem into a new adjective stem of the same             inflection class, the prefix "in " could be specified as             follows:             Figure 11.3 WFRule-WFSRule specialization                                                                                                  ×          12. Document Window      Whenever you load a WM-Database, the corresponding document      window is displayed.      Figure 12.1 Document Window ÒGerman-StBÓ     The document window is a dialogue window containing several      buttons that give you access to the different parts of the      linguistÕs interface. Click the buttons to open them. The 'title      bar' indicates the name of the database you are working in or      just looking at.      The document window is subdivided in three parts.      First row:         ¥  'browser': opens the General Entity Browser           ¥  'messages': opens the message window        The eight buttons under the title "Word Manager " open the      different subparts of the WM-formalism:         ¥  'lex char': opens the Lexical Character Set           ¥  'surf char': opens the Surface Character Set           ¥  'feat dom': opens the window Feature Domains           ¥  'feat dep': opens the window Feature Dependencies           ¥  'inflection': opens the window Inflection in which you             organize and specifiy the Inflection Rules   and             Inflection Formatives   . See Inflection Tree   .         ¥  'wordform': opens the window Wordformation, in which             you organize and specifiy the Wordformation Rules   and             Wordformation Formatives   . See Wordformation Tree   .         ¥  'spelling': opens the Spelling Rule window in which the             General Spelling Rules   are specified.         ¥  'WM test': opens the Word Manager Test window. This is             a text window not used by Word Manager. It is meant to             be used for test purposes (e.g. to open a particular             lexeme browser   ) and as a kind of notepad for the             linguist to list the hard-coded example entries               specified in the database.      Under the title Phrase Manager there are another 6 buttons.      Phrase Manager is an extension of the system that will not be      treated in this document.      13. Entry      An entry is the instantiation of an Inflection Rule   , generated      by the firing of an Inflection Rule. In most cases, the notion of      entry is equivalent to the notion of lexeme   .      For the specification of an entry, cf. entry specification   .      13.1. Simple Entry      A simple entry is an entry created by the direct firing of an      Inflection Rule   . Usually, it will be a morphological simplex. Cf.      Complex Entry   .      13.2. Complex Entry      A complex entry is an entry created by the indirect firing of an      Inflection Rule, where "indirect " means that it is fired by the      application of a Wordformation Rule   . Compounds and      derivatives are typical complex entries. Cf. Simple Entry   .      13.3. Hard Coded Entry      Hard coded entries are entries that are specified by the linguist      in the rule specification (see entry specification   , cf.      Lexicographer Entries   ).      The functions of hard coded entries are:         ¥  example entries: During compilation, every rule             specified in the WM-database is executed so that many             of the possible syntactic and semantic errors that             might have been made in the rule specification can be             spotted before the database is made available to the             lexicographer. As a consequence, the linguist must             include hard coded entries so that each rule can be             fired.         ¥  irregular entries: Irregular Inflection Rules ( IIRules   )             and Irregular Wordformation Rules ( IWFRules   ) are not             accessable from the lexicographerÕs interface.             Therefore, entries belonging to an irregular inflection             class and those formed by an irregular wordformation             process must be inserted into the database as hard             coded entries.           13.4. Lexicographer Entry      A lexicographer entry is an entry made through the application of      the Lexicographer Entry commands in the WordManager menu. In      contrast to hard coded entries   , they are no part of the rule      specification.      When a database is compiled, the Lexicographer Entries are      deleted. Therefore, they must be saved with the 'Export      Lexicographer Entries' command in the server and, after      compilation, re-importet with the 'Import Lexicographer Entries'      command in the server.      13.5. Fictional Entry      Fictional entries have the same status as normal entries   except      that they are marked. Interfaces can be equipped with functions      differentiating fictional entries from normal ones, e.g.      suppressing them.      Fictional entries are used, e.g.         ¥  for 'families' of words that are related by derivational             rules, but for which the common base form is missing.             E.g. the German prefixed verbs "ausstatten ", "bestatten             ", "erstatten ", "gestatten ", where the base verb             "statten " does not exist in modern language use.         ¥  when intermediate derivational states are missing. E.g.             the Italian adjective "immancabile " (= prefix "in " +             verb stem "manc " + suffix "abile "), where neither             "immancare " nor "mancabile " are Italian words and             where we cannot speak of a regular parasinthetic             affixation.      In this cases, possible but nonexisting words like "statten " and      "mancabile " that are needed in derivational paradigms can be      specified as fictional entries.      Hard coded entries   can be specified as fictional entries by      using the keyword "fictional-entry " instead of the regular "entry      " in the entry specification   .      Lexicographer entries   can be marked as fictional entries by      clicking the box "Fictional " in the lower left corner of the      Add-Lexicographer-Entries dialogue boxes.      13.6. Entry Specification      In an entry specification, the strings of the underspecified      IFormatives   occurring in the relevant Inflection Rule   are      specified. If necessary, individually added features   and      entry-specific ISRules   can be formulated, too.      The specifiaction of lexicographer entries   is done through a      lexicographer interface or the lexicographer entries commands      in the Edit menu.      The specification of hard coded entries   is done in the in the      corresponding Inflection Rule   window or the corresponding      Wordformation Rule   window, respectively.      To make an entry specification for a hard coded entry, type      (optional steps are in square brackets "[] "):         ¥  1) entry   or    fictional-entry            cf. fictional entry           ¥  2) [tab individually-added-feature(s)   ]         ¥  3) newline         ¥  4) tab lexical string               Note that in wordformation rules the lexical string             must be specified in the form as it will be inserted into             the target IRule, i.e. as it is after the application of ALL             WFSRules           ¥  5) white-space surface string                  ¥  at least one surface string in Inflection Rules                ¥  NO surface strings in Wordformation Rules                ¥  all possible surface strings of a formative                    must be specified with the simple entry   in                    the Inflection Rule, i.e. including the surface                    forms the formative can have in complex                    entries   (e.g. for German "Frau > Fru-lein " the                    surface string "fru " must be specified with                    the simple entry "frau ").                ¥  additional surface strings are added after a                    white-space.                     ¥  6) [tab qualifying-feature-set]             in order to specify unambigously which formative the             strings belong to; only necessary when an IRule contains             more than one underspecified IFormative;             you add the specification of a further underspecified             formative by repeating steps 3) to 6)         ¥  7) [newline         ¥  8) tab deleted forms   ]         ¥  9) [newline         ¥  10) tab entry-specific ISRules   ]         ¥  11) newline           14. Entry Feature Constraint      An entry feature constraint is an optional part of the source      specification   in a wordformation rule.      The entry feature constraint is applied on the entry features   of      individual source-entry. It allows the specification of two      things:         ¥  a feature propagation           ¥  a constraint on the entry features and thus a constraint             on the entries that will match with the source.             E.g.: the German suffix "-in " is used to form feminine             nouns from masculine nouns (e.g. "linguist " masc. >             "linguistin " fem.). It can only be attached to masculine             nouns. This restriction can be formulated with an entry             feature constraint on the gender feature (see example             below).           14.1. Specification of an entry feature constraint      An entry feature constraint is specified on the same line as the      specification of the source IRule:         ¥  source IRule           ¥  tab         ¥  keyword: entry-features        ¥  white space         ¥  entry feature(s)        Example 14.1 Source Constraint: German Suffixing with ÒinÓ             Source constraint of the WFRule for the Suffixing of             German regular masculine nouns with the suffix "-in ":             	source	(RIRule N-Regular)	entry-features (Gender Masc) 		1	(ICat N-Stem)	2	"in"	(WFCat N-Suffix)                        Only regular noun entries with the entry feature (Gender             Masc) can be source entry for the suffixing with "in ".   ×          15. Features      Features are used for the rule and formative specification. They      are declared in the window Feature Domains   .      A feature is an attribute value pair. The first element is called      attribute   , the second element is called value   . Between      attribute and value stands a white space; the attribute value pair      is in round brackets:      Feature = (attribute value)     15.1. feature set      In a feature set, the individual features are not separated from      each other. E.g.:      (Cat N)(Gender Fem)(Num SG)     When two or more features of a feature set share the same      attribute, they can (but do not obligatorily need to) be written in      one pair of brackets:      Open brackets, common attribute, white space, first value, full      stop, second value, [full stop, third value, etc.], close brackets.      E.g.:      Example 15.1 Feature Sets             (RIRule N-Regular)(RIRule o/i) = (RIRule N-Regular.o/i)(ICat A-Stem)(ICat Irreg)(ICat Invar) = (ICat A-Stem.Irreg.Invar)(ICat N-Suffix)(ICat o)(Num PL) = (ICat N-Suffix.o)(Num PL)                                                                                                  ×          15.2. Entry Feature      Entry features are features associated with lexemes   . Together      with the surface string   of the first citation form   , they form      the lexeme identifier   .      The entry feature set consists of to types of features:         ¥  the individually added features   .         ¥  the intersection of the wordform features   of the             wordforms of a lexeme, i.e. the entry features consist             of those wordform features which occur in all             wordforms of a lexeme.             The assumption is, that features that are valid for all             wordforms of a lexeme are valid for the whole lexeme,             too (e.g. (Cat N) is valid for all wordforms of a noun             entry as well as for the whole noun entry).           15.3. ICat Feature      An ICat feature is a feature   with the special, reserved      attribute   "ICat ". ICat stands for Inflectional Category.      When IFormatives   are combined into wordforms   , their lexical      strings and their features are combined. In the resulting feature      set, all ICat features are NOT percolatet, i.e not used for the      construction of the wordform features   .      Consequently, ICat features are typically features that are      primarily used for the organization of the inflection tree   and      for the rule internal distinction of formatives. From the      linguistic point of view, they are not features that express a      grammatical role of a wordform.      Example 15.2 ICat Features             The combination of the two formatives             	"Schlauch" (Cat N)(ICat N-Stem)	"es"	(ICat N)(ICat N-Suffix)(Num SG)(Case Gen)                        results in the wordform             "Schlauches"	(Cat N)(Num SG)(Case Gen)            The ICat Features (ICat N-Stem) and (ICat N-Suffix) are             not percolated to be part of the wordform features.     ×     Apart from their special interpretation as far as percolation is      concerned, ICat features are treated like ordinary features.      15.4. IIRule Feature      An IIRule feature is a feature with the special, reserved      attribute   "IIRule ". IIRule stands for Irregular Inflection Rule.      IIRule features specify Irregular Inflection Rules   , i.e.      inflection rules that are not accessable for the lexicographer. Cf.      RIRule feature   and inflection tree   .      15.5. Individually Added Feature      Individually added features are entry features   that are      individually associated with lexemes. They typically specify      grammatical functions that cannot be derived from the      intersection of the wordform features   of a lexeme.      An example is the gender attribution with German nouns. The      gender is an inherent property of the noun. This information is      not relevant for inflection, but can play an important role in      wordformation (p.e. the forming of feminine nouns with the      suffix "-in " is possible only with masculine nouns; e.g. linguist      -> linguistin).      Therefore, it is desirable to have a gender feature associated      with each noun. Since gender is not (or only partially) related to      inflectional categories, it must be associated with a lexeme as      individually added feature.      15.5.1. Specification of individually added features      ¥ The specifiaction of individually added features is done within      the entry specification   . The features are added on the same      line as the keyword "entry ", separated from it by a tab.      Example 15.3 Individually Added Feature (Gender Fem)             The German noun entry "Frau " with the individually             added feature (Gender Fem):             	entry	(Gender Fem)	"Frau" "Frau" "Fru"                                                                                                  ×     ¥ In wordformation rules, individually target added features can      be specified to be added automatically to each entry formed by      the rule. E.g. in the wordformation rules for German nouns formed      with the suffixes "-in ", "-ung ", "-heit ", the gender feature can      be added automatically, since these derived nouns are always      feminine.      Such an automatic attribution of individual added features is      specified in the target specification   of the WFRule, on the same      line as the keyword "target ", tab, "added-features ", white      space, individually added feature(s). E.g.:      Example 15.4 Individually Target Added Feature                         target	added-features (Gender Fem)                         ×          15.6. IWFRule Feature      An IWFRule feature is a feature with the special, reserved      attribute   "IWFRule ". IWFRule stands for Irregular      Wordformation Rule.      IWFRule features specify Irregular Wordformation Rules   , i.e.      wordformation rules that are not accessable for the      lexicographer. Cf. RWFRule feature   and wordformation unit   .      15.7. RIRule Feature      An RIRule feature is a feature with the special, reserved      attribute   "RIRule ". RIRule stands for Regular Inflection Rule.      RIRule features specify Regular Inflection Rules   , i.e. inflection      rules defining open morphological classes. Consequently, they      are accessable for the lexicographer.      Cf. IIRule feature   and inflection tree   .      15.8. RWFRule Feature      An RWFRule feature is a feature with the special, reserved      attribute   "RWFRule ". RWFRule stands for Regular      Wordformation Rule.      RWFRule features specify Regular Wordformation Rules   , i.e.      wordformation rules defining open, productive wordformation      processes. Consequently, RWFRules are accessable for the      lexicographer.      Cf. IWFRule feature   and Wordformation Unit   .      15.9. WFCat Feature      A WCat feature is a feature with the special, reserved attribute        "WFCat ". WFCat stands for Wordformation Category.      WFCat Features are used for the organization and the      specification of the wordformation tree   and the wordformation      formatives   .      15.10. Wordform Feature      Wordform features are features   that are associated with a      wordform   . When IFormatives   are combined into wordforms,      their strings and their qualifying features are combined. A      wordform is thus a combination of the strings and the feature      sets of its formatives.      Basically, wordform features are the feature set   resulting from      this combination. Since they should contain only features      indicating grammatical roles (gender, number, mode, person,      etc.), the ICat features   are not used for the construction of the      wordform features.      Example 15.5 Wordform Features             The combination of the two formatives             	"Schlauch" (Cat N)(ICat N-Stem)	"es"	(ICat N)(ICat N-Suffix)(Num SG)(Case Gen)                        results in the wordform             "Schlauches"	(Cat N)(Num SG)(Case Gen)            The ICat Features (ICat N-Stem) and (ICat N-Suffix) are             not percolated to be part of the wordform features.     ×          16. Feature Dependency      Feature dependencies are constraints that must be satisfied      within entry feature   sets.      They are expressed in the window Feature Dependencies. The      window is opened by clicking the 'feat dep' button in the      document window   . Their syntax is simple.      Example 16.1 Feature Dependency                         (Cat N)		demands		Gender                                            ×     The first feature specifies the condition under which the      constraint must be applied, the attribute   (here: 'Gender')      specifies the constraint which must be satisfied. Inbetween, you      type: tab, the keyword "demands ", tab.      The above example demands that all entry feature sets      containing the feature (Cat N) comprise a feature with the      attribute 'Gender'.      It does not matter, whether the expected feature is attributed by      a rule or as an individually added feature   , as long as the      condition formulated in the feature dependecy is satisfied.      17. Feature Domains      The feature domains window contains the declaration of all      features   used in the database. It is a lists all attributes   with      their possible values   .      The feature domains window is opened by clicking the 'feat dom'      button in the document window   .      The declaration of features in the feature domains can be done      manually. An easier way , however, is using the 'Check Syntax'      command in the Edit Menu. See Syntax Check. "        18. Feature Propagation      A feature propagation is a kind of entry feature constraint   . A      feature propagation will copy the entry features   from the      source entry to the target entry. This propagation is particularly      useful for the 'transfer' of individually added features   .      E.g. Most prefixed Italian nouns have the same gender as the base      noun ( "direttore " masc. > "vicedirettore " (masc.); "direttrice "      fem. > "vicediretrice " fem.). This inheritance can be expressed by      a feature propagation (see example below).      18.1. Specification of an entry feature propagation      A feature propagation is specified on the same line as the      specification of the source IRule:         ¥  source IRule           ¥  tab         ¥  keyword: entry-features        ¥  white space         ¥  (attribute >)            The the attribute   indicates the feature class that has             to be propagated, the value   is replaced by "> ".      Example 18.1 Feature Propagation: Prefixing of Regular Italian      Nouns                         	source	1	(WFCat Prefix)	(RIRule N-Regular)	entry-features (Gender >)		2	(ICat N-Stem)                                                                                                  ×     The gender feature of the source entry will be propagated as      gender feature of the target entry.      19. Formative      A formative is a distributional segment of a wordform   .      Inflection rules combine formatives into wordforms and      paradigms. Wordformation rules combine formatives into new,      complex formatives.      A formative consists of the following parts:         ¥  a lexical string           ¥  all relevant surface strings           ¥  at least one qualifying feature        There are several kinds of formatives:         ¥  fully specified IFormatives           ¥  underspecified IFormatives           ¥  fully specified WFFormatives           ¥  underspecified WFFormatives             19.1. Complex Formative      A complex formative is defined as a formative   which has been      instantiated by the indirect firing of an IRule, i.e. its string      specification is the result of the firing of a wordformation rule.      In consequence, all complex formatives are instantiated      underspecified IFormatives   or instantiated underspecified      WFFormatives   .      Cf. simple formative        19.2. Fully Specified IFormative      Fully specified IFormatives are Inflection Formatives   that are      entirely specified in the rule specification, i.e. both the strings      and the qualifying features are defined in the inflection tree   .      Typical fully specified IFormatives are inflectional affixes,      because they constitute a closed class of elements. Open class      elements like stems are typically defined as underspecified      IFormatives   .      19.2.1. Specification of fully specified IFormatives      Fully specified IFormatives are specified in the Inflection      Window, in a formative leaf node of the inflection tree   (see      inflection unit   ).      In the formative window, the following must be specified (steps      in square brackest are optional):         ¥  1) keyword: fully specified IFormatives        ¥  2) Newline         ¥  3) lexical string   of the formative         ¥  4) white space         ¥  5) surface string   of the formative (if more than one,             separated from the first one by a white space; note that             all possible surface string variants of a fully specified             IFormative must be specified here, including the             surface variants the formative may have in further             derivations).         ¥  [6) tab         ¥  7) local feature(s)   ]             Note that only local features must be specified here. By             local features we mean features that are distinctive at             this level of the inflection tree. The entire feature set             of a formative consists of the union of all features             specified on the way from the root to the node, except             the features with the attribute   "RIRule " or "IIRule ".             When there is no need to specify distinctive local             features, the steps 6) and 7) can be left out.         ¥  8) Newline      To add more formatives in the same window, repeat steps 3) to      8).      IFormatives can also be specified in a IFormative group   .      19.3. Fully Specified WFFormative      Fully specified WFFormatives are Wordformation Formatives        that are entirely specified in the rule specification, i.e. both the      strings and the qualifying features are defined in the      wordformation tree   .      Typical fully specified WFFormatives are derivational affixes,      because they constitute a closed class of elements. Open class      wordformation elements are specified as underspecified      WFFormatives   .      Below, the specification of ÒsimpleÓ WFFormatives is presented.      For WFFormatives with a WFRule specialization, see daughter      rules   .      19.3.1. Specification of fully specified WFFormatives      Fully specified WFFormatives are specified in the Wordformation      Window, in a formative leaf node of the wordformation tree (cf.      wordformation unit   ).      In the formative window, the following must be specified (steps      in square brackest are optional):         ¥  1) keyword: fully specified WFFormatives        ¥  2) Newline         ¥  3) lexical string   of the formative         ¥  4) white space         ¥  5) surface string   of the formative (if more than one,             separated from the first one by a white space; note that             all possible surface string variants of a fully specified             WFFormative must be specified here).         ¥  [6) tab         ¥  7) local WFCat feature(s)   ]             Note that only local features must be specified here. By             local features we mean features that are distinctive at             this level of the wordformation tree. The entire feature             set of a formative consists of the union of all WFCat             features specified on the way from the root to the node.             When there is no need to specify distinctive local             features, the steps 6) and 7) can be left out.         ¥  8) Newline      To add more formatives in the same window, repeat steps 3) to      8).      WFFormatives can also be specified in a WFFormative group   .      19.4. IFormative      IFormatives are formatives   that are used by inflection rules        to build up wordforms and paradigms. They are specified in the      inflection tree   , either as fully specified IFormatives   or as      underspecified IFormatives   .      'IFormative' stands for 'Inflection Formative'.      19.5. IFormative Group      IFormatives   can be specified in a IFormative group. A feature      set common to a list of formatives is taken on a separate line at      the beginning of the group. The members of the group are      indented by one tab.      Both fully specified IFormatives   and underspecified      IFormatives   can be specified in IFormative groups. The syntax      for the specification of the single formatives in the group is the      same as for ungrouped formatives, with the exception that the      single formatives of a group must be indented one tab.      The figure shows the example of a specification of Dutch verb      suffixes:      Figure 19.1 IFormative groups     The advantage of using IFormative groups over specifying the      formatives in separate formative windows is, here, that all      suffixes belonging to a specific inflection unit can be kept in a      single window.      Note that IFormative groups do not allow ungrouped IFormatives      in the same window.      19.6. Simple Formative      A simple formative is defined as a formative whose string is      'directly' specified, i.e. it is either a fully specified IFormative        , a fully specified WFFormative   , or a formative which has been      instantiated by the direct firing of an Inflection Rule.      Cf. complex formative   .      19.7. Underspecified IFormative      An underspecified IFormative is an Inflection Formative   for      which only the features are specified within the rule      specification.      An IRule is fired, when the strings of all underspecified      IFormatives defined in it are specified.      The corresponding strings are specified when an entry is      specified, either in the entry specification of a hard coded entry        or with the specification of a lexicographer entry   , or as the      result of the application of a wordformation rule.      Typical underspecified IFormatives are stems, because they      constitute an open class of elements. Closed class elements like      inflectional affixes are typically defined as fully specified      IFormatives   .      19.7.1. Specification of Underspecified IFormatives      Underspecified IFormatives are specified in the Inflection      Window, in a formative leaf node of the inflection tree   (cf.      inflection unit   ).      In the formative window, the following must be specified (steps      in square brackest are optional):         ¥  1) keyword: underspecified IFormatives        ¥  2) Newline         ¥  3) Underscore ( "_ ")             The underscore is a placeholder for the strings that will             be specified with the entry specification           ¥  [4) tab         ¥  5) local feature(s)   ]             Note that only local features must be specified here. By             local features we mean features that are distinctive at             this level of the inflection tree. The entire feature set             of a formative consists of the union of all features             specified on the way from the root to the node, except             the features with the attribute   RIRule or IIRule.             When there is no need to specify distinctive local             features, the steps 4) and 5) can be left out.         ¥  6) Newline      To add more formatives in the same window, repeat steps 3) to      6).      IFormatives can also be specified in a IFormative group   .      19.8. Underspecified WFFormative      An underspecified WFFormative is an Wordformation Formative        for which only the features are specified within the rule      specification.      The corresponding strings are specified when an entry is      specified, either in the entry specification of a hard coded entry        or with the specification of a lexicographer entry   .      Typical underspecified WFFormatives are bound stems in      neoclassical compounds, because they constitute an open class      of elements. E.g. the bound stems "morf(o) " and "log(o) " in      "morfology " (cf. "Bound Stems " in the second half of Section      5.2.1. of the Word Manager book; printed version p.159-162).      Closed class elements like inflectional affixes are typically      defined as fully specified WFFormatives   .      19.8.1. Specification of Underspecified WFFormatives      Underspecified WFFormatives are specified in the Wordformation      Window, in a formative leaf node of the wordformation tree   (cf.      wordformation unit   ).      In the formative window, the following must be specified (steps      in square brackest are optional):         ¥  1) keyword: underspecified WFFormatives        ¥  2) Newline         ¥  3) Underscore ( "_ ")             The underscore is a placeholder for the strings that will             be specified with the entry specification           ¥  [4) tab         ¥  5) local WFC feature(s)   ]             Note that only local features must be specified here. By             local features we mean features that are distinctive at             this level of the wordformtion tree. The complete             feature set of a formative consists of the union of all             WFCat features specified on the way from the root to             the node.             When there is no need to specify distinctive local             features, the steps 4) and 5) can be left out.         ¥  6) Newline      To add more formatives in the same window, repeat steps 3) to      6).      WFFormatives can also be specified in a WFFormative group   .      19.9. WFFormative      WFFormatives are formatives   that are used by wordformation      rules to instantiate underspecified inflection formatives   of      new complex entries   . They are specified in the wordformation      tree   , either as fully specified WFFormatives   or as      underspecified WFFormatives   .      'WFFormative' stands for 'Wordformation Formative'.      19.10. WFFormative Group      WFFormatives   can be specified in a WFFormative group. A      feature set common to a list of formatives is taken on a      separate line at the beginning of the group. The members of the      group are indented by one tab.      Both fully specified WFFormatives   and underspecified      WFFormatives   can be specified in WFFormative groups. The      syntax for the specifiaction of the single formatives in the group      is the same as for ungrouped formatives, with the exception that      the single formatives of a group must be indented one line.      The figure shows the example of a specification of Italian      derivational suffixes (noun-to-adjective derivation):      Figure 19.2 WFFormative groups     The advantage of using WFFormative groups over specifying the      formatives in separate formative windows is, here, that affixes      belonging to a specific wordformation class can be kept in a      single window.      Note that WFFormative groups do not allow ungrouped      WFFormatives in the same window.      20. Generation History      see "Information in a Lexeme Browser " under Lexeme Browser   .      21. IIRule      IIRule stands for Irregular Inflection Rule   . IIRules are      characterized by the obligatory attribute   "IIRule " in their Rule      name. E.g.: (IIRule V-Irregular).      Besides RIRules   (Regular Inflection Rules), Word Manager has      IIRules. IIRules define the inflectional paradigms of irregularly      inflecting lexemes. Since irregular lexemes are a closed class,      the IIRules are not presented as an option for the direct      classification of new words to the lexicographer.      Consequently, all irregular entries must be specified by the      linguist within the IIRule as hard coded entries   . Exceptions are      irregularly inflecting entries that are derived by a regular      wordformation rule ( RWFRule   ). They can be specified      'indirectly' by the lexicographer through the application of a      RWFRule.      Typical examples of IIRules are IRules for irregular verbs      (English: "go "; German: "fahren "; Italian "fare "). Typical      examples of entries into an IIRule formed by a RWFRule are      prefixed irregular verbs (English: "undergo "; German: "wegfahren      "; Italian "disfare ").      Cf. IRule specification   .      22. Inflectional Paradigms      The inflectional paradigm of a lexeme is defined as the set of      wordforms   of the lexeme.      In Word Manager, the representation of inflectional paradigms is      subdivided in subparadigms. Subparadigms correspond by default      to the set of wordforms defined by one line in the wordform      specification   .      When this default representation is not adequat, you can      optionally define another division into subparadigms in the IRule      specification   .      The paradigm definition starts underneath the wordform      specification   on a new line:         ¥  keyword: paradigms        ¥  Newline         ¥  Common feature(s) of the wordforms of the first             subparadigm         ¥  Newline         ¥  Common feature(s) of the wordforms of the second             subparadigm         ¥  Newline         ¥  etc.      Tip: It is possible to specify only one 'subparadigm'. This is      usefull, when you do not want an inflectional paradigm to be      divided into subparadigms, even though the wordform      specification comprises more than one line. Cf. Tutorial, Section      7.2.6.2        The example shows a possible subdivision into subparadigms for      Dutch nouns:      Example 22.1 Paradigms: Dutch Verbs                         	paradigms	(Mode Infinitive)	(Mode Ind)(Tense Pres)	(Mode Ind)(Tense Past)	(Mode Imperative)	(Mode Participle)                                                                                                  ×     All wordforms in the paradigm of a Dutch verb having, e.g., the      features (Mode Ind) and (Tense Pres) in their wordform features        will be united in one subpardigm when represented in the      paradigm view of, e.g., the lexeme browser   .      23. Inflection Rule      See IRule        Irregular Inflection Rule see IIRule        Regular Inflection Rule see RIRule        Inflection Rule specification see IRule specification   .      24. Inflection Tree      For handling of the tree editor see tree editor   .      In the Inflection tree, IRules   and IFormatives   are specified      and hierarchically structured. By means of features   , the tree is      structered into inflection units   within which the IRules operate      on the IFormatives.      The rules and the formatives are specified in the leave nodes.      There are different types of features:         ¥  RIRule features   and IIRule features   = features with             the attribute   "RIRule " or "IIRule ".             Cf. inflection unit   .         ¥  ICat features   = features with the attribute "ICat ".         ¥  Other features = features with any attribute except the             attributes "RIRule ", "IIRule ", "ICat ".      The leave nodes for the specification of IRules   must have an      RIRule or an IIRule feature. The complete name of an IRule is the      sum of all RIRule features or IIRule features, respectively,      encountered on the way down from the root node to the leave      node.      The leave nodes for the specification of IFormatives   must have      an ICat feature or a "other " feature. The complete feature set of      an IFormative is the sum of all features, except "RIRule " and      "IIRule " features, encountered on the way down from the root      node to the leave node, plus the features specified directly with      the formative.      24.1. Some Constraints On The Tree Organization      General:         ¥  On each node level, the local feature sets qualifying             inflection units or leave nodes must be distinct, i.e. the             sets must be pairwise non-identical and no set may be a             subset of another set.         ¥  A combined feature set of an inflection unit or a leave             node may not have redundant features, i.e. each feature             on the path from the root to a node must be unique.      IRule features:         ¥  Each complete IRule name must be distinct, i.e.             complete IRule names must be pairwise non-identical             and no complete IRule name may be a subset of another             complete IRule name.         ¥  A complete IRule name may not contain redundant             features, i.e. each IRule feature on the path from the             root to the leave node must be unique.      IFormative features:         ¥  On each node level (this includes the features specified             directly with the formatives), the feature sets             qualifying formatives must be distinct, which means             that the sets must be pairwise non-identical and no set             may be a subset of another set.         ¥  Combined qualifying feature sets of formatives (this             includes the features specified directly with the             formatives) may not contain redundant features i.e. each             feature on the path from the root to a node must be             unique.         ¥  None of the combined qualifiying feature sets of             formatives (this includes the features specified             directly with the formatives) may be a subset of any             other.           25. Inflection Unit      An inflection unit is a construct that groups a set of IRules   and      IFormatives   into an entity. The major charactersitic of an      inflection unit is that the IRules specified within it operate      exclusively over the IFormatives specified within it.      The specification of inflection units allows you to factor your      specification into entities within which you can work 'locally'.      Furthermore, they faciliate the compilation   in larger databases:      When you choose the 'Run Compiler' command in the Edit menu,      only the inflection units that have been modified since the last      compilation are recompiled.      The beginning of an inflection unit is marked by a RIRule feature        or an IIRule feature   , where the first marks a RIRule unit and      the second an IIRule unit. All IRules and IFormatives specified at      the beginning level and the underlying levels of the subtree      belong to the same inflection unit. First, the IRules   are      specified, followed by the IFormatives   .      Example 25.1 Inflection Units: Italian Verb Subtree                         	(Cat N)		(ICat N-Regular)			(RIRule o/i)			(RIRule a/e)			(RIRule e/i)			(ICat N-Stem)			(ICat N-Suffix)				(Num SG)				(Num PL)		(ICat N-Irregular)			(IIRule Irreg_Stem)			(IIRule Defective)				(IIRule No_SG)				(IIRUle No_PL)			(ICat N-Stem)			(ICat N-Suffix)                                                                                                  ×     The example shows a possible (incomplete) subtree for Italian      noun inflection. It comprises two inflection units:         ¥  a RIRule unit for regular nouns, initiatet by the (RIRule             o/i)         ¥  an IIRule unit for irregular nouns, initiated by the             (IIRule Irreg_Stem)           26. IRule      IRule stands for Inflection Rule. As the name indicates, IRules      define inflectional morphology.      IRules combine IFormatives   into wordforms   and group these      wordforms to inflectional paradigms   . One IRule describes one      inflectional class.      There is a distinction between RIRules   for regular inflectional      classes and IIRules   for irregular inflectional classes. As far as      the IRule specification   is concerned, there is only one      difference between these two types:      RIRules must obligatorily have an RIRule feature   name, whereas      IIRule must obligatorily have an IIRule feature   name.      The full name of an RIRule is the sum of all the RIRule features      encountered between the root node and the RIRule node, i.e. the      node in which the RIRule is specified.      The full name of an IIRule is the sum of all the IIRule features      encountered between the root node and the IIRule node, i.e. the      node in which the IIRule is specified.      The full name of an IRule must be distinct for each IRule.      Note, that RIRules and IIRules must be specified in separate      inflection units   .      27. IRule Propagation      An IRule propagation is a subpart of a source   specification in a      WFRule.      An IRule propagation will copy the IRule of the source entry to be      the IRule of the target entry, i.e. the source IRule becomes the      target IRule. This allows generalizations of WFRules, e.g. with      prefixing and compounding.      E.g. in German, prefixed words and compounds belong in most      cases to the same inflection class as their second element. E.g.:      "fahren " (irreg. verb: "fuhr/gefahren ") => "befahren " (irreg verb:      "befuhr/befahren ");      "Buch " (plur. "Bcher ") => "Schulbuch " (plur. "Schulbcher ")      This type of IRule inheritance can be expressed by an IRule      propagation (see example below)      cf. feature propagation        27.1. Specification of an IRule propagation      An IRule propagation is specified on the same line as the source      IRule specification   :         ¥  source IRule specification         ¥  white space         ¥  type "> "      Example 27.1 IRule Propagation: German Noun Compounding                         	source	(Cat N)		(?IRule ?)		1	(ICat N-Stem)	(Cat N)		(?IRule ?) >		2	(ICat N-Stem)                                                                                                  ×     The IRule of the second element will be propagated as target      IRule, i.e. the compound will be inserted into the same IRule as      the second base noun.      Note, that when you specify an IRule propagation, the target      IRule depends on the IRule of the source entry.      Therefore - in order to avoid any contradictory specifications -      the target IRule specification   must obligatorily be specified as      a wildcard rule (?IRule ?)     28. IRule Specification      The specification of an IRule   takes place in the window      connected to a RIRule or an IIRule leaf node in the inflection tree        . A window is opended by double-clicking the leaf node.      The syntax for the specification of RIRules   and IIRules   is      exactly the same.      An IRule specification comprises the following parts (items in      square brackets are optional):         ¥  specification of the citation form(s)           ¥  specification of the wordforms           ¥  [specification of subparadigms   ]         ¥  [ IRule-specific spelling rules   ]         ¥  entry specification             29. IWFRule      IWFRule stands for Irregular Wordformation Rule   . IWFRules are      characterized by the obligatory attribute   "IWFRule " in their      rule name. E.g.: (IWFRule Adv+Prep).      Besides RWFRules   (Regular Wordformation Rules), Word Manager      has IWFRules. IWFRules define irregular, unproductive      wordforming processes that produced a limited number of      derivatives.      Since IWFRules define unproductive processes, they are not      presented as an option for the classification of new words to the      lexicographer.      Consequently, all 'irregularly' formed derivatives must be      specified by the linguist within the IWFRule as hard coded      entries   .      30. Lexeme      A lexeme is the instantiation of an Inflection Rule   , generated      by the firing of an Inflection Rule. In most cases, the notion of      lexeme is equivalent to the notion of entry   . In traditional      dictionaries, a lexeme is represented by one headword that      stands for all wordforms   derivable from it by inflection.      A lexeme is an inflectional paradigm   with its name. The name      of a Word-Manager-Lexeme is the Lexeme Identifier   .      31. Lexeme Identifier      The lexeme identifier is the name of a lexeme. It consists of:         ¥  the surface string   of the first citation form           ¥  the entry features   of the lexeme (i.e. the intersection             of the wordform features   of the wordforms of the             lexeme plus the individually added features   .      The lexeme identifier identifies the lexeme in the database.      Therefore, it must be unique. When two entries have the same      lexeme identifier, the system warns the linguist with the      message that the lexeme "xy " is not unique. In this cases, the      linguist has to specify additional features to distinguish them.      E.g. the English verbs "ring " ( "ringed ", "ringed ") and "ring " (      "rang ", "rung "), could both result to have the lexeme identifier      	"ring" (Cat V)     When this is the case, the linguist must distinguish them with      individually added features   . E.g.      	"ring"	(Cat V)(Conjug Weak)	"ring"	(Cat V)(Conjug Strong)          (Conjug Strong) and (Conjug Weak) are the individually added      features. Note, that individually added features like all other      features must be declared in the feature domains   .      32. Lexical Character Set      The lexical character set window lists all characters that are      used for the representation of strings in the database. The      window is opended by clicking the 'lex char' button in the      document window   .      In the lexical character set, all characters must be declared that      are used for the representation of lexical strings   . The lexical      character set must be a superset of the surface character set   .      For the specification of lexical characters see character sort      order   and character sequence sort order   .      33. Lexical String      Lexical strings are used for linguistically motivated      abstractions of surface strings   . They allow the use of special      lexical characters like morpheme boundaries (e.g. "+ ", "# ") or      morphophonetic characters (see example below).      Lexical strings are composed of lexical characters. They must be      declared in the lexical character set   .      Lexical strings are transformed into surface strings   by the      application of spelling rules   .      Example 33.1 Lexical Strings: German Umlaut With Plural      Forms                         	SG: "Fuchs"		PL: "Fchse"	('fox')	SG: "Luchs"		PL: "Luchse"	('lynx')                        The lexichal strings of the stems of these two nouns             are             "FUchs" and "Luchs"            A spelling rule transforms in plural forms the "U " into             " " whereas the "u " in the same position remains             unaltered.                                                                       ×          34. Message Window      When compilation has been completed successfully, or when      problems arise during compilation or syntax check, relevant      messages will be displayed in the message window.      Like the WM Test window, the message window can also be used      for test purposes (e.g. to open a lexeme browser   ).      The message window is opened automatically, when WM displays      a message. You can open it manually by clicking the 'message'      button in the document window   .      35. RIRule      RIRule stands for Regular Inflection Rule   . RIRules are      characterized by the obligatory attribute   "RIRule " in their Rule      name. E.g.: (RIRule V-Regular).      In contrast to IIRules   , RIRules define regular inflectional      paradigms, i.e. the paradigms of open lexeme classes.      Consequently, they are accessable for the direct specification of      lexicographer entries   .      Cf. IRule specification   .      36. RWFRule      RWFRule stands for Regular Wordformation Rule   . RWFRules are      characterized by the obligatory attribute   "RWFRule " in their      rule name. E.g. (RWFRule N-Prefixing).      In contrast to IWFRules   , RWFRules define regular, productive      wordforming processes. Consequently, they are accessable for      the specification of lexicographer entries   .      Cf. WFRule specification   .      37. Source      The source is the first part of a WFRule specification   . The      source of a WFRule specifies which formatives out of which      IRules are to be combined when the rule is fired.      The source specification starts with the keyword " source",      followed the specification of the source formatives.      Within the specification of the source formatives, we      distinguish two types of formatives:         ¥  Wordformation formatives ( WFFormatives   ).         ¥  Inflection formatives ( IFormatives   ), i.e. formatives             that are taken from a source entry.           37.1. Specification of WFFormatives as Source     Formatives      The specification starts on a new line. Steps in square brackets      are optional:         ¥  Newline         ¥  digit             The digit is the index representing the source formative             in the target IFormative specification   . For a WFRule             with, e.g. two source elements, the digits "1 " and "2 "             must be used. For an WFRule with three source             elements, the digits "1 ", "2 " and "3 " must be used, etc.             The order of assignment of the digits is arbitrary,             though.         ¥  [tab         ¥  string restriction   ]         ¥  tab         ¥  matching feature (set)             The feature(s) must identify the formative or the             formative class that may be used by the WFRule. The             WFFormatives   must be specified in the same             Wordformation Unit           ¥  Newline           37.2. Specification of a IFormatives as Source     Formatives      The specification starts on a new line. Steps in square brackets      are optional:         ¥  Newline         ¥  source IRule specification               Here, you specify the IRule(s) out of which the source             entries may be taken.         ¥  [tab         ¥  IRule propagation   ]         ¥  [tab         ¥  entry feature constraint   ]         ¥  Newline         ¥  source IFormative specification               Here, you specify which IFormatives are to be taken out             of the source IRule.         ¥  Newline           37.3. Source IFormative Specification      The source IFormative specification is a subpart of the source        specification in a WFRule. It starts on a new line, underneath the      source IRule specification   .      Here, you specify which IFormatives out of the source IRule   is      to be taken to form the new complex entry. Steps in square      brackets are optional:         ¥  Newline         ¥  tab         ¥  digit             The digit is the index representing the source formative             in the target IFormative specification   . For a WFRule             with two source elements, the digits "1 " and "2 " must             be used. For an WFRule with three source elements, the             digits "1 ", "2 " and "3 " must be used, etc. The order of             assignment of the digits is arbitrary though.         ¥  [tab         ¥  string restriction   ]         ¥  tab         ¥  matching feature (set)             The feature(s) must identify the IFormative class that             is to be used by the WFRule.         ¥  Newline      When more than one formative is to be taken out of the same      source IRule, the above steps must be reapeated for each      formative.      37.4. Source IRule Specification (IRule match)      The source IRule specification is a subpart of the source        specification in a WFRule.      Here, you specify the source IRule(s) of a Wordformation Rule,      i.e. the IRules out of which the source IFormatives   are to be      taken to form new complex entries.      The source IRule specification starts on a new line, after the      keyword "source " or after a preceding source formative      specification. It is written on one line, concluded with a      Newline. Optionally, an IRule propagation   and/or an entry      feature constraint   may be inserted on the same line.      There are several possibilities to specify source IRules, all      explained below.      The examples assume an inflection subtree for Verbs (Cat V),      subdivided into regular verbs (RIRule Regular) and irregular      verbs (IIRule Irregular), each with three conjugation classes.      	(Cat V)		(RIRule V-Regular)			(RIRule 1st-Conjug)			(RIRule 2nd-Conjug)			(RIRule 3rd-Conjug)		(IIRule V-Irregular)			(IIRule 1st-Conjug)			(IIRule 2nd-Conjug)			(IIRule 3rd-Conjug)          Example 37.1 Source IRule Specifictions                            ¥  One single IRule is source IRule: You specifiy                    the name of the IRule. A partial name is                    sufficient, as long as the IRule is identified                    unambiguously. E.g. regular verbs of the first                    conjugation class:                    (RIRule V-Regular.1st-Conjugation)   or                    simply                    (RIRule 1st Conjug)                ¥  Two or more individual IRules are source IRule:                    you specify the IRule names separatet from                    each other by the 'or' character " | ". E.g. regular                    and irregular verbs of the 1st conjugation                    class:                    (RIRule 1st-Conjug)|(IIRule 1st-Conjug)               ¥  All IRules belonging to an IRule-subtree are                    source IRule: You specifiy the node name of the                    subtree. E.g. all regular verbs:                    (RIRule V-Regular)               ¥  All IRules belonging to an IRule-subtree with                    the exception of one (or more): You specify the                    node name of the subtree, the 'except'                    character "^ " and the name of the excepted                    IRule. E.g. all regular verbs except the verbs of                    the third conjugation class:                    (RIRule V-Regular)^(RIRule 3rd-Conjug)               ¥  All IRules of two (or more) IRule-Subtrees are                    source IRules. You specify the node names of                    the subtrees, separated from each other by the                    'or' character " | " . Combinations with the                    'except' mode are possible. E.g. all regular                    verbs and all irregular verbs except the latter                    of the 3rd conjugation class: (RIRule V-Regular)|(IIrule V-Irregular)^(IIRule 3rd-Conjug)                ¥  All IRules belonging to an inflection subtree                    that is not initiated by a RIRule or IIRule                    feature. You specify the node name of the                    subtree, tab, (?IRule ?). E.g. all verbs:                    (Cat V)	(?IRule ?)                   This specifiaction, too, can be combined with                    the 'except' mode. E.g. All verbs except the                    irregular verbs of the 3rd conjugation class:                    (Cat V)	(?IRule ?)^(IIRule 3rd-Conjug)                                                                                                  ×          38. Source-Constraint      A source constraint is the part of a WFRule specification   in      which the the hard coded entries   are specified.      At least one source constraint is obligatory for each WFRule.      Exception: WFRules that match WFFormatives with a WFRule      specialization, i.e. WFRules with Ò daughter rules   Ó. In this      case, the source specifications are specified with the Òdaughter      ruleÓ.      A source constraint starts with the keyword      source-constraint      on a new line underneath the target specification   .      Underneath the keyword, you repeat - as it were - the source      specification   of the WFRule. Here, however, the source IRule      and the source formatives must be unambigously defined.      Usually, this means that the name of one particular source IRule      and the lexical strings   of the particular formatives are to be      given.      The syntax of this part of a source constraint is very similar to      the syntax of the source specification   :      For WFFormatives   :         ¥  Newline         ¥  digit (the same digit the formative has in the source             specification)         ¥  lexical string   of the WFFormative         ¥  Newline      For IFormatives   (steps in square brackets are optional):         ¥  Newline         ¥  IRule name         ¥  Newline         ¥  tab         ¥  digit (the same digit the formative has in the source             specification)         ¥  tab         ¥  lexical string   of the IFormative         ¥  [tab         ¥  qualifying-feature (set)]             The indication of the qualifying features of an             IFormative is necessary when more than one formative             is taken out of the same IRule.         ¥  Newline      When all items occurring in the source have been specified in      this manner, you specifiy the actual entry as an entry      specification   .      For each hard coded complex entry, you have to specify a source      constraint.      39. Spelling Rule      Spelling rules are string manipulation rules. They allow the      specification of morphophonological (and other) phenomena      connected with inflection and wordformation, respectively.      There are two general types of spelling rules:         ¥  ISRules   (Inflection Spelling Rules)         ¥  WFSRules   (Wordformation Spelling Rules)      Both ISRules and WFSRules can be         ¥  general spelling rules           ¥  rule-specific spelling rules ( IRule-specific ISRules   or             WFRule-specific WFSRules   )         ¥  entry-specific spelling rules ( entry-specific ISRules               or entry-specific WFSRules        All types of spelling rules can be formulated as 'value' spelling      rules   .      39.1. Entry-specific ISRules      Entry-specific ISRules are inflection spelling rules   that are      applied exclusively on the particular entry they are specified      with (cf. order of spelling rule application   ).      They specify idiosyncratic inflectional phenomena. E.g.: irregular      plural forms: Engl: "tooth/teeth "; Ital: "uomo/uomini "; German:      "atlas/atlanten " etc.      Entry-specific ISRules are specified within the entry      specification   . They start on a new line, after the specification      of the lexical and surface strings of the source entry, or, if      necessary, after the specification of the deleted-forms:         ¥  Newline tab         ¥  keyword: ISRules         ¥  Newline tab         ¥  spelling rule body (see syntax spelling rules   )             When more than one spelling rule has to be specified,             they are added directly underneath the first one (type:             Newline, Tab, second spelling rule body, etc.)         ¥  Newline      Example 39.1 Entry-Specific ISRule             for the irregular Italian noun sing. "uomo " / plur.             "uomini ":             	entry		(Gender M)		"uom" "uom" "uomin"		ISRules		"uom/uomin"	"i" (ICat N-Suffix)(Num PL)                                                                                                  ×     Note, that all surface forms produced by any type of spelling rule      have to be specified with the formative. Here: "uomin ".      39.2. General ISRule and General WFSRule      A general ISRule is an inflection spelling rule   that is applied on      all entries of all inflection classes. A general WFSRule is a      wordformation spelling rule   that is applied on all entries of all      wordformation classes. Exceptions are spelling rule groups   .      Both general ISRules and general WFSRules are specified in the      Spelling Rule Window. You open the window by clicking the      'spelling' button in the document window   .      A general spelling rule consists of a name and a body, both      specified on a new line.      The name is a feature   . The attribute is obligatorily "ISRule "      for ISRules and "WFSRule " for WFSRules. The corresponding      value can be choosen arbitrarily, the only condition being that      every name is unique. It is preferable to choose transparent      names (cf. examples below). Note that in Spelling Rule names      only so-called alphabetic characters   are allowed      For the specification of spelling rule body see syntax of spelling      rules   .      Example 39.2 General ISRule and General WFSRule                         	(ISRule h-insertion)	"(.*c)/\1h" (ICat N-Stem)	"[ei]" (ICat N-Suffix)	(WFSRule Delete_Final_e)	"(.*)e/\1" (ICat N-Stem)	(WFCat Suffix)                                                                                                  ×          39.3. Entry-specific WFSRules      Entry-specific WFSRules are wordformation spelling rules   that      are applied exclusively on the particular entry they are specified      with (cf. order of spelling rule application   ).      They specify idiosyncratic wordformation phenomena. E.g.: Engl.:      modifications of the stem in "private > privacy "; German:      e-insertion with "spontan > spontaneitt "; t-insertion with      "kennen > kenntnis ", etc.      Entry-specific WFSRules are specified in the wordformation rule      specification, between the source-constraint   and the entry      specification   :         ¥  Newline         ¥  keyword: WFSRules         ¥  Newline         ¥  spelling rule body (see syntax spelling rules   )             When more than one spelling rule has to be specified,             they are added directly underneath the first one (type:             Newline, second spelling rule body, etc.)         ¥  Newline      The example shows the source constraint for the V-To-N      Derivation "kennen > kenntnis " with the entry specific WFSRule      for the t-insertion:      Example 39.3 Entry-Specific WFSRule                         	source-constraint	(RIRule V-Irregular.No-Detachable-Prefix)		1	"kenn	2	"nis"	WFSRules	"kenn/kennt" (ICat V-Stem)	"nis" (WFCat Suffix)	entry		"kenntnis"                                                                                                  ×     Note, that all surface forms produced by any type of spelling rule      have to be specified with the formative. Here, the surface string      "kennt " must be specified as a surface form of the base entry,      i.e. as a surface form of the verb stem of the entry "kennen ".      39.4. IRule-specific ISRules      IRule-specific ISRules are inflection spelling rules   that are      exclusively applied on the formatives of entries that are defined      by the inflection rule the ISRule is specified with.      They are used to specify morphophonological or morphographic      phenomena connected with a particular inflectional class. E.g.      German nouns with the feminine forming suffix "-in ": doubling of      the "-n " in final position of the singular when combined with      plural suffix: sing. "studentin ", plur. "studentinnen " ('female      student').      Such a morphographic modification has to be specified for the      corresponding inflectional class only => IRule-specific ISRule.      IRule-specific ISRules are specified within the IRule      specification   , on a new line, underneath the specification of      the wordforms or - when subparadigms   have been specified -      underneath the specification of the subparadigms:         ¥  Newline         ¥  keyword: ISRules         ¥  Newline         ¥  spelling rule body (see syntax spelling rules   )             When more than one spelling rule has to be specified,             they are added directly underneath the first one (type:             Newline, second spelling rule body, etc.)         ¥  Newline           39.5. ISRule      ISRules (Inflection Spelling Rules) are spelling rules   that are      applied within inflection.      When formatives are combined to wordforms, ISRules transform      lexical strings   of the formatives into surface strings   before      these surface strings are concatenated to orthographic      representations of wordforms.      An Inflection Rule ( IRule   ) defines a sequence of formatives      that should be combined into a wordform. Before the string      combination takes place, the entire sequence of ISRules is      applied on the formative sequence, one after the other, in their      order of specification   .      ISRules can be:         ¥  general ISRules           ¥  IRule-specific ISRules           ¥  entry-specific ISRules             39.6. WFRule-specific WFSRules      WFRule-specific WFSRules are wordformation spelling rules        that are exclusively applied on the formatives of entries that are      combined by the wordformation rule the WFSRule is specified      with.      They are used to specify morphophonological or morphographic      phenomena connected with a particular wordformation class. E.g.      prefix "in- " in English or Italian: assimiliation of the "n " to the      initial consonant (b, m, p, l, r) of the following stem:      "in+possible " / "impossible ", "in+legal " / "illegal ", "in+relevant      " / "irrelevant ", etc.      This morphophonological phenomenon has to be specified within      a particular wordformation process only => WFRule-specific      WFSRule.      WFRule-specific WFSRules are specified within the WFRule      specification   , on a new line, between the source   and the      target   specification:         ¥  Newline         ¥  keyword: WFSRules         ¥  Newline         ¥  spelling rule body (see syntax spelling rules   )             When more than one spelling rule has to be specified,             they are added directly underneath the first one (type:             Newline, second spelling rule body, etc.)         ¥  Newline      The example shows a possible specification of a wordformation      rule for prefixing of English adjectives, with some WFSRules for      the prefix "in- ":      Example 39.4 WFRule-Specific WFSRule                         Figure 39.1 WFRule-specific WFSRule                                                                                                  ×          39.7. WFSRule      WFSRules (Wordformation Spelling Rules) are spelling rules        that are applied within wordformation.      When a wordformation rule combines lexical strings   of source      formatives into strings of target formatives, the entire set of      WFSRules is applied on the formative sequence, one after the      other, in their order of specification   .      The resulting strings are still to be considered lexical strings   .      After their insertion into the target IRule, the whole set of      ISRules   is applied on them when they are combined into      wordforms.      WFSRules can be:         ¥  general WFSRules           ¥  WFRule-specific WFSRules           ¥  entry-specific WFSRules             40. Spelling Rule Group      General spelling rules   can be grouped into so-called spelling      rule groups. A spelling rule group consists of a list of spelling      rules ( ISRules   or WFSRules   ) preceded by a feature or feature      set. The spelling rules of the group apply to the formatives      qualified by the feature (set), only.      Spelling rule groups are used for the specification of      morphographic phenomena that affect only a particular group of      inflectional or wordformation classes (e.g. all nouns, all regular      adjectives, all N-to-N derivations, etc.)      A spelling rule group is specified in the Spelling Rule Window.      The window is opened by clicking the 'spelling' button in the      document window:         ¥  Newline         ¥  feature or feature set         ¥  newline         ¥  tab         ¥  general spelling rule           ¥  newline         ¥  tab         ¥  general spelling rule         ¥  newline         ¥  etc.      Example 40.1 Spelling Rule Groups                         	(Cat Noun)		(ISRule h-insertion)		"(.*c)/\1h" (ICat N-Stem)	"[ei]"				(ISRule i-deletion)		(.*c)i/\1h" (ICat N-Stem)	"[ei]"	(RIRule Replace_Special_Character_C)	"(.*)C/\1c" (ICat N-Stem)|(ICat A-Stem)|(ICat V-Stem)                                                                                                  ×     The example shows a spelling rule group initiated by the feature      (Cat Noun). The rules specified in the group apply exclusively on      formatives with the feature (Cat Noun). The group is followd by a      general spelling rule that applies on all inflection formatives.      41. Spelling Rule Order      Spelling rules   are applied one after the other, in their order of      specification.      When a spelling rule is applied, the lexical string of a formative      is replaced according to the string replacement   specified in the      rule. After that, the following spelling rules are applied on the      formative (of course, only if the formative meets the      restrictions formulated in the spelling rules). The final result is      defined by the string of the formative which remains after the      application of the last rule.      The application order for both ISRules   and WFSRules   is defined      as follows:         ¥  first, the general spelling rules   , from top to bottom,             as they are specified in the spelling rule window,         ¥  second, the rule-specific spelling rules , from top to             bottom, as the are specified with the corresponding             inflection or wordformation rule (cf. IRule-rule specific             ISRule   and WFRule-specific WFSRules   ),         ¥  third, the entry-specific spelling rules, from top to             bottom, as they are specified in the corresponding entry             specification   (cf. entry-specific ISRules   and             entry-specific WFSRules   ).      The set of WFSRules is applied when complex formatives   are      formed. Subsequently, the set of ISRules is applied on these      complex formatives, when they are composed to wordforms and      inflectional paradigms by the corresponding inflection rule.      42. Spelling Rule Syntax      The syntax of a spelling rule body is the same for ISRules   and      WFSRules   ; for general, rule-specific and for entry-specific      spelling rules.      The following items will be presented:         ¥  restrictions on formatives         ¥  string restrictions           ¥  string replacement           ¥  feature restrictions           ¥  'value'-rules             42.1. Restrictions on formatives      Spelling rules are applied on formatives or on combinations of      formatives. There are two possibilities to specifiy the formative      (class) the spelling rule must be applied on:         ¥  string restrictions           ¥  feature restrictions        When the restriction on one formative consists of both a string      restriction and a feature restriction, the restrictions are      separated by a white space. The string restriction precedes the      feature restriction. E.g. all noun stems ending on c:      ".*c" (ICat N-Stem)     When the application of a spelling rule is restricted on a      combination of formatives, the formative restrictions are      separated by a tab. E.g. all noun stems ending on "c " when      combined a) with a plural suffix, b) with a plural suffix "i ":      a) ".*c" (Cat N-Stem)	(ICat N-Suffix)(Num PL)     b) ".*c" (Cat N-Stem)	"i" (ICat N-Suffix)(Num PL)     42.2. String Restriction      The special characters and the syntax for string restrictions are      the following:         ¥  "string"            Each string is included in double quotes.         ¥  "."            The full stop matches any character (defined as a             lexical character in the lexical character set   )         ¥  ".*"            The full stop followed by an asterisk matches any             string, including strings of one character and empty             strings         ¥  ".*sh?"            An expression of one of the preceding forms followed by             a question mark matches a sequence of zero or one of             the expression. The example matches with strings             ending in "sh " or "s ".         ¥  ".*[sxz]"            A sequence of characters in square brackets matches             any character in the sequence. The example matches all             strings ending in "s ", "x " or "z ".         ¥  ".*[^e]"		".*[^sxz]"            A sequence of characters preceded by "^ " and in square             brackets matches any character NOT in the sequence.             The examples match all strings not ending in "e " and             not ending in "s ", "x " or "z ", respectively.         ¥  ".*ity|.*acy"			"be.*|ent.*|ver.*"            Expressions separated by " | " match any of the             expressions. The first example matches all strings             ending in "-ity " or "-acy ". The second example matches             all strings starting with "be- ", "ent- " or "ver- ".           42.3. String Replacement      The string replacement is the modification a spelling rule        perfoms on the string of a formative. A string replacement is      formulated in double quotes, directly with the string restriction        of the formative that has to be modified.         ¥  "lady/ladie"	"s" (ICat N-Suffix)(Num PL)            The expression on the left of the slash "/ " is replaced             by the expression on its right. In the example, the             lexical string "lady " will be replaced by the surface             string "ladie " (when combined with the plural suffix "s             "; cf. "lady - ladies ").         ¥  "(.*)y"	"(.*)+(ity)"            An expression in round brackets matches what the             expression itself matches. Round brackets are used,             when whole or partial strings are to be copied from the             left side to the right side of the string replacement             (see above slash and below backslash).         ¥  "(.*)y/\1ie"		"s" (ICat Suffix)	"(.*)+(ity)/\1\2"            A backslash followed by a digit copies the bracketed             expression represented by the digit over from the left             to the right side of the string replacement. The digits             correspond to the position of the bracketed expression             in the string on the right side of the string replacement.             In the first example, "1 " stands for ".* ". Any string             followed by "y " is replaced by the same string plus "ie "             when combined with a suffix "s " (cf. "lady/ladie-s ").             In the second example "1 " stands for ".* " and "2 " for             "ity ". Any string followed by the special character "+ "             and the sequence "ity " is replaced by the same string             and the sequence "ity ", i.e. the "+ " is not copied into the             new string.           42.4. Feature Restriction      Feature restrictions are used in spelling rules   to restrict their      application (cf. spelling rule syntax   ).      Feature restrictions use the features   by which the formatives        are specified. A feature restriction matches all formatives for      which the features defined in the restrictions are a subset of the      qualifying feature set. E.g.         ¥  the restriction (Cat N) matches all formatives             containing this feature in their feature set.         ¥  the restriction (Cat N)(ICat N-Stem)(ICat Regular)            matches all formatives defined by this feature set.      Positive restrictions are formulated like the two examples      above by stating a feature or a feature set. Further possibilities      are:         ¥  ^	e.g. (Cat N)(ICat N-Stem)^(ICat Irregular)            Negative restrictions are introduced by "^ ". The example             restriction matches all formatives qualified by the             feature set (Cat N)(ICat N-Stem), except the formatives             that are further specified by the feature (ICat Irregular)             => all but the irregular noun stems.         ¥  |	e.g.	(Cat A-Stem)|(ICat N-Stem)		(ICat N-Stem)(ICat a/e)|(ICat N-Stem)(o/i)            Alternatives are indicated by " | " (vertical dash). The             first example restriction matches with all formatives             that are specified by either the feature (ICat A-Stem)             or the feature (ICat N-Stem) => all adjective and noun             stems.             The second example matches either noun stems that are             specified by the feature (ICat a/e) or noun stems that             are specified by the feature (ICat o/i). The "or             "-operator separates whole feature expressions.             Consequently, the feature (ICat N-Stem) has to be             repeated for the second feature expression.      Combinations of the "or " and "not " operators are possible:      	(ICat N-Stem)|(ICat A-Stem)|(ICat V-Stem)     Either N-stem, A-stem or V-stem      	(ICat N-Interfix)|(ICat N-Suffix)^(Num Plur)     Either N-Interfix or N-Suffix except N-Suffix with the feature      for plural. The "not "-operator refers only to the feature (set)      specified immediatly before it.      	(ICat Adj-Suffix)^(Gender Fem)^(Number Plur)     All Adj-suffixes that are neither feminine nor plural. The "not "      operators are coordinated, not embedded. Therefore, the example      does not only exclude adj-suffixes that are feminine AND plural,      but also adj-suffixes that are feminine OR plural.      42.5. 'Value' Spelling Rules      A normal spelling rule   produces one output for each input      string, i.e. the input string is replaced by an output string      according to the string replacement   formulated in the spelling      rule.      A 'value' spelling rule is a spelling rule with two outputs: 1) the      modified string and 2) the unmodified input string.      42.5.1. ISRules As 'Value' Rules      When the 'value' rule is an ISRule   , the subsequent ISRules are      applied on both outputs, on the modified string and on the      unmodified string. In this manner, it is possible to generate two      surface strings   out of one lexical string   .      This can be useful for the specification of wordforms or even      whole inflectional paradigms with two correct surface variants.      E.g. the English noun "inflection " and "inflexion ", the Dutch verb      "controleren " and "kontroleren ", etc.      42.5.2. WFSRules As 'Value' Rules      When the the 'value' rule is a WFSRule   , it produces two output      strings, too. Unlike 'value' ISRules, 'value' WFSRules serve "only "      for the formulation of an option between the modified and the      unmodified string.      Not both the strings are passed on, but only the one that is      manually chosen: with hard coded entries   when the lexical      string in the entry specification   of the WFRule is specified;      with lexicographer entries   , when the target is generated.      'Value' WFSRules are useful for the specification of      wordformation processes, with which a certain morphographic      phenomenon occurs with some entries and does not occur with      others, and where this alternative is not formally predictable.      E.g. certain German wordformation suffixes provoke some stems      to be umlauted, meanwhile other stems remain unaltered. Which      stems are umlauted and which are not, is not unambiguously      predictable:      		Arzt	rzt-in			Zar	Zar-in	Hund	Hnd-in			Kunde	Kund-in          By the formulation of a 'value' rule, both processes, with and      without umlaut, can be specified in one WFRule.      42.5.3. Specification of a 'Value' Rule      A normal spelling rule is made a 'value' spelling rule by simply      adding a white space and the keyword "value " at the right end of      the spelling rule body   . E.g.:      	"inflection/inflexion" (ICat N-Stem) value          The input string is "inflection ", the output strings are "inflexion      " and the unmodified string "inflection ".      	"C(.*)/k\1" (ICat V-Stem) value	"C(.*)/c\1" (ICat V-Stem)          The input is, e.g. the dutch noun stem "Copie ", the output of the      first spelling rule is "kopie " and "Copie ". The second spelling      Rule replaces "Copie " by "copie ". Consequently, the lexical      string "Copie " has the two surface variants "copie " and "kopie ".      43. Surface Character Set      The surface character set window lists all characters that are      used for the representation of surface strings   . The window is      opended by clicking the 'surf char' button in the document      window   .      All characters listed in the surface character set must also be      declared in the lexical character set   .      For the specification of surface characters see character sort      order   and character sequence sort order   .      44. Surface String      Surface strings are composed of surface characters that are      declared in the surface character set   .      Surface strings are strings that identify orthographic      representations of wordforms.      Lexical strings   are transformed into surface strings by the      application of spelling rules   . The surface string of a wordform      is the string combination after the application of all spelling      rules.      45. Syntax Check      Menu 'WordManager', command 'Check Syntax'.      The syntax checker discovers syntactic errors and presents a      list of the features   not declared yet, asking if they should be      added to the feature domains   window.      The syntax checker is applied on the window that is selected at      the moment the checker is activated. When the selected window      is the Inflection window or the Wordformation window, the      syntax of the whole inflection tree   or wordformation tree   ,      respectively, is checked.      45.1. Error Messages      If the syntax in the checked window is correct, the message      window   is opened and the message "syntax o.k. " is displayed.      If the syntax in the checked window is not correct, the message      window is opened and a relevant error message is displayed.      When this is the case, try to correct the syntax error and redo      the syntax check. The error messages should be easily      understandable. If not, consult the relevant chapters in this Help      program or in the Tutorial.      45.2. Adding features automatically      The syntax checker can be used for the automatic declaration of      new features in the window Feature Domains   :      When the syntax in the checked window is correct, but contains      new features not declared in the window Feature Domains, a      dialogue window is opened. It displays the features that are not      declared.      Select the features you want to be added to the feature domains.      Pay attention to typing errors!      You select a feature by clicking it. To select more than one, hold      down the Shift-key while clicking them.      Click OK. The features are added to the feature domains.      46. Target      The target is the part of a WFRule specification   that specifies      how the formatives matched in the source   are combined and      used for the creation of new entries.      The target specification starts after the source   specification      or after the optional specification of WFRule-specific spelling      rules   (steps in square brackets are optional):         ¥  Newline         ¥  keyword: target        ¥  [tab individually added features   ]         ¥  Newline         ¥  Specification of the target IRule           ¥  Newline         ¥  Specification of one or more target IFormatives             46.1. Target IFormative Specification      The target IFormative specifiction is a part of the target      specification   . A target formative specification defines how      the source formatives   are combined to new formatives of a new      entry.      Target formatives are the instantiation of the underspecified      IFormatives   occurring in the target IRule   . Therfore, you must      always specify as many target IFormatives as there are      underspecified IFormatives in the target IRule (the IRule cannot      be fired, otherwise).      The target IFormative specification starts on a new line,      underneath the target IRule specification   :         ¥  Newline         ¥  tab         ¥  digit white-space digit [white-space digit etc.]             The digits represent the strings of the source             formatives defined in the source   with the same digit.             The order of the digits defines the order in which these             source strings are combined to form the string of the             target IFormative.         ¥  tab         ¥  feature (set) of the target IFormative             The feature (set) of the target IFormative must             unambigously identify the formative. Of course, the             feature (set) must correspond to the feature (set) of an             underspecified IFormative defined in the target IRule.         ¥  Newline      If more target IFormatives need to be specified, repeat the above      steps.      46.2. Target IRule Specification      The target IRule specification is a part of the target      specification   in a WFRule or a part of a target specialization in      a daughter rule   . It specifies the IRule   in which the target      IFormative(s)   must be inserted, i.e. it defines the inflectional      class of the entries generated by the application of the WFRule.      The target IRule must always be unambigously defined as one      particular IRule. You type the name of the IRule on a newline,      underneath the keyword "target ".      Exceptions are:         ¥  when an IRule propagation   has been formulated in the             source specification. In this case, you type a wildcard             IRule instead of the name of a particular IRule. A             wildcard IRule looks like this:             (?IRule ?)        ¥  when the WFRule matches WFFormatives with a WFRule             specialization, i.e. when you specify so-called             daughter-rules   . In this case, too, you type a wildcard             IRule (?IRule ?) .      These exceptions do not hold for target IRule specifications in      daughter rules, because 1) when an IRule propagation has been      formulated, there is no need to specify a target IRule in the      daughter rule, and 2) daughter IRules cannot have further      daughter IRules.      47. Tree Editor      The tree editor is a facility for the structuring of the inflection      tree   and the wordformation tree   .      When you start a new database, the inflection window and the      wordformation window are empty, except for the "root " node.      When you open an already existing database, cf.      Delete/Collapse-command below.      To modify a new or an already existing tree, the inflection      window or the wordformation window must be selected. Then,      the 'Edit' menu lists all the relevant commands.      Before you choose a command, you must select one node in the      tree by clicking it. Selected nodes are displayed white on black.         ¥  New Son: Adds a new son node to the selected node.             A dialogue box is opened in which you have to type the             feature   you want to be the node name. Note that a             feature must always be a bracketed attribute-value             pair.         ¥  New Brother: Adds a new node at the same tree level as             the selected node.             A dialogue box is opened in which you have to type the             feature you want to be the node name. Note that a             feature must always be a bracketed attribute-value             pair.         ¥  Open Node Window: opens the window of the selected             node. A node window can also be opened by             double-clicking the node.                ¥  All non-terminal nodes are comment windows,                    i.e. windows that are ignored by the compiler.                    If you want to insert comments, use                    semicolons at the beginnign of each line. The                    semicolons can be manually typed in or                    automatically inserted with the 'Insert "; "'                    command in the Edit menu (only available when                    a node window is opened). The command inserts                    three semicolons on each new line of selected                    text.                ¥  The terminal (leave) nodes are used for the                    specification of rules and formatives.                     ¥  Edit Node Name: Opens a dialogue window containig the             name of the selected node. The name can be changed.         ¥  Cut Subtree: Deletes the selected node                ¥  only the selected node when it is a leave node                ¥  the whole subtree starting from the selected                    node when it is a parent node                     ¥  Copy Subtree: Copies the selected node                ¥  only the selected node when it is a leave node                ¥  the whole subtree starting from the selected                    node when it is a parent node                     ¥  Paste Subtree As Son: Pastes the previously deleted or             copied node/subtree as a son of the selected node.         ¥  Paste Subtree As Brother: Pastes the previously deleted             or copied node/subtree at the same tree level as the             selected node.         ¥  Expand/Collapse: Expands resp. collapses the subtree of             the selected node. Nodes with collapsed underlying             subtrees are displayed in bold.             When a database is opened, all subtrees up to the first             level underneath the root node are collapsed.         ¥  Copy Node Name: Copies the name of the selected node.             Useful, when complex node names have to be used in             rule specifications or in comments.           48. WF Cluster      The view 'WF Cluster' is a graphical representation of the      lexemes that, through wordformation, are directly related to a      particular lexeme.      The WF Cluster view of a particular lexeme can be opened from      its lexeme browser   : Open the lexeme browser of the lexeme      and choose 'WF Cluster' in the upper selection menu (or press      CTRL+5).      The view shows all lexemes from which the selected lexeme is      derived and all lexemes that are derived from the selected      lexeme. The selected lexeme is represented in bold characters:         ¥  On the left of the selected lexeme (creation history), all             derivational steps down to the simple entries   are             shown.         ¥  On the right of the selected lexeme (generation history),             all lexemes that are derived from it are shown. If one of             these derivatives is a compound, all the lexemes             involved in its creation are also shown down to the             simple entries.      Since in larger databases the clusters can grow very big, you      have the possibility to restrict the depth of the WF Cluster      representation:         ¥  Select "Set WF Cluster Depth... " in the 'WordManager             Menu'         ¥  In the dialogue box you can choose                ¥  All: the clusters will be fully extended as                    described above.                ¥  Specified Depth: you can restrict the depth of                    the creation and/or the generation history on                    1, 2, 3, etc. steps.                  You can open the lexeme browser of every lexeme represented in      the cluster by double-clicking it.      To rearrange the representation of the cluster, you can move the      lexeme nodes individually. Just click and drag them.      49. WFRule           WFRule stands for Wordformation Rule. As the name indicates,      WFRules define wordformation, i.e. derivation and compounding.      WFRules combine IFormatives   of already stored entries and,      optionally, WFFormatives   into new IFormatives to form new,      complex entries   . One WFRule describes one wordformation      class or - in other words - one wordformation process.      There is a distinction between RWFRules   for regular, productive      wordformation processes and IWFRules   for irregular      wordformation processes. As far as the WFRule specification   is      concerned, there is only one difference between these two types:      RWFRules must obligatorily have an RWFRule feature   name,      whereas IWFRules must obligatorily have an IWFRule feature        name.      The full name of an WFRule is the sum of all the features      encountered between the root node and the WFRule node, i.e. the      node in which the WFRule is specified.      The full name of an WFRule must be distinct for each WFRule.      Note, that RWFRules and IWFRules must be specified in separate      wordformation units   .      50. WFRule Specification      The specification of a WFRule   takes place in a window      connected to a RWFRule or an IWFRule leaf node in the      wordformation tree   . A window is opended by double-clicking      the leaf node.      The syntax for the specification of RWFRules   and IWFRules   is      exactly the same.      A WFRule specification comprises the following parts (items in      square brackets are optional):         ¥  source specification           ¥  newline         ¥  [ WFRule-specific WFSRules   ]         ¥  newline         ¥  target specification           ¥  newline         ¥  source constraint   including an entry specification               When the WFRule matches WFFormatives with a WFRule             specialization, so-called ' daughter rules   ', the source             constraints may not be formulated in the WFRule itself.             They must be specified with the daughter rule.         ¥  Newline           51. Wildcard IRule      Wildcard IRules are used in the target IRule specification   . A      wildcard IRule denotes that the target IRule is determined      somewhere else, either propagated from the source by an IRule      propagation   or specified in a so-called daughter rule   .      A wildcard IRule looks as follows:      (?IRule ?)      52. Wordform      A wordform is a particular, concrete representation and a      grammatical role a lexeme   may assume in a text. The sum of      the wordforms of a lexeme is its inflectional paradigm   .      When an IRule   combines IFormatives   into wordforms, it      combines lexical strings   and features. A wordform is thus a      combination of the strings and the feature sets of its      formatives. It consists of a lexical string   , a surface string        and the corresponding wordform features   .      See wordform specification   .      53. Wordform Specification      Wordform specifications are a part of an IRule specification   .      They define which IFormatives   are to be combined into      wordforms   .         ¥  Under the keyword "citation-forms ", you specify the             wordform(s) you want to be used as citation form   .         ¥  The specification of all wordforms belonging to the             inflectional paradigm defined by the IRule (usually             including the form used as citation form) is specified             under the keyword             word-forms            that is written on a new line, underneath the             specification of the citation form.      The formatives are represented by a feature or a feature set. The      features match exclusively the formatives specified in the same      inflection unit   . The formatives specified on one line are      separated from each other by a tab.      One line defines         ¥  one wordform, when all features specified on it match             only one formative         ¥  a set of wordforms, when a feature (set) specified on it             matches a set of formatives.      Example 53.1 Wordform Specification             Partial IRule for English nouns:             	citation-forms	(ICat N-Stem)		(ICat N-Suffix)(Num SG)	word-forms	(ICat N-Stem)		(ICat N-Suffix)                                                                                                  ×     Given a set of noun suffixes consisting of two suffixes: 	"" ""		(ICat N-Suffix)(Num SG)	"s" "s"		(ICat N-Suffix)(Num PL)          and one noun stem (ICat N-Stem), the line under "citation-forms      " generates one wordform (stem + suffix singular), whereas the      line under "word-forms " generates two wordforms (stem +      suffix singular & stem + suffix plural).      54. Wordformation Rule      See WFRule        Irregular Inflection Rule see IWFRule        Regular Inflection Rule see RWFRule        Wordformation Rule specification see WFRule specification   .      55. Wordformation Tree      For handling of the tree editor see tree editor   .      In the Wordformation tree, WFRules   and WFFormatives   are      specified and hierarchically structured. By means of features   ,      the tree is structered into wordformation units   within which      the WFRules operate on the WFFormatives.      The rules and the formatives are specified in the leave nodes.      There are two different types of features:         ¥  RWFRule features   and IWFRule features   = features             with the attribute   "RWFRule " or "IWFRule ".         ¥  WFCat features   = features with the attribute "WFCat ".      WFCat features are used for the organization of wordformation      units   .      Wordformation units are initiated by a WFRule feature.      Within wordformation units, WFRule features are used for the      structuring of rule windows and WFCat features for the      structuring of WFFormative windows.      The leave nodes for the specification of WFRules   must have an      RWFRule or an IWFRule feature. The complete name of an WFRule      is the sum of ALL features encountered on the way down from      the root node to the leave node.      The leave nodes for the specification of WFFormatives   must      have an WFCat feature. The complete feature set of an      WFFormative is the sum of all WFCat features encountered on the      way down from the root node to the leave node, plus the WFCat      features specified directly with the formative.      55.1. Some Constraints On The Tree Organization      General:         ¥  On each node level, the local feature sets qualifying             wordformation units or leave nodes must be distinct,             i.e. the sets must be pairwise non-identical and no set             may be a subset of another set.         ¥  A combined feature set of a wordformation unit or a             leave node may not have redundant features, i.e. each             feature on the path from the root to a node must be             unique.      WFRule features:         ¥  Each complete WFRule name must be distinct, i.e.             complete WFRule names must be pairwise non-identical             and no complete WFRule name may be a subset of             another complete WFRule name.         ¥  A complete WFRule name may not contain redundant             features, i.e. each feature on the path from the root to             the leave node must be unique.      WFFormative features:         ¥  On each node level (this includes the WFCat features             specified directly with the formatives), the feature             sets qualifying formatives must be distinct, which             means that the sets must be pairwise non-identical and             no set may be a subset of another set.         ¥  Combined qualifying feature sets of formatives (this             includes the WFCat features specified directly with the             formatives) may not contain redundant features i.e. each             WFCat feature on the path from the root to a node must             be unique.         ¥  None of the combined qualifiying feature sets of             formatives (this includes the WFCat features specified             directly with the formatives) may be a subset of any             other.           56. Wordformation Unit      A wordformation unit is a construct that groups a set of WFRules        and WFFormatives   into an entity. The major charactersitic of a      wordformation unit is that the WFRules specified within it      operate exclusively over the WFFormatives specified within it.      The specification of wordformation units allows you to factor      your specification into entities within which you can work      'locally'. Furthermore, they faciliate the compilation   in larger      databases: When you choose the 'Run Compiler' command in the      Edit menu, only the wordformation units that have been modified      since the last compilation are recompiled.      The beginning of a wordformation unit is marked by a RWFRule      feature   or an IWFRule feature   , where the first marks a      RWFRule unit and the second an IWFRule unit. All WFRules and      WFFormatives specified at the beginning level and the underlying      levels of the subtree belong to the same inflection unit. First,      the WFRules   are specified, followed, optionally, by the      WFFormatives   .      Example 56.1 Wordformation Units: German Verb-To-Adjective      Derivation                         	(WFCat V_To_Adj)		(WFCat Suffixing)			(RWFRule No_Umlaut)			(RWFRule Umlaut)			(WFCat Suffix)				(WFCat Without_Umlaut)				(WFCat With_Umlaut)		(WFCat Conversion)			(RWFRule Present_Participle)			(RWFRule Past_Participle)                                                                                                  ×     The example shows a possible (incomplete) subtree for German      verb-to-adjective derivation with         ¥  a RWRule unit for suffixing, initiated by the (RWFRule             No_Umlaut)         ¥  a RWFRule unit for conversion, initiatet by the (RWFRule             Present_Participle)       