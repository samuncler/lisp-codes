@Chapter{Introduction} This tutorial explains how you start to work with Word Manager. It isa brief introduction that should make you familiar with the basicfunctions, commands, etc. you can dispose of in the Word Managerinterface.References are made to “Word Manager: A System for MorphologicalDictionaries”, to the Help program and to several Word Managerdatabases. The references are marked in the text by italics. Wheneveryou wish to or are invited to read one of the items reference is madeto, just click on the text in italics. @Chapter{Creating and loading WM-databases}@Label{ "Chapter 2." }Description of how exactly to create and load a database. (How willit exactly be?) @Section{The document window}Whenever you load a WM-Database (how to load a database see ????),the corresponding @Application-Link{ "document window" |"German-Work.1" } is displayed. A document window is a dialoguewindow containing several buttons that give you access to thedifferent parts of the linguist’s interface. The 'title bar' indicatesthe name of the database you are working in or just looking at. Here,you are looking at the WM-database named “German-Work.1”.The document window is subdivided in three parts. In the first rowthere are two buttons. Under the title Word Manager there are 8buttons. They open the different parts of the WM-formalism. You willsee their functions in other sections of this tutorial. Under the titlePhrase Manager there are another 6 buttons. Phrase Manager is anextension of the system that will not be treated in this document. Ashort description of the Document Window is given in@Document-Link{ "Section 2.2.1." | "Book:The Book" |"WM-approach-windows" } of the Word Manager book (printed versionp. 39)@Chapter{Information Retrieval on WM-Entities}@Label{ "General-Entity-Browser" }If you want to know something about the entities used in a database,you can consult the General Browser. When a database has beencompiled, the browser offers views on all the entities Word Managerworks with and on a great variety of relations between them. We aregoing to consult the browser of the database "German-Work.1" to getacquainted with the different elements Word Managers deals with(rules, formatives, entries). @Section{Open the General Browser}If you haven’t done it yet, open the database @Application-Link{"German-Work.1" | "German-Work.1" }. The Document Window is displayed onyour screen. You open the General Browser by clicking the @Application-Link{"browser button" | "German-Work.1-browser-button" }. @Section{Selecting Restrictions and Retrieval}In the browser, you have access to different pull-down menus:@Application-Link{ "Entity Restriction" |"German-Work.1-Browser-ENTITY-RESTRICTION"} and @Application-Link{"Feature Restrictions" | "German-Work.1-Browser-FEATURE-SET" }.When you click the menu @Application-Link{ "Entity Restrictions"|"German-Work.1-Browser-ENTITY-MENU"}, you see on which kindsof entities you can restrict the information retrieval: Rules,Formatives and Entries. The menu items with a black arrow on theirright have submenus (Rules and Formatives). In the submenus youselect further restrictions on the kind of entities you want to have alook at. The menu @Application-Link{ "Feature Restrictions" |"German-Work.1-Browser-FEATURE-MENU" } allows you to selectrestrictions on the features that specify the entities. When you clickthe menu Feature Restrictions, you see a list of all the attributesdeclared in the database. The submenus contain the correspondingvalues. In order to select a feature, you pull the cursor down to anattribute an select one of the corresponding values. @Figure{ "Selecting the feature (Gender N)" | "193" | 399 | 192 }When you have selected an Entity and a Feature, click the@Application-Link{ "Retrieve button" |"German-Work.1-Browser-RETRIEVE-BUTTON" }. The System will list, inthe central field, all the items that match the selected restriction. Go now into the browser of "German-Work.1" and try to retrieve all theRegular Inflection Rules (RIRules) that are connected with regularnouns. These are RIRules with the feature (RIRule N-Regular). Thebrowser should now look like the figure below: @Figure{ "Retrieval of all RIRules with the feature (RIRulesN-Regular)" | "129" | 494 | 313 } The @Application-Link{ "textfield under the Restriction menus" |"German-Work.1-Browser-CHOICE-TABLE-TEXT" } shows the restrictionsyou selected. The @Application-Link{ "central textfield" |"German-Work.1-Browser-CHOICE-TABLE" } lists all the entities thatmatch the chosen restrictions, i.e., in this case, all the RegularInflection Rules with the feature (RIRule N-Regular). If the result of your retrieval looks different, you have chosen differentrestrictions. We suppose that it happend by mistake, so, try it once more. Closethe browser window and open it again by clicking the Browser button in theDocument Window (there is an easier way to reformulate restrictions, as wewill see below). Then, try again to retrieve the RIRules with the feature (RIRuleN-Regular).If the result of the second try is still not the one shown in the abovefigure: @Document-Link{ "Help" | "Tutorial:Help-Browser" |"Help-Browser 1" }.Now, the central text-field should display a list of entities. You canretrieve further information on this entities. Click on the one you areinterested in (e.g. the (RIRule N-Regular.ES/E)). It will be displayed inthe @Application-Link{ "small textfield" |"German-Work.1-Browser-STATIC-TEXT" } underneath the centraltextfield. Next to this small textfield, the @Application-Link{ "Aspects menu" | "German-Work.1-Browser-ASPECTS-MENU" } offersdifferent views on the selected entity. If you have selected (RIRuleN-Regular.ES/E), for example, you can choose Entries in the Aspectsmenu. The central textfield lists the entries connected with the selectedIRule, i.e. "berg", "blut", "einkauf", etc. Again, you canselect one of the entries (by clicking it) and ask for furtherinformation on it by using the Aspects menu. Note that theinformation retrieved via the Aspects menu always concernes theitem displayed in the small textfield on the left of the buttonAspects. In this manner, you can move around in the database. To go back to anearlier view, you can use the menu @Application-Link{"History" |  "German-Work.1-Browser-HISTORY-MENU"}. It lists allthe retrieval steps you made. To go back to on of them, choose it inthe pull down menu History.Try to move around in the browser and to have a look at Rules,Entries and Formatives . You can always leave the browser by closingthe browser window and restart it by clicking the Browser button inthe document window.  @Section{How to do a second, third,... retrieval}In general, a second, third, etc. retrieval is done in exactly the same way as thefirst one, i.e. as described in the previous section. When you select a new item in the @Application-Link{ "Entity Restrictions menu"|"German-Work.1-Browser-ENTITY-MENU"}, the previous Item is automaticallyreplaced by the new one. To select a new item in the @Application-Link{ "Feature Restrictions menu"|"German-Work.1-Browser-FEATURE-MENU"}, you must delete the previouslychosen item (because it is possible to restrict the retrieval on more than onefeature, the previous features are not automatically deleted). In order to delete a previous restriction, click into the textfield underneath themenu Feature Restriction right after the feature and press the BACKSPACE-key.Then, you can select one or more new features in the menu Feature Restrictions. Try to retrieve some more information in the browser of theGerman-Work.1 database. @Chapter{Information Retrieval on Entries}@Label{ "Lexeme Browser" }If you want to have some information on a particular entry, you canretrieve it by using the general browser described in the previouschapter. An easier way is using the lexeme browser.If it is not loaded yet, open the database @Application-Link{ "German-Work.1" |"German-Work.1" }. All the entries specified in this database are listed in theTest Window. The test window is opened by clicking the @Application-Link{ "WM Test button" | "German-Work.1-WM test-button" } in thedocument window. Select one entry, e.g. "tag" ('day'). An entry of the list is selected,when it is displayed white on black. One method to select it is todouble-click it.@Figure{ "Test Window: selected entry “tag”" | "131" | 332 | 312 }When the entry is selected, choose 'Retrieve lexicalized Entries' inthe @Application-Link{ "WordManager menu" | "Client-WM-Menu" } (ortype COMMAND+L). If the command 'Retrieve lexicalized Entries' is notavailable, the selected window is not the Test Window. Select it byclicking it, verify that an entry is selected and choose the 'Retrievelexicalized Entries' command. If the entry you selected is "tag", thislexeme browser should be on your screen: @Figure{ "Lexeme Browser of Entry “tag”" | "132" | 412 | 398 }Let’s have a quick look on the information contained in this lexemebrowser. The lexeme browser should now be on your screen. If it isnot, open it as described above (@Link{ "go up" | "Lexeme Browser" })@Item	The text field under the title @Application-Link{ "Lexemes" |	"German-Work.1-ld-Lexemes" } shows the lexeme identifier together	with the relevant entry features of the selected entry. @End-Item@Item	Below this text field, the @Application-Link{ "Inflection Rule" |	"German-Work.1-ld-IRule" } specifying the inflection class the	lexeme belongs to is displayed.@End-Item@Item	Under the titel @Application-Link{ "Paradigms" |	"German-Work.1-ld-Paradigms" }, another text field lists the	subparadigms of the inflectional paradigm of the entry. @End-Item@Item	Under the titel @Application-Link{ "Wordforms" |	"German-Work.1-ld-Wordforms" }, the wordforms of the selected	subparadigm are listed together with their wordform features.	Here, the selected subparadigm is the singular paradigm (Num SG).	Click (Num PL) in the browser and the wordforms of the plural	will be displayed. @End-Item@Item 	The last text field lists the @Application-Link{ "Formatives" |	"German-Work.1-ld-Formatives" } a selected wordform is composed	of. Each formative consists of a string and a feature set. In our	example, the selected word form is composed of a noun stem and	a noun suffix. You select a word form by clicking it in the text	field. Try it. All the wordforms of the entry "tag" are composed of	two formatives. @End-Item@Item 	Next to the title 'Wordforms', there is a selection menu. It	controls the last text field. 	It is now on 'Formatives'; thus, the formatives of the selected wordform	are displayed. When it is changed to 'ISRule Application', the text field	shows the spelling rules that have been applied on the strings of the	formatives when the wordform was composed. 	Go to the menu and change it from 'Formatives' to 'ISRule Application'. For	most of the wordforms of the lexeme, the browser will only show two	strings. This means that no spelling rule has been applied. 	Select the wordform "tags" in the paradigm (Num SG). There, you	can see that a spelling rule reduced the suffix "es" to "s".@End-ItemOther views on the data related with a lexeme can be created with theselection menu in the first row next to the title Lexemes. Until now, the Paradigms view was chosen. Go to the upper menu (now on 'Paradigms') and choose 'Wordforms'. If you have followed the steps described in this chapter until now, thefollowing should be diplayed on your screen:@Figure{ "Lexeme Browser of “tag”: Wordforms" | "140" | 411 | 399 }Here, the representation of the data emphasizes on thesingle wordforms of the lexeme. @Item	Under @Application-Link{ "Citation Forms" |	"German-Work.1-ld-Citation Forms" }, the wordform that serves as	citation form is shown. @End-Item @Item	Under @Application-Link{ "Wordforms" |	"German-Work.1-ld-Wordforms" } all the wordforms of the selected	entry are listed. Again, a selection menu allows to choose	between a view on the formatives of a wordform and the spelling	rules aplied on them.@End-ItemChoose now Generation History in the upper selection menu. Thelexeme browser shows all the entries that have in some way beenderived from the entry you are looking at:@Figure{ "Lexeme Browser of “tag”: Generation History" | "141" | 412 |291 } Next to the title Generation History there is a new selection menu.When it is on 'New Browser', you can click on one of the itemslisted in the text field, i.e. "muttertag". Do it. A new lexeme browser related to the chosen entry (i.e. "muttertag") iscreated. It has exactly the same possibilities as the previous one ; so,let’s have a look at some other views a lexeme browser offers:One of them is the Creation History. When you choose this view -which for obvious reasons is only available for derived entries - the browser gives you information about how a complex entry hasbeen created.  So, choose Creation Histroy in the upper Selection Menu. This is what youshould see now:@Figure{ "Lexeme Browser of “muttertag: Creation History" | "142" | 414 | 403 }Among other things, the browser indicates:@Itemthe @Application-Link{ "wordformation rule" |"German-Work.1-ld-WFRule" } by which the entry has beencreated @End-Item @Item	The source formatives, i.e. the formatives used to create the	new entry (@Application-Link{ "show Source Formatives" |	"German-Work.1-ld-Source Formatives" })@End-Item@Item	and the target formatives, i.e. the formative(s) that are formed	out of the source formatives to create a new entry	(@Application-Link{ "show Target Formatives" |	"German-Work.1-ld-Target Formatives" }). @End-Item When you click a source formative belonging to a source entry, thecorresponding lexeme browser is opened. Try it by clicking on"mutter" in the textfield Source Formatives. In this way, you can collect information about single lexemes andabout the derivational relations between them. To get used to thebrowser, you should try it out. Select other entries (e.g. "kaufen","demonstration", etc.) and have a look at their wordforms, paradigms,formatives, generation and creation history, etc.The upper selection menu contains more commands. Try the command 'WC Cluster'e.g. in the lexeme browser of "tag". The command  'Specification' opens theinflection rule or the wordformation rule window in which the entry has beenspecified (for the time being, it is not important that you understand these rulewindows; just have a look at one or two of them).Remember, to open a lexeme browser:@Item 	go to the Test Window or the Message Window (if necessary,	open it),@End-Item@Item	select an entry (or type it into the window),@End-Item @Itemchoose Retrievelexicalized Entries in the WordManager menu.@End-Item @Chapter{Some introductory reading}Before you start the “real” work with this tutorial, you should read theintroductory chapters 1 and 2 of the book “Word Manager”. Inparticular, Chapter 2 gives an overview of the Word Manager system,which allows you to collocate your work as a linguist in the largerframe of the whole system. Therefore, if you haven’t read it yet, readat least @Document-Link{ "Chapter 2"|"Book:The Book"|"Chapter 2"}“The Word Manager Approach”, now (printed book p. 31-43).@Chapter{The real work}@Label{ "Real-Work" }Now, we are going to do some practical work. The following chaptersand sections present some linguistic problems and theirformalization with the Word Manager formalism. For each phenomenonwe will first have a quick look at the linguistical data. Then, apossible solution will be presented, and finally, you will be invited toformalize a similar problem by yourself. Note that, since the WM-formalism is very flexible, the given solutions aremostly not the only possible ones.@Chapter{Inflection: Italian Nouns}In this chapter, a fragment of Italian nominal inflection will betreated. A more detailed description of the same phenomena is givenin the book “Word Manager”, @Document-Link{ "chapter 3.1." |"Book:The Book" | "chapter 3.1." } (printed version p. 46-73). However,the following formalization will in some regards differ from the onein the book. The text in this tutorial should, anyhow, be sufficientto understand the phenomenon.@Section{The Data}@Label{ "The Data" }In Italian, nominal wordforms are in general specified for number andgender. Gender is an inherent property of a nominal lexeme. Nouns areeither masculine or feminine. Number is an inflectionalcategory. So, the inflectional paradigm of a regular Italian nounconsists of two forms: the singular and the plural. The main paradigms found in Italian are represented by the followingexamples:@Example{Main paradigms in Italian}@Verbatim 	strad-a		strad-e		('street')	giorn-o		giorn-i		('day')	chiav-e		chiav-i 	('key')@End-Verbatim@End-Example The wordforms can be split up into a stem and suffixes expressingnumber. According to the suffixes we will call the different classes@Itema/e-class (strad-a/strad-e, donn-a/donn-e),@End-Item @Itemo/i-class (giorn-o/giorn-i, capuccin-o/capuccini-i),@End-Item @Iteme/i-class (chiav-e/chiav-i, melon-e/ melon-i).@End-Item  As for gender, the first class contains feminine nouns, the secondclass mostly masculine nouns. In the e/i-class both genders arerepresented equally.There are, of course, minor inflection classes and irregular nouns,too:@Example{Minor inflection classes in Italian}@Verbatim 	artist-a	artist-i	('artist')	uom-o		uomin-i		('man')	città		città		('city') 	etc.@End-Verbatim@End-Example However, we will not go into these classes now. For the time being, itis sufficient to mention their existence. The part of Italian nominal inflection we are going to treat here canroughly be represented as follows: @Item 	There are what we call regulary inflecting nouns.@End-Item@Item 	Within the group of regular paradimgs, there are three main	classes. @End-Item@Item	In this main classes, the paradigm consists of a singular and a	plural form. @End-Item@Item 	Each of this forms is composed of a stem and a suffix expressing	singular or plural. @End-Item How can these data be handled with Word Manager? @Section{A First Inflection Rule, The Guided Tour}The first Inflection Rule will be presented in a "guided tour". Just read, observeand try to execute the commands and the typing exactly as you will be asked todo. After this presentation, you will be invited to write a rule by yourself. First of all, an empty database has to be opened. The one we use herewill be called Italian. How to open a new database, @Link{ "seeChapter 2." | "Chapter 2." }The one used here is called Italian (with an additional distinctivesub-name whose function has to do with the internal structure of thistutorial). @Application-Link{ "Open Italian.1-source" |"Italian.1-source" } @Figure{ "Document Window of Italian.1-source" | "194" | 332 | 245 }In the document window, the buttons under the title Word Manager arethe ones we will need for the specification of the above data (cf.@Link{ "The Data" | "The Data" }). Their individual functions willbecome clear during the represention of the formalization. If,however, you would like to have some information about them rightnow, see explanation of the document window subsequent to@Document-Link{ "Figure 2.3." | "Book:The Book" | "Figure 2.3." } in theWord Manager book (printed version p. 39-40). The inflection window is opened by clicking the Inflection button in the DocumentWindow. It is the window in which you are going to specify Inflection Rules andInflection Formatives in a hierarchical tree-structure. The tree starts with aroot node that is already given when the inflection window is opened. It cannot bemodified nor deleted. @Figure{ "Empty Inflection Window With Root Node" | "144" | 212 | 232} @SubSection{Organization of the Inflection Tree}@Label{ "Organization-of-the-Inflection-Tree" }We must now translate the data concerning the Italian nominalinflection into a hierarchical order (cf. @Link{ "The Data" | "The Data"}). At a first level, there must be a distinction between nouns andother grammatical categories like adjectives, verbs, etc. For thisreason, we introduce the sublevel - or as we will call it - the subtree(Cat Noun), i.e. the subtree in which the nominal inflection will bespecified. We do so by selecting the root node in the Inflection Window andsubsequently choosing the 'New Son' command in the@Application-Link{ "Edit Menu" | "Client-Edit-Menu" }. A dialogue window is displayed. @Figure{ "Add New Nodes: Empty Dialogue Box" | "145" | 323 | 131 }In its textfield we type the node name. Note that a node name is afeature and therefore has to be a bracketed attribute-value-pair.@Figure{ "Add new nodes: Node Name Specified" | "146" | 323 | 132 }Click OK and the new node will be added. You can see that when you@Application-Link{ "open Italian.1" | "Italian.1-source" } and click the@Application-Link{ "Inflection button" |"Italian.1-source-inflection-button" } in the document window. Within the noun tree, a second distinction has to be establishedbetween regular and irregular nouns. The subtree for the regularnouns will be called (ICat Regular). The procedure to add it is exactlythe same as described above. It is now your turn to add it (Make surethat the database Italian is opened. If it is not, click "open Italian" inthe previous alinea).@Item	Go into the @Application-Link{ "Inflection Window" |	"Italian.1-source: INFLECTION" } and select the node (Cat N) by	clicking it (a node is selected when displayed white on black).@End-Item @Item	Choose 'New Son' in the @Application-Link{ "Edit Menu" | "Client-Edit-Menu"	}. If this command is not available, make sure that the Inflection window	and the node (Cat N) are selected.@End-Item @Item	Type "ICat Regular" between the brackets in the dialogue box.@End-Item @Item	Check correctness of what you have typed, correct it if	necessary, then, click OK.@End-Item The Inflection Window should now look like this:@Figure{ "Inflection Window With Node (ICat Regular)" | "151" | 249 |308 } As we have seen, the category of the regular nouns contains threemain inflection classes: the a/e-class (strad-a/strad-e), theo/i-class (giorn-o/giorn-i) and the e/i-class (chiav-e/chiav-i). Theirspecification in the tree has to be done under the node (ICatRegular). Since each of these three classes represents an inflectional paradigm, and inflectional paradigms are specified by Inflection Rules, we have now reached the level of rule specification. An Inflection Rule defines which formatives are combined in whichway into wordforms and paradigms. The paradigms of the regularnouns consist each in one stem and suffixes expressing number.Consequently, we have to specify three rules (one for each class) andtwo types of formatives (stems and suffixes). All these elementshave to be specified in the same subtree.First, we create a leave node for the Inflection Rule specifiying thea/e-class. The name of the rule will be "(RIRule a/e)". Add it as a newson of the node (ICat Regular) by following the steps mentioned above.This is what the result should be:@Figure{ "Inflection Window With Node (RIRule a/e)" | "153" | 249 |308 }Then, the leave nodes for the specification of the stems and thesuffixes have to be added at the same level as the rule. We will callthis formative nodes (ICat N-Stem) and (ICat N-Suffix). First, add thenode for the stems. The procedure remains almost the same:@Item	Go into the @Application-Link{ "Inflection Window" |	"Italian.1-source: INFLECTION" } and select the node (RIRule a/e)	by clicking it.@End-Item @Item	Choose 'New Brother' in the Edit menu. This command adds new	nodes at the same tree-level as the selected node. If it is not	available in the Edit menu, make sure that the Inflection window	and the node (RIRule a/e) are selected.@End-Item @Item	Type "ICat N-Stem" between the brackets in the dialogue box.@End-Item @Item	Check correctness of what you have typed, correct it if	necessary, then, click OK.@End-Item The node (ICat N-Stem) is now added to the tree. To add the node (ICatN-Suffix), select the new node (ICat N-Stem) and proceed asdescribed above.The Inflection Window should now look like this: @Figure{ "Inflection Window With Formative Nodes" | "152" | 251 | 310}If it does not, try to correct it. How you can modify (correct) a tree isshown in the following section. @SubSection{Modifying a Tree}@Label{ "Tree-Modification" }This section shows you how to modify an Inflection Tree (or aWordformation Tree). Try it out, either in the still opened database"Italian (1)", in another database you are working in, or in thedatabase Italian (2). 						***If you choose the last option, click@Application-Link{ "open Italian.2-source" | "Italian.2-source" }.Open the window Inflection by clicking the @Application-Link{ "Inflection button" |"Italian.2-source-inflection-button" }. As youwill see, the inflection tree is only expanded until the first level(Cat N). This is done automatically by the system every time adatabase is closed and reopened. Nodes with underlying collapsedsubtrees are represented in bold. The tree can be expanded byselecting a bold node an subsequently choosing the command'Expand/Collapse' in the Edit menu. So, if you have opened thedatabase Italian.2-source and opened its Inflection window: @Item	select the node (Cat N),@End-Item @Item	choose 'Expand/Collapse' in the Edit menu (or type CTRL+E),@End-Item @Item	select the node (ICat Regular) which is displayed in bold, too,@End-Item @Item	choose 'Expand/Collapse' in the Edit menu (or type CTRL+E).@End-Item The tree is now fully extended (there are no nodes represented in boldleft). To collapse subtrees, you select a parent tree and choose'Expand/Collapse' in the Edit menu (or type CTRL+E). Try it out beforeyou go on. 						***The commands for the modification of the Inflection Tree (as well asfor the modification of the Wordformation Tree) are in the@Application-Link{ "Edit menu" | "Client-Edit-menu" }. They are onlyavailable when a node in a tree window is selected. These are thepossibilities: @Item	'New Son', 'New Brother': Add new nodes to the tree; how exactly,	see previous section @Link{ "Organization of the Inflection Tree"	| "Organization-of-the-Inflection-Tree" }. @End-Item@Item	'Edit Node Name': Opens a dialogue box with the name of the	selected node. You can change the name in the textfield, then	click OK. @End-Item @Item	'Cut Subtree', 'Copy Subtree': These commands cut/copy the	whole subtree, i.e. not only the selected node, but all the	underlying nodes, too. @End-Item @Item	'Paste Subtree as Son', 'Paste Subtree as Brother': The previously	cutted/copied subtree is pasted as the son or brother node,	respectively, of the node that is selected in the Inflection	Window. @End-Item Try it out! Then, close the tutorial database(s) - without saving!! -before you go on. @SubSection{Specification of the Formatives}@Label{ "Specification-of-Formatives" }The specification of formatives is illustrated with the example of theItalian noun inflection described in the Section  @Link{ "The Data" |"The Data" }. We have already explained the organization of thecorresponding inflection tree in one of the previous sections (@Link{ "Organization of theInflection Tree" | "Organization-of-the-Inflection-Tree" } ).We suggest that you follow the specification by first reading and thencopying the actions that are explained step by step up to andincluding section 7.2.5. Therefore, @Application-Link{ "openItalian.2-source" | "Italian.2-source" }. The inflection subtree in the @Application-Link{ "inflection window" |"Italian.2-source: INFLECTION" } looks as follows (if the tree is notexpanded, expand it with the 'Expand/Collaps' in the Edit menu; cf.@Link{ "Modifying a tree" | "Tree-Modification" }): @Figure{ "Subtree Italian" | "152" | 251 | 310 }@Label{ "Subtree Italian" }The formatives are specified in the formative windows, i.e. in thewindows corresponding to the nodes (ICat N-Stem) and (ICatN-Suffix). The windows are opened by double-clicking the node name(or: select node name and choose 'Open Node Window' in the Editmenu).Let’s start with the specification of the suffixes we need for thenouns of the a/e-class (strad-a/strad-e):First, we open the corresponding window by double-clicking the node(ICat N-Suffix). It is empty. Suffixes are usually specified as fullyspecified IFormatives. Therefore, the specification starts with thekeyword "fully specified IFormatives" followed by a list offormatives. One line specifies one formative. @Figure{ "Specification of Formatives (ICat N-Suffix)" | "154" | 432 |168 } A formative specification consists of one lexical string and one ormore surface strings separated by a white space, followed by one ormore features separated from the strings by one or more  tabs. The specificationalways ends with a NEWLINE (= RETURN).@ItemOpen the window by double-clicking the node (ICat N-Suffix) in theInflection window and type the suffix specification exactly as shown in theabove figure.Note that strings are separated from each other by one white space andthat you have to type one or more tabs between the strings and thefeatures. Strings are in quotes. Features are bracketed attribute-valuepairs, where there stands a white space between the attribute and thevalue.@End-Item The specification of the stem is done in the window corresponding tothe node (ICat N-Stem). We open it by double-clicking the node. Stemsare usually specified as underspecified IFormatives. So, thespecification starts with the keyword "underspecified IFormatives".The keyword is followed by a list of formatives. For the time being,there is only one formative, the stem of the a/e-class:@Figure{ "Specification of formatives (ICat N-Stem)" | "155" | 426 |164 }Again, one line specifies one formative. Instead of the strings, wetype an underscore, then, separated from it by a tab, the qualifyingfeature(s). Again, the specification ends with a NEWLINE (= RETURN).@ItemOpen the window by double-clicking the node (ICat N-Stem) in theInflection window and type the Stem specification exactly as shown in theabove figure.@End-Item In this way we have specified one underspecified and two fullyspecified Inflection Formatives:@Verbatim 	_		(Cat N)(ICat N-Stem)(ICat a/e)	"a" "a"		(Cat N)(ICat N-Suffix)(ICat e)(Num SG)	"e" "e"		(Cat N)(ICat N-Suffix)(ICat a)(Num PL)@End-Verbatim In the next section, we will specify the corresponding Inflection Rule.@SubSection{Specification of the Inflection Rule}@Label{ "IRule-Specification" }For the specification of the Inflection Rule we have to open thewindow of the rule node by double-clicking the node (RIRule a/e) in the inflectionwindow of @Application-Link{ "Italian.2-source" | "Italian.2-source" }. The rule specification starts with the keyword "citation-forms".Under this label you specify the wordform(s) you want to be used ascitation form. For a noun of the a/e-class - as for all Italian nouns - the citationform is, traditionally, the singular form. The corresponding wordformdefinition must combine the noun stem with the singular suffix:@Verbatim    (ICat N-Stem.a/e)	(ICat N-Suffix.a)(Num SG)@End-Verbatim The formatives are represented by the feature set that identifiesthem within the inflection unit. They are separated from each other by a tab.@Figure{ "IRule Specification: citation form" | "156" | 437 | 189 }@Item Open the rule window by double-clicking the node (RIRule a/e) in the@Application-Link{ "Inflection window" | "Italian.2-source: INFLECTION" } and typethe specification of the citation form exactly as shown in the above figure.@End-Item Under the keyword "word-forms" you specify all the wordformsbelonging to the paradigms of the inflection class in question. For thenouns of the a/e-class this is a singular and a plural form. Thesingular is already specified as citation form. Therefore, it can becopied from there. The plural form is a combination of the same stemwith the plural suffix "e":@Figure{ "IRule Specification: word forms" | "157" | 436 | 188 }@ItemSpecify the word-forms exactly as shown in the above figure.@End-Item In order to complete the rule, we now have to add at least one hardcoded entry.@Figure{ "IRule Specification: hard coded entry" | "158" | 435 | 190 }The minimal form of a hard coded entry consists of the keyword"entry", Newline, Tab followed by the specification of the lexical andthe surface strings of the underspecified IFormatives used in therule. Here, the underspecified formative is the stem. Therefore, wehave to specify the strings of the stem. We have chosen to specify "strada" with the stem "strad" as an entry. The stringsare separated from each other by a white space. As always, the specificationends with a Newline (=Return).@ItemSpecify the hard coded entry as described above.@End-Item  @SubSection{The Compilation}@Label{ "Compilation" }(Before going on with this section, it is important that you have worked throughthe two previous sections on the specification of the formatives and theinflection rule. If you haven’t, you won’t be able to execute the syntax check andthe compilation command. So, if you haven’t done the two sections yet, start with@Link{ "Specification of the Formatives" | "Specification-of-Formatives" }.However, if you are only interested in the description of the compilationcommands, just read this section. But remember, it won’t be possible to executethe commands). At this point, the specification of the Inflection Rule and the InflectionFormatives for the nouns of the a/e-class is completed. But we are not finished, yet. Before this verysmall database can be compiled, the system demands the declarationof the features in the @Application-Link{ "Feature Domains" |"Italian.2-source:feat dom-button" }. One could do this manually, but using thesyntax check for this purpose is much easier. The procedure described below isthe same whenever you want to compile a modified database. The syntax checker (@Application-Link{ "menu WordManager" |"Client-WM-menu" }, command 'Check Syntax') discovers syntactic errors andpresents a list of the features not declared yet, asking if they should be added inthe feature domains window. The syntax checker can be applied to single rule andformative windows or to the whole inflection window, depending onwhether a single window or the whole inflection window is activated.We are going to check the syntax of the whole inflection window.If the syntax in the inflection window is correct, a message windowis opened with the message "syntax o.k.". @Figure{ "Message Window: “syntax o.k.”" | "159" | 434 | 139 }At the same moment, a dialogue window is opened. It displays thefeatures not yet declared in the Feature Domains. @Figure{ "Dialogue Window: add Features to Feature Domains" | "160" |422|288}. You are invited to select the features you want to be added to FeatureDomains. Unless you made a typing error in one of the features, youusually will select them all. You select a feature by clicking it in thetextfield. To select more than one, hold down the Shift-key whileclicking them. To add the selected features, click OK. @ItemSelect the @Application-Link{ "inflection window" |"Italian.2-source: INFLECTION" }@End-Item @Item choose the Check Syntax command in the @Application-Link{ "WordManagermenu" | "Client-WM-menu" } Now, the message "syntax correct" should appear and the dialogue window for thedeclaration of features should be opened. If this is the case, go on with thefollowing step. If not, the message window displays an error message.In this case, try to correct the error and restart the syntax check. Incase you do not succeed in correcting the error(s), a last solutionis to close the database Italian.2-source (WITHOUT saving it) and toredo carefully the whole specification starting from the @Link{ "Specification ofthe Formatives" | "Specification-of-Formatives" }.@End-Item @ItemIn the appearing dialogue box, select the items to be added to featured domainsas described above. Pay attention to typing errors. When you agreewith the selected list, click OK. If there is an item you don’t want to be added(e.g. typing error), do not select it, click OK to add the selected items, correct thefeature and redo the syntax check (or simply click Cancel and redo the syntaxcheck for all items)Do this, until all the features are declared in the window@Application-Link{ "feature domains" | "Italian.2-source: FEATURE-DOMAINS" }. To check thecompleteness of the list, you can select the inflection window and redo thesyntax check. If you are not asked to add more features, all features have beendeclared.  Try it.@End-Item At this point, the database is ready to be compiled. For a firstcompilation, we choose 'Compile All' in the @Application-Link{"WordManager menu" | "Client-WM-Menu" }. A dialogue window is displayed. @Figure{ "Compile All; Dialogue Box" | "161" | 347 | 153 }When you choose "monitor entries", the entries that are generatedduring the compilation are displayed in the message window. Here,this option will be on. With the option "extensive testing" on, the system checks, among other things, ifall rules, formatives, features, etc. specified in the database are actually used. Itallows the detection of elements that, in larger, constantly changing databasesunder development, have become superfluous. It is not necessary for the smalldatabase we are working with. After these choices have been made, the compilation is started byclicking the OK button.If there are no syntax or other erros, the compilation is carried outsuccessfully. The message window indicates the time the compilationtook and - according to the option we have chosen - it lists theentries generated with the compilation. @Figure{ "Message Window after Compilation" | "162" | 437 | 124 }@ItemCompile your database as described above. The message window should look like the above figure. If it is not, themessage window displays an error message. In this case, try to correct the errorand restart the compilation. In case you do not succeed in correcting the error(s), alast solution is to close the database Italian.2-source (WITHOUT saving it) and toredo carefully the whole specification starting from the @Link{ "Specification ofthe Formatives" | "Specification-of-Formatives" } - Or simply go onreading and try it another time.@End-Item The entry is "strada". Sinds only one inflection rule with only oneentry has been specified, the compilation takes very little time (1sec.). If you have carried out successfully all the steps described until here inthe database "Italian", you can now have a look at the new entry"strada". If you have not, @Application-Link{ "open Italian.3" |"Italian.3" } now. To have a look at the new entry, select strada in the message window and choose'Retrieve lexicalized Entries' in the @Application-Link{ "WordManager menu" |"Client-WM-Menu" }. The @Link{ "lexeme browser" | "Lexeme Browser" } of theentry "strada" will be opened. @SubSection{Some adjustments}@SubSubSection{Individually Added Features}@Label{ "Individually Added Features" }At the end of previous section, we were having a look at the entry "strada". If you have carried out exactly all the steps described until here in the database "Italian.2-source", the lexeme browser of "strada" is still on your screen. Nevertheless, for the links in this section to work correctly, close Italian.2-source now and open @Application-Link{ "open Italian.3" | "Italian.3" }. If no database is opened, open Italian.3, anyhow.  Then, open the message window by clicking the @Application-Link{ "messages button" | "Italian.3-messages-button" }, select strada (double-click it) and choose 'Retrieve lexicalized Entries' in the WordManager menu. The @Link{ "lexeme browser" | "Lexeme Browser" } of the entry "strada" will be opened. At this stage in the formalization of our database, the lexemebrowser of strada looks like this: @Figure{ "Lexeme Browser of “strada”: First Version" | "163" | 410 | 398 }The @Application-Link{ "first textfield" | "Italian.3-ld-Lexemes"}shows the lexeme identifier. It constists of the string of the  citation form and the entry features associated with the lexeme. Here, the only entry feature is the feature (Cat N). But, as we have seen earlier, gender is a morphosintactically important property of nouns. Therefore, a gender feature should be associated with every noun. For the small database we are dealing with, this can be done by means of individually added features. For this purpose, we have to go back to the IRule window@Application-Link{ "(RIRule a/e)" | "(RIRule a/e)" }. "strada" is a feminine noun. Therefore, we create the feature (GenderFem) to be added. An individually added feature is specified directlywith the entry, on the same line as the keyword "entry", separatedfrom it by a tab: @Figure{ "IRule Specification: Individually Added Feature" |"164" | 406 | 172 } @ItemSpecify the individually added feature (Gender F) in the rule window (RIRule a/e).@End-Item Before the modified database is recompiled, we can check the syntaxof the window in which the modification took place. Besides the factthat the syntax is checked, the newly introduced features aredetected and added to the Feature Domains. After the syntax ischecked and the new feature (Gender Fem) is added to the FeatureDomains, we can compile the database. @ItemDo a syntax check on the modified rule window, add the new feature to featuredomains and compile the database. If you do not remember how to do syntax check and compilation, have aquick look at the section @Link{ "Compilation" | "Compilation" } @End-Item Then, you select the entry "strada" in the @Application-Link{ "Message Window" |"Italian.3:MESSAGE" } and choose 'Retrieve lexicalized Entries' (CTRL+L) in theWordManager menu:  @Figure{ "Lexeme Browser of “strada”, Gender Feature" | "165" | 409 | 397 }The gender feature (Gender Fem) is now associated with the lexeme"strada". Like most of the times, there are other possible solutions to thisproblem (cf. @Document-Link{ "Subtrees according to Gender" |"Book:The Book" | "gender-subtrees" } in Section 3.1.1.2. of the WordManager book; printed version p.49) @SubSubSection{Paradigms}@Label{ "Paradigms" }In the same lexical browser (see above figure), the paradigms fieldlooks like this: @Figure{ "Lexeme Browser of “strada”, Paradigms" | "166" | 425 | 76 }The (sub)paradigms have been created automatically by the systemaccording to the wordform definitions in the Inflection Rule. If you donot agree with the automatically generated subparadigms, you havethe possibility to define them manually in the Inflection Rule. Therefore, we go back to the @Application-Link{ "(RIRule a/e)" | "(RIRule a/e)" } inthe database Italian.3.Below the specifications of the wordforms, under the keyword"paradigms", you can define subparadigms by means of the wordformfeatures.@Figure{ "RIRule Specification: Paradigms" | "167" | 414 | 190 }The system took the wordform-features (Cat N)(Num SG) and (CatN)(Num PL) for the creation of subparadigms. As we do not want tointroduce subparadigms in a paradigm of only two wordforms, wespecify the wordform feature that matches with both wordforms:(Cat N). @ItemOpen the rule window (RIRule a/e) in the inflection window and add theparadigms definition as shown in the above figure.@End-Item@ItemThen, do a syntax check on the rule window, recompile themodified database, select "strada" in the message window and open the lexemebrowser (cf. previous section for details). @End-ItemThis is what the lexeme browser of "strada" should look like, now:@Figure{ "Lexeme Browser of “strada”, no subparadigms" | "168" | 413 | 400 }The specification of the first Inflection Rule is completed!!!@Section{A Second Inflection Rule}The first Inflection Rule covers the inflection of the regular nouns ofthe a/e-class (strad-a / strad-e). There are two other main classesof regular nouns for which there are Inflection Rules to be specified.In this section, it will be your task to specify the Inflection Rule forthe o/i-class (example: giorn-o/giorn-i). For the lingiustic data, cf.@Link{ "The Data" | "The Data" }. The procedure is simple: You write a rule and everything else neededfor the specification of Italian nominal o/i-class. The example entrywill be the masculine noun "giorno - giorni". You are going to try this in a database called Italian-Work. It is yourwork copy of the Tutorial database we have worked with until now.As a little support, a summary description of the steps you have totake will be given. In case you do not remember everything presentedin the previous sections, references are made to a help-documentand/or to the corresponding passages in the description of thespecification of the first Inflection Rule. Note that in the help-document"Support-1" one chapter corresponds to one item in the list below.Follow the suggestions step by step. Or - if you feel sure enough - it is evenbetter to try it all by yourself. So, @Application-Link{ "open Italian-Work.1" | "Italian-Work.1" }.1) Consider the linguistic data and “translate” them into a form thatis manageable by Word Manager. What kind of rule, which formatives,how to integrate them in the already existing specifications etc.(@Document-Link{ "Help" | "GoMan Texts:Tutorial;Support-1" | "Help 1"})2) Specify the formatives in a formative window. Cf. Section @Link{"Specification of the Formatives" | "Specification-of-Formatives" } and(@Document-Link{ "Help" | "Tutorial:Support-1" | "Help 2" })3) Create an Inflection Rule node (@Document-Link{ "Help" |"Tutorial:Support-1" | "Help 3" }) 4) Specify the Inflection Rule. It could be very helpful to have a look atthe (RIRule a/e) that has already been specified in the inflection window ofItalian-Work.1. Otherwise, cf. section @Link{ "Specification of the InflectionRule" | "IRule-Specification" } and (@Document-Link{ "Help" | "Tutorial:Support-1" |"Help 4" }). 5) Check Syntax and add new features to Feature Domains. Cf. Section@Link{ "The Compilation" | "Compilation" } and (@Document-Link{"Help" | "Tutorial:Support-1" | "Help 5" }) 6) Compile All. Cf. Section @Link{ "The Compilation" | "Compilation" }(@Document-Link{ "Help" | "Tutorial:Support-1" | "Help 6" }) 7) Select the entry "giorno" that is listed in the message window andchoose "Retrieve lexicalized Entries" in the WordManager menu. Thelexeme browser should look similiar to this:@Figure{ "Lexeme Browser of “giorno”" | "169" | 412 | 400 }If it does not, check whether the same information is given in anothermanner and whether you find the presentation acceptable. If theanswer to both questions is yes, all right. As we have said andrepeated several times, the system is flexible enough to allowdifferent solutions to the same problems. If the information in your lexeme browser is incorrect or incomplete,check your specification step by step following the above list and thecorresponding Help programm.  After a successfull completion of the specification for the secondInflection Rule, you could - as an additional exercise - try toformalize an IRule and the formatives for the third main inflectionclass of Italian nouns: the e/i-class. Example entries are:@Verbatim    Singular		Plural		Gender   chiav-e		chiav-i		feminine	('key')   limon-e		limon-i		masculine	('lemon')   voc-e		voc-i		feminine	('voice')@End-Verbatim Try it in the database @Application-Link{ "Italian-Work.1" | "Italian-Work.1" } inwhich you have been working until now. To compare your solution to another possible solution, @Application-Link{ "openItalian.5" | "Italian.5" } and have a look at the specification of the IRules, theFormatives as well as at the new entries, etc. Remember, that in theInflection Window, the nodes displayed in bold can be expanded withthe 'Expand/Collaps' command in the Edit menu. @Section{A First Spelling Rule, The Guided Tour}@Label{ "Inflection-Spelling-Rules" }Spelling Rules are used to modify - among other things -morphographic modifications. If you want to know more about spelling rules,read first @Document-Link{ "Section 3.1.2." | "Book:The Book" |"Section 3.1.2." } in the Word Manager book (printed version p. 57-72). @SubSection{The Data}@Label{ "ISRules-Data" }Here, we are going to treat a subpart of the data concerning the Italiannominal inflection that are presented in the Word Manager book (p. 57): thepronunciation of the letters "c" and "g" before a", "o", "u" and "e", "i" ,respectively. In order to present you the flexibility of the Word Manager formalism, we aregoing to suggest solutions that are slightly different from the ones presented inthe book. The problem we treat is the h-insertion in paradigms like@Verbatim 	Singular	Plural		bosc-o		bosch-i		'forest'	fung-o		fungh-i		'mushroom'	amic-a		amich-e		'(girl-)friend'	streg-a		stregh-e	'witch'	duc-a		duch-i		'duke'	colleg-a	collegh-i	'colleague'	amic-o		amic-i		'(boy-)friend'	teolog-o	teolog-i	'theologian'	belg-a		belg-i		'Belgian'@End-Verbatim The "h" guarantees the pronunciation /k/ and /g/, respectively, of theletters "c" and "g" before "e" and "i" (first group of examples). Where"c" and "g" stand directly before "e and "i", they are pronounced likethe first consonant in English "China" and "gender", respectively(second group of examples). Before "a" and "o", the two letters arepronounced /k/ and /g/. In the paradigms of the nouns of the first group, no phonetic modifications of thestem occur, whereas in the second group the stem is pronounced differently inthe singular and plural forms. On the graphic level, however, the modificationswithin the paradigm occur in the first group.@SubSection{Specification of the ISRule}A summary description of the above data could be the following:1) 	If in the singular the "a" or "o" suffix is preceded by "c" or "g",an "h" is inserted in the plural before "e" or "i". Within the group ofregular nouns, all inflection classes but the e/i-class have a singularwith the suffix "a" or "o". 2)	The h-insertion does not occur with some nouns of the o/i-classand the a/i-class.For 1), the steps towards a possible spelling rule could be thefollowing:Any string '.*' ending in "c" or "g" '[cg]'@Verbatim ".*[cg]"@End-Verbatim ... is replaced '/' by the same string '\1' plus 'h' ...@Verbatim "(.*[cg])/\1h"@End-Verbatim... if it is a noun stem...@Verbatim "(.*[cg])/\1h" (ICat N-Stem)@End-Verbatim...except (^) a noun stem of the e/i-class...@Verbatim "(.*[cg])/\1h" (ICat N-Stem)^(ICat N-Stem.e/i)@End-Verbatim ... when it is combined with a noun suffix "e" or "i"@Verbatim    "(.*[cg])/\1h" (ICat N-Stem)^(ICat N-Stem.e/i)	"[ei]" (ICat N-Suffix)@End-Verbatim This is the Spelling Rule we specified in the Spelling Rule window of@Application-Link{ "Italian.6" | "Italian.6" } (@Application-Link{ "showSpelling Rule Window" | "Italian.6:SPELLING-RULES" }).@Figure{ "ISRule for h-Insertion" | "170" | 516 | 165 }Go now to the message or the @Application-Link{ "WM-test window" |"Italian.6:TEST" } of "Italian.6" and open the lexeme browser of i.e."bosco", "fungo", "amica", "strega" (if you don’t remember how to dothis, see @Link{ "lexeme browser" | "Lexeme Browser" }). Have a lookat the wordforms and the ISRule Application on the plural forms.As you can observe, the ISRule transforms the lexical strings "bosci","fungi", "amice", "strege" into the correct surface forms "boschi","funghi", "amiche" and "streghe". @SubSubSection{Specification of Surface Forms}@Label{ "Surface-Forms-Specification" }As you probably have observed in the lexical browser of the aboveexamples, the Spelling Rule produced new surface forms for thenouns in question. In the plural form, an "h" has been added ("bosch","fungh", "amich" etc.). Since the definition of a formative includes allits possible surface strings, the strings of the stems with the "h"must be declared somewhere. For underspecified IFormatives of hardcoded entries like the stems of the entries we are dealing with, here,the declaration of the surface strings is done in the entryspecification in the corresponding IRule Window. Open, i.e., the IRuleWindow of the node @Application-Link{ "(RIRule o/i)" | "(RIRule o/i)" },as usual by double-clicking the node name in the inflection window. @Figure{ "Inflection Rule Window (RIRule o/i)" | "192" | 369 | 333 }The entries are specified one by one each after the headword "entry".On the second line of the entry specification, the strings are declared.The first string is the lexical string of the stem. The strings thatfollow after a white space are the surface strings (separated fromeach other by a white space). If, in the paradigm of an entry, no morphographic modifications occur, onesurface form is sufficient (e.g. "giorn" for "giorn-o/giorn-i" or "man" for"man-o/man-i" 'hand'). For others, like "bosc-o/bosch-i" and "fung-o/fungh-i",two surface stems have to be declared: one without "h" and one with "h". The specification of the surface strings has to be done before compilation. If notall the surface strings are declared, the system warns you with an error messagelike, i.e., the following one: @Figure{ "Error Message: Missing Surface Strings" | "173" | 437 | 147 } In our context, this would mean that the surface string "fungh" has not beendeclared for the stem of the entry "fungo". Try to produce a similar error message. Delete, e.g. the surface form "bosch"(including the white space on its left) and choose the Run Compiler command inthe WordManger menu.If the system gives an error message like@Verbatim  error: ";" or "expected.@End-Verbatim,you probably forgot to delete the white space between the first and the deletedsurface string. Delete it and try it again. Don’t forget to reintroduce the deleted surface string exactly as shown in theabove figure (7.26) and to recompile the database, before you go on with the nextsection. @SubSection{Introduction of Special Lexical Characters}@Label{ "Special-Lexical-Characters" } But what about the cases like"amici", "teologi" and "belgi"? They would be transformed to "amichi","teologhi" and "belghi", too. To avoid this, you can writeentry-specific ISRules like they are proposed in the Word Managerbook, at the end of @Document-Link{ "Section 3.1.2.3." | "Book:The Book" | "Section 3.1.2.3." } (printed version p. 70-71). Here, we propose another solution:the introduction of the special lexical characters "C" and "G". The strings of the nouns that are not subject to the graphicalh-insertion are written with "C" or "G": "amiC", "theoloG", "belG". In this fashion, they do not match the restrictions of the above ISRule (the stemsare not ending in "c" or "g" but in "C" or "G"). Consequently, the h-insertion is notcarried out. Then, the special characters have to be replaced by the correctsurface characters:@Verbatim 	"(.*)C/\1c"	"(.*)G/\1g"@End-VerbatimEvery string ending in "C" or "G", resp., is replaced by a string with a "c" or "g", resp. You can have a look at these two rules in the Spelling Rule Window of the version of "Italian" you opened in the previous section and that should still be on your screen (otherwise @Application-Link{ "open Italian" | "Italian.6" } and click the spelling button in the document window) Before this modifications can be compiled, the newly introducedlexical characters have to be declared in the window LexicalCharacters. It is opened by clicking on the @Application-Link{ "lexchar button" | "Italian.6-Lex char-button" } in the document window.You add new characters to the character set by simply typing theminto the already existing default list (cf. character sort order in theHelp-Glossary). We have added "C" and "G" on the same line as "c" and "g",respectively, after a white space. @Figure{ "Lexical Character Set: special characters “C” and “G”" |"171" | 200 | 283 }Before you can compile the modified database, you have to do a syntaxcheck to add the new features (spelling rule names) to the FeatureDomains (if you don’t remember how this works, see @Link{"Compilation" | "Compilation" }). In the version of Italian that is nowon your screen, the syntax check and the compilaton have already beendone. You can see that, e.g., in the window @Application-Link{ "Feature Domains" |"Italian.6-feat dom-button" }, where theISRule names are already declared.Go to the Message window or the @Application-Link{ "Test window" |"Italian.6-WM test-button" } and open the lexemebrowser of "amico" and "teologo" (if you don’t remember how thisgoes, see @Link{ "lexeme browser" | "Lexeme Browser" }). Have a lookat the wordforms and the ISRule Application and compare them with those of theentries  "bosco", "fungo", "amica", etc. In this manner you can control theapplication of the Spelling Rules. @Section{A Second Spelling Rule}First, we suggest that you read @Document-Link{ "Section 3.2." |"Book:The Book" | "Section 3.2." } in the Word Manager book (printedversion p.73-109). It presents some more complex Spelling Rulesconnected with Dutch verbal inflection. Then, you go on with a secondset of more complex spelling rules: The first ISRules (Inflection Spelling Rule) presented in this Tutorial cover amorphographic phenomenon of Italian noun inflection. The second set of ISRules -the one you are going to specify yourself - is supposed to cover (part of)a phenomenon in German: the umlaut in German nominal inflection. The procedure is simple: First we will present the data you aresupposed to specifiy. Then, you write one or more spelling rules andeverything else needed for the specification of the umlaut problem.You are going to try this in a database called German-Work. It is yourwork copy of a Tutorial database. It only contains a simplifiedversion of the subtree for regular nouns. So, do not expect to find allthe phenomena connected with regular German noun inflection in thisdocument. @Application-Link{ "Open German-Work" | "German-Work" } Try first to get acquainted with the database. Have a look at the InflectionRules, the formatives and some entries. The entries are listed in the@Application-Link{ "Word Manager Test Window" | "German-Work-WM Test-button"}. (if you don’t remember how to have a look at an entry, see @Link{ "lexemebrowser" | "Lexeme Browser" }). Remember that bold inflection nodes in theinflection window have underlying subtrees. You can expand them by selecting thebold parent tree and choosing the 'Expand/Collapse' command in the Edit menu. Note, that all nouns are written with small (lower case)letters, even though the correct surface forms are written withcapital (upper case) letters. This problem will be handeled by anotherset of rules yet to be specified.The data, in somewhat simplified terms, are the following:The plural forming in German is quite complex. The plural can beexpressed by@Item	a suffix: SG: frau — PL: frau-en ('woman'), @End-Item@Item	by an umlaut: SG: mutter — PL: mütter ('mother'),@End-Item@Item	by a suffix and an umlaut: SG: mann — PL: männ-er ('man')@End-Item@Item	or not at all SG: onkel — PL: onkel ('uncle').@End-Item  Several representations of these facts are possible. We argue for asolution in which the suffixes have precedence over the umlaut. I.e.the inflection classes are determined by the distribution of thesuffixes. These suffix classes contain both nouns with umlaut andwithout umlaut in the plural. This for the very fact that only stressed"a", "o" and "u" can be umlauted whereas all inflection classes containnouns with stems not containing one of these stressed vowels. Inaddition, not all stressed "a", "o" and "u" are umlauted in the plural(see examples below).In the database "German-Work", these suffix-defined inflectionclasses as well as a few spelling rules connected with suffixes havealready been specified. Note, that a class is defined by thecombination of a set of singular suffixes with a set of plural suffixes(cf. RIRules and suffix specification in the corresponding nodewindows). The only thing we are going to deal with, is thus theumlaut question. (A last comment for those interested in the german umlautphenomenon: There are some obligatory correlations and some fairlystrong tendencies between suffix-defined inflection classes andumlaut, but we will not take them into consideration, here. Anyhow,they do not hold for the inflection classes the examples below aretaken from) Let’s now compare the paradigms of some nouns. The examples comein pairs of two nouns belonging to the same inflection class. The firstnoun is not umlauted, the second is umlauted. The three example setsrepresent the three vowels that can be umlauted: "a", "o" and "u".@Verbatim    Inflection class: (RIRule ES/E)   Entry: brot ('bread')	Entry: floss ('raft')   Gender: neuter		Gender: neuter   brot		brote		floss		flösse   brot(e)s	brote		flosses		flösse   brot(e)	broten		floss(e)	flössen	   brot		brote		floss		flösse@End-Verbatim When the plural is umlauted, all four of its wordforms are withumlaut. This holds without any exception. Therfore, in the followingexamples only the forms of the nominative are given:@Verbatim    Inflection class: (RIRule ES/E)    Entry: luchs ('lynx')	Entry: fuchs ('fox')   Gender: masculine		Gender: masculine   luchs	luchse		fuchs		füchse   Inflection class: (RIRule -/s)   Entry: kabel ('cable')	Entry: schnabel ('beak')   Gender: neuter		Gender: masculine   kabel	kabel		schnabel	schnäbel@End-Verbatim These are the data. Try now to formulate spelling rules to cover thissituation. As a little support, a summary description of the steps youhave to take is given below. In case you do not remember everythingpresented in the previous sections, references are made to ahelp-document and/or to the corresponding passages in thedescription of the specification of the first spelling rules. Follow thesuggestions step by step. Or - if you feel sure enough - it is evenbetter to try it all by yourself. 1) Consider the above linguistic data and “translate” them into aform that is manageable by Word Manager. What is the problem?Which modifications take place in what context? To what extend arethe modifications formally predictible? Etc. (@Document-Link{ "Help"| "Tutorial:Support-2" | "Help-1" })2) Formulate spelling rules (You find a description of the syntax ofspelling rules under @Document-Link{ "Spelling Rule Syntax" | "Help:WM-Help" |"spelling-rule-syntax" }). (@Document-Link{ "Help" | "Tutorial:Support-2" | "Help-2"})3) If necessary, declare newly introduced special lexical characters in the Lexical CharacterSet. Cf. @Link{ "Specification of Special Lexical Characters" | "Special-Lexical-Characters"}.(@Document-Link{ "Help" | "Tutorial:Support-2" | "Help-3" })4) Specify example entries. Take the ones given above, choose thecorresponding Inflection Rule and add them according to the exampleof the hard coded entries that are already defined in the rule. Cf.@Link{ "Specification of Surface Forms" |"Surface-Forms-Specification" }. (@Document-Link{ "Help" |"Tutorial:Support-2" | "Help-4" }) 5) Check syntax and declare new features (here = spelling rule names)in Feature Domains. Make sure that you do the syntax check in both theSpelling Rule window and the IRule windows. Cf. @Link{ "TheCompilation" | "Compilation"}. (@Document-Link{ "Help" |"Tutorial:Support-2" | "Help-5" }) 6) Compile the modified database. Cf. @Link{ "The Compilation" |"Compilation"}. (@Document-Link{ "Help" | "Tutorial:Support-2" |"Help-6" }) 7) Select the entry "fuchs" that should now be listed in the messagewindow and choose "Retrieve lexicalized Entries" in the WordManagermenu. In the lexeme browser, choose Wordforms in the upperselection menu. It should look similiar to this: @Figure{ "Lexeme Browser of “fuchs”; Wordforms" | "175" | 410 | 398 }If it does not look similar, check whether the same information isgiven in another manner and whether you find the presentationacceptable. If the answer to both questions is yes: all right. As wehave said and repeated several times, the system is flexible enoughto allow different solutions to the same problems. Check the other entries you have specified yourself, especially whether theumlaut is correctly done, i.e. with (and only with) the nouns that take umlaut in(and only in) the plural wordforms. If the information in your lexeme browser is incorrect or incomplete,check your specification step by step following the above list and thecorresponding Help program. @Chapter{Word Formation}This chapter presents some basic elements and techniques for theformalization of wordformation with Word Manager. Like in theprevious chapters, a not too complex concrete example will be given.In a second step, you will be invited to formalize a wordformationphenomenon yourself. For a better understanding of the followingsections, it is recommended to go through the chapters aboutinflection, first. So, if you haven’t read them yet, go back to @Link{"The Real Work" | "Real-Work" }.To get acquainted with wordformation in Word Manager, read@Document-Link { "Section 4.1." | "Book:The Book" | "Section 4.1." } inthe Word Manager book (printed version p. 111-126). It covers partsof derivation and compounding connected with English nouns andadjctives. Then, go on with the following sections.To start with, @Application-Link{ "open WF-Italian.1" | "WF-Italian.1" }(WF stands for Wordformation). The @Application-Link{ "inflection window" |"WF-Italian.1-inflection-button" } contains the subtree for the regularyinflecting nouns (as we have seen it in the chapter Inflection) and a secondsubtree for regular Italian adjectives. To get familiar with this enlargeddatabase, have a look at it (Inflection Rules, Inflection Formatives, SpellingRules, Entries etc.; if you do not remember how to have a look at entries, see@Link{ "lexeme browser" | "Lexeme Browser" }). This is the database we are goingto work in. @Section{Prefixing Italian Adjectives: The Data}@Label{ "Prefixing-Data" }Italian adjectives can be prefixed to form new adjectives. There arequite a few prefixes. Some of them are presented in the example listbelow:@Verbatimutile - inutile		  'usefull - useless'   normale - anormale		'normal - abnormal'   contento - scontento		'contented - discontented'   abitato - disabitato		'inhabited - uninhabited'   nazionale - internazionale	'national - international'   labiale - bilabiale		'labial - bilabial'@End-Verbatim In order to translate these wordformation-related data into WordManager elements, we must first have a look at how the adjectivesare specified in the Inflection Window. If you haven’t done it yet,@Application-Link{ "open WF-Italian"| "WF-Italian.1" }. Go into theInflection Window, in the subtree (Cat Adj) (RIRule A-Regular) andopen the IRule nodes (RIRule o/a/i/e) and (RIRule e/e/i/i). Rememberthat the nodes in bold have underlying son-nodes. To expand them,select the bold parent node and choose 'Expand/Collapse' in the Editmenu. These two Inflection Rules specify the two main inflection classes ofregular Italian adjectives (the o/a/i/e-class and the e/e/i/i-class).The paradigm of a regular adjective is composed of a stem that iscombined with four different suffixes expressing number and gender.The stem is an underspecified IFormative, the suffixes are fullyspecified IFormatives. In order to make a new adjective entry into one of these rules wemust, consequently, specifiy its stem (see hard coded exampleentries). When a new entry is a derived word, it is created through theapplication of a Wordformation Rule (WFRule). To enter prefixedadjectives into a regular adjective class, we must thus write aWFRule that specifies an adjective stem. The stem of a prefixed adjective is composed of a prefix and the stemof the adjective it is derived from (e.g. the stem of "inutile" = "in" +"util") . A wordformation rule that specifies the formation of prefixedadjectives must combine a prefix and an adjective stem to a newadjective stem. The following section will show how to formulatesuch a rule. @Section{A first Wordformation Rule: The Guided Tour}@Label{ "first-WFRule" }The first Wordformation Rule will be presented in a "guided tour".Just read and observe. However, to gain some practical experiencewith the Word Manager commands etc. you might carry out the stepsdescribed below in the database "WF-Italian". If you haven’t openedit yet, @Application-Link{ "open WF-Italian"| "WF-Italian.1" }.After this presentation, you will be invited to write a rule byyourself. @SubSection{The Organization of the Wordformation Tree}@Label{ "WF-Tree-Organization" }In the Wordformation Tree, you specify Wordformation Rules andWordformation Formatives. The organization into a hierarchical treestructure works in exactly the same manner as for the InflectionTree. You open the Wordformation Window by clicking the @Application-Link{"wordform button" | "WF-Italian.1-wordform-button" } in the document window.Then, starting from the node "root" you can add new nodes by means of thecommands 'New Son' and 'New Brother' in the Edit Menu (cf. @Link{ "Organizationof the Inflection Tree" | "Organization-of-the-Inflection-Tree"}). TheWordformation Rules and the Wordformation Formatives are specified in theterminal nodes (leave nodes) of the tree. One of the possible structures of the Wordformation tree startswith the basic distinction between Derivation and Compounding. Thefirst son-node to be added to the root-node is (WFCat Derivation):@Figure{ "Wordformation Window: Node (WFCat Derivation)" | "176" |300 | 331 } @ItemOpen the Wordformation window of German-Work.1 and add the new node.Remember that, to add a new node name, you must select the parent or brothernode of the future node, then choose 'New Son' or 'New Brother' in the Edit menu,type a node name into the dialogue box and click OK. Here, the new node is ason-node. @End-ItemIn the structure we have chosen for the wordformation tree inquestion, we introduce a further level of subgroups defined by theinflection classes of the basis and its derivative. For ourexample this is a node named (WFCat Adj-To-Adj). Then, the different methods of adjective-to-adjective-derivation aredistinguished. In Italian, adjectives can be derived to adjectives by prefixing andby suffixing. The Rule node for prefixing is called (RWFRule Prefixing): @Figure{ "Wordformation Window: Node (RWFRule Prefixing)" | "177" |302 | 334 } @ItemAdd the two new nodes as shown in the above figure.@End-Item (RWFRule Prefixing) is the node in which we will specify the wordformationrule for the prefixing of adjectives. When we are dealing with derivation, there are derivational affixesinvolved. These derivational affixes are specified as WordformationFormatives. They have to be specified in the same subtree as thecorresponding  Wordformation Rule(s). The prefixes used for the derivation of adjectives must be specified in the samesubtree as the Wordformation Rule that defines prefixing of adjectives.Therefore, we add the node (WFCat Prefix) as a broher node of the rule node(RWFRule Prefixing). @Figure{ "Wordformation Window: Node (WFCat Prefix)" | "179" | 299 | 332 }@ItemAdd the node (WFCat Prefix) as a brother node of the node (RWFRule Prefixing).@End-Item This is the node in which we will specify the prefixes used to form new adjectives.Note, that this structure of the tree is by no means the definite one.It is possible that, during the specification of the wordformationprocesses of a language, intermediate levels have to be introduced orsuperfluous distinctions can be deleted. For this kind of operations,the @Application-Link{ "Edit menu" | "Client-Edit-Menu" } contains - along withthe 'New Son' and 'New Brother' commands - a 'Cut Subtree', a 'Copy Subtree' andtwo 'Past Subtree as..' commands. They can also be used to delete or moveerroneously added nodes. @SubSection{Specification of the Wordformation Formatives}@Label{ "WFFormative-Specification" }The prefixes are Wordformation Formatives. We will specify them inthe leave node (WFCat Prefix) of the database "Italian Work" (seeFigure "Wordformation Window: Node (WFCat Prefix)" in previoussection). A double-click on the node name opens the correspondingformative window:  @Figure{ "Specification of WFFormatives" | "181" | 429 | 160 }The specification starts with the keyword "fully specifiedWFFormatives". Underneath the keyword, each line specifies oneformative, i.e. in our example one prefix. The specification mustcontain:@Itemthe lexical string of the formative@End-Item @Itemwhite space@End-Item @Itemthe surface string(s) of the formative@End-Item @Itemif necessary, a distinctive feature separated from the strings by a tab (e.g.the two different prefixes "in"). @End-Item @ItemNewline@End-Item Go into the Wordformation window of WF-Italian.1, open the formative window(WFCat Prefix) by double-clicking the node name and specify the prefixesexactly as shown by the above figure. @SubSection{Specification of the WFRule}@Label{ "WFRule-Specification" }The node (RWFRule Prefixing) is the leave node in which we willspecify the Wordformation Rule for the formation of prefixedadjectives (see Figure "Wordformation Window: Node (WFCat Prefix)"above). You open the corresponding rule window by double-clickingthe node (RWFRule Prefixing) in the Wordformation window. A Wordformation Rule consists, roughly speaking, of three parts: @Item	the source specialization@End-Item@Item	the target specialization@End-Item @Item	the example entries@End-Item @SubSubSection{Source Specialization}@Label{ "Source-Specialization" }In the source specialization, you specify the material out of whichthe new entry has to be constructed. We have seen in @Link{ "TheData" | "Prefixing-Data" },  that the stem of a prefixed adjective iscomposed of a prefix and the stem of the basis word. Thespecification of these two source elements looks as follows:@Figure{ "Wordformation: Source Specialization" | "178" | 411 | 171 } The source specialization starts with the keyword "source". On a newline, you specify the first source element (here: the prefix); type thedigit "1", tab, and then the string and/or the the feature set of thefirst source element. Here we have specified the feature (WFCatPrefix). This feature matches with the prefixes we have specified inthe previous section. They are specified with this feature in the samewordformation subtree.The first element is a Wordformation Formative. The second sourceelement, the adjective stem, is an Inflection Formative. Thespecification of this second kind of source elements starts with theindication of the Inflection Rule or the Inflection Rule group theelement is taken from. Since adjectives out of both the regularinflection classes can be prefixed (e.g. "conten-o > sconten-o",""util-e > inutile"), we can indicate both the rules as source rules. Onepossibility is: @Verbatim (RIRule o/a/i/e)|(RIRule e/e/i/i) @End-Verbatim where " | " stands for "or".We have chosen another way, i.e. we have specified the parent node ofboth the IRules in question: (RIRule A-Regular). Especially in IRulegroups with numerous IRules, the indication of the parent node is amore elegant solution than the enumeration of all the single IRules. When you observe carefully the above figure, you see the character ">"after the specialization of the source IRule. @Verbatim (RIRule A-Regular) >@End-Verbatim This is a so-called IRule Propagation. It means that the InflectionRule specified with ">" after it is propagated to be the target rule,too. The propagation is handy in cases like prefixing, where theinflection class of the derivative is the same as the inflection classof its basis. It allows us, here, to handle the prefixing of adjectivesof all regular inflection classes with one Wordformation Rule,although the the derivatives must be inserted in different inflectionclasses. The inflection class of the derivatives, after all, dependsdirectly on the class of the basis. This direct relation can beexpressed by the propagation ">".The Inflection Rule the second source element is taken fromis thus one of the Inflection Rules specified under (RIRule A-Regular).The IRule Propagation specifies it as target rule, too. But what istaken from this source rule? Let’s have another look at the sourcespecification of our WFRule: @Figure{ "Wordformation: Source Specialization" | "178" | 411 | 171 } The second source element is an adjective stem (ICat A-Stem). Thisis the feature that specifies the adjective stems in the correspondingInflection Rules. It is specified on a new line, underneath thesource rule specification, i.e. underneath the Inflection Rule the element istaken from. Type: tab, 2, tab, (ICat A-Stem).When you compare the specifications of the first and the secondelement, you see that the prefix, a Wordformation Formative, is typedin at the left margin of the window, whereas the adjective stem, anInflection Formative, is indented from the left margin by a tab. Thisis a syntactical convention: WFFormatives are specified immediatelyon a new line, whereas Inflection Formatives are specified after anewline and a tab. @Item Go now into the @Application-Link{ "Wordformation window" |"WF-Italian.1-wordform-button" } of WF-Italian.1, open the rule window bydouble-clicking the node (RWFRule Prefixing) and try to specify thesource specialization exactly as described in this section. @Link{ "Go back" | "source-specialization" } to the start of the section and copy the specification step by step.If you have already done the specification while reading the section, wenevertheless suggest that you read it a second time and controle carefully yourspecification. The syntax of wordformation rules is quite complex.@Link{ "Goback" | "source-specialization" } @End-Item @SubSubSection{Target Specialization}@Label{ "target-specialization" } The target specialization for the prefixing of Italian adjectives looks like this:@Figure{ "Wordformation: Target Specialization" | "182" | 387 | 164 }The target specialization starts with the keyword "target".Underneath the keyword, you specify the target rule, i.e. the rule inwhich the new entries formed by the WFRule will be inserted. The target rule must be specified unambiguously as one (and only one) individualInflection Rule, because otherwise it is not clear which inflection class thenewly formed entries belong to. Therefore, the target rule specification isusually the indication of one individual Inflection Rule. Here, however, we are dealing with a special case, in so far as we specified anIRule propagation in the source restriction (see previous section).We defined that the source IRule is propagated as target IRule. Thespecification of the source IRule implies the specification of thetarget IRule. Consequently, it is not necessary to specify a targetIRule when there is an IRule propagation in the source specification. In order to exclude any contradictory statements between source and targetspecialization, it is even better not to give any specific information on thetarget IRule. Therefore, we write a Wildcard IRule instead of a common IRulespecification:@Verbatim (?IRule ?)@End-Verbatim Of course, a wildcard IRule can only be used when the sourcespecialization contains an IRule propagation. Underneath the target IRule (here: the wildcard IRule), we specify inwhich way the source elements are combined to what target element. After a tab, the digits used in the source specialization indicate inwhich way the source elements are put together. "1" SPACE "2" meanshere, that the prefix ("1") is combined with the adjective stem ("2").After the digits and a tab, the feature (ICat A-Stem) indicates whatkind of formative the combined element will be: an adjective stem(ICat A-Stem). In this way we have specified that a prefix and an adjective stem areput toghether to form a new adjective stem in the same InflectionRule the source stem is taken from.@ItemGo now into the  rule window (RWFRule Prefixing) and try to specify thetarget specification exactly as described in this section. @Link{ "Go back" | "target-specialization" } to the start of the section and copy the specification step by step.@End-Item @SubSubSection{Source Constraint}Just as for Inflection Rules, we have to add at least one hard-codedexample entry to complete the Wordformation Rule:@Figure{ "Wordformation: Source Constraint" | "183" | 425 | 251 }The specification of a hard coded entry starts with the keyword"source-constraint". What we do under this keyword, is nothingelse but to write a source specification in which all elements areunambiguously defined.For the first source element, we have chosen the prefix "s" among theprefixes with the feature (ICat Prefix). For the second element, wespecified the (RIRule o/a/i/e) as the source IRule from which wechose the stem "content" of the entry "contento" ('contented'). Whenyou compare the syntax of this part of the source restriction with theone of the source specialization, you see that they are exactly thesame (digits, tabs, newlines etc.). Finally, the actual entry has to be specified underneath the sourceconstraint. The syntax is almost the same as for an entryspecification in a IRule window (cf. end of section @Link{ "IRuleSpecification" | "IRule-Specification" }). You type the keyword "entry",newline, tab and then the lexical string of the new entry. It is notnecessary to specify the surface strings as well. They must alreadybe given in the specification of the Wordformation and InflectionFormatives, respectively.@ItemGo into the  rule window (RWFRule Prefixing) and try to specify thesource-constraint exactly as presented in this section.@End-ItemNow, our first WFRule is ready for compilation. However, as alwyays,we first have to do a:@SubSection{Syntax-Check and Compilation}@Label{ "WF-Compilation" }The syntax-check detects syntax errors and helps you to add thenewly introduced features to Feature Domains. After you have donethat, the database can be compiled. For this purpose, use thecommands 'Check Syntax' and 'Run Compiler' in the @Application-Link{"WordManager menu" | "Client-WM-Menu" }. If you do not remember how to usethem, see section @Link{ "Compilation" | "Compilation" } in which the commandsare explained for the window Inflection. They work exactly the same forWordformation. Note, that 'Compile All' initiates a compilation of thewhole database, whereas with 'Run Compiler' only the modifiedsubtrees are recompiled. Their handling, however, is exactly thesame. Go now into the database "WF-Italian.1". If you have copied all the stepsdescribed above, stay in the database. If you are not sure that you have done itcorrectly or if you haven’t followed the steps at all, open "@Application-Link{"WF-Italian.2-source" |  "WF-Italian.2-source" }". Do a syntax check on the Wordformation window, confirm the addition of the newformatives and compile the database. The message window should now contain - perhaps among others - the new entry"scontento" ('discontented'). This is the entry that has been created by theWordformation Rule we just have specified. (If you do not succeed in compiling your specification in WF-Italian.1, try todetect the error(s). If that does not work, you should try to do the specificationonce again (close the database "WF-Italian.1" WITHOUT saving it and restart withthe section @Link{ "A First Word Formation Rule" | "first-WFRule" }). If that doesnot work either, you can still practice the syntax check and the compilation inthe database "@Application-Link{ "WF-Italian.2-source" |"WF-Italian.2-source" }"). When the compilation is successfully completed, open the lexeme browser of"scontento" (select it and choose 'Retrieve lexicalized Entries' in theWordManager menu; how to handle a lexeme browser, see section @Link{"Information Retrieval on Entries" | "Lexeme Browser" }). This is what you shouldget on your screen: @Figure{ "Lexeme Browser of “scontento”" | "185" | 410 | 401 }Then, choose 'Creation History' in the upper selection menu ofthe lexeme browser. The lexeme browser, then, gives you information about thecreation of this complex entry:  @Figure{ "Lexeme Browser of “scontento”: Creation History" | "186" |409 | 399 } Finally, try to add some more hard coded entries through theapplication of this first WFRule. You can do so by adding, in the same rule window, new source constraints andentries after the ones for "scontento". Start on a new line with the keyword"source-constraint" and proceed exactly as the first hard coded entry shows. Of course, the combination of prefix and adjective stem should be different inorder not to create the same entry twice. And don’t forget that you have tocompile the database to add new hard coded entries. So, try to add one or two ofthe following prefixed adjective derivatives:@Verbatimutile - inutile		  'usefull - useless'   normale - anormale		'normal - abnormal'    abitato - disabitato		'inhabited - uninhabited'    nazionale - internazionale	'national - international'@End-Verbatim One last tip: all the error messages displayed during the syntaxcheck and the compilation should be easily understandable. However,if a message containing the following sentence occurs:@Verbatim	entry constraint of WFRule (RWFRule	Derivation.Adj-To-Adj.Prefixing) must be triggered.@End-Verbatim check this in the source-constraint you wrote:@Itemtyping mistake in one of the two strings (prefix or adjective stem)?@End-Item @Item	you specified an adjective stem of an adjective that is not	specified as hard coded entry in one of the two Inflection Rules	for regular adjectives. However, all the above mentioned simple	adjectives are specified in either the (RIRule o/a/i/e) or the	(RIRule e/e/i/i) @End-Item @Item	the adjective stem you specified is not of an adjective that is	coded in the IRule you specified as source IRule; e.g. "utile" is	specified in the (RIRule e/e/i/i) whereas "abitato" is specified	in the (RIRule o/a/i/e). @End-Item @Section{Wordformation Spelling Rules}@Label{ "WFSRule-Specification" }In Wordformation like in Inflection, we have to deal withmorphophonetic and morphographic modifications. Thesemodifications can be formalized with Spelling Rules. Basically, the spelling rules in wordformation are the same as the spelling ruleswe have already seen for Inflection (cf. @Link{ "Inflection Spelling Rules" |"Inflection-Spelling-Rules" }). The ISRules are fired when Inflection Rulescombine formatives. The WFSRules are fired when Wordformation Rules combineformatives.The examples of WFSRules we are going to consider are connectedwith the prefixing of Italian adjectives as described in the previoussections. The prefix "a" has a variant "an" before vowel:@Verbatim 	politico	>	apoliticoe    vs   alcolico > analcolico@End-Verbatim 	 We can translate this into a spelling rule:The prefix "a"...@Verbatim "a" (WFCat Prefix)@End-Verbatim  is replaced by "an"...@Verbatim "a/an" (WFCat Prefix)@End-Verbatim when it is combined with a string beginning with a vowel@Verbatim "a/an" (WFCat Prefix)	"[aeiou].*"@End-Verbatim For the time being, we only consider prefixing of adjectives.Therfore, this WFSRule can be inserted as a rule-specificSpelling Rule in the corresponding Wordformation Rule, i.e. in the WFRule wehave specified in the previous sections, the (RWFRule Prefixing):@Figure{ "Wordformation: rule-specific WFSRule" | "187" | 398 | 299 } The rule-specific spelling rule is inserted after the targetspecifiaction. It starts with the keyword "ISRules". Then, it isspecified as explained above (for syntax of spelling rules see@Document-Link{ "Syntax" | "???" | "???" }).A second example is more general in so far as it is much lessrestricted on prefixing of adjectives than the previous one. The prefix"in" is used for the prefixing of adjectives, nouns and verbs (by "in"we mean both the negative and the locativ-caustive prefix). Like inEnglish, "in" has several variants:@Verbatim	"im" before "b" "m" "p":	brogliare > imbrogliare	'to confuse, to muddle'	maturo > immaturo	'immature'	perfetto > imperfetto	'imperfect'	"il" before "l"	legale > illegale	'illegal'	"ir" before "r"	reale > irreale		'unreal'@End-Verbatim The Spelling Rule for the first variant could be formulated a follows:@Verbatim "in/im" (WFCat Prefix)		"[bmp].*"@End-Verbatim In this fashion, the Spelling Rule is strong enough to match withprefixing of ajectives, nouns and verbs. Therefore, we can specify itas a General Spelling Rule in the Spelling Rule window. Like allgeneral spelling rules, it must be given a name. This name starts withthe attribute WFSRule (WordFormation Spelling Rule): @Figure{ "General WFSRule: “in/im”" | "188" | 420 | 326 }Now that we have specified the two spelling rules, we can test themby specifying two new hard-coded entries in the (RWFRule Prefixing).We have chosen the example entries "alcolico > analcolico" and"possibile > impossibile": @Figure{ "Wordformation: Hard-Coded Entries “analcolico” and“impossibile”" | "189" | 353 | 470 }If we compiled the database now, there would be an error messageconcerning surface forms that have not yet been defined. Indeed, theSpelling Rules produce the strings "an" and "im". These surface formshave to be specified with the corresponding prefix (bold is ours):@Figure{ "Specification of Extra Surface Strings" | "191" | 439 | 182 }Now, the Syntax can be checked and the database compiled (cf.@Link{ "Compilation" | "WF-Compilation" }).A new version of the tutorial-database "WF-Italian" shows thisalready compiled stage. @Application-Link{ "Open WF-Italian.3" |"WF-Italian.3" }. Go into the test or the message window, search for "analcolico" and"impossibile" and open their lexeme browser (how to handle a lexemebrowser, see section @Link{ "Information Retrieval on Entries" |"Lexeme Browser" }). Then, choose 'Creation History' in the upperselection menu or the lexeme browser. The lexeme browser gives youinformation about the creation of this complex entry. Notice theWFSRule application: @Figure{ "Lexeme Browser of “impossibile”: Creation History" | "190"| 411 | 397 } As a little excercice, you could specify the WFSRules for the variants "il" and"ir" of the prefix "in". Formulate them in the Spelling Rules window ofWF-Italian.3., underneath the spelling rule for the variant "im". To test them, try to add two more prefixed adjectives as hard coded entries inthe (RWFRule Prefixing): @Verbatim 	legale > illegale	reale > irreale.@End-VerbatimIf you do not remember how to proceed, go back to the description of thespecification "im" in this section and follow the description step by step. One last tip: all the error messages displayed during the syntax checkand the compilation should be easily understandable. However, if amessage containing the following sentence occurs: @Verbatim	entry constraint of WFRule (RWFRule	Derivation.Adj-To-Adj.Prefixing) must be triggered.@End-Verbatim check this in the source-constraint you wrote:@Item	typing mistake in one of the two strings (prefix or adjective	stem)? @End-Item @Item	you specified an adjective stem of an adjective that is not	specified as hard coded entry in one of the two Inflection Rules	for regular adjectives. However, "legale" and "reale" are	specified in the (RIRule e/e/i/i) @End-Item @Item	the adjective stem you specified is not of an adjective that is	coded in the IRule you specified as source IRule. "legale" and	"reale" are specified in the (RIRule e/e/i/i).@End-Item @Section{Suffixing Italian Adjectives: The Data} @Label{"Data-Suffixing" }We suggest that you try to formalize awordformation problem yourself, after heaving read the previouschapters and the @Document-Link { "Section 4.1." | "Book:The Book" |"Section 4.1." } in the Word Manager book (printed version p.111-126).. Since both the linguistic phenomena and the Word Managerrules are quite complex, the formulation of a first WordformationRule won’t be too easy. So, don’t hesitate to use the Tutorial, theWord Manger book and the Help program.We stay in the field of Italian adjective derivation: the derivation ofadjectives from nouns. The presentation of the linguistic data isrestricted to the most general regular phenomena. It is based on thedefinitions of the regular inflection classes of Italian nouns andadjectives as they have been presented in the previous chapters ofthis tutorial. For a better understandign of the data, it isrecommended to @Application-Link{ "open “WF-Italian-Work.1”" |"WF-Italian-Work.1" } now. It is your workcopy of a tutorial WM-database. In Italian, several suffixes are used to derive adjectives fromnouns. Some of them are listed below:@Verbatim 	studente > studentesco	'student (n.)  > student (adj.)'	bosco > boschivo	'forest	> wooded, woody, wood...'	dolore > doloroso	'pain > painful'	ragione > ragionevole	'reason > reasonable'	linea > lineare		'line > linear'	strada > stradale	'streat, road > street..., road... '@End-Verbatim As far as inflection classes are concerned, there are two types ofsuffixes: @Itemthe first group forms adjectives of the o/a/i/e-class:@Verbatim 	masc.sing.	studentesc-o		doloros-o	fem.sing.	studentesc-a		doloros-a	masc.plur.	studentesch-i		doloros-i	fem.plur.	studentesch-e		doloros-e@End-Verbatim@End-Item@Itemthe second group forms adjectives of the e/e/i/i-class:@Verbatim 	masc.sing.	amichevol-e	linear-e 	fem.sing	amichevol-e	linear-e	masc.plur	amichevol-i	linear-i	fem.plur	amichevol-i	linear-i@End-Verbatim@End-Item There is no regular relation between inflection class of thenouns and the inflection class of the derived adjectives. All suffixescan be attached to nouns of all three of the regular nominal inflectionclasses (the a/e-class, the o/i-class, the e/i-class; cf. the abovelist of examples).Finally, there are some morphographic complications with "c" and"g". They are strongly connected with the morphographic phenomenawe treated in the chapter Inflection (see @Link{ "Inflection SpellingRules" | "ISRules-Data" }).A noun stem of the a/e or the o/i-class ending in "c" or "g" has an hinserted after it, when it is combined with a suffix starting with"e" or "i":@Verbatim 	amic-o		amich-evole	bosc-o		bosch-ivo@End-Verbatim @Section{A Second Wordformation Rule}Consider the data concerning Italian noun-adjective-derivationexplained in the previous section. Then, try to formulateWordformation Rules etc. to formalize the phenomena presentedthere. You are going to try this in a database called Italian-Work. It isyour working copy of a Tutorial database. If you haven’t alreadyopened it while you were reading the previous section,@Application-Link{ "open “WF-Italian-Work.1”" | "WF-Italian-Work.1"} now. Try first to get acquainted with the database. Have a look at theInflection Rules, the formatives and some entries. The entries arelisted in the WM Test Window. (if you don’t remember howto have a look at an entry, see @Link{ "lexeme browser" | "LexemeBrowser" }). As always when a database is opended, the trees are not fully extended in boththe Inflection and the Wordformation window. Each node in bold has underlyingsubnodes. To extend the tree, select a bold node and choose the 'Expand/Collapse'command in the Edit menu. The trees are fully extended, when there are no boldnodes left. Then, proceed following the steps porposed below. TheHelp program is limited to some general points. However, there is adatabase in which we present a possible solution. You can use it as anadditional help. Formulate first the basic RWFRules and only then the corresponding Spelling Rules. It is easierto tackle one problem at a time.1) Translate the data presented above into Wordformation Rules andWordformation Formatives. Pay attention to the fact that the targetrule must always be unambiguously determined. Therfore, a first tip:you will have to specify two different RWFRules, one for derivativesof the o/a/i/e-class and one for the derivatives of the e/e/i/i-class.Make sure, that these RWFRules match only with the suffixes thatform adjectives of the corresponding class. (@Document-Link{ "Help" |"GoMan Texts:Tutorial;Support-3" | "Help-1" })2) Create Rule nodes and WFFormative nodes. Specify the Suffixes asWFFormatives. Formulate the RWFRules: the source specialization, the targetspecialization and at least one source-constraint with a hard coded entry. Cf.respectively: @Item @Link{ "Organization of the Wordformation-Tree" |"WF-Tree-Organization" } and/or @Document-Link{"Help" | "Tutorial:Support-3" |"Help-2.1."}@End-Item @Item @Link{ "Specification of Wordformation Formatives" |"WFFormative-Specification" } and/or @Document-Link{"Help" |"Tutorial:Support-3" | "Help-2.2."} @End-Item@Item @Link{ "Specification of the WFRule" | "WFRule-Specification" } and/or@Document-Link{"Help" | "Tutorial:Support-3" | "Help-2.3."} @End-Item 3) Syntax Check and Compilation (@Document-Link{ "Help" |"Tutorial:Support-3" | "Help-3" }) 4) Open the lexeme browser of the new entries and considerthe data. How to handle the lexeme browser, cf. @Link{ "lexemebrowser" | "Lexeme Browser" }5) Have a look at the data about morphographic phenomena connectedwith suffixing of nouns. See end of section @Link{ "The Data" |"Data-Suffixing" }. Then, try to formulate Wordformation SpellingRules that cover the phenomena described there. Cf. @Link{ "WordFormation Spelling Rules" | "WFSRule-Specification" } and/or@Document-Link{ "Help" | "Tutorial:Support-3" | "Help-5"}.6) Test the WFSRule with two hard-coded entries. We suggest thatyou derive "boschivo" from "bosco" and "amichevole" from "amico".(@Document-Link{"Help" | "Tutorial:Support-3" | "Help-6" })7) Syntax Check and Compilation (@Document-Link{ "Help" |"Tutorial:Support-3" | "Help-3" }) 8) After a succesful compilation, open the lexeme browser of the newentries and check if all data are correct (inflection class, wordforms, generation history, WFSRule application, etc.). If you have anydoubts, compare your results to ours. In "WF-Italian.4" we haveformalized the noun-to-adjective suffixing as presented here. Theentries are listed in both the message and the test windows.@Application-Link{ "Open WF-Italian.4" | "WF-Italian.4" }. 