(provide :defsystem)(ccl::init-logical-directories)(setf (logical-pathname-translations "Environment")      `(("**;*.*" "ccl:environment;**;*.*")))(setf (logical-pathname-translations "defsystem")      '(("**;*.*.*" "Environment:defsystem;**;*.*")))(setf (logical-pathname-translations "system-definitions")      '(("**;*.*.*" "defsystem:SystemDefinitions;**;*.*")))(progn  (unless (probe-file "defsystem:mk-defsystem.fasl")    (compile-file "defsystem:mk-defsystem" :verbose t))  (load "defsystem:mk-defsystem" :verbose t));-----------------------------------------------------------------------(export '(make::load-patches make::patching) (find-package :make))(defun make:load-patches (system patch-dir-string)  (let ((files (directory (merge-pathnames "*.patch" patch-dir-string))))    (when files      (format *trace-output*              "~%~%;Loading patches for the system ~A:" system)      (dolist (file files)        (let ((*warn-if-redefine* nil)              (*compile-definitions* t)              (*load-verbose* t))          (load file)))      (format *trace-output*              "~%~%"))))(defmacro make:patching ((name doc-string) form)  `(progn (eval-when (:compile-toplevel :load-toplevel)            (format *trace-output* "~%;Redefinition of ~S:~%;~A"                     ',name                    ,doc-string))          ,form))    ;-----------------------------------------------------------------------(push "system-definitions:" make::*central-registry*)