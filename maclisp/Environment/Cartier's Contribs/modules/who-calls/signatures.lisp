;;; -*- package: CC -*-;;;;;;; Recognized Toplevel Forms;;;;;; The only interresting toplevel forms are the;;; ones that can be edited via edit-definition and;;; can meaningfully contain code references.;;;(in-package "CC")(define-toplevel-signature deftype                   type)(define-toplevel-signature defconstant               ccl::constant)(define-toplevel-signature defvar                    variable)(define-toplevel-signature defparameter              variable)(define-toplevel-signature defstruct                 structure)(define-toplevel-signature defclass                  class)(define-toplevel-signature define-condition          class)(define-toplevel-signature define-method-combination method-combination)(define-toplevel-signature defmacro                  function)(define-toplevel-signature define-modify-macro       nil)(define-toplevel-signature defpascal                 variable)(define-toplevel-signature defccallable              variable)(define-toplevel-signature defun                     function)(define-toplevel-signature defgeneric                function)(define-toplevel-signature defmethod                 method  :extractor extract-defmethod-signature  :editor edit-defmethod  :stringer string-defmethod);;;;;;; Defmethod Utilities;;;(defun extract-defmethod-signature (list)  (let ((qualifiers nil)        (specializers nil)        (arguments))    (dolist (x (cddr list))      (cond ((listp x)             (setq arguments x)             (return t))            (t             (push x qualifiers))))    (dolist (x arguments)      (cond ((memq x lambda-list-keywords)             (return t))            ((listp x)             (push (second x) specializers))            (t             (push t specializers))))    (list      (first list)      (second list)      (nreverse qualifiers)      (nreverse specializers))))(defun edit-defmethod (sig)  (edit-definition    (destructuring-bind (name qualifiers specializers) (cdr sig)      (find-method (symbol-function name)                   qualifiers                   (mapcar (function find-class) specializers)))    'method))(defun string-defmethod (sig)  (string-downcase    (apply (function format)           nil "(~S ~S ~{~S ~}~:S)" sig)))