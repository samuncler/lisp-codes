;;; -*- package: CC -*-;;;;;;; Unrooted pop-up menus;;;(in-package "CC")(export '(pop-popper-menu          make-popper-menu          return-from-popper-menu          make-list-popper-menu))(defun pop-popper-menu (popper-menu)  (catch 'popper-menu-return    (let ((point (view-mouse-position nil)))      (let ((selection (with-cursor *arrow-cursor*                         (#_PopUpMenuSelect                           :ptr (menu-handle popper-menu)                           :word (+ (point-v point) -4)                           :word (+ (point-h point) -7)                           :word 0                           :long))))        (let ((menu-item (logand #x0000FFFF selection)))          (if (= menu-item 0)              (values)            (menu-item-action              (nth (- menu-item 1)                   (menu-items popper-menu)))))))))(defun make-popper-menu (menu-items)  (let ((menu (make-instance 'menu)))    (ccl::init-menu-id menu)    (with-pstrs ((title ""))      (let ((handle (#_NewMenu :word (menu-id menu)                               :ptr title                               :ptr)))        (#_InsertMenu :ptr handle                      :word -1)        (setf (slot-value menu 'menu-handle) handle)))    (apply (function add-menu-items) menu menu-items)    menu))(defun return-from-popper-menu (value)  (throw 'popper-menu-return         value));;;;;;; List popper-menus;;;(defclass value-menu-item (menu-item)    ((value :initarg :value)))(defmethod menu-item-action ((self value-menu-item))  (with-slots (value) self    (return-from-popper-menu value)))(defun make-list-popper-menu (list &key (print-function (function princ)))  (make-popper-menu    (mapcar (function              (lambda (value)                (make-instance 'value-menu-item                  :value value                  :menu-item-title (with-output-to-string (stream)                                     (funcall print-function value stream)))))            list)));;;;;;; Example;;;#|(defclass mywindow (window)    ())(defmethod view-click-event-handler ((self mywindow) where)  (declare (ignore where))  (if (option-key-p)      (pop-popper-menu (make-popper-menu (menu-items *tools-menu*)))    (print (pop-popper-menu (make-list-popper-menu '(1 2 3 4))))))(make-instance 'mywindow  :view-size #@(200 100))|#