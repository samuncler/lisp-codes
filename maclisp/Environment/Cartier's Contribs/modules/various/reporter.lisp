;;; -*- package: CC -*-;;;;;;; Reporting progress;;;(in-package "CC")(defvar *report-handlers*  nil);;;;;;; Reporting;;;(defmacro with-reporting (reporter &body body)  `(flet ((report (event &rest arguments)            (declare (dynamic-extent arguments))            (apply (function report-action)                   ',reporter event arguments)))     ,@body))(defun report-action (reporter event &rest arguments)  (declare (dynamic-extent arguments))  (dolist (handler *report-handlers*)    (let ((handled (funcall handler reporter event arguments)))      (when handled        (return-from report-action t)))));;;;;;; Handling reports;;;(defmacro with-report-handlers (handlers &body body)  `(let ((*report-handlers*           (nconc *report-handlers*                  (list ,@(iter (for handler in handlers)                                (collect `(function ,handler)))))))     ,@body))(defmacro reporter-case (reporter &rest forms)  `(block nil     (case ,reporter       ,@forms       (t (return nil)))     t));;;;;;; Examples;;;#|(load-unit :bulletin)(defun test ()  (with-reporting test    (report :starting)    (dotimes (percent 10)      (report :copying percent))    (report :finishing)))(defun test-with-handler ()  (with-report-handlers      ((lambda (reporter event arguments)         (reporter-case reporter           (test            (case event              (:starting  (format t "Starting~%"))              (:copying   (format t "Copying ~A~%" (first arguments)))              (:finishing (format t "Finishing~%")))))))    (test)))(defun test-with-bulletin ()  (with-bulletin ()    (with-report-handlers        ((lambda (reporter event arguments)           (reporter-case reporter             (test              (case (first arguments)                (:starting  (setf (bulletin-a) "Starting"))                (:copying   (setf (bulletin-a) "Copying" (bulletin-b) (write-to-string (second arguments))))                (:finishing (setf (bulletin-a) "Finishing")))))))      (test))))|#