;;; -*- package: CC -*-;;;;;;; Bulletin Progress Report;;;(in-package "CC")(defvar *bulletin*  nil);;;;;;; Bulletin class;;;(defclass bulletin (window)    ()  (:default-initargs    :procid        5    :color-p       t    :view-size     #@(280 76)    :view-position :centered    :view-font     '("Chicago" 0 :plain)    :view-subviews    (list (make-instance 'bulletin-a)          (make-instance 'bulletin-b)          (make-instance 'bulletin-c)          (make-instance 'bulletin-d)          (make-instance 'bulletin-thermometer)          (make-instance 'bulletin-stop-button))))(defmethod print-object ((bulletin bulletin) stream)  (print-unreadable-object (bulletin stream)    (format stream "Bulletin ~S"            (window-title bulletin))))(defun make-bulletin (&key (title ""))  (make-instance 'bulletin    :window-title title));;;;;;; Simulating modal dialogs;;;(defun bulletin-eventhook ()  (let ((event *current-event*))    (rlet ((which :pointer))      (let ((what (rref event :EventRecord.what))            (where (#_FindWindow (rref event :eventRecord.where) which)))        (when (or (and (eq what #$mouseDown)                       (not (eql where #$inMenuBar))                       (not (%ptr-eql (%get-ptr which)                                      (wptr *bulletin*)))))          (ed-beep)          t)))))(defun error-while-in-bulletin-handler (condition)  (signal condition) ;give a chance to other handlers  (pop *eventhook*)  (enable-menus)  (window-hide *bulletin*))(defun reactivate-bulletin ()  (when *bulletin*    (push 'bulletin-eventhook *eventhook*)    (disable-menus)    (window-select *bulletin*)))(defun disable-menus ()  (let ((*menubar-frozen* t))    (dolist (menu (menubar))      (unless (eq menu *apple-menu*)        (menu-disable menu))))  (draw-menubar-if))(defun enable-menus ()  (let ((*menubar-frozen* t))    (dolist (menu (menubar))      (menu-enable menu)))  (draw-menubar-if));;;;;;; Graphical interface;;;(defvar *update-bulletin*  t)(defun update-bulletin ()  (event-dispatch))(defun maybe-update-bulletin ()  (when *update-bulletin*    (update-bulletin)))(defmacro without-bulletin-updating (&body body)  `(let ((*update-bulletin* nil))     ,@body))(defmacro update-bulletin-synchronously (&body body)  `(progn     (without-bulletin-updating ,@body)     (event-dispatch)))(defmacro preserving-bulletin-fields (&body body)  (let ((title (gensym))        (a     (gensym))        (b     (gensym))        (c     (gensym))        (d     (gensym))        (step  (gensym)))  `(let ((,title (bulletin-title))         (,a     (bulletin-a))         (,b     (bulletin-b))         (,c     (bulletin-c))         (,d     (bulletin-d))         (,step  (bulletin-step)))     (unwind-protect         (progn ,@body)       (update-bulletin-synchronously         (setf (bulletin-title) ,title               (bulletin-a)     ,a               (bulletin-b)     ,b               (bulletin-c)     ,c               (bulletin-d)     ,d               (bulletin-step)  ,step))))))(defun clear-bulletin-fields ()  (without-bulletin-updating    (setf (bulletin-title) ""          (bulletin-a) ""          (bulletin-b) ""          (bulletin-c) ""          (bulletin-d) ""          (bulletin-step) 0)))(defun bulletin-title ()  (window-title *bulletin*))(defun (setf bulletin-title) (title)  (set-window-title *bulletin* title)  (maybe-update-bulletin))(defun bulletin-a ()  (dialog-item-text    (view-named 'a *bulletin*)))(defun (setf bulletin-a) (string)  (let ((bulletin *bulletin*))    (with-focused-view bulletin      (let ((width (string-width string))            (a (view-named 'a bulletin))            (b (view-named 'b bulletin)))        (set-view-size a (+ width 4) 16)        (set-view-position b (+ width 28) 7)        (set-view-size b (- 250 width) 16)        (set-dialog-item-text a string))))  (maybe-update-bulletin))(defun bulletin-b ()  (dialog-item-text    (view-named 'b *bulletin*)))(defun (setf bulletin-b) (string)  (let ((bulletin *bulletin*))    (with-focused-view bulletin      (set-dialog-item-text (view-named 'b bulletin)                            string)))  (maybe-update-bulletin))(defun bulletin-c ()  (dialog-item-text    (view-named 'c *bulletin*)))(defun (setf bulletin-c) (string)  (let ((bulletin *bulletin*))    (with-focused-view bulletin      (let ((width (string-width string))            (c (view-named 'c bulletin))            (d (view-named 'd bulletin)))        (set-view-size c (+ width 4) 16)        (set-view-position d (+ width 29) 29)        (set-view-size d (- 250 width) 16)        (set-dialog-item-text c string))))  (maybe-update-bulletin))(defun bulletin-d ()  (dialog-item-text    (view-named 'd *bulletin*)))(defun (setf bulletin-d) (string)  (let ((bulletin *bulletin*))    (with-focused-view bulletin      (set-dialog-item-text (view-named 'd bulletin)                            string)))  (maybe-update-bulletin))(defun (setf bulletin-1) (string)  (update-bulletin-synchronously    (setf (bulletin-a) string          (bulletin-b) "")))(defun (setf bulletin-2) (string)  (update-bulletin-synchronously    (setf (bulletin-c) string          (bulletin-d) "")))(defun bulletin-step ()  (thermometer-value    (view-named 'thermometer *bulletin*)))(defun (setf bulletin-step) (value)  (let ((bulletin *bulletin*))    (setf (thermometer-value (view-named 'thermometer bulletin))          value))  (maybe-update-bulletin))(defun bulletin-max-step ()  (thermometer-max-value    (view-named 'thermometer *bulletin*)))(defun (setf bulletin-max-step) (number)  (let ((bulletin *bulletin*))    (setf (thermometer-value (view-named 'thermometer bulletin)) 0)    (setf (thermometer-max-value (view-named 'thermometer bulletin))          number))  (maybe-update-bulletin));;;;;;; Interface;;;(defun call-with-bulletin (&key title action)  (if *bulletin*      (preserving-bulletin-fields        (clear-bulletin-fields)        (setf (bulletin-title) title)        (funcall action))    (let ((*bulletin* nil)          (*modal-dialog-on-top* t)          (*eventhook* (cons 'bulletin-eventhook *eventhook*)))      (unwind-protect          (progn            (setq *bulletin* (make-bulletin :title title))            (disable-menus)            (handler-bind ((error                             (function error-while-in-bulletin-handler)))              (funcall action)))        (enable-menus)        (when *bulletin*          (setq *modal-dialog-on-top* nil)          (window-close *bulletin*))))))(defmacro with-bulletin ((&key (title "")) &body body)  `(call-with-bulletin     :title ,title     :action     (function       (lambda ()         ,@body))));;;;;;; Resources;;;(defvar *light-blue-pixpat*)(defvar *dark-gray-pixpat*)(defresources bulletin "cc:resources;bulletin"  ("ppat" 128)  ("ppat" 129))(def-load-pointers load-pixpat ()  (setq *light-blue-pixpat* (#_GetPixPat 128)        *dark-gray-pixpat*  (#_GetPixPat 129)));;;;;;; Subviews;;;(defclass bulletin-a (static-text-dialog-item)    ()  (:default-initargs    :view-position    #@( 9  7)    :view-size        #@(100 16)    :view-nick-name   'a    :dialog-item-text ""))(defclass bulletin-b (static-text-dialog-item)    ()  (:default-initargs    :view-position    #@(110  7)    :view-size        #@(100 16)    :view-nick-name   'b    :dialog-item-text ""))(defclass bulletin-c (static-text-dialog-item)    ()  (:default-initargs    :view-position    #@( 9 29)    :view-size        #@(100 16)    :view-nick-name   'c    :dialog-item-text ""))(defclass bulletin-d (static-text-dialog-item)    ()  (:default-initargs    :view-position    #@(110 29)    :view-size        #@(100 16)    :view-nick-name   'd    :dialog-item-text ""))(defclass bulletin-thermometer (thermometer)    ()  (:default-initargs    :view-position   #@( 10 55)    :view-size       #@(188 11)    :view-nick-name  'thermometer    :value           0    :pattern         *dark-gray-pixpat*    :fill-pattern    *light-blue-pixpat*    :color-pattern-p t    :direction       :horizontal))(defclass bulletin-stop-button (button-dialog-item)    ()  (:default-initargs    :view-position      #@(211 51)    :view-size          #@( 59 20)    :view-nick-name     'stop-button    :dialog-item-text   "Stop"    :dialog-item-action 'abort));;;;;;; Utilities;;;(defun time-string ()  (multiple-value-bind (secs min hour date month year dow)                       (get-decoded-time)    (format nil "~A ~A-~A-~A ~2,'0d:~2,'0d:~2,'0d"	    (svref '#("Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun") dow)	    date 	    (svref '#("Jan" "Feb" "Mar" "Apr" "May"                      "Jun" "Jul" "Aug" "Sep" "Oct"                      "Nov" "Dec")		   (- month 1))	    (mod year 100)	    hour min secs)));;;;;;; Examples;;;#|(defun ftp (files)  (let ((delay .2))    (with-bulletin (:title "FTP")      (setf (bulletin-a) "Opening connection.") (sleep delay)      (setf (bulletin-a) "Logging in.")         (sleep delay)      (setf (bulletin-a) "Entering password.")  (sleep delay)      (setf (bulletin-a) "Changing directory.") (sleep delay)      (setf (bulletin-c) "Getting:")      (setf (bulletin-max-step) (length files))      (dolist (file files)        (update-bulletin-synchronously          (incf (bulletin-step))          (setf (bulletin-d) file))        (sleep delay)))))(defun finder-copy ()  (with-bulletin (:title "Copy")    (update-bulletin-synchronously      (setf (bulletin-a) "Items remaining to be copied:"            (bulletin-b) "200"            (bulletin-c) "Writing:"            (bulletin-d) "Compact Pro"))    (loop      (event-dispatch))))(defvar *count*  0)(defun test-speed ()  (with-bulletin (:title "Speed")    (loop      (incf *count*))))(defun test-error ()  (let ((delay .2))    (with-bulletin (:title "Error")      (setf (bulletin-max-step) 10)      (dotimes (i 10)        (if (/= i 5)            (incf (bulletin-step))          (restart-case (error "An error occured.")            (continue ()              :report "Continue."              (reactivate-bulletin))))        (sleep delay)))))(defun test-interleaved-calls ()  (with-bulletin (:title "Copy")    (update-bulletin-synchronously      (setf (bulletin-a) "Items remaining to be copied:"            (bulletin-b) "200"            (bulletin-c) "Writing:"            (bulletin-d) "Compact Pro"))    (test-error)    (loop      (event-dispatch))))(ftp '("allo"       "bonjour"       "salut"       "copain"       "au"       "revoir"))(finder-copy)(test-speed)(test-error)(test-interleaved-calls)|#