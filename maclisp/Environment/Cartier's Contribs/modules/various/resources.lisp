;;; -*- package: CC -*-;;;;;;; Resources in saved applications;;;(in-package "CC")(defvar *resources-table*  (make-hash-table))(defun resources ()  (iter outer        (for (nil resources) in-hashtable *resources-table*)        (iter (for (type id) in resources)        (in outer (collect (list (load-and-detach type id) type id))))))(defun load-and-detach (type id)  (let ((res (#_GetResource type id)))    (#_LoadResource res)    (#_DetachResource res)    res))(defmacro defresources (name file &rest resources)  `(progn     (open-resource-file ,file)     (setf (gethash ',name *resources-table*) ',resources)     ',name))(defun copy-resources (source)  (using-resource-file source    (let ((num (#_Count1Types)))      (dotimes (k num)        (%stack-block ((sb 4))          (#_Get1IndType sb (+ k 1))          (let ((type (%get-ostype sb)))            (let ((num (#_Count1Resources type)))              (dotimes (k num)                (#_Get1IndResource type (+ k 1))))))))))