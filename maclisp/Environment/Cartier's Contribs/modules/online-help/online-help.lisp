;;; -*- package: CC -*-;;;;;;; Online help;;;(in-package "CC")(export '(generate-online-help-map          fred-help-file-window))(defvar *online-helps*  (make-hash-table))(defstruct (online-help             (:conc-name help-)             (:print-function print-online-help))  name  map  file  stream)(defun print-online-help (help stream depth)  (declare (ignore depth))  (print-unreadable-object (help stream)    (format stream "Online help ~A with ~A entries"            (help-name help)            (hash-table-count (help-map help)))));;;;;;; Creating the map file;;;;; The only purpose of this function is to be called in the;; source file that will be compiled to get the help map binary.(defun new-online-help (name map filename)  (let ((file (merge-pathnames filename *load-pathname*)))    (setf (gethash name *online-helps*)          (make-online-help            :name name            :map  map            :file file            :stream (open file :if-does-not-exist nil)))))(defun generate-online-help-map (name &key size package help-file help-map)  (let ((map (make-hash-table :test 'eq :size size))        (map-source (merge-pathnames help-map *.lisp-pathname*))        (map-binary (merge-pathnames help-map *.fasl-pathname*)))    (let ((*package* (find-package package))          (eof (list nil)))      (with-open-file (s help-file)        (multiple-value-bind (reader arg) (stream-reader s)          (loop            (if (ccl::eofp s) (return))            (let ((sym (read s nil eof)))              (if (eq sym eof) (return))              (setf (gethash sym map) (ccl::stream-position s))              (ccl::skip-past-double-newline s reader arg))))))    (with-open-file (stream map-source                            :direction :output                            :if-exists :supersede)      (format stream "(cl:in-package ~S)~%~%~                      (cc::new-online-help '~A '#.*map* '#1P~S)~%"              package name (mac-file-namestring help-file)))    (let ((*map* map))      (declare (special *map*))      (compile-file map-source :output-file map-binary))    (delete-file map-source)    t));;;;;;; Accessing the help files;;;(defun find-online-help-position (symbol)  (block found    (maphash (function               (lambda (ignore help)                 (declare (ignore ignore))                 (let ((pos (gethash symbol (help-map help))))                   (when pos                     (return-from found (values help pos))))))             *online-helps*)    nil))(defun get-online-help (symbol &optional                            (string-reader (function ccl::read-to-double-newline))                            query-for-help-file-p)  (declare (ignore query-for-help-file-p)) ;we won't be that fancy!  (multiple-value-bind (help pos) (find-online-help-position symbol)    (when help      (let ((stream (help-stream help)))        (when (and stream (open-stream-p stream))          (multiple-value-bind (reader arg) (stream-reader stream)            (ccl::stream-position stream pos)            (funcall string-reader reader arg)))))));;;;;;; Hacking MCL's help system;;;(advise ccl::get-help-file-entry        (or (:do-it)            ;; if no standard help could be found, try our own...            (apply (function get-online-help)                   arglist))        :when :around        :name :online-help);;;;;;; Editing your help files;;;(defclass fred-help-file-window (fred-window)    ((online-help         :initarg :online-help)     (online-help-size    :initarg :online-help-size)     (online-help-package :initarg :online-help-package)     (online-help-map     :initarg :online-help-map)))(defmethod window-save :before ((self fred-help-file-window))  (with-slots (online-help) self    (let ((help (gethash online-help *online-helps*)))      (when help        (let ((stream (help-stream help)))          (when (and stream (open-stream-p stream))            (close stream)))))))(defmethod window-save :after ((self fred-help-file-window))  (with-slots (online-help online-help-size online-help-package online-help-map) self    (generate-online-help-map online-help      :size      online-help-size      :package   online-help-package      :help-file (window-filename self)      :help-map  online-help-map)    (load      (merge-pathnames online-help-map *.fasl-pathname*))));;;;;;; Example;;;#|This is how the "Example Help Map.fasl" was generated:(generate-online-help-map 'example  :size      100  :package   "CC"  :help-file "cc:modules;online-help;Example Help"  :help-map  "cc:modules;online-help;Example Help Map")The following lines could be used in a "LOADME" fileto activate the online help:(load-unit "ONLINE-HELP")(def-load-pointers example-online-help ()  (load "cc:modules;online-help;Example Help Map"    :verbose nil    :if-does-not-exist nil))Use the following to edit the online help file:(make-instance 'fred-help-file-window  :online-help         'example  :online-help-size    100  :online-help-package "CC"  :online-help-map     "cc:modules;online-help;Example Help Map"  :filename            "cc:modules;online-help;Example Help")|#