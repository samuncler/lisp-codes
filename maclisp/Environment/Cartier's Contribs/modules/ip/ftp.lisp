;;; -*- package: CC -*-;;;;;;; Using FTP;;;(in-package "CC")(export '(*stanford*          *cambridge*          *receive-folder*          *mail-address*          open-ftp-stream          with-ftp-stream          ftp-user          ftp-anonymous          ftp-pwd          ftp-cd          ftp-cdup          ftp-list          ftp-name-list          ftp-get          ftp-put          ftp-quit          ftp-get-files          ftp-put-files          ftp-fred-window))(defvar *stanford*  "36.44.0.6"  "sumex-aim.stanford.edu")(defvar *cambridge*  "134.149.2.3"  "cambridge.apple.com")(defvar *receive-folder*  "orion:nouveaux:")(defvar *mail-address*  "cartier@math.uqam.ca")(defun open-ftp-stream (host)  (with-reporting open-ftp-stream    (report :opening host)    (let ((stream (make-instance 'telnet-stream :host host :port "ftp")))      (telnet-command stream "220" "")      stream)))(defmacro with-ftp-stream ((stream host &rest args) &body body)  `(let ((,stream nil))     (unwind-protect         (progn           (setq ,stream (open-ftp-stream ,host ,@args))           ,@body)       (when ,stream         (close ,stream)))));;;;;;; Errors;;;(define-condition could-not-get-file (telnet-error)    ((file :initarg :file))  (:report    (lambda (condition stream)      (with-slots (file) condition        (format stream "Could not get file ~S." file)))))(defun skip-getting-file (&optional condition)  (let ((restart (find-restart 'skip-getting-file condition)))    (when restart      (invoke-restart restart))));;;;;;; Commands;;;(defun ftp-user (ftp-stream user &optional password)  (with-reporting ftp-user    (report :loggin-in)    (when (or (null user)              (null password))      (multiple-value-setq (user password)        (get-password (or user ""))))    (telnet-command ftp-stream "331" "USER ~A~%" user)    (telnet-command ftp-stream "230" "PASS ~A~%" password)))(defun ftp-anonymous (ftp-stream)  (ftp-user ftp-stream "anonymous" *mail-address*))(defun ftp-pwd (ftp-stream)  (let ((*telnet-verbose* t))    (telnet-command ftp-stream "257" "PWD~%")))(defun ftp-cd (ftp-stream dir)  (with-reporting ftp-cd    (telnet-command ftp-stream "250" "CWD ~A~%" dir)))(defun ftp-cdup (ftp-stream)  (telnet-command ftp-stream "250" "CDUP~%"))(defun ftp-list (ftp-stream &optional (receiver (curry tcp-receive *standard-output*)))  (with-telnet-stream (data nil 0 :wait-for-connection nil)    (telnet-command ftp-stream "200" "PORT ~A~%" (tcp-port-to-str data))    (telnet-command ftp-stream "150" "LIST~%")    (funcall receiver data)    (telnet-command ftp-stream "226" "")))(defun ftp-name-list (ftp-stream &optional (receiver (curry tcp-receive *standard-output*)))  (with-telnet-stream (data nil 0 :wait-for-connection nil)    (telnet-command ftp-stream "200" "PORT ~A~%" (tcp-port-to-str data))    (telnet-command ftp-stream "150" "NLST~%")    (funcall receiver data)    (telnet-command ftp-stream "226" "")))(defun ftp-get (ftp-stream file receiver)  (with-reporting ftp-get    (with-telnet-stream (data nil 0 :wait-for-connection nil)      (telnet-command ftp-stream "200" "PORT ~A~%" (tcp-port-to-str data))      (let ((string              (loop                (format ftp-stream "RETR ~A~%" file)                (finish-output ftp-stream)                (let ((answer (read-line ftp-stream)))                  (if (string-equal (subseq answer 0 3) "150")                      (return answer)                    (restart-case (error 'could-not-get-file :file file)                      (continue ()                        :report (lambda (s) (format s "Enter a new file name."))                        (let ((newname (get-string-from-user "New file name:"                                                             :initial-string file)))                          (setq file newname)                          (report :new-file-name file)))))))))        (let ((size (extract-size string)))          (report :writing size)          (funcall receiver data)          (telnet-command ftp-stream "226" ""))))))(defun ftp-put (ftp-stream file sender)  (with-telnet-stream (data nil 0 :wait-for-connection nil)    (telnet-command ftp-stream "200" "PORT ~A~%" (tcp-port-to-str data))    (telnet-command ftp-stream "150" "STOR ~A~%" file)    (funcall sender data)    (force-output data))  (telnet-command ftp-stream "226" ""))(defun ftp-quit (ftp-stream)  (with-reporting ftp-quit    (report :quitting)    (telnet-command ftp-stream "221" "QUIT~%")    (close ftp-stream)    t));;;;;;; Batch operations;;;(defun ftp-get-files (address user password files                         &key (receive-folder *receive-folder*)                              (separator #\/)                              (directory nil)                              (root nil)                              (bulletin nil)                              (nightly nil))  (flet ((action ()           (with-reporting ftp-get-files             (let ((files (listify files)))               (with-ftp-stream (stream address)                 (ftp-user stream user password)                 (when directory                   (ftp-cd stream directory))                 (report :start-getting)                 (iter (with dir)                       (for file in files)                       (for remain downfrom (length files))                       (report :getting file remain)                       (when root                         (ftp-cd stream root)                         (multiple-value-setq (dir file) (split-file file separator))                         (when dir (ftp-cd stream dir)))                       (restart-case                         (ftp-get stream file (curry tcp-receive-file (string-append receive-folder file)))                         (skip-getting-file ()                           :test (lambda (c) (subtypep (type-of c) 'could-not-get-file))                           :report (lambda (s) (format s "Skip getting file ~S." file))                           (report :skip-file))))                 (ftp-quit stream))))))    (flet ((bulletin-action ()             (if (null bulletin)                 (action)               (with-bulletin (:title "Getting Files")                 (with-report-handlers (ftp-get-files-bulletin)                   (action))))))      (if (null nightly)          (bulletin-action)        (handler-bind ((could-not-get-file (function skip-getting-file)))          (bulletin-action))))))(defun ftp-put-files (address user password files                         &key (directory nil)                              (bulletin nil))  (flet ((action ()           (with-reporting ftp-put-files             (let ((files (listify files)))               (with-ftp-stream (stream address)                 (ftp-user stream user password)                 (when directory (ftp-cd stream directory))                 (report :start-putting)                 (iter (for file in files)                       (for remain downfrom (length files))                       (report :putting file remain)                       (ftp-put stream (mac-file-namestring file) (curry tcp-send-file file)))                 (ftp-quit stream))))))    (if (null bulletin)        (action)      (with-bulletin (:title "Putting Files")        (with-report-handlers (ftp-put-files-bulletin)          (action))))));;;;;;; Editing via FTP;;;(defclass ftp-fred-window (fred-window)    ((address           :initarg :address)     (user              :initarg :user)     (password          :initarg :password)     (remember-password :initarg :remember-password :initform nil)     (directory         :initarg :directory         :initform nil)     (remote-file       :initarg :remote-file)     (bulletin          :initarg :bulletin          :initform t)))(defmethod initialize-instance ((self ftp-fred-window)                                    &rest initargs                                    &key address user password remember-password directory remote-file (bulletin t))  (when (null password)    (multiple-value-setq (user password) (get-password user)))  (ftp-get-files address user password (list remote-file)                 :directory directory :bulletin bulletin)  (when (null remember-password)    (setq password nil))  (apply (function call-next-method)         self         :user user         :password password         :filename (string-append *receive-folder* remote-file)         initargs))(defmethod window-close :after ((self ftp-fred-window))  (with-slots (remote-file) self    (delete-file (string-append *receive-folder* remote-file)                 :if-does-not-exist nil)))(defmethod window-save ((self ftp-fred-window))  (call-next-method)  (eval-enqueue    (list 'funcall          (function            (lambda ()              (with-slots (address user password directory remote-file bulletin) self                (ftp-put-files address user password                               (list (string-append *receive-folder* remote-file))                               :directory directory                               :bulletin bulletin)))))));;;;;;; Utilities;;;(defun split-file (string separator)  (let ((pos (position separator string :from-end t)))    (if (null pos)        (values nil string)      (values (subseq string 0 pos)              (subseq string (+ pos 1))))))(defun extract-size (string)  (let ((bytes (search "bytes" string)))    (when bytes      (iter        (for x downfrom (- bytes 1))        (for char = (char string x))        (while (or (whitespacep char)                   (digit-char-p char)))        (finally (return (read-from-string string nil nil                                           :start (+ x 1))))))));;;;;;; Report handlers;;;(defun open-ftp-stream-bulletin (reporter event arguments)  (reporter-case reporter    (open-ftp-stream      (case event        (:opening          (setf (bulletin-title) (format nil "FTP ~A" (first arguments))                (bulletin-1) "Opening connection."))))))(defun ftp-user-bulletin (reporter event arguments)  (declare (ignore arguments))  (reporter-case reporter    (ftp-user      (case event        (:loggin-in (setf (bulletin-1) "Logging in."))))))(defun ftp-quit-bulletin (reporter event arguments)  (declare (ignore arguments))  (reporter-case reporter    (ftp-quit      (case event        (:quitting (setf (bulletin-1) "Closing connection."))))))(defun tcp-receive-file-bulletin (reporter event arguments)  (reporter-case reporter    (tcp-receive-file      (case event        (:writing (incf (bulletin-step) (first arguments)))))))(defun tcp-send-file-bulletin (&key (file "File:"))  (function    (lambda (reporter event arguments)      (reporter-case reporter        (tcp-send-file          (update-bulletin-synchronously            (case event              (:file (setf (bulletin-c) file                           (bulletin-d) (mac-file-namestring (first arguments))                           (bulletin-step) 0))              (:size (setf (bulletin-max-step) (first arguments)))              (:writing (incf (bulletin-step) (first arguments))))))))))(defun ftp-get-bulletin (reporter event arguments)  (reporter-case reporter    (ftp-get      (case event        (:new-file-name          (setf (bulletin-d) (format nil "~A" (first arguments)))          (reactivate-bulletin))        (:writing (setf (bulletin-max-step) (first arguments)))))))(defun ftp-get-files-bulletin (reporter event arguments)  (reporter-case reporter    (open-ftp-stream      (open-ftp-stream-bulletin reporter event arguments))    (ftp-user      (ftp-user-bulletin reporter event arguments))    (ftp-get      (ftp-get-bulletin reporter event arguments))    (tcp-receive-file      (tcp-receive-file-bulletin reporter event arguments))    (ftp-quit      (ftp-quit-bulletin reporter event arguments))    (ftp-get-files      (case event        (:start-getting          (setf (bulletin-a) "Files remaining:"                (bulletin-c) "Getting:"))        (:getting          (setf (bulletin-b) (format nil "~A" (second arguments))                (bulletin-d) (format nil "~A" (first arguments))                (bulletin-step) 0))        (:skip-file          (setf (bulletin-d) "")          (reactivate-bulletin))))))(defun ftp-put-files-bulletin (reporter event arguments)  (reporter-case reporter    (open-ftp-stream      (open-ftp-stream-bulletin reporter event arguments))    (ftp-user      (ftp-user-bulletin reporter event arguments))    (tcp-send-file      (funcall (tcp-send-file-bulletin :file "Putting:") reporter event arguments))    (ftp-quit      (ftp-quit-bulletin reporter event arguments))    (ftp-put-files      (case event        (:start-putting (setf (bulletin-a) "Files remaining:"))        (:putting (setf (bulletin-b) (format nil "~A" (second arguments))))))));;;;;;; Password window;;;(defun get-password (user)  (let ((user-text          (make-instance 'editable-text-dialog-item            :view-position #@( 90 15)            :view-size     #@(180 16)            :dialog-item-text user))        (password-text          (make-instance 'password-text-dialog-item            :view-position #@( 90 41)            :view-size     #@(180 16)            :dialog-item-text "")))    (let ((cancel-button            (make-instance 'button-dialog-item              :view-position #@( 11 74)              :view-size     #@( 62 16)              :dialog-item-text "Cancel"              :dialog-item-action              (function                (lambda (di)                  (declare (ignore di))                  (return-from-modal-dialog                    :cancel)))))          (anonymous-button            (make-instance 'button-dialog-item              :view-position #@( 89 74)              :view-size     #@( 97 16)              :dialog-item-text "Anonymous"              :dialog-item-action              (function                (lambda (di)                  (declare (ignore di))                  (return-from-modal-dialog                    (values "anonymous"                            *mail-address*))))))          (ok-button            (make-instance 'button-dialog-item              :view-position #@(208 74)              :view-size     #@( 62 16)              :dialog-item-text "OK"              :default-button t              :dialog-item-action              (function                (lambda (di)                  (declare (ignore di))                  (return-from-modal-dialog                    (values (dialog-item-text user-text)                            (dialog-item-text password-text))))))))      (modal-dialog        (make-instance 'window          :window-type   :double-edge-box          :view-position :centered          :view-size     #@(285 103)          :view-font     '("chicago" 12 :srcor :plain)          :view-subviews          (list            (make-instance 'static-text-dialog-item              :view-position #@( 10 16)              :view-size     #@( 70 16)              :dialog-item-text "User:")            (make-instance 'static-text-dialog-item              :view-position #@( 10 41)              :view-size     #@( 70 16)              :dialog-item-text "Password:")            password-text            user-text            cancel-button            anonymous-button            ok-button))))));;;;;;; Examples;;;#|(ftp-get-files *cambridge* "anonymous" *mail-address*               '("README"                 "ABSTRACTS")  :receive-folder "ccl:"  :directory "pub/mcl2/contrib"  :bulletin t)(ftp-get-files *stanford* "anonymous" *mail-address*               '("help/recent-abstracts.abs"                 "report/small-talk.txt")  :receive-folder "ccl:"  :root "/info-mac"  :bulletin t)(make-instance 'ftp-fred-window  :address *cambridge*  :user "anonymous"  :password *mail-address*  :remember-password t  :directory "pub/mcl2/contrib"  :remote-file "README")|#