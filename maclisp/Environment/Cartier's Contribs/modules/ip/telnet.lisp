;;; -*- package: CC -*-;;;;;;; Telnet streams;;;(in-package "CC")(export '(*telnet-verbose*          open-telnet-stream          with-telnet-stream))(defvar *telnet-verbose*  nil)(defclass telnet-stream (ccl::tcp-stream)    ())(define-condition telnet-error (error)    ((number :initarg :number)     (string :initarg :string))  (:report    (lambda (cond stream)      (with-slots (string) cond        (format stream "Telnet error: ~S."                string)))))(defun open-telnet-stream (host port &rest args)  (apply (function make-instance)         'telnet-stream         :host host         :port port         args))(defmacro with-telnet-stream ((stream &rest args) &body body)  `(let ((,stream nil))     (unwind-protect         (progn           (setq ,stream (open-telnet-stream ,@args))           ,@body)       (when ,stream         (close ,stream)))))(defmethod stream-tyi ((stream telnet-stream))  (let ((char (call-next-method)))    (cond ((and (eql char #\CR)                (eql (peek-char nil stream) #\LF))           (read-char stream)           #\CR)          (t char))))(defmethod stream-tyo ((stream telnet-stream) char)  (cond ((eql char #\CR)         (call-next-method stream #\CR)         (call-next-method stream #\LF))        (t (call-next-method))))(defmethod telnet-command ((stream telnet-stream) result &rest command)  (apply (function format) stream command)  (finish-output stream)  (let ((answer (read-line stream)))    (if (string-not-equal (subseq answer 0 3) result)        (error 'telnet-error               :number (subseq answer 0 3)               :string answer)      (when *telnet-verbose*        (format *debug-io* "~A~%"                answer)))    t));;;;;;; Converting telnet blocks;;;(defun mac-to-telnet (source dest size)  (let ((s (%inc-ptr source 0))             ;source pointer        (d (%inc-ptr dest 0))               ;dest pointer        (e (%inc-ptr source size)))         ;we are past the end    (iter (until (%ptr-eql s e))          (let ((byte (%get-byte s)))            (cond ((/= byte 13)                   (%put-byte d byte)                   (%incf-ptr s 1)                   (%incf-ptr d 1))                  (t                    (%put-byte d 13)                    (%put-byte (%inc-ptr d) 10)                    (%incf-ptr s 1)                    (%incf-ptr d 2)))))    (- (%ptr-to-int d)       (%ptr-to-int dest))))(defun telnet-to-mac (source dest size)  (let ((s (%inc-ptr source 0))             ;source pointer        (d (%inc-ptr dest 0))               ;dest pointer        (e (%inc-ptr source size))          ;we are past the end        (l (%inc-ptr source (- size 1))))   ;the last byte    (iter (until (%ptr-eql s e))          (let ((byte (%get-byte s)))            (cond ((or (/= byte 13)                       (%ptr-eql s l)                       (/= (%get-byte s 1) 10))                   (%put-byte d byte)                   (%incf-ptr s 1)                   (%incf-ptr d 1))                  (t                    (%put-byte d 13)                    (%incf-ptr s 2)                    (%incf-ptr d 1)))))    (- (%ptr-to-int d)       (%ptr-to-int dest))))