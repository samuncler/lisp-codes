;;; -*- package: CC -*-;;;;;;; TCP streams;;;(in-package "CC")(export '(with-tcp-stream          tcp-send          tcp-receive          tcp-send-file          tcp-receive-file))(defmacro with-tcp-stream ((stream &rest args) &body body)  `(let ((,stream nil))     (unwind-protect         (progn           (setq ,stream (open-tcp-stream ,@args))           ,@body)       (when ,stream         (close ,stream)))));;;;;;; Transfering data;;;(defun tcp-send (stream tcp-stream)  (iter (until (stream-eofp stream))        (write-char (read-char stream) tcp-stream)        (finally (force-output tcp-stream))))(defun tcp-receive (stream tcp-stream)  (iter (until (stream-eofp tcp-stream))        (write-char (read-char tcp-stream) stream)))(defun tcp-send-file (file tcp-stream)  (with-reporting tcp-send-file    (with-FSOpen-file (FSpb file)      (report :file file)      (report :size (getEOF FSpb))      (%stack-block ((block 16384))        (loop          (let ((size (FSRead FSpb 16384 block)))            (cond ((= size 0)                   (return t))                  (t (report :writing size)                     (%stack-block ((conv 32768))                       (let ((newsize (mac-to-telnet block conv size)))                         (ccl::stream-write-block tcp-stream conv newsize)))))))))))(defun tcp-receive-file (file tcp-stream)  (create-file file :if-exists :supersede)  (with-FSOpen-file (FSpb file t)    (let ((conn (ccl::tcp-stream-conn tcp-stream)))      (with-slots (ccl::pb ccl::rds ccl::rds-entries ccl::read-timeout) conn        (ccl::until (stream-eofp tcp-stream)          (ccl::%tcp-nocopyrcv ccl::pb ccl::rds ccl::rds-entries ccl::read-timeout)          (let ((ptr (%int-to-ptr (%ptr-to-int ccl::rds))))            (ccl::until (= 0 (%get-word ptr))              (report-action 'tcp-receive-file :writing (%get-word ptr))              (%stack-block ((conv 32768))                (let ((newsize (telnet-to-mac (%get-ptr ptr 2) conv                                              (%get-word ptr))))                  (FSWrite FSpb newsize conv)                  (%incf-ptr ptr 6)))))          (ccl::tcp-stream-bfr-return conn))))));;;;;;; Additions to MacTCP;;;(in-package "CCL")(export '(tcp-port-to-str          tcp-port))(defun tcp-port-to-str (stream)  (let ((conn (tcp-stream-conn stream)))    (let ((pb (and conn (conn-pb conn))))      (when (and pb (= 0 (%tcp-control pb $TCPStatus t)))        (let ((host (rref pb tcpioPB.status.localHost))              (port (rref pb tcpioPB.status.localPort)))          (format nil "~D,~D,~D,~D,~D,~D"                  (ldb (byte 8 24) host)                  (ldb (byte 8 16) host)                  (ldb (byte 8  8) host)                  (ldb (byte 8  0) host)                  (ldb (byte 8  8) port)                  (ldb (byte 8  0) port)))))))(defun tcp-port (stream)  (let ((conn (tcp-stream-conn stream)))    (let ((pb (and conn (conn-pb conn))))      (when (and pb (= 0 (%tcp-control pb $TCPStatus t)))        (rref pb tcpioPB.status.localPort)))))(defun stream-write-block (stream ptr length)  (let ((start 0)        (conn (tcp-stream-conn stream)))    (with-slots (write-buffer write-bufsize write-count) conn      (let ((bufpos write-count))        (let ((room (- write-bufsize bufpos)))          (until (<= length room)            (dotimes (i room)              (%put-byte write-buffer (%get-byte ptr start) bufpos)              (incf start)              (incf bufpos))            (setf write-count write-bufsize)            (tcp-stream-force-output conn t)            (decf length room)            (setq bufpos 0)            (setq room write-bufsize))          (dotimes (i length)            (%put-byte write-buffer (%get-byte ptr start) bufpos)            (incf start)            (incf bufpos))          (incf write-count length)          (tcp-stream-force-output conn t))))))