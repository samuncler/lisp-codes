;;; -*- package: CC -*-;;;;;;; Sending Mail;;;(in-package "CC")(export '(*return-address*          *mail-server*          *signature*          send-mail))(defvar *return-address*  "cartier@math.uqam.ca (Guillaume Cartier)")(defvar *mail-server*  "132.208.12.7")(defvar *signature*"********************************************************************** Guillaume Cartier                 (514) 844-5294 (maison)         ** L.A.C.I.M.                        (514) 987-4290 (bureau)         ** Universite du Quebec a Montreal   (514) 987-8477 (telecopieur)    ** Montreal, Quebec, Canada          cartier@math.uqam.ca (internet) **********************************************************************")(defun send-mail (to mail-writer                    &key (mail-server *mail-server*)                         (return-address *return-address*)                         (subject nil)                         (signature *signature*)                         (bulletin nil))  (flet ((action ()           (with-reporting send-mail             (report :opening to)             (with-telnet-stream (stream mail-server "smtp")               (telnet-command stream "220" "")               (telnet-command stream "250" "MAIL FROM:~A~%" return-address)               (telnet-command stream "250" "RCPT TO:~A~%" to)               (telnet-command stream "354" "DATA~%")               (format stream "To: ~A~%" to)               (format stream "From: ~A~%" return-address)               (when subject (format stream "Subject: ~A~%" subject))               (report :sending)               (funcall mail-writer stream)               (when signature (princ signature stream))               (report :quiting)               (telnet-command stream "250" "~%.~%")               (telnet-command stream "221" "QUIT~%")))))    (if (null bulletin)        (action)      (with-bulletin (:title "Sending mail")        (with-report-handlers (send-mail-bulletin)          (action))))));;;;;;; Report handlers;;;(defun send-mail-bulletin (reporter event arguments)  (reporter-case reporter    (tcp-send-file      (funcall (tcp-send-file-bulletin :file "Sending:")               reporter event arguments))    (send-mail      (case event        (:opening (setf (bulletin-2) "Opening connection."))        (:sending (setf (bulletin-2) "Sending mail."))        (:quiting (setf (bulletin-2) "Quit."))))));;;;;;; Examples;;;#|(send-mail "cartier@math.uqam.ca"           (curry princ "How was the weather?")  :subject "Your vacation"  :bulletin t)(send-mail "cartier@math.uqam.ca"           (function             (lambda (stream)               (format stream "Ckeck out my new init file:~%~%")               (tcp-send-file "ccl:init.lisp" stream)))  :subject "Our project"  :signature nil  :bulletin t)|#