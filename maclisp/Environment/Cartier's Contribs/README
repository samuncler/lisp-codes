Welcome to Cartier's Contribs version 1.2!  Cartier's Contribs is a collection of tools for Macintosh  Common Lisp version 2.0 final or later, selected for their  generality and presumed usefulness to the MCL community.  A lot of work went into making these contributions very easy to  install and to use. Great care has also been taken to make sure they  could coexist with other MCL softwares with minimal risks of conflict.  If you experience any problems, have suggestions or comments,  feel free to drop me a note. Here are my coordinates:    Guillaume Cartier    Email: cartier@math.uqam.caHow do I install the contribs?  - Install Jonathan Amsterdam's Iterate package (see below).  - Put the Cartier's Contribs folder anywhere you want to.  - Load the LOADME file.  - If you plan on using the TCP/IP module, you will also need    to install Denis R Howlett's passwords.lisp file available from    anonymous ftp at cambridge.apple.com in directory pub/mcl2/contrib.  - If you plan on using these contribs regularly, I suggest    that you do a SAVE-APPLICATION at this point. This will    save you from repeating the previous steps each time you    want to use one of my contributions.How do I use the contribs?  Basically, what the previous LOADME file did, is to define  a logical host CC and a package CC used by the CL-USER package.  The CC package contains my personal version of a defsystem  and all the exported symbols from my contributions.  - Use the exported LOAD-UNIT function to load    any of the contributions (see the Contents section at the end).    Example: (LOAD-UNIT :WHO-CALLS).  - Most units have small examples at the end of their source code    (or as a separate file in some cases) that can help you get    started rapidly.How do I get the Iterate package?  The Iterate package is available from anonymous ftp at  cambridge.apple.com as the file Iterate.sit.hqx in directory  pub/mcl2/contrib, and on MCL's CD-ROM.  Note that if you use the version from the CD-ROM, you will have  to replace the line: (first lisp form of the file)    (in-package "ITERATE" :nicknames '("ITER" "iterate"))  by the followings: (to make it CLtL2 compliant)    (defpackage "ITERATE"       (:nicknames "ITER" "iterate"))     (in-package "ITERATE")A note of warning  Starting from version 1.2, my contribs now include undocumented  units. These units are used internaly by the advertised, documented  ones. If you want to take a look a them, feel free to do so. I would  even enjoy earing your comments about them. But, I do not engage  myself in any official support for them. For a list of officialy  supported units, see the 'Contents of this version' section at the  end of the document.Change Log12/05/92   Version 1.0.           First release which included the Who-Calls, Extended-Apropos,           Collections and Think-C units.08/09/92   Version 1.1.           Added online help and fasl files for all units. Converted the           documentation to the format used in MCL's reference manual.           Added two new units, Online-Help and Popper-Menus. Some           improvements where made to Extended-Apropos and Collections.06/11/92   Version 1.2.           Added TCP/IP support and some internal undocumented units           (see the note of warning above). I also removed the Cartier's           Contribs online help files. Those where nice but turned out           to be to much work to maintain in parallel with the full fledge           Doc (RTF) document. Maybe one day, we will have the tools           to show external text editors documents inside of MCL...Obtaining the Software  This software can be obtained by anonymous ftp at cambridge.apple.com under  directory pub/mcl2/contrib as the file Cartiers-Contribs-1.2.sea.hqx. If you  do not have ftp access, you can contact me and I will see what I can do.Acknowledgments  Very special thanks to the MCL team. They have always been very generous of  their time in responding promptly to any question I had. They are the people  who make MCL such a wonderful and fun programming environment.  Special thanks also to my very understanding boss Pierre Leroux.  I would also like to thank Alain Marcotte and Pierre Fortier for their  numerous suggestions on how to improve my english writing. Finally, I would  like to mention the LACIM people, the research group I am working with. They  make it a very nice place to work in by their energy, friendliness and youth  of spirit.Copyright  Permission to use, copy, modify, and distribute this software and its  documentation for any purpose and without fee is hereby granted, provided  that this copyright and permission notice appear in all copies and supporting  documentation. There is no representations about the suitability of this  software for any purpose. It is provided "as is" without express or implied  warranty.Contents of this versionWHO-CALLS  This unit implements a system extension that will automatically  remember for each function, variable and macro, which toplevel form  respectively calls it, makes a reference to it or macroexpands it.  The most powerful feature of this unit is its very close  integration with Fred. For those who are performance conscious, the  overhead of using this unit is extremely minimal, in respect  to both memory and compilation speeds.EXTENDED-APROPOS  This set of files implements an extended apropos dialog. It is a superset  of MCL's standard apropos dialog. You can use it to search for all symbols  that match certain criteria.COLLECTIONS  This unit will enable you to easily access important places in  your fred windows via convenient pop-up menus. For example, you can use  it to get a pop-up menu of all the toplevel definitions contained in  your frontmost fred window.POPPER-MENUS  This unit will allow you to create pop-up menus that can appear  anywhere on a mouse click, just as with my Who-Calls and Collections units.ONLINE-HELP  This module will allow you to add help files to your applications,  just like MCL. Your help file will be totally integrated to MCL's help  system. For example, typing control-x control-d over any documented symbol  will bring a corresponding documentation window.TCP/IP  This unit contains TCP/IP related code, mainly FTP tools and support  for sending mail.THINK-C  This contribution contains Lisp and C code that will ease interfacing  MCL with Think C. A fairly elaborate example is included.