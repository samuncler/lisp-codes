(in-package :oou)(oou-provide :GoMan-librarian);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; the librarian of GoMan; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(export '())(oou-dependencies :unibas-macros                  :menus-u                  :menu-window                  :GoMan-macros                  :GoMan-formatter                  :GoMan-commands                  );---------------------------------------------------------------------------(defclass librarian ()  ((document-directories :initform nil                         :accessor document-directories                         :initarg document-directories)   (opened-documents :initform nil                     :accessor opened-documents)   (librarian-window :initform nil                     :accessor librarian-window)   (document-menu :initform nil                  :initarg :document-menu                  :accessor document-menu)   (commands-menu :initform nil                  :initarg :commands-menu                  :accessor commands-menu)   (all-existing-labels :initform nil                        :accessor all-existing-labels)   (all-existing-application-labels :initform nil                                    :accessor all-existing-application-labels)   (all-application-labels-from-file :initform nil                                     :accessor all-application-labels-from-file)   ))(defun make-librarian ()  (setf *the-librarian* (make-instance 'librarian))  (when (probe-file "Goman:GoMan-document-directories.lisp")    (load "Goman:GoMan-document-directories"))  (let ((librarian (make-library-window)))    (window-show librarian)    librarian))(defmethod (setf document-directories) :after (list-of-dirs (self librarian))  (setf (slot-value self 'document-directories)        (do ((dirs list-of-dirs (cdr dirs))             (full-pathname-dirs nil))            ((null dirs) full-pathname-dirs)          (push (full-pathname (car dirs))                full-pathname-dirs))))(defmethod available-document-source-files ((self librarian))  (do ((dirs (document-directories self) (cdr dirs))       (doc-files nil))      ((null dirs) (delete-duplicates doc-files :test #'equal))    (setf doc-files (nconc (directory (format nil                                              "~A**:*.dsource"                                              (namestring (car dirs))))                           doc-files))))(defmethod available-formatted-document-files ((self librarian))  (do ((dirs (document-directories self) (cdr dirs))       (doc-files nil))      ((null dirs) (delete-duplicates doc-files :test #'equal))    (setf doc-files (nconc (directory (format nil                                              "~A**:*.dformatted"                                              (namestring (car dirs))))                           doc-files))))(defmethod available-document-net-files ((self librarian))  (do ((dirs (document-directories self) (cdr dirs))       (doc-files nil))      ((null dirs) (delete-duplicates doc-files :test #'equal))    (setf doc-files (nconc (directory (format nil                                              "~A**:*.dnet"                                              (namestring (car dirs))))                           doc-files)))) (defmethod document-visible-p ((ob librarian) filename)  (find (namestring (full-pathname filename))        (opened-documents ob)        :test #'(lambda (file-namestring open-document)                  (and  (destination-file open-document)                        (string-equal (namestring (full-pathname (destination-file open-document)))                                      file-namestring)))))(defmethod show-new-document ((self librarian) filename)  (when (probe-file (full-pathname filename))    (let* ((destination-file (full-pathname filename))           (document  (reload-document-object destination-file))           (destination-window (make-destination-window document))           (fred (real-fred (fred-window destination-window)))           (buffer (fred-buffer fred)))      (setf (destination-buffer document) buffer)      (setf (source-buffer document) (make-buffer))      (setf (destination-file document) destination-file)      (fred-update fred)      (show-destination-window document)      document)))   (defun reload-document-object (pathname)  (when (probe-file pathname)    (setf (all-application-labels-from-file *the-librarian*) nil)    (let ((document (read-object-from-resource-fork pathname 201)))      (dolist (loaded-label  (all-application-labels-from-file *the-librarian*))        (let ((old-label  (application-label-exists-p (identifier-string loaded-label))))          (cond (old-label                 (setf (links old-label)                       (nconc (links old-label)                              (links loaded-label)))                 (dolist (link (links loaded-label))                   (setf (label link) old-label)))                (t                 (push loaded-label (all-existing-application-labels *the-librarian*))))))      (setf (all-application-labels-from-file *the-librarian*) nil)      document)))(defmethod show-document ((self librarian) filename &optional label-identifier-string)  (with-running-watch    (setf filename (full-pathname filename))    (if (probe-file filename)      (let ((document (or (let ((loaded-doc (document-visible-p self filename)))                            (when (and loaded-doc                                       (destination-window loaded-doc)                                       (not (window-needs-saving-p (destination-window loaded-doc))))                              loaded-doc))                          (show-new-document self filename)))            (label (get-label label-identifier-string)))        (show-destination-window document)        (when label          (show label)))      (message-dialog        (format nil               "Sorry!~%~%The document '~A' can't be found. Perhaps you should use a different pathname."               filename)       :size #@(350 130)))))(defmethod close-document ((ob librarian) (doc document))  (setf (opened-documents ob)        (delq doc              (opened-documents ob))))(defun get-label (identifier-string)  (do ((labels (all-existing-labels *the-librarian*) (cdr labels)))      ((null labels) nil)    (when (string-equal identifier-string                        (identifier-string (car labels)))      (return (car labels)))))(defmethod make-new-document ((self librarian))  (show-source-window (make-instance 'document)));----------------------------------------------------------------------------------;----------------------------------------------------------------------------------                                  (defclass bookshelf-di (drop-target-dim hilite-svm picture-dim simple-view)  ()  (:default-initargs    :PICT-scaling :adjust-view-size    :view-position #@(0 0)    :view-nick-name :bookshelf    :detach-p nil    :rsrc-file "oou:Resources Stuff"    :rsrc-id 151    ))(defmethod view-cursor ((self bookshelf-di) where)  (declare (ignore where))  *full-hand-cursor*)(defmethod view-click-event-handler ((self bookshelf-di) where)  (declare (ignore where))  (hilite-view self t)  (let ((desired-document          (select-item-from-pup (nconc (available-document-net-files *the-librarian*)                                      (list "-" "Other ..."))                               :where (view-to-global self                                                       (make-point 3 (+ 0 (view-height self))))                               :item-to-string-fn                                #'(lambda (item)                                   (if (pathnamep item)                                     (format nil                                             "~A"                                             (pathname-name item))                                     item)))))    (cond ((and (stringp desired-document)                (string= desired-document "Other ..."))           (hilite-view self nil)           (let ((file (choose-file-dialog :mac-file-type :GMRE)))             (when file               (show-document *the-librarian* file))))          ((pathnamep desired-document)           (show-document *the-librarian* desired-document)))    (hilite-view self nil)))(defmethod dropped ((self bookshelf-di) (dest-window destination-window) offset where)  (declare (ignore offset where))  (hilite-view self t)  (window-save dest-window)  (hilite-view self nil));----------------------------------------------------------------------------------;----------------------------------------------------------------------------------                                  (defclass typesetter-di (drop-target-dim hilite-svm picture-dim simple-view)  ()  (:default-initargs    :PICT-scaling :adjust-view-size    :view-nick-name :typesetter    :detach-p nil    :rsrc-file "oou:Resources Stuff"    :rsrc-id 150))(defmethod view-cursor ((self typesetter-di) where)  (declare (ignore where))  *arrow-cursor*) (defmethod view-click-event-handler ((self typesetter-di) where)  (declare (ignore where))  nil)(defmethod draggable-view-enters ((self drop-target-dim) (droppable-view drag-and-drop-buffer) global-mouse-pos)  (declare (ignore droppable-view global-mouse-pos))  (with-focused-view self    (hilite-view self t)))(defmethod dropped ((self typesetter-di) (source-window source-window) offset where)  (declare (ignore offset where))  (hilite-view self t)  (process-run-function "Typeset Document"                        #'(lambda (typesetter source-window)                            (with-saved-selection (main-fred-item source-window)                              (typeset-window source-window)                              (hilite-view typesetter nil)))                        self source-window))(defmethod dropped ((self typesetter-di) (text-selection drag-and-drop-buffer) offset where)  (declare (ignore offset where))  (hilite-view self t)  (process-run-function "Typeset Selection"                        #'(lambda (typesetter source-window)                            (typeset-window source-window #@(0 0) nil)                            (hilite-view typesetter nil))                        self (view-window (source-fred text-selection))))(defmethod show-progress-report ((view typesetter-di)  status goal)  (declare (special *old-percentage*))  (let ((percentage (if (= goal 0)                      100                      (round (* (view-height view)                                (/ status goal))))))    (with-pen (:PatXor               *black-pattern*               (view-width view)               (- percentage *old-percentage*)               view)      (move-to view 0 *old-percentage*)      (line-to view 0 *old-percentage*))    (setf *old-percentage* percentage)))      ;----------------------------------------------------------------------------------;----------------------------------------------------------------------------------(defclass manuscript-di (drop-target-dim hilite-svm picture-dim simple-view  receive-finder-drags-mixin)  ()  (:default-initargs    :PICT-scaling :adjust-view-size    :view-position #@(0 0)    :view-nick-name :manuscripts    :detach-p nil    :rsrc-file "oou:Resources Stuff"    :rsrc-id 149    :accepted-flavors '(:|TEXT| :|hfs |)    ))(defmethod view-cursor ((self manuscript-di) where)  (declare (ignore where))  *full-hand-cursor*)(defmethod view-click-event-handler ((self manuscript-di) where)   (declare (ignore where))  (hilite-view self t)  (let ((desired-document          (select-item-from-pup (nconc (available-document-source-files *the-librarian*)                                      (list "-" "Other ..." "-" "New Document"))                               :where (view-to-global self                                                       (make-point 2 (+ 0 (view-height self))))                               :item-to-string-fn                                #'(lambda (item)                                   (if (pathnamep item)                                     (format nil                                             "~A"                                             (pathname-name item))                                     item)))))    (update-cursor)    (cond  ((and (stringp desired-document)                 (string= desired-document "New Document"))            (make-new-document *the-librarian*))           ((and (stringp desired-document)                 (string= desired-document "Other ..."))            (hilite-view self nil)            (let ((file (choose-file-dialog)))              (when file                (open-source-directly file))))           ((pathnamep desired-document)            (open-source-directly desired-document))))  (hilite-view self nil))(defmethod dropped ((self manuscript-di) (source-window source-window) offset where)  (declare (ignore offset where))  (hilite-view self t)  (window-save source-window)  (hilite-view self nil))(defmethod dropped ((view manuscript-di) (path pathname) offset global-where)  (declare (ignore offset global-where))  (open-source-directly path)  t)      ;-----------------------------------------------------------------------------------(defclass library-window (windoid drag-&-drop-window-mixin)  ()  (:default-initargs    :window-title "Bookshelf"    :view-position (make-point (- *screen-width* 295)                               *menubar-bottom*)    :view-size #@(226 65)    :window-type :document    :view-subviews (list (make-instance 'manuscript-di                           :view-position #@(1 1))                         (make-instance 'typesetter-di                           :view-position #@(76 1))                         (make-instance 'bookshelf-di                           :view-position #@(150 1)))))(defmethod window-close :before ((self library-window))  (setf (librarian-window *the-librarian*) nil))(defmethod reinitialize ((self library-window)) nil)(defmethod ccl::window-hide-for-suspend ((windoid library-window))  (when (window-shown-p windoid)    (setf (slot-value windoid 'ccl::show-on-resume-p) t)    ;(window-hide windoid)    ))                ;----------------------------------------------------------------------------------(defun make-library-window ()  (let* ((library-window          (make-instance 'library-window)))    (setf (librarian-window *the-librarian*) library-window)    library-window));--------------------------------------------------------------------------#|(defclass GoMan-application (application)  ())(defmethod ccl::open-application-document ((application GoMan-application) path &optional startup)  (declare (ignore startup))  (let ((type (mac-file-type path)))    (case type       (:GMDN        (show-document *the-librarian* path))      (:GMAu        (open-source-directly path))      (:GMRe        (show-document *the-librarian* path))      (t (call-next-method)))))|#