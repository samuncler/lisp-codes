(in-package :oou)(oou-provide :GoMan-source-window);************************************************************************                                    ;; Copyright © 1991-95 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; the source window (the author's view) of GoMan; ;; Changes (worth to be mentioned):; ------------------------------; none ;;************************************************************************;************************************************************************(export '())(oou-dependencies :simple-view-ce                              :unibas-cursors                              :unibas-icon-di                              :splitter-di                              :paned-view                              :special-paned-view                              :scrollable-fred-di                              :docu-line-svm                              :search-di                              :highlight                              :unibas-pop-up-menu-di                              :GoMan-macros                              :GoMan-formatter                              :pict-archive                              :hilite-svm                              :droppable-window                              :fred-window-mixin                              :restricted-size-wim                              :local-menubar                              :editable-text-di                              :source-window-menus                              )(defclass source-window-view-splitter (source-window-docu-line-svm view-splitter)   ()   (:default-initargs :docu-line-string "Resize text and catalog area"))(defmethod split-views ((self source-window-view-splitter) pos inside)   (declare (ignore inside))   (when (wptr self)       (let* ((menu-di (dialog-item-on-screen (view-window self)))                 (sequence-di (view-named :real-view menu-di))                 (old-scroll-pos (when (and sequence-di                                                             (typep sequence-di 'sequence-dialog-item))                                              (scroll-position sequence-di))))          (if (typep  menu-di 'destination-window-search-dialog-item)             (call-next-method self pos nil)             (call-next-method))          (when (and old-scroll-pos                            (cell-contents sequence-di old-scroll-pos))              (scroll-to-cell sequence-di old-scroll-pos)              (adjust-table-and-scrollbar sequence-di))))) ;----------------------------------------------------------------------------------(defclass source-window-menu-di (source-window-docu-line-svm menu-di)   ((correct-until-pos :initform 0                                   :accessor correct-until-pos                                   :initarg :correct-until-pos))   (:default-initargs      :docu-line-string "Scroll to a specific place in the text"     :view-class 'source-window-embedded-visible-menu-di))(defmethod initialize-instance :after ((self source-window-menu-di)  &rest initargs &key window)   (declare (ignore initargs))   (set-view-position self (dialog-item-default-position window))   (setf (menu-item-action self)            #'(lambda (menu-di item)                  (if (listp item)                     (let* ((document (document (view-window menu-di)))                               (item-at-pos (item-at-source-position document (car item))))                        (if item-at-pos                           (show item-at-pos)                           (scroll-to-position (real-fred (fred-window (view-window menu-di))) (car item))))                     (show item))))   (show-dialog-item window self)   (push (list self                     :adjust-h                     :stick-on-topleft)             (subview-description window)))(defmethod (setf correct-until-pos)  (new-value (self source-window-menu-di))    (when (< new-value (correct-until-pos self))       (setf (slot-value self 'correct-until-pos) new-value)       (invalidate-view (view-named :real-view self))))(defmethod (setf items) :around (new-value (self source-window-menu-di))    (declare (ignore new-value))   (when (wptr self)       (let* ((sequence-di (view-named :real-view self))                 (old-scroll-pos (scroll-position sequence-di)))          (call-next-method)          (when (view-window self)              (setf (slot-value self 'correct-until-pos)                       (buffer-size (fred-buffer (real-fred (fred-window (view-window self)))))))          (when (cell-contents sequence-di old-scroll-pos)              (scroll-to-cell sequence-di old-scroll-pos)              (adjust-table-and-scrollbar sequence-di)))))(defmethod reduce-subview-to-zero ((self source-window-menu-di))   (let ((window (view-window self)))      (invert-icon-of-dialog-item-on-screen window)      (hide-dialog-item window)))(defclass source-window-embedded-visible-menu-di (embedded-visible-menu-di)   ());----------------------------------------------------------------------------------(defclass source-window-embedded-fred-di (hilite-svm window-embedded-fred-di)   ((document :initform nil                      :initarg :document                      :accessor document)     (last-edit-mark :initform (list* 0 0)                               :accessor last-edit-mark))   (:default-initargs      :drop-target-class '(drag-and-drop-fred-mixin pict-working-area expanded-pict typesetter-di)))(defmethod initialize-instance :after ((ob source-window-embedded-fred-di) &rest initargs)     (declare (ignore initargs))    (comtab-set-key (slot-value ob 'comtab) '(:control  #\g) #'go-back-to-last-edit-mark))(defmethod install-view-in-window :after ((ob source-window-embedded-fred-di) window)   (declare (ignore window))   (setf (last-edit-mark ob)             (list* (buffer-position (fred-display-start-mark ob)) (selection-range ob))))    (defmethod after-change-update-method ((self source-window-embedded-fred-di) &key (draw-now-p t))   (declare (ignore draw-now-p))   (setf (car (last-edit-mark self)) (buffer-position (fred-display-start-mark self)))   (setf (cdr (last-edit-mark self)) (buffer-position (fred-buffer self)))   (when (and (view-window self)                     (dialog-item-on-screen (view-window self)))       (let* ((old-size (old-size self))                 (new-size (buffer-size (fred-buffer self)))                 (diff-size (- new-size old-size)))          (setf (correct-until-pos (dialog-item-on-screen (view-window self)))                   (max (if (> diff-size 0)                              (- (buffer-position (fred-buffer self))                                  diff-size)                              (1- (buffer-position (fred-buffer self))))                            0)))))(defmethod go-back-to-last-edit-mark ((self source-window-embedded-fred-di))   (let ((buff (fred-buffer self))           (edit-pos (cdr (last-edit-mark self)))           (start-pos (car (last-edit-mark self))))      (collapse-selection self nil)      (set-mark buff edit-pos)      (set-fred-display-start-mark self start-pos)      (when (= (fred-vpos self (buffer-line-start buff edit-pos)) -1)          (do ((i -1 (1- i)))                ((or (/= (fred-vpos self (buffer-line-start buff edit-pos (- i))) -1)                       (/= (fred-vpos self (buffer-line-start buff edit-pos i)) -1))                  (if (/= (fred-vpos self (buffer-line-start buff edit-pos i)) -1)                     (set-fred-display-start-mark self (buffer-line-start buff start-pos (1+ (- i))))                     (set-fred-display-start-mark self (buffer-line-start buff start-pos (1- i))))                     )))))     #|                               (defmethod mini-buffer-update :after ((self source-window-embedded-fred-di))   (set-dialog-item-text (mouse-documentation-line (view-window self))                                       (slot-value (view-mini-buffer self) 'ccl::my-string))   (view-draw-contents (mouse-documentation-line (view-window self))))|#(defmethod fred-update :before ((self source-window-embedded-fred-di))    (when  (and (document self)                      (wptr self)                      (neq (last-buffer-modcnt self) 0)                      (neq (last-buffer-modcnt self) (buffer-modcnt (fred-buffer self))))       (setf (source-buffer-changed-p (document self)) t)))(defmethod view-activate-event-handler :after ((self source-window-embedded-fred-di))   (mapcar #'menu-disable (menubar))   (menu-enable (find-menu (format nil "~A" #\AppleMark))))(defmethod view-deactivate-event-handler :after ((self source-window-embedded-fred-di))   (dolist (menu (menubar))      (menu-enable menu)))(defmethod dropped ((self source-window-embedded-fred-di) (pict shrinked-pict) offset where)   (declare (ignore offset where))   (draw-dummy-cursor self)   (insert-picture-template self pict :at-mouse-position t))(defmethod dropped ((self source-window-embedded-fred-di) (pict expanded-pict) offset where)   (declare (ignore offset where))   (draw-dummy-cursor self)   (insert-picture-template self pict :at-mouse-position t))(defmethod paste ((self source-window-embedded-fred-di))   (let ((pict (get-picture-from-scrap)))      (if pict         (insert-picture-template self pict)         (call-next-method))))(defmethod insert-picture-template ((self source-window-embedded-fred-di) pict &key (at-mouse-position nil))    (let ((buff (fred-buffer self))           (insert-pos nil))      (collapse-selection self t)      (when at-mouse-position          (set-mark buff (fred-point-position self (view-mouse-position self))))      (insert (get-command 'figure) self)      (setf insert-pos (buffer-position buff))      (buffer-insert buff                               (format nil "~A"                                            (typecase pict                                              (shrinked-pict (point-v (pict-size pict)))                                              (expanded-pict (- (point-v (view-size pict)) 4))))                              (+ insert-pos 12))      (buffer-insert buff                               (format nil "~A"                                            (typecase pict                                              (shrinked-pict (point-h (pict-size pict)))                                              (expanded-pict (- (point-h (view-size pict)) 4))))                               (+ insert-pos 9))      (let ((rsrc-id (slot-value (typecase pict                                                  (shrinked-pict pict)                                                 (expanded-pict (shrinked-pict pict)))                                              'rsrc-id)))         (when rsrc-id             (buffer-insert buff (format nil "~A" rsrc-id) (+ insert-pos 5))))      (fred-update self)      (window-select (view-window self))))(defmethod  scroll-to-position ((self source-window-embedded-fred-di) position)   (cond ((>= (buffer-size (fred-buffer self)) position)              (set-mark (fred-buffer self) position)              (set-mark (fred-display-start-mark self) position)              (fred-update self))             (t (flash self))));----------------------------------------------------------------------------------(defclass source-window-scrollable-fred-di (source-window-docu-line-svm scrollable-fred-di)   ((document :initform nil                      :initarg :document                      :accessor document))   (:default-initargs      :view-font '("GoMan Helvetica" 12 :plain)     :fred-item-class 'source-window-embedded-fred-di     :docu-line-string ""))         (defmethod initialize-instance :around ((self source-window-scrollable-fred-di) &rest initargs &key window)   (declare (ignore initargs))    (call-next-method)   (let ((document (document window)))      (setf (document self) document)      (setf (document (real-fred self)) document)      (set-view-size self (make-point (+ (window-width document) 16)                                                          (+ (window-height document) 2)))      (set-view-position self (dialog-item-default-position window))      (setf (fred-window window) self)))(defmethod real-fred ((self source-window-scrollable-fred-di))   (fred-item self));----------------------------------------------------------------------------------;----------------------------------------------------------------------------------(defclass source-window (restricted-size-wim unibas-reshape-mixin fred-window-mixin droppable-window  drag-&-drop-window-mixin)   ((document :initform nil                      :accessor document                      :initarg :document)     (pict-archive :initform nil                           :accessor pict-archive)     (fred-class :initform 'source-window-scrollable-fred-di                        :initarg :fred-class                        :accessor fred-class)     (fred-window :initform nil                            :accessor fred-window)     (contents-dialog-item :initform nil                                         :accessor contents-dialog-item)     (figure-dialog-item :initform nil                                     :accessor figure-dialog-item)     (examples-dialog-item :initform nil                                          :accessor examples-dialog-item)     (index-dialog-item :initform nil                                    :accessor index-dialog-item)     (labels-dialog-item :initform nil                                     :accessor labels-dialog-item)     (links-dialog-item :initform nil                                    :accessor links-dialog-item)     (splitter :initform nil                    :accessor splitter)     (dialog-item-on-screen :initform nil                                           :accessor dialog-item-on-screen)     (mouse-documentation-line :initform nil                                                  :accessor mouse-documentation-line)     (actual-object :initform nil                             :accessor actual-object))   (:default-initargs      :drop-targets (list :manuscripts :typesetter)     :min-size #@(332 169)))(defmethod initialize-instance  ((self source-window) &rest initargs)   (apply #'call-next-method self :window-show nil initargs)  (let* ((document (document self))             (fred-window (make-instance (fred-class self)                                        :window self                                        :filename (if (typep self 'destination-window)                                                          (and (destination-file document)                                                                  (probe-file (destination-file document)))                                                          (and (source-file document)                                                                  (probe-file (source-file document))))))             (mouse-documentation-line               (make-instance 'fred-window-mixin-mini-buffer   ;'static-text-dialog-item                   :view-nick-name 'mini-buffer                   :h-scrollp nil                   :v-scrollp nil                   :draw-scroller-outline nil                   :view-size (make-point (- (view-width self) 16)                                                         15)                   :view-position (make-point 0                                                                (- (view-height self)13))                   :view-font '("monaco" 9 :plain)                   :dialog-item-text ""))             (menu-bar (make-menu-bar self))             (icon-bar (make-icon-bar self))             (splitter (add-view-splitter self (list :vertical nil 62 #@(16 5) 'source-window-view-splitter))))      (setf (main-fred-item self) (fred-item fred-window))      (setf (mouse-documentation-line self) (fred-item mouse-documentation-line))    (setf (splitter self) splitter)      (setf (subview-description self)               (list (list fred-window :adjust-h-v :stick-on-topright)                       (list mouse-documentation-line :adjust-h :stick-on-bottomleft)                       (list icon-bar :adjust-v :stick-on-topright)                       (list menu-bar :adjust-h :stick-on-topleft)                       (list splitter :constant :stick-on-topright)))))(defmethod set-file-type-and-creator ((self source-window))   (set-mac-file-type (filename self) :GMAU)   (set-mac-file-creator (filename self) :GOMN))(defmethod view-mini-buffer ((w source-window))   (mouse-documentation-line w))(defmethod window-save :around ((self source-window))   (let ((old-file (slot-value (main-fred-item self) 'ccl::my-file-name)))      (call-next-method)      (when (and (null old-file)                        (slot-value (main-fred-item self) 'ccl::my-file-name))          (set-file-type-and-creator self))))(defmethod window-close ((self source-window))    (call-next-method)   (unless (typep self 'destination-window)      (with-slots (document) self           (unless (destination-window document)             (reset-environment document)             (setf (opened-documents *the-librarian*)                      (delq document (opened-documents *the-librarian*))))          (when (pict-archive self)              (setf (source-window (pict-archive self)) nil))          (setf (source-window document) nil)          (let* ((menubar (view-named 'menubar self))                    (iconbar (view-named :icon-bar self))                    (edit-menu (view-named :edit-menu menubar))                    (command-menu (view-named :command-menu menubar))                    (document-menu (view-named :document-menu menubar))                    (special-menu (view-named :special-menu menubar)))             (push edit-menu *goman-edit-menus*)             (push command-menu *goman-command-menus*)             (push document-menu *goman-document-menus*)             (push special-menu *goman-special-menus*)             (push (nreverse (subviews iconbar)) *goman-icons*))          )))(defmethod window-save-as :around ((self source-window))    (call-next-method)    (set-mac-file-type (filename self) :GMAU)    (set-mac-file-creator (filename self) :GOMN)    (let ((name (filename self)))       (window-close self)       (open-source-directly name)))   (defmethod typeset-window  ((window source-window) &optional (offset #@(0 0)) (hide-source-window t))   (setf (source-buffer-changed-p (document window)) nil)   (when (destination-buffer (document window))       (buffer-delete (destination-buffer (document window)) 0 t))   (let ((typesetter (when (librarian-window *the-librarian*)                                  (view-named :typesetter (librarian-window *the-librarian*))))           (destination-window (destination-window (document window))))      (when typesetter          (hilite-view typesetter t)          (when destination-window              (window-hide destination-window))          (when hide-source-window              (implode (add-points (view-top-left window)                                                offset)                         (add-points (view-bottom-right window)                                            offset)                         (view-to-global typesetter #@(0 0))                         (view-to-global typesetter (view-size typesetter))                         :delay 0.01)              (window-hide window)))      (make-destination-window-if-necessary (document window))      (setf destination-window (destination-window (document window)))      (format-selection (document window))      (when typesetter          (explode (view-to-global typesetter #@(0 0))                        (view-to-global typesetter (view-size typesetter))                        (view-top-left destination-window)                        (view-bottom-right destination-window)                        :delay 0.01))      (show-destination-window (document window))      (when (and typesetter                        hide-source-window)          (explode (view-to-global typesetter #@(0 0))                        (view-to-global typesetter (view-size typesetter))                        (view-top-left window)                        (view-bottom-right window)                        :delay 0.01)          (hilite-view typesetter nil))      (window-select window)))           (defmethod (setf actual-object) :around (newvalue (self source-window))    (let ((update-necessary (and (neq (actual-object self) newvalue)                                                 (contents-dialog-item self)                                                 (wptr (contents-dialog-item self)))))      (call-next-method)      (when update-necessary          (view-draw-contents (contents-dialog-item self)))))(defmethod compute-actual-object ((self source-window))   (let ((first-position (buffer-position (fred-display-start-mark (real-fred (fred-window self)))))           (contents-objects (contents-objects (document self))))      (let ((candidate                (find-if #'(lambda (object)                                    (and (>= (source-start-position object)                                                first-position)))                             contents-objects)))         (if (and candidate                      (/= (fred-vpos (real-fred (fred-window self)) (source-start-position candidate)) -1))            candidate            (if  candidate               (if (eq candidate (car contents-objects))                  (car contents-objects)                  (do ((rest contents-objects (cdr rest)))                        ((or (eq (cadr rest) candidate)                               (null rest))                          (if rest (car rest) (car contents-objects)))))               (car (last contents-objects)))))))(defmethod view-draw-contents :after ((self source-window))   (invert-icon-of-dialog-item-on-screen self))(defmethod hide-subview  ((self source-window) (fred source-window-scrollable-fred-di))   nil)(defmethod show-subview :around ((self source-window) (fred source-window-scrollable-fred-di) &optional position)   (declare (ignore position))   (with-saved-selection (real-fred fred)        (call-next-method)))(defmethod edit-menu ((win source-window))   (or (pop *goman-edit-menus*)         (make-new-edit-menu)))(defmethod command-menu ((win source-window))   (or (pop *goman-command-menus*)         (make-new-command-menu)))(defmethod special-menu ((win source-window))   (or (pop *goman-special-menus*)         (make-new-special-menu)))(defmethod document-menu ((win source-window))   (or (pop *goman-document-menus*)         (make-new-document-menu)))(defmethod icons ((win source-window))   (or (pop *goman-icons*)         (make-new-goman-icons)))(defmethod contents-icon ((self source-window))    (view-named :contents-icon (view-named :icon-bar self)))(defmethod figures-icon ((self source-window))    (view-named :figures-icon  (view-named :icon-bar self)))(defmethod index-icon ((self source-window))    (view-named :index-icon  (view-named :icon-bar self)))(defmethod examples-icon ((self source-window))    (view-named :examples-icon  (view-named :icon-bar self)))(defmethod labels-icon ((self source-window))    (view-named :labels-icon  (view-named :icon-bar self)))(defmethod links-icon ((self source-window))    (view-named :links-icon  (view-named :icon-bar self)))     (defmethod hide-dialog-item ((self source-window))   (with-slots (fred-window splitter dialog-item-on-screen mouse-documentation-line) self       (cond (dialog-item-on-screen                  (hide-subview self dialog-item-on-screen)                  (hide-subview self splitter)                  (set-view-size fred-window                                            (make-point (view-width fred-window)                                                               (- (view-height self)                                                                   (point-v (dialog-item-default-position self))                                                                   (view-height mouse-documentation-line))))                  (set-view-position fred-window (dialog-item-default-position self))                  (setf dialog-item-on-screen nil))                 (t (flash self)))))(defmethod show-dialog-item ((self source-window) dialog-item)   (with-slots (fred-window splitter dialog-item-on-screen) self       (unless (eq dialog-item dialog-item-on-screen)          (hide-subview self splitter)          (hide-subview self fred-window)          (when dialog-item-on-screen              (hide-dialog-item self))          (let ((new-size (make-point (view-width fred-window)(view-height dialog-item))))             (set-view-size dialog-item new-size)             (set-view-size fred-window (make-point (view-width fred-window)                                                                               (- (view-height fred-window)                                                                                   (view-height dialog-item)                                                                                   5)))             (set-view-position fred-window (make-point (view-left fred-window)                                                                                      (+ (view-bottom dialog-item)                                                                                          5)))             (setf dialog-item-on-screen dialog-item)             (show-subview self dialog-item-on-screen)             (update-catalog self)          ;(unless (typep dialog-item-on-screen 'unibas-search-dialog-item)                (setf (splitted-views splitter) (list dialog-item fred-window))                (set-view-splitter-correct-position splitter)                (show-subview self splitter)             (show-subview self fred-window)))))(defmethod selected-icon ((self source-window))   (with-slots (dialog-item-on-screen contents-dialog-item figure-dialog-item                        index-dialog-item  examples-dialog-item labels-dialog-item                        links-dialog-item) self       (when dialog-item-on-screen           (cond ((eq dialog-item-on-screen contents-dialog-item)                      (contents-icon self))                     ((eq dialog-item-on-screen figure-dialog-item)                       (figures-icon self))                     ((eq dialog-item-on-screen examples-dialog-item)                       (examples-icon self))                     ((eq dialog-item-on-screen index-dialog-item)                       (index-icon self))                     ((eq dialog-item-on-screen labels-dialog-item)                       (labels-icon self))                     ((eq dialog-item-on-screen links-dialog-item)                       (links-icon self))))))                                                       (defmethod invert-icon-of-dialog-item-on-screen ((self source-window))   (let ((icon (selected-icon self)))      (when icon           (view-invert icon))))(defmethod dialog-item-default-size ((self source-window))   (with-slots (fred-window) self       (make-point (view-width fred-window)                           (min (- (round (view-height self)                                                  3)                                        (point-v (dialog-item-default-position self))                                        5)                                    130))))(defmethod dialog-item-default-position ((self source-window))   (make-point 1 20))(defmethod update ((self source-window))   (with-slots (document fred-window contents-dialog-item examples-dialog-item index-dialog-item                                        figure-dialog-item dialog-item-on-screen labels-dialog-item links-dialog-item) self       (let ((fred (real-fred fred-window)))          (fred-update fred)          (when contents-dialog-item              (setf (items contents-dialog-item)                        (find-all-sectioning fred)))          (when figure-dialog-item               (setf (items figure-dialog-item)                       (find-all-figures fred)))          (when examples-dialog-item              (setf (items examples-dialog-item)                        (find-all-examples fred)))          (when index-dialog-item              (setf (items index-dialog-item)                        (find-all-indexes fred)))          (when labels-dialog-item              (setf (items labels-dialog-item)                        (find-all-labels fred)))          (when links-dialog-item              (setf (items links-dialog-item)                        (find-all-links fred)))          (when dialog-item-on-screen              (view-draw-contents dialog-item-on-screen))          (setf (source-buffer-changed-p document) nil))))(defmethod update-catalog ((self source-window))   (let ((di (dialog-item-on-screen self))           (fred (real-fred (fred-window self))))      (when di          (labels ((remove-incorrect-items (dialog-item)                          (delete-if #'(lambda (item)                                                 (>= (car item) (correct-until-pos di)))                                           (items dialog-item))))             (with-slots (document contents-dialog-item examples-dialog-item index-dialog-item                                                  figure-dialog-item dialog-item-on-screen labels-dialog-item links-dialog-item) self                 (cond ((eq di contents-dialog-item)                            (setf (items contents-dialog-item)                                      (nconc (remove-incorrect-items di)                                                (find-all-sectioning fred (correct-until-pos di)))))                           ((eq di figure-dialog-item)                             (setf (items figure-dialog-item)                                      (nconc (remove-incorrect-items di)                                                 (find-all-figures fred (correct-until-pos di)))))                           ((eq di examples-dialog-item)                             (setf (items examples-dialog-item)                                       (nconc (remove-incorrect-items di)                                                 (find-all-examples fred (correct-until-pos di)))))                           ((eq di index-dialog-item)                             (setf (items index-dialog-item)                                       (nconc (remove-incorrect-items di)                                                 (find-all-indexes fred (correct-until-pos di)))))                           ((eq di labels-dialog-item)                             (setf (items labels-dialog-item)                                       (nconc (remove-incorrect-items di)                                                 (find-all-labels fred (correct-until-pos di)))))                           ((eq di links-dialog-item)                             (setf (items links-dialog-item)                                       (nconc (remove-incorrect-items di)                                                 (find-all-links fred (correct-until-pos di))))))                 ;(view-draw-contents di)                 nil)))));----------------------------------------------------------------------------------#|(defmethod make-contents-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific chapter in the text"                 :window self                 :items (contents-objects (document self))                 :item-print-function                  #'(lambda (item stream)                       (when (eq item (actual-object (source-window (document item))))                           (#_TextFace (ash 1 #$italic)))                       (format stream                                    (format nil                                                  "~~~DT~~{~~A.~~} ~~A"                                                 (cond ((= (length (number item)) 1) 0)                                                           ((= (length (number item)) 2) 3)                                                           ((= (length (number item)) 3) 6)                                                           ((= (length (number item)) 4) 9)))                                    (number item) (title item))))))      (setf (contents-dialog-item self) dialog-item)      (setf (dialog-item (contents-icon self)) dialog-item)      dialog-item))|#(defmethod draw-cell-contents :around ((self source-window-embedded-visible-menu-di ) h &optional v)   (when (view-window self)          (cond ((and (not (typep (view-window self) 'destination-window))                         (numberp (car (cell-contents self h v)))                         (<= (correct-until-pos (dialog-item-on-screen (view-window self)))                               (car (cell-contents self h v))))                  (with-text-state (:txFace (ash 1 #$italic))                      (call-next-method)))                 (t (call-next-method)))))         (defmethod make-contents-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific chapter in the text"                 :window self                 :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))                 :items (find-all-sectioning (real-fred (fred-window self)))                 :item-print-function                  #'(lambda (item stream)                      (format stream                                    "~A"                                    (cdr item))))))      (setf (contents-dialog-item self) dialog-item)      (setf (dialog-item (contents-icon self)) dialog-item)      dialog-item))(defmethod make-figures-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific figure in the text"                 :window self                 :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))                 :items (find-all-figures (real-fred (fred-window self)))                 :item-print-function #'(lambda (item stream)                                                        (format stream                                                                     "  x.x ~A"                                                                     (cdr item))))))      (setf (figure-dialog-item self) dialog-item)      (setf (dialog-item (figures-icon self)) dialog-item)      dialog-item))(defmethod make-examples-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific example in the text"                 :window self                 :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))                 :items (find-all-examples (real-fred (fred-window self)))                 :item-print-function #'(lambda (item stream)                                                        (format stream                                                                     "  x.x ~A"                                                                     (cdr item))))))     (setf (examples-dialog-item self) dialog-item)     (setf (dialog-item (examples-icon self)) dialog-item)     dialog-item))#|(defmethod make-index-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific keyword in the text"                 :window self                 :items (setf (index-entries (document self))                                     (sort (index-entries (document self)) #'index-entry-lessp))                 :item-print-function #'(lambda (item stream)                                                        (format stream                                                                     "~A, ~{~A.~}"                                                                     (index-entry item)                                                                     (if (container item)                                                                        (number (container item))                                                                        (list 0)))))))     (setf (index-dialog-item self) dialog-item)     (setf (dialog-item (index-icon self)) dialog-item)     dialog-item))|#(defmethod make-index-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific keyword in the text"                 :window self                 :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))                 :items (find-all-indexes (real-fred (fred-window self)))                 :item-print-function #'(lambda (item stream)                                                        (format stream                                                                     " ~A"                                                                     (cdr item))))))      (setf (index-dialog-item self) dialog-item)      (setf (dialog-item (index-icon self)) dialog-item)      dialog-item))#|(defmethod make-labels-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific label in the text"                 :window self                 :items (setf (all-labels (document self))                                     (sort (all-labels (document self)) #'string<  :key #'identifier-string))                 :item-print-function #'(lambda (item stream)                                                        (format stream                                                                     "'~A'  ~A"                                                                     (identifier-string item)                                                                     (if (source-start-position item)                                                                        " "                                                                        "  (open reference)"))))))     (setf (labels-dialog-item self) dialog-item)     (setf (dialog-item (labels-icon self)) dialog-item)     dialog-item))|#(defmethod make-labels-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific label in the text"                 :window self                 :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))                 :items (find-all-labels (real-fred (fred-window self)))                 :item-print-function #'(lambda (item stream)                                                        (format stream                                                                     " ~A"                                                                     (cdr item))))))     (setf (labels-dialog-item self) dialog-item)     (setf (dialog-item (labels-icon self)) dialog-item)     dialog-item))#|(defmethod make-links-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific start of a link in the text"                 :window self                 :items (setf (all-links (document self))                                     (sort (all-links (document self)) #'string<  :key #'identifier-string))                 :item-print-function #'(lambda (item stream)                                                        (format stream                                                                     "'~A'   (link to ~A)"                                                                     (identifier-string item)                                                                     (typecase item                                                                        (application-link                                                                           (format nil "application-label '~A'"                                                                                       (identifier-string (label item))))                                                                        (document-link                                                                           (format nil                                                                                        "label '~A' in document '~A'"                                                                                       (label-string item)                                                                                       (document-string item)))                                                                        (link                                                                          (format nil "label '~A'"                                                                                       (identifier-string (label item))))))))))     (setf (links-dialog-item self) dialog-item)     (setf (dialog-item (links-icon self)) dialog-item)     dialog-item))|#(defmethod make-links-dialog-item ((self source-window))   (let ((dialog-item             (make-instance 'source-window-menu-di                 :docu-line-string "Scroll to a specific start of a link in the text"                 :window self                 :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))                 :items (find-all-links (real-fred (fred-window self)))                 :item-print-function #'(lambda (item stream)                                                        (format stream                                                                     " ~A"                                                                     (cdr item))))))      (setf (links-dialog-item self) dialog-item)      (setf (dialog-item (links-icon self)) dialog-item)      dialog-item))(defmethod make-icon-bar ((self source-window))   (make-instance 'unibas-constant-subview-collection       :direction :vertical       :distance 1       :view-nick-name :icon-bar       :view-size (make-point 26 (- (view-height self) 22))       :view-position (make-point (+ (window-width  (document self)) 19) 20)       :items (icons self)))                                                        (defmethod make-menu-bar ((self source-window))   (make-instance 'local-menubar       :draw-outline-p nil       :view-nick-name 'menubar       :view-font '("Chicago" 12 :plain)       :menus (list (document-menu self)                            (edit-menu self)                            (command-menu self)                            (special-menu self))));----------------------------------------------------------------------------------;----------------------------------------------------------------------------------(defun index-entry-lessp (index-1 index-2)   (cond ((string-lessp (index-entry index-1)(index-entry index-2)) t)             ((string-greaterp (index-entry index-1) (index-entry index-2)) nil)             ((null (container index-1)) t)             ((null (container index-2)) nil)             ((document-part-lessp (number (container index-1)) (number (container index-2))) t)             (t nil)))               (defun make-source-window (document &key position)   (declare (ignore position))   (let ((source-window              (make-instance 'source-window                 :document document                 :window-show nil                 :view-size (make-point (+ (window-width document) 46)                                                       (+ (window-height document) 34)))))      (setf (source-window document) source-window)      (setf (source-buffer document) (fred-buffer (real-fred (fred-window source-window))))      (setf (source-buffer-changed-p document) nil)      source-window))(defun open-source-directly (source-file &key position)   (let* ((dnet-file (full-pathname (format nil                                                                    "~A~A.dnet"                                                                   (directory-namestring source-file)                                                                   (pathname-name source-file))))             (document (if (and (probe-file dnet-file)                                           (> (file-write-date dnet-file)                                               (file-write-date source-file)))                                 (let ((doc (read-object-net-file dnet-file)))                                    (update-document-files doc dnet-file)                                    doc)                                 (make-instance 'document :source-file source-file))))      (show-source-window document :position position)      (setf (source-buffer-changed-p document) nil)));------------------------------------------------------------------------------------------;------------------------------------------------------------------------------------------; searching for the commands in fred(defun find-all-string-pos (fred string &key (start 0) (end t))   (let ((buff (fred-buffer fred))           (string-length (length string)))      (when (< start (buffer-size buff))          (do ((string-pos (buffer-string-pos buff string :start start :end end)                                    (buffer-string-pos buff string :start (+ string-pos string-length) :end end))                 (positions nil))                ((null string-pos) (nreverse positions))             (push string-pos positions)))))(defun get-substring (fred start &key stop-char (max-chars 80) (ignore-strings (list *wsp&cr* "{\"")))   (when (< start (buffer-size (fred-buffer fred)))       (let* ((buf (fred-buffer fred))                 (last-stop (min (buffer-size buf) (+ start max-chars)))                 (first-char-pos (or (ccl::buffer-forward-find-not-char buf                                                                                                         (format nil "~{~A~}" ignore-strings)                                                                                                        start last-stop)                                                start))                 (last-char-pos (or (when stop-char                                                   (ccl::buffer-forward-find-char buf stop-char (1- first-char-pos) last-stop))                                               last-stop)))          (values (buffer-substring buf (max (1- first-char-pos) start) (1- last-char-pos))                       (1- last-char-pos)))))(defmethod find-all-sectioning ((fred fred-mixin) &optional (start 0))   (let ((all-chapter-pos (find-all-string-pos fred "@Chapter" :start start))           (all-section-pos (find-all-string-pos fred "@Section" :start start))           (all-subsection-pos (find-all-string-pos fred "@SubSection" :start start))           (all-subsubsection-pos (find-all-string-pos fred "@SubSubSection" :start start))           (all-sectionings nil))      (dolist (chapter-pos all-chapter-pos)         (push (list* chapter-pos                             (format nil " x.  ~A" (get-substring fred (+ chapter-pos 8) :stop-char #\})))                   all-sectionings))      (dolist (section-pos all-section-pos)         (push (list* section-pos                             (format nil "   x.x  ~A" (get-substring fred (+ section-pos 9) :stop-char #\})))                   all-sectionings))      (dolist (subsection-pos all-subsection-pos)         (push (list* subsection-pos                             (format nil "     x.x.x  ~A" (get-substring fred (+ subsection-pos 12) :stop-char #\})))                   all-sectionings))      (dolist (subsubsection-pos all-subsubsection-pos)         (push (list* subsubsection-pos                             (format nil "       x.x.x.x  ~A" (get-substring fred (+ subsubsection-pos 15) :stop-char #\})))                   all-sectionings))      (sort all-sectionings #'< :key #'car)))                           (defmethod find-all-figures ((fred fred-mixin) &optional (start 0) &aux figures)   (dolist (figure-pos (find-all-string-pos fred "@Figure" :start start) (nreverse figures))      (push (list* figure-pos                          (get-substring fred (+ figure-pos 8) :stop-char "\"}"))                figures)))(defmethod find-all-examples ((fred fred-mixin) &optional (start 0) &aux examples)   (dolist (example-pos (find-all-string-pos fred "@Example" :start start) (nreverse examples))      (push (list* example-pos                          (get-substring fred (+ example-pos 9) :stop-char "\"}"))                examples)))(defmethod find-all-indexes ((fred fred-mixin) &optional (start 0) &aux indexes)   (dolist (index-pos (find-all-string-pos fred "@Index" :start start) (sort indexes #'string-lessp :key #'cdr))      (push (list* index-pos                          (get-substring fred (+ index-pos 7) :stop-char "\"}"))                indexes)))(defmethod find-all-labels ((fred fred-mixin) &optional (start 0) &aux labels)   (dolist (label-pos (find-all-string-pos fred "@Label" :start start) (sort labels #'string-lessp :key #'cdr))      (push (list* label-pos                          (format nil                                       "'~A'"                                       (get-substring fred (+ label-pos 7) :stop-char "\"}")))                labels)))(defmethod find-all-links ((fred fred-mixin) &optional (start 0) &aux links)   (dolist (link-pos (find-all-string-pos fred "@Link" :start start))      (push (list* link-pos                          (multiple-value-bind (link-text end-pos) (get-substring fred (+ link-pos 6) :stop-char "\"|")                              (format nil "'~A'  [local Link to '~A']"                                            link-text                                           (get-substring fred end-pos                                                                   :ignore-strings (list *wsp&cr2* "\"|")                                                                   :stop-char "\"|"))))                links))   (dolist (link-pos (find-all-string-pos fred "@Application-Link" :start start))      (push (list* link-pos                          (multiple-value-bind (link-text end-pos) (get-substring fred (+ link-pos 18) :stop-char "\"|")                              (format nil "'~A'  [Application-Link to '~A']"                                            link-text                                           (get-substring fred end-pos                                                                   :ignore-strings (list *wsp&cr2* "\"|")                                                                   :stop-char "\"|"))))                links))   (dolist (link-pos (find-all-string-pos fred "@Document-Link" :start start))      (push (list* link-pos                          (multiple-value-bind (link-text text-end-pos) (get-substring fred (+ link-pos 15) :stop-char "\"|")                              (multiple-value-bind (document-name name-end-pos)                                                                 (get-substring fred                                                                                         text-end-pos                                                                                        :ignore-strings (list *wsp&cr2* "\"|")                                                                                        :stop-char "\"|")                                  (format nil "'~A'  [Document-Link to '~A' in Document '~A']"                                                link-text                                               (get-substring fred name-end-pos                                                                       :ignore-strings (list *wsp&cr2* "\"|") :stop-char "\"|}")                                               document-name                                               ))))                links))   (sort links #'string-lessp :key #'cdr))                