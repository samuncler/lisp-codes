(in-package :oou)(oou-provide :source-window-menus);************************************************************************                                    ;; Copyright © 1995-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; ;; Changes (worth to be mentioned):; ------------------------------; none ;;************************************************************************;************************************************************************(defclass source-window-docu-line-svm (docu-line-svm)  ())(defmethod current-docu-view ((self source-window-docu-line-svm) &optional where)  (declare (ignore where))  (when (view-window self)    (mouse-documentation-line (view-window self))));----------------------------------------------------------------------------------(defclass source-window-pop-up-menu (source-window-docu-line-svm local-menu)  ()  (:default-initargs     ;:view-size #@(75 20)    ));----------------------------------------------------------------------------------(defclass source-window-menu-item (menu-item)  ((window :initform nil           :initarg :window           :accessor window)))(defmethod menu-item-window ((menu-item source-window-menu-item))  (do ((item menu-item (menu-owner item)))      ((null (menu-owner item))       (view-window item))))(defmethod menu-item-action ((self source-window-menu-item))  (funcall (menu-item-action-function self) self (menu-item-window self)))(defclass source-window-command-menu-item (source-window-menu-item)  ((command :initform nil            :initarg :command            :accessor command))  (:default-initargs    :menu-item-action    #'(lambda (menu-item window)        (insert (command menu-item) (real-fred (fred-window window))))))(defclass new-font-menu-item (source-window-menu-item)  ((item-info :initform nil              :initarg :item-info              :accessor :item-info))  (:default-initargs     :menu-item-action    #'(lambda (menu-item window)        (let* ((fred (real-fred (fred-window window)))               (buffer (fred-buffer fred)))          (with-slots (item-info) menu-item            (multiple-value-bind (begin-selection end-selection) (selection-range fred)              (if (eq begin-selection end-selection)                (buffer-set-font-spec buffer item-info)                (buffer-set-font-spec buffer item-info begin-selection end-selection)))            (fred-update fred))))))(defmethod menu-item-update ((item new-font-menu-item))  (let* ((fred-window (fred-item (fred-window (menu-item-window item))))         (font-size-menu-p (find (menu-item-title item)  '(" 9" "10" "12" "14" "18" "24") :test #'string=))         (font-style-menu-p (find (menu-item-title item) '("extend" "condense" "shadow" "outline" "underline" "italic" "bold" "plain")                                  :test #'string-equal)))    (multiple-value-bind (begin-selection end-selection) (selection-range fred-window)      (if (= begin-selection end-selection)        (set-menu-item-check-mark item                                  (not (not (member (if font-size-menu-p                                                      (read-from-string (menu-item-title  item) nil)                                                      (menu-item-title  item))                                                    (if font-style-menu-p                                                      (mapcar #'(lambda (thing)                                                                  (if (symbolp thing)                                                                    (symbol-name thing)                                                                    thing))                                                              (buffer-current-font-spec (fred-buffer fred-window)))                                                      (buffer-current-font-spec (fred-buffer fred-window)))                                                    :test #'equalp))))        (set-menu-item-check-mark item                                  (not (not (member (if font-size-menu-p                                                      (read-from-string (menu-item-title  item) nil)                                                      (menu-item-title  item))                                                    (if font-style-menu-p                                                      (mapcar #'(lambda (thing)                                                                  (if (symbolp thing)                                                                    (symbol-name thing)                                                                    thing))                                                              (buffer-char-font-spec (fred-buffer fred-window)                                                                                     begin-selection))                                                      (buffer-char-font-spec (fred-buffer fred-window)                                                                             begin-selection))                                                    :test #'equalp)))))            (when font-size-menu-p        (set-menu-item-style item                              (if (real-font (substitute-if (read-from-string (menu-item-title  item) nil)                                                           #'integerp                                                           (if (= begin-selection end-selection)                                                             (buffer-current-font-spec (fred-buffer fred-window))                                                             (buffer-char-font-spec (fred-buffer fred-window)                                                                                    begin-selection))))                               :outline                               :plain))))));----------------------------------------------------------------------------------(defclass source-window-icon (source-window-docu-line-svm 3d-tool-select-di)  ((dialog-item :initform nil                :accessor dialog-item                :initarg :dialog-item)   (di-generation-function :initform nil                           :accessor di-generation-function                           :initarg :di-generation-function))  (:default-initargs     :view-size #@(26 21)    :icon-text ""     :dialog-item-action 'source-window-icon-action    ))(defmethod source-window-icon-action ((self source-window-icon))  (with-slots (dialog-item di-generation-function) self    (let ((source-window (view-window self)))       (if (selected-p self)        (hide-dialog-item source-window)        (if dialog-item          (show-dialog-item source-window dialog-item)          (funcall di-generation-function source-window))))))(defmethod release-picture-handle ((self source-window-icon))  nil  )(defmethod current-docu-string ((view source-window-icon) &optional where)  (declare (ignore where))  (format nil          "~A~A"          (if (selected-p view)            "Hide "            "Show ")          (call-next-method)));----------------------------------------------------------------------------------(defun make-new-edit-menu ()  (make-instance 'source-window-pop-up-menu    :docu-line-string "Do some editing in the text"    :view-nick-name :edit-menu    :item-display "Edit"     :menu-items     (list      (make-instance 'source-window-menu-item       :menu-item-title "Cut"       :command-key #\X       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (cut (real-fred (fred-window window)))           (fred-update (real-fred (fred-window window))))       :update-function       #'(lambda (menu-item)           (let ((fred (real-fred (fred-window (menu-item-window menu-item)))))             (multiple-value-bind (start-sel end-sel) (selection-range fred)               (if (eq start-sel end-sel)                 (menu-item-disable menu-item)                 (menu-item-enable menu-item))))))     (make-instance 'source-window-menu-item       :menu-item-title "Copy"       :command-key #\C       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (copy (real-fred (fred-window window))))       :update-function       #'(lambda (menu-item)           (let ((fred (real-fred (fred-window (menu-item-window menu-item)))))             (multiple-value-bind (start-sel end-sel) (selection-range fred)               (if (eq start-sel end-sel)                 (menu-item-disable menu-item)                 (menu-item-enable menu-item))))))     (make-instance 'source-window-menu-item       :menu-item-title "Paste"       :command-key #\V       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (paste (real-fred (fred-window window)))))     (make-instance 'source-window-menu-item       :menu-item-title "Select All"       :command-key #\A       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (select-all (real-fred (fred-window window)))))     (make-instance 'menu-item :menu-item-title "-")     (make-instance 'source-window-menu-item       :menu-item-title "Search..."       :command-key #\F       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item window))           (ccl::search-window-dialog)))     (make-instance 'menu-item :menu-item-title "-")     (make-instance 'source-window-menu-item       :menu-item-title "Auto Save"       :menu-item-checked t       :menu-item-action        #'(lambda (menu-item window)           (let ((fred (real-fred (fred-window window))))             (setf (autosaving-enabled-p fred)                   (not (autosaving-enabled-p fred)))             (set-menu-item-check-mark menu-item (autosaving-enabled-p fred)))))     (make-instance 'source-window-menu-item       :menu-item-title "Auto Wrap"       :menu-item-checked t       :menu-item-action        #'(lambda (menu-item window)           (let ((fred (real-fred (fred-window window))))             (setf (auto-wrap fred)                   (not (auto-wrap fred)))             (set-menu-item-check-mark menu-item (auto-wrap fred)))))     (make-instance 'source-window-menu-item       :menu-item-title "Wrap Paragraph"       :command-key #\W       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (let ((fred (real-fred (fred-window window))))             (multiple-value-bind (start end) (selection-range fred)               (if (= start end)                 (ed-fill-paragraph fred)                 (ed-fill-selection fred)))             (fred-update fred)))       :update-function       #'(lambda (menu-item)           (multiple-value-bind (start end) (selection-range (real-fred (fred-window (menu-item-window menu-item))))             (if (= start end)               (set-menu-item-title menu-item "Wrap Paragraph")               (set-menu-item-title menu-item "Wrap Selection")))))     (make-instance 'menu-item :menu-item-title "-")     (make-instance 'menu       :menu-title "Font"       :menu-items       (do ((font-names (do ((fonts-wanted '("Arial" "Avant Garde" "Chicago" "Courier" "GoMan Helvetica"                                              "Monaco" "New York" "Times New Roman")                                           (cdr fonts-wanted))                             (fonts-available nil))                            ((null fonts-wanted) (nreverse fonts-available))                          (when (find (car fonts-wanted) *font-list* :test #'string=)                            (push (car fonts-wanted) fonts-available)))                        (cdr font-names))            (items nil))           ((null font-names) (sort items #'string< :key #'menu-item-title))         (push (make-instance 'new-font-menu-item                 :item-info (car font-names)                 :menu-item-title (car font-names))               items)))     (make-instance 'menu       :menu-title "Font Size"       :menu-items       (do ((font-sizes '(18 14 12 10 9) (cdr font-sizes))            (items nil))           ((null font-sizes) items)         (push (make-instance 'new-font-menu-item                 :item-info (car font-sizes)                 :menu-item-title (format nil "~2d" (car font-sizes)))               items)))     (make-instance 'menu       :menu-title "Font Style"       :menu-items       (do ((font-styles '(:underline :italic :bold :plain)                         (cdr font-styles))            (items nil))           ((null font-styles) items)         (push (make-instance 'new-font-menu-item                 :item-info (car font-styles)                 :command-key (case (car font-styles)                                (:plain #\P)                                (:bold #\B)                                (:italic #\I)                                (:underline #\U))                 :menu-item-title (format nil                                           "~:(~A~)"                                           (symbol-name (car font-styles)))                 :style (car font-styles))               items)))     (let ((color-menu (make-instance 'menu                         :menu-title "Font Color"                         :menu-items (let ((colors `(("Black" . (0))                                                     ("Dark Gray" . ,*dark-gray-color*)                                                     ("Gray" . ,*gray-color*)                                                     nil                                                     ("Red" . ,*red-color*)                                                     ("Pink" . ,*pink-color*)                                                     ("Purple" . ,*purple-color*)                                                     ("Blue" . ,*blue-color*)                                                     ("Light Blue" . ,*light-blue-color*)                                                     nil                                                     ("Dark Green" . ,*dark-green-color*)                                                     ("Green" . ,*green-color*)                                                     ("Brown" . ,*brown-color*)                                                     ("Tan" . ,*tan-color*)                                                     ("Orange" . ,*orange-color*)                                                     ))                                           (item-list nil))                                        (dolist (color-spec (nreverse colors))                                         (let* ((name (car color-spec))                                                (color (cdr color-spec))                                                (color-index (if (listp color)                                                               (car color)                                                               (fred-palette-closest-entry color))))                                           (push                                            (if name                                              (let ((item (make-instance 'new-font-menu-item                                                            :menu-item-title name                                                            :item-info (list (list :color-index color-index)))))                                                (set-part-color item :item-title (if (listp color) *black-color* color))                                                item)                                              (make-instance 'menu-item :menu-item-title "-"))                                            item-list)))                                       item-list))))       (set-part-color  color-menu :default-item-title *black-color*)       color-menu)     )))   (defun make-new-command-menu ()  (make-instance 'source-window-pop-up-menu    :docu-line-string "Insert a specific template in the text"    :view-nick-name :command-menu    :item-display "Templates"    :menu-items     (do ((commands *all-commands* (cdr commands))         (menu-items nil))        ((null commands) menu-items)      (when (or (= (length commands) 4)                (= (length commands) 7)                (= (length commands) 11))        (push (make-instance 'menu-item :menu-item-title "-")              menu-items))      (unless (or (eq (name (car commands)) 'leftindent)                  (eq (name (car commands)) 'rightindent))        (let ((new-menu-item                (make-instance 'source-window-command-menu-item                 :command (car commands)                 :menu-item-title (format nil                                          "~:(~A~)"                                          (name (car commands))))))           (push new-menu-item                menu-items))))))(defun make-new-special-menu ()  (make-instance 'source-window-pop-up-menu    :docu-line-string "Some additional useful commands"    :view-nick-name :special-menu    :item-display "Special"    :menu-items     (list      (make-instance 'source-window-menu-item       :menu-item-title "Typesetted Text"       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (show-destination-window (document window))))     (make-instance 'source-window-menu-item       :menu-item-title "Picture Archive"       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (with-slots (pict-archive document) window             (if (and pict-archive                      (wptr pict-archive))               (window-select pict-archive)               (setf pict-archive (make-instance 'pict-archive                                    :window-title (format nil "Pictures of ~A" (window-title window))                                    :source-window window                                    :resource-file (source-file document)                                    :page-width (window-width document)                                    :left-margin (default-leftmargin document)                                    :right-margin (default-rightmargin document)))))))     (make-instance 'menu-item :menu-item-title "-")     (make-instance 'source-window-menu-item       :menu-item-title "Update Catalog"       :command-key #\R       :update-function       #'(lambda (menu-item)           (if (dialog-item-on-screen (menu-item-window menu-item))             (menu-item-enable menu-item)             (menu-item-disable menu-item)))       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (with-cursor *watch-cursor*             (update-catalog window)))))    ))(defun make-new-document-menu ()  (make-instance 'source-window-pop-up-menu    :docu-line-string "Choose a command with regard to the document"    :view-nick-name :document-menu    :item-display "File"    :menu-items     (list      (make-instance 'source-window-menu-item       :command-key #\N       :menu-item-title "New"       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item window))           (make-new-document *the-librarian*)))     (make-instance 'source-window-menu-item       :command-key #\O       :menu-item-title "Open..."       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item window))           (let ((file (choose-file-dialog :directory "GoMan Texts:" :mac-file-type :GMAu)))             (unless (eq file 'cancelled)               (open-source-directly file)))))     (make-instance 'menu-item :menu-item-title "-")     (make-instance 'source-window-menu-item       :menu-item-title "Typeset"       :command-key #\T       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (typeset-window window)))     (make-instance 'menu-item :menu-item-title "-")     (make-instance 'source-window-menu-item       :menu-item-title "Save"       :command-key #\S       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (window-save window)))     (make-instance 'source-window-menu-item       :menu-item-title "Save As..."       :menu-item-action        #'(lambda (menu-item window)           (declare (ignore menu-item))           (window-save-as window))))    ))(defun make-new-goman-icons ()  (let ((contents-icon         (make-instance 'source-window-icon           :docu-line-string "the table of contents"           :view-nick-name :contents-icon           :rsrc-id 190           :di-generation-function 'make-contents-dialog-item))        (figures-icon         (make-instance 'source-window-icon           :docu-line-string "the table of figures"           :view-nick-name :figures-icon           :rsrc-id 191           :di-generation-function 'make-figures-dialog-item))        (examples-icon         (make-instance 'source-window-icon           :docu-line-string "the table of examples"           :view-nick-name :examples-icon           :rsrc-id 192           :di-generation-function 'make-examples-dialog-item))        (index-icon         (make-instance 'source-window-icon           :docu-line-string "the index"           :view-nick-name :index-icon           :rsrc-id 193           :di-generation-function 'make-index-dialog-item))        (links-icon         (make-instance 'source-window-icon           :docu-line-string "the table of the defined links"           :view-nick-name :links-icon           :rsrc-id 194           :di-generation-function 'make-links-dialog-item))        (labels-icon         (make-instance 'source-window-icon           :docu-line-string "the table of the defined and predefined labels"           :view-nick-name :labels-icon           :rsrc-id 195           :di-generation-function 'make-labels-dialog-item)))    (list contents-icon figures-icon examples-icon index-icon links-icon labels-icon))  )(defparameter *goman-icons* nil);---------------------------------------------------------------------------------;(time (make-new-document *the-librarian*));(make-commands);(setf *goman-icons* nil)         