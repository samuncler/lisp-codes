(in-package :cl-user)(require :oou (format nil                      "~Aoodles-of-utils:oou-init.lisp"                      (mac-default-directory))) (oou-dependencies :help-svm                  :for-save-application)(oou::make-commands)(window-close (oou::make-librarian))(setf (logical-pathname-translations "GoMan Manual")      `(("**;*.*" "GoMan Texts:Goman Manual;Manual"))) (defun GoMan-stand-alone ()  (oou::make-librarian)  (eval-enqueue '(progn (window-hide *top-listener*)                  (update-cursor))))(defun load-and-detach (type id)  (let* ((res (#_get1resource type id)))    (#_loadresource res)    (#_detachresource res)    res))(defun save-GoMan-Application (file-name make-librarian &aux resources)  (with-res-file ("Goman:GoMan-Resources")    (dolist (id '(129 130 131 1000 1001 1002))      (dolist (type '("FREF" "ics#" "ICN#" "icl4" "icl8" "ics4" "ics8"))        (push (list (load-and-detach type id) type id) resources)))    (push (list (load-and-detach "vers" 1) "vers" 1) resources)    (push (list (load-and-detach "vers" 2) "vers" 2) resources)    ; We don't want a "CCL2" resource ...    (push (list nil "CCL2" 0) resources)    ; We -do- want a resource of type GOMN    (push (list (#_NewHandle 0) :GOMN 0 "Owner Resource") resources)    ; Grab "BNDL"(128) from our resource file, replacing MCL's    (push (list (load-and-detach "BNDL" 128) "BNDL" 128) resources))   (with-res-file ("oou:resources stuff")    (dolist (id '(128 129 130 149 150 151 152 154 156 159 161 165 166 167 168 169 170 171))      (push (list (load-and-detach :PICT id) :PICT id) resources))    (dolist (id '(6500 6501 6502 6503 6504 6505 6506))      (push (list (load-and-detach :CURS id) :CURS id) resources))    (push (list (load-and-detach "FOND" 15) "FOND" 15 "GoMan Helvetica") resources))  (when make-librarian    (setf *restore-lisp-functions*           (append *restore-lisp-functions*                  (list #'oou::make-librarian))))  (save-application file-name                     :creator :GOMN                     :resources resources                    :memory-options '(:stack-minimum #.(ash 1024 10)                                      :stack-maximum #.(ash 1024 10))))(defun save-Lisp-Application (file-name  &aux resources)  (with-res-file ("oou:resources stuff")    (dolist (id '(128 129 130 149 150 151 152 154 156 159 161 165 166 167 168 169 170 171))      (push (list (load-and-detach :PICT id) :PICT id) resources))        (push (list (load-and-detach "FOND" 15) "FOND" 15 "GoMan Helvetica") resources))  (save-application file-name                     :resources resources                    :memory-options '(:stack-minimum #.(ash 2048 10)                                      :stack-maximum #.(ash 2048 10)))); Make the stack bigger. You can do this by editing MCL's LSIZ resource with ResEdit#|(setf *restore-lisp-functions*       (append *restore-lisp-functions*              (list #'GoMan-stand-alone)))|#      