(in-package :oou)(oou-provide :GoMan-librarian);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; the librarian of GoMan; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(export '())(oou-dependencies :unibas-macros                              :menus-u                              :menu-window                              :GoMan-macros                              :GoMan-formatter                              :GoMan-commands                              );---------------------------------------------------------------------------(defclass librarian ()   ((document-directories :initform nil                                         :accessor document-directories                                         :initarg document-directories)     (opened-documents :initform nil                                    :accessor opened-documents)     (librarian-window :initform nil                                   :accessor librarian-window)     (document-menu :initform nil                                :initarg :document-menu                                :accessor document-menu)     (commands-menu :initform nil                                 :initarg :commands-menu                                 :accessor commands-menu)     (all-existing-labels :initform nil                                      :accessor all-existing-labels)     (all-existing-application-labels :initform nil                                                         :accessor all-existing-application-labels)     (all-application-labels-from-file :initform nil                                                           :accessor all-application-labels-from-file)     ))(defun make-librarian ()   (setf *the-librarian* (make-instance 'librarian))   (when (probe-file "Goman:GoMan-document-directories.lisp")       (load "Goman:GoMan-document-directories"))   (let ((librarian (make-library-window)))      (window-show librarian)      librarian))(defmethod (setf document-directories) :after (list-of-dirs (self librarian))   (setf (slot-value self 'document-directories)            (do ((dirs list-of-dirs (cdr dirs))                   (full-pathname-dirs nil))                  ((null dirs) full-pathname-dirs)               (push (full-pathname (car dirs))                         full-pathname-dirs))))(defmethod available-document-source-files ((self librarian))   (do ((dirs (document-directories self) (cdr dirs))          (doc-files nil))         ((null dirs) (delete-duplicates doc-files :test #'equal))      (setf doc-files (nconc (directory (format nil                                                                       "~A**:*.dsource"                                                                       (namestring (car dirs))))                                          doc-files))))(defmethod available-formatted-document-files ((self librarian))   (do ((dirs (document-directories self) (cdr dirs))          (doc-files nil))         ((null dirs) (delete-duplicates doc-files :test #'equal))      (setf doc-files (nconc (directory (format nil                                                                       "~A**:*.dformatted"                                                                       (namestring (car dirs))))                                          doc-files))))(defmethod available-document-net-files ((self librarian))   (do ((dirs (document-directories self) (cdr dirs))          (doc-files nil))         ((null dirs) (delete-duplicates doc-files :test #'equal))      (setf doc-files (nconc (directory (format nil                                                                       "~A**:*.dnet"                                                                       (namestring (car dirs))))                                          doc-files))))(defmethod document-visible-p ((self librarian) filename)   (do ((opened-documents (opened-documents self) (cdr opened-documents))          (dnet-file (namestring (full-pathname (format nil                                                                                     "~A~A.dnet"                                                                                    (directory-namestring filename)                                                                                    (pathname-name filename))))))         ((null opened-documents) nil)      (when (and  (object-net-file (car opened-documents))                         (string-equal  (namestring (full-pathname                                                                      (object-net-file (car opened-documents))))                                                dnet-file))          (return (car opened-documents)))))(defmethod update-document-files ((self document) one-filename)   (setf (source-file self)             (full-pathname (format nil                                                   "~A~A.dsource"                                                  (directory-namestring one-filename)                                                  (pathname-name one-filename))))   (setf (destination-file self)             (full-pathname (format nil                                                   "~A~A.dformatted"                                                  (directory-namestring one-filename)                                                  (pathname-name one-filename))))   (setf (object-net-file self)             (full-pathname (format nil                                                   "~A~A.dnet"                                                  (directory-namestring one-filename)                                                  (pathname-name one-filename)))))(defmethod show-new-document ((self librarian) dnet-filename)   (when (probe-file (full-pathname dnet-filename))       (without-interrupts          (let* ((object-net-file (full-pathname dnet-filename))                   (destination-file (full-pathname (format nil                                                                                     "~A~A.dformatted"                                                                                    (directory-namestring object-net-file)                                                                                    (pathname-name object-net-file))))                   (document  (read-object-net-file object-net-file))                   (destination-window (progn                                                         (update-document-files document object-net-file)                                                        (make-destination-window document)))                   (fred (real-fred (fred-window destination-window)))                   (buffer (fred-buffer fred)))            (setf (destination-buffer document) buffer)            (setf (source-buffer document) (make-buffer))            (setf (destination-file document) destination-file)            (read-destination-file document)            (fred-update fred)            (show-destination-window document)            document))))   (defun read-object-net-file (pathname)   (when (probe-file pathname)       (setf (all-application-labels-from-file *the-librarian*) nil)       (set-mac-file-type pathname :fasl)       (let ((document (read-object-from-file pathname)))          (set-mac-file-type pathname :GMDN)          (setf (object-net-file document) (full-pathname pathname))          (dolist (loaded-label  (all-application-labels-from-file *the-librarian*))             (let ((old-label  (application-label-exists-p (identifier-string loaded-label))))                (cond (old-label                           (setf (links old-label)                                    (nconc (links old-label)                                               (links loaded-label)))                           (dolist (link (links loaded-label))                              (setf (label link) old-label)))                          (t                            (push loaded-label (all-existing-application-labels *the-librarian*))))))          (setf (all-application-labels-from-file *the-librarian*) nil)          document)))(defmethod show-document ((self librarian) filename &optional label-identifier-string)   (setf filename (full-pathname filename))   (let ((dnet-file (full-pathname (format nil                                                                  "~A~A.dnet"                                                                 (directory-namestring filename)                                                                 (pathname-name filename)))))      (if (probe-file dnet-file)         (let ((document (or (let ((loaded-doc (document-visible-p self filename)))                                          (when (and loaded-doc                                                            (not (destination-buffer-changed-p loaded-doc)))                                              loaded-doc))                                        (show-new-document self dnet-file)))                 (label (get-label label-identifier-string)))            (show-destination-window document)            (when label                (show label)))         (message-dialog            (format nil"Sorry!~%~%The document '~A' can't be found. Perhaps you should use a different pathname."                       filename)           :size #@(350 130)))))(defun get-label (identifier-string)   (do ((labels (all-existing-labels *the-librarian*) (cdr labels)))         ((null labels) nil)      (when (string-equal identifier-string                                      (identifier-string (car labels)))          (return (car labels)))))(defmethod make-new-document ((self librarian))   (let ((new-document (make-instance 'document                                        :source-buffer-changed-p nil)))      (show-source-window new-document)));----------------------------------------------------------------------------------;----------------------------------------------------------------------------------                                  (defclass bookshelf-di (drop-target-dim hilite-svm picture-dim simple-view)   ()   (:default-initargs     :PICT-scaling :adjust-view-size     :view-position #@(0 0)     :view-nick-name :bookshelf     :detach-p nil     :rsrc-file "oou:Resources Stuff"     :rsrc-id 151))(defmethod view-cursor ((self bookshelf-di) where)   (declare (ignore where))   *full-hand-cursor*)(defmethod view-click-event-handler ((self bookshelf-di) where)   (declare (ignore where))   (hilite-view self t)   (let ((desired-document              (select-item-from-pup (nconc (available-document-net-files *the-librarian*)                                                              (list "-" "Other ..."))                                                   :where (view-to-global self                                                                                          (make-point 3 (+ 0 (view-height self))))                                                   :item-to-string-fn                                                    #'(lambda (item)                                                         (if (pathnamep item)                                                            (format nil                                                                         "~A"                                                                         (pathname-name item))                                                            item)))))      (cond ((and (stringp desired-document)                          (string= desired-document "Other ..."))                 (hilite-view self nil)                 (let ((file (choose-file-dialog :mac-file-type :GMRE)))                      (when file                          (show-document *the-librarian* file))))                ((pathnamep desired-document)                  (show-document *the-librarian* desired-document)))      (hilite-view self nil)))(defmethod dropped ((self bookshelf-di) (dest-window destination-window) offset where)   (declare (ignore offset where))   (hilite-view self t)   (if (destination-buffer-changed-p (document dest-window))      (window-save dest-window)      (flash dest-window))   (hilite-view self nil));----------------------------------------------------------------------------------;----------------------------------------------------------------------------------                                  (defclass typesetter-di (drop-target-dim hilite-svm picture-dim simple-view)   ()   (:default-initargs     :PICT-scaling :adjust-view-size     :view-nick-name :typesetter     :detach-p nil     :rsrc-file "oou:Resources Stuff"     :rsrc-id 150))(defmethod view-cursor ((self typesetter-di) where)   (declare (ignore where))   *arrow-cursor*) (defmethod view-click-event-handler ((self typesetter-di) where)   (declare (ignore where))   nil)(defmethod draggable-view-enters ((self drop-target-dim) (droppable-view drag-and-drop-buffer) global-mouse-pos)    (declare (ignore droppable-view global-mouse-pos))    (with-focused-view self         (hilite-view self t)))(defmethod dropped ((self typesetter-di) (source-window source-window) offset where)   (declare (ignore offset where))   (hilite-view self t)   (if *top-listener*      (eval-enqueue `(with-saved-selection ,(real-fred (fred-window source-window))                                  (typeset-window ,source-window)                                  (hilite-view ,self nil)))      (with-saved-selection (real-fred (fred-window source-window))          (typeset-window source-window)          (hilite-view self nil))))(defmethod dropped ((self typesetter-di) (text-selection drag-and-drop-buffer) offset where)   (declare (ignore offset where))   (hilite-view self t)   (let ((source-window (view-window (source-fred text-selection))))      (if *top-listener*         (eval-enqueue `(progn (typeset-window ,source-window #@(0 0) nil)                                            (hilite-view ,self nil)))         (progn (typeset-window source-window #@(0 0) nil)                    (hilite-view self nil)))))(defmethod show-progress-report ((view typesetter-di)  status goal)   (declare (special *old-percentage*))   (let ((percentage (if (= goal 0)                                 100                                 (round (* (view-height view)                                              (/ status goal))))))      (with-pen (:PatXor                        *black-pattern*                        (view-width view)                        (- percentage *old-percentage*)                        view)          (move-to view 0 *old-percentage*)          (line-to view 0 *old-percentage*))      (setf *old-percentage* percentage)))      ;----------------------------------------------------------------------------------;----------------------------------------------------------------------------------(defclass manuscript-di (drop-target-dim hilite-svm picture-dim simple-view)   ()   (:default-initargs     :PICT-scaling :adjust-view-size     :view-position #@(0 0)     :view-nick-name :manuscripts     :detach-p nil     :rsrc-file "oou:Resources Stuff"     :rsrc-id 149))(defmethod view-cursor ((self manuscript-di) where)   (declare (ignore where))   *full-hand-cursor*)(defmethod view-click-event-handler ((self manuscript-di) where)    (declare (ignore where))   (hilite-view self t)   (let ((desired-document              (select-item-from-pup (nconc (available-document-source-files *the-librarian*)                                                              (list "-" "Other ..." "-" "New Document"))                                                   :where (view-to-global self                                                                                          (make-point 2 (+ 0 (view-height self))))                                                   :item-to-string-fn                                                    #'(lambda (item)                                                         (if (pathnamep item)                                                            (format nil                                                                         "~A"                                                                         (pathname-name item))                                                            item)))))      (update-cursor)      (cond  ((and (stringp desired-document)                         (string= desired-document "New Document"))                  (make-new-document *the-librarian*))                 ((and (stringp desired-document)                          (string= desired-document "Other ..."))                   (hilite-view self nil)                   (let ((file (choose-file-dialog)))                      (when file                          (open-source-directly file))))                 ((pathnamep desired-document)                   (open-source-directly desired-document))))   (hilite-view self nil))(defmethod dropped ((self manuscript-di) (source-window source-window) offset where)   (declare (ignore offset where))   (hilite-view self t)   (window-save source-window)   (hilite-view self nil))      ;-----------------------------------------------------------------------------------(defclass library-window (windoid)   ()   (:default-initargs     ;:window-title "Bookshelf"     :view-position (make-point (- *screen-width* 295)                                                 *menubar-bottom*)     :view-size #@(226 65)     ;:window-type :document     :view-subviews (list (make-instance 'manuscript-di                                           :view-position #@(1 1))                                       (make-instance 'typesetter-di                                           :view-position #@(76 1))                                       (make-instance 'bookshelf-di                                           :view-position #@(150 1)))))(defmethod window-close :before ((self library-window))   (setf (librarian-window *the-librarian*) nil))(defmethod reinitialize ((self library-window)) nil)(defmethod ccl::window-hide-for-suspend ((windoid library-window))  (when (window-shown-p windoid)    (setf (slot-value windoid 'ccl::show-on-resume-p) t)    ;(window-hide windoid)    ))                ;----------------------------------------------------------------------------------(defun make-library-window ()   (let* ((library-window               (make-instance 'library-window)))      (setf (librarian-window *the-librarian*) library-window)      library-window));--------------------------------------------------------------------------(defclass GoMan-application (application)   ())(defmethod ccl::open-application-document ((application GoMan-application) path &optional startup)   (declare (ignore startup))   (let ((type (mac-file-type path)))      (case type          (:GMDN            (show-document *the-librarian* path))         (:GMAu            (open-source-directly path))         (:GMRe            (show-document *the-librarian* path))         (t (call-next-method)))))(defvar *default-application* *application*)   ;(setf *application* (make-instance 'GoMan-application))