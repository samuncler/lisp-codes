(in-package :oou)(oou-provide :PICT-archive);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :Picture-dim                              :scrollable-view                              :special-paned-view                              :splitter-di                              :droppable-dim                              :selectable-dim                              :double-click-dim                              :resizable-dim                              :editable-number-di                              :highlight                              :movables-container-svm                              :autoscrollable-dim                              :hilite-svm                              :special-events-dim                              :drag-and-drop-fred-mixin                              :with-running-watch                              )(export '(               ));---------------------------------------------------------------------------(defclass dummy-pict (drop-target-dim draggable-dim simple-view)   ()   (:default-initargs     :view-size #@(95 55)     :drag-bounds :container))(defmethod view-draw-contents :after ((self dummy-pict))    (with-pen (:PatCopy *gray-pattern* 1 1 self)       (view-frame self :offset #@(4 4))))(defmethod pre-drag-hilite ((self dummy-pict) hilite-flag)   (declare (ignore hilite-flag))   (view-invert self))(defmethod draggable-view-enters ((self dummy-pict) droppable-view global-mouse-pos)   (declare (ignore droppable-view global-mouse-pos))   (call-next-method)   (hilite-view (view-container self) t))(defmethod draggable-view-leaves ((self dummy-pict) droppable-view global-mouse-pos)   (declare (ignore global-mouse-pos))   (unless (eq (current-target droppable-view) (view-container self))      (call-next-method)      (hilite-view (view-container self) nil)))(defmethod hilite-view ((self dummy-pict) hilite-flag)   (hilite-view (view-container self) hilite-flag))(defmethod dropped ((self dummy-pict) droppable-view offset where)   (dropped (view-container self) droppable-view offset where));------------------------------------------------------------------------------(defclass shrinked-pict (double-click-dim picture-dim nice-hilite-dim selectable-rb-dim droppable-dim view)   ()   (:default-initargs     :PICT-scaling :scale-to-view     :margin 5     :drag-bounds :none     :view-size #@(95 55)     :drop-targets (list :trash :pict-archive-view)     :dialog-item-double-click-action     #'(lambda (self)           (when (typep (view-window self) 'pict-archive)               (show-expanded-PICT                  (view-named :pict-working-area (workspace (view-window self)))                 self #@(0 0))))))(defmethod make-view-completely-visible :after ((self shrinked-pict))    (let ((container (view-container self)))      (when container          (setf (sb-setting (view-named :v-scroller (view-container container)))                   (point-v (view-scroll-position container)))          (setf (sb-setting (view-named :h-scroller (view-container container)))                    (point-h (view-scroll-position container))))))       (defmethod select-item :after ((self shrinked-pict) &key draw-now-p)   (let ((expanded-pict (when (typep (view-window self) 'pict-archive)                                        (expanded-pict (view-window self)))))      (when expanded-pict          (deselect-all expanded-pict :draw-now-p draw-now-p))));--------------------------------------------------------------------------(defclass expanded-pict (drop-target-dim double-click-dim nice-hilite-dim selectable-dim resizable-dim droppable-dim picture-dim view)   ((shrinked-pict :initform nil                            :accessor shrinked-pict))   (:default-initargs      :PICT-scaling :scale-to-view     :margin 4     :drop-targets (list :pict-archive-view :trash)     :drag-bounds :none     :view-nick-name :expanded-pict     :drag-end-action-fn #'(lambda (di delta pt)                                           (declare (ignore pt))                                           (implode-to-origin di delta))     :dialog-item-double-click-action     #'(lambda (self)           (show-shrinked-PICT (view-named :pict-archive-view (archive (view-window self)))                                              self #@(0 0)))))   (defmethod draggable-view-enters ((self expanded-pict) (droppable-view droppable-dim) global-mouse-pos)   (declare (ignore global-mouse-pos))   (unless (eq (last-real-target droppable-view) (view-container self))      (call-next-method)      (hilite-view (view-container self) t)))(defmethod draggable-view-enters ((self expanded-pict) (droppable-view drag-and-drop-buffer) global-mouse-pos)   (declare (ignore global-mouse-pos))   (call-next-method)   (hilite-view (view-container self) t))(defmethod draggable-view-leaves ((self expanded-pict) (droppable-view droppable-dim) global-mouse-pos)   (declare (ignore global-mouse-pos))   (unless (eq (current-target droppable-view) (view-container self))      (hilite-view (view-container self) nil)))(defmethod dropped ((self expanded-pict) shrinked-pict offset where)   (dropped (view-container self) shrinked-pict offset where))(defmethod draw-inside-rect :after ((self expanded-pict))   (with-pen-size (1 1 self)       (paint-rect self (subtract-points                                   (subtract-points (view-size self) #@(5 5))                                  (make-point (handle-size self) (handle-size self)))                          (subtract-points (view-size self) #@(5 5)))))(defmethod set-view-size :around ((self expanded-PICT) h &optional v)    (let ((old-size (view-size self)))      (call-next-method)      (invalidate-arrow-area (view-window self))      (set-view-position self                                     (make-point (round (- (view-width (view-container self))                                                                        (view-width self))                                                                    2)                                                         (round (- (view-height (view-container self))                                                                        (view-height self))                                                                    2)))      (unless (= old-size (make-point h v))         (let ((percentage-display (percentage-display (view-window self))))            (setf (actual-number percentage-display) nil)            (set-dialog-item-text (view-named :number percentage-display) "")))      (window-update-event-handler (view-window self))))   (defmethod show-expanded-PICT ((self expanded-PICT) PICT offset)    (show-expanded-pict (view-container self) PICT offset))(defmethod select-item :after ((self expanded-PICT) &key draw-now-p)   (let* ((dummy-pict (dummy-pict (view-window self)))             (shrinked-pict (when (and dummy-pict                                                       (view-container dummy-pict))                                         (car (subviews (view-container dummy-pict) 'shrinked-pict)))))      (when shrinked-pict          (deselect-all shrinked-pict :draw-now-p draw-now-p))))                               ;--------------------------------------------------------------------------(defclass pict-archive-view (movables-container-svm drop-target-dim  hilite-svm embedded-view)   ((dummy-pict :initform (make-instance 'dummy-pict)                          :accessor dummy-pict)))(defmethod draggable-view-enters ((self pict-archive-view) (droppable-view expanded-PICT) global-mouse-pos)   (declare (ignore global-mouse-pos))   (call-next-method)   (hilite-view self t))(defmethod draggable-view-enters ((self pict-archive-view) (droppable-view shrinked-PICT) global-mouse-pos)   (declare (ignore global-mouse-pos))   (call-next-method)   (when (neq (view-window self) (view-window droppable-view))      (hilite-view self t)))(defmethod draggable-view-leaves ((self pict-archive-view) (droppable-view expanded-PICT) global-mouse-pos)   (declare (ignore global-mouse-pos))   (unless (eq (current-target droppable-view) (dummy-pict self))      (hilite-view self nil)))(defmethod draggable-view-leaves ((self pict-archive-view) (droppable-view shrinked-PICT) global-mouse-pos)   (declare (ignore global-mouse-pos))   (call-next-method)   (hilite-view self nil))(defmethod draggable-dim-is-above ((self pict-archive-view) (draggable-view expanded-PICT) global-position)   (declare (ignore expanded-PICT global-position))    (unless (eq (view-window self) (view-window draggable-view))      (call-next-method)))(defmethod draggable-dim-is-above ((self pict-archive-view) (draggable-view shrinked-PICT) global-position)   (declare (ignore expanded-PICT global-position))    (call-next-method))(defmethod hide-drag-rect-p ((self pict-archive-view) (draggable-view expanded-PICT) global-position)   (declare (ignore global-position))    (when (or (neq (view-window self) (view-window draggable-view))                   (neq (view-window (last-real-target draggable-view)) (view-window draggable-view)))      (call-next-method)))(defmethod dropped ((self pict-archive-view) (pict shrinked-pict) offset where)   (declare (ignore where))   (cond ((eq (view-container pict) self)              (set-view-at-grid-position self pict offset))             (t               (if (option-key-p)                  (cut pict)                  (copy pict))               (paste self))))(defmethod dropped ((self pict-archive-view) (pict expanded-pict) offset where)   (declare (ignore offset where))   (cond ((eq (view-window pict) (view-window self))              (show-shrinked-PICT self pict #@(0 0)))             (t               (if (option-key-p)                  (cut (view-window pict))                  (copy pict))               (paste self))))(defmethod hide-subview :after ((self pict-archive-view) subview)   (when (typep subview 'shrinked-pict)       (with-slots (dummy-pict) self           (set-view-position dummy-pict (view-position subview))           (set-view-container dummy-pict self))))(defmethod reset-PICT ((self pict-archive-view) (shrinked-pict shrinked-pict) current-window)   "the pict must be reset, if it changes it's container (when it is moved to the trash or another archive)"   (let ((next-window (view-window self)))      (typecase current-window          (trash-items-window           (with-slots (items-in-trash) (trash current-window)               (setf items-in-trash                        (delq shrinked-pict items-in-trash)))           (hilite-view (trash current-window) nil))         (pict-archive           (unless (eq current-window current-window)              (setf (changed-p current-window) t)              (setf (changed-p next-window) t))))      (when (and (not (eq current-window next-window))                        (or (not (slot-boundp shrinked-pict 'rsrc-file))                              (null (slot-value shrinked-pict 'rsrc-file))                              (not (eq (slot-value shrinked-pict 'rsrc-file)                                           (resource-file next-window)))))          (setf (slot-value shrinked-pict 'rsrc-id) (next-rsrc-id next-window))          (push (slot-value shrinked-pict 'rsrc-id) (rsrc-ids next-window))          (slot-makunbound shrinked-pict 'rsrc-file))      (setf (drop-targets shrinked-pict)               (list :trash (view-nick-name self)))      (when (expanded-pict next-window)          (push (expanded-pict next-window) (drop-targets shrinked-pict)))      (push (view-named :pict-working-area (workspace next-window)) (drop-targets shrinked-pict))      (when (source-window next-window)          (push (real-fred (fred-window (source-window next-window)))                    (drop-targets shrinked-pict)))      (set-view-position shrinked-pict                                      (if (eq current-window next-window)                                        (view-position (dummy-pict current-window))                                        (next-free-position self)))))       (defmethod show-shrinked-PICT ((self pict-archive-view) (expanded-pict expanded-pict) offset                                                           &key (make-visible t) (implode t))    (let* ((shrinked-pict (shrinked-pict (view-container expanded-pict)))             (current-window (view-window expanded-pict))             (old-archive (view-named :pict-archive-view (archive current-window))))      (reset-pict self shrinked-pict current-window)      (show-shrinked-pict self shrinked-pict offset :make-visible make-visible :implode implode)      (hide-expanded-pict (view-container expanded-pict) old-archive self offset :implode implode)))      (defmethod show-shrinked-PICT ((self pict-archive-view) (shrinked-pict shrinked-pict) offset &key (make-visible t) (implode t))    (declare (ignore offset implode))   (when (view-container shrinked-pict)       (reset-pict self shrinked-pict (view-window shrinked-pict)))   (show-subview self shrinked-pict)   (deselect-all shrinked-pict :draw-now-p nil)   (when make-visible       (make-view-completely-visible shrinked-pict))   (select-item shrinked-pict :draw-now-p nil))   (defmethod next-free-position ((self view) &key (wrapped nil))   (if (subviews self)      (let* ((bottom (apply #'max                                         (mapcar #'(lambda (item)                                                           (view-bottom item))                                                      (subviews self))))                (right (apply #'max                                      (mapcar #'(lambda (item)                                                        (view-right item))                                                   (remove-if-not #'(lambda (view)                                                                                  (= (view-bottom view)                                                                                      bottom))                                                                            (subviews self))))))         (if wrapped            (make-point (if (< (+ right 100) (view-width self))                                   (+ right 5)                                   5)                                (if (< (+ right 100) (view-width self))                                   (- bottom 55)                                   (+ bottom 5)))            (make-point (+ right 5)                                (- bottom 55))))      #@(5 5)))(defmethod generate-shrinked-pict ((self pict-archive-view) picture                                                                &key position (wrapped nil))   (when (and picture                     (handlep picture)                     (not (%null-ptr-p picture)))       (let* ((new-pict (make-instance 'shrinked-pict                                      :view-position (or position                                                                    (next-free-position self :wrapped wrapped))                                      :rsrc-handle picture))                 (window (view-window self))                 (source-window (when window (source-window window))))          (when (and window                            source-window)              (push (real-fred (fred-window source-window))                        (drop-targets new-pict)))          (when window              (when (expanded-pict window)                  (push (expanded-pict window) (drop-targets new-pict)))              (push (view-named :pict-working-area (workspace window)) (drop-targets new-pict)))          (when (resource-handlep picture)              (multiple-value-bind (id type name) (get-resource-info picture)                  (declare (ignore type))                  (setf (slot-value new-pict 'rsrc-id) id)                  (setf (slot-value new-pict 'rsrc-name) name)))          (unless (slot-value new-pict 'rsrc-id)             (let ((new-id (next-rsrc-id window)))                (setf (slot-value new-pict 'rsrc-id) new-id)                (push new-id (rsrc-ids window))))          new-pict)))(defmethod paste ((self pict-archive-view))   (let ((new-pict              (generate-shrinked-pict self                                                     (copy-PICT (get-scrap :pict))                                                     :position (next-grid-position self (view-mouse-position self)))))      (if new-pict         (progn            (setf (changed-p (view-window self)) t)            (set-view-container new-pict self)            (make-view-completely-visible new-pict)            (invalidate-view new-pict)            (deselect-all new-pict :draw-now-p t)            (select-item new-pict :draw-now-p t)            new-pict)         (flash self))))           ;--------------------------------------------------------------------------(defclass pict-workspace-view (unibas-paned-view)   ()   (:default-initargs :view-font '("monaco" 9 :plain)))(defmethod set-view-container :after ((self pict-workspace-view) container)    (declare (ignore container))   (let* ((window (view-window self))             (expanded-pict (when window                                          (expanded-pict window))))      (when expanded-pict          (set-view-size expanded-pict (view-size expanded-pict)))))(defmethod view-draw-contents :after ((self pict-workspace-view))   (view-frame self)   (when (expanded-pict (view-window self))       (let* ((window (view-window self))                 (expanded-view (expanded-pict window))                 (pict-area (view-named :pict-working-area self))                 (width-string (format nil "~A" (- (view-width expanded-view) 4)))                 (width-string-width (string-width width-string (view-font self)))                 (height-string (format nil "~A" (- (view-height expanded-view) 4)))                 (height-string-width (string-width height-string (view-font self)))                 (topright (make-point (+ (view-right pict-area) 2 (round height-string-width 2))                                                    (+ (view-top pict-area) (max (view-top expanded-view) 0))))                 (bottomleft (make-point (+ (view-left  pict-area) (max (view-left expanded-view) 0))                                                         (+ (view-bottom pict-area) (round height-string-width 2))))                 (arrow-width 7)                 (width nil))          (let ((old-font (view-font self)))             (set-view-font self '("Chicago" 12 :plain))             (move-to self (view-left pict-area) 20)             (format self "Picture Number: ~A" (slot-value (shrinked-pict expanded-view) 'rsrc-id))             (set-view-font self old-font))          (multiple-value-bind (ascent descent widmax leading) (font-info (view-font self))              (declare (ignore widmax leading))              (Move-to self topright)              (setf width 0)              (loop                 (Line self width 0)                 (incf width)                 (Move self (- width) 1)                 (incf width)                 (when (>= width arrow-width) (return)))              (Move-to self topright)              (line self 0 (round (- (/ (min (view-height expanded-view) (view-height pict-area)) 2)                                                 (/ (+ ascent descent) 2))))              (move self (- (round height-string-width 2)) ascent)              (princ height-string self)              (move-to self (point-h topright) (round (+ (point-v topright)                                                                                 (/ (min (view-height expanded-view)  (view-height pict-area)) 2)                                                                                 (/ (+ ascent descent) 2))))              (line-to self                             (point-h topright)                             (+ (point-v topright)                                 (min (view-height expanded-view)                                          (- (view-height pict-area) (max (view-top expanded-view) 0)))))              (setf width 0)              (loop                 (Line self width 0)                 (incf width)                 (Move self (- width) -1)                 (incf width)                 (when (>= width arrow-width) (return)))              (move-to self bottomleft)              (setf width 0)              (loop                 (Line self 0 width)                 (incf width)                 (Move self 1 (- width))                 (incf width)                 (when (>= width arrow-width) (return)))              (move-to self bottomleft)              (line self                        (round (- (/ (min (view-width expanded-view) (view-width pict-area)) 2)                                      (/ width-string-width 2)                                      2))                       0)              (move self 2 (round ascent 2))              (princ width-string self)              (move self 2 (- (round ascent 2)))              (line-to self                             (+ (point-h bottomleft) (min (view-width expanded-view) (view-width pict-area)))                            (point-v bottomleft))              (setf width 0)              (loop                 (Line self 0 width)                 (incf width)                 (Move self -1 (- width))                 (incf width)                 (when (>= width arrow-width) (return)))))))                                                   ;---------------------------------------------------------------------------(defclass pict-working-area (drop-target-dim hilite-svm view)   ((text-width :initform 200                        :initarg :text-width                        :accessor text-width)     (shrinked-PICT :initform nil                              :initarg :shrinked-PICT                              :accessor shrinked-PICT)     (expanded-PICT :initform nil                               :initarg :expanded-PICT                               :accessor expanded-PICT))   (:default-initargs      :view-nick-name :pict-working-area))(defmethod draggable-view-enters ((self pict-working-area) (droppable-view shrinked-pict) global-mouse-pos)   (declare (ignore global-mouse-pos))   (call-next-method)   (hilite-view self t))(defmethod draggable-view-enters ((self pict-working-area) (droppable-view expanded-pict) global-mouse-pos)   (declare (ignore global-mouse-pos))   (call-next-method)   (unless (or (eq (view-window self) (view-window droppable-view))                     (eq (view-window self) (view-window (last-real-target droppable-view))))      (hilite-view self t)))(defmethod draggable-view-enters :after ((self pict-working-area) (droppable-view drag-and-drop-buffer) global-mouse-pos)   (declare (ignore global-mouse-pos))   (hilite-view self t))(defmethod draggable-view-leaves ((self pict-working-area) (droppable-view droppable-dim) global-mouse-pos)   (declare (ignore global-mouse-pos))   (when (or (null (expanded-pict (view-window self)))                   (neq (current-target droppable-view) (expanded-pict (view-window self))))       (call-next-method)))(defmethod dropped ((self pict-working-area) (shrinked-pict shrinked-pict) offset where)   (declare (ignore where))   (cond ((eq (view-window shrinked-pict) (view-window self))              (show-expanded-PICT self shrinked-pict offset))             (t               (copy (view-window shrinked-pict))               (paste self))))(defmethod dropped ((self pict-working-area) (shrinked-pict expanded-pict) offset where)   (declare (ignore where))   (cond ((eq (view-window shrinked-pict) (view-window self))              (implode-to-origin shrinked-pict offset))             (t               (if (option-key-p)                  (cut (view-window shrinked-pict))                  (copy (view-window shrinked-pict)))               (paste self))))(defmethod dropped ((self pict-working-area) (copy-buffer drag-and-drop-buffer) offset where)   (declare (ignore offset where))   (let ((fred (source-fred copy-buffer)))      (multiple-value-bind (start-sel end-sel) (selection-range fred)          (let ((string (buffer-substring (fred-buffer fred) start-sel end-sel))                  (pos1 nil)                  (pos2 nil)                  (number nil))             (if (and (string-equal "@figure{" string :end2 8)                               (setf pos1 (1+ (position #\| string :test #'char-equal :start 8)))                               (setf pos2 (position #\| string :test #'char-equal :start pos1))                               (setf number (read-from-string (string-trim '(#\space #\" #\return #\tab) (subseq string pos1 pos2))))                               (integerp number))                 (show-pict-with-number (view-window self) number)                 (flash (view-window self)))))))                 (defmethod paste ((self pict-working-area))   (let* ((archive-view (archive-view (view-window self)))             (new-pict                (generate-shrinked-pict archive-view                                                       (copy-PICT (get-scrap :pict))                                                       :position (next-free-position archive-view :wrapped t))))      (if new-pict         (progn            (setf (changed-p (view-window self)) t)             (when (expanded-pict (view-window self))                (deselect-all (expanded-pict (view-window self)) :draw-now-p nil))            (set-view-container new-pict archive-view)            (make-view-completely-visible new-pict)            (invalidate-view new-pict)            (deselect-all new-pict :draw-now-p t)            (select-item new-pict :draw-now-p t)            new-pict)         (flash self))      (show-expanded-pict self new-pict #@(0 0))))(defmethod view-draw-contents :after ((self pict-working-area))   (view-frame self)   (with-pen (:PatCopy *gray-pattern* 1 1 self)       (let ((left-margin (round (- (view-width self)                                                   (text-width self))                                               2)))          (view-draw-vertical-line self left-margin)          (view-draw-vertical-line self (+ left-margin (text-width self))))))(defmethod hide-expanded-pict ((self pict-working-area) old-archive next-archive offset &key (implode t))   (when (expanded-pict self)       (let* ((expanded-pict (expanded-pict self))                 (expanded-pict-topleft (view-to-global expanded-pict offset))                 (shrinked-pict (shrinked-pict expanded-pict))                 (shrinked-pict-top-left (view-to-global shrinked-pict #@(0 0)))                 (dummy-pict (dummy-pict old-archive))                 (current-window (view-window expanded-pict)))          (hide-subview self expanded-pict)          (view-erase self)          (view-draw-contents self)          (hide-subview (workspace current-window) (percentage-display current-window))          (invalidate-arrow-area current-window)          (when (and implode                            (eq old-archive next-archive))              (implode expanded-pict-topleft                             (add-points expanded-pict-topleft (view-size expanded-pict))                             shrinked-pict-top-left                             (add-points shrinked-pict-top-left (view-size shrinked-pict))                             :delay 0.01))          (hide-subview old-archive dummy-pict)          (setf (slot-value expanded-pict 'rsrc-handle) nil))))   (defmethod show-expanded-PICT ((self pict-working-area) PICT offset)    (with-slots (shrinked-pict expanded-pict) self       (let ((explode-topleft (view-to-global (view-container PICT)                                                                     (add-points (view-position PICT)                                                                                       offset)))               (window (view-window self)))          (if expanded-pict             (progn                 (when (handlep (slot-value expanded-pict 'rsrc-handle))                    (show-shrinked-pict (view-named :pict-archive-view (archive (view-window self)))                                                      expanded-pict #@(0 0)                                                      :make-visible nil)                    (setf explode-topleft (view-to-global (view-container PICT) (view-position PICT))))                (setf (slot-value expanded-pict 'rsrc-handle) (slot-value PICT 'rsrc-handle)))             (let ((pict (make-instance 'expanded-PICT                                  :rsrc-handle (slot-value PICT 'rsrc-handle)))                     (source-window (source-window (view-window self))))                (setf expanded-pict pict)                (push (dummy-pict (view-window self)) (drop-targets expanded-pict))                (dolist (shrinked-pict (shrinked-picts window))                   (push expanded-pict (drop-targets shrinked-pict)))                (when source-window                    (push (real-fred (fred-window source-window))                              (drop-targets pict)))))          (setf (slot-value expanded-pict 'rsrc-id) (slot-value PICT 'rsrc-id))          (setf shrinked-pict PICT)          (setf (shrinked-pict expanded-pict) PICT)          (deselect-all shrinked-pict :draw-now-p nil)          (let ((next-pos (make-point (- (round (- (view-width self)                                                                         (view-width expanded-pict))                                                                     2)                                                          4)                                                      (- (round (- (view-height self)                                                                         (view-height expanded-pict))                                                                     2)                                                          4))))             (explode explode-topleft                           (add-points explode-topleft (view-size shrinked-pict))                           (view-to-global self next-pos)                           (view-to-global self (add-points next-pos (view-size expanded-pict)))                           :delay 0.02))          (set-view-position expanded-pict -1000 0)          (set-view-container expanded-pict self)          (hide-subview (view-container shrinked-pict) shrinked-pict)          (select-item expanded-pict :draw-now-p nil)          (set-view-size expanded-pict (add-points (pict-size shrinked-pict) #@(4 4)))          (setf (actual-number (percentage-display window)) 100)          (set-dialog-item-text (view-named :number (percentage-display window)) "100")          (set-view-container (percentage-display (view-window self)) (workspace window)))))                                ;-------------------------------------------------------------------------- (defclass pict-archive (restricted-size-wim special-events-dim unibas-paned-window)   ((source-window :initform nil                               :initarg :source-window                               :accessor source-window)     (resource-file :initform nil                            :initarg :resource-file                            :accessor resource-file)     (rsrc-ids :initform nil                     :accessor rsrc-ids)     (archive :initform nil                  :accessor archive)     (workspace :initform nil                        :accessor workspace)     (percentage-display :initform nil                                      :accessor percentage-display)     (splitter :initform nil                    :accessor splitter)     (page-width :initform 449                         :initarg :page-width                         :accessor :page-width)     (left-margin :initform 20                          :initarg :left-margin                          :accessor left-margin)     (right-margin :initform 20                            :initarg :right-margin                            :accessor right-margin)     (changed-p :initform nil                       :accessor changed-p))   (:default-initargs     :view-position '(:top 80)))              (defmethod window-close :around ((self pict-archive))    (when (and (changed-p self)                     (y-or-n-dialog (format nil "Save changes of '~A'?" (window-title self))))       (window-save self))   (when (source-window self)       (setf (pict-archive (source-window self)) nil))   (call-next-method))(defmethod window-save ((self pict-archive))   (with-slots (resource-file) self       (if resource-file          (progn              (with-res-file (resource-file                                       :if-does-not-exist :create                                       :if-no-rsrc-fork :create)                  (when (or (string-equal (window-title self) "untitled")                                  (string-equal (window-title self) "Pictures of New"))                      (set-window-title self                                                    (format nil                                                                  "~A {...:~A:}"                                                                 (file-namestring resource-file)                                                                 (car (last (pathname-directory resource-file))))))                  (delete-old-picts self)                  (mapcar #'(lambda (PICT)                                     (add-pict-to-rsrc-file PICT :filename resource-file))                                (all-picts self))                  (setf (changed-p self) nil)))          (window-save-as self))))(defmethod next-rsrc-id ((self pict-archive))   (if (rsrc-ids self)      (1+ (apply #'max (rsrc-ids self)))       128))(defmethod delete-old-picts ((self pict-archive))   (delete-all-picts-from-file (resource-file self)))(defmethod window-save-as ((self pict-archive))   (with-slots (resource-file) self       (let ((new-file-name (choose-new-file-dialog :directory "GoMan Texts:")))          (unless (eq new-file-name 'cancelled)             (setf resource-file new-file-name)             (set-window-title self                                           (format nil                                                         "~A {...:~A:}"                                                        (file-namestring resource-file)                                                        (car (last (pathname-directory resource-file)))))             (window-save self)))))(defmethod copy ((self pict-archive))   (let ((pict (selected-pict self)))      (if pict         (copy pict)         (flash self))))    (defmethod paste ((self pict-archive))   (setf (changed-p self) t)   (if (and (expanded-pict self)                (eq (expanded-pict self) (selected-pict self)))      (paste (working-view self))      (paste (archive-view self))))(defmethod clear ((self pict-archive))   (let ((pict (selected-pict self)))      (when (and pict                        (eq pict (expanded-pict self)))          (setf pict (shrinked-pict (expanded-pict self)))          (show-shrinked-pict (archive-view self) (expanded-pict self) #@(0 0) :make-visible nil :implode nil))      (if pict         (progn (setf (rsrc-ids self) (delq (slot-value pict 'rsrc-id) (rsrc-ids self)))                    (setf (changed-p self) t)                    (clear pict))         (flash self))))(defmethod cut ((self pict-archive))   (cond ((selected-pict self)              (copy self)              (clear self))             (t               (flash self))))(defmethod make-menu-bar ((self pict-archive))  (let* ((special-menu          (make-instance 'unibas-pop-up-menu            :item-display "   Special"            :view-size #@(75 20)            :menu-items            (list              (make-instance 'source-window-menu-item               :window self               :menu-item-title "Source Text"               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (if (source-window window)                     (show-source-window (document (source-window window)))                     (open-source-directly (resource-file window))))               :update-function               #'(lambda (menu-item)                   (if (or (source-window (window menu-item))                           (resource-file (window menu-item)))                     (menu-item-enable menu-item)                     (menu-item-disable menu-item)))))))         (edit-menu          (make-instance 'unibas-pop-up-menu            :item-display "     Edit"            :view-size #@(75 20)            :menu-items            (list              (make-instance 'source-window-menu-item               :window self               :menu-item-title "Cut"               :command-key #\X               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (cut window))               :update-function               #'(lambda (menu-item)                   (if (selected-pict (window menu-item))                     (menu-item-enable menu-item)                     (menu-item-disable menu-item))))             (make-instance 'source-window-menu-item               :window self               :menu-item-title "Copy"               :command-key #\C               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (copy window))               :update-function               #'(lambda (menu-item)                   (if (selected-pict (window menu-item))                     (menu-item-enable menu-item)                     (menu-item-disable menu-item))))             (make-instance 'source-window-menu-item               :window self               :menu-item-title "Paste"               :command-key #\V               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (paste window)))             (make-instance 'source-window-menu-item               :window self               :menu-item-title "Clear"               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (clear window))               :update-function               #'(lambda (menu-item)                   (if (selected-pict (window menu-item))                     (menu-item-enable menu-item)                     (menu-item-disable menu-item)))))))         (document-menu          (make-instance 'unibas-pop-up-menu            :item-display "Document"            :view-size #@(75 20)            :menu-items            (list              (make-instance 'source-window-menu-item               :window self               :menu-item-title "Save"               :command-key #\S               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (window-save window)))             (make-instance 'source-window-menu-item               :window self               :menu-item-title "Save As..."               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (window-save-as window)))))))    (make-instance 'unibas-constant-subview-collection      :direction :horizontal      :distance 1      :view-size (make-point (+ (- (view-width  self) 2) 16) 20)      :view-position #@(2 1)      :items (list document-menu edit-menu special-menu))))(defmethod initialize-instance :after ((self pict-archive) &rest initargs)   (declare (ignore initargs))   (with-running-watch     (with-slots (resource-file size-limits page-width left-margin right-margin subview-description                                 archive workspace splitter percentage-display) self       (let* ((archive-width (+ page-width 60))              (archive-height 240)              (workspace-width (+ page-width 60))              (workspace-height 240)              (archive-view (make-instance 'horizontal-vertical-scrollable-view                              :view-size (make-point archive-width archive-height)                              :view-position #@(0 0)                              :view-class 'pict-archive-view))              (percentage (make-instance 'editable-number-di                            :view-nick-name :percentage-display                            :view-position (make-point (- page-width 28)                                                       6)                            :min-number 10                            :max-number 200                            :actual-number 100                            :number-field-width 25                            :text-field-width 15                            :dialog-item-text "%"                            :after-set-number-method                            #'(lambda (self)                                (resize-expanded-pict (view-window self) (actual-number self)))))              (menu-bar (make-menu-bar self))               (pict-working-area (make-instance 'pict-working-area                                   :view-size (make-point page-width (- workspace-height 60))                                   :view-position #@(30 30)                                   :text-width (- page-width left-margin right-margin)))              (workspace-view (make-instance 'pict-workspace-view                                :view-size (make-point workspace-width workspace-height)                                :view-position (make-point 0 (+ archive-height 5))                                :subview-description                                (list (list pict-working-area                                            :adjust-h-v                                            :stick-on-topleft)                                      (list percentage                                            :constant                                            :stick-on-topleft))))              (subview (make-instance 'unibas-paned-view-with-two-adjustables                         :view-size (make-point archive-width (+ archive-height 5 workspace-height))                         :view-position #@(2 22)                         :direction :vertical                         :subview-description                         (list (list archive-view                                     :adjust-h-v                                     :stick-on-topleft)                               (list workspace-view                                     :adjust-h-v                                     :stick-on-bottomright)))))         (set-view-nick-name (view-named :real-view archive-view) :pict-archive-view)         (setf archive archive-view)         (setf workspace workspace-view)         (setf percentage-display percentage)         (hide-subview workspace percentage-display)         (setf splitter                (add-view-splitter subview                                   (list :vertical                                         (list archive-view workspace-view)                                        62                                        nil                                        nil                                        #'(lambda (splitter)                                            (let ((container (view-container (car (splitted-views splitter)))))                                              (setf (distances container) nil)                                              (setf (percentages container) nil))))))         (set-view-size self (add-points (view-size subview) #@(4 39)))         (setf (min-size self) (make-point (point-h (view-size self))                                           150))         (setf (max-size self) (make-point (point-h (view-size self))                                           *screen-height*))         (setf subview-description               (list (list menu-bar                           :adjust-h                           :stick-on-topleft)                     (list subview                           :adjust-h-v                           :stick-on-topleft)))         (when resource-file           (let ((shrinked-picts (mapcar #'(lambda (picture)                                             (let ((new-pict (generate-shrinked-pict (view-named :pict-archive-view archive) picture :wrapped t)))                                               (when (source-window self)                                                 (push (real-fred (fred-window (source-window self)))                                                       (drop-targets new-pict)))                                               (push pict-working-area (drop-targets new-pict))                                               (pushnew (slot-value new-pict 'rsrc-id) (rsrc-ids self))                                               (set-view-container new-pict (view-named :pict-archive-view archive))                                               (setf (slot-value new-pict 'rsrc-file) resource-file)                                               new-pict))                                         (get-all-picts-from-file resource-file))))                 (when shrinked-picts                   (deselect-all (car shrinked-picts) :draw-now-p t))                 (when (string-equal (window-title self) "untitled")                   (set-window-title self                                     (format nil                                              "~A {...:~A:}"                                             (file-namestring resource-file)                                             (car (last (pathname-directory resource-file))))))))))))(defmethod invalidate-arrow-area ((self pict-archive))  (let* ((workspace (workspace self))         (pict-area (view-named :pict-working-area workspace)))    (invalidate-corners workspace                        #@(1 1)                        (subtract-points (view-top-right pict-area) #@(70 1))                        t)    (invalidate-corners workspace                        (make-point 1 (+ (view-bottom pict-area) 1))                        (subtract-points (view-size workspace) #@(1 1))                        t)    (invalidate-corners workspace                        (make-point (+ (view-right pict-area) 1) (view-top pict-area))                        (subtract-points (view-size workspace) #@(1 1))                        t)))(defmethod resize-expanded-pict ((self pict-archive) percentage)  (let ((expanded-pict (expanded-pict self)))    (when expanded-pict      (let* ((original-size (pict-size (shrinked-pict expanded-pict)))             (percentage-display (percentage-display self))             (percentage-string (dialog-item-text (view-named :number percentage-display))))        (set-view-size expanded-pict                       (make-point (round (* (/ (point-h original-size) 100) percentage))                                   (round (* (/ (point-v original-size) 100) percentage))))        (setf (actual-number percentage-display) percentage)        (set-dialog-item-text (view-named :number percentage-display) percentage-string)))))(defmethod window-close :after ((self pict-archive))   (when (resource-file self)       (close-res-file (resource-file self))))(defmethod set-view-size :after ((self pict-archive) h &optional v)   (declare (ignore h v))    (set-view-splitter-correct-position (splitter self))   (let ((expanded-pict (expanded-pict self)))      (when expanded-pict          (set-view-size expanded-pict (view-size expanded-pict)))))          (defmethod window-zoom-event-handler :around ((self pict-archive) message)   (declare (ignore message))    (call-next-method)   (set-view-splitter-correct-position (splitter self))   (let ((expanded-pict (expanded-pict self)))      (when expanded-pict          (set-view-position expanded-pict                                         (make-point (round (- (view-width (view-container expanded-pict))                                                                            (point-h (view-size expanded-pict)))                                                                        2)                                                             5)))))(defmethod expanded-pict ((self pict-archive))   (view-named :expanded-pict (view-named :pict-working-area (workspace self))))(defmethod shrinked-picts ((self pict-archive))   (subviews (view-named :pict-archive-view (archive self)) 'shrinked-pict))(defmethod all-picts ((self pict-archive))   (if (expanded-pict self)      (cons (expanded-pict self) (shrinked-picts self))      (shrinked-picts self)))(defmethod dummy-pict ((self pict-archive))   (dummy-pict (view-named :pict-archive-view (archive self))))(defmethod selected-pict ((self pict-archive))   (let ((expanded-pict (expanded-pict self))           (shrinked-pict (car (subviews (view-named :pict-archive-view (archive self)) 'shrinked-pict))))      (or (when (and expanded-pict                              (selected-p expanded-pict))                expanded-pict)            (when shrinked-pict                (car (selected-items shrinked-pict))))))(defmethod archive-view ((self pict-archive))   (view-named :pict-archive-view (archive self)))(defmethod working-view ((self pict-archive))   (view-named :pict-working-area (workspace self)))(defmethod pict-with-number ((self pict-archive) number)   (dolist (pict (all-picts self))      (when (and (slot-boundp pict 'rsrc-id)                        (eq (slot-value pict 'rsrc-id) number))          (return pict))))(defmethod show-pict-with-number ((self pict-archive) number)   (let ((pict (pict-with-number self number)))      (if pict         (progn (window-select self)                    (if (eq (expanded-pict self) pict)                       (flash (working-view self))                       (show-expanded-pict (working-view self) pict #@(0 0))))         (flash self))))                       ;-----------------------------------------------------------------------------;(oou-dependencies :trash-di);------------------------------------------------------------------------------#|(make-instance 'pict-archive)(setf win (make-instance 'pict-archive :resource-file "Mac HD:Desktop Folder:test"))|#