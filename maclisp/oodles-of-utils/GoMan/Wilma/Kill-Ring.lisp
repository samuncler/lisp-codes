(in-package :oou)(oou-provide :kill-ring);*****************************************************************                                    ;; Copyright © 1994 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Part of Wilma (a text editor for LaTeX); ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :layout-system)(export '());--------------------------------------------------------------------------(defvar *kill-ring-view* nil)(defclass kill-ring-container (view)  ())(defmethod initialize-instance :after ((self kill-ring-container) &rest initargs)  (declare (ignore initargs))  (add-subviews self (setf *kill-ring-view*                           (make-instance 'kill-ring-view                             :draw-outline t                             :view-position #@(3 3)))))(defmethod set-view-size :after ((self kill-ring-container) h &optional v)  (declare (ignore h v))  (set-view-size (car (subviews self)) (subtract-points (view-size self) #@(6 6))));------------------------------------------------------------------------------------(defclass kill-ring-view (drag-and-drop-fred-mixin fred-dialog-item)  ((current-string :initform 0                   :accessor current-string)))(defmethod view-click-event-handler ((self kill-ring-view) where)  (if (and (< (point-h where)              17)           (> (point-v where)               (- (view-height self) 18)))    (if *killed-strings*      (progn (ccl::rotate-killed-strings)             (do ((i 5 (1- i)))                 ((or (and (ccl::first-killed-string)                           (string/= (car (ccl::first-killed-string))                                     (buffer-substring (fred-buffer self) 0 t)))                      (< i 0))                  (buffer-delete (fred-buffer self) 0 t)                  (fred-update self)                  (ed-insert-char self (ccl::first-killed-string))                  (fred-update self))               (ccl::rotate-killed-strings)))      (ed-beep))    (call-next-method)))(defmethod view-draw-contents :after ((self kill-ring-view))  (when (view-container self)    (with-focused-view (view-container self)      (let ((view-left (point-h (view-bottom-left self)))            (view-right (point-h (view-bottom-right self)))            (view-bottom (point-v (view-bottom-left self))))        (rlet ((ps :penstate))          (#_GetPenState ps)          (#_MoveTo (-  view-left 2)  (- view-bottom 16))          (#_Line 18 18)          (#_Line 0 -18)          (#_Line -18 0)          (#_MoveTo (+  view-right 2)  (- view-bottom 13))          (#_Line -15 0)          (#_Line 0 16)          (#_MoveTo (-  view-right 10)  (- view-bottom 10))          (#_Line 6 0)          (#_Line 0 6)          (#_Line -6 0)          (#_Line 0 -6)          (#_Move 6 2)          (#_Line 4 0)          (#_Line 0 8)          (#_Line -8 0)          (#_Line 0 -4)          (#_PenNormal)          (#_SetPenState ps))))))(defmethod fred-update :after ((self kill-ring-view))  (when (view-container self)    (with-focused-view (view-container self)      (let ((view-left (point-h (view-bottom-left self)))            (view-right (point-h (view-bottom-right self)))            (view-bottom (point-v (view-bottom-left self))))        (rlet ((ps :penstate))          (#_GetPenState ps)          (#_MoveTo (-  view-left 2)  (- view-bottom 16))          (#_Line 18 18)          (#_Line 0 -18)          (#_Line -18 0)          (#_MoveTo (+  view-right 2)  (- view-bottom 13))          (#_Line -15 0)          (#_Line 0 16)          (#_MoveTo (-  view-right 10)  (- view-bottom 10))          (#_Line 6 0)          (#_Line 0 6)          (#_Line -6 0)          (#_Line 0 -6)          (#_Move 6 2)          (#_Line 4 0)          (#_Line 0 8)          (#_Line -8 0)          (#_Line 0 -4)          (#_PenNormal)          (#_SetPenState ps))))))(defmethod view-cursor ((self kill-ring-view) where)  (cond ((and (< (point-h where)              17)           (> (point-v where)               (- (view-height self) 18)))         *pointer-hand-cursor*)        ((and (> (point-h where)                 (- (view-width self) 13))              (> (point-v where)                  (- (view-height self) 13)))         *full-hand-cursor*)        (t (call-next-method))))(defmethod initialize-instance :after ((self kill-ring-view) &rest initargs)  (declare (ignore initargs))  (ed-insert-char self (ccl::first-killed-string))  (collapse-selection self t))(defmethod ed-delete-with-undo :after ((w source-window-embedded-fred-di) start end  &optional save-p reverse-p append-p)  (declare (ignore start end  save-p reverse-p append-p))  (when *kill-ring-view*    (buffer-delete (fred-buffer *kill-ring-view*) 0 t)    (ed-insert-char *kill-ring-view* (ccl::first-killed-string))    (fred-update *kill-ring-view*)));----------------------------------------------------------------------------------(defclass kill-ring-window (special-events-dim layout-mixin window)  ()  (:default-initargs     :view-size #@(180 120)    :window-title "Saved Strings"))(defmethod initialize-instance :after ((self kill-ring-window) &rest initargs)   (declare (ignore initargs))  (setf (layout self)         (:fbox () (make-instance 'kill-ring-container))))(defmethod window-close :after ((self kill-ring-window))  (setf *kill-ring-view* nil))(defun show-kill-ring-window ()  (if *kill-ring-view*    (window-select (view-window *kill-ring-view*))    (window-select (or (car (windows :class 'kill-ring-window :include-invisibles t))                       (make-instance 'kill-ring-window)))))#|(show-kill-ring-window)|#