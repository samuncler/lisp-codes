(in-package :oou)(oou-provide :Wilma);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a text editor for LaTeX; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :Wilma-commands                  :kill-ring                  :restricted-size-wim                  :menubar-hide)(export '());--------------------------------------------------------------------------(defvar *global-icon-bar* nil);--------------------------------------------------------------------------(defun edit-readable-file (&optional w &aux (name (choose-file-dialog                                                      :mac-file-type '(:TEXT :GMAU))))  (declare (ignore w))  (when name    (case (mac-file-type name)      (:TEXT       (if (eq (mac-file-creator name) :CCL2)         (fred name)         (wilma name)))      (:GMAU       (wilma name)))))(advise ccl::ed        (let ((name (car arglist))              (default-editor *default-editor-class*))          (case (mac-file-type name)            (:TEXT             (if (eq (mac-file-creator name) :CCL2)               (setf *default-editor-class* 'fred-window)               (setf *default-editor-class* 'wilma)))            (:GMAU             (setf *default-editor-class* 'wilma)))          (let ((window                  (or (find-if #'(lambda (win)                                  (and (slot-exists-p win 'filename)                                       (equal (pathname (slot-value win 'filename))                                              (pathname name))))                              (windows :class *default-editor-class* :include-invisibles t))                     (:do-it))))            (setf *default-editor-class* default-editor)            (window-select window)            (if (typep window 'wilma)              (real-fred (fred-window window))              window)))        :when :around);--------------------------------------------------------------------------(defclass wilma-document (document)  ((window-width :initform 543                 :accessor window-width                 :allocation :class)   (window-height :initform 300                  :accessor window-height                  :allocation :class)))     (unless (boundp 'ccl::$ioPBSize)  (defconstant ccl::$ioPBSize 122))(unless (boundp 'ccl::$ioFileName)  (defconstant ccl::$ioFileName #x12))(defmethod save-as ((self Wilma-document))  (let ((file (new-document-name self                                   (choose-new-file-dialog :prompt "document name"))))    (when (and file               (neq 'cancelled file))      (save-source-text self))))(defmethod save-source-text ((self wilma-document) &key (filename (source-file self)))  (with-running-watch    (with-slots (source-window source-buffer) self      (close-res-file filename)      (buffer-write-file source-buffer filename :if-exists :overwrite)      (set-mac-file-type filename :TEXT)      (set-mac-file-creator filename :WLMA)      (window-set-not-modified (real-fred (fred-window source-window)))      (unless (slot-value (real-fred (fred-window source-window)) 'ccl::my-file-name)        (setf (slot-value (real-fred (fred-window source-window)) 'ccl::my-file-name)              filename))      (ccl::view-save-position (real-fred (fred-window source-window)) filename t)      (purge-autosave-file (real-fred (fred-window source-window)))      (when source-window        (set-window-title source-window                          (format nil                                   " ~A {...:~A:}"                                  (file-namestring filename)                                  (car (last (pathname-directory filename)))))))))(defmethod new-document-name ((self wilma-document) &optional name)  (with-slots (source-file source-window) self    (let ((new-file (or (when name                          (full-pathname name))                        (when  (and (null name)                                    source-file)                          (if (and (pathname-type (full-pathname source-file))                                   (string-not-equal  (pathname-type (full-pathname source-file))                                                      "tex"))                            (format nil                                    "~A~A.~A"                                    (directory-namestring source-file)                                    (pathname-name (full-pathname source-file))                                    (pathname-type (full-pathname source-file)))                            (format nil                                    "~A~A"                                    (directory-namestring source-file)                                    (pathname-name (full-pathname source-file)))))                        (catch-cancel                          (choose-new-file-dialog :prompt "Document name")))))      (unless (eq new-file :cancel)        (setf source-file (full-pathname (format nil                                                  "~A.tex"                                                  (namestring new-file)))))      new-file)));---------------------------------------------------------------------------(defclass marker-view (view)  ((go-back-rect :initform (make-record :rect :left 0 :right 4)                 :accessor go-back-rect)))(defmethod view-click-event-handler  ((self marker-view) where)   (cond ((point-in-rect-p (go-back-rect self) where)         (let ((fred (real-fred (fred-window (view-window self)))))           (go-back-to-last-edit-mark fred)           (fred-update fred)))        ((and (null *global-icon-bar*)               (> (point-v where)                 (- (view-height self) 5)))         (make-tool-bar)         (with-focused-view self           (erase-rect self 0 (- (view-height self) 3) 3 (view-height self))))))(defmethod view-cursor ((self marker-view) where)   (cond ((point-in-rect-p (go-back-rect self) where)         *right-hand-cursor*)        ((and (null *global-icon-bar*)              (> (point-v where)                 (- (view-height self) 5)))         *pointer-hand-cursor*)        (t *arrow-cursor*)))  (defmethod new-v-pos ((self marker-view))  (let* ((fred (real-fred (fred-window (view-window self))))         (last-edit-start-mark (car (last-edit-mark fred)))         (scroll-height (- (view-height self) 47))         (buffer-size (buffer-size (fred-buffer fred)))         (offset (- (* 15 (/ last-edit-start-mark buffer-size)))))    (floor (+ 16              8              offset              (/ (* last-edit-start-mark scroll-height)                 buffer-size)))))(defmethod draw-triangle ((self marker-view) &optional (v-pos (new-v-pos self)))  (rset (go-back-rect self) :rect.top (- v-pos 6))  (rset (go-back-rect self) :rect.bottom (+ v-pos 6))  (with-focused-view self    (with-pen-mode (:PatXOr self)      (fill-rect self *black-pattern* 0 (- v-pos 6) 2 (+ v-pos 6)))))(defmethod draw-icon-bar-rect ((self marker-view))  (unless *global-icon-bar*    (with-focused-view self      (with-pen-mode (:PatXOr self)        (fill-rect self *black-pattern*                    0 (- (view-height self) 3) 3 (view-height self))))))          (defmethod update-marker ((self marker-view))  (let* ((new-v-pos (new-v-pos self))         (old-v-pos (+ 6 (rref (go-back-rect self) :rect.top))))    (unless (= new-v-pos old-v-pos)      (erase-rect self 0 (- old-v-pos 6) 2 (+ old-v-pos 6))      (draw-triangle self new-v-pos))))(defmethod view-draw-contents :after ((self marker-view))   (draw-triangle self)  (draw-icon-bar-rect self))(defmethod update-marker-view ((self marker-view))  (let ((fred-di (fred-window (view-window self))))    (set-view-size self                   (make-point (view-width self)                               (view-height fred-di)))    (set-view-position self                       (make-point (view-left self)                                   (view-top fred-di)))))(defmethod set-view-size :before ((self marker-view) h &optional v)  (declare (ignore h v))  (erase-view self));----------------------------------------------------------------------------(defclass wilma-scrollable-fred-di (source-window-scrollable-fred-di)  ()  (:default-initargs    :view-class 'wilma-embedded-fred-di))(defmethod current-docu-string ((self wilma-scrollable-fred-di) &optional where)  (declare (ignore where))   (format nil "~A|" (buffer-line (fred-display-start-mark (real-fred self)))))(defmethod current-docu-view ((self wilma-scrollable-fred-di) &optional where)   (declare (ignore where))  (mouse-documentation-line (view-window self)));----------------------------------------------------------------------------(defclass wilma-embedded-fred-di (source-window-embedded-fred-di)  ())(defmethod after-change-update-method :after ((self wilma-embedded-fred-di) &key arg)   (declare (ignore arg))  (when (and (view-window self)             (marker-view (view-window self)))    (update-marker (marker-view (view-window self))))) (defmethod do-vscroll :after ((self wilma-embedded-fred-di) part)  (declare (ignore part))  (view-mouse-enter-event-handler (view-container self))  (view-draw-contents (mouse-documentation-line (view-window self))))(defmethod find-all-sectioning ((fred wilma-embedded-fred-di) &optional (start 0))  (let ((all-chapter-pos (find-all-string-pos fred "\\Chapter" :start start))        (all-section-pos (find-all-string-pos fred "\\Section" :start start))        (all-subsection-pos (find-all-string-pos fred "\\SubSection" :start start))        (all-subsubsection-pos (find-all-string-pos fred "\\SubSubSection" :start start))        (all-paragraph-pos (find-all-string-pos fred "\\Paragraph" :start start))        (all-subparagraph-pos (find-all-string-pos fred "\\SubParagraph" :start start))        (all-sectionings nil))    (dolist (chapter-pos all-chapter-pos)      (push (list* chapter-pos                   (format nil " x.  ~A" (get-substring fred (+ chapter-pos 8) :stop-char #\})))            all-sectionings))    (dolist (section-pos all-section-pos)      (push (list* section-pos                   (format nil "   x.x  ~A" (get-substring fred (+ section-pos 9) :stop-char #\})))            all-sectionings))    (dolist (subsection-pos all-subsection-pos)      (push (list* subsection-pos                   (format nil "     x.x.x  ~A" (get-substring fred (+ subsection-pos 12) :stop-char #\})))            all-sectionings))    (dolist (subsubsection-pos all-subsubsection-pos)      (push (list* subsubsection-pos                   (format nil "       x.x.x.x  ~A" (get-substring fred (+ subsubsection-pos 15) :stop-char #\})))            all-sectionings))    (dolist (paragraph-pos all-paragraph-pos)      (push (list* paragraph-pos                   (format nil "         x.x.x.x.x  ~A" (get-substring fred (+ paragraph-pos 11) :stop-char #\})))            all-sectionings))    (dolist (subparagraph-pos all-subparagraph-pos)      (push (list* subparagraph-pos                   (format nil "           x.x.x.x.x.x  ~A" (get-substring fred (+ subparagraph-pos 14) :stop-char #\})))            all-sectionings))    (sort all-sectionings #'< :key #'car)))(defmethod find-all-figures ((fred wilma-embedded-fred-di) &optional (start 0) &aux figures)  (dolist (figure-pos (find-all-string-pos fred "\\begin{figure" :start start) )    (let* ((buff (fred-buffer fred))           (caption-pos (buffer-string-pos buff "\\caption"                                            :start figure-pos                                            :end (buffer-string-pos buff "\\end{figure" :start figure-pos))))      (push (list* figure-pos                   (if caption-pos                     (let ((cap (get-substring fred (+ caption-pos 8) :stop-char #\})))                       (if (string= cap "")                         "Figure with empty Caption"                         cap))                     "Figure without Caption"))            figures)))  (dolist (figure-pos (find-all-string-pos fred "\\begin{myfigure" :start start))    (let* ((buff (fred-buffer fred))           (caption-pos (buffer-string-pos buff "\\caption"                                            :start figure-pos                                            :end (buffer-string-pos buff "\\end{myfigure" :start figure-pos))))      (push (list* figure-pos                   (if caption-pos                     (let ((cap (get-substring fred (+ caption-pos 8) :stop-char #\})))                       (if (string= cap "")                         "Figure with empty Caption"                         cap))                     "Figure without Caption"))            figures)))  (dolist (figure-pos (find-all-string-pos fred "\\begin{framedfigure" :start start))    (let* ((buff (fred-buffer fred))           (caption-pos (buffer-string-pos buff "\\caption"                                            :start figure-pos                                            :end (buffer-string-pos buff "\\end{myfigure" :start figure-pos))))      (push (list* figure-pos                   (if caption-pos                     (let ((cap (get-substring fred (+ caption-pos 8) :stop-char #\})))                       (if (string= cap "")                         "Figure with empty Caption"                         cap))                     "Figure without Caption"))            figures)))  (dolist (figure-pos (find-all-string-pos fred "\\begin{scaledfigure" :start start))    (let* ((buff (fred-buffer fred))           (caption-pos (buffer-string-pos buff "\\caption"                                            :start figure-pos                                            :end (buffer-string-pos buff "\\end{myfigure" :start figure-pos))))      (push (list* figure-pos                   (if caption-pos                     (let ((cap (get-substring fred (+ caption-pos 8) :stop-char #\})))                       (if (string= cap "")                         "Figure with empty Caption"                         cap))                     "Figure without Caption"))            figures)))  (sort figures #'< :key #'car))(defmethod find-all-labels ((fred wilma-embedded-fred-di) &optional (start 0) &aux labels)  (dolist (label-pos (find-all-string-pos fred "\\Label" :start start) (sort labels #'string-lessp :key #'cdr))    (push (list* label-pos                 (format nil                         "'~A'"                         (get-substring fred (+ label-pos 7) :stop-char #\})))          labels)))(defmethod find-all-links ((fred wilma-embedded-fred-di) &optional (start 0) &aux links citations)  (dolist (link-pos (find-all-string-pos fred "\\ref" :start start))    (push (list* link-pos                 (format nil                         "ref to :  '~A'"                         (get-substring fred (+ link-pos 5) :stop-char #\})))          links))  (dolist (link-pos (find-all-string-pos fred "\\pageref" :start start))    (push (list* link-pos                 (format nil                         "ref to :  '~A'"                         (get-substring fred (+ link-pos 9) :stop-char #\})))          links))  (setf links (sort links #'string-lessp :key #'cdr))  (dolist (cite-pos (find-all-string-pos fred "\\cite" :start start))    (push (list* cite-pos                 (format nil                         "citation :  '~A'"                         (get-substring fred (+ cite-pos 6) :stop-char #\})))          citations))  (dolist (cite-pos (find-all-string-pos fred "\\nocite" :start start))    (push (list* cite-pos                 (format nil                         "citation :  '~A'"                         (get-substring fred (+ cite-pos 8) :stop-char #\})))          citations))  (setf citations (sort citations #'string-lessp :key #'cdr))  (nconc citations links));---------------------------------------------------------------------------(defclass wilma-pop-up-menu (source-window-docu-line-svm unibas-pop-up-menu-with-help)  ()  (:default-initargs    :local-command-keys-p t    :view-position #@(0 0)    :view-size #@(45 20)    :draw-arrow-p nil    :draw-outline nil));----------------------------------------------------------------------------(defclass Wilma (source-window)  ((filename :initform nil             :initarg :filename)   (marker-view :initform nil                :accessor marker-view))  (:default-initargs    :min-size #@(467 169)    :view-size (make-point (+ (caadr (find 'oou::window-width                                           (class-class-slots (find-class 'oou::wilma-document))                                           :key #'car))                              2                              46)                           (+ (caadr (find 'oou::window-height                                           (class-class-slots (find-class 'oou::wilma-document))                                           :key #'car))                               34))    :document (make-instance 'wilma-document)    :fred-class 'wilma-scrollable-fred-di))(defmethod make-menu-bar ((self Wilma))  (let* ((sectioning-menu          (make-instance 'wilma-pop-up-menu            :docu-line-string "Sectioning the document"            :item-display "Sectioning"            :local-command-keys-p nil            ;:view-size #@(80 20)            :menu-items            (do ((commands (mapcar #'get-command (list 'subparagraph 'paragraph 'subsubsection 'subsection 'section 'chapter))                           (cdr commands))                 (menu-items nil))                ((null commands) menu-items)              (push (make-instance 'source-window-command-menu-item                      :window self                      :command (car commands)                      :menu-item-title (format nil                                               "~:(~A~)"                                               (name (car commands))))                    menu-items))))         (environments-menu          (make-instance 'wilma-pop-up-menu            :docu-line-string "LaTeX-Environment Templates"            :item-display "Environments"            ;:view-size #@(100 20)            :local-command-keys-p t            :menu-items            (do ((commands (mapcar #'get-command (list  'private-letter 'official-letter 'verbatim 'description 'verse 'quotation 'quote 'beispiel 'scaledfigure 'framedfigure  'item 'enumerate 'itemize))                           (cdr commands))                 (menu-items nil))                ((null commands) menu-items)              (when (or (eq (name (car commands)) 'item)                        (eq (name (car commands)) 'beispiel)                        (eq (name (car commands)) 'verbatim))                (push (make-instance 'menu-item :menu-item-title "-") menu-items))              (let ((menu-item (make-instance 'source-window-command-menu-item                                 :window self                                 :command (car commands)                                 :menu-item-title (format nil                                                          "~:(~A~)"                                                          (cond ((eq (name (car commands)) 'private-letter)                                                                 "Private Letter")                                                                ((eq (name (car commands)) 'official-letter)                                                                 "Official Letter")                                                                (t (name (car commands))))))))                (push menu-item                      menu-items)                (when (eq (name (car commands)) 'item)                  (set-command-key menu-item #\I))))))         (references-menu          (make-instance 'wilma-pop-up-menu            :docu-line-string "References Templates"            :item-display "References"            ;:view-size #@(85 20)            :local-command-keys-p nil            :menu-items            (do ((commands (mapcar #'get-command (list 'page-reference 'cross-reference 'label 'citation))                           (cdr commands))                 (menu-items nil))                ((null commands) menu-items)              (push (make-instance 'source-window-command-menu-item                      :window self                      :command (car commands)                      :menu-item-title (format nil                                               "~:(~A~)"                                               (cond ((eq (name (car commands)) 'page-reference)                                                      "Page Reference")                                                     ((eq (name (car commands)) 'cross-reference)                                                      "Cross Reference")                                                     (t (name (car commands))))))                    menu-items))))         (misc-menu          (make-instance 'wilma-pop-up-menu            :docu-line-string "Some additional other Templates"            :item-display "Misc"            ;:view-size #@(40 20)            :local-command-keys-p t            :menu-items            (do ((commands (mapcar #'get-command (list 'copyright-logo 'latex-logo 'tex-logo 'date 'marginpar 'quotes 'german-quotes 'footnote))                           (cdr commands))                 (menu-items nil))                ((null commands) menu-items)              (let ((menu-item (make-instance 'source-window-command-menu-item                                 :window self                                 :command (car commands)                                 :menu-item-title (format nil                                                          "~:(~A~)"                                                          (cond ((eq (name (car commands)) 'german-quotes)                                                                 "German Quotes")                                                                ((eq (name (car commands)) 'tex-logo)                                                                 "TeX Logo")                                                                ((eq (name (car commands)) 'latex-logo)                                                                 "LaTeX Logo")                                                                ((eq (name (car commands)) 'copyright-logo)                                                                 "Copyright Logo")                                                                (t (name (car commands))))))))                (push menu-item                      menu-items)                (when (eq (name (car commands)) 'german-quotes)                  (set-command-key menu-item #\Q))))))         (text-menu          (make-instance 'wilma-pop-up-menu            :docu-line-string "Text Templates"            :item-display "Text"            ;:view-size #@(40 20)            :local-command-keys-p t            :menu-items            (let ((menu-items nil))              (do ((commands (mapcar #'get-command (list 'gigantic 'huge 'larger 'large 'normal 'small 'smaller 'smallest 'tiny))                             (cdr commands)))                  ((null commands) menu-items)                (push (make-instance 'source-window-command-menu-item                        :window self                        :command (car commands)                        :menu-item-title (format nil                                                 "~:(~A~)"                                                 (name (car commands))))                      menu-items))              (push (make-instance 'menu-item :menu-item-title "-") menu-items)              (do ((commands (mapcar #'get-command (list 'roman 'bold 'italic 'slanted 'Sans-Serif 'Typewriter 'small-caps 'emphatic))                             (cdr commands)))                  ((null commands) menu-items)                (let ((menu-item (make-instance 'source-window-command-menu-item                                   :window self                                   :command (car commands)                                   :menu-item-title (format nil                                                            "~:(~A~)"                                                            (cond ((eq (name (car commands)) 'Sans-Serif)                                                                   "Sans Serif")                                                                  ((eq (name (car commands)) 'small-caps)                                                                   "Small Caps")                                                                  (t (name (car commands))))))))                  (push menu-item                        menu-items)                  (when (eq (name (car commands)) 'emphatic)                    (set-command-key menu-item #\E))))              menu-items)))         (edit-menu          (make-instance 'wilma-pop-up-menu            :docu-line-string "Do some editing in the text"            :help-locations '((nil "GoMan Manual:" "Edit Menu"))            :item-display "Edit"            :local-command-keys-p t            ;:view-size #@(40 20)            :menu-items            (list              (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "Cut"))               :menu-item-title "Cut"               :command-key #\X               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (cut (real-fred (fred-window window)))                   (fred-update (real-fred (fred-window window))))               :update-function               #'(lambda (menu-item)                   (let ((fred (real-fred (fred-window (window menu-item)))))                     (multiple-value-bind (start-sel end-sel) (selection-range fred)                       (if (eq start-sel end-sel)                         (menu-item-disable menu-item)                         (menu-item-enable menu-item))))))             (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "Copy"))               :menu-item-title "Copy"               :command-key #\C               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (copy (real-fred (fred-window window))))               :update-function               #'(lambda (menu-item)                   (let ((fred (real-fred (fred-window (window menu-item)))))                     (multiple-value-bind (start-sel end-sel) (selection-range fred)                       (if (eq start-sel end-sel)                         (menu-item-disable menu-item)                         (menu-item-enable menu-item))))))             (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "Paste"))               :menu-item-title "Paste"               :command-key #\V               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (paste (real-fred (fred-window window)))))             (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "Select All"))               :menu-item-title "Select All"               :command-key #\A               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (select-all (real-fred (fred-window window)))))             (make-instance 'menu-item :menu-item-title "-")             (make-instance 'source-window-menu-item               :help-locations '((nil "GoMan Manual:" "Search"))               :menu-item-title "Search..."               :command-key #\F               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item window))                   (ccl::search-window-dialog)))             (make-instance 'menu-item :menu-item-title "-")             (make-instance 'source-window-menu-item               :help-locations '((nil "GoMan Manual:" "Autosaving"))               :menu-item-title "Auto Save"               :window self               :menu-item-checked t               :menu-item-action                #'(lambda (menu-item window)                   (let ((fred (real-fred (fred-window window))))                     (setf (autosaving-enabled-p fred)                           (not (autosaving-enabled-p fred)))                     (set-menu-item-check-mark menu-item (autosaving-enabled-p fred)))))             (make-instance 'source-window-menu-item               :help-locations '((nil "GoMan Manual:" "Auto Wrap"))               :menu-item-title "Auto Wrap"               :window self               :menu-item-checked t               :menu-item-action                #'(lambda (menu-item window)                   (let ((fred (real-fred (fred-window window))))                     (setf (auto-wrap fred)                           (not (auto-wrap fred)))                     (set-menu-item-check-mark menu-item (auto-wrap fred)))))             (make-instance 'source-window-menu-item               :help-locations '((nil "GoMan Manual:" "Wrap Paragraph"))               :menu-item-title "Wrap Paragraph"               :window self               :command-key #\W               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (let ((fred (real-fred (fred-window window))))                     (multiple-value-bind (start end) (selection-range fred)                       (if (= start end)                         (ed-fill-paragraph fred)                         (ed-fill-selection fred)))                     (fred-update fred)))               :update-function               #'(lambda (menu-item)                   (multiple-value-bind (start end) (selection-range (real-fred (fred-window (window menu-item))))                     (if (= start end)                       (set-menu-item-title menu-item "Wrap Paragraph")                       (set-menu-item-title menu-item "Wrap Selection")))))             (make-instance 'menu-item :menu-item-title "-")             (make-instance 'menu               :menu-title "Font"               :menu-items               (do ((font-names (remove #\% *font-list*                                        :key #'(lambda (string)                                                 (elt string 0)))                                (cdr font-names))                    (items nil))                   ((null font-names) (sort items #'string< :key #'menu-item-title))                 (push (make-instance 'new-font-menu-item                         :window self                         :item-info (car font-names)                         :help-locations '((nil "GoMan Manual:" "Font"))                         :menu-item-title (car font-names))                       items)))             (make-instance 'menu               :menu-title "Font Size"               :menu-items               (do ((font-sizes '(24 18 14 12 10 9) (cdr font-sizes))                    (items nil))                   ((null font-sizes) items)                 (push (make-instance 'new-font-menu-item                         :window self                         :item-info (car font-sizes)                         :help-locations '((nil "GoMan Manual:" "Font Size"))                         :menu-item-title (format nil "~2d" (car font-sizes)))                       items)))             (make-instance 'menu               :menu-title "Font Style"               :menu-items               (do ((font-styles '(:extend :condense :shadow :outline :underline :italic :bold :plain)                                 (cdr font-styles))                    (items nil))                   ((null font-styles) items)                 (push (make-instance 'new-font-menu-item                         :window self                         :item-info (car font-styles)                         :help-locations '((nil "GoMan Manual:" "Font Style"))                         :command-key (case (car font-styles)                                        (:plain #\P)                                        (:bold #\B)                                        (:underline #\U))                         :menu-item-title (format nil                                                   "~:(~A~)"                                                   (symbol-name (car font-styles)))                         :style (car font-styles))                       items)))             )))         (document-menu          (make-instance 'wilma-pop-up-menu            :docu-line-string "Choose a command with regard to the document"            :item-display "File"             ;:view-size #@(40 20)            :menu-items            (list              (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "New"))               :command-key #\N               :menu-item-title "New"               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item window))                   (wilma)))             (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "Open"))               :command-key #\O               :menu-item-title "OpenÉ"               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item window))                   (edit-readable-file)))             (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "Insert"))               :menu-item-title "InsertÉ"               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item ))                   (insert-file (document window))))             (make-instance 'menu-item :menu-item-title "-")             (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "Format"))               :menu-item-title "Typeset"               :command-key #\T               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (when (window-needs-saving-p (real-fred (fred-window window)))                     (window-save window))                   (menubar-show)                   (ccl::select-LaTex)))             (make-instance 'source-window-menu-item               :window self               :menu-item-title "Update Catalog"               :command-key #\R               :update-function               #'(lambda (menu-item)                   (if (dialog-item-on-screen (window menu-item))                     (menu-item-enable menu-item)                     (menu-item-disable menu-item)))               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (with-cursor *watch-cursor*                     (update-catalog window))))             (make-instance 'menu-item :menu-item-title "-")             (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "Save"))               :menu-item-title "Save"               :command-key #\S               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (window-save window)))             (make-instance 'source-window-menu-item               :window self               :help-locations '((nil "GoMan Manual:" "Save As"))               :menu-item-title "Save As..."               :menu-item-action                #'(lambda (menu-item window)                   (declare (ignore menu-item))                   (save-as (document window))))))))    (dolist (menu (list document-menu edit-menu sectioning-menu environments-menu references-menu misc-menu text-menu))      (set-view-size menu                     (+ (string-width (slot-value menu 'ccl::item-display) (view-font menu)) 12)                     20))    (make-instance 'unibas-constant-subview-collection      :direction :horizontal      :distance 1      :view-size (make-point (+ (window-width  (document self)) 16) 20)      :view-position #@(1 1)      :items (list document-menu edit-menu sectioning-menu environments-menu                    references-menu misc-menu text-menu))))(defmethod initialize-instance :after ((self Wilma) &rest initargs)  (declare (ignore initargs))  (with-slots (document source-window filename) self    (setf (source-file document) filename)    (set-window-title self                       (if filename                        (format nil                                 " ~A {...:~A:}"                                (file-namestring filename)                                (car (last (pathname-directory filename))))                        " New"))    (setf (source-window document) self)    (setf (source-buffer document) (fred-buffer (real-fred (fred-window self))))    (when filename      (read-source-file document))    (fred-update (real-fred (fred-window self))))  (let ((marker-view (make-instance 'marker-view                       :view-size (make-point 4 (view-height (fred-window self)))                       :view-position (make-point (view-right (fred-window self))                                                  (view-top (fred-window self))))))    (setf (marker-view self) marker-view)    (setf (subview-description self)          (append (subview-description self)                  (list (list marker-view                              :adjust-v                              :stick-on-topright))))))(defmethod make-icon-bar :around ((self wilma))  (let ((icon-bar (call-next-method)))    (set-view-position icon-bar                       (add-points (view-position icon-bar) #@(1 0)))    icon-bar))(defmethod fred-update ((self Wilma))  (when (fred-window self)    (fred-update (real-fred (fred-window self)))))(defmethod show-subview :after ((self wilma) (subview wilma-scrollable-fred-di) &optional arg)  (declare (ignore arg))  (update-marker-view (marker-view self)))(defmethod hide-dialog-item :after ((self wilma))   (update-marker-view (marker-view self)))(defmethod global-tool-bar-closed ((self wilma))  (view-draw-contents (marker-view self)))(defmethod view-activate-event-handler :after ((self wilma))  (unless *menubar-hidden-p*    (hide-global-icon-bar)    (menubar-hide)    (show-global-icon-bar)))(defmethod view-deactivate-event-handler :after ((self wilma))  (eval-enqueue '(unless (typep (front-window) 'wilma)                   (menubar-show))));----------------------------------------------------------------------------------------------(defun Wilma (&optional file &key (position '(:top 115)))  (with-running-watch    ;(Close-new-if-necessary)    (let ((wilma-win-already-open           (when file             (find-if #'(lambda (win)                          (and (slot-value (real-fred (fred-window win)) 'ccl::my-file-name)                               (equal (pathname (slot-value (real-fred (fred-window win)) 'ccl::my-file-name))                                      (pathname file))))                      (windows :class 'Wilma :include-invisibles t)))))      (if wilma-win-already-open        (progn (window-select wilma-win-already-open)               (real-fred (fred-window wilma-win-already-open)))        (let ((wilma-win (make-instance 'Wilma                           :window-show nil                           :view-position position                           :filename file)))          (when file            (ccl::view-restore-position  (real-fred (fred-window wilma-win)) file))          (set-view-size wilma-win                         (make-point (min (- *screen-width* 40)                                          (view-width wilma-win))                                     (min (- *screen-height* (view-top wilma-win) 20)                                          (view-height wilma-win))))          (set-view-position wilma-win                              (make-point                               (if file                                 (min (- *screen-width* (view-width wilma-win))                                     (max 5 (view-left wilma-win)))                                10)                              (view-top wilma-win)))          (window-select wilma-win)          (real-fred (fred-window wilma-win)))))));-----------------------------------------------------------------------------------------(defclass Wilma-application (GoMan-application)  ())(defmethod ccl::open-application-document ((application Wilma-application) path &optional startup)  (declare (ignore startup))  (let ((type (mac-file-type path)))    (case type       (:TEXT       (Wilma path))      (t (call-next-method)))))   ;(setf *application* (make-instance 'Wilma-application))(defun close-new-if-necessary ()  (let ((wilmas (windows :class 'oou::wilma :include-invisibles t)))    (when (and (= (length wilmas) 1)               (string= (window-title (car wilmas)) " New"))      (eval-enqueue `(window-close ,(car wilmas))))))(defun New-if-necessary ()  (eval-enqueue `(if (windows :class 'oou::wilma :include-invisibles t)                   (window-select (car (windows :class 'oou::wilma :include-invisibles t)))                   (let ((wilma (view-window (oou::wilma))))                     (window-select *top-listener*)                     (window-select wilma)))));----------------------------------------------------------------------(oou-dependencies :Global-Icon-Bar);-----------------------------------------------------------------------#|(make-tool-bar)(make-all-wilma-commands)(wilma)(Wilma (probe-file "mac hd:texte:diss:designbegriff.tex"))|#