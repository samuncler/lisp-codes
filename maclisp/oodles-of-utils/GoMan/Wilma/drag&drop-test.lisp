(in-package :oou)(oou-dependencies :receive-drag)(defvar *last-real-view* nil)(defclass receive-finder-drags-mixin ()  ((accepted-flavors :initform '(:|TEXT| :|hfs |)                     :accessor accepted-flavors                     :initarg :accepted-flavors))) (defmethod flavor-is-accepted ((view receive-finder-drags-mixin) flavor)  (find flavor (accepted-flavors view) :test #'eq))(defmethod drag-tracking-enter-view ((view receive-finder-drags-mixin))  (when (drag-is-droppable-p view)     (setf *last-real-view* view)    (view-drag-hilite view t)    (let ((win (view-window view)))      (with-drag-items (item-reference win)        (cond ((drag-item-flavor-exists-p win :|TEXT| item-reference)               (draggable-view-enters view :|TEXT| (drag-mouse-location (view-window view) nil)))              ((drag-item-flavor-exists-p win :|hfs | item-reference)               (draggable-view-enters view :|hfs | (drag-mouse-location (view-window view) nil))))))))(defmethod drag-tracking-in-view ((view receive-finder-drags-mixin))  (when (drag-is-droppable-p view)    (let ((win (view-window view)))      (with-drag-items (item-reference win)        (cond ((drag-item-flavor-exists-p win :|TEXT| item-reference)               (draggable-dim-is-above view :|TEXT| (drag-mouse-location (view-window view) nil)))              ((drag-item-flavor-exists-p win :|hfs | item-reference)               (draggable-dim-is-above view :|hfs | (drag-mouse-location (view-window view) nil))))))))(defmethod drag-tracking-leave-view ((view receive-finder-drags-mixin))  (when (neq (ccl::find-view-containing-global-point (view-window view) (view-mouse-position nil)) view)    (let ((win (view-window view)))      (with-drag-items (item-reference win)        (cond ((drag-item-flavor-exists-p win :|TEXT| item-reference)               (draggable-view-leaves view :|TEXT| (drag-mouse-location (view-window view) nil)))              ((drag-item-flavor-exists-p win :|hfs | item-reference)               (draggable-view-leaves view :|hfs | (drag-mouse-location (view-window view) nil))))))    (view-drag-hilite view nil)))(defmethod drag-receive-drag ((view receive-finder-drags-mixin))  (when (drag-is-droppable-p view)    (view-drag-hilite view nil)    (let ((win (view-window view)))      (with-drag-items (item-reference win)        (cond ((drag-item-flavor-exists-p win :|TEXT| item-reference)               (when (flavor-is-accepted view :|TEXT|)                 (eval-enqueue                  `(accept-drag ,view                                 ,(convert-flavor-type view :|TEXT| item-reference)                                 ,(drag-mouse-location win nil)))))              ((drag-item-flavor-exists-p win :|hfs | item-reference)               (when (flavor-is-accepted view :|hfs |)                 (eval-enqueue                  `(accept-drag ,view                                 ,(convert-flavor-type view :|hfs | item-reference)                                 ,(drag-mouse-location win nil))))))))    t))(defmethod accept-drag ((view receive-finder-drags-mixin) converted-flavor &optional (global-mouse (view-mouse-position nil)))  (ccl::select-mcl)  (window-select (view-window view))  (dropped view converted-flavor #@(0 0) global-mouse))            (defmethod drag-is-droppable-p ((view receive-finder-drags-mixin))  (let* ((droppable nil)         (win (view-window view))         (actual-pos (view-mouse-position nil)))    (and ;(not (drag-within-sender-application-p (view-window view)))     (not (drag-within-sender-view-p view))     (eq (ccl::find-view-containing-global-point win actual-pos) view)     (with-drag-items (item-reference win)       (when (or (and (drag-item-flavor-exists-p win :|TEXT| item-reference)                      (flavor-is-accepted view :|TEXT|))                 (and (drag-item-flavor-exists-p win :|hfs | item-reference)                      (flavor-is-accepted view :|hfs |)                      ;(text-file-p view item-reference)                      ))         (setf droppable t))))    droppable))(defmethod dropped ((view receive-finder-drags-mixin) flavor-type offset global-where)  (declare (ignore flavor-type offset global-where))  (ed-beep))(defmethod text-file-p ((view receive-finder-drags-mixin) item-reference)  (with-drag-item-flavor-data (fsspec (view-window view) #$flavorTypeHFS item-reference)    (eql (pref fsspec :HFSFlavor.fileType) :|TEXT|)))                   (defmethod convert-flavor-type ((view receive-finder-drags-mixin) flavor-type item-reference)  (declare (ignore flavor-type item-reference))  nil)(defmethod convert-flavor-type ((view receive-finder-drags-mixin) (flavor-type (eql :|hfs |)) item-reference)  (let ((my-window (view-window view)))    (with-drag-item-flavor-data (fsspec my-window flavor-type item-reference)      (let ((path (%path-from-fsspec (pref fsspec :HFSFlavor.fileSpec))))        (when (and path                   (full-pathname path)                   (or (probe-file (full-pathname path))                       (directoryp (full-pathname path))))          (full-pathname path))))))(defmethod convert-flavor-type ((view receive-finder-drags-mixin) (flavor-type (eql :|TEXT|)) item-reference)  (let ((my-window (view-window view)))    (with-drag-item-flavor-data (text-ptr my-window flavor-type item-reference)      (let* ((size (#_GetPtrSize text-ptr))             (new-string (make-string size)))        (without-interrupts         (dotimes (counter size)           (setf (elt new-string counter) (code-char (%get-byte text-ptr counter))))         new-string)))))(defmethod hide-drag-rect-p ((self receive-finder-drags-mixin) flavor-type global-position)   (declare (ignore flavor-type global-position))    nil)(defmethod draggable-dim-is-above ((view receive-finder-drags-mixin) flavor-type where)  (declare (ignore flavor-type where))  nil)(defmethod draggable-view-enters ((self receive-finder-drags-mixin) flavor-type global-mouse-pos)    (declare (ignore flavor-type global-mouse-pos))    nil)(defmethod draggable-view-enters ((view receive-finder-drags-mixin) flavor-type where)  (declare (ignore flavor-type where))  nil)(defmethod draggable-view-leaves ((view receive-finder-drags-mixin) flavor-type where)  (declare (ignore flavor-type where))  nil);-----------------------------------------------------------------------------------------; extended method to assure correct auto-scrolling      (defmethod drag-tracking-in-view :after ((view simple-view))  ;(maybe-do-autoscroll view)  )(defmethod maybe-do-autoscroll ((view simple-view))  (when (and (boundp '*last-real-view*)              *last-real-view*             (wptr *last-real-view*)             (typep *last-real-view* 'autoscrollable-dim)             (not (eq view *last-real-view*)))    (let ((scroll-direction (in-auto-scroll-part *last-real-view* (view-mouse-position nil))))      (when scroll-direction         (do-autoscroll *last-real-view* scroll-direction nil)))))(defmethod drag-tracking-leave-handler :after ((window t))  (declare (ignore window))  (setf *last-real-view* nil));-----------------------------------------------------------------------------------------#|(defclass receive-finder-drags-window (window drag-&-drop-window-mixin)  ())(defclass test-view (view receive-finder-drags-mixin)  ())(defmethod view-draw-contents :after ((view  test-view))  (view-frame view))(defmethod dropped ((view test-view) (path pathname) offset global-where)  (declare (ignore flavor-type offset global-where))  (print (full-pathname path))  t)(defmethod dropped ((view test-view) (str string) offset global-where)  (declare (ignore flavor-type offset global-where))  (print str)  t)(make-instance 'receive-finder-drags-window  :view-subviews (list (make-instance 'test-view                         :view-position #@(10 10)                         :view-size #@(50 50))))|#;--------------------------------------------------------------------------------(defclass fred-receive-finder-drags-mixin (receive-finder-drags-mixin)  ())(defmethod view-drag-hilite :around ((view fred-receive-finder-drags-mixin) hilite &optional arg1 arg2)  (declare (ignore hilite arg1 arg2))  (draw-dummy-cursor view)  (call-next-method)  (draw-dummy-cursor view))(defmethod draggable-dim-is-above :around ((self fred-receive-finder-drags-mixin) (flavor-type (eql :|hfs |)) global-position)  (declare (ignore flavor-type where))  (if (in-text-area self (global-to-view self global-position))    (adjust-dummy-cursor self nil global-position)    (call-next-method)))(defmethod draggable-dim-is-above :around ((self fred-receive-finder-drags-mixin) (flavor-type (eql :|TEXT|)) global-position)  (declare (ignore flavor-type where))  (if (in-text-area self (global-to-view self global-position))    (adjust-dummy-cursor self nil global-position)    (call-next-method)))(defmethod draggable-view-enters :around ((self fred-receive-finder-drags-mixin) (flavor-type (eql :|hfs |)) global-mouse-pos)    (declare (ignore global-mouse-pos flavor-type))    (setf (dummy-cursor-pos self) nil)     (draw-dummy-cursor self)    (call-next-method))(defmethod draggable-view-enters :around ((self fred-receive-finder-drags-mixin) (flavor-type (eql :|TEXT|)) global-mouse-pos)    (declare (ignore global-mouse-pos flavor-type))    (setf (dummy-cursor-pos self) nil)     (draw-dummy-cursor self)    (call-next-method))(defmethod draggable-view-leaves :around ((self fred-receive-finder-drags-mixin) (flavor-type (eql :|hfs |)) global-mouse-pos)    (declare (ignore flavor-type global-mouse-pos))    (draw-dummy-cursor self)    (setf (dummy-cursor-pos self) nil)    (call-next-method))(defmethod draggable-view-leaves :around ((self fred-receive-finder-drags-mixin) (flavor-type (eql :|TEXT|)) global-mouse-pos)    (declare (ignore flavor-type global-mouse-pos))    (draw-dummy-cursor self)    (setf (dummy-cursor-pos self) nil)    (call-next-method))(defmethod dropped ((view fred-receive-finder-drags-mixin) (str string) offset where)  (declare (ignore offset))  (draw-dummy-cursor view)  (setf (dummy-cursor-pos view) nil)  (setf where (global-to-view view where))  (let* ((buff (fred-buffer view)))    (cond ((in-selection view where)           (multiple-value-bind (sel-start sel-end) (selection-range view)             (buffer-delete buff sel-start sel-end)))          (t            (collapse-selection view t)           (set-mark buff (fred-point-position view where))))    (let* ((start (buffer-position buff))           (hpos (fred-hpos view start)))      (when (< hpos 10)        (set-fred-hscroll view (max (+ (fred-hscroll view)  hpos -10) 0)))      (buffer-insert buff str)      (set-selection-range view start (buffer-position buff))))  (fred-update view)  t)(defmethod dropped ((view fred-receive-finder-drags-mixin) (path pathname) offset where)  (declare (ignore offset))  (let* ((buff (fred-buffer view))         (new-pos (min (fred-point-position view (global-to-view view where))                       (buffer-size buff))))    (draw-dummy-cursor view)    (setf (dummy-cursor-pos view) nil)    (collapse-selection view t)    (fred-update view)    (set-mark buff new-pos)    (cond ((directoryp path)           (buffer-insert buff (namestring path) new-pos))          ((string-equal (pathname-type path) "ps")           (buffer-insert buff (namestring path) new-pos))          ((and (probe-file path)                (or (eq (mac-file-type path) :|TEXT|)                    (eq (mac-file-type path) :|ttro|)))           (buffer-insert-file buff path new-pos))          (t (buffer-insert buff (mac-file-type path) new-pos)))    (set-selection-range view new-pos (selection-range view))    (fred-update view)    t));--------------------------------------------------------------------------------(defclass wilma-embedded-fred-di (source-window-embedded-fred-di fred-receive-finder-drags-mixin)   ())(defclass Wilma (drag-&-drop-window-mixin source-window)  ((size-limits :initform (make-record :rect                                       :topleft #@(467 169)                                       :bottomright (make-point *screen-width*                                                                 *screen-height*))                :accessor size-limits                :allocation :class)   (filename :initform nil             :initarg :filename)   (marker-view :initform nil                :accessor marker-view))  (:default-initargs    :view-size (make-point (+ (caadr (find 'oou::window-width                                           (class-class-slots (find-class 'oou::wilma-document))                                           :key #'car))                              2                              46)                           (+ (caadr (find 'oou::window-height                                           (class-class-slots (find-class 'oou::wilma-document))                                           :key #'car))                               34))    :document (make-instance 'wilma-document)    :fred-class 'wilma-scrollable-fred-di));-------------------------------------------------------------------------------(when *global-icon-bar*  (window-close *global-icon-bar*))(pop *suspend-functions*)(defclass global-icon-bar (windoid drag-&-drop-window-mixin)  ((orientation :initform 'horizontal                :initarg :orientation                :accessor orientation))  (:default-initargs    :window-title "Agents"    :window-type :tool    :window-show nil))(defmethod initialize-instance :after ((self global-icon-bar) &rest initargs)  (declare (ignore initargs))  (with-running-watch     (let ((horizontal (eq (orientation self) 'horizontal)))      (set-view-position self (if horizontal                                 (make-point (- *screen-width* 263)                                            42)                                (make-point (- *screen-width* 42) 31)))      (set-view-size self (if horizontal #@(194 50) #@(38 194)))      (add-subviews self                     (make-instance 'wilma-icon-di                      :view-position #@(-1 -1)                      :rsrc-id 177)                    (make-instance 'Fred-icon-di                      :view-position (if horizontal #@(38 -1) #@(-1 38))                      :rsrc-id 178)                    (make-instance 'typeset-icon-di                      :view-position (if horizontal #@(77 -1) #@(-1 77))                      :rsrc-id 180)                                                    (make-instance 'search-file-icon-di                      :view-position (if horizontal #@(116 -1) #@(-1 116))                      :rsrc-id 176)                                                  (make-instance 'kill-ring-icon-di                      :view-position (if horizontal #@(155 -1) #@(-1 155))                      :rsrc-id 179)                    (make-instance 'static-text-dialog-item                      :view-nick-name :docu-line                      :view-size (make-point (- (view-width self) 16)                                             11)                      :view-position (make-point 0                                                  (- (view-height self) 11))                      :view-font '("monaco" 9 :plain)                      :dialog-item-text "")                    )      (setf *global-icon-bar* self)      (window-show self))));------------------------------------------------------------------------------------------(defclass docu-line-icon-di (drop-target-dim icon-di receive-finder-drags-mixin)  ((hilited-part :initform nil                 :accessor hilited-part))  (:default-initargs    :dialog-item-action #'(lambda (icon where)                            (do-the-click icon where))    :view-size #@(40  40)    :rsrc-file "oou:resources stuff"    :draw-outline :simple-frame    :PICT-scaling :center-in-view))(defmethod update-docu-line ((self docu-line-icon-di) new-string dragged-item)  (declare (ignore dragged-item))  (let ((docu-view (current-docu-view self))        (old-string (dialog-item-text (current-docu-view self))))    (when (string/= new-string old-string)      (erase-rect (view-container self) 0 (view-top docu-view)                   (view-right (view-container self))                   (view-bottom docu-view))      (print-documentation-string (current-docu-view self) new-string)      (view-draw-contents (current-docu-view self)))))(defmethod docu-view-hpos-for-draggable ((self docu-line-icon-di) view where)   (declare (ignore view where))   (+ (view-left self) 3))(defmethod adjust-docu-view ((self docu-line-icon-di) flavor-type where)  (let ((new-left (docu-view-hpos-for-draggable self flavor-type where))        (docu-view (current-docu-view self))        (container (view-container self)))    (unless (= new-left (view-left docu-view))      (set-view-position docu-view (make-point new-left (view-bottom self)))      (erase-rect container                   0 (view-top docu-view) (view-left docu-view) (view-bottom container)))))(defmethod draggable-view-enters :around ((self docu-line-icon-di) (flavor-type (eql :|TEXT|)) global-pos)  (adjust-docu-view self flavor-type (global-to-view self global-pos))  (call-next-method)  (update-docu-line self "New" flavor-type))(defmethod draggable-view-enters :around ((self docu-line-icon-di) (flavor-type (eql :|hfs |)) global-pos)  (adjust-docu-view self flavor-type (global-to-view self global-pos))  (call-next-method)  (update-docu-line self "Open" flavor-type))(defmethod draggable-view-leaves :around ((self docu-line-icon-di)  flavor-type global-pos)  (declare (ignore global-pos))  (call-next-method)  (update-docu-line self "" flavor-type))(defmethod dropped :after ((view docu-line-icon-di) item offset global-where)   (declare (ignore item offset global-where))   (update-docu-line view "" nil))(defmethod dropped :around ((view docu-line-icon-di) item offset global-where)   (declare (ignore item  offset global-where))   (with-running-watch     (call-next-method)));----------------------------------------------------------------------------------------(defmethod dropped ((view Wilma-icon-di) (path pathname) offset global-where)   (declare (ignore offset global-where))   (wilma path)   t)(defmethod dropped ((view Wilma-icon-di) (str string) offset global-where)  (declare (ignore  offset global-where))  (let ((editor (Wilma)))    (buffer-insert (fred-buffer editor) str)    (fred-update editor))  t);--------------------------------------------------------------------------------------------(defmethod dropped ((view Fred-icon-di) (path pathname) offset global-where)   (declare (ignore offset global-where))   (with-cursor *watch-cursor*     (window-select       (or (find-if #'(lambda (win)                       (and (slot-value win 'ccl::my-file-name)                            (equal (pathname (slot-value win 'ccl::my-file-name))                                   (pathname path))))                   (windows :class 'fred-window :include-invisibles t))          (make-instance 'fred-window :filename path))))   t)(defmethod dropped ((view Fred-icon-di) (str string) offset global-where)  (declare (ignore  offset global-where))  (let ((editor (make-instance 'fred-window :view-position #@(10 115))))      (buffer-insert (fred-buffer editor) str)      (fred-update editor))  t);-----------------------------------------------------------------------------------------(defmethod draggable-view-enters :around ((self typeset-icon-di) (flavor-type (eql :|TEXT|)) global-pos)  (adjust-docu-view self flavor-type (global-to-view self global-pos))  (call-next-method)  (update-docu-line self "Typeset" flavor-type))(defmethod draggable-view-enters :around ((self typeset-icon-di) (flavor-type (eql :|hfs |)) global-pos)  (adjust-docu-view self flavor-type (global-to-view self global-pos))  (call-next-method)  (update-docu-line self "Typeset" flavor-type))(defmethod dropped ((view typeset-icon-di) (path pathname) offset global-where)   (declare (ignore offset global-where))   (message-dialog "Not implemented." :position :centered)   t)(defmethod dropped ((self typeset-icon-di) (str string) offset where)  (declare (ignore where offset))  (set-MPW-application self)  (if *typeset*    (with-running-watch      (let* ((temp-buffer (temp-buffer self))             (old-project (TeX-Project self)))        (buffer-delete temp-buffer 0 t)        (buffer-insert temp-buffer str)        (set-Project-from-Specs self)        (setf (Current-directory self) (default-TeX-directory))        (copy-layout-file self old-project)        (store-buffer-in-temp-file self temp-buffer)        (launch-MPW self)        (update-TeX-vars self)        (typeset self)))    (floating-message-dialog "The 'MPW Shell' is not selected.Typesetting is not possible.")));---------------------------------------------------------------------------------------------(defclass search-file-icon-di (docu-line-icon-di)   ()   (:default-initargs      :accepted-flavors '(:|TEXT| :|hfs |)))(defmethod draggable-view-enters :around ((self search-file-icon-di) (flavor-type (eql :|hfs |)) global-pos)  (adjust-docu-view self flavor-type (global-to-view self global-pos))  (call-next-method)  (update-docu-line self "Set dir" flavor-type))(defmethod draggable-view-enters :around ((self search-file-icon-di) (flavor-type (eql :|hfs |)) global-pos)  (adjust-docu-view self flavor-type (global-to-view self global-pos))  (call-next-method)  (update-docu-line self "Search" flavor-type))(defmethod dropped ((view search-file-icon-di) (str string) offset global-where)   (declare (ignore offset global-where))   (setf ccl::%previous-search-file-string str)   (ccl::do-dialog-file-search ccl::%previous-search-file-file str)   t)(defmethod dropped ((view search-file-icon-di) (path pathname) offset where)  (declare (ignore offset where))  (when ccl::*search-file-dialog*    (window-close ccl::*search-file-dialog*))  (cond ((directoryp path)         (setf ccl::%previous-search-file-file (format nil "~A:**:*" path)))        ((probe-file path)         (setf ccl::%previous-search-file-file (namestring path))))  (ccl::search-file-dialog));---------------------------------------------------------------------------------------------(defclass kill-ring-icon-di (docu-line-icon-di)   ()   (:default-initargs      :accepted-flavors nil));----------------------------------------------------------------------------------------------(make-tool-bar)