(in-package :oou)(oou-provide :Global-Icon-Bar);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a text editor for LaTeX; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies 'suspend-resume-events)(require :boyer-moore)(export '());--------------------------------------------------------------------------(defclass docu-line-icon-di (drop-target-dim icon-di)   ((hilited-part :initform nil                          :accessor hilited-part))   (:default-initargs     :dialog-item-action #'(lambda (icon where)                                           (do-the-click icon where))     :view-size #@(40  40)     :rsrc-file "oou:resources stuff"     :draw-outline :simple-frame     :PICT-scaling :center-in-view))(defmethod current-docu-view ((self docu-line-icon-di)  &optional where)   (declare (ignore where))    (view-named :docu-line (view-container self)))(defmethod current-docu-string :before ((self docu-line-icon-di) &optional where)    (let ((new-left (current-docu-view-hpos self where))           (docu-view (current-docu-view self))           (container (view-container self)))      (unless (= new-left (view-left docu-view))         (set-view-position docu-view (make-point new-left (view-bottom self)))         (erase-rect container                             0 (view-top docu-view) (view-left docu-view) (view-bottom container)))))(defmethod current-docu-view-hpos ((self docu-line-icon-di) &optional where)   (if (< (point-h where) 20)      (+ (view-left self) 3)      (+ (view-left self) 20)))(defmethod hilite-view ((self docu-line-icon-di) hilite-flag)   (declare (ignore hilite-flag))   nil)(defmethod view-invert ((self docu-line-icon-di))   nil)(defmethod view-cursor :after ((self docu-line-icon-di) where)   (hilite-feedback self where))(defmethod hilite-feedback ((self docu-line-icon-di)                                                 &optional (where (view-mouse-position self))                                                 (style :line)                                                 part)   (if part       (view-splitted-invert self part style)      (if (< (point-h where) 20)         (view-splitted-invert self :left style)         (view-splitted-invert self :right style))))(defmethod draw-rect-in-style ((self docu-line-icon-di) left top right bottom style)   (case style      (:line (with-pen (:NotPatXOr *gray-pattern* 1 1 self)                   (frame-rect self left top right bottom)))      (:fill (with-pen (:NotPatXOr *white-pattern* (- right left) (- bottom top) self)                   (frame-rect self left top right bottom)))))(defmethod view-splitted-invert ((self docu-line-icon-di) part &optional (style :line))   (with-slots (hilited-part) self        (unless (eq part hilited-part)          (case part             (:left (when hilited-part                          (draw-rect-in-style self 20 2 38 38 style))                      (draw-rect-in-style self 2 2 20 38 style)                      (setf hilited-part :left))             (:right (when hilited-part                            (draw-rect-in-style self 2 2 20 38 style))                        (draw-rect-in-style self 20 2 38 38 style)                        (setf hilited-part :right))             (:full (unless hilited-part                             (draw-rect-in-style self 2 2 38 38 style))                      (setf hilited-part :full)                      )))))(defmethod reset-hilited-part ((self docu-line-icon-di) &optional (style :line))   (let ((last-hilited-part (hilited-part self)))      (setf (hilited-part self) nil)      (view-splitted-invert self last-hilited-part style)      (setf (hilited-part self) nil)))(defmethod view-mouse-leave-event-handler :after ((self docu-line-icon-di))   (reset-hilited-part self :line))(defmethod view-mouse-enter-event-handler :after ((self docu-line-icon-di))   (setf (hilited-part self) nil)   (hilite-feedback self))(defmethod view-draw-contents :after ((self docu-line-icon-di))   (view-splitted-invert self (hilited-part self)))(defmethod view-click-event-handler :around ((self docu-line-icon-di) where)    (reset-hilited-part self :line)   (hilite-feedback self (container-to-view self where) :fill)   (catch-cancel (call-next-method))   (reset-hilited-part self :fill))(defmethod in-click-loop ((self docu-line-icon-di) where)   (let ((string-to-print (current-docu-string self where))           (printed-string (dialog-item-text (current-docu-view self))))      (unless (string= string-to-print printed-string)         (print-documentation-string (current-docu-view self) string-to-print)         (view-draw-contents (current-docu-view self)))))(defmethod in-click-loop :after ((self docu-line-icon-di) where)    (if (view-contains-point-p self (view-to-container self where))         (hilite-feedback self where :fill)         (reset-hilited-part self :fill)))(defmethod current-docu-string ((self docu-line-icon-di) &optional where)   (let ((h-pos (point-h where))           (v-pos (point-v where)))      (cond ((or (> v-pos 39)                      (< v-pos 0))                 "")                ((and (> h-pos -1)                         (< h-pos 20))                  "OpenÉ")                ((and (> h-pos 20)                         (< h-pos 40))                  "New")                (t                   ""))))(defmethod adjust-docu-view ((self docu-line-icon-di) (view draggable-dim) where)   (let ((new-left (docu-view-hpos-for-draggable self view where))           (docu-view (current-docu-view self))           (container (view-container self)))      (unless (= new-left (view-left docu-view))         (set-view-position docu-view (make-point new-left (view-bottom self)))         (erase-rect container                             0 (view-top docu-view) (view-left docu-view) (view-bottom container)))))(defmethod docu-view-hpos-for-draggable ((self docu-line-icon-di) (view draggable-dim) where)   (declare (ignore where))   (+ (view-left self) 3))(defmethod draggable-view-enters :after ((self docu-line-icon-di) (view draggable-dim) global-pos)   (declare (ignore global-pos))   (update-docu-line self "" view))(defmethod draggable-view-leaves :after ((self docu-line-icon-di) (view draggable-dim) global-pos)   (declare (ignore global-pos))    (update-docu-line self "" view)   (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self docu-line-icon-di) (view draggable-dim) global-pos)   (adjust-docu-view self view (global-to-view self global-pos)))(defmethod icon-action ((self docu-line-icon-di) where)   (funcall (dialog-item-action-function self) self where))(defmethod update-docu-line ((self docu-line-icon-di) new-string (draggable-view draggable-dim))   (let ((docu-view (current-docu-view self))           (old-string (dialog-item-text (current-docu-view self))))      (when (and (or (null (current-target draggable-view))                              (and (null (last-target draggable-view))                                      (current-target draggable-view)))                        (boundp '*current-rects*))          (frame-current-rects draggable-view))      (when (or (string/= new-string old-string)                      (neq (current-target draggable-view)                              (last-target draggable-view)))          (erase-rect (view-container self) 0 (view-top docu-view)                             (view-right (view-container self))                             (view-bottom docu-view))          (print-documentation-string (current-docu-view self) new-string)          (view-draw-contents (current-docu-view self)))      (when (and (or (null (current-target draggable-view))                              (and (null (last-target draggable-view))                                      (current-target draggable-view)                                      (eq (last-real-target draggable-view)                                              (current-target draggable-view))))                        (boundp '*current-rects*))          (frame-current-rects draggable-view))))  ;----------------------------------------------------------------------------(defclass wilma-icon-di (docu-line-icon-di)   ())(defmethod droppable-p ((self Wilma) (target wilma-icon-di))   t)(defmethod do-the-click ((self Wilma-icon-di) where)   (if (< (point-h where) 20)      (oou::wilma (choose-file-dialog))      (oou::wilma)))(defmethod dropped ((self wilma-icon-di) (wilma-win wilma) offset where)   (declare (ignore  offset))   (if (< (point-h (global-to-view self where)) 20)      (window-save wilma-win)      (save-as (document wilma-win))))(defmethod docu-view-hpos-for-draggable ((self wilma-icon-di) (view Wilma) where)   (if (< (point-h where) 20)      (+ (view-left self) 3)      (+ (view-left self) 20)))(defmethod draggable-dim-is-above :after ((self wilma-icon-di) (Wilma Wilma) global-pos)   (let* ((local-pos (global-to-view self global-pos))             (string-to-print (if (< (point-h local-pos) 20)                                          "SaveÉ"                                          "Save AsÉ")))      (update-docu-line self string-to-print Wilma)))(defmethod droppable-p ((self drag-and-drop-buffer) (target wilma-icon-di))   t)(defmethod dropped ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) offset where)   (declare (ignore where offset))   (let ((wilma-editor (Wilma))           (string (let ((fred (source-fred copy-buffer)))                          (multiple-value-bind (start-sel end-sel) (selection-range fred)                              (buffer-substring (fred-buffer fred) start-sel end-sel)))))      (buffer-insert (fred-buffer wilma-editor) string)      (fred-update wilma-editor)))(defmethod draggable-dim-is-above :after ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))   (update-docu-line self "New" copy-buffer))(defmethod draggable-view-enters :before ((self wilma-icon-di) (view wilma) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill))(defmethod draggable-view-leaves :before ((self wilma-icon-di) (view wilma) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self wilma-icon-di) (view wilma) global-pos)   (hilite-feedback self (global-to-view self global-pos) :fill))  (defmethod draggable-view-enters :before ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod draggable-view-leaves :before ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (hilite-feedback self (global-to-view self global-pos) :fill :full));------------------------------------------------------------------------(defclass Fred-icon-di (docu-line-icon-di)   ())(defmethod do-the-click ((self Fred-icon-di) where)   (if (< (point-h where) 20)      (make-instance 'fred-window :filename (choose-file-dialog))      (make-instance 'fred-window)))(defmethod droppable-p ((self Fred-window) (target Fred-icon-di))   t)(defmethod dropped ((self Fred-icon-di) (Fred-win Fred-window) offset where)   (declare (ignore  offset))   (if (< (point-h (global-to-view self where)) 20)      (Window-save Fred-win)      (Window-save-as Fred-win)))(defmethod draggable-dim-is-above :after ((self Fred-icon-di)  (Fred Fred-window) global-pos)   (let* ((local-pos (global-to-view self global-pos))             (string-to-print (if (< (point-h local-pos) 20)                                          "SaveÉ"                                          "Save AsÉ")))      (update-docu-line self string-to-print Fred)))(defmethod droppable-p ((self drag-and-drop-buffer) (target Fred-icon-di))   t)(defmethod dropped ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) offset where)   (declare (ignore where offset))   (let ((editor (make-instance 'fred-window))           (string (let ((fred (source-fred copy-buffer)))                          (multiple-value-bind (start-sel end-sel) (selection-range fred)                              (buffer-substring (fred-buffer fred) start-sel end-sel)))))      (buffer-insert (fred-buffer editor) string)      (fred-update editor)))(defmethod draggable-dim-is-above :after ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))   (update-docu-line self "New" copy-buffer))(defmethod draggable-view-enters :before ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod draggable-view-leaves :before ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (hilite-feedback self (global-to-view self global-pos) :fill :full));-----------------------------------------------------------------------(defclass typeset-icon-di (docu-line-icon-di)   ())(defmethod view-cursor :after ((self typeset-icon-di) where)   (declare (ignore where))   nil)(defmethod hilite-feedback ((self typeset-icon-di) &optional where (style :line) part)   (declare (ignore where part))   (view-splitted-invert self :full style))(defmethod do-the-click ((self typeset-icon-di) where)   (declare (ignore where))   (menubar-show)   (ccl::select-LaTex))(defmethod current-docu-view-hpos ((self typeset-icon-di) &optional where)   (declare (ignore where))   (+ (view-left self) 3))(defmethod current-docu-string ((self typeset-icon-di) &optional where)   (let* ((h-pos (point-h where)))      (cond ((or (> (point-v where) 39)                      (< (point-v where) 0))                 "")                ((and (> h-pos -1)                         (< h-pos 40))                  "Start LaTeX")                (t                   ""))))(defmethod droppable-p ((self Wilma) (target typeset-icon-di))   t)(defmethod dropped  ((self typeset-icon-di) (wilma-win wilma) offset where)   (declare (ignore where offset))    (when (window-needs-saving-p (real-fred (fred-window Wilma-win)))       (window-save Wilma-win))   (menubar-show)   (ccl::select-LaTex))(defmethod draggable-dim-is-above :after ((self typeset-icon-di) (wilma-win wilma) global-pos)   (declare (ignore global-pos))   (update-docu-line self "Typeset" wilma-win))(defmethod draggable-view-enters :before ((self typeset-icon-di) (view wilma) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod draggable-view-leaves :before ((self typeset-icon-di) (view wilma) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self typeset-icon-di) (view wilma) global-pos)   (hilite-feedback self (global-to-view self global-pos) :fill :full))  ;------------------------------------------------------------------------(setf ccl::%previous-search-file-file "Dieter's HD:Texte:Diss:**:*.tex")(defclass search-file-icon-di (docu-line-icon-di)   ())(defmethod view-cursor :after ((self search-file-icon-di) where)   (declare (ignore where))   nil)(defmethod current-docu-view-hpos ((self search-file-icon-di) &optional where)   (declare (ignore where))   (+ (view-left self) 3))(defmethod hilite-feedback ((self search-file-icon-di) &optional where (style :line) part)   (declare (ignore where part))   (view-splitted-invert self :full style))(defmethod do-the-click ((self search-file-icon-di) where)   (declare (ignore where))   (ccl::search-file-dialog))(defmethod current-docu-string ((self search-file-icon-di) &optional where)   (let* ((h-pos (point-h where)))      (cond ((or (> (point-v where) 39)                      (< (point-v where) 0))                 "")                ((and (> h-pos -1)                         (< h-pos 40))                  "Search FilesÉ")                (t                   ""))))(defmethod droppable-p ((self drag-and-drop-buffer) (target search-file-icon-di))   t)(defmethod dropped ((self search-file-icon-di) (copy-buffer drag-and-drop-buffer) offset where)   (declare (ignore where offset))   (let ((string (let ((fred (source-fred copy-buffer)))                          (multiple-value-bind (start-sel end-sel) (selection-range fred)                              (buffer-substring (fred-buffer fred) start-sel end-sel)))))      (setf ccl::%previous-search-file-string string)      (ccl::do-dialog-file-search ccl::%previous-search-file-file string)))(defmethod draggable-dim-is-above :after ((self search-file-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))   (let* ((search-string (let ((fred (source-fred copy-buffer)))                                      (multiple-value-bind (start-sel end-sel) (selection-range fred)                                          (buffer-substring (fred-buffer fred) start-sel end-sel))))           (string-to-print (format nil "Search '~A'" search-string)))      (update-docu-line self string-to-print copy-buffer)))(defmethod draggable-view-enters :before ((self search-file-icon-di) (view drag-and-drop-buffer) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod draggable-view-leaves :before ((self search-file-icon-di) (view drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self search-file-icon-di) (view drag-and-drop-buffer) global-pos)  (hilite-feedback self (global-to-view self global-pos) :fill :full));-----------------------------------------------------------------------(defclass kill-ring-icon-di (docu-line-icon-di)   ())(defmethod do-the-click ((self kill-ring-icon-di) where) (declare (ignore where)) (show-kill-ring-window))(defmethod view-cursor :after ((self kill-ring-icon-di) where)   (declare (ignore where))   nil)(defmethod hilite-feedback ((self kill-ring-icon-di) &optional where (style :line) part)   (declare (ignore where part))   (view-splitted-invert self :full style))(defmethod current-docu-string ((self kill-ring-icon-di) &optional where)   (declare (ignore where))   "")(defmethod in-click-loop ((self kill-ring-icon-di) where)   (declare (ignore where))   nil);------------------------------------------------------------------------(defclass global-icon-bar (windoid)   ((orientation :initform 'horizontal                        :initarg :orientation                        :accessor orientation))   (:default-initargs     :window-show nil))(defmethod initialize-instance :after ((self global-icon-bar) &rest initargs)   (declare (ignore initargs))   (with-running-watch        (let ((horizontal (eq (orientation self) 'horizontal)))          (set-view-position self (if horizontal                                                    (make-point (- *screen-width* 198)                                                                       12)                                                   (make-point (- *screen-width* 42) 31)))          (set-view-size self (if horizontal #@(194 50) #@(38 194)))          (add-subviews self                                   (make-instance 'wilma-icon-di                                      :view-position #@(-1 -1)                                      :rsrc-id 177)                                  (make-instance 'Fred-icon-di                                      :view-position (if horizontal #@(38 -1) #@(-1 38))                                      :rsrc-id 178)                                  (make-instance 'typeset-icon-di                                      :view-position (if horizontal #@(77 -1) #@(-1 77))                                      :rsrc-id 180)                                                                  (make-instance 'search-file-icon-di                                      :view-position (if horizontal #@(116 -1) #@(-1 116))                                      :rsrc-id 176)                                                                (make-instance 'kill-ring-icon-di                                      :view-position (if horizontal #@(155 -1) #@(-1 155))                                      :rsrc-id 179)                                  (make-instance 'static-text-dialog-item                                      :view-nick-name :docu-line                                      :view-size (make-point (- (view-width self) 16)                                                                               11)                                      :view-position (make-point 0                                                                                   (- (view-height self) 11))                                      :view-font '("monaco" 9 :plain)                                      :dialog-item-text "")                                      )          (setf *global-icon-bar* self)          (window-show self))))(defmethod window-close :after ((self global-icon-bar))   (setf *global-icon-bar* nil)   (mapcar #'(lambda (wilma)                      (global-tool-bar-closed Wilma))                 (windows :class 'wilma)))(defun make-tool-bar (&optional (orientation 'horizontal))   ;vertical   (make-instance 'global-icon-bar       :orientation orientation));----------------------------------------------------------------------(defun show-global-icon-bar ()   (when *global-icon-bar*       (eval-enqueue '(progn                                   (window-show *global-icon-bar*)                                  (view-activate-event-handler *global-icon-bar*)))))(defun hide-global-icon-bar ()   (when *global-icon-bar*       (window-hide *global-icon-bar*)))(push #'menubar-show *suspend-functions*);(push #'menubar-resume *resume-functions*)(push #'show-global-icon-bar *resume-functions*)(push #'hide-global-icon-bar *suspend-functions*);(pop *resume-functions*);(pop *suspend-functions*);------------------------------------------------------------------------