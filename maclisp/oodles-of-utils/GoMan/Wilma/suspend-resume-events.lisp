(in-package :oou)(oou-provide :suspend-resume-events);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Lynch;; send events when mcl is suspended / resumed; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(defparameter *suspend-functions* ()  "A list of functions that will be called when the Application isplaced in the background.")(defparameter *resume-functions* ()  "A list of functions that will be called when the Application isbrought back into the foreground.")(defmethod suspend-event-handler ((arg null))  "argCalls each function in *suspend-functions*.Any specialization should be sure to call-next-method."  (declare (ignore arg))  (mapc #'funcall *suspend-functions*))(defmethod resume-event-handler ((arg null))  "argCalls each function in *resume-functions*.Any specialization should be sure to call-next-method."  (declare (ignore arg))  (mapc #'funcall *resume-functions*))(defun my-event-hook ()  "Checks if *current-event* is a suspend or resume.If so, calls suspend-event-handler or resume-event-handler.Returns NIL."  (when (boundp '*current-event*)     (let ((what (rref *current-event* :EventRecord.What))          (message (rref *current-event* :EventRecord.Message))          )      (cond       ((= what #$App4Evt)        (cond         ((= message 16777218) (suspend-event-handler nil))         ((= message 16777217) (resume-event-handler nil))         )        )       )      nil      )))(setq *eventhook* #'my-event-hook)#|(defun elvis ()  (print "Elvis has left the building.")  (ed-beep))(defun pheonix ()  (print "We're Back.")  (ed-beep)  (ed-beep))(push #'elvis *suspend-functions*)(push #'pheonix *resume-functions*);(setq *eventhook* nil)|#