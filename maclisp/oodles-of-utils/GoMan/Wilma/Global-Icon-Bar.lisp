(in-package :oou)(oou-provide :Global-Icon-Bar);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a text editor for LaTeX; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :suspend-resume-events                              :AppleScript-loader)(require :boyer-moore)(export '());----------------------------------------------------------------------------(defvar *launch-MPW* nil)(defvar *typeset* nil)                (defun send-dosc-to-MPW (command-string)  (with-aedescs (appleevent reply target)    (ccl::create-signature-target target :MPS\ )    (create-dosc appleevent target command-string)    (send-appleevent appleevent reply :reply-mode :no-reply)))#|(as::compile-applescript *typeset*)(as::execute-applescript *launch-MPW*)|#;--------------------------------------------------------------------------(defclass docu-line-icon-di (drop-target-dim icon-di)   ((hilited-part :initform nil                          :accessor hilited-part))   (:default-initargs     :dialog-item-action #'(lambda (icon where)                                           (do-the-click icon where))     :view-size #@(40  40)     :rsrc-file "oou:resources stuff"     :draw-outline :simple-frame     :PICT-scaling :center-in-view))(defmethod current-docu-view ((self docu-line-icon-di)  &optional where)   (declare (ignore where))    (view-named :docu-line (view-container self)))(defmethod current-docu-string :before ((self docu-line-icon-di) &optional where)    (let ((new-left (current-docu-view-hpos self where))           (docu-view (current-docu-view self))           (container (view-container self)))      (unless (= new-left (view-left docu-view))         (set-view-position docu-view (make-point new-left (view-bottom self)))         (erase-rect container                             0 (view-top docu-view) (view-left docu-view) (view-bottom container)))))(defmethod current-docu-view-hpos ((self docu-line-icon-di) &optional where)   (if (< (point-h where) 20)      (+ (view-left self) 3)      (+ (view-left self) 20)))(defmethod hilite-view ((self docu-line-icon-di) hilite-flag)   (declare (ignore hilite-flag))   nil)(defmethod view-invert ((self docu-line-icon-di))   nil)(defmethod view-cursor :after ((self docu-line-icon-di) where)   (hilite-feedback self where))(defmethod hilite-feedback ((self docu-line-icon-di)                                                 &optional (where (view-mouse-position self))                                                 (style :line)                                                 part)   (if part       (view-splitted-invert self part style)      (if (< (point-h where) 20)         (view-splitted-invert self :left style)         (view-splitted-invert self :right style))))(defmethod draw-rect-in-style ((self docu-line-icon-di) left top right bottom style)   (case style      (:line (with-pen (:NotPatXOr *gray-pattern* 1 1 self)                   (frame-rect self left top right bottom)))      (:fill (with-pen (:NotPatXOr *white-pattern* (- right left) (- bottom top) self)                   (frame-rect self left top right bottom)))))(defmethod view-splitted-invert ((self docu-line-icon-di) part &optional (style :line))   (with-slots (hilited-part) self        (unless (eq part hilited-part)          (case part             (:left (when hilited-part                          (draw-rect-in-style self 20 2 38 38 style))                      (draw-rect-in-style self 2 2 20 38 style)                      (setf hilited-part :left))             (:right (when hilited-part                            (draw-rect-in-style self 2 2 20 38 style))                        (draw-rect-in-style self 20 2 38 38 style)                        (setf hilited-part :right))             (:full (unless hilited-part                             (draw-rect-in-style self 2 2 38 38 style))                      (setf hilited-part :full)                      )))))(defmethod reset-hilited-part ((self docu-line-icon-di) &optional (style :line))   (let ((last-hilited-part (hilited-part self)))      (setf (hilited-part self) nil)      (view-splitted-invert self last-hilited-part style)      (setf (hilited-part self) nil)))(defmethod view-mouse-leave-event-handler :after ((self docu-line-icon-di))   (reset-hilited-part self :line))(defmethod view-mouse-enter-event-handler :after ((self docu-line-icon-di))   (setf (hilited-part self) nil)   (hilite-feedback self))(defmethod view-draw-contents :after ((self docu-line-icon-di))   (view-splitted-invert self (hilited-part self)))(defmethod view-click-event-handler :around ((self docu-line-icon-di) where)    (reset-hilited-part self :line)   (hilite-feedback self (container-to-view self where) :fill)   (catch-cancel (call-next-method))   (reset-hilited-part self :fill))(defmethod in-click-loop ((self docu-line-icon-di) where)   (let ((string-to-print (current-docu-string self where))           (printed-string (dialog-item-text (current-docu-view self))))      (unless (string= string-to-print printed-string)         (print-documentation-string (current-docu-view self) string-to-print)         (view-draw-contents (current-docu-view self)))))(defmethod in-click-loop :after ((self docu-line-icon-di) where)    (if (view-contains-point-p self (view-to-container self where))         (hilite-feedback self where :fill)         (reset-hilited-part self :fill)))(defmethod current-docu-string ((self docu-line-icon-di) &optional where)   (let ((h-pos (point-h where))           (v-pos (point-v where)))      (cond ((or (> v-pos 39)                      (< v-pos 0))                 "")                ((and (> h-pos -1)                         (< h-pos 20))                  "OpenÉ")                ((and (> h-pos 20)                         (< h-pos 40))                  "New")                (t                   ""))))(defmethod adjust-docu-view ((self docu-line-icon-di) (view draggable-dim) where)   (let ((new-left (docu-view-hpos-for-draggable self view where))           (docu-view (current-docu-view self))           (container (view-container self)))      (unless (= new-left (view-left docu-view))         (set-view-position docu-view (make-point new-left (view-bottom self)))         (erase-rect container                             0 (view-top docu-view) (view-left docu-view) (view-bottom container)))))(defmethod docu-view-hpos-for-draggable ((self docu-line-icon-di) (view draggable-dim) where)   (declare (ignore where))   (+ (view-left self) 3))(defmethod draggable-view-enters :after ((self docu-line-icon-di) (view draggable-dim) global-pos)   (declare (ignore global-pos))   (update-docu-line self "" view))(defmethod draggable-view-leaves :after ((self docu-line-icon-di) (view draggable-dim) global-pos)   (declare (ignore global-pos))    (update-docu-line self "" view)   (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self docu-line-icon-di) (view draggable-dim) global-pos)   (adjust-docu-view self view (global-to-view self global-pos)))(defmethod icon-action ((self docu-line-icon-di) where)   (funcall (dialog-item-action-function self) self where))(defmethod update-docu-line ((self docu-line-icon-di) new-string (draggable-view draggable-dim))   (let ((docu-view (current-docu-view self))           (old-string (dialog-item-text (current-docu-view self))))      (when (and (or (null (current-target draggable-view))                              (and (null (last-target draggable-view))                                      (current-target draggable-view)))                        (boundp '*current-rects*))          (frame-current-rects draggable-view))      (when (or (string/= new-string old-string)                      (neq (current-target draggable-view)                              (last-target draggable-view)))          (erase-rect (view-container self) 0 (view-top docu-view)                             (view-right (view-container self))                             (view-bottom docu-view))          (print-documentation-string (current-docu-view self) new-string)          (view-draw-contents (current-docu-view self)))      (when (and (or (null (current-target draggable-view))                              (and (null (last-target draggable-view))                                      (current-target draggable-view)                                      (eq (last-real-target draggable-view)                                              (current-target draggable-view))))                        (boundp '*current-rects*))          (frame-current-rects draggable-view))))  ;----------------------------------------------------------------------------(defclass wilma-icon-di (docu-line-icon-di)   ())(defmethod droppable-p ((self Wilma) (target wilma-icon-di))   t)(defmethod do-the-click ((self Wilma-icon-di) where)   (if (< (point-h where) 20)      (oou::wilma (choose-file-dialog))      (oou::wilma)))(defmethod dropped ((self wilma-icon-di) (wilma-win wilma) offset where)   (declare (ignore  offset))   (if (< (point-h (global-to-view self where)) 20)      (window-save wilma-win)      (save-as (document wilma-win))))(defmethod docu-view-hpos-for-draggable ((self wilma-icon-di) (view Wilma) where)   (if (< (point-h where) 20)      (+ (view-left self) 3)      (+ (view-left self) 20)))(defmethod draggable-dim-is-above :after ((self wilma-icon-di) (Wilma Wilma) global-pos)   (let* ((local-pos (global-to-view self global-pos))             (string-to-print (if (< (point-h local-pos) 20)                                          "SaveÉ"                                          "Save AsÉ")))      (update-docu-line self string-to-print Wilma)))(defmethod droppable-p ((self drag-and-drop-buffer) (target wilma-icon-di))   t)(defmethod dropped ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) offset where)   (declare (ignore where offset))   (let ((wilma-editor (Wilma))           (string (let ((fred (source-fred copy-buffer)))                          (multiple-value-bind (start-sel end-sel) (selection-range fred)                              (buffer-substring (fred-buffer fred) start-sel end-sel)))))      (buffer-insert (fred-buffer wilma-editor) string)      (fred-update wilma-editor)))(defmethod draggable-dim-is-above :after ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))   (update-docu-line self "New" copy-buffer))(defmethod draggable-view-enters :before ((self wilma-icon-di) (view wilma) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill))(defmethod draggable-view-leaves :before ((self wilma-icon-di) (view wilma) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self wilma-icon-di) (view wilma) global-pos)   (hilite-feedback self (global-to-view self global-pos) :fill))  (defmethod draggable-view-enters :before ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod draggable-view-leaves :before ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self wilma-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (hilite-feedback self (global-to-view self global-pos) :fill :full));------------------------------------------------------------------------(defclass Fred-icon-di (docu-line-icon-di)   ())(defmethod do-the-click ((self Fred-icon-di) where)   (if (< (point-h where) 20)      (make-instance 'fred-window :filename (choose-file-dialog) :view-position #@(10 115))      (make-instance 'fred-window :view-position #@(10 115))))(defmethod droppable-p ((self Fred-window) (target Fred-icon-di))   t)(defmethod dropped ((self Fred-icon-di) (Fred-win Fred-window) offset where)   (declare (ignore  offset))   (if (< (point-h (global-to-view self where)) 20)      (Window-save Fred-win)      (Window-save-as Fred-win)))(defmethod draggable-dim-is-above :after ((self Fred-icon-di)  (Fred Fred-window) global-pos)   (let* ((local-pos (global-to-view self global-pos))             (string-to-print (if (< (point-h local-pos) 20)                                          "SaveÉ"                                          "Save AsÉ")))      (update-docu-line self string-to-print Fred)))(defmethod droppable-p ((self drag-and-drop-buffer) (target Fred-icon-di))   t)(defmethod dropped ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) offset where)   (declare (ignore where offset))   (let ((editor (make-instance 'fred-window))           (string (let ((fred (source-fred copy-buffer)))                          (multiple-value-bind (start-sel end-sel) (selection-range fred)                              (buffer-substring (fred-buffer fred) start-sel end-sel)))))      (buffer-insert (fred-buffer editor) string)      (fred-update editor)))(defmethod draggable-dim-is-above :after ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))   (update-docu-line self "New" copy-buffer))(defmethod draggable-view-enters :before ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod draggable-view-leaves :before ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self Fred-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (hilite-feedback self (global-to-view self global-pos) :fill :full));-----------------------------------------------------------------------(defclass typeset-icon-di (docu-line-icon-di)  ((TeX-Directory :initform (default-TeX-directory)                  :accessor TeX-Directory)   (TeX-Project :initform nil                :accessor TeX-Project)   (Current-Directory :initform (default-TeX-directory)                      :accessor Current-Directory)   (typesetting-specification :initform nil                              :accessor typesetting-specification                              :initarg :typesetting-specification)   (specification-window :initform nil                         :accessor specification-window)   (temp-buffer :initform (make-buffer)                :accessor temp-buffer)))(defmethod initialize-instance :after ((self typeset-icon-di) &rest initargs)  (declare (ignore initargs))  (let ((layout-specs-from-file (get-layout-specification-from-file self)))    (setf (typesetting-specification self)          (or layout-specs-from-file              (list (list* :Style :Paper)                    (list* :Columns 2)                    (list* :Size 11)                    (list* :Language :German))))))(defmethod view-cursor :after ((self typeset-icon-di) where)   (declare (ignore where))   nil)(defmethod hilite-feedback ((self typeset-icon-di) &optional where (style :line) part)   (declare (ignore where part))   (view-splitted-invert self :full style))(defmethod do-the-click ((self typeset-icon-di) where)   (declare (ignore where))   (let ((win (or (specification-window self)                  (make-instance 'typesetting-specification-window                     :typesetter self                    :window-show nil))))     (explode (view-to-global self #@(0 0)) (view-to-global self (view-size self))              (view-to-global win #@(0 0)) (view-to-global win (view-size win)))     (window-select win)))(defmethod current-docu-view-hpos ((self typeset-icon-di) &optional where)   (declare (ignore where))   (+ (view-left self) 3))(defmethod current-docu-string ((self typeset-icon-di) &optional where)  (let* ((h-pos (point-h where)))    (cond ((or (> (point-v where) 39)               (< (point-v where) 0))           "")          ((and (> h-pos -1)                (< h-pos 40))           "Layout spec.")          (t            ""))))(defmethod droppable-p ((self Wilma) (target typeset-icon-di))   t)(defmethod draggable-dim-is-above :after ((self typeset-icon-di) (wilma-win wilma) global-pos)   (declare (ignore global-pos))   (update-docu-line self "Typeset" wilma-win))(defmethod draggable-view-enters :before ((self typeset-icon-di) (view wilma) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod draggable-view-leaves :before ((self typeset-icon-di) (view wilma) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self typeset-icon-di) (view wilma) global-pos)   (hilite-feedback self (global-to-view self global-pos) :fill :full))  (defmethod droppable-p ((self drag-and-drop-buffer) (target typeset-icon-di))   t)(defmethod draggable-dim-is-above :after ((self typeset-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))   (update-docu-line self "Typeset" copy-buffer))(defmethod draggable-view-enters :before ((self typeset-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod draggable-view-leaves :before ((self typeset-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self typeset-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod dropped  ((self typeset-icon-di) (wilma-win wilma) offset where)  (declare (ignore where offset))   (set-MPW-application self)  (if *typeset*    (with-running-watch      (let ((old-project (TeX-Project self)))        (set-Project-from-Specs self)        (set-Current-Directory self wilma-win)        (copy-layout-file self old-project)        (store-buffer-in-temp-file self wilma-win)        (launch-MPW self)        (update-TeX-vars self)        (typeset self)))    (floating-message-dialog "The 'MPW Shell' is not selected.Typesetting is not possible.")))(defmethod dropped ((self typeset-icon-di) (copy-buffer drag-and-drop-buffer) offset where)  (declare (ignore where offset))  (set-MPW-application self)  (if *typeset*    (with-running-watch      (let* ((fred (source-fred copy-buffer))             (string (multiple-value-bind (start-sel end-sel) (selection-range fred)                       (buffer-substring (fred-buffer fred) start-sel end-sel)))             (temp-buffer (temp-buffer self))             (old-project (TeX-Project self)))        (buffer-delete temp-buffer 0 t)        (buffer-insert temp-buffer string)        (set-Project-from-Specs self)        (set-Current-Directory self fred)        (copy-layout-file self old-project)        (store-buffer-in-temp-file self temp-buffer)        (launch-MPW self)        (update-TeX-vars self)        (typeset self)))    (floating-message-dialog "The 'MPW Shell' is not selected.Typesetting is not possible.")))(defmethod set-Project-from-Specs ((self typeset-icon-di))  (with-slots (typesetting-specification) self    (setf (TeX-Project self)          (if (eq (cdr (assoc :Style typesetting-specification)) :Paper)            (format nil                    "~A-~A-~A-~A"                    (cdr (assoc :Style typesetting-specification))                    (cdr (assoc :Size typesetting-specification))                    (cdr (assoc :Language typesetting-specification))                    (cdr (assoc :Columns typesetting-specification)))            (format nil                    "~A-~A-~A"                    (cdr (assoc :Style typesetting-specification))                    (cdr (assoc :Size typesetting-specification))                    (cdr (assoc :Language typesetting-specification)))))))(defmethod set-current-directory ((self typeset-icon-di) (wilma-win wilma))  (set-current-directory self (real-fred (fred-window wilma-win))))(defmethod set-current-directory ((self typeset-icon-di) (real-fred fred-mixin))  (let* ((path (full-pathname (slot-value real-fred 'ccl::my-file-name)))         (directory (cond ((null path) (TeX-directory self))                          ((or (search "Paper" (TeX-Project self) :test #'string-equal)                               (search "Letter" (TeX-Project self) :test #'string-equal))                           (format nil "~A" (directory-namestring path)))                          ((search "Book" (TeX-Project self) :test #'string-equal)                           (format nil "~{~A:~}"                                    (butlast (cdr (pathname-directory path))))))))    (setf (Current-directory self) directory)))(defmethod copy-layout-file ((self typeset-icon-di) old-project)  (let ((dest-layout-file (format nil "~ATeX-Layout.tex"                                  (Current-Directory self)))        (source-layout-file (format nil "~A~A.tex"                                    (TeX-Directory self)                                    (TeX-Project self))))    (when (or (not (string-equal (TeX-Project self) old-project))              (null (probe-file dest-layout-file)))      (copy-file source-layout-file dest-layout-file :if-exists :overwrite))))(defmethod store-buffer-in-temp-file ((self typeset-icon-di) (buffer buffer-mark))  (buffer-write-file buffer                     (full-pathname (format nil "~ATeX-Inputs:Temp.tex" (TeX-Directory self)))                     :if-exists :overwrite))(defmethod store-buffer-in-temp-file ((self typeset-icon-di) (real-fred fred-mixin))  (store-buffer-in-temp-file self (fred-buffer real-fred)))(defmethod store-buffer-in-temp-file ((self typeset-icon-di) (wilma-win wilma))  (store-buffer-in-temp-file self (fred-buffer (real-fred (fred-window Wilma-win)))))(defmethod launch-MPW ((self typeset-icon-di))  (unless (ccl::find-process :|MPS |)    (menubar-show)    (as::execute-applescript *launch-MPW*)    (menubar-hide)))(defmethod update-TeX-vars ((self typeset-icon-di))  (send-dosc-to-MPW (format nil "Set TeXDirectory ~S" (Current-Directory self)))  (send-dosc-to-MPW (format nil "Set TeXProject \"TeX-Layout\"")))                           (defmethod typeset ((self typeset-icon-di))  (with-running-watch     ;(hide-global-icon-bar)    (menubar-show)    (as::execute-applescript *typeset*)))(defmethod set-MPW-application  ((self typeset-icon-di))  (declare (ignore initargs))  (unless *typeset*    (let ((MPW (cond ((probe-file "Dieters HD:Applications:MPW Shell:MPW Shell")                      "Dieters HD:Applications:MPW Shell:MPW Shell")                     ((probe-file "Mac HD:Applications:MPW Shell:MPW Shell")                      "Mac HD:Applications:MPW Shell:MPW Shell")                     (t (when (find-application-pathname :|MPS |)                          (namestring (find-application-pathname :|MPS |)))))))      (when MPW        (setf *typeset*               (make-instance 'as::APPLESCRIPT-OBJECT                :script (format nil                                "tell application \"~A\"                                    ignoring application responses                                       activate                                       doscript \"RunSession TeX ³ Dev:Null\"                                    end ignoring                                 end tell"                                MPW)                :application-name :|MPS |                ))        (setf *launch-MPW*              (make-instance 'as::APPLESCRIPT-OBJECT                :script (format nil                                "tell application \"~A\"                                    run                                  end tell"                                MPW)                :application-name :|MPS |))))))(defun default-TeX-directory ()  (cond ((directoryp "Dieters HD:Applications:DirectTeX:")         "Dieters HD:Applications:DirectTeX:")        ((directoryp "Mac HD:Applications:DirectTeX:")         "Mac HD:Applications:DirectTeX:")))(defun find-application-pathname (signature)  (rlet ((pb :dtpbrec)         (iopb :hparamblockrec))    (%stack-block ((name 256))      (setf (rref iopb :hparamblockrec.ioCompletion) (%null-ptr)            (rref iopb :hparamblockrec.ioNamePtr) name)      (loop for volume-index from 1 do            (setf (rref iopb :hparamblockrec.ioVolIndex) volume-index                  (rref iopb :hparamblockrec.ioVRefNum) 0)            (let ((err (#_PBHGetVInfo iopb)))              (unless (zerop err)                (if (= err #$nsvErr)                  (return-from find-application-pathname nil)                  (error "_PBHGetVInfo error #~D" err))))            (setf (rref pb :dtpbrec.ioCompletion) (%null-ptr)                  (rref pb :dtpbrec.ioNamePtr) name                  (rref pb :dtpbrec.ioVRefNum)                  (rref iopb :hparamblockrec.ioVRefNum))            (let ((err (#_PBDTGetPath pb)))              (unless (zerop err)                (unless (= err #$wrgVolTypErr)                  (error "_PBDTGetPath error #~D" err))))            (setf (rref pb :dtpbrec.ioIndex) 0                  (rref pb :dtpbrec.ioFileCreator) signature)            (let ((err (#_PBDTGetAPPL pb)))              (cond ((zerop err)                     (setf (rref iopb :hparamblockrec.ioDirID)                           (rref pb :dtpbrec.ioAPPLParID))                     (return-from find-application-pathname (ccl::%path-from-iopb iopb)))                    ((and (/= err #$afpItemNotFound) (/= err #$fnfErr))                     (error "_PBDTGetAPPL error #~D" err))))))))(defun get-string-rsrc (name-or-number &optional used-file-only? dont-release)  (let ((str (get-resource "STR " name-or-number used-file-only?)))    (when str      (unwind-protect        (%get-string str)        (unless dont-release (#_ReleaseResource str))))))(defmethod get-layout-specification-from-file ((self typeset-icon-di))  (let ((spec-string (without-interrupts                      (unwind-protect                        (with-pstrs ((np (mac-namestring (application-pathname))))                          (#_UseResFile (#_OpenResFile np))                          (get-string-rsrc 200))))))    (when spec-string      (read-from-string spec-string))))(defmethod save-layout-specification ((self typeset-icon-di))  (let ((specification (format nil                                "~S"                               (typesetting-specification self))))    (without-interrupts     (unwind-protect       (with-pstrs ((np (mac-namestring (application-pathname)))                    (spec-ptr specification))         (#_UseResFile (#_OpenResFile np))         (delete-resource "STR " 200 t)         (let* ((handle (#_NewHandle (1+ (length specification)))))           (%put-string handle specification 0)           (add-resource handle "STR " :id 200)           (ccl::write-resource handle)))))));---------------------------------------------------------------------------------------------(defclass typesetting-di-mixin ()  ())(defmethod view-cursor ((self typesetting-di-mixin) point)  (declare (ignore point))  *pointer-hand-cursor*)(defmethod view-click-event-handler :after ((self typesetting-di-mixin) where)  (declare (ignore where))  (update-typesetting-specifications self)  (when (view-window self)    (save-layout-specification (typesetter (view-window self)))))(defmethod update-typesetting-specifications ((self typesetting-di-mixin))  (let* ((win (view-window self))         (specs (typesetting-specification (typesetter win))))    (case (view-nick-name self)      (:Letter (setf (cdr (assoc :Style specs)) :Letter)               (disable-columns win))      (:Book (setf (cdr (assoc :Style specs)) :Book)             (disable-columns win))      (:Paper (setf (cdr (assoc :Style specs)) :Paper)              (enable-columns win))      (:OneColumn (setf (cdr (assoc :Columns specs)) 1))      (:TwoColumn (setf (cdr (assoc :Columns specs)) 2))      (:10pt (setf (cdr (assoc :Size specs)) 10))      (:11pt (setf (cdr (assoc :Size specs)) 11))      (:12pt (setf (cdr (assoc :Size specs)) 12))      (:English (setf (cdr (assoc :Language specs)) :English))      (:German (setf (cdr (assoc :Language specs)) :German))      (t nil))))(defclass typesetting-rb (typesetting-di-mixin radio-button-dialog-item)  ())(defclass typesetting-specification-window (window)  ((typesetter :initform nil              :initarg :typesetter              :accessor typesetter))  (:default-initargs    :view-size #@(350 120)    :window-title "Typesetting Specifications"    :window-type :tool))(defmethod initialize-instance :after ((self typesetting-specification-window) &rest initargs)  (declare (ignore initargs))  (add-subviews self                (make-instance 'typesetting-rb                  :radio-button-cluster 1                  :dialog-item-text "Letter"                  :view-nick-name :Letter                  :view-position #@(10 10))                (make-instance 'typesetting-rb                  :radio-button-cluster 1                        :dialog-item-text "Book"                  :view-nick-name :Book                  :view-position #@(10 30))                (make-instance 'typesetting-rb                  :radio-button-cluster 1                  :dialog-item-text "Paper"                  :view-nick-name :Paper                  :view-position #@(10 50))                (make-instance 'typesetting-rb                  :radio-button-cluster 2                  :dialog-item-text "One Column"                  :view-nick-name :OneColumn                  :view-position #@(30 70))                (make-instance 'typesetting-rb                  :radio-button-cluster 2                  :dialog-item-text "Two Column"                  :view-nick-name :TwoColumn                  :view-position #@(30 90))                (make-instance 'typesetting-rb                  :radio-button-cluster 3                  :dialog-item-text "10 pt"                  :view-nick-name :10pt                  :view-position #@(160 10))                (make-instance 'typesetting-rb                  :radio-button-cluster 3                  :dialog-item-text "11 pt"                  :view-nick-name :11pt                  :view-position #@(160 30))                (make-instance 'typesetting-rb                  :radio-button-cluster 3                  :dialog-item-text "12 pt"                  :view-nick-name :12pt                  :view-position #@(160 50))                (make-instance 'typesetting-rb                  :radio-button-cluster 4                  :dialog-item-text "english"                  :view-nick-name :english                  :view-position #@(260 10))                (make-instance 'typesetting-rb                  :radio-button-cluster 4                  :dialog-item-text "german"                  :view-nick-name :german                  :view-position #@(260 30))                (make-instance 'unibas-button-dialog-item                  :dialog-item-text "AbbreviationsÉ"                  :view-size #@(120 16)                  :view-position #@(180 70)                  :dialog-item-action #'(lambda (button)                                          (let ((file (format nil                                                               "~ATeX-Inputs:Abbreviations.tex"                                                              (TeX-Directory (typesetter (view-window button))))))                                            (if (probe-file file)                                              (make-instance 'fred-window :filename file)                                              (ed-beep)))))                (make-instance 'unibas-button-dialog-item                  :dialog-item-text "HyphenationÉ"                  :view-size #@(120 16)                  :view-position #@(180 90)                  :dialog-item-action #'(lambda (button)                                          (let ((file (format nil                                                               "~ATeX-Inputs:special-hyphenation.tex"                                                              (TeX-Directory (typesetter (view-window button))))))                                            (if (probe-file file)                                              (make-instance 'fred-window :filename file)                                              (ed-beep))))))  (let ((specs (typesetting-specification (typesetter self))))    (radio-button-push (view-named (cdr (assoc :Style specs)) self))    (case (cdr (assoc :Columns specs))      (1 (radio-button-push (view-named :OneColumn self)))      (2 (radio-button-push (view-named :TwoColumn self))))    (case (cdr (assoc :Size specs))      (10 (radio-button-push (view-named :10pt self)))      (11 (radio-button-push (view-named :11pt self)))      (12 (radio-button-push (view-named :12pt self))))    (radio-button-push (view-named (cdr (assoc :Language specs)) self)))    (setf (specification-window (typesetter self)) self)  )(defmethod window-close ((self typesetting-specification-window))   (window-hide self)  (implode (view-to-global self #@(0 0)) (view-to-global self (view-size self))           (view-to-global (typesetter self) #@(0 0)) (view-to-global (typesetter self) (view-size (typesetter self)))))  (defmethod enable-columns ((self typesetting-specification-window))  (dialog-item-enable (view-named :OneColumn self))  (dialog-item-enable (view-named :TwoColumn self)))(defmethod disable-columns ((self typesetting-specification-window))  (dialog-item-disable (view-named :OneColumn self))  (dialog-item-disable (view-named :TwoColumn self)));------------------------------------------------------------------------(setf ccl::%previous-search-file-file "Dieters HD:Texte:Diss:**:*.tex")(defclass search-file-icon-di (docu-line-icon-di)   ())(defmethod view-cursor :after ((self search-file-icon-di) where)   (declare (ignore where))   nil)(defmethod current-docu-view-hpos ((self search-file-icon-di) &optional where)   (declare (ignore where))   (+ (view-left self) 3))(defmethod hilite-feedback ((self search-file-icon-di) &optional where (style :line) part)   (declare (ignore where part))   (view-splitted-invert self :full style))(defmethod do-the-click ((self search-file-icon-di) where)   (declare (ignore where))   (ccl::search-file-dialog))(defmethod current-docu-string ((self search-file-icon-di) &optional where)   (let* ((h-pos (point-h where)))      (cond ((or (> (point-v where) 39)                      (< (point-v where) 0))                 "")                ((and (> h-pos -1)                         (< h-pos 40))                  "Search FilesÉ")                (t                   ""))))(defmethod droppable-p ((self drag-and-drop-buffer) (target search-file-icon-di))   t)(defmethod dropped ((self search-file-icon-di) (copy-buffer drag-and-drop-buffer) offset where)   (declare (ignore where offset))   (let ((string (let ((fred (source-fred copy-buffer)))                          (multiple-value-bind (start-sel end-sel) (selection-range fred)                              (buffer-substring (fred-buffer fred) start-sel end-sel)))))      (setf ccl::%previous-search-file-string string)      (ccl::do-dialog-file-search ccl::%previous-search-file-file string)))(defmethod draggable-dim-is-above :after ((self search-file-icon-di) (copy-buffer drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))   (let* ((search-string (let ((fred (source-fred copy-buffer)))                                      (multiple-value-bind (start-sel end-sel) (selection-range fred)                                          (buffer-substring (fred-buffer fred) start-sel end-sel))))           (string-to-print (format nil "Search '~A'" search-string)))      (update-docu-line self string-to-print copy-buffer)))(defmethod draggable-view-enters :before ((self search-file-icon-di) (view drag-and-drop-buffer) global-pos)   (setf (hilited-part self) nil)   (hilite-feedback self (global-to-view self global-pos) :fill :full))(defmethod draggable-view-leaves :before ((self search-file-icon-di) (view drag-and-drop-buffer) global-pos)   (declare (ignore global-pos))    (reset-hilited-part self :fill))(defmethod draggable-dim-is-above :before ((self search-file-icon-di) (view drag-and-drop-buffer) global-pos)  (hilite-feedback self (global-to-view self global-pos) :fill :full));-----------------------------------------------------------------------(defclass kill-ring-icon-di (docu-line-icon-di)   ())(defmethod do-the-click ((self kill-ring-icon-di) where) (declare (ignore where)) (show-kill-ring-window))(defmethod view-cursor :after ((self kill-ring-icon-di) where)   (declare (ignore where))   nil)(defmethod hilite-feedback ((self kill-ring-icon-di) &optional where (style :line) part)   (declare (ignore where part))   (view-splitted-invert self :full style))(defmethod current-docu-string ((self kill-ring-icon-di) &optional where)   (declare (ignore where))   "")(defmethod in-click-loop ((self kill-ring-icon-di) where)   (declare (ignore where))   nil);------------------------------------------------------------------------(defclass global-icon-bar (windoid)   ((orientation :initform 'horizontal                        :initarg :orientation                        :accessor orientation))   (:default-initargs     :window-show nil))(defmethod initialize-instance :after ((self global-icon-bar) &rest initargs)   (declare (ignore initargs))   (with-running-watch        (let ((horizontal (eq (orientation self) 'horizontal)))          (set-view-position self (if horizontal                                                    (make-point (- *screen-width* 198)                                                                       12)                                                   (make-point (- *screen-width* 42) 31)))          (set-view-size self (if horizontal #@(194 50) #@(38 194)))          (add-subviews self                                   (make-instance 'wilma-icon-di                                      :view-position #@(-1 -1)                                      :rsrc-id 177)                                  (make-instance 'Fred-icon-di                                      :view-position (if horizontal #@(38 -1) #@(-1 38))                                      :rsrc-id 178)                                  (make-instance 'typeset-icon-di                                      :view-position (if horizontal #@(77 -1) #@(-1 77))                                      :rsrc-id 180)                                                                  (make-instance 'search-file-icon-di                                      :view-position (if horizontal #@(116 -1) #@(-1 116))                                      :rsrc-id 176)                                                                (make-instance 'kill-ring-icon-di                                      :view-position (if horizontal #@(155 -1) #@(-1 155))                                      :rsrc-id 179)                                  (make-instance 'static-text-dialog-item                                      :view-nick-name :docu-line                                      :view-size (make-point (- (view-width self) 16)                                                                               11)                                      :view-position (make-point 0                                                                                   (- (view-height self) 11))                                      :view-font '("monaco" 9 :plain)                                      :dialog-item-text "")                                      )          (setf *global-icon-bar* self)          (window-show self))))(defmethod window-close :after ((self global-icon-bar))   (setf *global-icon-bar* nil)   (mapcar #'(lambda (wilma)                      (global-tool-bar-closed Wilma))                 (windows :class 'wilma)))(defun make-tool-bar (&optional (orientation 'horizontal))   ;vertical   (make-instance 'global-icon-bar       :orientation orientation));----------------------------------------------------------------------(defun show-global-icon-bar ()  (when *global-icon-bar*    (eval-enqueue '(progn                      (window-show *global-icon-bar*)                     (view-activate-event-handler *global-icon-bar*)))))(defun hide-global-icon-bar ()   (when *global-icon-bar*       (window-hide *global-icon-bar*)))(push #'menubar-show *suspend-functions*)(push #'menubar-resume *resume-functions*)(push #'show-global-icon-bar *resume-functions*)(push #'hide-global-icon-bar *suspend-functions*);(pop *resume-functions*);(pop *suspend-functions*);------------------------------------------------------------------------