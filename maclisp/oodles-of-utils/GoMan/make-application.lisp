#| ============================================================================================MAKE-APPLICATIONThis should be evaluated after LOAD=============================================================================================== |#(defparameter *debugging* 0 "Set to 0 for break-loop on error, 1 for backtrace to a file") ; the condition handler for serious-error (the superclass of error)(defun irs-unexpected-error (c)    (case *debugging*      (0       (setq *terminal-io* (make-instance 'ccl::terminal-io)             *error-output* *terminal-io*             *standard-output* *terminal-io*             *debug-io* ccl::*pop-up-terminal-io*)       (%set-toplevel #'toplevel-loop)       (signal c))      (1 (handler-bind           ((serious-condition #'quit-irs))             (let ((file (make-pathname :name (format nil "~D" (get-universal-time))                                        :type "report"                                        :directory '(:absolute "irs-errors")                                        :host "home"                                        :defaults nil)))               (with-open-file (s file :direction :output)                 (let ((*error-output* s)                       (*debug-io* s))                   (typecase c                     (condition (ccl::report-condition c s))                     (string (princ c s)))                   (ccl::print-call-history)))))       (quit-irs nil))      (t (quit-irs nil)))); the condition handler for warnings(defun irs-ignore (&rest args)  (declare (ignore args)))(defun quit-irs (ignore)  (declare (ignore ignore))  ; command-. lets one escape from message-dialog  ; The unwind protect assures that we always quit  (unwind-protect    ; it would be cool to quit after 2 minutes    (message-dialog "A nasty system error has occurred." :ok-text "Relax")    (quit)));;; The regular toplevel function just hangs out waiting for (menu) events (defun irs-toplevel ()  (let* ((*terminal-io* (make-instance 'ccl::terminal-io))         (*error-output* *terminal-io*)         (*debug-io* ccl::*pop-up-terminal-io*)         (*standard-output* *terminal-io*)                 (*print-escape* nil)         (*print-pretty* nil)         ; below not necessary if we only use ~A         (*print-readably* nil))    (handler-bind       ((serious-condition #'irs-unexpected-error)        (warning #'irs-ignore))      ; should this be (event-dispatch t) ?      (loop (event-dispatch nil)))));;; The initial toplevel function installs the regular toplevel function;;; and reads in any finder selected files(defun irs-startup ()  (%set-toplevel #'irs-toplevel)  (handler-bind    ((serious-condition #'irs-unexpected-error)     (warning #'irs-ignore))        ; process finder selected files if any      (ccl::make-librarian)    (ccl::make-commands)    (let ((file-list (finder-parameters)))      (when (eq (car file-list) :open)        (dolist (f (cdr file-list))          nil)))));;; Get the menubar in the desired state for the standalone application.;;; Then call save-application with the desired toplevel function and creator(defun save-irs (path)  (let* ((apple *apple-menu*)                  )        ; because the apple menu is handled specially, if we    ; try to make a new one, we end up with two.    (apply 'remove-menu-items apple (menu-items apple))    ; Put "about irs" in the apple menu    (add-menu-items apple                                        (make-instance 'menu-item                      :menu-item-title "About GoMan…"                      :menu-item-action 'about-irs)                    (make-instance 'menu-item                      :menu-item-title "-"))    )  (catch-cancel    (save-application path :init-file nil :toplevel-function #'irs-startup                      )))(defun about-irs ()  (modal-dialog     (make-instance 'dialog            :view-position '(:top 100)            :view-size #@(180 150)            :window-type :double-edge-box            :window-show nil            :view-subviews              (list               (make-dialog-item 'default-button-dialog-item                 #@(55 120) #@(70 18) "OK"                 #'(lambda (item)                     (declare (ignore item))                     (return-from-modal-dialog t)))               (make-dialog-item 'static-text-dialog-item                 #@(5 5) #@(290 55) (format nil "GoMan in~%~a~%~a"                                            (lisp-implementation-type)                                            (lisp-implementation-version))                 nil                 :view-font '("geneva" 12 :bold))               (make-dialog-item 'static-text-dialog-item                 #@(5 60) #@(180 40)  "© Institut für Informatik Universität Basel" nil                  :view-font '("geneva" 12))               ))));(save-irs (full-pathname "Goman;GoMan"))(save-irs (make-pathname :directory "Mac HD:" :name "GoMan"))