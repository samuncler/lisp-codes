(in-package :oou)(oou-provide :GoMan-destination-window);***********************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; the destination window of GoMan; ; Changes (worth to be mentioned):; ------------------------------; March 1996 Dieter : CCL 3.0 ;;***********************************************************************;***********************************************************************(export '())(oou-dependencies :QuickDraw-u                  :unibas-macros                  :unibas-cursors                  :GoMan-macros                  :GoMan-formatter                  :GoMan-source-window                  :scrollable-view                  :history-gm                  :destination-window-menus                  );---------------------------------------------------------------------------------(defclass destination-window (visual-history-mixin source-window)  ((search-dialog-item :initform nil                       :accessor search-dialog-item)   (bookmark-dialog-item :initform nil                         :accessor bookmark-dialog-item)   (last-position :initform nil                  :accessor last-position)   (actual-object :initform nil                  :accessor actual-object))  (:default-initargs     :bookmark-class 'destination-window-bookmark    :drop-targets (list :bookshelf)    :fred-class 'destination-window-scrollable-fred-di    :default-view-size #@(100 50)));-----------------------------------------------------------------------------------(defclass destination-window-search-dialog-item (search-di)   ())(defmethod initialize-instance ((view destination-window-search-dialog-item)                                     &rest initargs  &key window)  (declare (dynamic-extend initargs))  (apply #'call-next-method view initargs)  (show-dialog-item window view))(defmethod reduce-subview-to-zero ((view destination-window-search-dialog-item))  (hide-dialog-item (view-window view)))(defmethod dialog-item-layout ((win source-window) (dialog-item search-di))  `((:hbox (:height 63)           -1           (:fbox (:height 63) ,dialog-item)           3)    5));---------------------------------------------------------------------------------(defclass destination-window-scrollable-view (horizontal-vertical-scrollable-view)   ())(defmethod initialize-instance ((view destination-window-scrollable-view)                                     &rest initargs  &key window )  (declare (dynamic-extend initargs))  (apply #'call-next-method view initargs)  (show-dialog-item window view))(defmethod reduce-subview-to-zero ((view destination-window-scrollable-view))  (let ((win (view-window view)))    (hide-dialog-item win)    (setf (selected-p (selected-icon win)) nil)))(defmethod show-dialog-item :after ((window destination-window)(subview destination-window-scrollable-view))   (check-copy-icon window))(defmethod hide-subview :after ((window destination-window)(subview destination-window-scrollable-view))   (check-copy-icon window));---------------------------------------------------------------------------------(defclass destination-window-bookmark (bookmark)   ())(defmethod select-item :after ((self destination-window-bookmark) &key draw-now-p)   (declare (ignore draw-now-p))   (let* ((window (view-window self))          (fred (real-fred (fred-window window))))     (collapse-selection fred t)     (fred-update fred)     (check-copy-icon window)))(defmethod deselect-item :after ((view destination-window-bookmark) &key draw-now-p)   (declare (ignore draw-now-p))   (check-copy-icon (view-window view)));---------------------------------------------------------------------------------(defmethod initialize-instance :after ((win destination-window) &rest initargs)  (declare (ignore initargs))  (setf (min-size win) (make-point (view-width win)                                   148))  (setf (max-size win) (make-point (view-width win)                                   *screen-height*)))(defmethod working-file ((win destination-window))  (when (destination-file (document win))    (probe-file (destination-file (document win)))))(defmethod insert-local-menubar ((win destination-window) menubar)  (insert-iconbar win menubar))(defmethod window-zoom-size ((self destination-window))  (make-point (view-width self)              (point-v (call-next-method))))(defmethod window-zoom-position ((self destination-window))  (make-point (view-left self)              (point-v (call-next-method))))(defmethod copy-icon ((win destination-window))  (view-named :copy-icon (menu-bar win)))(defmethod search-icon ((win destination-window))  (view-named :search-icon (menu-bar win)))(defmethod manuscript-icon ((win destination-window))  (view-named :manuscript-icon (menu-bar win)))(defmethod back-arrow ((win destination-window))  (view-named :go-back-icon (menu-bar win)))(defmethod polaroid-icon ((win destination-window))  (view-named :polaroid-icon (menu-bar win)))(defmethod bookmark-icon ((win destination-window))   (view-named :bookmark-icon (icon-bar win)))(defmethod main-subview-layout ((win destination-window))  (cdddr (third (sixth (layout win)))))(defmethod (setf main-subview-layout) (new-value (win destination-window))  (setf (cdddr (third (sixth (layout win)))) new-value))(defmethod check-copy-icon ((win destination-window))  (when (copy-icon win)    (with-slots (fred-window dialog-item-on-screen bookmark-dialog-item fred-window) win      (let ((fred (real-fred fred-window)))        (multiple-value-bind (start-sel end-sel) (selection-range fred)          (if (or (/= start-sel end-sel)                  (and dialog-item-on-screen                       bookmark-dialog-item                       (wptr bookmark-dialog-item)                       (eq dialog-item-on-screen bookmark-dialog-item)                       (subviews (view-named :real-view bookmark-dialog-item))                       (selected-items (car (subviews (view-named :real-view bookmark-dialog-item))))))            (setf (dialog-item-enabled-p (copy-icon win)) t)            (setf (dialog-item-enabled-p (copy-icon win)) nil)))))))(defmethod jump-to-last-position ((self destination-window))  (with-slots (last-position fred-window) self    (when last-position      (let ((current-position (buffer-position (fred-display-start-mark (real-fred fred-window)))))        (scroll-to-position (real-fred fred-window) (last-position self))        (setf last-position current-position)))))(defmethod set-file-type-and-creator ((win destination-window))  (set-mac-file-type (filename win) :GMRE)  (set-mac-file-creator (filename win) :GOMN))    (defmethod set-filename-in-document ((win destination-window))  (setf (destination-file (document win))        (slot-value (main-fred-item win) 'ccl::my-file-name)))(defmethod window-close ((win destination-window))   (with-slots (figures destination-window source-window) (document win)    (unless source-window      (reset-environment (document win))      (close-document *the-librarian* (document win)))    (dolist (fig figures)      (release-handle (picture fig))      (setf (picture fig) nil))    (setf destination-window nil)    (call-next-method)))(defmethod make-contents-dialog-item ((self destination-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific chapter in the text"           :window self           :items (contents-objects (document self))           :item-print-function            #'(lambda (item stream)               (when (eq item (actual-object (destination-window (document item))))                 (#_TextFace (ash 1 #$italic)))               (format stream                       (format nil                                "~~~DT~~{~~A.~~} ~~A"                               (cond ((= (length (number item)) 1) 0)                                     ((= (length (number item)) 2) 3)                                     ((= (length (number item)) 3) 6)                                     ((and (fourth (number item))                                           (= (car (number item)) 0)) 0)                                     ((= (length (number item)) 4) 9)))                       (if (= (car (number item) ) 0)                         nil                         (number item))                       (title item))))))    (setf (contents-dialog-item self) dialog-item)    (setf (dialog-item (contents-icon self)) dialog-item)    dialog-item))(defmethod make-figures-dialog-item ((self destination-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific figure in the text"           :window self           :items (setf (figures (document self))                        (sort (figures (document self))                               #'(lambda (item1 item2)                                  (cond ((< (car item1) (car item2)) t)                                        ((> (car item1) (car item2)) nil)                                        ((< (cadr item1) (cadr item2)) t)                                        ((> (cadr item1) (cadr item2)) nil)))                              :key #'number))           :item-print-function #'(lambda (item stream)                                    (format stream                                            "  ~S.~S ~A"                                            (car (number item))                                            (cadr (number item))                                            (caption item))))))    (setf (figure-dialog-item self) dialog-item)    (setf (dialog-item (figures-icon self)) dialog-item)    dialog-item))(defmethod make-examples-dialog-item ((self destination-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific example in the text"           :window self           :items (setf (examples (document self))                        (sort (examples (document self))                               #'(lambda (item1 item2)                                  (cond ((< (car item1) (car item2)) t)                                        ((> (car item1) (car item2)) nil)                                        ((< (cadr item1) (cadr item2)) t)                                        ((> (cadr item1) (cadr item2)) nil)))                               :key #'number))           :item-print-function #'(lambda (item stream)                                    (format stream                                            "  ~S.~S ~A"                                            (car (number item))                                            (cadr (number item))                                            (caption item))))))    (setf (examples-dialog-item self) dialog-item)    (setf (dialog-item (examples-icon self)) dialog-item)    dialog-item))(defmethod make-index-dialog-item ((self destination-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific keyword in the text"           :window self           :items (setf (index-entries (document self))                        (sort (index-entries (document self)) #'index-entry-lessp))           :item-print-function #'(lambda (item stream)                                    (format stream                                            "~A, ~{~A.~}"                                            (index-entry item)                                            (if (container item)                                              (number (container item))                                              (list 0)))))))    (setf (index-dialog-item self) dialog-item)    (setf (dialog-item (index-icon self)) dialog-item)    dialog-item))(defmethod make-search-dialog-item ((win destination-window))  (let* ((search-dialog-item          (make-instance 'destination-window-search-dialog-item            :window win)))    (setf (search-dialog-item win) search-dialog-item)    search-dialog-item))(defmethod make-bookmark-dialog-item ((win destination-window))  (let* ((bookmark-dialog-item (make-instance 'destination-window-scrollable-view                                 :window win)))    (setf (restore-function win) 'visualize-bookmark)    (setf (view-to-visualize win) (main-fred-item win))    (setf (visualization-view win) (view-named :real-view bookmark-dialog-item))    (setf (bookmark-dialog-item win) bookmark-dialog-item)    (setf (dialog-item (bookmark-icon win)) bookmark-dialog-item)    bookmark-dialog-item))(defmethod visualize-bookmark ((self destination-window) restore-information)  (scroll-to-position (real-fred (fred-window self)) restore-information))(defmethod generate-bookmark ((self destination-window))  (save-state self (buffer-position (fred-display-start-mark (real-fred (fred-window self)))))  (check-copy-icon self))(defmethod update ((self destination-window))  (with-slots (document fred-window contents-dialog-item examples-dialog-item index-dialog-item                        figure-dialog-item dialog-item-on-screen labels-dialog-item links-dialog-item) self    (fred-update (real-fred fred-window))    (when contents-dialog-item      (setf (items contents-dialog-item) (contents-objects document)))    (when figure-dialog-item       (setf (items figure-dialog-item)             (setf (figures document)                  (sort (figures document)                         #'(lambda (item1 item2)                            (cond ((< (car item1) (car item2)) t)                                  ((> (car item1) (car item2)) nil)                                  ((< (cadr item1) (cadr item2)) t)                                  ((> (cadr item1) (cadr item2)) nil)))                        :key #'number))))    (when examples-dialog-item      (setf (items examples-dialog-item)             (setf (examples document)                  (sort (examples document)                         #'(lambda (item1 item2)                            (cond ((< (car item1) (car item2)) t)                                  ((> (car item1) (car item2)) nil)                                  ((< (cadr item1) (cadr item2)) t)                                  ((> (cadr item1) (cadr item2)) nil)))                         :key #'number))))    (when index-dialog-item      (setf (items index-dialog-item)             (setf (index-entries document)                  (sort (index-entries document) #'index-entry-lessp))))    (when labels-dialog-item      (setf (items labels-dialog-item)             (setf (all-labels document)                  (sort (all-labels document) #'string< :key                         #'identifier-string))))    (when links-dialog-item      (setf (items links-dialog-item)             (setf (all-links document)                  (sort (all-links document) #'string< :key                         #'identifier-string))))    (when dialog-item-on-screen      (view-draw-contents dialog-item-on-screen))))(defmethod update-catalog ((self destination-window))  nil)(defmethod (setf actual-object) :around (newvalue (self destination-window))   (let ((update-necessary (and (neq (actual-object self) newvalue)                               (contents-dialog-item self)                               (wptr (contents-dialog-item self)))))    (call-next-method)    (when update-necessary      (view-draw-contents (contents-dialog-item self)))))(defmethod compute-actual-object ((self destination-window))  (let ((first-position (buffer-position (fred-display-start-mark (real-fred (fred-window self)))))        (contents-objects (contents-objects (document self))))    (let ((candidate           (find-if #'(lambda (object)                         (and (>= (format-start-position object)                                 first-position)))                    contents-objects)))      (if (and candidate               (/= (fred-vpos (real-fred (fred-window self)) (format-start-position candidate)) -1))        candidate        (if  candidate          (if (eq candidate (car contents-objects))            (car contents-objects)            (do ((rest contents-objects (cdr rest)))                ((or (eq (cadr rest) candidate)                     (null rest))                 (if rest (car rest) (car contents-objects)))))          (car (last contents-objects)))))))(defmethod make-menu-bar ((win destination-window))  (make-instance 'destination-window-special-menubar    :location :top    ;:3d-effect nil    :filler-layout-1 0    :filler-layout-2 0    :icon-distance 2    :inner-margin 1    :outer-margin 2    :view-nick-name :menu-bar    :icons (menubar-icons win)))(defmethod menubar-icons ((win destination-window))  (make-destination-window-menubar-icons))(defmethod icons ((win destination-window))  (or (pop *goman-destination-window-icons*)      (make-destination-window-icons)));-------------------------------------------------------------------------------------------(defclass destination-window-special-menubar (iconbar)  ())(defmethod iconbar-width ((view destination-window-special-menubar))  (if (view-window view)    (view-right (fred-window (view-window view)))    100))(defmethod horizontal-layout ((view destination-window-special-menubar))  (with-slots (icons icon-distance 3d-effect inner-margin) view    `(:vbox (:width ,(view-width view) :height ,(view-height view))            ,(if 3d-effect 2 0)            ,inner-margin            (:hbox ()                   ,(if 3d-effect 2 0)                   ,inner-margin                   ,@(mapcan #'(lambda (icon)                                 (list (:hbox (:width (view-width icon))                                               icon)                                       icon-distance))                             (butlast icons 2))                   (:hbox ())                   ,@(mapcan #'(lambda (icon)                                 (list (:hbox (:width (view-width icon))                                               icon)                                       icon-distance))                             (last icons 2))                   ,inner-margin                   ,(if 3d-effect 2 0))            ,inner-margin            ,(if 3d-effect 2 0))));-------------------------------------------------------------------------------------------(defclass destination-window-scrollable-fred-di (source-window-scrollable-fred-di)  ()  (:default-initargs     :fred-item-class 'destination-window-embedded-fred-di    :docu-line-string "" ))(defmethod view-activate-event-handler :after ((self destination-window-scrollable-fred-di))  (fred-update (fred-item self)));---------------------------------------------------------------------------------(defclass destination-window-embedded-fred-di (source-window-docu-line-svm drag-and-drop-fred-mixin  PM-embedded-fred-di)  ((last-sensitive-frames :initform nil)   (document :initform nil             :initarg :document             :accessor document))  (:default-initargs     :docu-line-string "Explore the text"))(defmethod window-save ((fred destination-window-embedded-fred-di))  (with-cursor *watch-cursor*    (#_ShowCursor)    (let* ((win (view-window fred))           (doc (document win))           (saving-needed (window-needs-saving-p fred))           (buffer (fred-buffer fred))           (write-date (ccl::buffer-file-write-date buffer)))      (setf (ccl::buffer-file-write-date buffer) nil)      (unwind-protect         (call-next-method)        (setf (ccl::buffer-file-write-date buffer) write-date))      (when (slot-value fred 'ccl::my-file-name)        (set-file-type-and-creator win)        (set-filename-in-document win))      (set-mini-buffer win "~&Saving ~sÉ " (slot-value fred 'ccl::my-file-name))      (unless saving-needed        (ccl::view-save-position fred))      (set-mini-buffer win " Done.")      (when saving-needed        (set-mini-buffer win "~&Saving Figures of ~sÉ " (slot-value fred 'ccl::my-file-name))        (save-pictures-in-resource-fork doc)        (set-mini-buffer win " Done.")        (set-mini-buffer win "~&Saving Document Structure of ~sÉ " (slot-value fred 'ccl::my-file-name))        (save-document-object-in-resource-fork doc)        (set-mini-buffer win " Done.")))))(defmethod ccl::give-text ((self destination-window-embedded-fred-di))  nil)     (defmethod current-docu-string ((self destination-window-embedded-fred-di) &optional where)  (let ((link (link-at-position-p self where)))    (if (and link             (not (control-key-p)))      (typecase link        (application-link "Follow this link to a Lisp application")        (document-link "Follow this link to another GoMan document")        (link "Follow this link to to a place in the same text"))      (call-next-method))))(defmethod view-activate-event-handler :after ((self destination-window-embedded-fred-di))  (mapc #'menu-disable (menubar))  (menu-enable (find-menu (format nil "~A" #\AppleMark))))(defmethod view-deactivate-event-handler :around ((self destination-window-embedded-fred-di))  (with-slots (last-sensitive-frames) self    (when last-sensitive-frames      (erase-the-rects self (cdr last-sensitive-frames))      (setf last-sensitive-frames nil)))  (call-next-method)  (mapc #'menu-enable (menubar)))      (defmethod view-cursor ((self destination-window-embedded-fred-di) point)  (with-slots (last-sensitive-frames) self    (let ((sensitive (link-at-position-p self point)))      (with-pen-mode ((pen-mode self) self)        (cond ((and sensitive                    (neq sensitive (car last-sensitive-frames)))               (let ((new-frames (frames self sensitive)))                 (when last-sensitive-frames                   (erase-the-rects self (cdr last-sensitive-frames)))                 (frame-the-rects self new-frames)                 (setf last-sensitive-frames (list* sensitive new-frames))))              ((and last-sensitive-frames                    (null sensitive))               (erase-the-rects self (cdr last-sensitive-frames))               (setf last-sensitive-frames nil))))      (cond (sensitive *pointer-hand-cursor*)            ((in-selection self point) *full-hand-cursor*)            (t *i-beam-cursor*)))))(defmethod view-mouse-leave-event-handler ((self destination-window-embedded-fred-di))  (with-slots (last-sensitive-frames) self    (when last-sensitive-frames      (erase-the-rects self (cdr last-sensitive-frames))      (setf last-sensitive-frames nil))))(defmethod droppable-p ((self drag-and-drop-buffer) (target destination-window-embedded-fred-di))  nil)(defmethod draggable-dim-is-above ((self destination-window-embedded-fred-di) droppable-view global-position)  (declare (ignore droppable-view global-position))  nil)(defmethod view-click-event-handler ((self destination-window-embedded-fred-di) where)  (let ((link (link-at-position-p self where)))    (if link      (with-slots (last-sensitive-frames) self         (erase-the-rects self (cdr last-sensitive-frames))        (jump link)        (setf last-sensitive-frames nil))      (call-next-method))))(defmethod view-click-event-handler :after ((self destination-window-embedded-fred-di) where)  (declare (ignore where))  (setf (scroll-direction self) :in-thumb)  (fred-update self))(defmethod view-key-event-handler ((self destination-window-embedded-fred-di) char)  (declare (ignore char))  (flash self))(defmethod view-draw-contents :after ((self destination-window-embedded-fred-di))  "only the visible figures are memory-consuming (but scrolling is slow when it becomes visible)"  (when (view-container self)    (dolist (figure (figures (document (view-container self))))      (if (figure-visible-p figure self)        (figure-draw figure self)        (when (picture figure)          (without-interrupts           (release-handle (picture figure))           (setf (picture figure) nil)))))))(defmethod fred-update :after ((self destination-window-embedded-fred-di))   (when (wptr self)    (with-slots (view-container view-size scroll-direction) self      (when view-container         (unless (mouse-down-p)          (multiple-value-bind (start-sel end-sel) (selection-range self)            (unless (eq start-sel end-sel)              (let* ((bookmark-di (bookmark-dialog-item (view-window self)))                     (some-polaroid (when bookmark-di                                      (car (subviews (view-named :real-view bookmark-di))))))                (when (and some-polaroid                           (wptr some-polaroid))                  (deselect-all some-polaroid)))))          (check-copy-icon (view-window self)))        (dolist (figure (figures (document view-container)))          (let ((visible-position (figure-visible-p figure self)))            (when (and visible-position                       (or (and (eq scroll-direction :in-up-button)                                (< (fred-vpos self visible-position) 22))                           (and (eq scroll-direction :in-down-button)                                (< (- (point-v view-size) 22)                                   (fred-vpos self (last-visible-position figure self))))                           (eq scroll-direction :in-thumb)                           (eq scroll-direction :in-page-up)                           (eq scroll-direction :in-page-down)                           (eq scroll-direction :horizontal)))              (figure-draw figure self))            (unless visible-position              (without-interrupts               (release-handle (picture figure))               (setf (picture figure) nil)))))        (when (view-window self)          (setf (actual-object (view-window self))                (compute-actual-object (view-window self))))))))(defmethod frames ((self destination-window-embedded-fred-di) (link link))  (with-slots (format-start-position format-end-position) link    (multiple-value-bind (ascent descent widmax leading)                          (font-info (default-font (document self)))      (declare (ignore widmax))      (do* ((buffer (fred-buffer self))            (down-correction (+ descent leading))            (up-correction (+ descent leading ascent))            (left-position format-start-position (+ right-position 2))            (right-position (let ((newline-pos (buffer-char-pos buffer #\newline                                                                :start format-start-position                                                                :end format-end-position)))                              (if newline-pos                                 (1- newline-pos)                                format-end-position))                            (let ((newline-pos (buffer-char-pos buffer #\newline                                                                :start left-position                                                                :end format-end-position)))                              (if newline-pos                                 (1- newline-pos)                                format-end-position)))            (left-margin (fred-hpos self left-position)                         (leftmargin (document self)))            (right-margin  (fred-hpos self right-position)                           (fred-hpos self right-position))            (bottom-margin (+ (fred-vpos self left-position)                              down-correction)                           (+ (fred-vpos self left-position)                              down-correction))            (top-margin (- bottom-margin up-correction)                        (- bottom-margin up-correction))            (frames (list (make-point left-margin top-margin)                          (make-point right-margin bottom-margin))                    (progn  (push (make-point right-margin bottom-margin) frames)                            (push (make-point left-margin top-margin) frames))))           ((>= right-position format-end-position) frames)))))(defmethod frame-the-rects ((self destination-window-embedded-fred-di) list-of-frames)  (with-focused-view self     (with-pen-pattern (*black-pattern* self)      (with-pen-mode (:patCopy self)        (do ((frames list-of-frames (cddr frames)))            ((null frames))          (frame-rect self (car frames) (cadr frames)))))))(defmethod erase-the-rects ((self destination-window-embedded-fred-di) list-of-frames)  (with-focused-view self    (with-pen-pattern (*white-pattern* self)      (with-pen-mode (:patCopy self)        (do ((frames list-of-frames (cddr frames)))            ((null frames))          (frame-rect self (car frames) (cadr frames)))))))             (defmethod link-at-position-p ((self destination-window-embedded-fred-di) where)  (let* ((point-h (point-h where))         (point-v (point-v where))         (buffer (fred-buffer self))         (buffer-position (fred-point-position self point-h point-v))         (document (document self)))    (when (and (> point-h (leftmargin document))               (< point-h (- (window-width document)                             (rightmargin document))))      (do ((links (all-links (document self)) (cdr links)))          ((null links) nil)        (when (and (<= (format-start-position (car links))                       buffer-position)                   (>= (format-end-position (car links))                       buffer-position)                   (char/= (buffer-char buffer buffer-position)                           #\newline))          (return (car links)))))))(defmethod figure-draw ((self figure) (view destination-window-embedded-fred-di) &optional point)  (with-slots (wptr picture rsrc-id picture-width picture-height                     h-pos format-start-position line-height topleft bottomright) self    (unless (and picture                 (handlep picture))      (when (view-window view)        (get-pict-picture self (destination-file (document (view-window view))))))    (unless h-pos      (setf h-pos (max (round (/ (- (window-width self)                                    (picture-width self))                                 2))                       0)))    (let* ((start-v-pos (figure-visible-p self view))           (topleft-point (when start-v-pos                            (or point                                (make-point (- h-pos (fred-hscroll view))                                            (- (fred-vpos view start-v-pos)                                               (* (- start-v-pos format-start-position)                                                   (default-line-height self))))))))      (when (and start-v-pos                 (handlep picture))        (rlet ((r :Rect                   :topLeft topleft-point                  :botRight (make-point (+ (point-h topleft-point) picture-width)                                        (+ (point-v topleft-point) picture-height))))          (with-focused-view view             (Draw-PICT picture r)))        (setf topleft topleft-point)        (setf bottomright (make-point (+ h-pos picture-width)                                      (+ (point-v topleft)                                         picture-height)))))))(defmethod figure-visible-p ((self figure) (view destination-window-embedded-fred-di))  (when (wptr view)    (with-slots (format-start-position format-end-position h-pos picture-width picture) self      (cond ((and (numberp h-pos)                  (numberp picture-width)                  (> (fred-hscroll view)                     (+ h-pos picture-width)))             nil)            (t             (do ((position format-start-position (1+ position)))                 ((> position format-end-position) nil)               (when (/= (fred-vpos view position) -1)                 (return position))))))))(defmethod last-visible-position ((self figure) (view destination-window-embedded-fred-di))  (with-slots (format-end-position) self    (do ((position (figure-visible-p self view) (1+ position)))        ((> position format-end-position) format-end-position)      (when (= (fred-vpos view position) -1)        (return (1- position))))))(defmethod window-hardcopy ((self destination-window-embedded-fred-di) &optional (dialog? t))  (let ((fred-window (make-instance 'fred-window                       :window-show nil                       )))    (multiple-value-bind (start end) (selection-range self)      (when (= start end)        (select-all self)))    (copy self)    (paste fred-window)    (collapse-selection self t)    (setf (scroll-direction self) :in-thumb)    (fred-update self)    (buffer-set-font-spec (fred-buffer fred-window) '("Palatino") 0 t)    (set-window-title fred-window (window-title (view-window self)))    (window-hardcopy fred-window dialog?)    (ccl::window-set-not-modified fred-window)    (window-close fred-window)))(defmethod copy ((self destination-window-embedded-fred-di))   (let ((window (view-window self)))    (multiple-value-bind (start-selection end-selection) (selection-range self)      (if (= start-selection end-selection)        (let* ((polaroid-view (when (bookmark-dialog-item window)                                (view-named :real-view (bookmark-dialog-item window))))               (selected-item (when (and polaroid-view                                         (subviews polaroid-view))                                (car (selected-items (car (subviews polaroid-view)))))))          (when (and (dialog-item-on-screen window)                     (eq (dialog-item-on-screen window)                         (bookmark-dialog-item window))                     selected-item)            (copy selected-item)))        (call-next-method)))    (print-documentation-string (mouse-documentation-line window) "Copied")))(defmethod  scroll-to-position ((self destination-window-embedded-fred-di) position)  (set-mark (fred-display-start-mark self) position)  (setf (scroll-direction self) :in-thumb)  (fred-update self));----------------------------------------------------------------------------------;---------------------------------------------------------------------------------- (defun make-destination-window (document)  (let ((destination-window          (make-instance 'destination-window           :view-size (make-point (+ (window-width document) 46)                                  (min (+ (window-height document) 34)                                       (- *screen-height* *menubar-bottom*)))           :window-show nil           :document document)))    (setf (destination-window document) destination-window)    (setf (destination-buffer document) (fred-buffer (real-fred (fred-window destination-window))))    (setf (destination-file document) (filename destination-window))    (setf (view-to-visualize destination-window) (real-fred (fred-window destination-window)))    (set-view-position destination-window (make-point (max (min                                                            (- *screen-width*                                                                         (view-width destination-window)                                                                         50)                                                            (view-left destination-window))                                                           0)                                                      (max (min                                                            (- *screen-height*                                                                         (view-height destination-window)                                                                         10)                                                            (view-top destination-window))                                                           *menubar-bottom*)))    destination-window))(defun GoMan-destination ()  (let ((document (make-instance 'document)))    (make-instance 'destination-window      :document document      :view-size (make-point (+ (window-width document) 46)                             (min (+ (window-height document) 34)                                  (- *screen-height* *menubar-bottom*))))))