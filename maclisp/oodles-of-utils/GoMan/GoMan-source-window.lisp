(in-package :oou)(oou-provide :GoMan-source-window);************************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; the source window (the author's view) of GoMan; ;; Changes (worth to be mentioned):; ------------------------------;; March 96  Dieter: CCL 3.0, new layout, minor bugs fixed;;************************************************************************;************************************************************************(export '())(oou-dependencies :simple-view-ce                  :unibas-cursors                  :unibas-icon-di                  :splitter-di                  :scrollable-fred-di                  :docu-line-svm                  :search-di                  :highlight                  :unibas-pop-up-menu-di                  :GoMan-macros                  :GoMan-formatter                  :pict-archive                  :hilite-svm                  :droppable-window                  :fred-window-mixin                  :restricted-size-wim                  :local-menubar                  :editable-text-di                  :source-window-menus                  :iconbar                  :3d-tool-select-di                  );----------------------------------------------------------------------------------(defclass source-window-view-splitter (source-window-docu-line-svm view-splitter)  ()  (:default-initargs :docu-line-string "Resize text and catalog area"))(defmethod split-views ((splitter source-window-view-splitter) pos)  (when (wptr splitter)    (let* ((window (view-window splitter))           (menu-di (dialog-item-on-screen window)))      (cond ((< (- pos (view-top menu-di)) 15)             (reduce-subview-to-zero menu-di))            (t             (let* ((sequence-di (view-named :real-view menu-di))                    (old-scroll-pos (when (and sequence-di                                                (typep sequence-di 'sequence-dialog-item))                                      (scroll-position sequence-di))))               (update-dialog-item-layout window (- (view-height menu-di)                                                    (- (view-top splitter) pos)))               (compute-layout window)               (show-subview window splitter)               (when (after-split-function splitter)                 (funcall (after-split-function splitter) splitter))               (when (and old-scroll-pos                          (cell-contents sequence-di old-scroll-pos))                 (scroll-to-cell sequence-di old-scroll-pos)                 (adjust-table-and-scrollbar sequence-di))))            ))));----------------------------------------------------------------------------------(defclass source-window-menu-di (source-window-docu-line-svm menu-di)  ((correct-until-pos :initform 0                      :accessor correct-until-pos                      :initarg :correct-until-pos))  (:default-initargs     :docu-line-string "Scroll to a specific place in the text"    :view-class 'source-window-embedded-visible-menu-di))(defmethod initialize-instance :after ((self source-window-menu-di)  &rest initargs &key window)  (declare (ignore initargs))  (setf (menu-item-action self)        #'(lambda (menu-di item)            (if (listp item)              (let* ((document (document (view-window menu-di)))                     (item-at-pos (item-at-source-position document (car item))))                (if item-at-pos                  (show item-at-pos)                  (scroll-to-position (real-fred (fred-window (view-window menu-di))) (car item))))              (show item))))  (show-dialog-item window self))(defmethod (setf correct-until-pos)  (new-value (self source-window-menu-di))   (when (< new-value (correct-until-pos self))    (setf (slot-value self 'correct-until-pos) new-value)    (invalidate-view (view-named :real-view self))))(defmethod (setf items) :around (new-value (self source-window-menu-di))   (declare (ignore new-value))  (when (wptr self)    (let* ((sequence-di (view-named :real-view self))           (old-scroll-pos (scroll-position sequence-di)))      (call-next-method)      (when (view-window self)        (setf (slot-value self 'correct-until-pos)              (buffer-size (fred-buffer (real-fred (fred-window (view-window self)))))))      (when (cell-contents sequence-di old-scroll-pos)        (scroll-to-cell sequence-di old-scroll-pos)        (adjust-table-and-scrollbar sequence-di)))))(defmethod reduce-subview-to-zero ((self source-window-menu-di))  (let ((window (view-window self)))    (hide-dialog-item window)    (setf (selected-p (selected-icon window)) nil)));---------------------------------------------------------------------------------(defclass source-window-embedded-visible-menu-di (embedded-visible-menu-di)  ())(defmethod draw-cell-contents :around ((self source-window-embedded-visible-menu-di ) h &optional v)  (when (view-window self)       (cond ((and (not (typep (view-window self) 'destination-window))                (numberp (car (cell-contents self h v)))                (<= (correct-until-pos (dialog-item-on-screen (view-window self)))                    (car (cell-contents self h v))))           (with-text-state (:txFace (ash 1 #$italic))             (call-next-method)))          (t (call-next-method)))))         ;----------------------------------------------------------------------------------(defclass source-window-embedded-fred-di (hilite-svm window-embedded-fred-di)  ((document :initform nil             :initarg :document             :accessor document))  (:default-initargs     :drop-target-class '(drag-and-drop-fred-mixin pict-working-area expanded-pict typesetter-di)))(defmethod window-save ((fred source-window-embedded-fred-di))  (let ((win (view-window fred))        (old-file (slot-value fred 'ccl::my-file-name)))    (call-next-method)    (when (and (null old-file)               (slot-value fred 'ccl::my-file-name))      (set-file-type-and-creator win)      (set-filename-in-document win))))(defmethod after-change-update-method ((fred source-window-embedded-fred-di) &key (draw-now-p t))  (declare (ignore draw-now-p))  (let* ((window (view-window fred))         (dialog-item (when window                           (dialog-item-on-screen window)))         (buff (fred-buffer fred)))    (when dialog-item      (let* ((old-size (old-size fred))             (new-size (buffer-size buff))             (diff-size (- new-size old-size)))        (setf (correct-until-pos dialog-item)              (buffer-line-start buff                                 (max (if (> diff-size 0)                                        (- (buffer-position buff)                                           diff-size)                                        (1- (buffer-position buff)))                                      0)))))))(defmethod view-activate-event-handler :after ((self source-window-embedded-fred-di))  (mapc #'menu-disable (menubar))  (menu-enable (find-menu (format nil "~A" #\AppleMark))))(defmethod view-deactivate-event-handler :after ((self source-window-embedded-fred-di))  (mapc #'menu-enable (menubar)))(defmethod dropped ((self source-window-embedded-fred-di) (pict shrinked-pict) offset where)  (declare (ignore offset where))  (draw-dummy-cursor self)  (insert-picture-template self pict :at-mouse-position t))(defmethod dropped ((self source-window-embedded-fred-di) (pict expanded-pict) offset where)  (declare (ignore offset where))  (draw-dummy-cursor self)  (insert-picture-template self pict :at-mouse-position t))(defmethod paste ((self source-window-embedded-fred-di))  (let ((pict (get-picture-from-scrap)))    (if pict      (insert-picture-template self pict)      (call-next-method))))(defmethod insert-picture-template ((self source-window-embedded-fred-di) pict &key (at-mouse-position nil))   (let ((buff (fred-buffer self))        (insert-pos nil))    (collapse-selection self t)    (when at-mouse-position      (set-mark buff (fred-point-position self (view-mouse-position self))))    (insert (get-command 'figure) self)    (setf insert-pos (buffer-position buff))    (buffer-insert buff                    (format nil "~A"                            (typecase pict                             (shrinked-pict (point-v (pict-size pict)))                             (expanded-pict (- (point-v (view-size pict)) 4))))                   (+ insert-pos 12))    (buffer-insert buff                    (format nil "~A"                            (typecase pict                             (shrinked-pict (point-h (pict-size pict)))                             (expanded-pict (- (point-h (view-size pict)) 4))))                    (+ insert-pos 9))    (let ((rsrc-id (slot-value (typecase pict                                  (shrinked-pict pict)                                 (expanded-pict (shrinked-pict pict)))                               'rsrc-id)))      (when rsrc-id        (buffer-insert buff (format nil "~A" rsrc-id) (+ insert-pos 5))))    (fred-update self)    (window-select (view-window self))))(defmethod find-all-sectioning ((fred source-window-embedded-fred-di) &optional (start 0))  (let ((all-chapter-pos (find-all-string-pos fred "@Chapter" :start start))        (all-section-pos (find-all-string-pos fred "@Section" :start start))        (all-subsection-pos (find-all-string-pos fred "@SubSection" :start start))        (all-subsubsection-pos (find-all-string-pos fred "@SubSubSection" :start start))        (all-sectionings nil))    (dolist (chapter-pos all-chapter-pos)      (push (list* chapter-pos                   (format nil " x.  ~A" (get-substring fred (+ chapter-pos 8) :stop-char #\})))            all-sectionings))    (dolist (section-pos all-section-pos)      (push (list* section-pos                   (format nil "   x.x  ~A" (get-substring fred (+ section-pos 9) :stop-char #\})))            all-sectionings))    (dolist (subsection-pos all-subsection-pos)      (push (list* subsection-pos                   (format nil "     x.x.x  ~A" (get-substring fred (+ subsection-pos 12) :stop-char #\})))            all-sectionings))    (dolist (subsubsection-pos all-subsubsection-pos)      (push (list* subsubsection-pos                   (format nil "       x.x.x.x  ~A" (get-substring fred (+ subsubsection-pos 15) :stop-char #\})))            all-sectionings))    (sort all-sectionings #'< :key #'car)))(defmethod find-all-figures ((fred source-window-embedded-fred-di) &optional (start 0) &aux figures)  (dolist (figure-pos (find-all-string-pos fred "@Figure" :start start) (nreverse figures))    (push (list* figure-pos                 (get-substring fred (+ figure-pos 8) :stop-char "\"}"))          figures)))(defmethod find-all-examples ((fred source-window-embedded-fred-di) &optional (start 0) &aux examples)  (dolist (example-pos (find-all-string-pos fred "@Example" :start start) (nreverse examples))    (push (list* example-pos                 (get-substring fred (+ example-pos 9) :stop-char "\"}"))          examples)))(defmethod find-all-indexes ((fred source-window-embedded-fred-di) &optional (start 0) &aux indexes)  (dolist (index-pos (find-all-string-pos fred "@Index" :start start) (sort indexes #'string-lessp :key #'cdr))    (push (list* index-pos                 (get-substring fred (+ index-pos 7) :stop-char "\"}"))          indexes)))(defmethod find-all-labels ((fred source-window-embedded-fred-di) &optional (start 0) &aux labels)  (dolist (label-pos (find-all-string-pos fred "@Label" :start start) (sort labels #'string-lessp :key #'cdr))    (push (list* label-pos                 (format nil                         "'~A'"                         (get-substring fred (+ label-pos 7) :stop-char "\"}")))          labels)))(defmethod find-all-links ((fred source-window-embedded-fred-di) &optional (start 0) &aux links)  (dolist (link-pos (find-all-string-pos fred "@Link" :start start))    (push (list* link-pos                 (multiple-value-bind (link-text end-pos) (get-substring fred (+ link-pos 6) :stop-char "\"|")                   (format nil "'~A'  [local Link to '~A']"                            link-text                           (get-substring fred end-pos                                          :ignore-strings (list *wsp&cr2* "\"|")                                          :stop-char "\"|"))))          links))  (dolist (link-pos (find-all-string-pos fred "@Application-Link" :start start))    (push (list* link-pos                 (multiple-value-bind (link-text end-pos) (get-substring fred (+ link-pos 18) :stop-char "\"|")                   (format nil "'~A'  [Application-Link to '~A']"                            link-text                           (get-substring fred end-pos                                          :ignore-strings (list *wsp&cr2* "\"|")                                          :stop-char "\"|"))))          links))  (dolist (link-pos (find-all-string-pos fred "@Document-Link" :start start))    (push (list* link-pos                 (multiple-value-bind (link-text text-end-pos) (get-substring fred (+ link-pos 15) :stop-char "\"|")                   (multiple-value-bind (document-name name-end-pos)                                         (get-substring fred                                                        text-end-pos                                                       :ignore-strings (list *wsp&cr2* "\"|")                                                       :stop-char "\"|")                     (format nil "'~A'  [Document-Link to '~A' in Document '~A']"                              link-text                             (get-substring fred name-end-pos                                            :ignore-strings (list *wsp&cr2* "\"|") :stop-char "\"|}")                             document-name                             ))))          links))  (sort links #'string-lessp :key #'cdr));----------------------------------------------------------------------------------(defclass source-window-scrollable-fred-di (source-window-docu-line-svm scrollable-fred-di)  ((document :initform nil             :initarg :document             :accessor document))  (:default-initargs     :view-font '("GoMan Helvetica" 12 :plain)    :fred-item-class 'source-window-embedded-fred-di    :docu-line-string ""))(defmethod initialize-instance :around ((view source-window-scrollable-fred-di) &rest initargs &key window)  (declare (ignore initargs))   (call-next-method)  (let ((document (document window)))    (setf (document view) document)    (setf (document (real-fred view)) document)    (setf (fred-window window) view)))(defmethod real-fred ((view source-window-scrollable-fred-di))  (fred-item view));----------------------------------------------------------------------------------;----------------------------------------------------------------------------------(defclass source-window (restricted-size-wim fred-window-mixin local-menubar-mixin iconbar-mixin droppable-window drag-&-drop-window-mixin)  ((document :initform nil             :accessor document             :initarg :document)   (pict-archive :initform nil                 :accessor pict-archive)   (fred-class :initform 'source-window-scrollable-fred-di               :initarg :fred-class               :accessor fred-class)   (fred-window :initform nil                :accessor fred-window)   (contents-dialog-item :initform nil                         :accessor contents-dialog-item)   (figure-dialog-item :initform nil                       :accessor figure-dialog-item)   (examples-dialog-item :initform nil                         :accessor examples-dialog-item)   (index-dialog-item :initform nil                      :accessor index-dialog-item)   (labels-dialog-item :initform nil                       :accessor labels-dialog-item)   (links-dialog-item :initform nil                      :accessor links-dialog-item)   (splitter :initform nil             :accessor splitter)   (dialog-item-on-screen :initform nil                          :accessor dialog-item-on-screen))  (:default-initargs     :back-color *light-gray-color*    :drop-targets (list :manuscripts :typesetter)    :min-size #@(332 192)))(defmethod initialize-instance  ((win source-window) &rest initargs)  (declare (dynamic-extent initargs))  (apply #'call-next-method win :window-show nil initargs)  (when (< (view-height win)           (point-v (min-size win)))    (set-view-size win (view-width win) (point-v (min-size win))))  (when (< (view-width win)           (point-h (min-size win)))    (set-view-size win                    (point-h (min-size win))                   (view-height win)))  (let* ((scrollable-fred-di (make-instance (fred-class win)                               :window win                               :filename (working-file win)))         (visualization-di (make-instance 'go-back-visualization-di))         (splitter (add-view-splitter win (list :vertical nil 62 #@(16 5) 'source-window-view-splitter))))    (setf (main-fred-item win) (fred-item scrollable-fred-di))    (setf (splitter win) splitter)    (setf (layout win)          (:vbox ()                 -1                 (:hbox ()                        -1                        (:fbox (:height '(:filler :min 20)) scrollable-fred-di)                        (:fbox (:width 3 :height '(:filler :min 20)) visualization-di))))    (insert-iconbar win (make-icon-bar win))    (insert-local-menubar win (make-menu-bar win))))(defmethod working-file ((win source-window))  (when (source-file (document win))    (probe-file (source-file (document win)))))(defmethod mouse-documentation-line ((win source-window))  (view-mini-buffer win))(defmethod set-file-type-and-creator ((win source-window))  (set-mac-file-type (filename win) :GMAU)  (set-mac-file-creator (filename win) :GOMN))(defmethod set-filename-in-document ((win source-window))  (setf (source-file (document win))        (slot-value (main-fred-item win) 'ccl::my-file-name)))(defmethod window-close ((win source-window))   (call-next-method)  (unless (typep win 'destination-window)    (with-slots (document) win       (unless (destination-window document)        (reset-environment document)        (close-document *the-librarian* document))      (when (pict-archive win)        (setf (source-window (pict-archive win)) nil))      (setf (source-window document) nil)      (dolist (icon (subviews (icon-bar win)))        (setf (selected-p icon) nil)        (setf (dialog-item icon) nil))      (push (subviews (icon-bar win)) *goman-icons*))))(defmethod window-save-as :around ((self source-window))  (call-next-method)  (set-file-type-and-creator self)  (let ((name (filename self)))    (window-close self)    (open-source-directly name)))(defmethod typeset-window  ((window source-window) &optional (offset #@(0 0)) (hide-source-window t))  (when (destination-buffer (document window))    (buffer-delete (destination-buffer (document window)) 0 t))  (let ((typesetter (when (librarian-window *the-librarian*)                      (view-named :typesetter (librarian-window *the-librarian*))))        (destination-window (destination-window (document window))))    (when typesetter      (hilite-view typesetter t)      (when destination-window        (window-hide destination-window))      (when hide-source-window        (implode (add-points (view-top-left window)                             offset)                 (add-points (view-bottom-right window)                             offset)                 (view-to-global typesetter #@(0 0))                 (view-to-global typesetter (view-size typesetter))                 :delay 0.01)        (window-hide window)))    (make-destination-window-if-necessary (document window))    (setf destination-window (destination-window (document window)))    (format-selection (document window))    (when typesetter      (explode (view-to-global typesetter #@(0 0))               (view-to-global typesetter (view-size typesetter))               (view-top-left destination-window)               (view-bottom-right destination-window)               :delay 0.01))    (show-destination-window (document window))    (when (and typesetter               hide-source-window)      (explode (view-to-global typesetter #@(0 0))               (view-to-global typesetter (view-size typesetter))               (view-top-left window)               (view-bottom-right window)               :delay 0.01)      (hilite-view typesetter nil))    (window-select window)))(defmethod view-draw-contents :after ((win source-window))  (declare (ignore h v))  (when (and (wptr (splitter win))             (dialog-item-on-screen win))    (set-view-splitter-correct-position (splitter win))))(defmethod hide-subview  ((self source-window) (fred source-window-scrollable-fred-di))  nil)(defmethod show-subview :around ((self source-window) (fred source-window-scrollable-fred-di) &optional position)  (declare (ignore position))  (with-saved-selection (real-fred fred)     (call-next-method)))(defmethod menu-bar ((win source-window))  (view-named :menu-bar win))(defmethod icon-bar ((win source-window))  (view-named :icon-bar win))(defmethod contents-icon ((win source-window))   (view-named :contents-icon (icon-bar win)))(defmethod figures-icon ((win source-window))   (view-named :figures-icon (icon-bar win)))(defmethod index-icon ((win source-window))   (view-named :index-icon (icon-bar win)))(defmethod examples-icon ((win source-window))   (view-named :examples-icon (icon-bar win)))(defmethod labels-icon ((win source-window))   (view-named :labels-icon (icon-bar win)))(defmethod links-icon ((win source-window))   (view-named :links-icon (icon-bar win)))(defmethod main-subview-layout ((win source-window))  (cdddr (third (fourth (layout win)))))(defmethod (setf main-subview-layout) (new-value (win source-window))  (setf (cdddr (third (fourth (layout win)))) new-value))(defmethod dialog-item-layout ((win source-window) dialog-item)  (let ((percentage (min (/ (view-height dialog-item)                            (view-height win))                         0.85)))    `((:hbox (:height ,percentage)             -1             (:fbox (:height (:filler :min 20)) ,dialog-item)             3)      5)))(defmethod update-dialog-item-layout ((win source-window) dialog-item-height)  (when (dialog-item-on-screen win)    (setf (second (second (car (main-subview-layout win))))          (min (/ dialog-item-height (view-height win))               0.85))))(defmethod hide-dialog-item ((win source-window))  (cond ((dialog-item-on-screen win)         (setf (main-subview-layout win)               (cddr (main-subview-layout win)))         (setf (layout win) (layout win))         (hide-subview win (splitter win))         (setf (dialog-item-on-screen win) nil))        (t (flash win))))  (defmethod show-dialog-item ((win source-window) dialog-item)  (with-slots (fred-window splitter dialog-item-on-screen) win    (when dialog-item-on-screen      (hide-dialog-item win))    (setf (main-subview-layout win)          (append (dialog-item-layout win dialog-item)                  (main-subview-layout win)))    (setf dialog-item-on-screen dialog-item)    (setf (splitted-views splitter) (list dialog-item fred-window))    (setf (layout win) (layout win))    (update-catalog win)    (show-subview win splitter)))(defmethod deselect-icon-of-dialog-item-on-screen ((win source-window))  (unless (dialog-item-on-screen win)    (setf (selected-p (selected-icon win)) nil)))(defmethod selected-icon ((win source-window))  (selected-di (icon-bar win)))(defmethod update ((self source-window))  (with-slots (document fred-window contents-dialog-item examples-dialog-item index-dialog-item                        figure-dialog-item dialog-item-on-screen labels-dialog-item links-dialog-item) self    (let ((fred (real-fred fred-window)))      (fred-update fred)      (when contents-dialog-item        (setf (items contents-dialog-item)               (find-all-sectioning fred)))      (when figure-dialog-item         (setf (items figure-dialog-item)              (find-all-figures fred)))      (when examples-dialog-item        (setf (items examples-dialog-item)               (find-all-examples fred)))      (when index-dialog-item        (setf (items index-dialog-item)               (find-all-indexes fred)))      (when labels-dialog-item        (setf (items labels-dialog-item)               (find-all-labels fred)))      (when links-dialog-item        (setf (items links-dialog-item)               (find-all-links fred)))      (when dialog-item-on-screen        (view-draw-contents dialog-item-on-screen)))))(defmethod update-catalog ((self source-window))  (let ((di (dialog-item-on-screen self))        (fred (real-fred (fred-window self))))    (when di      (labels ((remove-incorrect-items (dialog-item)                 (delete-if #'(lambda (item)                                 (>= (car item) (correct-until-pos di)))                            (items dialog-item))))        (with-slots (document contents-dialog-item examples-dialog-item index-dialog-item                              figure-dialog-item dialog-item-on-screen labels-dialog-item links-dialog-item) self          (cond ((eq di contents-dialog-item)                 (setf (items contents-dialog-item)                        (nconc (remove-incorrect-items di)                              (find-all-sectioning fred (correct-until-pos di)))))                ((eq di figure-dialog-item)                 (setf (items figure-dialog-item)                       (nconc (remove-incorrect-items di)                              (find-all-figures fred (correct-until-pos di)))))                ((eq di examples-dialog-item)                 (setf (items examples-dialog-item)                        (nconc (remove-incorrect-items di)                              (find-all-examples fred (correct-until-pos di)))))                ((eq di index-dialog-item)                 (setf (items index-dialog-item)                        (nconc (remove-incorrect-items di)                              (find-all-indexes fred (correct-until-pos di)))))                ((eq di labels-dialog-item)                 (setf (items labels-dialog-item)                        (nconc (remove-incorrect-items di)                              (find-all-labels fred (correct-until-pos di)))))                ((eq di links-dialog-item)                 (setf (items links-dialog-item)                        (nconc (remove-incorrect-items di)                              (find-all-links fred (correct-until-pos di))))))         nil)))));----------------------------------------------------------------------------------(defmethod make-contents-dialog-item ((self source-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific chapter in the text"           :window self           :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))           :items (find-all-sectioning (real-fred (fred-window self)))           :item-print-function            #'(lambda (item stream)               (format stream                       "~A"                       (cdr item))))))    (setf (contents-dialog-item self) dialog-item)    (setf (dialog-item (contents-icon self)) dialog-item)    dialog-item))(defmethod make-figures-dialog-item ((self source-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific figure in the text"           :window self           :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))           :items (find-all-figures (real-fred (fred-window self)))           :item-print-function #'(lambda (item stream)                                    (format stream                                            "  x.x ~A"                                            (cdr item))))))    (setf (figure-dialog-item self) dialog-item)    (setf (dialog-item (figures-icon self)) dialog-item)    dialog-item))(defmethod make-examples-dialog-item ((self source-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific example in the text"           :window self           :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))           :items (find-all-examples (real-fred (fred-window self)))           :item-print-function #'(lambda (item stream)                                    (format stream                                            "  x.x ~A"                                            (cdr item))))))    (setf (examples-dialog-item self) dialog-item)    (setf (dialog-item (examples-icon self)) dialog-item)    dialog-item))(defmethod make-index-dialog-item ((self source-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific keyword in the text"           :window self           :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))           :items (find-all-indexes (real-fred (fred-window self)))           :item-print-function #'(lambda (item stream)                                    (format stream                                            " ~A"                                            (cdr item))))))    (setf (index-dialog-item self) dialog-item)    (setf (dialog-item (index-icon self)) dialog-item)    dialog-item))(defmethod make-labels-dialog-item ((self source-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific label in the text"           :window self           :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))           :items (find-all-labels (real-fred (fred-window self)))           :item-print-function #'(lambda (item stream)                                    (format stream                                            " ~A"                                            (cdr item))))))    (setf (labels-dialog-item self) dialog-item)    (setf (dialog-item (labels-icon self)) dialog-item)    dialog-item))(defmethod make-links-dialog-item ((self source-window))  (let ((dialog-item         (make-instance 'source-window-menu-di           :docu-line-string "Scroll to a specific start of a link in the text"           :window self           :correct-until-pos (buffer-size (fred-buffer (real-fred (fred-window self))))           :items (find-all-links (real-fred (fred-window self)))           :item-print-function #'(lambda (item stream)                                    (format stream                                            " ~A"                                            (cdr item))))))    (setf (links-dialog-item self) dialog-item)    (setf (dialog-item (links-icon self)) dialog-item)    dialog-item))(defmethod make-icon-bar ((self source-window))  (make-instance 'iconbar    :location :right    :3d-effect nil    :filler-layout-1 -2    :filler-layout-2 '(:hbox ())    :icon-distance 2    :inner-margin 1    :outer-margin 2    :view-nick-name :icon-bar    :icons (icons self)))(defmethod icons ((win source-window))  (or (pop *goman-icons*)      (make-new-goman-icons)))(defmethod make-menu-bar ((self source-window))  (make-instance 'local-menubar    :draw-outline-p nil    :view-nick-name 'menubar    :view-font '("Chicago" 12 :plain)    :menus (list (make-new-document-menu)                  (make-new-edit-menu)                  (make-new-command-menu)                  (make-new-special-menu))));----------------------------------------------------------------------------------;----------------------------------------------------------------------------------(defun index-entry-lessp (index-1 index-2)  (cond ((string-lessp (index-entry index-1)(index-entry index-2)) t)        ((string-greaterp (index-entry index-1) (index-entry index-2)) nil)        ((null (container index-1)) t)        ((null (container index-2)) nil)        ((document-part-lessp (number (container index-1)) (number (container index-2))) t)        (t nil)))(defun make-source-window (document &key position)  (declare (ignore position))  (let ((source-window          (make-instance 'source-window           :document document           :window-show nil           :view-size (make-point (min (+ (window-width document) 46)                                       (- *screen-width* 50))                                  (min (+ (window-height document) 34)                                       (- *screen-height* 50))))))    (setf (source-window document) source-window)    (setf (source-buffer document) (fred-buffer (real-fred (fred-window source-window))))    (setf (source-file document) (filename source-window))    source-window))(defun open-source-directly (source-file &key position)  (let* ((document (make-instance 'document :source-file (full-pathname source-file))))    (show-source-window document :position position)))(defun GoMan-source ()  (make-new-document *the-librarian*));------------------------------------------------------------------------------------------;------------------------------------------------------------------------------------------