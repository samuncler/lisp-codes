(in-package :oou)(oou-provide :marking-fred-window);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a fred window with a new copy/paste mechanism; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :marking-menus                                :unibas-cursors                                :fred-mixin-ce    ) (export '(marking-fred-window                 ));---------------------------- -------------------------------------(defclass marking-fred-window (fred-window marking-menu-window)    ((copy-menu-item :initform                                      (make-instance 'window-menu-item                                          :menu-item-title "Copy"                                          :menu-item-action #'(lambda (item)                                                                                  (declare (special *action-performed*))                                                                                  (setf *action-performed* t)                                                                                  (eval-enqueue                                                                                    `(let ((container ,(containing-view item)))                                                                                         (copy container)                                                                                         (set-mini-buffer container "Copied")                                                                                         (fred-update container)))))                                     :accessor copy-menu-item)      (cut-menu-item :initform                                    (make-instance 'window-menu-item                                        :menu-item-title "Cut"                                        :menu-item-action #'(lambda (item)                                                                                (declare (special *action-performed*))                                                                                (setf *action-performed* t)                                                                                (eval-enqueue                                                                                   `(let ((container ,(containing-view item)))                                                                                       (declare (special *action-performed*))                                                                                       (cut container)                                                                                       (set-mini-buffer container "Killed region saved")                                                                                       (fred-update container)))))                                   :accessor cut-menu-item)      (paste-menu-item :initform                                       (make-instance 'window-menu-item                                           :menu-item-title "Paste"                                           :menu-item-action #'(lambda (item)                                                                                   (declare (special *action-performed*))                                                                                   (setf *action-performed* t)                                                                                   (eval-enqueue                                                                                     `(let* ((container ,(containing-view item))                                                                                                  (buffer (fred-buffer container))                                                                                                  (start (selection-range container)))                                                                                          (paste container)                                                                                          (set-selection-range container start (buffer-position buffer))                                                                                          (set-mini-buffer container "Pasted")                                                                                          (fred-update container)))))                                      :accessor paste-menu-item))    (:default-initargs       :menu-diameter 120       :menu-floating t       :pop-up-time 200       :on-axis nil       :menu-double-click-action #'(lambda (fred-window)                                                            (paste fred-window)                                                            (set-mini-buffer fred-window "Pasted")                                                            (mini-buffer-update fred-window))))(defmethod selection-p ((self marking-fred-window))    (multiple-value-bind (start end) (selection-range self)         (/= start end)))(defmethod view-cursor ((self marking-fred-window) where)    (if (in-selection self where)        *full-hand-cursor*        (call-next-method)))(defmethod view-click-event-handler :around ((self marking-fred-window) where)    (if (in-selection self where)        (set-menu-items self                                      (paste-menu-item self)                                      (cut-menu-item self)                                      (copy-menu-item self))        (set-menu-items self (paste-menu-item self)))    (let ((*action-performed* nil))        (declare (special *action-performed*))        (cond ((and (selection-p self)                             (in-selection self where))                    (marking-menu-track self where)                    (unless *action-performed*                         (call-next-method)))                  (t (sleep 0.2)                       (let ((new-position (view-mouse-position self)))                           (cond ((or (not (mouse-down-p))                                              (> (abs (- (point-h new-position)                                                                 (point-h where)))                                                   2)                                              (> (abs (- (point-v new-position)                                                                 (point-v where)))                                                   2))                                       (call-next-method))                                     (t (collapse-selection self t)                                           (set-mark (fred-buffer self) (fred-point-position self new-position))                                          (marking-menu-track self where)                                          (unless *action-performed*                                              (call-next-method)))))))))(defmethod set-menu-items ((self marking-fred-window) &rest menu-items)    (apply #'remove-menu-items self (menu-items self))    (apply #'add-menu-items self menu-items))                                                               #|; this will do the paste with a double-click(defmethod view-click-event-handler ((self marking-fred-window) where)    (if (double-click-p)        (menu-double-click-action self)        (if (in-selection self where)            (unless (marking-menu-track self where)                (call-next-method))            (call-next-method))))(defmethod initialize-instance :after ((self marking-fred-window) &rest initargs)    (declare (ignore initargs))    (add-menu-items self                                   (paste-menu-item self)                                   (cut-menu-item self)                                   (copy-menu-item self)))|#;---------------------------------------------------------------------------#|(setf win (make-instance 'marking-fred-window     :view-size #@(300 300)))|#