(in-package :oou)(oou-provide :color-svm);*****************************************************************                                    ;; Copyright © 1996 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; adding background and frame color to a view; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies )(export '(          ));---------------------------------------------------------------------------(defclass color-svm ()  ((back-color :initform nil               :initarg :back-color               :accessor back-color)   (frame-color :initform nil                :initarg :frame-color                :accessor frame-color)   (draw-outline-p :initform nil                   :initarg :draw-outline-p                   :accessor draw-outline-p)))  (defmethod view-draw-contents :around ((view color-svm) &aux (win (view-window view)))  "erase area with appropriate color"  (when (and (view-container view) win)    (with-focused-view view      (rlet ((rect :rect                    :topleft (add-points (view-scroll-position view) #@(0 0))                   :botright (add-points (view-scroll-position view)                                         (subtract-points (view-size view) #@(0 0)))))        (with-back-color (or (back-color view)                             (get-back-color win))          (#_eraserect rect)))      (with-fore-color (if (draw-outline-p view)                         (or (frame-color view)                             (get-back-color win))                         (or (back-color view)                             (get-back-color win)))        (rlet ((rect :rect :topleft #@(0 0)                      :botright (view-size view)))          (#_framerect rect)))))  (call-next-method))#|(defclass colored-view (color-svm view)  ())(defmethod view-click-event-handler ((view colored-view) where)  (declare (ignore where))  (if (control-key-p)    (set-view-position view (add-points (view-position view) #@(-5 -5)))    (set-view-position view (add-points (view-position view) #@(5 5)))))(make-instance 'window  :window-title "click the views"  :window-type :document  :back-color *tool-back-color*  :view-size #@(170 170)  :view-subviews  (list (make-instance 'colored-view          :view-size #@(50 50)          :view-position #@(70 70)          :back-color *dark-gray-color*)        (make-instance 'colored-view          :view-size #@(50 50)          :view-position #@(10 10)          :draw-outline-p t          :frame-color *dark-gray-color*)))(make-instance 'window  :window-type :document  :back-color *tool-back-color*  :view-size #@(800 100)  :view-subviews  (let ((views ))    (dotimes (i 33)      (push (make-instance 'colored-view              :view-size #@(20 20)              :view-position (make-point (* i 20) 20)              :back-color (make-gray-color (* i 3)))            views))    views));*tool-back-color* 86.5% white|#