(in-package :oou)(oou-provide :docu-line-svm);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz ; ; mixin for the mouse-documentation-line.; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(require :QuickDraw)(oou-dependencies                               )(export '(docu-line-svm docu-line-string docu-line-view               print-documentation-string               ));---------------------------------------------------------------------------(defclass docu-line-svm ()   ((docu-line-string :initform ""                                 :initarg :docu-line-string                                 :accessor docu-line-string)     (docu-line-view :initform nil                                :initarg :docu-line-view                                :accessor docu-line-view)     (last-modifiers :initform 128                               :accessor last-modifiers)     (last-string :initform ""                         :accessor last-string)))(defmethod current-docu-string ((self docu-line-svm) &optional where)   (declare (ignore where))   (docu-line-string self))(defmethod current-docu-view ((self docu-line-svm) &optional where)   (declare (ignore where))   (docu-line-view self))(defmethod dialog-item-enabled-p ((self docu-line-svm))   (if (slot-exists-p self 'dialog-item-enabled-p)      (slot-value self 'dialog-item-enabled-p)      t))(defmethod view-mouse-enter-event-handler :around ((self docu-line-svm))   (let ((docu-string (current-docu-string self (view-mouse-position self)))           (docu-view (current-docu-view self)))      (when (and docu-string                        docu-view)          (print-documentation-string docu-view                                                         (if (dialog-item-enabled-p self)                                                            docu-string                                                           "")))      (call-next-method)))(defmethod view-mouse-leave-event-handler :around ((self docu-line-svm))   (let* ((container (view-container self))             (docu-string (and (typep container 'docu-line-svm)                                         (current-docu-string container (view-mouse-position container))))             (docu-view (and (typep container 'docu-line-svm)                                       (current-docu-view container))))      (if (and docu-string                   docu-view)         (print-documentation-string docu-view (if (dialog-item-enabled-p container)                                                                            docu-string                                                                           ""))         (when (current-docu-view self)             (print-documentation-string (current-docu-view self) "")))      (call-next-method)))(defmethod view-cursor :around ((self docu-line-svm) where)  (declare (ignore char))  (with-slots (last-modifiers last-string) self    (let ((view (find-view-containing-point self where)))      (when (typep view 'docu-line-svm)        (let* ((docu-string (current-docu-string view where))               (docu-view (current-docu-view view))               (modifiers (when (boundp '*current-event*)                            (rref *current-event* :EventRecord.modifiers))))          (unless (and (eq modifiers last-modifiers)                       (string= last-string docu-string))            (when docu-view              (print-documentation-string docu-view docu-string))            (setf last-modifiers modifiers)            (setf last-string docu-string)))))    (call-next-method)));---------------------------------------------------------------------------(defmethod print-documentation-string ((self view) docu-string)   (multiple-value-bind (ascent descent widmax leading) (font-info (view-font self))       (declare (ignore widmax))       (move-to self 3 (+ ascent descent leading))       (princ docu-string self)))(defmethod print-documentation-string ((self dialog-item) docu-string)   (set-dialog-item-text self docu-string)   ;(validate-view (view-window self))   (invalidate-view self))(defmethod print-documentation-string ((self fred-item) docu-string)   (set-dialog-item-text self docu-string)   (invalidate-view self));---------------------------------------------------------------------------#|(defclass static-text-with-doc (docu-line-svm button-dialog-item)   ())(defclass view-with-doc (docu-line-svm view)   ())(defmethod current-docu-string ((self view-with-doc) &optional where)   (declare (ignore where))   (cond ((control-key-p) "control key pressed")             ((shift-key-p) "shift key pressed")             ((command-key-p) "command key pressed")             ((option-key-p) "option key pressed")             (t (call-next-method))))(let* ((documentation-line (make-instance 'static-text-dialog-item                                               :view-font '("monaco" 9 :plain)                                               :view-size #@(285 11)                                               :view-position #@(0 100)                                               :dialog-item-text ""))          (first-text (make-instance 'static-text-with-doc                                :view-size #@(100 25)                                :view-position #@(5 5)                                :dialog-item-text "I have a docu"                                :docu-line-string "Some silly documentation"                                :docu-line-view documentation-line))          (second-text (make-instance 'static-text-with-doc                                   :view-size #@(100 25)                                   :view-position #@(180 5)                                   :dialog-item-text "I too"                                   :docu-line-string "is easy to produce"                                   :docu-line-view documentation-line))          (container-view (make-instance 'view-with-doc                                         :view-size #@(285 35)                                         :view-position #@(0 20)                                         :docu-line-string "two button area: press one of the modifier-keys"                                         :docu-line-view documentation-line                                         :view-subviews (list first-text second-text))))   (make-instance 'window       :window-title "Docu line demo"       :window-type :document       :view-position :centered       :view-size #@(285 111)       :view-subviews (list container-view documentation-line)))       |#