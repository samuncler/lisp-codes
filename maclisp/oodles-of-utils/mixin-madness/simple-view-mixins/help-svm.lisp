(in-package :oou)(oou-provide :help-svm);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; The connection to the help system  ; ; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :unibas-macros                              :save-object-gm                              :view-ce                              :unibas-pop-up-menu-di                              )(export '(*the-librarian* help-mixin help-locations help-menu application-label-string                application-label-object default-help install-help-menu jump-in-documentation               window-item-with-available-help menu-item-with-available-help                application-label-exists-p application-label application-items links identifier-string               some-application                application-item-name application-item-help-locations               ));---------------------------------------------------------------------------(defvar *the-librarian* nil)(defclass help-mixin ()   ((help-locations :initform nil                              :initarg :help-locations                              :accessor help-locations)     (help-menu :initform nil                        :accessor help-menu)     (application-label-string :initform nil                                   :initarg :application-label-string                                   :accessor application-label-string)     (application-label-object :initform nil                                              :accessor application-label-object)))(defmethod initialize-instance :after ((self help-mixin) &rest initargs)   (declare (ignore initargs))   (when (typep self 'window)       (setf (help-locations self) (application-item-help-locations self nil))       (eval-enqueue         `(setf (application-label-string ,self) (application-item-name ,self nil)))))(defmethod install-view-in-window :after ((self help-mixin) window)    (setf (help-locations self) (application-item-help-locations self window))   (setf (application-label-string self) (application-item-name self window)))(defmethod application-item-name ((self help-mixin) window)   (declare (ignore window))   (application-label-string self))(defmethod application-item-help-locations ((self help-mixin) window)   (declare (ignore window))   (help-locations self))(defmethod view-click-event-handler :around ((self help-mixin) where)   (cond ((and (control-key-p)                     (shift-key-p)                     (option-key-p)                     (or (eq (find-view-containing-point self where) self)                           (not (typep (find-view-containing-point self where) 'help-mixin))))              (format t "Name of Item: '~A'" (or (application-label-string self)                                                                   (do ((view (view-container self) (view-container view)))                                                                         ((or (null view)                                                                                (and (typep view 'help-mixin)                                                                                        (application-label-string view)))                                                                           (when view                                                                               (application-label-string view)))))))             ((and (control-key-p)                     (not (typep self 'pop-up-menu))                     (or (eq (find-view-containing-point self where) self)                           (not (typep (find-view-containing-point self where) 'help-mixin))))              (unless (help-menu self)                 (install-help-menu self))              (if (menu-items (help-menu self))                 (menu-select (help-menu self) self)                 (default-help self)))             (t (call-next-method))))(defmethod view-cursor :around ((self help-mixin) where)   (declare (ignore where))   (if (control-key-p)      *full-hand-cursor*      (call-next-method)))(defmethod window-close :after ((self help-mixin))   (let ((all-subviews (do ((subvs (all-subviews self) (cdr subvs))                                         (res nil))                                        ((null subvs) (push self res))                                     (when (and (typep (car subvs) 'menu)                                                       (menu-items (car subvs)))                                         (setf res                                                  (nconc res (menu-items (car subvs)))))                                     (push (car subvs) res))))      (unless (wptr self)         (dolist (label (all-existing-application-labels *the-librarian*))            (with-slots (application-items) label                (setf application-items                         (remove-if #'null                                           (nset-difference application-items all-subviews)))                (when (and (null (links label))                                  (or (null (application-items label))                                        (null (car (application-items label)))))                    (setf (all-existing-application-labels *the-librarian*)                             (delq label (all-existing-application-labels *the-librarian*)))))))))(defmethod menu-item-action :around ((self help-mixin))    (if (control-key-p)     (let ((helped-item (menu-item-with-available-help self)))        (if helped-item           (jump-in-documentation (second (car (help-locations helped-item)))                                                   (third (car (help-locations helped-item))))           (default-help self)))     (call-next-method)));(defmethod give-help ((self help-mixin) &optional where);   (declare (ignore where));   (with-slots (document-source label-with-help) self;       (cond ((and document-source;                         (probe-file (full-pathname (format nil "~A.dnet" document-source))));                  (show-document *the-librarian* document-source label-with-help)) ;                 (t (default-help self)))))(defmethod default-help ((self help-mixin))   (message-dialog (format nil                                           "Sorry!~%~%No help for this item available.")))(defmethod (setf application-label-string) :after (label-name-string (self help-mixin))   (when label-name-string       (let* ((predefined-label (application-label-exists-p label-name-string))                 (new-label (make-instance 'application-label                                       :identifier-string label-name-string                                       :application-items                                        (if predefined-label                                           (cons self (application-items predefined-label))                                          (list self))                                       :links (when predefined-label                                                     (links predefined-label)))))          (when predefined-label              (dolist (app-link (links predefined-label))                 (setf (label app-link) new-label))              (setf (all-existing-application-labels *the-librarian*)                       (delq predefined-label (all-existing-application-labels *the-librarian*))))          (setf (application-label-object self) new-label))))(defmethod highlight ((self help-mixin))    (when (wptr self)       (cond ((typep self 'simple-view)                  (highlight-window self))                 ((typep self 'menu)                   (highlight-menu self))                 ((typep self 'menu-item)                   (highlight-menu (menu-item-owner self))))));---------------------------------------------------------------------------(defclass help-menu-item (menu-item)   ((document :initform nil                      :initarg :document                      :accessor document)     (label :initform nil               :initarg :label               :accessor label)))(defmethod menu-item-action ((self  help-menu-item))   (funcall (menu-item-action-function self) self));--------------------------------------------------------------------------(defun install-help-menu (window-or-view)   (let ((all-help-locations (do ((help-locations-found nil)                                                 (examined-view window-or-view                                                                            (view-container examined-view)))                                                ((null examined-view) help-locations-found)                                             (when (and (typep examined-view 'help-mixin)                                                               (help-locations examined-view))                                                 (setf help-locations-found                                                          (append help-locations-found                                                                       (help-locations examined-view)))))))      (setf (help-menu window-or-view)               (make-instance 'real-pop-up-menu                                         :menu-items                                         (do ((locations all-help-locations (cdr locations))                                                (menu-items nil))                                               ((null locations) (nreverse menu-items))                                            (push (make-instance 'help-menu-item                                                                               :menu-item-title (caar locations)                                                                               :document (cadar locations)                                                                               :label (caddar locations)                                                                               :menu-item-action                                                                               #'(lambda (self)                                                                                     (jump-in-documentation (document self)                                                                                                                             (label self))))                                                      menu-items))))      (help-menu window-or-view)))(defun jump-in-documentation (document-source label-with-help)   (if (and document-source               (probe-file (full-pathname (format nil "~A.dnet" document-source))))       (show-document *the-librarian* document-source label-with-help)       (message-dialog (format nil                                               "Sorry!~%~%No help for this item available."))))(defun window-item-with-available-help (window-or-view)   (do ((item window-or-view (view-container item)))         ((or (null item)                (and (typep item 'help-mixin)                        (help-locations item)))           item)))(defun menu-item-with-available-help (menu-item)   (do ((item menu-item (if (typep item 'simple-view)                                        (view-container item)                                        (menu-item-owner item))))         ((or (null item)                (and (typep item 'help-mixin)                        (help-locations item)))           item)))(defun application-label-exists-p (identifier-string)   (find-if #'(lambda (item)                      (string-equal (identifier-string item)                                            identifier-string))                (all-existing-application-labels *the-librarian*)));--------------------------------------------------------------------------(defclass application-label (save-mixin)   ((application-items :initform nil                                 :initarg :application-items                                 :accessor application-items)    (links :initform nil               :initarg :links               :accessor links)     (identifier-string :accessor identifier-string                                  :initarg :identifier-string)     ))(defmethod initialize-instance :after ((new-label application-label) &rest initargs)   (declare (ignore initargs))   (cond ((load-trigger new-label)              (push new-label (all-application-labels-from-file *the-librarian*)))             (t               (let ((old-label (application-label-exists-p (identifier-string new-label))))                   (when old-label                      (setf (links new-label) (links old-label))                      (dolist (link (links old-label))                         (setf (label link) new-label))                      (setf (all-existing-application-labels *the-librarian*)                               (delq old-label (all-existing-application-labels *the-librarian*))))                  (push new-label (all-existing-application-labels *the-librarian*))))))(defmethod default-application-label-message ((self application-label))   (declare (ignore self))   (message-dialog      (format nil                  "Sorry!~%~%This link is not established yet.~%Probably the corresponding application is not available.")     :size #@(350 150)));--------------------------------------------------------------------------(oou-dependencies :unibas-icon-di                              :splitter-di                              :scrollable-fred-di                              :search-di                              :history-gm                              :GoMan-macros                              :GoMan-formatter                              :GoMan-source-window                              :GoMan-destination-window                              :GoMan-librarian                              :GoMan-commands                              );--------------------------------------------------------------------------#|(oou-dependencies :di-with-help)(defun some-application ()   (let* ((window               (make-instance 'window-with-help                                         :help-locations '(("pointer in text" "GoMan;texte:text" "erstes Label"))                                         :window-title "some Application"                                         :view-size (make-point 200 100)                                         :view-position #@(585 300)))             (button-1               (make-instance 'button-dialog-item-with-help                                         :help-locations '(("zweiter pointer in text" "GoMan;texte:text" "zweites Label"))                                         :view-size #@(100 20)                                         :dialog-item-text "first button"                                         :dialog-item-action 'first-button-action))             (button-2               (make-instance 'radio-button-dialog-item-with-help))             (menu (make-instance 'menu-with-help                                                 :menu-title "Application-Menu"))             (menu-item-1 (make-instance 'menu-item-with-help                                                              :menu-item-title "Execute some Action"                                                              :menu-item-action #'(lambda ()                                                                                                  (print "action"))))             (menu-item-2 (make-instance 'menu-item-with-help                                                              :help-locations '(("pointer in text" "GoMan;texte:text" "erstes Label"))                                                              :menu-item-title "Execute another Action"                                                              :menu-item-action #'(lambda ()                                                                                                  (print "another action"))))             (window-menu-item (make-instance 'window-menu-item-with-help                                                              :help-locations '(("pointer in text" "GoMan;texte:text" "window menu item label"))                                                              :menu-item-title "move"                                                              :menu-item-action #'move-it)))      (add-menu-items menu menu-item-1 menu-item-2 window-menu-item)      (menu-install menu)      (set-view-container button-1 window)      (set-view-container button-2 window)      (set-view-position button-1 (make-point 20 20))      (set-view-position button-2 (make-point 20 50))      (setf (application-label-string button-1) "application:buttonlabel")      (setf (application-label-string button-2) "application:radiobuttonlabel")      (setf (application-label-string window) "application:windowlabel")      (setf (application-label-string menu) "application:menulabel")      (setf (application-label-string menu-item-1) "application:menuitemlabel")     window))(defmethod move-it ((self window-with-help))   (set-view-position self 100 100))(defun first-button-action (item)   (declare (special butt))   (setf butt item)   (print item))(defun second-button-action (item)   (print item))|#