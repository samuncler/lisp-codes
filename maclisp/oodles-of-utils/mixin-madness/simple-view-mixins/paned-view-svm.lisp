(in-package :oou)(oou-provide :paned-view-svm);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Mixin for doing the resizing of the subviews of a view. ; ; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :unibas-macros                              :simple-view-ce                              :unibas-cursors                              )(export '(unibas-reshape-mixin subview-description));---------------------------------------------------------------------------(defclass unibas-reshape-mixin ()   ((subview-description :initform nil                                       :initarg :subview-description                                       :accessor subview-description)))(defmethod initialize-instance :around ((self unibas-reshape-mixin) &rest initargs)    (declare (ignore initargs))   (call-next-method)   (dolist (subview (mapcar #'car (subview-description self)))      (set-view-container subview self)))(defmethod set-view-size :around ((self unibas-reshape-mixin) h &optional v)    (let* ((old-view-size (view-size self))             (new-h (if v h (point-h h)))             (new-v (if v v (point-v h)))             (delta-h (- new-h (point-h old-view-size)))             (delta-v (- new-v (point-v old-view-size))))      (adjust-subviews self delta-h delta-v)      (call-next-method)))(defmethod adjust-subviews ((self unibas-reshape-mixin) delta-h delta-v)   (dolist (subview (subview-description self))      (with-slots (view-size view-position) (car subview)          (set-view-size (car subview)                                   (case (cadr subview)                                      (:adjust-h-v (add-points view-size                                                                             (make-point delta-h delta-v)))                                      (:adjust-h (add-points view-size                                                                          (make-point delta-h 0)))                                      (:adjust-v (add-points view-size                                                                          (make-point 0 delta-v)))                                      (:constant view-size)))          (case (cadr subview)             (:constant  (set-view-position (car subview)                                                              (case (caddr subview)                                                                 (:stick-on-topleft view-position)                                                                 (:stick-on-topright (add-points view-position                                                                                                                   (make-point delta-h 0)))                                                                 (:stick-on-bottomleft (add-points view-position                                                                                                                       (make-point 0 delta-v)))                                                                 (:stick-on-bottomright (add-points view-position                                                                                                                         (make-point delta-h delta-v))))))             (:adjust-h (set-view-position (car subview)                                                             (case (caddr subview)                                                                (:stick-on-topleft view-position)                                                                (:stick-on-topright view-position)                                                                (:stick-on-bottomleft (add-points view-position                                                                                                                      (make-point 0 delta-v)))                                                                (:stick-on-bottomright (add-points view-position                                                                                                                        (make-point 0 delta-v))))))             (:adjust-v (set-view-position (car subview)                                                             (case (caddr subview)                                                                (:stick-on-topleft view-position)                                                                (:stick-on-topright (add-points view-position                                                                                                                  (make-point delta-h 0)))                                                                (:stick-on-bottomleft view-position)                                                                (:stick-on-bottomright (add-points view-position                                                                                                                        (make-point delta-h 0))))))))))(defmethod window-zoom-event-handler :around ((self unibas-reshape-mixin) message)    (declare (ignore message))   (let ((original-size (view-size self)))      (call-next-method)      (adjust-subviews self                                    (- (point-h (view-size self))                                       (point-h original-size))                                   (- (point-v (view-size self))                                       (point-v original-size)))))#|for an example see 'paned-view'|#