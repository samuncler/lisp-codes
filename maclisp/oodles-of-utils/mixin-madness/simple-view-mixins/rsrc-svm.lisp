(in-package :oou)(oou-provide :rsrc-svm);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; rsrc-svm.Lisp;;;; Copyright © 1991 Northwestern University Institute for the Learning Sciences;; Copyright ©1991 Institut fuer Informatik, University of Basel, Switzerland;; All Rights Reserved;;;; authors: Michael S. Engber, Northwestern University;;                Dieter Holz, University of Basel;;;; Dialog item mixin for handling resources.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(oou-dependencies :Resources-u                                )(export '(rsrc-svm));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;#|This mixin automates resource access for simple views. Some familiaritywith the ResourceManager (IM I) may be helpful.Initargs :rsrc-type   The resource type (4 character string, e.g. "PICT") :rsrc-id :rsrc-name   The resource can be specified by id or name. The resource will be   read in when the view is installed in a window. It is assumed that   the appropriate resource file will be open at that time. :rsrc-handle   If you already have a handle, it can be specified directly. :detach-p [nil]   Determines if the resource should be detached after it's read in. :dispose-on-remove-p [t]   Determines if the rsrc-handle should be disposed of when the view   is removed from its window. It also controls whether the old rsrc-handle   is disposed of when a new one is installed via set-view-resource.Methods of Interest set-view-resource (sv rsrc-svm) &key rsrc-type rsrc-id rsrc-name rsrc-handle  Changes the resource of view. The keywords have the same meaning as in  make-instance. rsrc-get-fn (sv rsrc-svm) rsrc-type rsrc-id-or-name  The default version uses GetResource. This should be specialized for  resource types that have their own get functions.  (e.g. "cicn" - #_GetCIcon) rsrc-dispose-fn (sv rsrc-svm) rsrc-handle rsrc-handlep  The default version uses DisposeResource for resource handles and  DisposeHandle on vanilla handles. This should be specialized for  resource types that have their own dispose functions. (e.g. "cicn" - #_DisposCIcon)|#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass rsrc-svm ()  ((rsrc-type           :initarg :rsrc-type)   (rsrc-id             :initarg :rsrc-id)   (rsrc-name           :initarg :rsrc-name)   (rsrc-handle         :initarg :rsrc-handle)   (detach-p            :initarg :detach-p)   (dispose-on-remove-p :initarg :dispose-on-remove-p))  (:default-initargs    :dispose-on-remove-p t :detach-p nil))(defmethod install-view-in-window :after ((sv rsrc-svm) window)  (declare (ignore window))  (rsrc-handle-install sv))(defmethod remove-view-from-window :after ((sv rsrc-svm))  (rsrc-handle-remove sv))(defmethod rsrc-handle-install ((sv rsrc-svm))    (with-slots (rsrc-type rsrc-id rsrc-name rsrc-handle detach-p) sv         (cond ((and (slot-boundp sv 'rsrc-handle)                              (handlep rsrc-handle)))                   ((slot-boundp sv 'rsrc-id)                     (setf rsrc-handle (rsrc-get-fn sv rsrc-type rsrc-id)))                   ((slot-boundp sv 'rsrc-name)                     (setf rsrc-handle (rsrc-get-fn sv rsrc-type rsrc-name)))                   (t                     (setf rsrc-handle (rsrc-get-fn sv rsrc-type nil))))         (when (and detach-p (resource-handlep rsrc-handle))              (#_DetachResource rsrc-handle))         rsrc-handle))(defmethod rsrc-handle-remove ((sv rsrc-svm))    (with-slots (rsrc-handle dispose-on-remove-p) sv         (when (and (slot-boundp sv 'rsrc-handle) dispose-on-remove-p)              (rsrc-dispose-fn sv rsrc-handle (resource-handlep rsrc-handle)))         (slot-makunbound sv 'rsrc-handle)))(defmethod set-view-resource ((sv rsrc-svm) &key rsrc-type rsrc-id rsrc-name rsrc-handle)    (when rsrc-type (setf (slot-value sv 'rsrc-type) rsrc-type))    (rsrc-handle-remove sv)    (slot-makunbound sv 'rsrc-id)    (slot-makunbound sv 'rsrc-name)    (cond (rsrc-handle (setf (slot-value sv 'rsrc-handle) rsrc-handle))              (rsrc-id     (setf (slot-value sv 'rsrc-id) rsrc-id))              (rsrc-name   (setf (slot-value sv 'rsrc-name) rsrc-name)))    (when (wptr sv) (rsrc-handle-install sv)))(defmethod rsrc-get-fn ((sv rsrc-svm) rsrc-type rsrc-id-or-name)    (get-resource rsrc-type rsrc-id-or-name))(defmethod rsrc-dispose-fn ((sv rsrc-svm) rsrc-handle rsrc-handlep)    (if rsrc-handlep        (#_ReleaseResource rsrc-handle)        (#_DisposeHandle rsrc-handle)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;