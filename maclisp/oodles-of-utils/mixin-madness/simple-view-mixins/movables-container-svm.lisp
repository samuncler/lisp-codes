(in-package :oou)(oou-provide :movables-container-svm);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Mixin for adjusting the subviews at a specific grid; ; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :unibas-macros                              :simple-view-ce                              :autoscrollable-dim                              )(export '(movables-container-svm grid-size snap-to-grid-p));---------------------------------------------------------------------------(defclass movables-container-svm (autoscrollable-dim)   ((grid-size :initform #@(100 60)                     :initarg :grid-size                     :accessor grid-size)     (snap-to-grid-p :initform t                               :initarg :snap-to-grid-p                               :accessor snap-to-grid-p)))(defmethod view-click-event-handler :before ((self movables-container-svm) where)   (rlet ((view-rect :rect                               :topleft #@(0 0)                               :bottomright #@(0 0)))      (let ((subviews (subviews self 'shrinked-pict)))         (unless (dolist (view subviews)                         (rset view-rect :rect.topleft (view-top-left view))                         (rset view-rect :rect.bottomright (view-bottom-right view))                         (when (point-in-rect-p view-rect where)                             (return t)))            (when subviews                (deselect-all (car (subviews self 'shrinked-pict)) :draw-now-p t))))))(defmethod next-grid-position ((self movables-container-svm) position &optional (offset #@(5 5)))   (let ((grid-size-h (point-h (grid-size self)))           (grid-size-v (point-v (grid-size self))))      (make-point        (+ (* (floor (point-h position) grid-size-h)                 grid-size-h)            (point-h offset))        (+ (* (floor (point-v position) grid-size-v)                 grid-size-v)            (point-v offset)))))(defmethod set-view-at-grid-position ((self movables-container-svm) subview delta)   (let* ((grid-size-h (point-h (grid-size self)))             (grid-size-v (point-v (grid-size self)))             (new-position                (if (snap-to-grid-p self)                  (make-point                    (+ (* (round (+ (view-left subview) (point-h delta)) grid-size-h)                             grid-size-h)                        (- grid-size-h                            (view-width subview)))                    (- (* (round (+ (view-bottom subview) (point-v delta))                                       grid-size-v)                             grid-size-v)                        (view-height subview)))                  (make-point (+ (view-left subview) (point-h delta))                                      (+ (view-top subview) (point-v delta))))))      (rlet ((visible-rect :rect                                      :topleft (add-points (view-scroll-position self) #@(5 5))                                     :bottomright (add-points (add-points (view-scroll-position self)                                                                                                (view-size self))                                                                             #@(5 5))))         (if (or (point-in-rect-p  visible-rect new-position)                    (point-in-rect-p  visible-rect (add-points new-position (view-size subview))))            (set-view-position subview new-position)            (let ((global-position (view-to-global self new-position)))               (unless (eq (front-window) (view-window self))                  (window-select (view-window self)))               (make-view-completely-visible subview)               (implode global-position                              (add-points global-position (view-size subview))                              (view-to-global subview #@(0 0))                              (view-to-global subview (view-size subview))                              :delay 0.01))))))