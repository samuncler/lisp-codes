(in-package :oou)(oou-provide :command-key-pup-mixin);*****************************************************************                                    ; ; Copyright © 1995-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; adding command-key behaviour to pop-up-menus; ;; Changes (worth to be mentioned):; ------------------------------;;*****************************************************************;*****************************************************************(oou-dependencies :simple-view-ce                  :view-ce                  :highlight)(export '(command-key-pup-mixin));---------------------------------------------------------------------------(defclass  command-key-pup-mixin ()  ())(defun check-command-keys ()  (when (and (boundp '*current-event*)             (command-key-p)             (= (rref *current-event* :EventRecord.what) 3))    (consume-own-command-keys (front-window)                              (code-char                                (#_BitAnd                                 (rref *current-event* :EventRecord.message)                                 #$CharCodeMask)))))(defun consume-own-command-keys (window  char &aux all-command-keys command-key-item)  (labels ((get-command-keys (item)             (cond ((null item) nil)                   ((listp item)                     (get-command-keys (car item))                    (get-command-keys (cdr item)))                   ((typep item 'pop-up-menu)                    (get-command-keys (menu-items item)))                   ((typep item 'menu-item)                    (when (command-key item)                      (push (cons (command-key item) item) all-command-keys)))                   ((typep item 'menu)                    (get-command-keys (menu-items item)))))           (pup (item)             (if (or (typep item 'menu-item)                     (not (typep item 'pop-up-menu)))               (pup (menu-item-owner item))               item))           (set-default-item (item pos)             (cond ((typep item 'pull-down-menu)                    (set-pop-up-menu-default-item item 0))                   ((typep item 'pop-up-menu)                    (set-pop-up-menu-default-item item pos))                   ((or (typep item 'menu-item)                        (typep item 'menu))                    (set-default-item (menu-item-owner item)                                      (1+ (position item (menu-items (menu-item-owner item)))))))))    (if window      (get-command-keys (all-subviews window 'pop-up-menu)))    (setf command-key-item (cdr (find char all-command-keys :test #'char-equal :key #'car)))    (if command-key-item      (progn        (flash (pup command-key-item))        (menu-item-update command-key-item)        (when (menu-item-enabled-p command-key-item)          (set-default-item command-key-item nil)          (with-cursor *watch-cursor*            (menu-item-action command-key-item)))        t)      nil)))(defmethod view-activate-event-handler :before ((self command-key-pup-mixin))   (if (listp *eventhook*)    (pushnew #'check-command-keys *eventhook*)    (setf *eventhook* (list *eventhook* #'check-command-keys))))(defmethod view-deactivate-event-handler :after ((self command-key-pup-mixin))   (setf *eventhook* (if (listp *eventhook*)                      (delq #'check-command-keys *eventhook*)                      *eventhook*)));----------------------------------------------------------------------------------#|(defclass extended-pop-up-menu (command-key-pup-mixin pop-up-menu)   ())(defclass extended-pull-down-menu (command-key-pup-mixin pull-down-menu)   ())(defclass extended-menu (command-key-pup-mixin menu)   ())(make-instance 'window  :view-size #@(230 60)  :auto-position :centermainscreen  :window-title "Command-key Pop-Up"  :window-type :document  :view-subviews   (list (make-instance 'extended-pop-up-menu          :menu-items          (list           (make-instance 'menu-item             :command-key #\1             :menu-item-title "item one"             :menu-item-action #'(lambda ()                                   (print 1)))           (make-instance 'menu-item             :command-key #\W             :menu-item-title "item two"             :menu-item-action #'(lambda ()                                   (print 2)))           (make-instance 'extended-menu             :menu-item-title "item three"             :menu-items             (list               (make-instance 'menu-item                :command-key #\A                :menu-item-title "item AAA"                :menu-item-action #'(lambda ()                                      (print "aaa")))              (make-instance 'menu-item                :command-key #\B                :menu-item-title "item BBB"                :menu-item-action #'(lambda ()                                      (print "BBB")))))))        (make-instance 'extended-pull-down-menu          :item-display "Wowie"          :view-position #@(10 30)          :menu-items          (list           (make-instance 'menu-item             :menu-item-title "item one"             :menu-item-action #'(lambda ()                                   (print 1)))           (make-instance 'menu-item             :command-key #\2              :menu-item-title "item two"             :menu-item-action #'(lambda ()                                   (print 2)))           (make-instance 'menu-item             :menu-item-title "item three"             :menu-item-action #'(lambda ()                                   (print 3)))))))|#