(in-package :oou)(oou-provide :picture-dim);*****************************************************************                                    ;; Copyright © 1991-95 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Dialog item mixin for for items with pictures in them. The picture is always ; adjusted to the view's size; ;; Changes (worth to be mentioned):; ------------------------------; April 1995   Dieter : Minor Changes for MCL 3.0;;*****************************************************************;*****************************************************************(require :pict-scrap)(oou-dependencies :simple-view-ce                              :view-ce                              :PICT-u                              :pict-svm                              :resources-u                              :quickdraw-u                              :screen-safer                              )(export '(picture-dim get-picture-from-view draw-picture-in-view));-------------------------------------------------------------------------- (defmethod get-picture-from-view ((self simple-view))   (rlet ((view-rect :rect                              :topleft (view-to-window self #@(1 1))                              :bottomright (subtract-points (view-to-window self (view-size self))                                                                              #@(2 2))))     (save-screen-map (view-window  self) view-rect)))(defmethod get-picture-from-view ((pict-window window))    (save-screen-map pict-window (pref (wptr pict-window) windowrecord.portrect)))(defun draw-picture-in-view (view picture)   (erase-view view)   (rlet ((r :Rect                  :topleft #@(0 0)                 :bottomright (view-size view)))      (with-focused-view view           (Draw-PICT picture r))));---------------------------------------------------------------------------(defclass picture-dim (pict-svm)    ((rsrc-handle :initform nil                         :initarg :picture                         :accessor picture)     (margin :initform 0                  :initarg :margin                  :accessor margin))   (:default-initargs      :detach-p t     :rsrc-handle nil     :rsrc-id nil))(defmethod graphic-margins ((self picture-dim))   (values (make-point (margin self) (margin self))                (make-point (margin self) (margin self))))(defmethod add-pict-to-rsrc-file ((self picture-dim) &key                                                            (pict (slot-value self 'rsrc-handle))                                                            (filename (slot-value self 'rsrc-file))                                                            (id (slot-value self 'rsrc-id))                                                            (name "some picture"))   (let ((res-file-open-p (opened-res-file-p filename)))      (when id          (with-res-file (filename :if-does-not-exist :create                                                  :if-no-rsrc-fork :create                                                  :if-not-open :leave-open)              (unless (%null-ptr-p (#_GetPicture id))                 (delete-pict-from-file self filename id))))      (let ((res (add-resource-to-file pict filename "PICT"                                                          :name name :id id                                                         :if-not-open :leave-open)))         (load-resource res)         (multiple-value-bind (new-id type new-name) (get-resource-info res)             (declare (ignore type))             (setf (slot-value self 'rsrc-id) new-id)             (setf (slot-value self 'rsrc-name) new-name))         (#_DetachResource res)         (unless res-file-open-p            (close-res-file filename))         res)))(defmethod delete-pict-from-file ((self picture-dim) &optional                                                              (filename (slot-value 'rsrc-file self))                                                             (id-or-name "some picture"))   (delete-resource-from-file id-or-name "PICT" filename))(defmethod pict-size ((self picture-dim))   (with-slots (rsrc-handle) self       (when (handlep rsrc-handle)           (subtract-points (rref rsrc-handle picture.PicFrame.bottomright)                                      (rref rsrc-handle picture.PicFrame.topleft)))))#|this is also called by 'hide-subview'         (defmethod remove-view-from-window :after ((self picture-dim))   (with-slots (picture) self       (when picture           (dispose-record picture))))|#; this is called whenever a window is closed !! (umph !)(defmethod window-close :around ((self view))   (let ((all-picture-dims (all-subviews self 'picture-dim)))      (call-next-method)       (unless (wptr self)         (mapcar #'(lambda (picture-dim)                             (release-picture-handle picture-dim))                       all-picture-dims))))(defmethod release-picture-handle ((sv picture-dim))   (when (slot-boundp sv 'rsrc-handle)       (with-slots (rsrc-handle) sv           (when rsrc-handle               (release-handle rsrc-handle)               (slot-makunbound sv 'rsrc-handle)))))   (defmethod rsrc-handle-remove ((sv picture-dim)) nil)(defun copy-PICT (pict)   (when (handlep pict)       (copy-handle pict)))#|          (let ((pict-size (subtract-points (href pict :picture.PicFrame.bottomright)                                                           (href pict :picture.PicFrame.topleft))))          (start-picture *Wmgr-view* #@(0 0) pict-size)          (draw-picture  *Wmgr-view* pict #@(0 0) pict-size)          (get-picture *Wmgr-view*))))|#(defvar *Picture-dim-in-scrap* nil)(defun get-picture-from-scrap ()   (and *Picture-dim-in-scrap*           (slot-boundp *Picture-dim-in-scrap* 'rsrc-handle)           (get-scrap :pict)           *Picture-dim-in-scrap*))(defmethod copy ((self picture-dim))   (with-slots (rsrc-handle) self       (if (handlep rsrc-handle)          (progn             (setf *Picture-dim-in-scrap* self)             (put-scrap :pict (copy-PICT rsrc-handle)))          (ed-beep))))(defmethod clear ((self picture-dim))   (with-slots (rsrc-handle rsrc-id) self       (when (handlep rsrc-handle)           (if (resource-handlep rsrc-handle)              (#_ReleaseResource rsrc-handle)              (#_DisposeHandle rsrc-handle))           (when (view-container self)               (set-view-container self nil)))))(defmethod cut ((self picture-dim))   (copy self)   (clear self))#|(oou-dependencies :layout-mixin)(defclass test-picture-dialog-item (picture-dim view)   ())(defmethod view-draw-contents :after ((self test-picture-dialog-item))   (view-frame-with-shade self))(defclass test-win (layout-mixin window)   ())(make-instance 'test-win    :window-title "A copy of the top-listener"    :view-size #@(200 200)    :view-position :centered    :layout    (:vbox ()              20              (:hbox ()                        20                        (:fbox () (make-instance 'test-picture-dialog-item                                          :view-size #@(31  37)                                          :view-position #@(10 10)                                          ;:rsrc-file "oou:resources stuff"                                          ;:rsrc-id 133                                          ;:PICT-scaling :scale-to-view                                          :picture (get-picture-from-view *top-listener*)                                          ))                        20)              20))                            (copy pic)(paste pic)(slot-value pic 'rsrc-handle)(opened-res-file-p "oou;test.lisp")(add-PICT-to-rsrc-file pic)(close-res-file "oou;test.lisp")(graphic-size pic (slot-value pic 'rsrc-handle))(open-res-file "oou;test.lisp")(window-close (view-window pic))(point-string (pict-size pic))|#