(in-package :oou)(oou-provide :static-text-dim);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Michael S. Engber, some additions from Dieter Holz ; ; mixin for adding static text to dialog items;; Changes (worth to be mentioned):; ------------------------------; 10/30/1991 Dieter: 'view-draw-contents' now focusses on the container of the ;                                  static text;;*****************************************************************;*****************************************************************(oou-dependencies :simple-view-ce                              )(export '(static-text-dim text-just));---------------------------------------------------------------------------#|This mixin provides static text imaging for dialog items.Initargs :text-just   Determines the text justification. Allowed values are :left, :right,   and :center.Methods of Interest text-just (di static-text-dim)  Returns the current justification, :left, :right, or :center. Use  with setf to change the justification. text-margins (di static-text-dim)   Returns margins for indenting the text as two points (topLeft, botRight).   Specialize this method to control text placement. text-string (di static-text-dim)   Returns the string to be displayed. Currently it is limited to 255   characters. The default method uses dialog-item-text.|#;--------------------------------------------------------------------------(defclass static-text-dim ()  ((text-just))  (:default-initargs :text-just :center))(defmethod initialize-instance :after ((di static-text-dim) &rest initargs &key text-just)  (declare (dynamic-extent initargs)           (ignore initargs))  (setf (text-just di) text-just))(defmethod view-draw-contents :after ((di static-text-dim))  (with-focused-view (view-container di)     (multiple-value-bind (topLeft botRight) (text-corners di)         (rlet ((r :Rect                       :topLeft topLeft                       :bottomRight botRight))            (with-pstrs ((s (text-string di)))                (with-fore-color (getf (part-color-list di) :text *black-color*)                    (#_TextBox (%inc-ptr s 1) (%get-unsigned-byte s) r (slot-value di 'text-just ))))))))(defmethod text-just ((di static-text-dim))  ;;internally text-just is stored as the corresponding ToolBox constant  (ecase (slot-value di 'text-just)    (#.#$teJustLeft :left)    (#.#$teJustCenter :center)    (#.#$teJustRight :right)))(defmethod (setf text-just) (new-text-just (di static-text-dim))  ;;internally text-just is stored as the corresponding ToolBox constant  (setf (slot-value di 'text-just) (ecase new-text-just                                     (:left #.#$teJustLeft)                                     (:center #.#$teJustCenter)                                     (:right #.#$teJustRight)))  (invalidate-view di)  new-text-just)(defmethod text-margins ((di static-text-dim))  (declare (ignore di))  (values #@(0 0) #@(0 0)))(defmethod text-corners ((di static-text-dim))   (multiple-value-bind (topLeft botRight) (view-corners di)      (multiple-value-bind (tl-margin br-margin) (text-margins di)          (values (add-points topLeft tl-margin) (subtract-points botRight br-margin)))))(defmethod text-string ((di static-text-dim))  (dialog-item-text di))