(in-package :oou)(oou-provide :special-events-dim);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; A mixin for windows. Could handle some new events and updates the cursor; ;; Changes (worth to be mentioned):; ------------------------------; 6/96 Dieter : *current-event* sometimes not bound ;;;*****************************************************************;*****************************************************************(oou-dependencies :unibas-cursors                  :simple-view-ce                  ) (export '(special-events-dim));--------------------------------------------------------------------------(defun unibas-cursorhook (&aux wob)  (declare (ccl::resident))  (rlet ((pt :point)         (wptr-ptr :pointer))    (#_GetMouse pt)    (#_LocalToGlobal pt)    (#_FindWindow  (%get-long pt)  wptr-ptr)    (with-macptrs ((wptr (%get-ptr wptr-ptr)))      (if (and (not (%null-ptr-p (%get-ptr wptr)))               (setq wob (window-object wptr))               (or (eq wob ccl::*selected-window*)                    (typep wob 'windoid)                   (setq wob nil)))        (with-focused-view wob          (#_GlobalToLocal pt)))      (window-update-cursor wob (%get-long pt)))))(defun window-at-position (&optional (global-position (view-mouse-position nil)))  (rlet ((wptr :pointer))    (let ((window-part (#_FindWindow global-position wptr)))      (%setf-macptr wptr (%get-ptr wptr))      (values (window-object wptr)              window-part))))(defun set-window-part ()  (when (boundp '*current-event*)    (rlet ((wptr :pointer))      (%put-word *current-event*                  (#_FindWindow (rref *current-event*  :EventRecord.where) wptr)                 16))))(defun get-window-part ()  (when (boundp '*current-event*)     (%get-word *current-event* 16)));---------------------------------------------------------------------------(defclass special-events-dim ()  ())(defmethod view-activate-event-handler :before ((self special-events-dim))  (setf *cursorhook* 'unibas-cursorhook))(defmethod view-deactivate-event-handler :after ((self special-events-dim))  (setf *cursorhook* 'ccl::cursorhook))(defmethod window-event :before ((self special-events-dim))  (set-window-part))(defmethod view-cursor :around ((self special-events-dim) where)  (declare (ignore where))  (case (get-window-part)    (0 (call-next-method))           ;in nothing    (1 (call-next-method))           ; in menu bar    (2 (call-next-method))           ;in system window    (3 (call-next-method))           ; in content region    (4 *full-hand-cursor*)           ; in drag region    (5 *full-hand-cursor*)           ; in grow region    (6 *pointer-hand-cursor*)      ; in go away region    (7 *pointer-hand-cursor*)      ; in shrink box    (8 *pointer-hand-cursor*)      ; in zoom box    (t (call-next-method))));---------------------------------------------------------------------------(defmethod window-event :before ((self windoid))   (set-window-part));---------------------------------------------------------------------------#|(defclass test-window (special-events-dim window)  ())(make-instance 'test-window)|#