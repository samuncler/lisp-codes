(in-package :oou)(oou-provide :receive-finder-drags);******************************************************************************                                    ;; Copyright © 1995 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; mixin for the System 7.5 drag&drop Manager. Only for receiving drops from other ; applications. Drags outside of MCL are not supported;; Changes (worth to be mentioned):; ------------------------------; ;;*******************************************************************************;*******************************************************************************(oou-dependencies :receive-drag                  :processes) (export '(          ));-------------------------------------------------------------------------------(defvar *last-real-view* nil)(defclass receive-finder-drags-mixin ()  ((accepted-flavors :initform '(:|TEXT| :|hfs |)                     :accessor accepted-flavors                     :initarg :accepted-flavors))) (defmethod flavor-is-accepted ((view receive-finder-drags-mixin) flavor)  (find flavor (accepted-flavors view) :test #'eq))(defmethod drag-tracking-enter-view ((view receive-finder-drags-mixin))  (when (drag-is-droppable-p view)     (setf *last-real-view* view)    (view-drag-hilite view t)    (let ((win (view-window view)))      (with-drag-items (item-reference win)        (cond ((drag-item-flavor-exists-p win :|TEXT| item-reference)               (draggable-view-enters view :|TEXT| (drag-mouse-location (view-window view) nil)))              ((drag-item-flavor-exists-p win :|hfs | item-reference)               (draggable-view-enters view :|hfs | (drag-mouse-location (view-window view) nil))))))))(defmethod ccl::drag-tracking-in-view ((view receive-finder-drags-mixin))  (when (drag-is-droppable-p view)    (let ((win (view-window view)))      (with-drag-items (item-reference win)        (cond ((drag-item-flavor-exists-p win :|TEXT| item-reference)               (draggable-dim-is-above view :|TEXT| (drag-mouse-location (view-window view) nil)))              ((drag-item-flavor-exists-p win :|hfs | item-reference)               (draggable-dim-is-above view :|hfs | (drag-mouse-location (view-window view) nil))))))))(defmethod drag-tracking-leave-view ((view receive-finder-drags-mixin))  (let ((win (view-window view)))    (with-drag-items (item-reference win)      (cond ((drag-item-flavor-exists-p win :|TEXT| item-reference)             (draggable-view-leaves view :|TEXT| (drag-mouse-location (view-window view) nil)))            ((drag-item-flavor-exists-p win :|hfs | item-reference)             (draggable-view-leaves view :|hfs | (drag-mouse-location (view-window view) nil))))))  (view-drag-hilite view nil))(defmethod drag-receive-drag ((view receive-finder-drags-mixin))  (when (drag-is-droppable-p view)    (view-drag-hilite view nil)    (let ((win (view-window view)))      (with-drag-items (item-reference win)        (cond ((drag-item-flavor-exists-p win :|TEXT| item-reference)               (when (flavor-is-accepted view :|TEXT|)                 (accept-drag view                               (convert-flavor-type view :|TEXT| item-reference)                               (drag-mouse-location win nil))))              ((drag-item-flavor-exists-p win :|hfs | item-reference)               (when (flavor-is-accepted view :|hfs |)                 (accept-drag view                               (convert-flavor-type view :|hfs | item-reference)                               (drag-mouse-location win nil))))))      t)))(defmethod accept-drag ((view receive-finder-drags-mixin) converted-flavor &optional (global-mouse (view-mouse-position nil)))  (process-run-function "execute drop"                        #'(lambda (view mouse-pos)                             (ccl::select-mcl)                            (window-select (view-window view))                            (dropped view converted-flavor #@(0 0) mouse-pos))                        view global-mouse)  t)            (defmethod drag-is-droppable-p ((view receive-finder-drags-mixin))  (let* ((droppable nil)         (win (view-window view))         (actual-pos (view-mouse-position nil)))    (and ;(not (drag-within-sender-application-p (view-window view)))     (not (drag-within-sender-view-p view))     (eq (ccl::find-view-containing-global-point win actual-pos) view)     (with-drag-items (item-reference win)       (when (or (and (drag-item-flavor-exists-p win :|TEXT| item-reference)                      (flavor-is-accepted view :|TEXT|))                 (and (drag-item-flavor-exists-p win :|hfs | item-reference)                      (flavor-is-accepted view :|hfs |)                      ;(text-file-p view item-reference)                      ))         (setf droppable t))))    droppable))(defmethod dropped ((view receive-finder-drags-mixin) flavor-type offset global-where)  (declare (ignore flavor-type offset global-where))  (ed-beep))(defmethod text-file-p ((view receive-finder-drags-mixin) item-reference)  (with-drag-item-flavor-data (fsspec (view-window view) #$flavorTypeHFS item-reference)    (eql (pref fsspec :HFSFlavor.fileType) :|TEXT|)))                   (defmethod convert-flavor-type ((view receive-finder-drags-mixin) flavor-type item-reference)  (declare (ignore flavor-type item-reference))  nil)(defmethod convert-flavor-type ((view receive-finder-drags-mixin) (flavor-type (eql :|hfs |)) item-reference)  (let ((my-window (view-window view)))    (with-drag-item-flavor-data (fsspec my-window flavor-type item-reference)      (let ((path (%path-from-fsspec (pref fsspec :HFSFlavor.fileSpec))))        (when (and path                   (full-pathname path)                   (or (probe-file (full-pathname path))                       (directoryp (full-pathname path))))          (full-pathname path))))))(defmethod convert-flavor-type ((view receive-finder-drags-mixin) (flavor-type (eql :|TEXT|)) item-reference)  (let ((my-window (view-window view)))    (with-drag-item-flavor-data (text-ptr my-window flavor-type item-reference)      (let* ((size (#_GetPtrSize text-ptr))             (new-string (make-string size)))        (without-interrupts         (dotimes (counter size)           (setf (elt new-string counter) (code-char (%get-byte text-ptr counter))))         new-string)))))(defmethod hide-drag-rect-p ((self receive-finder-drags-mixin) flavor-type global-position)   (declare (ignore flavor-type global-position))    nil)(defmethod hide-drag-rect-p ((self receive-finder-drags-mixin) (draggable-view draggable-dim) global-position)  (declare (ignore global-position))   (and (neq (last-real-target draggable-view) self)       (last-real-target draggable-view)       (neq (view-container (last-real-target draggable-view)) self)))(defmethod draggable-dim-is-above ((view receive-finder-drags-mixin) flavor-type where)  (declare (ignore flavor-type where))  nil)(defmethod draggable-view-enters ((self receive-finder-drags-mixin) flavor-type global-mouse-pos)    (declare (ignore flavor-type global-mouse-pos))    nil)(defmethod draggable-view-enters ((view receive-finder-drags-mixin) flavor-type where)  (declare (ignore flavor-type where))  nil)(defmethod draggable-view-leaves ((view receive-finder-drags-mixin) flavor-type where)  (declare (ignore flavor-type where))  nil);-----------------------------------------------------------------------------------------; extended method to assure correct auto-scrolling      (defmethod drag-tracking-in-view :after ((view simple-view))  ;(maybe-do-autoscroll view)  )(defmethod maybe-do-autoscroll ((view simple-view))  (when (and (boundp '*last-real-view*)              *last-real-view*             (wptr *last-real-view*)             (typep *last-real-view* 'autoscrollable-dim)             (not (eq view *last-real-view*)))    (let ((scroll-direction (in-auto-scroll-part *last-real-view* (view-mouse-position nil))))      (when scroll-direction         (do-autoscroll *last-real-view* scroll-direction nil)))))(defmethod drag-tracking-leave-handler :after ((window t))  (declare (ignore window))  (setf *last-real-view* nil));-----------------------------------------------------------------------------------------#|(defclass receive-finder-drags-window (window drag-&-drop-window-mixin)  ())(defclass test-view (view receive-finder-drags-mixin)  ())(defmethod view-draw-contents :after ((view  test-view))  (view-frame view))(defmethod dropped ((view test-view) (path pathname) offset global-where)  (declare (ignore flavor-type offset global-where))  (print (full-pathname path))  t)(defmethod dropped ((view test-view) (str string) offset global-where)  (declare (ignore flavor-type offset global-where))  (print str)  t)(make-instance 'receive-finder-drags-window  :view-subviews (list (make-instance 'test-view                         :view-position #@(10 10)                         :view-size #@(50 50))))|#;--------------------------------------------------------------------------------