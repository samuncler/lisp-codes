(in-package :oou)(oou-provide :resizable-dim);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Dialog item mixin for resizing dialog items.; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :unibas-macros                              :unibas-cursors                              :simple-view-ce                              )(export '(resizable-dim handle-size));--------------------------------------------------------------------------(defclass resizable-dim ()   ((min-size :initform #@(30 25)                     :initarg :min-size                     :accessor min-size)     (handle-size :initform *handle-size*                          :initarg :handle-size                          :accessor handle-size)))(defmethod drag-view-size ((self resizable-dim) (container view))  (let ((new-rect (drag-rect container                                             (view-top-left self)                                            (view-bottom-right self)                                            (point-h (min-size self))                                            (point-v (min-size self)))))     (cond ((empty-rect-p new-rect) nil)               (t                 (let ((old-size (view-size self))                         (old-position (view-position self)))                    (unless (= old-position (rref new-rect :rect.topleft))                       (set-view-position self (rref new-rect :rect.topleft)))                    (set-view-size self (subtract-points (rref new-rect :rect.bottomright)                                                                               (rref new-rect :rect.topleft)))                    (validate-view (view-window self))                    (invalidate-corners (view-container self) old-position                                                    (add-points old-position old-size) t)                    (invalidate-view self))))     (dispose-record new-rect)))     (defmethod drag-rect ((self view) &optional (start (view-mouse-position self))                                      (pos (view-mouse-position self))                                      (min-h 25)                                      (min-v 25))   (let ((rect (make-record :rect))           p1 p2)      (with-pen (:PatXor *gray-pattern* 1 1 self)          (setf p1 (view-mouse-position self))          (setf p2 p1)          (points-to-rect start pos rect)          (frame-rect self rect)          (loop             (setf p2 (view-mouse-position self))             (cond ((mouse-down-p)                        (unless (= p1 p2)                           (points-to-rect start pos rect)                           (frame-rect self rect)                           (setf pos (add-points pos (subtract-points p2 p1)))                           (let ((width (- (point-h p2) (point-h start)))                                   (height (- (point-v p2) (point-v start))))                              (setf pos (make-point (cond ((and (minusp width)                                                                                   (> width (- min-h)))                                                                            (- (point-h start) min-h))                                                                           ((and (>= width 0)                                                                                    (< width min-h))                                                                             (+ (point-h start) min-h))                                                                           (t (point-h p2)))                                                                 (cond ((and (minusp height)                                                                                   (> height (- min-v)))                                                                            (- (point-v start) min-v))                                                                           ((and (>= height 0)                                                                                    (< height min-v))                                                                             (+ (point-v start) min-v))                                                                           (t (point-v p2))))))                           (setf p1 p2)                           (points-to-rect start pos rect)                           (frame-rect self rect)))                       (t (points-to-rect start pos rect)                           (frame-rect self rect)                           (return t)))))         (points-to-rect start pos rect)))(defmethod view-draw-contents :around ((self resizable-dim))   (let ((needs-update (view-needs-update self)))      (call-next-method)      (when needs-update          (view-frame self)          (view-draw-bottom-right-handle self (handle-size self)))))(defmethod view-click-event-handler :around ((self resizable-dim) p)    (if (point-in-bottomright-p self                                                (if (typep self 'view)                                                  (view-to-container self p)                                                  p))      (progn (drag-view-size self (view-container self))                 (when (view-overlapped-p self)                     (view-bring-to-front self)))      (call-next-method)))(defmethod view-cursor :around ((self resizable-dim) point)   (if (point-in-bottomright-p self (view-to-container self point))      *full-hand-cursor*      (call-next-method)))#|(defclass resizable-view-test (resizable-dim simple-view)   ())(defmethod view-draw-contents :after ((self resizable-view-test))   (view-erase self)   (view-frame self)   (move-to self #@(5 20))   (princ "Resize me" self))    (make-instance 'window                          :view-size #@(300 300)                          :view-subviews                          (list                             (make-instance 'view                                                      :view-size #@(300 150)                                                      :view-subviews                                                      (list                                                         (make-instance 'resizable-view-test                                                                                  :view-size #@(70 30)                                                                                  :view-position #@(10 10))                                                        (make-instance 'resizable-view-test                                                                                  :handle-size 10                                                                                  :view-size #@(70 30)                                                                                  :view-position #@(10 50))))))                            ;-----------------------------------------------------------------------------(oou-dependencies :droppable-dim)(defun print-target (di target offset where)  (format t "dropped ~s onto ~s at ~a (delta = ~a)~%"          (dialog-item-text di)          (dialog-item-text target)          (point-string where)          (point-string offset)))(defclass resizable-and-droppable-view-test (resizable-dim droppable-dim simple-view)   ())(defmethod view-cursor ((self resizable-and-droppable-view-test) point)   (declare (ignore point))   *full-hand-cursor*)(defmethod view-draw-contents :after ((self resizable-and-droppable-view-test))   (view-erase self)   (view-frame self)   (move-to self #@(5 20))   (princ "Drag drop or resize me" self))(make-instance 'window                          :view-size #@(300 300)                          :view-subviews                          (list                             (make-instance 'resizable-and-droppable-view-test                                                      :view-size #@(150 30)                                                      :view-position #@(10 10)                                                      :drop-action-fn #'print-target                                                      :drag-end-action-fn #'(lambda (di delta pt)                                                                                            (declare (ignore pt))                                                                                            (offset-view-position di delta))                                                      :drag-bounds :container)))                                          |#