(in-package :ccl)(provide :droppable-dim);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; droppable-dim.Lisp;;;; Copyright © 1991 Northwestern University Institute for the Learning Sciences;; Copyright © 1992 Instiut fuer Informatik, University of Basel, Switzerland;;;; All Rights Reserved;;;; authors: Michael S. Engber;;               Dieter Holz;;;; Dialog item mixin for dragging & dropping dialog items;;;;  2/14/92 Dieter : Changed the default of the drop-target-class to 'drop-target-dim;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(eval-when (:compile-toplevel :load-toplevel :execute)  (require :draggable-dim)  (require :simple-view-ce)  )(export '(droppable-dim drop-target-dim));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;#|This mixin allows a dialog item to be dragged and deposited into targets.It handles hiliting during the drag when the item is over a legal droptarget. The functionality is much like dragging files over folder in theFinder (especially when combined with selectable-dim)This class is a specialization of draggable-dim. If the item is droppedonto a legal target, drop-action is executed rather than drag-end-action.If it is dragged elsewhere, drag-end-action is called instead.See Also draggable-dim  - inherited behavior selectable-dim - for dropping multiple itemsInitargs :drop-target-class ['drop-target-dim]   Legal drop target candidates inherit from this class.  :drop-targets [no default]   A list of view-nick-names to be considered legal drop targets.   If not supplied, any object in drop-target-class is legal. Item's can't   be dropped onto themselves, so don't worry about excluding yourself   form your own drop-targets list. :drop-action-fn [no default]   The default drop-action method calls the function stored in this slot.   The function should accept 4 arguments, the item dragged, the drop target,   the change in mouse position as a point (delat-h,delta-v), and the final   mouse position as a point (in the dialog item container's coordinates).   Use this function to perform an action after dropping the item over a   legal drop target. (drag-end-action is called to handle non-dropping drags)Methods of Interest pre-drop-hilite (sv simple-view) hilite-flag pre-drop-hilite (sv view) hilite-flag   Specialize this to customize the hiliting effect when the item is dragged   over a legal drop target. hilite-flag indicates whether to hilite or un-hilite   the item (t/nil). The default method uses inversion. droppable-p (di droppable-dim) (target simple-view)   Specialize this for more sophisticated legal drop target discrimination.   The default method finds the view the mouse is in and; makes sure it isn't   yourself, checks its class against drop-target-class, and checks for   membership in drop-targets.|#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; just to have a better selection when you drag around(defclass drop-target-dim ()  ())(defmethod dropped ((self drop-target-dim) dropped-view offset where)    (declare (ignore dropped-view offset where))    nil);-------------------------------------------------------------------------(defclass droppable-dim (draggable-dim)    ((drop-target-class :initarg :drop-target-class                                       :accessor drop-target-class)      (drop-targets :initarg :drop-targets                              :accessor drop-targets)      (drop-action-fn :initarg :drop-action-fn                                  :accessor drop-action-fn))    (:default-initargs        :drop-target-class 'drop-target-dim       :drop-action-fn #'(lambda (di target offset where)                                          (when (slot-boundp di 'drop-target-class)                                               (dropped target di offset where)))       ))(defmethod call-drag-action :before ((di droppable-dim))    (declare (special *current-droppable-target*))    (let* ((where (%stack-block ((p 4)) (#_GetMouse p) (#_LocalToGlobal p) (%get-point p)))                (new-target (find-droppable-view-containing-point di where)))        (unless (eq new-target *current-droppable-target*)            (when *current-droppable-target*                 (pre-drop-hilite *current-droppable-target* nil))            (when new-target                 (pre-drop-hilite new-target t))            (setf *current-droppable-target* new-target))))(defmethod drag-item ((di droppable-dim) where)    (let ((*current-droppable-target*))        (declare (special *current-droppable-target*))        (let ((drag-offset  (call-next-method)))            (when *current-droppable-target*                 (pre-drop-hilite *current-droppable-target* nil)                 (when drag-offset                      (call-drop-action di *current-droppable-target* drag-offset (add-points where drag-offset))                      (setf drag-offset nil)))            drag-offset)))(defmethod call-drop-action ((di droppable-dim) (target simple-view) drag-offset dest-point)  ;;exists primarily to be specialized by selectable-dim  (drop-action di target drag-offset dest-point))(defmethod drop-action ((di droppable-dim) (target simple-view) drag-offset dest-point)  (when (slot-boundp di 'drop-action-fn)    (funcall (drop-action-fn di) di target drag-offset dest-point)))(defmethod pre-drop-hilite ((sv simple-view) hilite-flag)    (with-focused-view (view-container sv)         (hilite-view sv hilite-flag)))(defmethod pre-drop-hilite ((sv view) hilite-flag)    (with-focused-view sv         (hilite-view sv hilite-flag)))(defmethod droppable-p ((di droppable-dim) (target simple-view))    (unless (eq di target)        (when (typep target (drop-target-class di))             (if (slot-boundp di 'drop-targets)                 (when (and (not (eq target (view-container di)))                                     (or (find (view-nick-name target) (drop-targets di))                                            (find target (drop-targets di))))                      target)                 target))))(defmethod find-droppable-view-containing-point ((di droppable-dim) where)    (let ((v (root-drop-target-view di where)))        (when v             (droppable-p di (find-view-containing-point v (global-to-view v where))))))(defmethod root-drop-target-view ((di droppable-dim) where)    (ecase (drag-bounds di)        (:container (view-container di))        (:window (view-window di))        (:none (find-view-containing-point nil where nil t))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;#|;;; a modest example - adding drop AND select behavior to static text dialog items;;; (use shift to select multiple items to drop)(require :selectable-dim)(defclass st-sel-drop (selectable-dim droppable-dim static-text-dialog-item) ());note that selectable-dim precedes droppable-dim(defun print-target (di target offset where)  (format t "dropped ~s onto ~s at ~a (delta = ~a)~%"          (dialog-item-text di)          (dialog-item-text target)          (point-string where)          (point-string offset)))(setf *test-w*      (make-instance 'dialog                     :window-type :document                     :view-position :centered                     :view-size #@(200 150)                     :window-title "droppable demo"                     :close-box-p t                     :view-subviews                     (list (make-instance 'st-sel-drop                                          :view-position #@(20 20)                                          :dialog-item-text "drop/select me"                                          :view-nick-name :i1                                          :selection-cluster 1                                          :drop-targets '(:i4 :i5)                                          :drag-bounds :window                                          :drop-action-fn #'print-target                                          )                           (make-instance 'st-sel-drop                                          :view-position #@(20 40)                                          :dialog-item-text "me too"                                          :view-nick-name :i2                                          :selection-cluster 1                                          :drop-targets '(:i4 :i5)                                          :drag-bounds :none                                          :drop-action-fn #'print-target                                          )                           (make-instance 'st-sel-drop                                          :view-position #@(20 60)                                          :dialog-item-text "me 3"                                          :view-nick-name :i3                                          :selection-cluster 1                                          :drop-targets '(:i4 :i5)                                          :drag-bounds :window                                          :drop-action-fn #'print-target                                          )                           (make-instance 'static-text-dialog-item                                          :view-position #@(20 100)                                          :dialog-item-text "hit me"                                          :view-nick-name :i4                                          )                           (make-instance 'static-text-dialog-item                                          :view-position #@(20 120)                                          :dialog-item-text "hit me too"                                          :view-nick-name :i5                                          )                           )))|#