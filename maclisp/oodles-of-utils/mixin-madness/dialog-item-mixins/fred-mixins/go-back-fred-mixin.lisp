(in-package :oou)(oou-provide :go-back-fred-mixin);*****************************************************************                                    ;; Copyright © 1996 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a mixin for fred. ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :go-back-visualization-di                  ) (export '(          ));----------------------------------------------------------------------------------------(defclass go-back-fred-mixin ()  ((last-edit-mark :initform (list* 0 0)                   :accessor last-edit-mark)))(defmethod initialize-instance :after ((ob go-back-fred-mixin) &rest initargs)   (declare (ignore initargs))  (comtab-set-key (slot-value ob 'comtab) '(:control  #\g) #'go-back-to-last-edit-mark))(defmethod install-view-in-window :after ((ob go-back-fred-mixin) window)  (declare (ignore window))  (setf (last-edit-mark ob)         (list* (buffer-position (fred-display-start-mark ob)) (selection-range ob)))); you need the update-when-changed-mixin as well(defmethod after-change-update-method :after ((ob go-back-fred-mixin) &key draw-now-p)  (declare (ignore draw-now-p))  (setf (car (last-edit-mark ob)) (buffer-position (fred-display-start-mark ob)))  (setf (cdr (last-edit-mark ob)) (buffer-position (fred-buffer ob)))  (when (go-back-visualization-di ob)    (update-go-back-rect (go-back-visualization-di ob))))  (defmethod go-back-to-last-edit-mark ((ob go-back-fred-mixin))  (let ((buff (fred-buffer ob))        (edit-pos (cdr (last-edit-mark ob)))        (start-pos (car (last-edit-mark ob))))    (collapse-selection ob nil)    (set-mark buff edit-pos)    (set-fred-display-start-mark ob start-pos)    (when (= (fred-vpos ob (buffer-line-start buff edit-pos)) -1)      (do ((i -1 (1- i)))          ((or (/= (fred-vpos ob (buffer-line-start buff edit-pos (- i))) -1)               (/= (fred-vpos ob (buffer-line-start buff edit-pos i)) -1))           (if (/= (fred-vpos ob (buffer-line-start buff edit-pos i)) -1)             (set-fred-display-start-mark ob (buffer-line-start buff start-pos (1+ (- i))))             (set-fred-display-start-mark ob (buffer-line-start buff start-pos (1- i))))           )))))(defmethod go-back-visualization-di ((ob go-back-fred-mixin) &aux (window (view-window ob)))  (when window    (view-named :go-back-visualization-di window)))#|(defclass my-fred-item (update-when-changed-mixin  go-back-fred-mixin fred-item)    ()    (:default-initargs :comtab (make-comtab))) ; be sure to have your own comtab(make-instance 'fred-window     :view-size #@(300 200)     :fred-item-class 'my-fred-item); with visualization(oou-dependencies :layout-system)(defclass win-with-fred (fred-window-mixin layout-mixin window)  ()  (:default-initargs     :back-color *tool-back-color*))(defmethod initialize-instance :after ((w win-with-fred) &rest initargs)  (declare (ignore initargs))  (let ((scrolling-fred-view (make-instance (scrolling-fred-view-class w)))        (visualization-di (make-instance 'go-back-visualization-di)))    (setf (main-fred-item w) (fred-item scrolling-fred-view))    (setf (layout w)          (:vbox ()                 20                 (:hbox ()                        20                        (:fbox () scrolling-fred-view)                        (:fbox (:width 3) visualization-di)                        20)                 20))))(make-instance 'win-with-fred)|#