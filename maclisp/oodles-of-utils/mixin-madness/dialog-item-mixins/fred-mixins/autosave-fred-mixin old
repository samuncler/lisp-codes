(in-package :oou)(oou-provide :autosave-fred-mixin);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a mixin for fred to do an autosave every n minutes; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :update-when-changed-mixin) (export '(autosave-fred-mixin                 with-autosave-off));---------------------------- -------------------------------------(defmacro with-autosave-off (self &body body)   `(let ((auto-save-p (autosaving-enabled-p ,self)))       (setf (autosaving-enabled-p ,self) nil)       (progn ,@body)       (setf (autosaving-enabled-p ,self) auto-save-p)));-----------------------------------------------------------------(defclass autosave-fred-mixin (update-when-changed-mixin)    ((autosaving-enabled-p :initform t                                             :accessor autosaving-enabled-p                                             :initarg :autosaving-enabled-p)      (next-autosave-time :initform most-positive-fixnum                                          :accessor next-autosave-time)      (autosave-period :initform 2                                    :initarg :autosave-period                                    :accessor autosave-period)      (buffer-modcnt-at-last-save :initform nil                                                        :accessor buffer-modcnt-at-last-save)      (saved-in-file :initform nil                                :accessor saved-in-file)))         (defmethod initialize-instance :after ((self autosave-fred-mixin) &rest initargs)    (declare (ignore initargs))    (eval-enqueue            `(let* ((filename (slot-value, self 'ccl::my-file-name))                        (autosave-file (when filename                                                      (pathname (concatenate 'string (namestring filename) "~")))))                (when (and filename                                    (probe-file autosave-file)                                    (> (file-write-date autosave-file)                                         (file-write-date filename))                                    (setf (saved-in-file ,self) autosave-file)                                    (y-or-n-dialog "An autosave file with a more recent write-date exists for this file. Do you wish to open that file too?" :cancel-text nil))                     (make-instance 'fred-window :filename autosave-file))))    (with-slots (buffer-modcnt-at-last-save next-autosave-time autosave-period) self         (setf buffer-modcnt-at-last-save (buffer-modcnt (fred-buffer self)))         (setf next-autosave-time (+ (#_TickCount)                                                          (* 3600 autosave-period)))))(defmethod maybe-do-autosave ((self autosave-fred-mixin))    (with-slots (buffer-modcnt-at-last-save autosave-period next-autosave-time saved-in-file) self         (let* ((actual-time (#_TickCount))                     (buffer (fred-buffer self))                     (modcnt (buffer-modcnt buffer)))             (when (and (< next-autosave-time actual-time)                                  (/= buffer-modcnt-at-last-save modcnt))                  (with-cursor *watch-cursor*                      (set-mini-buffer self "Auto-saving ...")                      (without-interrupts                          (setf saved-in-file (pathname (format nil "~A~~" (or (slot-value self 'ccl::my-file-name)                                                                                                                    (format nil "~AAutosave-File-~A"                                                                                                                                  (ccl::boot-directory)                                                                                                                                  (string-left-trim "  " (window-title (view-window self))))))))                         (when (probe-file saved-in-file)                              (unlock-file saved-in-file))                        ; (buffer-write-file buffer saved-in-file :if-exists :overwrite)                         (setf buffer-modcnt-at-last-save modcnt)                         (setf next-autosave-time (+ actual-time                                                                          (* 3600 autosave-period))))                      (set-mini-buffer self "NOT Done")                      )))))(defmethod after-change-update-method  :after ((self autosave-fred-mixin) &key (draw-now-p t))  (declare (ignore draw-now-p))   (when (autosaving-enabled-p self)       (maybe-do-autosave self)))(defmethod window-save :around ((self autosave-fred-mixin))    (with-slots (buffer-modcnt-at-last-save next-autosave-time autosave-period saved-in-file) self          (let ((autosave-file saved-in-file))             (call-next-method)             (when (and autosave-file			         (probe-file autosave-file))                  (delete-file autosave-file))             (setf buffer-modcnt-at-last-save (buffer-modcnt (fred-buffer self)))             (setf next-autosave-time  (+ (#_TickCount)                                                               (* 3600 autosave-period))))))(defmethod window-close :after ((self autosave-fred-mixin))    (when (and (null (wptr self))                        (saved-in-file self)                        (probe-file (saved-in-file self)))         (delete-file (saved-in-file self))))(defmethod remove-view-from-window :around ((self autosave-fred-mixin))     (let ((autosave-file-new (pathname (format nil "~AAutosave-File-~A~~"                                                                               (ccl::boot-directory)                                                                               (window-title (view-window self)))))              (container-closed-p (null (assoc (wptr self) ccl::*window-object-alist*))))        (call-next-method)        (when (and  container-closed-p                            (equal  autosave-file-new(saved-in-file self))                            (probe-file autosave-file-new))             (delete-file autosave-file-new))))(defmethod purge-autosave-file ((self autosave-fred-mixin))    (with-slots (saved-in-file) self         (when (and saved-in-file                             (probe-file saved-in-file))              (delete-file saved-in-file))))#|(defclass my-fred-item (autosave-fred-mixin fred-item)    ()    (:default-initargs       :autosave-period 0 ))(defclass window-with-save (window)    ())(defmethod window-save ((self window-with-save))    (window-save (ccl::window-key-handler self)))(make-instance 'window-with-save     :view-size #@(300 200)     :view-subviews (list (setf win (make-instance 'scrolling-fred-view                                                              :fred-item-class 'my-fred-item                                                               :allow-returns t                                                              :view-position #@(50 50)                                                              :view-size #@(200 100)))))|#