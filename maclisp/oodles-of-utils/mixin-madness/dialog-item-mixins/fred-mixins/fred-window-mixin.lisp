(in-package :oou)(oou-provide :fred-window-mixin);*****************************************************************                                    ;; Copyright © 1995-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; ; mixin for a window with a fred-item inside;; most of it stolen from  'new-fred-window.lisp'  of CCL 3.0;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies ) (export '());---------------------------- -------------------------------------(defmethod ccl::modified-marker ((w window))  #\Space);-----------------------------------------------------------------------------(defclass fred-window-mixin-mini-buffer-fred-item (ccl::mini-buffer-fred-item)  ())(defmethod stream-fresh-line ((view fred-window-mixin-mini-buffer-fred-item))  (with-focused-view view  ; seems to mess up - maybe this will help- if it does figure out why??    (let* ((w (view-window view))           (buf (fred-buffer view))           (pos (buffer-size buf)))      (set-mark buf pos)      (if (not (ccl::view-status-line w))        (progn           (unless (and (> pos 0)                       (eql (buffer-char buf (1- pos)) #\newline))             (stream-tyo view #\newline)            (set-fred-display-start-mark view (1+ pos))            (fred-update view)))        (call-next-method)))));---------------------------------------------------------------------------------(defclass fred-window-mixin-mini-buffer (ccl::new-mini-buffer)  ()  (:default-initargs    :view-nick-name 'mini-buffer    :fred-item-class 'fred-window-mixin-mini-buffer-fred-item    :h-scrollp nil    :v-scrollp nil    :draw-scroller-outline t     :view-font '("monaco" 9 :plain)    :dialog-item-text ""    :track-thumb-p nil    ))(defmethod install-view-in-window :after ((view fred-window-mixin-mini-buffer) window)  (declare (ignore window))  ;(set-part-color view :body (get-back-color window))  ) ;----------------------------------------------------------------------------------(defclass fred-window-mixin ()  ((main-fred-item :initform nil                   :initarg :main-fred-item                   :accessor main-fred-item)   (scrolling-fred-view-class :initform 'window-scrollable-fred-di                              :initarg :scrolling-fred-view-class                              :accessor scrolling-fred-view-class)))(defmethod ccl::view-status-line ((w fred-window-mixin))  nil)(defmethod ccl::view-package-string ((w fred-window-mixin))  "")(defmethod view-mini-buffer ((w fred-window-mixin))  (let ((v (find-named-sibling (main-fred-item w) 'mini-buffer)))    (when v (fred-item v))))(defmethod ccl::mini-buffer-update ((w fred-window-mixin))  (when  (wptr w)    (let* ((mb (view-mini-buffer w)))      (when mb        (with-focused-view mb  ; shouldnt help and prob wont          (let* ((buf (fred-buffer mb))                 (size (buffer-size buf)))            (set-mark buf size)            (stream-tyo mb #\newline)            (set-fred-display-start-mark mb (1+ size))            ;(set-fred-display-start-mark mb size)            (fred-update mb)))))))(defmethod ccl::mini-buffer-show-cursor ((w fred-window-mixin))  (when (wptr w)    (let ((mb (view-mini-buffer w)))      (when mb        (window-show-cursor mb (buffer-line-start (fred-buffer mb)))        ))))          (defmethod set-mini-buffer ((w fred-window-mixin) string &rest format-args)  (declare (dynamic-extent format-args))  (when (wptr w)    (let ((mini-buffer (view-mini-buffer w)))      (when mini-buffer        ;(terpri mini-buffer)        (let* ((max ccl::*max-mini-buffer-lines*)               (buf (fred-buffer mini-buffer))               (lines (lines-in-buffer buf)))          (apply #'format mini-buffer string format-args)          (when (> lines (+ max max))            (buffer-delete buf 0 (buffer-line-start buf 0 max)))          (window-show-cursor mini-buffer (buffer-line-start buf (max 0 (1- (buffer-size buf)) )))          )))))(defmethod ccl::i-search-prompt ((w fred-window-mixin) &optional init)  (let ((mb (view-mini-buffer w))        (str "i-search"))    (when mb      (let* ((buf (fred-buffer mb))             (pos (buffer-position buf))             (bpos (buffer-line-start buf buf 0)))                                  (cond ((and (not init) bpos (< bpos pos)                      (not (position #\newline ccl::*i-search-search-string*))                      (< bpos (buffer-size buf))                      (buffer-substring-p buf str bpos))                 ; works when no pkg preface                 (buffer-delete buf (+ bpos (length str)) (buffer-size buf)))                (t (setq init t)))          (when init             (stream-fresh-line mb)            (buffer-insert buf str))          (buffer-insert buf ccl::*i-search-note-string*)          (buffer-insert buf (if ccl::*i-search-forward-p* ": " " reverse: "))          (buffer-insert buf ccl::*i-search-search-string*)          (fred-update mb)))))(defmethod ccl::modified-marker ((w fred-window-mixin))  #\240)(defmethod filename ((w fred-window-mixin))  (window-filename (main-fred-item w)))(defmethod actual-key-handler ((w fred-window-mixin))  (let ((key (current-key-handler w)))    (if (typep key 'ccl::mini-buffer-fred-item)      (main-fred-item w)      key)))(defmethod fred-update ((w fred-window-mixin))  (let ((fred (actual-key-handler w)))    (when fred (fred-update fred))))(defmethod window-show-cursor ((w fred-window-mixin) &optional pos scrolling)  (window-show-cursor (actual-key-handler w) pos scrolling))(defmethod window-needs-saving-p ((w fred-window-mixin))  (window-needs-saving-p (actual-key-handler w)))  (defmethod window-show-selection ((w fred-window-mixin))  (window-show-selection (current-key-handler w))) (defmethod set-selection-range ((w fred-window-mixin) &optional start end)  (set-selection-range (current-key-handler w) start end))(defmethod collapse-selection ((w fred-window-mixin) forward-p)  (collapse-selection (current-key-handler w) forward-p))(defmethod fred-buffer ((w fred-window-mixin))  (fred-buffer (actual-key-handler w)))(defmethod fred-display-start-mark ((w fred-window-mixin))  (fred-display-start-mark (current-key-handler w)))(defmethod fred-text-edit-sel-p ((w fred-window-mixin))  (fred-text-edit-sel-p (actual-key-handler w)))(defmethod (setf fred-text-edit-sel-p) (value (w fred-window-mixin))  (setf (fred-text-edit-sel-p (actual-key-handler w)) value))(defmethod fred-wrap-p ((w fred-window-mixin))  (fred-wrap-p (actual-key-handler w)))(defmethod (setf fred-wrap-p) (value (w fred-window-mixin))  (setf (fred-wrap-p (actual-key-handler w)) value))(defmethod fred-word-wrap-p ((w fred-window-mixin))  ; was text-edit-xxx-p  (fred-word-wrap-p (actual-key-handler w)))(defmethod (setf fred-word-wrap-p) (value (w fred-window-mixin))  (setf (fred-word-wrap-p (actual-key-handler w)) value))(defmethod fred-justification ((w fred-window-mixin))  (fred-justification (actual-key-handler w)))(defmethod (setf fred-justification) (value (w fred-window-mixin))  (setf (fred-justification (actual-key-handler w)) value))(defmethod fred-line-right-p ((w fred-window-mixin))  (fred-line-right-p (actual-key-handler w)))(defmethod (setf fred-line-right-p) (value (w fred-window-mixin))  (setf (fred-line-right-p (actual-key-handler w)) value))(defmethod fred-chunk-size ((w fred-window-mixin))   (fred-chunk-size (actual-key-handler w)))(defmethod (setf fred-tabcount) (value (w fred-window-mixin))  (setf (fred-tabcount (actual-key-handler w)) value))(defmethod fred-tabcount ((w fred-window-mixin))  (fred-tabcount (actual-key-handler w)))(defmethod set-view-font-codes :after ((w fred-window-mixin) ff ms &optional old-ff old-ms)  (when (actual-key-handler w)    (set-view-font-codes (actual-key-handler w) ff ms old-ff old-ms)))(defmethod set-view-font :after ((w fred-window-mixin) spec)  (when (actual-key-handler w)    (set-view-font (actual-key-handler w) spec)))(defmethod view-font-codes ((w fred-window-mixin))  (when (actual-key-handler w)    (view-font-codes (actual-key-handler w))))(defmethod stream-tyo ((w fred-window-mixin) char)  (stream-tyo (actual-key-handler w) char))(defmethod stream-write-string ((w fred-window-mixin) string start end)  (stream-write-string (actual-key-handler w) string start end))(defmethod stream-force-output ((w fred-window-mixin))  (stream-force-output (actual-key-handler w)))(defmethod stream-fresh-line ((w fred-window-mixin))  (stream-fresh-line (actual-key-handler w)))(defmethod stream-column ((w fred-window-mixin))  (stream-column (actual-key-handler w)))(defmethod stream-position ((w fred-window-mixin) &optional new)  (stream-position (actual-key-handler w) new))(defmethod stream-filename ((w fred-window-mixin))  (let ((view (main-fred-item w)))    (if view      (stream-filename view))))(defmethod window-hardcopy ((w fred-window-mixin) &optional (show-dialog t))  (window-hardcopy (actual-key-handler w) show-dialog))(defmethod window-package ((w fred-window-mixin))  (window-package (actual-key-handler w)))     (defmethod set-window-filename ((w fred-window-mixin) name)  (set-window-filename (main-fred-item w) name))(defmethod window-revert ((w fred-window-mixin) &optional dp)  (window-revert (actual-key-handler w) dp))(defmethod ed-push-mark ((w fred-window-mixin) &optional a b)  (ed-push-mark (current-key-handler w) a b));--------------------------------------------------------------------------------------(defmethod initialize-instance :around ((w fred-window-mixin)                                            &rest initargs                                            &key (window-show t))  (declare (dynamic-extent initargs))  (apply #'call-next-method w :window-show nil initargs)  ;(set-current-key-handler w (main-fred-item w) nil)  (view-activate-event-handler w)  (fred-update w)   (set-window-title w (or (and (filename w)                               (ccl::pathname-to-window-title (filename w)))                          (ccl::new-window-title)))  (when (filename w)    (ccl::view-restore-position (main-fred-item w)))  (when window-show    (window-show w)))(defmethod initialize-window :after ((w fred-window-mixin) &key)   (let ((view (main-fred-item w)))    (when (fixnump (slot-value view 'file-modcnt))      (setf (slot-value view 'file-modcnt) (buffer-modcnt (fred-buffer view))))))(defmethod window-title ((w fred-window-mixin) &aux wptr)  (when (setq wptr (wptr w))    (let* ((nm (slot-value w 'ccl::object-name))           (script (#_getenvirons #$smSysScript)))      (or nm                    (%stack-block ((np 256))            (#_getWTitle wptr np)            (setq nm                  (ccl::%str-from-ptr-in-script (%inc-ptr np 1) (ccl::%i- (%get-byte np) 1)                                                 script))            (setf (slot-value w 'ccl::object-name) nm))))))(defmethod set-window-title ((w fred-window-mixin) new-title)  (let ((wptr (wptr w)))    (setq new-title (ensure-simple-string (ccl::string-arg new-title)))    (ccl::%stack-block ((np 256))      ; rats - we do this before the window has font-codes i think       (let* ((script (#_getenvirons #$smSysScript))             (n (ccl::byte-length new-title script)))        (when (ccl::%i> n 254)          (error "Title ~S too long"  new-title))        ; leave room for the mystery byte        (ccl::with-pointer (p np 2)          (ccl::%put-string-contents p new-title 254 script))        (ccl::%put-byte np (1+ n) 0)        ; its the modified marker        (ccl::%put-byte np (%hget-byte (rref wptr windowrecord.titlehandle) 1) 1)                (#_SetWTitle wptr np)        (setf (slot-value w 'ccl::object-name) new-title)        ))    (let ((frob (assq w ccl::*defs-dialogs*)))      (when frob (set-window-title (cdr frob) (ccl::%str-cat "Definitions in " new-title))))    new-title))(defmethod window-menu-item ((w fred-window-mixin))  (ccl::with-slot-values (wptr) w    (let* ((item (call-next-method))           (mark (%hget-byte (rref wptr windowrecord.titlehandle) 1)))      (set-menu-item-check-mark item (if (neq mark (ccl::%char-code #\space)) mark nil))      item)))(defmethod window-save ((w fred-window-mixin))  (window-save (actual-key-handler w))  (set-window-title w (ccl::pathname-to-window-title (filename w))))(defmethod window-save-as ((w fred-window-mixin))  (window-save-as (actual-key-handler w))  (set-window-title w (ccl::pathname-to-window-title (filename w))))(defmethod window-save-copy-as ((w fred-window-mixin) &optional name)  (window-save-copy-as (actual-key-handler w) name))(defmethod window-close :around ((w fred-window-mixin))  (let ((fred (main-fred-item w)))    (without-interrupts     (when fred       (unless         (when (and (slot-boundp fred 'frec) (frec fred))           (ccl::window-ask-save fred))         (when *save-position-on-window-close*           (ccl::view-save-position fred nil t))))     (let ((frob (assq w ccl::*defs-dialogs*)))       (when frob          (window-close (cdr frob))         (setq ccl::*defs-dialogs* (delq frob ccl::*defs-dialogs*))))          (call-next-method))))(defmethod window-scroll ((w fred-window-mixin) &optional pos count)  "count is the number of lines between the first line displayed and   the line that POS is on. If this number is <= 0, then POS will be visible."  (let* ((fred (actual-key-handler w))        (frec (frec fred)))    (when (null count)      (setq count (- (next-screen-context-lines (ccl::frec-full-lines frec)))))    (ccl::frec-set-sel frec pos pos)       (set-fred-display-start-mark fred (ccl::frec-screen-line-start frec pos count))))             ;-------------------------------------------------------------------------------------        #|(defclass window-with-fred-item (fred-window-mixin window)  ()  (:default-initargs    :window-type :document))(defmethod initialize-instance ((w window-with-fred-item) &rest initargs &key view-font filename)  (declare (dynamic-extent initargs))  (apply #'call-next-method w :window-show nil initargs)  (let ((scrolling-fred-view (make-instance (scrolling-fred-view-class w)                               :view-font view-font                               :filename filename                               :view-size (subtract-points (view-size w)                                                           #@(20 20))                               :view-position #@(5 5))))    (setf (main-fred-item w) (fred-item scrolling-fred-view))    (set-view-container scrolling-fred-view w)))(make-instance 'window-with-fred-item   :view-font '("Helvetica" 14));-------------------------------------------------------------------------------------(oou-dependencies :layout-system)(defclass window-with-fred-item (fred-window-mixin layout-mixin window)  ())(defmethod initialize-instance ((w window-with-fred-item) &rest initargs &key view-font filename)  (declare (dynamic-extent initargs))  (apply #'call-next-method w :window-show nil initargs)  (let ((scrolling-fred-view (make-instance (scrolling-fred-view-class w)                               :view-font view-font                               :filename filename                               :view-size (subtract-points (view-size w)                                                           #@(20 20))                               :view-position #@(5 5))))    (setf (main-fred-item w) (fred-item scrolling-fred-view))    (setf (layout w)          (:vbox ()                 (:hbox (:height 20))                 (:hbox ()                        (:vbox (:width 20))                        (:fbox () scrolling-fred-view)                        (:vbox (:width 20)))                 (:hbox (:height 20))))))(make-instance 'window-with-fred-item   :view-font '("Helvetica" 14))|#;------------------------------------------------------------------------------------------------#|;to get a new pane(defmethod split-pane ((fred fred-item) scroll-bar pos direction flag)  ;(declare (ignore scroll-bar))  (when flag    (let* ((view (view-container fred))           (w (view-window view))           ;(key (current-key-handler w))           (old-size (view-size view))           (old-pos (view-position view))           (min-size (view-minimum-size view))           (h (point-h old-size))           (v (point-v old-size))           poofed)      (when (or (and (eq direction :vertical)                     (or (< (- v pos)(point-v min-size))                         (< (+ pos 1) (point-v min-size))))                (and (eq direction :horizontal)                      (or (< (+ pos 1)(point-h min-size))                         (< (- h pos) (point-h min-size)))))                (return-from split-pane nil))      (when (eq direction :horizontal)                 (let ((mb (view-mini-buffer w)))                   (when (and mb                              (setq mb (view-container mb))                              (view-named 'poof mb)                              (view-contains-point-p  view (view-position mb)))                     (poof view mb)                     (setq poofed t)                     (setq old-size (view-size view))                     (setq v (point-v old-size)))))      (without-interrupts       (progn ;with-preserved-buffers view         (let* ((container (view-container view))                             (buf (fred-buffer fred))                (modcnt (buffer-modcnt buf))                (file-modcnt (slot-value fred 'file-modcnt))                (new-container-pos old-pos)                (new-container (if (and (typep container 'split-view)                                        (eq (split-view-direction container) direction))                                 container                                 (make-instance 'split-view                                   :view-size old-size                                   :view-position #@(-3000 -3000)                                   :view-container container                                   ;:ordered-subviews (list view)                                   :direction direction)))                new new-pos new-size new-new-size)           (when (neq container new-container)             (if (typep container 'split-view)               (let ((ph (point-h old-pos))                     (pv (point-v old-pos)))                 (setq old-pos (make-point (if (eq ph -1) 0 ph)(if (eq pv -1) 0 pv))))               (setq old-pos #@(0 0))))           (if (eq direction :vertical) ; in the vertical bar we split horizontally             (progn                (setq new-size (make-point h (- v pos ))                     new-pos (make-point (if (eq (point-h old-pos) -1) -1 0)                                         (+ (point-v old-pos) pos)))               (setq new-new-size (make-point h (+ pos 1))))             (progn                (setq new-size (make-point (- h pos -1) v))               (setq new-new-size (make-point  pos v))               (setq new-pos (make-point (+  -1  (point-h old-pos) pos) 0))))           (setq new                 (make-instance 'scrolling-fred-view                   ;:view-container new-container                   :buffer (make-mark buf)                   ;:filename (window-filename fred) ; it reverts the buffer - yech                   :view-size new-new-size  ; (add-points w-size #@(0 0)) ; huh                   :view-position (if (eq new-container container) old-pos #@(0 0))                   :fred-item-class (class-of fred)                   :grow-box-p nil                   :view-font (view-font view)                   :track-thumb-p (scroll-bar-track-thumb-p scroll-bar)                   :bar-dragger  direction                   :v-pane-splitter (pane-splitter-position (v-scroller view))                    :h-pane-splitter (pane-splitter-position (h-scroller view))                   ))           (setf (slot-value (fred-item new) 'my-file-name)(window-filename fred))           ; somebody is messing with buffer-modcnt above, restore it           (set-buffer-modcnt buf modcnt)           (setf (slot-value (fred-item new) 'file-modcnt) file-modcnt)           (set-fred-display-start-mark (fred-item new)                                         (fred-display-start-mark fred))           (if (neq container new-container)             (progn               (setf (ordered-subviews new-container) (list new view))               (replace-view-in-split-view container view new-container)               (set-view-size view new-size) ; dont do these until in correct container               (set-view-position view new-pos)               (set-view-position new-container new-container-pos))             (progn                (set-view-size view new-size)               (set-view-position view new-pos)               (add-view-to-split-view container new view)))           (set-view-container new new-container)           (kill-erase-region w)           (unless poofed             (validate-scroll-bar view (if (eq direction :vertical) :horizontal :vertical)))           )))))); to resize and remove existing panes(defmethod ccl::drag-split ((split-view ccl::split-view)                       dragger pos direction drawn in-drag-range view-one view-two)  ;(declare (ignore dragger))  (print view-one)  (print view-two)  (when drawn    (let* ((pos-two (view-position view-two))           (delta (- pos (if (eq direction :vertical)                           (point-v pos-two)                           (point-h pos-two))))           (w (view-window view-one))           (size1 (view-size view-one))           (size2 (view-size view-two)))      (when (not (= 0 delta)) ;(not (<= -1 delta 1))        (cond         (in-drag-range          (case direction              (:vertical               (let* ((width (point-h size1)))                                  (set-view-position view-two  0 pos)                 (set-view-size view-two width (- (point-v size2) delta))                 (set-view-size  view-one  width (+ (point-v size1) delta))))              (t (let* ((height (point-v size1)))                                      (set-view-position view-two pos 0)                   (set-view-size view-two  (- (point-h size2) delta) height)                   (set-view-size view-one (+ (point-h size1) delta) height))))                        (ccl::kill-erase-region w) ; hit it with a hammer            (ccl::validate-scroll-bar view-two (if (eq direction :vertical) :horizontal :vertical)))                     (t          (let ((container (view-container view-one))                (fudge #@(0 0))                (new-size (case direction                            (:horizontal (make-point (+ (point-h size1)(point-h size2) -1)                                                     (point-v size1)))                            (t (make-point (point-h size1)                                           (+ (point-v size1)(point-v size2) -1))))))            ; with the mod that clicking in controls no longer changes key handler            ; we can't assume that superior is the key handler                        (cond             ((> delta 0) ; lose inferior, superior is and remains the key-handler              (when (ccl::key-handler-in-p view-two)                (set-current-key-handler w (ccl::find-a-key-handler view-one) nil))              (setf (ccl::dragger-direction dragger)(ccl::dragger-direction view-two))              (set-view-size view-one new-size)              (set-pane-splitter-position (ccl::h-scroller view-one)                                        (pane-splitter-position (ccl::h-scroller view-two)))            (setf (ccl::h-scroll-fraction view-one)                  (ccl::h-scroll-fraction view-two))              (when (eq (main-fred-item (view-window view-one)) view-two)                (setf (main-fred-item (view-window view-one)) view-one))              (ccl::remove-ordered-subview view-two container)              ;(fred-update view-one)              )             (t ; lose superior              (when (ccl::key-handler-in-p view-one)                (set-current-key-handler w (ccl::find-a-key-handler view-two) nil))                            (when (not (ccl::remove-ordered-subview view-one container)) ; when it did not get promoted                (when (eq (view-container view-two) w)                  (setq fudge #@(1 1)))                                (set-view-position view-two                                    (subtract-points (view-position view-one)                                                    fudge)))              (set-view-size view-two new-size))))))))))|#