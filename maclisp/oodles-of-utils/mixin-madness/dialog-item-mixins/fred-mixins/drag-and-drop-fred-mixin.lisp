(in-package :oou)(oou-provide :drag-and-drop-fred-mixin);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a fred window with a new copy/paste mechanism. Drag and Drop Version; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(require :QuickDraw)(oou-dependencies :droppable-dim                                :unibas-cursors                                :simple-view-ce                                :autoscrollable-dim                                :fred-mixin-ce                                ) (export '(drag-and-drop-fred-mixin                 ));---------------------------- -------------------------------------(defvar *copy-paste-buffer* nil);(setf *copy-paste-buffer* nil)(defclass drag-and-drop-buffer (droppable-dim view)    ((offset :initform #@(10 0)                  :accessor offset)      (source-fred :initform nil                             :accessor source-fred)      (copy-key-was-down-p :initform nil                                                :accessor copy-key-was-down-p))    (:default-initargs        :view-size #@(20 18)       :drop-target-class 'drag-and-drop-fred-mixin        :drag-bounds :none       :drag-start-tol #@(5 5)       :drag-start-time 0.3       :drop-action-fn #'(lambda (di target offset where)                                          (when (slot-boundp di 'drop-target-class)                                               (dropped target di offset where))))       )(defmethod initial-last-real-target ((self drag-and-drop-buffer))    (source-fred self))(defmethod hilite-view ((self drag-and-drop-buffer) hilite-flag)    (declare (ignore hilite-flag))    nil)(defmethod do-whole-drag :before ((self drag-and-drop-buffer) where)    (declare (ignore where))    (setf (copy-key-was-down-p self)             (or (option-key-pressed (source-fred self))                    (ccl::key-down-p 58)                    (ccl::key-down-p 55)) ))(defmethod copy-key-was-down ((self drag-and-drop-buffer))    (copy-key-was-down-p self))(defmethod copy-key-is-down ((self drag-and-drop-buffer))    (or (option-key-pressed (source-fred self))           (and (current-target self)                    (typep (current-target self) 'fred-mixin)                    (not (same-buffer-p (fred-buffer (current-target self))                                                        (fred-buffer (source-fred self)))))           (ccl::key-down-p 58)           (ccl::key-down-p 55)))(defmethod frame-current-rects ((self  drag-and-drop-buffer) &optional rects)    (declare (special *current-rects*))    (let ((copy-p (copy-key-is-down self)))        (unless rects (setf rects *current-rects*))        (with-slots (copy-key-was-down-p) self             (with-focused-view *WMgr-view*                  (cond (copy-p                              (if   copy-key-was-down-p                                  (draw-copy-rects self rects)                                  (draw-move-rects self rects))                              (setf copy-key-was-down-p t))                            (t                              (if copy-key-was-down-p                                   (draw-copy-rects self rects)                                  (draw-move-rects self rects))                              (setf copy-key-was-down-p nil)))))))(defmethod draw-move-rects ((self  drag-and-drop-buffer) rects)    (with-pen (:NotPatXor *gray-pattern* 1 1 *WMgr-view*)         (dolist (rect rects)             (#_FrameRect rect))))(defmethod draw-copy-rects ((self  drag-and-drop-buffer) rects)    (with-pen (:NotPatXor *gray-pattern* 1 1 *WMgr-view*)         (dolist (rect rects)             (#_FrameRect rect)             (#_MoveTo (rref rect :rect.right) (+ (rref rect :rect.top) 2))             (#_Line 2 0)             (#_Move 0 1)             (#_Line 0 (- (rref rect :rect.bottom)(rref rect :rect.top) 1))             (#_Move -1 0)             (#_Line (- (- (rref rect :rect.right)(rref rect :rect.left) 1)) 0)             (#_Move 0 -1)             (#_Line 0 -1))));------------------------------------------------------------------(defclass drag-and-drop-fred-mixin (drop-target-dim autoscrollable-fred-mixin)    ((dummy-cursor-pos :initform nil                                          :accessor dummy-cursor-pos)      (drop-target-class :initform 'drag-and-drop-fred-mixin                                       :accessor drop-target-class                                        :initarg :drop-target-class)      (option-key-pressed :initform nil                                          :accessor option-key-pressed)))(defmethod paste :around ((self drag-and-drop-fred-mixin))  (let ((start (selection-range self)))    (call-next-method)    (set-selection-range self start (buffer-position (fred-buffer self)))        (fred-update self)))(defmethod view-cursor ((self drag-and-drop-fred-mixin) where)    (if (and (in-selection self where)                  (in-text-area self where))        *full-hand-cursor*        (call-next-method)))(defmethod draw-dummy-cursor ((self drag-and-drop-fred-mixin))    (with-slots (dummy-cursor-pos) self         (when  (and dummy-cursor-pos                              (<= dummy-cursor-pos (buffer-size (fred-buffer self))))              (with-focused-view self                   (with-pen-mode (:PatXOr self )                        (multiple-value-bind (ascent descent widmax leading)                                                               (font-info (view-font self))                             (declare (ignore leading widmax))                             (move-to self                                               (- (fred-hpos self dummy-cursor-pos) 2)                                              (+ (fred-vpos self dummy-cursor-pos)                                                    descent))                             (line self 4 0)                             (move self -2 0)                             (line self 0 (- (+ ascent descent)))                             (move self -2 0)                             (line self 4 0)))))))(defmethod view-click-event-handler :around ((self drag-and-drop-fred-mixin) where)    (if (or (option-key-p)                 (command-key-p))        (setf (option-key-pressed self) t)        (setf (option-key-pressed self) nil))    (cond ((and (in-selection self where)                         (in-text-area self where))                (unless *copy-paste-buffer*                    (setf *copy-paste-buffer* (make-instance 'drag-and-drop-buffer)))                (setf (drop-target-class *copy-paste-buffer*)                         (drop-target-class self))                (let* ((offset (offset *copy-paste-buffer*))                            (real-where (subtract-points where offset))                            (container (if (typep self 'view)                                                  self                                                  (view-container self))))                    (set-view-position *copy-paste-buffer* (add-points real-where                                                                                                               (if (typep self 'window)                                                                                                                  #@(0 0)                                                                                                                  (view-position self))))                    (set-view-size *copy-paste-buffer*                                                (view-width *copy-paste-buffer*)                                               (+ (fred-line-height self) 3))                    (setf (dummy-cursor-pos self) (fred-point-position self  real-where))                    (set-view-container *copy-paste-buffer* container)                    (setf (source-fred *copy-paste-buffer*) self)                    (unless (view-click-event-handler *copy-paste-buffer* offset)                        (call-next-method)))                (set-view-container *copy-paste-buffer* nil))              (t (call-next-method))))(defmethod dropped ((self drag-and-drop-fred-mixin) (dropped-view drag-and-drop-buffer) offset where)    (declare (ignore offset))     (draw-dummy-cursor self)    (setf where (subtract-points (global-to-view self where)                                                     (offset dropped-view)))    (let* ((source (source-fred dropped-view))                (source-buffer (fred-buffer source))                (destination self)                (destination-buffer (fred-buffer destination))                (new-pos (fred-point-position destination where)))        (multiple-value-bind (source-sel-start source-sel-end) (selection-range source)             (cond ((and (or (in-selection destination where) ;(add-points where (offset dropped-view)))                                        (eq source-sel-start new-pos))                                  (eq source destination))                         (collapse-selection self t)                         (set-mark destination-buffer (fred-point-position self where)))                       (t (let ((style (buffer-get-style source-buffer source-sel-start source-sel-end))                                     (copied-string (buffer-substring source-buffer source-sel-end source-sel-start)))                               (cond ((same-buffer-p source-buffer destination-buffer)                                           (cond ((or (copy-key-is-down dropped-view) ;(option-key-pressed self)                                                              (option-key-p)                                                              (command-key-p))                                                       (collapse-selection destination t)                                                       (set-mark destination-buffer new-pos))                                                     (t                                                        (buffer-delete source-buffer source-sel-start source-sel-end)                                                       (set-mark destination-buffer                                                                           (if (<= new-pos source-sel-start)                                                                              new-pos                                                                              (- new-pos (- source-sel-end source-sel-start)))))))                                         (t                                            (cond ((in-selection destination where)                                                       (multiple-value-bind (dest-sel-start dest-sel-end) (selection-range destination)                                                            (buffer-delete destination-buffer dest-sel-start dest-sel-end)))                                                     (t                                                        (collapse-selection destination t)                                                       (set-mark destination-buffer new-pos)))))                               (let* ((start (buffer-position destination-buffer))                                           (hpos (fred-hpos self start)))                                   (when (< hpos 10)                                        (set-fred-hscroll self (max (+ (fred-hscroll self)  hpos -10) 0)))                                   (fred-update source)                                   (if (fred-copy-styles-p self)                                       (buffer-insert-with-style  destination-buffer copied-string style)                                       (buffer-insert destination-buffer copied-string))                                   (set-selection-range destination start (buffer-position destination-buffer)))))))	(set-current-key-handler (view-window destination) destination)       (fred-update self)        ))(defmethod set-current-key-handler :around ((win window) (view drag-and-drop-fred-mixin) &optional (select-all nil))  (call-next-method win view select-all))(defmethod draggable-dim-is-above ((self drag-and-drop-fred-mixin) (draggable-view draggable-dim) global-position)    (if (in-text-area self (global-to-view self global-position))        (adjust-dummy-cursor self draggable-view global-position)        (call-next-method)))(defmethod adjust-dummy-cursor ((self drag-and-drop-fred-mixin) (buffer drag-and-drop-buffer) global-position)    (with-slots (offset) buffer         (let* ((mouse-pos (global-to-view self global-position))                     (new-buffer-pos (fred-point-position self                                                                                      (subtract-points mouse-pos offset)                                                                                       )))             (unless (eq new-buffer-pos (dummy-cursor-pos self))                 (draw-dummy-cursor self )                 (setf (dummy-cursor-pos self) new-buffer-pos)                 (draw-dummy-cursor self)))))(defmethod adjust-dummy-cursor ((self drag-and-drop-fred-mixin) buffer global-position)    (declare (ignore buffer))    (let* ((mouse-pos (global-to-view self global-position))                (new-buffer-pos (fred-point-position self mouse-pos)))        (unless (eq new-buffer-pos (dummy-cursor-pos self))            (draw-dummy-cursor self )            (setf (dummy-cursor-pos self) new-buffer-pos)            (draw-dummy-cursor self))))(defmethod do-autoscroll :around ((self drag-and-drop-fred-mixin) scroll-direction dropped-view)    (declare (ignore dropped-view scroll-direction))    (draw-dummy-cursor self)    (call-next-method)    (draw-dummy-cursor self))(defmethod draggable-view-enters ((self drag-and-drop-fred-mixin) (copy-paste-buffer drag-and-drop-buffer) global-mouse-pos)    (declare (ignore global-mouse-pos))    (setf (dummy-cursor-pos self) nil)    (unless (eq (front-window) (view-window self))        (window-select (view-window self))        (view-draw-contents (view-window self))        (when (and (last-real-target copy-paste-buffer)                            (typep (last-real-target copy-paste-buffer) 'fred-mixin))             (fred-update  (last-real-target copy-paste-buffer)))        (fred-update self))    (draw-dummy-cursor self))(defmethod draggable-view-enters ((self drag-and-drop-fred-mixin) (draggable-view draggable-dim) global-mouse-pos)    (declare (ignore global-mouse-pos))    (setf (dummy-cursor-pos self) nil)    (unless (eq (front-window) (view-window self))        (window-select (view-window self))         (view-draw-contents (view-window self))        (fred-update self))    (draw-dummy-cursor self))(defmethod draggable-view-leaves ((self drag-and-drop-fred-mixin) (copy-paste-buffer draggable-dim) global-mouse-pos)    (declare (ignore copy-paste-buffer global-mouse-pos))    (draw-dummy-cursor self)    (setf (dummy-cursor-pos self) nil));----------------------------------------------------------------------------------#|(oou-dependencies :history-gm)(defmethod draggable-view-enters ((self drag-and-drop-fred-mixin) (draggable-view bookmark) global-mouse-pos)    (declare (ignore global-mouse-pos))    (when (eq (front-window) (view-window self))        (hilite-view self t)))(defmethod draggable-view-leaves ((self drag-and-drop-fred-mixin) (draggable-view bookmark) global-mouse-pos)    (declare (ignore global-mouse-pos))    (when (eq (front-window) (view-window self))        (hilite-view self nil)))|#;----------------------------------------------------------------------------------#|(defclass my-fred-item (drag-and-drop-fred-mixin fred-item)    ())(make-instance 'fred-window     :fred-item-class 'my-fred-item     :view-size #@(300 200))|#