(in-package :oou)(oou-provide :adjust-size-mixin);******************************************************************************                                    ;; Copyright © 1991-95 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a mixin for editable-text-dialog-items;; Changes (worth to be mentioned):; ------------------------------; April 1995  Dieter : Modifications for MCL 3.0;;*******************************************************************************;*******************************************************************************(oou-dependencies :fred-mixin-ce) (export '(          ));-------------------------------------------------------------------------------(defclass adjust-size-mixin ()  ((old-modcnt :initform nil               :accessor old-modcnt)   (need-to-update :initform nil                   :accessor need-to-update)   (clear-text :initform t               :accessor clear-text               :initarg :clear-text))  (:default-initargs    :draw-outline t    :view-size #@(5 5)    :view-font '("Monaco" 12 :plain)))(defmethod install-view-in-window :after ((self adjust-size-mixin) window)  (declare (ignore window))  (window-show-cursor self)  (adjust-size-to-content self))(defmethod key-handler-idle :after ((self adjust-size-mixin) &optional dialog)  (declare (ignore dialog))   (adjust-size-to-content self))(defmethod adjust-size-to-content ((self adjust-size-mixin) &key (redraw-p t))  (declare (ignore redraw-p))  (with-focused-view self    (multiple-value-bind (ff ms) (view-font-codes self)      (let* ((old-size (view-size self))             (old-width (view-width self))             (old-height (view-height self))             (min-width 3)             (min-height (ccl::font-codes-line-height ff ms))             (new-width (fr-line-width self))             (new-height (total-height self))             (new-size (make-point (max new-width                                         min-width)                                   (max new-height                                        min-height))))        (cond ((= old-size new-size)               (setf (need-to-update self) nil))              (t               (setf (need-to-update self) t)               (window-show-cursor self)               (setf (slot-value self 'view-size) new-size)               (ccl::frec-set-size (frec self) new-size)                (if (< (abs (- old-height new-height)) 3)                 (invalidate-corners (view-container self)                                     (view-to-container self                                                         (subtract-points                                                         (make-point (min old-width new-width) 0)                                                         #@(3 3)))                                     (view-to-container self                                                         (add-points                                                         (make-point (max old-width new-width)                                                                     (max old-height new-height))                                                         #@(3 3)))                                     t)                 (invalidate-view (view-container self) t))))))))                               (defmethod set-current-key-handler :around ((win window) (view adjust-size-mixin) &optional (select-all nil))  (call-next-method win view select-all))(defmethod window-show-cursor ((self adjust-size-mixin) &optional position scrolling)  (declare (ignore position scrolling))  (call-next-method self 0 nil))(defmethod insert-new-text ((self adjust-size-mixin) new-text)  (let* ((fred-buffer (fred-buffer self)))    (when (or (and (clear-text self)                   (not (option-key-p)))              (and (not (clear-text self))                   (option-key-p)))      (buffer-delete fred-buffer 0 t))    (multiple-value-bind (start-pos end-pos) (selection-range self)      (when (/= start-pos end-pos)        (buffer-delete fred-buffer  start-pos end-pos)        (set-mark fred-buffer start-pos)))    (buffer-insert fred-buffer new-text)    (fred-update self)    (adjust-size-to-content self)))#|(defclass adjusting-editable-text (adjust-size-mixin editable-text-dialog-item)    ())(setf win (make-instance 'window            :view-position :centered            :view-size #@(250 250)            :window-title "Ajusting Editable-Texts"            :window-type :document            :view-subviews            (list (setf ad-1 (make-instance 'adjusting-editable-text                    :view-position #@(10 10)                    :dialog-item-text "hello"))                  (make-instance 'adjusting-editable-text                    :view-position #@(10 50)                    :dialog-item-text "world"))))(insert-new-text ad-1 "World")|#