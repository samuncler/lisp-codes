(in-package :oou)(oou-provide :autosave-fred-mixin);*****************************************************************                                    ;; Copyright © 1991-95 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a mixin for fred to do an autosave every n minutes; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :periodic-task                                :with-running-watch) (export '(autosave-fred-mixin                 with-autosave-off));---------------------------- -------------------------------------(defmacro with-autosave-off (self &body body)   `(let ((auto-save-p (autosaving-enabled-p ,self)))       (setf (autosaving-enabled-p ,self) nil)       (progn ,@body)       (setf (autosaving-enabled-p ,self) auto-save-p)));-----------------------------------------------------------------(defun temporary-items-folder ()  (or (ccl::findfolder #$kOnSystemDisk #$kTemporaryFolderType)      (full-pathname (format nil "~A~A" (directory-namestring (ccl::boot-directory)) "Temporary Items:"))))      (defun temporary-items ()  (directory (merge-pathnames (temporary-items-folder) "*")));----------------------------------------------------------------(defun autosave-task ()    (let ((brownie (periodic-task-brownie)))        (or (find-task brownie :autosave-task)               (give-task (make-instance 'task                                       :name :autosave-task                                       :period 120                                       :brownie brownie                                       :to-do #'(lambda (fred-item task)                                                         (declare (ignore task))                                                         (maybe-do-autosave fred-item)))))))(defclass autosave-fred-mixin ()    ((autosaving-enabled-p :initform t                                             :accessor autosaving-enabled-p                                             :initarg :autosaving-enabled-p)      (buffer-modcnt-at-last-save :initform nil                                                        :accessor buffer-modcnt-at-last-save)      (saved-in-file :initform nil                                :accessor saved-in-file)))(defmethod initialize-instance :after ((self autosave-fred-mixin) &rest initargs)    (declare (ignore initargs))    (setf (buffer-modcnt-at-last-save self) (buffer-modcnt (fred-buffer self)))    (push self (prefabs (autosave-task))))(defmethod new-autosave-pathname ((self autosave-fred-mixin))  (let ((file-number 1)        new-path)    (loop      (setf new-path (merge-pathnames (temporary-items-folder)                                       (format nil                                              "~A-~A"                                              (let ((full-name (or (and (slot-value self 'ccl::my-file-name)                                                                        (file-namestring (slot-value self 'ccl::my-file-name)))                                                                   (string-left-trim "  " (window-title (view-window self))))))                                                (if (> (length full-name) 28)                                                  (subseq full-name 0 27)                                                  full-name))                                              file-number)))          (if (probe-file new-path)        (setf file-number (1+ file-number))        (return new-path)))))(defmethod maybe-do-autosave ((self autosave-fred-mixin))    (with-slots (buffer-modcnt-at-last-save saved-in-file) self         (let* ((buffer (fred-buffer self))                     (modcnt (buffer-modcnt buffer)))             (when (/= buffer-modcnt-at-last-save modcnt)                  (set-mini-buffer self "~%Rescuing File... ")                  (unless saved-in-file                      (setf saved-in-file (new-autosave-pathname self)))                  (window-save-copy-as self saved-in-file)                  (setf buffer-modcnt-at-last-save modcnt)                  (set-mini-buffer self " Done")                  ))))(defmethod window-save-as :around ((self autosave-fred-mixin))     (with-slots (buffer-modcnt-at-last-save saved-in-file) self           (call-next-method)         (when saved-in-file               (delete-file saved-in-file :if-does-not-exist nil))         (setf saved-in-file (new-autosave-pathname self))         (setf buffer-modcnt-at-last-save (buffer-modcnt (fred-buffer self)))))(defmethod window-save :after((self autosave-fred-mixin))    (with-slots (buffer-modcnt-at-last-save saved-in-file) self         (when saved-in-file              (delete-file saved-in-file :if-does-not-exist nil)              ;(window-save-copy-as self saved-in-file)              )         (setf buffer-modcnt-at-last-save (buffer-modcnt (fred-buffer self)))))(defmethod remove-view-from-window :around ((self autosave-fred-mixin))     (let ((container-closed-p (null (assoc (wptr self) ccl::*window-object-alist*))))        (call-next-method)        (when (and  container-closed-p                             (saved-in-file self))             (delete-file (saved-in-file self) :if-does-not-exist nil))))        #|(defclass my-fred-item (autosave-fred-mixin fred-item)    ()    (:default-initargs       :autosave-period 0 ))(defclass window-with-save (window)    ())(defmethod window-save ((self window-with-save))    (window-save (ccl::window-key-handler self)))(make-instance 'window-with-save     :view-size #@(300 200)     :view-subviews (list (setf win (make-instance 'scrolling-fred-view                                                              :fred-item-class 'my-fred-item                                                               :allow-returns t                                                              :view-position #@(50 50)                                                              :view-size #@(200 100)))))|#