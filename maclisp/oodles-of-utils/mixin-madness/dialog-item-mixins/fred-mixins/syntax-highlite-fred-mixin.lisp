(in-package :oou)(oou-provide :syntax-highlite-fred-mixin)(first-part-font-spec :initform                                         (list "Monaco" :bold 18 (list :color-index (fred-palette-closest-entry *blue-color*)))                                        :initarg :first-part-font-spec                                        :accessor first-part-font-spec)     (argument-font-spec :initform                                       (list "GoMan Helvetica" :italic 12 (list :color-index (fred-palette-closest-entry *red-color*)))                                       :initarg :argument-font-spec                                       :accessor argument-font-spec)     (second-part-font-spec :initform                                         (list "Monaco" :bold 18 (list :color-index (fred-palette-closest-entry *blue-color*)))                                        :initarg :second-part-font-spec                                        :accessor second-part-font-spec)(defclass syntax-highliter ()   ())(defvar *command-font* (list "Monaco" :bold 18 (list :color-index (fred-palette-closest-entry *blue-color*))))(defvar *default-font* (list "GoMan Helvetica" :plain 12 (list :color-index (fred-palette-closest-entry *black-color*))))))Strategie :fontify des gesamten Files beim OpenAnschliessend muss nur der sichtbare Teil "uberpr"uft werden. ? Der Teil der gerade editiert wurde. Aber welcher ist das? Nur die aktuelle Zeile?Wenn das Einfuegen schon in der richtigen Farbe passiert, dann reicht die aktuelle Zeile(defmethod highlite-syntax ((fred fred-mixin) commands &aux (fred-buffer (fred-buffer fred)))   (let ((start-pos 0)           (end-pos (buffer-size fred-buffer)))      (do ((next-pos (ccl::buffer-forward-find-char fred-buffer #\@ start-pos end-pos)                             (ccl::buffer-forward-find-char fred-buffer #\@ next-pos end-pos))             (all-pos nil))            ((null next-pos) all-pos)         (push next-pos all-pos))      (buffer-set-font-spec fred-buffer                                          *default-font*                                          start-pos end-pos)))      (dolist (command commands)         (do ((next-first-part-pos (buffer-string-pos fred-buffer (first-part-of-template command) :start start-pos :end end-pos)                                                  (buffer-string-pos fred-buffer (first-part-of-template command) :start next-first-part-pos :end end-pos)))               ((null next-first-part-pos))            (let* ((next-first-part-pos-end (+ next-first-part-pos (length (first-part-of-template command))))                      (next-second-part-pos (buffer-string-pos fred-buffer (second-part-of-template command) :start next-first-part-pos-end :end end-pos))                      (next-second-part-pos-end (when next-second-part-pos                                                                      (+ next-second-part-pos (length (second-part-of-template command))))))                              (when (and next-first-part-pos                                 next-second-part-pos)                   (buffer-set-font-spec fred-buffer                                                        *command-font*                                                       next-first-part-pos next-first-part-pos-end)                   (buffer-set-font-spec fred-buffer                                                        *command-font*                                                       next-second-part-pos next-second-part-pos-end)                   (setf next-first-part-pos next-second-part-pos-end)))))))