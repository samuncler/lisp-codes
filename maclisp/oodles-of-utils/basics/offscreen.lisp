(in-package :oou)(oou-provide :offscreen);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(eval-when (:compile-toplevel :load-toplevel :execute)  )(export '(               ));--------------------------------------------------------------------------;;; Body should consist of low-level Quickdraw calls, which will be;;; done on the pixmap.;;; Bugs:  doesn't deallocate gworld. this must happen in the calling function(defmacro make-pixmap ((w h) &body body)   `(rlet ((cgrafptr :pointer) (gdhandle :pointer))       (#_GetGWorld cgrafptr gdhandle)       (let* ((gworld (make-gworld ,w ,h))                 (pixmap (#_GetGWorldPixMap gworld)))          (unwind-protect             (progn                (#_SetGworld gworld (ccl:%null-ptr))                (#_LockPixels pixmap)                (#_EraseRect (ccl:rref gworld cgrafport.portrect))                ,@body))          (#_UnLockPixels pixmap)          (#_SetGWorld (ccl:%get-ptr cgrafptr) (ccl:%get-ptr gdhandle))          (values pixmap                       gworld))))(defun make-gworld (w h)   (rlet ((bounds-rect :rect :top 0 :left 0 :right w :bottom h)             (gworldp :pointer))      (unless (zerop (#_NewGWorld gworldp 0 bounds-rect (ccl:%null-ptr) (ccl:%null-ptr) 0))         (error "Failed to make gworld"))      (ccl:%get-ptr gworldp)))#|(setf pm         (make-pixmap (200 100)             (#_DrawPicture (get-resource "PICT" 132)                (make-record :rect :topleft #@(0 0) :bottomright #@(200 100)))))(setf win (make-instance 'window))(with-focused-view win     (copy-bits pm (rref (wptr win) :WindowRecord.portbits)                      (make-record :rect :topleft #@(0 0) :bottomright #@(200 100))                      (rref (wptr win) :WindowRecord.portrect)))|#