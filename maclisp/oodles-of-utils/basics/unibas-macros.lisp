(in-package :oou)(oou-provide :unibas-macros);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; some macros concerning with view styles and some interesting points of views; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(require :Quickdraw)(oou-dependencies :Quickdraw-u)(export '(with-font with-selected-window with-pen-mode with-pen-pattern with-pen-size                 with-pen view-width view-right view-height view-left view-bottom                  view-top view-middle-left view-middle-right view-middle-top                  view-middle-bottom view-bottom-left view-bottom-right view-top-right                 view-top-left with-saved-selection));--------------------------------------------------------------------------(defmacro with-font ((font self ) &body body)   `(let ((old-font (actual-font ,self)))       (setf (actual-font ,self) ,font)       (progn ,@body)       (setf (actual-font ,self) old-font)))(defmacro with-selected-window ((window) &body body)   `(let ((old-front-window (front-window)))       (unless (eq old-front-window ,window)          (window-select ,window)          (view-draw-contents ,window))       (progn ,@body)       (window-select old-front-window)))(defmacro with-pen-mode ((pen-mode self ) &body body)   `(with-focused-view ,self        (with-pen-state (:pnMode (ccl::mode-arg ,pen-mode))            (progn ,@body))))(defmacro with-pen-pattern ((pen-pattern self ) &body body)   `(with-focused-view ,self        (with-pen-state (:pnPat ,pen-pattern)            (progn ,@body))))(defmacro with-pen-size ((size-h size-v self ) &body body)   `(with-focused-view ,self        (with-pen-state (:pnSize (make-point ,size-h ,size-v))            (progn ,@body))))(defmacro with-pen ((pen-mode pen-pattern pen-size-h pen-size-v self ) &body body)   `(with-focused-view ,self        (with-pen-state (:pnMode (ccl::mode-arg ,pen-mode)                                    :pnPat ,pen-pattern                                    :pnSize (make-point ,pen-size-h ,pen-size-v))            (progn ,@body))))(defmacro with-saved-selection (fred &body body)    `(let* ((fred-buffer (fred-buffer ,fred))               (fred-position (buffer-position fred-buffer)))        (multiple-value-bind (start-pos end-pos) (selection-range ,fred)            (collapse-selection ,fred t)            (progn ,@body)            (if (= start-pos end-pos)               (set-mark fred-buffer fred-position)               (set-selection-range ,fred start-pos end-pos)))));------------------------------------------------------------------------------------;;; Some interesting points of views(defmacro view-width (view)   `(point-h (view-size ,view)))(defmacro view-height (view)  `(point-v (view-size ,view)))(defmacro view-right (view)  `(+ (point-h (view-position ,view))       (point-h (view-size ,view))))(defmacro view-left (view)  `(point-h (view-position ,view)))(defmacro view-bottom (view)  `(+ (point-v (view-position ,view))       (point-v (view-size ,view))))(defmacro view-top (view)  `(point-v (view-position ,view)))(defmacro view-middle-left (view)  `(let ((dp (view-position ,view))            (s (view-size ,view)))      (make-point (point-h dp)                           (+ (point-v dp) (round (point-v s) 2)))))(defmacro view-middle-right (view)  `(let ((dp (view-position ,view))            (s (view-size ,view)))      (make-point (+ (point-h dp) (point-h s))                          (+ (point-v dp) (round (point-v s) 2))))) (defmacro view-middle-top (view)  `(let ((dp (view-position ,view))            (s (view-size ,view)))      (make-point (+ (point-h dp) (round (point-h s) 2))                           (point-v dp))))(defmacro view-middle-bottom (view)  `(let ((dp (view-position ,view))           (s (view-size ,view)))      (make-point (+ (point-h dp) (round (point-h s) 2))                          (+ (point-v dp) (point-v s))))) (defmacro view-bottom-left (view)   `(let ((dp (view-position ,view))             (s (view-size ,view)))       (make-point (point-h dp)                            (+ (point-v dp) (point-v s)))))(defmacro view-bottom-right (view)  `(let ((dp (view-position ,view))            (s (view-size ,view)))      (make-point (+ (point-h dp) (point-h s))                          (+ (point-v dp) (point-v s)))))(defmacro view-top-right (view)   `(let ((dp (view-position ,view))            (s (view-size ,view)))       (make-point (+ (point-h dp) (point-h s))                           (+ (point-v dp)))))(defmacro view-top-left (view)   `(view-position ,view))