(in-package :oou)(oou-provide :periodic-task);******************************************************************************                                    ;; Copyright © 1995 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; ;; Changes (worth to be mentioned):; ------------------------------; ;;*******************************************************************************;*******************************************************************************(oou-dependencies ) (export '(          ));-------------------------------------------------------------------------------;-------------------------------------------------------------------------------(defvar *special-brownies* nil)(defclass brownie ()  ((process :initform nil            :accessor process)   (task-list :initform nil              :accessor task-list)))(defmethod cancel-all-tasks-of-prefab ((self null) prefab)  (dolist (brownie *special-brownies*)    (cancel-all-tasks-of-prefab brownie prefab)))(defmethod cancel-all-tasks-of-prefab ((self brownie) prefab)  (dolist (task (task-list self))    (setf (prefabs task)          (delete prefab (prefabs task) :test #'eq))))(defmethod find-task ((brownie brownie) task-name)  (find task-name (task-list brownie) :key #'(lambda (task)                                               (name task))))(defmethod remove-view-from-window :before ((view simple-view))  (cancel-all-tasks-of-prefab nil view));---------------------------------------------------------------------------------------------(defclass periodic-task-brownie (brownie)  ())(defmethod initialize-instance :after ((brownie periodic-task-brownie) &rest initargs)  (declare (ignore initargs))  (start-process brownie)  (push brownie *special-brownies*))(defmethod start-process ((brownie periodic-task-brownie))  (if (and (process brownie)           (process-active-p (process brownie)))    (process brownie)    (setf (process brownie)          (process-run-function '(:name "periodic task brownie"                                    :priority 0                                  :quantum 6                                  :stack-size 16384)                                #'(lambda (brownie)                                    (loop                                      (without-interrupts                                       (dolist (task (task-list brownie))                                         (when (and (to-do task)                                                    (> (#_TickCount) (next-execution-tick task)))                                           (dolist (prefab (prefabs task))                                             (when (needs-execution-p prefab task)                                               (funcall (to-do task) prefab task)))                                           (when (after-execution task)                                             (funcall (after-execution task) task))                                           (setf (next-execution-tick task)                                                 (+ (#_TickCount) (* 60 (period task))))))                                       (ccl::process-allow-schedule))))                                brownie))))(defun periodic-task-brownie ()  (let ((brownie (find-if #'(lambda (brownie)                              (typep brownie 'periodic-task-brownie))                          *special-brownies*)))    (if brownie      (progn        (start-process brownie)        brownie)      (make-instance 'periodic-task-brownie))));---------------------------------------------------------------------------------------------(defclass task ()  ((name :initform nil         :initarg :name         :accessor name)   (period :initform 5           :accessor period           :initarg :period)   (prefabs :initform nil            :accessor prefabs            :initarg :prefabs)   (brownie :initform nil            :accessor brownie            :initarg :brownie)   (to-do :initform nil          :initarg :to-do          :accessor to-do)   (after-execution :initform nil                    :initarg :after-execution                    :accessor after-execution)   (next-execution-tick :initform 0                        :accessor next-execution-tick)))(defmethod give-task ((ob task))  (setf (next-execution-tick ob) (#_TickCount))  (push ob (task-list (brownie ob)))  ob)(defmethod cancel-task ((self task))  (setf (task-list (brownie self))        (delete self (task-list (brownie self)))))(defmethod needs-execution-p ((prefab simple-view) (task task))  (declare (ignore task))  (wptr prefab))(defmethod needs-execution-p (prefab (task task))  (declare (ignore prefab task))  t);----------------------------------------------------------------------------------------------#|(defclass show-time (task)  ())(defmethod draw-integer-to-view ((view view) (integer integer) &optional h v)  (with-port (wptr view)    (when (and h v)      (#_moveto h v))    (with-pstrs ((string ""))      (#_numtostring integer string)      (when (< integer 10)        (#_drawchar #\0))      (#_drawstring string))))(defmethod initialize-instance :after ((self show-time) &rest initargs)  (declare (ignore initargs))  (setf (period self) 1        (brownie self) (periodic-task-brownie)        (to-do self) #'(lambda (view task)                         (declare (ignore task))                         (with-focused-view view                           (with-fore-color #.*blue-color*                             (rlet ((rect :rect                                          :topleft #@(0 0)                                          :bottomright (view-size view)))                               (#_EraseRect rect))                             (multiple-value-bind (second minute hour) (decode-universal-time (get-universal-time))                               (draw-integer-to-view view hour 2 16)                               (#_drawchar #\:)                               (draw-integer-to-view view minute)                               (#_drawchar #\:)                               (draw-integer-to-view view second))))))  (give-task self))(setf show-time-task (make-instance 'show-time))(setf win-with-time (make-instance 'windoid                      :view-font '("New York" 14)                      :view-size #@(74 23)))(push win-with-time      (prefabs show-time-task))(dotimes (i 10)  (push (make-instance 'windoid          :view-position (make-point 410 (+ 50 (* i 50)))          :view-font '("Geneva" 12 :bold)          :view-size #@(67 22))        (prefabs show-time-task)))(cancel-task show-time-task);-----------------------------------------------------------------------------------------------(defmethod all-red-texts ((self fred-mixin) &optional (start-pos 0) end-pos &aux (buffer (fred-buffer self)) red-list)  (flet ((next-red-start (pos)           (do ((next-font-change-pos (buffer-next-font-change buffer pos)                                       (buffer-next-font-change buffer next-font-change-pos)))                ((or (null next-font-change-pos)                     (find '(:color-index 216)                            (buffer-char-font-spec buffer next-font-change-pos)                           :test #'equal))                 next-font-change-pos)))         (next-red-end (pos)           (do ((next-font-change-pos (buffer-next-font-change buffer pos)                                       (buffer-next-font-change buffer next-font-change-pos)))                ((or (null next-font-change-pos)                     (not (find '(:color-index 216)                            (buffer-char-font-spec buffer next-font-change-pos)                           :test #'equal)))                 (or next-font-change-pos                     end-pos)))))    (unless end-pos      (setf end-pos (buffer-size buffer)))    (do* ((next-start (if (find '(:color-index 216)                                 (buffer-char-font-spec buffer start-pos) :test #'equal)                        start-pos                        (next-red-start start-pos))                      (next-red-start next-end))          (next-end (next-red-end next-start) (next-red-end next-start)))         ((or (null next-start)              (>= next-start end-pos))          red-list)      (push (list* next-start next-end)            red-list))))(defmethod all-visible-red-texts ((self fred-mixin))  (let* ((buffer (fred-buffer self))         (size (buffer-size buffer))         (start-pos (buffer-position (fred-display-start-mark self)))         (end-pos (do* ((i 0 (1+ i))                        (line-end (buffer-line-end buffer start-pos i)                                  (buffer-line-end buffer start-pos i)))                       ((or (= (fred-vpos self line-end) -1)                            (>= line-end size))                        (if (>= line-end size)                          size                          (buffer-line-end buffer start-pos (1- i)))))))    (all-red-texts self start-pos end-pos)))(defclass hilight-red-text (task)  ((bold-p :initform nil           :accessor bold-p)))  (defmethod initialize-instance :after ((self hilight-red-text) &rest initargs)  (declare (ignore initargs))  (setf (period self) 1        (brownie self) (periodic-task-brownie)        (to-do self) #'(lambda (fred-item task)                         (declare (ignore task))                         (let ((buffer (fred-buffer fred-item))                               (red-texts (all-visible-red-texts fred-item)))                           (with-focused-view fred-item                             (dolist (red-text red-texts)                               (buffer-set-font-spec buffer (if (bold-p self)                                                              '(:plain :extend)                                                              '(:plain :bold))                                                     (car red-text) (cdr red-text))                               (invalidate-corners fred-item                                                    (make-point 0                                                               (- (fred-vpos fred-item (car red-text))                                                                   (oou::fr-line-ascent fred-item (buffer-line buffer (car red-text)))))                                                   (make-point (point-h (view-size fred-item))                                                               (+ (fred-vpos fred-item (cdr red-text))                                                                   (oou::fr-line-descent fred-item (buffer-line buffer (cdr red-text)))))                                                   nil)                               ))))                                            (after-execution self) #'(lambda (task)                                   (setf (bold-p task) (not (bold-p task)))))  (give-task self))(setf hilite (make-instance 'hilight-red-text))(setf fred (make-instance 'fred-window))(push (fred-item fred)      (prefabs hilite))(cancel-task hilite)(setf *special-brownies* nil)(inspect *special-brownies*)|#