(in-package :oou)(oou-provide :twist-down);--------------------------------------------------------------------------;;;;twist-down;;;;© MCMXCII Northwestern University Institute for the Learning Sciences;;;;Richard Lynch;;;;lynch@ils.nwu.edu;;;;;;;;Displays a hierarchy in a manner similar to finders twist-down folders.;;;;;;;;This code is provided free of charge.  No warranty, express or implied.;;;;Please send [suggestions for] improvements to the above or Snail:;;;;1890 Maple;;;;Evanston, IL  60201#|Is your current grapher display of a hierarchy a little...gargantuan?I have shamelessly plagiarized Apple's System 7 twist-down-triangle-folderlook-and-feel in a twist-down.Credit must be given to Mike Engber and [a colleague who will kill me forforgetting who he was] who suggested we code it a la Finder.I have chosen to write this code to cache information such as a node's childrenand display string, as that speeds up drawing considerably.  It is memoryintensive, however.  If you wish to sacrifice speed for memory, it should notbe too hard to patch.One obvious "feature" is that nodes must test eq for this code to work.  Thenext version will allow eql and equal.  Perhaps some generic function will beallowed Real Soon Now.Kudos to whomever wrote scrollers.lisp in the Library folder.  It handles allthe grungy scrolling of the view, which I would have wasted weeks on, andnever gotten right.Suggestions for improvement to scrollers.lisp:  Take out (require :scroll-bar-dialog-items), as they are now built-in.  Export:    scroller    scroll-bar-limits    scroll-bar-page-size    update-scroll-bars    h-scroller    v-scroller  Alternatively to exporting h-scroller and v-scroller, one could defmethod  scroll-bar-scroll-sizes and export it.  Invalidate-view a scroller when its (- max min) changes to/from non-zero.|#;----------------------------------------------------------------------(require :scrollers)(oou-dependencies :font-info                  );-----------------------------------------------------------------------(defclass twist-down-scroller (ccl::scroller)  ()  (:default-initargs    :view-position #@(4 4)  ))(defmethod ccl::scroll-bar-limits ((view twist-down-scroller))  (let* ((size (view-size view))         (width (point-h size))         (height (point-v size))         (h-limit (- (max-h-drawn view) width))         (v-limit (- (max-v-drawn view) height))        )    (values (make-point 0 (max 0 h-limit)) (make-point 0 (max 0 v-limit)))) )(defclass twist-down (twist-down-scroller dialog-item)  ((root     :documentation "Root of hierarchy to display."     :accessor root     :initarg :root     :initform nil   )   (children-function     :documentation "Function to return the children of a given node."     :accessor children-function     :initarg :children-function     :initform #'false     :type 'function   )   (node-string-function     :documentation "Must return a string to be printed."     :accessor node-string-function     :initarg :node-string-function     :initform #'(lambda (node) (format nil "~A" node))     :type 'function   )   (selected     :documentation "The node selected."     :accessor selected     :initarg :selected     :initform nil   )   (branch-cache     :documentation "Default cache of branch information for each node."     :accessor branch-cache     :initarg :branch-cache     :initform (make-hash-table :test #'eq)   )   (node-branch-get-function     :documentation "Function to return a branch given a twist-down and node."     :accessor node-branch-get-function     :initarg :node-branch-get-function     :initform #'(lambda (td node) (gethash node (branch-cache td)))     :type 'function   )   (node-branch-set-function     :documentation "Function to set a branch for a given twist-down node."     :accessor node-branch-set-function     :initarg :node-branch-set-function     :initform #'(lambda (td node branch)                   (setf (gethash node (branch-cache td)) branch)                 )     :type 'function   )   (max-h-drawn     :documentation "Maximum coordinate drawn to in the h direction."     :accessor max-h-drawn     :initarg :max-h-drawn     :initform 0     :type 'fixnum   )   (max-v-drawn     :documentation "Maximum coordinate drawn to in the v direction."     :accessor max-v-drawn     :initarg :max-v-drawn     :initform 0     :type 'fixnum   )   (indent     :documentation "Determines the indentation at each level."     :accessor indent     :initarg :indent     :initform 20     :type 'fixnum   )   (branch-lines     :documentation "Used to cache the lines of nodes."     :accessor branch-lines     :initarg :branch-lines     :initform (make-array 0 :fill-pointer t :adjustable t)     :type 'array   )  )  (:documentation "Displays a hierarchy similar to Finder's twist down files.")  (:default-initargs    :view-size #@(100 256)    :track-thumb-p t) )(defclass branch ()  ((node     :documentation "The node being displayed."     :accessor node     :initarg :node     :initform nil   )   (string-cache     :documentation "A cache of the string for the node."     :accessor string-cache     :initarg string-cache     :initform nil     :type 'string   )   (downp     :documentation "Flag for whether the branch flag is down or not."     :accessor downp     :initarg :downp     :initform nil     :type '(or null (satisfies #.#(lambda (foo) (eq foo t))))   )   (children     :documentation "A cache of the children of node."     :accessor children     :initarg :children     :initform :unknown   )  )  (:documentation "Information about the display of an individual branch."))(defmethod node-branch ((view twist-down) node)  "twist-down nodeReturns the branch for node using node-branch-get-function."  (funcall (node-branch-get-function view) view node))(defmethod set-node-branch ((view twist-down) node branch)  "twist-down node branchSets the branch for node using node-branch-set-function."  (funcall (node-branch-set-function view) view node branch)  (when (typep branch 'branch)    (setf (string-cache branch) (funcall (node-string-function view) node))) )(defmethod (setf node-branch) (branch (view twist-down) node)  (set-node-branch view node branch))(defmethod twist-down-children ((view twist-down) node)  "twist-down nodeReturns the children of node.  The cache will be used/updated."  (let* ((branch (node-branch view node))         (kids (children branch))        )    (if (eq kids :unknown)      (without-interrupts        (setf (children branch) (funcall (children-function view) node))        (dolist (child (children branch) (children branch))          (set-node-branch view child (make-instance 'branch :node child))      ) )      kids) ) )(defmethod twist-down-invalidate-cache ((view twist-down) node)  "twist-down nodeInvalidates the children cache and updates the string cache of node."  (let ((branch (node-branch view node)))    (when (typep branch 'branch)      (setf (children branch) :unknown            (string-cache branch) (funcall (node-string-function view) node)) ) ) )(defmethod initialize-instance :after ((view twist-down) &key root)  (let* ((font (view-font view))         (v (font-line-height font))         (h (font-widmax font))        )    (setf (scroll-bar-scroll-size (ccl::h-scroller view)) h          (scroll-bar-scroll-size (ccl::v-scroller view)) v          (node-branch view root) (make-instance 'branch :node root)) ) )(defmethod view-draw-contents :after ((view twist-down))  (setf (max-h-drawn view) 0)  (setf (max-v-drawn view) 0)  (adjust-array (branch-lines view) 0 :fill-pointer 0)  (draw-branch view (root view))  (when (selected view)    (let* ((selected (selected view))           (line (position selected (branch-lines view) :test #'eq))           (line-height (font-line-height (view-font view)))           (top (* line line-height))           (left line-height)           (right (max-h-drawn view))           (bottom (+ top line-height))          )      (rlet ((rect :rect :left left :top top :bottom bottom :right right))        (#_InvertRect rect)  ) ) )  (ccl::update-scroll-bars view :length t)  (let* ((h-scroll (ccl::h-scroller view))         (v-scroll (ccl::v-scroller view))         (h-setting (scroll-bar-setting h-scroll))         (h-max (scroll-bar-max h-scroll))         (v-setting (scroll-bar-setting v-scroll))         (v-max (scroll-bar-max v-scroll))        )    (when (or (zerop h-max) (zerop v-max))      (set-view-scroll-position view h-setting v-setting)  ) )  (invalidate-view (ccl::h-scroller view))  (invalidate-view (ccl::v-scroller view)))(defmethod draw-branch ((view twist-down) node &optional (level 0))  "twist-down node &optional levelDraws the triangle and updates max-h-drawn and max-v-drawn.Then draws node by calling draw-node.Finally, max-v-drawn, max-h-drawn and branch-lines are updated.If children should be drawn, draw-branch is called for each child."  (let* ((left 0)         (top (max-v-drawn view))         (line-height (font-line-height (view-font view)))         (branch (node-branch view node))         ;Triangle         (unit (/ line-height 8))         (floor-unit (floor unit))         (floor-three-unit (floor (* 3 unit)))         (floor-six-unit (floor (* 6 unit)))         (start-h (+ left floor-unit))         (start-v (+ top floor-unit))         ;Contents         (contents-h (+ left line-height (* (indent view) level)))         (contents-v top)        )    ;Draw triangle    (#_MoveTo start-h start-v)    (if (downp branch)      (unless (null (twist-down-children view node))        (#_Line floor-six-unit 0)        (#_Line (- floor-three-unit) floor-three-unit)        (#_LineTo start-h start-v)      )      (unless (null (twist-down-children view node))        (#_Line 0 (floor (* 6 unit)))        (#_Line floor-three-unit (- floor-three-unit))        (#_LineTo start-h start-v)    ) )    ;Contents    (#_MoveTo contents-h contents-v)    (draw-node view node level)    ;Update max-v-drawn and branch-lines    (setf (max-v-drawn view) (max (max-v-drawn view) (+ top line-height)))    (vector-push-extend node (branch-lines view))    ;Children    (if (downp branch)      (dolist (child (twist-down-children view node))        (draw-branch view child (1+ level))    ) )) )(defmethod draw-node ((view twist-down) node level)  "twist-down node levelResponsible for drawing the node and updating max-h-drawn."  (let* ((string (string-cache (node-branch view node)))         (font (view-font view))         (line-height (font-line-height font))         (height (font-height font))        )    (#_Move 0 height)    (with-pstrs ((str string))      (#_DrawString str)    )    (setf      (max-h-drawn view)      (max (max-h-drawn view)           (+ line-height (string-width string font) (* (indent view) level))) ) ) )(defmethod point-to-node ((view twist-down) h &optional v)  "twist-down h &optional vReturns the node, if any, at the given point."  (let* ((point (make-point h v))         (h (point-h point))         (v (point-v point))         (line-height (font-line-height (view-font view)))         (line (floor v line-height))         (branches (branch-lines view))         (right (max (max-h-drawn view) (point-h (view-size view))))         (bottom (max-v-drawn view))        )    (when (and (> h 0)               (< h right)               (> v 0)               (< v bottom)               (< line (length branches))          )      (aref branches line)) ) )(defmethod node-select ((view twist-down) (h integer) &optional v)  "twist-down h &optional v   twist-dwon node &optional nullSelects the node at the given point, or the given node."  (setf (selected view) (point-to-node view h v))  (invalidate-view view t))(defmethod node-select ((view twist-down) node &optional junk)  (check-type junk 'null)  (setf (selected view) node)  (invalidate-view view t))(defmethod view-click-event-handler :before ((view twist-down) where)  (node-select view where))(defmethod view-click-event-handler :after ((view twist-down) where)  (let* ((h (point-h where))         (v (point-v where))         (line-height (font-line-height (view-font view)))         (triangle-size line-height)         (line (floor v line-height))         (branches (branch-lines view))         node         branch        )    (when (and (> h 0)               (< h triangle-size)               (< line (length branches))          )      (setq node (aref branches line))      (when (twist-down-children view node)        (setq branch (node-branch view node))        (setf (downp branch) (not (downp branch)))        (invalidate-view view t)    ) )    (when (and (point-to-node view where) (dialog-item-action-function view))      (funcall (dialog-item-action-function view) view)) ) )#|;;;;A toy example(defparameter *children* (make-hash-table :test #'eq))(setf (gethash '|Animal| *children*) '(|Dog| |Cat| |Human|))(setf (gethash '|Dog| *children*) '(|Snoopy| |Odie|))(setf (gethash '|Cat| *children*) '(|Garfield| |Felix|))(setf (gethash '|Human| *children*) '(|Mike| |Martha| |Me| |You|))(setf (gethash '|Me| *children*) '(|None that I know of :-)|))(setf (gethash '|You| *children*) '(|How should I know?!!!|))(setf (gethash '|Mike| *children*) '(|Ariela|))(setf (gethash '|Martha| *children*) '(|Ariela|))(defparameter *sample*  (make-instance 'twist-down    :root '|Animal|    :children-function #'(lambda (node) (gethash node *children*))    :view-size #@(226 128)    :node-string-function #'string) )(add-subviews  (make-instance 'dialog    :window-title "Rich's World"    :view-size #@(250 150)  )  *sample*);;;;Something a little more...real.  :-](defun sample-click-handler (td)  "twist-downAllows you to view any branch of the CLOS hierarchy."  (if (double-click-p)    (let ((node (selected td)))      (make-instance 'sample-dialog        :window-title (format nil "~A" node)        :view-position :centered        :view-size #@(315 271)        :view-subviews        (list          (make-instance 'twist-down            :view-nick-name 'clos            :root node            :children-function #'class-direct-subclasses            :view-position #@(0 0)            :view-size #@(300 256)            :dialog-item-action 'sample-click-handler) ) ) ) ) )(defparameter *sample-2*  (make-instance 'twist-down    :view-nick-name 'clos    :root (find-class 't)    :children-function #'class-direct-subclasses    :view-position #@(0 0)    :view-size #@(300 256)    :dialog-item-action #'sample-click-handler) )(defclass sample-dialog (dialog)  ()  (:default-initargs    :grow-icon-p t  ))(defmethod set-view-size :after ((view sample-dialog) h &optional v)  (let* ((size (make-point h v))         (real-h (point-h size))         (real-v (point-v size))        )    (set-view-size (view-named 'clos view) (- real-h 15) (- real-v 15))) )(add-subviews  (make-instance 'sample-dialog    :window-title "MCL 2.0 CLOS"    :view-position :centered    :view-size #@(315 271)  )  *sample-2*)|#