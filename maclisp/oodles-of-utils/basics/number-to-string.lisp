(in-package :oou)(oou-provide :number-to-string);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; some functions converting numbers to string; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies )(export '(integer-to-string float-to-string));------------------------------------------------------------------(deftrap _numtostring ((thenum :signed-long) (thestring (:pointer (:string 255))))               nil    (:no-trap (ccl::%gen-trap #xA9EE :d0 thenum :a0 thestring :word 0)))(defun integer-to-string (number)    "Converts an integer to a string, using the toolbox."    (with-returned-pstrs ((string ""))         (#_numtostring number string)         (%get-string string)         ));;; this is a fast alternative to format for floating-point numbers;;; with no exponent(defun float-to-string (number fractional-digits)  "Converts a floating-point number to a string, ~   with a given number of digits following the decimal point."  (multiple-value-bind (integral fractional)                       (truncate (round-significand number fractional-digits))    (let ((int-string (integer-to-string integral)))      ;; dont mess around with fractions if you dont have to      (if (zerop fractional-digits)        (concatenate 'string int-string ".")        (let* ((fract-int (* (expt 10 fractional-digits)                             ;; use abs because truncate signs the remainder                             (abs fractional)))               (fract-string (integer-to-string fract-int))               ;; pad fraction with enough zeros to separate it from decimal               (pad-string (make-string (- fractional-digits (length fract-string))                                        :initial-element #\0)))          (concatenate 'string int-string "." pad-string fract-string)          )))))(defun round-significand (number fractional-digits)  "Round the significand for display."  (if fractional-digits    (let ((divisor (expt 10 (- fractional-digits))))      (* (round number divisor) divisor))    (values number)    ))#|(integer-to-string -12)(round-significand 10.123456 2)(float-to-string -12.34567 2)|#