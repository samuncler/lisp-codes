(in-package :oou)(oou-provide :unibas-patterns);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Some fancy patterns; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(eval-when (:compile-toplevel :load-toplevel :execute)   )(export '(random-gray-pattern *100%-gray-pattern* *75%-gray-pattern*               *50%-gray-pattern* *25%-gray-pattern* *12%-gray-pattern*                *6%-gray-pattern* *3%-gray-pattern* *0%-gray-pattern*                *example-pattern* *very-light-gray*));-----------------------------------------------------------------------------(defun code-value (bit-list pixels)   (do ((bits bit-list (cdr bits))          (code 0))         ((null bits) code)      (when (memq (car bits) pixels)          (setf code                    (+ (expt 2 (1- (length bits)))                       code)))))                                 (defun random-gray-pattern (percentage)   (let* ((number-of-black-pixels (round (* percentage 0.64)))             (black-pixels (do ((list-of-black-pixels nil))                                         ((= (length list-of-black-pixels)                                               number-of-black-pixels)                                           list-of-black-pixels)                                      (pushnew (random 64) list-of-black-pixels))))      (make-record (:pattern :storage :pointer)                            (:pat 0) (code-value '(0 1 2 3 4 5 6 7) black-pixels)                            (:pat 1) (code-value '(8 9 10 11 12 13 14 15) black-pixels)                            (:pat 2) (code-value '(16 17 18 19 20 21 22 23) black-pixels)                            (:pat 3) (code-value '(24 25 26 27 28 29 30 31) black-pixels)                            (:pat 4) (code-value '(32 33 34 35 36 37 38 39) black-pixels)                            (:pat 5) (code-value '(40 41 42 43 44 45 46 47) black-pixels)                            (:pat 6) (code-value '(48 49 50 51 52 53 54 55) black-pixels)                            (:pat 7) (code-value '(56 57 58 59 60 61 62 63) black-pixels))));---------------------------------------------------------------------------(defvar *100%-gray-pattern*   (make-record (:pattern :storage :pointer)                         (:pat 0) 255                         (:pat 1) 255                         (:pat 2) 255                         (:pat 3) 255                         (:pat 4) 255                         (:pat 5) 255                          (:pat 6) 255                         (:pat 7) 255                         ))(defvar *75%-gray-pattern*   (make-record (:pattern :storage :pointer)                         (:pat 0) 255                         (:pat 1) 170                         (:pat 2) 255                         (:pat 3) 170                         (:pat 4) 255                         (:pat 5) 170                         (:pat 6) 255                         (:pat 7) 170                         ))(defvar *50%-gray-pattern*   (make-record (:pattern :storage :pointer)                         (:pat 0) 170                         (:pat 1) 85                         (:pat 2) 170                         (:pat 3) 85                         (:pat 4) 170                         (:pat 5) 85                         (:pat 6) 170                         (:pat 7) 85                         ))(defvar *25%-gray-pattern*   (make-record (:pattern :storage :pointer)                         (:pat 0) 0                         (:pat 1) 85                         (:pat 2) 0                         (:pat 3) 85                         (:pat 4) 0                         (:pat 5) 85                         (:pat 6) 0                         (:pat 7) 85                         ))(defvar *12%-gray-pattern*   (make-record (:pattern :storage :pointer)                         (:pat 0) 0                         (:pat 1) 68                         (:pat 2) 0                         (:pat 3) 17                         (:pat 4) 0                         (:pat 5) 68                         (:pat 6) 0                         (:pat 7) 17                         ))(defvar *6%-gray-pattern*   (make-record (:pattern :storage :pointer)                         (:pat 0) 0                         (:pat 1) 0                         (:pat 2) 0                         (:pat 3) 17                         (:pat 4) 0                         (:pat 5) 0                         (:pat 6) 0                         (:pat 7) 17                         ))(defvar *3%-gray-pattern*   (make-record (:pattern :storage :pointer)                         (:pat 0) 0                         (:pat 1) 0                         (:pat 2) 0                         (:pat 3) 16                         (:pat 4) 0                         (:pat 5) 0                         (:pat 6) 0                         (:pat 7) 1                         ))(defvar *0%-gray-pattern*   (make-record (:pattern :storage :pointer)                         (:pat 0) 0                         (:pat 1) 0                         (:pat 2) 0                         (:pat 3) 0                         (:pat 4) 0                         (:pat 5) 0                         (:pat 6) 0                         (:pat 7) 0                         ))(defvar *example-pattern*   (make-record (:pattern :storage :pointer)                         (:pat 0) 238                         (:pat 1) 221                         (:pat 2) 187                         (:pat 3) 119                         (:pat 4) 238                         (:pat 5) 221                         (:pat 6) 187                         (:pat 7) 119                         ))(defvar *very-light-gray*   (make-record (:pattern :storage :pointer)                         (:pat 0) 0                         (:pat 1) 0                         (:pat 2) 0                         (:pat 3) 128                         (:pat 4) 0                         (:pat 5) 0                         (:pat 6) 32                         (:pat 7) 0                         ))