(in-package :oou)(oou-provide :screen-safer);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; saving a part of a screen in a picture; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :wmgr-view                                :Quickdraw-u                                :GDevice-u)(export '());---------------------------------------------------------------------------;; macros for saving/restoring screen pixmap images(defmacro safe-kill-picture (picture-var)  `(progn      (when (handlep ,picture-var)       (kill-picture ,picture-var))     (setq ,picture-var nil)))(defmacro with-saved-screen-map ((view clip-rect1 &key (saved-picture (gensym))                                                                               keep) &rest body)    ;; Executes the body which may change a portion of the screen within the    ;; the clip-rection clip-rect1 rectangular portion of the screen     ;; (expressed in global coordinates)    ;; Within the body of the form, saved-picture is bound to the picture    ;; corresponding to the clipped image of the bit map.    ;; Upon normal or abnormal termination of the form, restores the screen image    ;; and either deletes the saved-picture (default) or returns the saved-picture.    ;; The value of the body is not returned.    ` (let (,saved-picture)          (unwind-protect              (setq ,saved-picture (save-screen-map ,view ,clip-rect1))              ,@body              (restore-screen-map ,saved-picture ,clip-rect1)              (unless ,keep                   (safe-kill-picture ,saved-picture)))))(defun save-screen-map (view clip-rect1)    (with-port (wptr view)         (#_ClipRect :ptr clip-rect1)         (with-back-color (get-back-color view)              (with-current-portBits portBits                    (let* ((pict (#_OpenPicture :ptr clip-rect1 :ptr)))                       (#_CopyBits                         :ptr portBits                         :ptr portBits                         :ptr clip-rect1                         :ptr clip-rect1                         :word 0        ;transfer mode                         :ptr (%null-ptr))                       (#_ClosePicture)                       pict)))))(defun restore-screen-map (screen-picture clip-rect1)  ;; restores the portion of the screen saved in the picture screen-picture  ;; corresponding to the global rectangle clip-rect1  (with-Wmgr-view    (when (handlep screen-picture)      (#_DrawPicture  screen-picture  clip-rect1))))#|;; test the screen saver macro(defun test-screen-saver (topLeft bottomRight)  (rlet ((r :rect :topLeft topLeft :bottomRight bottomRight))           (let ((win (make-instance 'window :view-size #@(400 400) :view-position :centered)))          (with-saved-screen-map (*Wmgr-view*  r :saved-picture saved-picture) ; so we can use the saved-picture               (window-select win)               (with-focused-view *Wmgr-view*                     (#_fillRect :ptr r :ptr *light-gray-pattern*))               (with-focused-view win                    (#_drawPicture saved-picture  r))    ; draw the saved pixel map               )                                   ; show the restored portion of the screen          ;(window-close win)          )))(test-screen-saver #@(0 0) #@(200 300))     |#