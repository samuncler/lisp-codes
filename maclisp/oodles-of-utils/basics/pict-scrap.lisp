(in-package :oou)(oou-provide :pict-scrap);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Pict-Scrap.Lisp;;;;Copyright ) 1989, Apple Computer, Inc;;;;;;  This file a scrap-handler for scraps of type PICT;;;;  Once this is installed, windows which copy and paste PICTs will;;  be able to share their work with other applications;;;; Modified for 2.0 by Henry Lieberman;------------------------------------------------------------------------(defconstant $ApplScratch  #xA78)(defclass pict-scrap-handler (scrap-handler) ())(defmethod set-internal-scrap ((self pict-scrap-handler) scrap)  (let* ((old-pict (slot-value self 'internal-scrap)))    (when (handlep old-pict)      (#_KillPicture :ptr old-pict)))  ;dispose of the old pict before we                                      ;put a new one in its place                                      ;this will crash if your program has                                      ;other pointers to the pict, so                                      ;always make sure cut/copy really do                                      ;-copy- the pict  (call-next-method self scrap)  (when scrap (pushnew :pict *scrap-state*)))(defmethod externalize-scrap ((pict-scrap-handler pict-scrap-handler))   (let* ((the-pict (slot-value pict-scrap-handler 'internal-scrap))             (size (#_GetHandleSize :a0 the-pict :d0)))      (when the-pict          (with-dereferenced-handles              ((pict-ptr the-pict))              (#_PutScrap :long size :ostype :pict :ptr pict-ptr)))))(defmethod internalize-scrap ((pict-scrap-handler pict-scrap-handler))  (let* ((the-pict (_NewHandle :d0 0 :a0)))    (#_GetScrap :ptr the-pict      :ostype :pict      :long $ApplScratch)    (setf (slot-value pict-scrap-handler 'internal-scrap) the-pict)))(defmethod get-internal-scrap ((pict-scrap-handler pict-scrap-handler))  (slot-value pict-scrap-handler 'internal-scrap))(pushnew `(:pict . ,(make-instance 'pict-scrap-handler))         *scrap-handler-alist*         :test #'equal)