(in-package :oou)(oou-provide :unibas-patterns);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Some fancy patterns; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(eval-when (:compile-toplevel :load-toplevel :execute)   )(export '(random-gray-pattern *100%-gray-pattern* *75%-gray-pattern*               *50%-gray-pattern* *25%-gray-pattern* *12%-gray-pattern*                *6%-gray-pattern* *3%-gray-pattern* *0%-gray-pattern*                *example-pattern* *very-light-gray*));---------------------------------------------------------------------------(defrecord pattern   (variant ((w0 integer)            (w1 integer)            (w2 integer)            (w3 integer))           ((b0 byte)            (b1 byte)            (b2 byte)            (b3 byte)            (b4 byte)            (b5 byte)            (b6 byte)            (b7 byte))           ((bytes (array byte 8)))           ((array (array :unsigned-byte 8)))));-----------------------------------------------------------------------------(defun random-gray-pattern (percentage)   (let* ((number-of-black-pixels (round (* percentage 0.64)))             (black-pixels (do ((list-of-black-pixels nil))                                         ((= (length list-of-black-pixels)                                               number-of-black-pixels)                                           list-of-black-pixels)                                      (pushnew (random 64) list-of-black-pixels))))      (make-record :pattern                            :b0 (code-value '(0 1 2 3 4 5 6 7) black-pixels)                            :b1 (code-value '(8 9 10 11 12 13 14 15) black-pixels)                            :b2 (code-value '(16 17 18 19 20 21 22 23) black-pixels)                            :b3 (code-value '(24 25 26 27 28 29 30 31) black-pixels)                            :b4 (code-value '(32 33 34 35 36 37 38 39) black-pixels)                            :b5 (code-value '(40 41 42 43 44 45 46 47) black-pixels)                            :b6 (code-value '(48 49 50 51 52 53 54 55) black-pixels)                            :b7 (code-value '(56 57 58 59 60 61 62 63) black-pixels))))                                 (defun code-value (bit-list pixels)   (do ((bits bit-list (cdr bits))          (code 0))         ((null bits) code)      (when (memq (car bits) pixels)          (setf code                    (+ (expt 2 (1- (length bits)))                       code)))));---------------------------------------------------------------------------(defvar *100%-gray-pattern*   (make-record :pattern                         :b0 255                         :b1 255                         :b2 255                         :b3 255                         :b4 255                         :b5 255                          :b6 255                         :b7 255                         ))(defvar *75%-gray-pattern*   (make-record :pattern                         :b0 255                         :b1 170                         :b2 255                         :b3 170                         :b4 255                         :b5 170                         :b6 255                         :b7 170                         ))(defvar *50%-gray-pattern*   (make-record :pattern                         :b0 170                         :b1 85                         :b2 170                         :b3 85                         :b4 170                         :b5 85                         :b6 170                         :b7 85                         ))(defvar *25%-gray-pattern*   (make-record :pattern                         :b0 0                         :b1 85                         :b2 0                         :b3 85                         :b4 0                         :b5 85                         :b6 0                         :b7 85                         ))(defvar *12%-gray-pattern*   (make-record :pattern                         :b0 0                         :b1 68                         :b2 0                         :b3 17                         :b4 0                         :b5 68                         :b6 0                         :b7 17                         ))(defvar *6%-gray-pattern*   (make-record :pattern                         :b0 0                         :b1 0                         :b2 0                         :b3 17                         :b4 0                         :b5 0                         :b6 0                         :b7 17                         ))(defvar *3%-gray-pattern*   (make-record :pattern                         :b0 0                         :b1 0                         :b2 0                         :b3 16                         :b4 0                         :b5 0                         :b6 0                         :b7 1                         ))(defvar *0%-gray-pattern*   (make-record :pattern                         :b0 0                         :b1 0                         :b2 0                         :b3 0                         :b4 0                         :b5 0                         :b6 0                         :b7 0                         ))(defvar *example-pattern*   (make-record :pattern                         :b0 238                         :b1 221                         :b2 187                         :b3 119                         :b4 238                         :b5 221                         :b6 187                         :b7 119                         ))(defvar *very-light-gray*   (make-record :pattern                         :b0 0                         :b1 0                         :b2 0                         :b3 128                         :b4 0                         :b5 0                         :b6 32                         :b7 0                         ))