(in-package :oou)(oou-provide :unibas-cursors);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Some fancy cursors; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(eval-when (:compile-toplevel :load-toplevel :execute)  )(export '(*left-hand-cursor* *right-hand-cursor* *pointer-hand-cursor* *full-hand-cursor*               *splitter-cursor* *cross-hair-cursor* *first-step-cursor* *second-step-cursor*               *insert-cursor*));---------------------------------------------------------------------------(defun make-cursor (data-string mask-string hotspot)  (when (or (> (length (string data-string)) 64)            (> (length (string mask-string)) 64))    (error "data-string & mask-string must be < 64 chars long"))  (rlet ((data :bits16)         (mask :bits16))    (with-pstrs ((data-str data-string)                 (mask-str mask-string))      (#_StuffHex :ptr data :ptr data-str)      (#_StuffHex :ptr mask :ptr mask-str))    (make-record :cursor               :data data               :mask mask               :hotspot hotspot)))(defun make-left-hand-cursor ()  (make-cursor                 "00000000000000000700190022004700C7FE8A019BFEE41087E08420C7C07F80"                "00000000000007001F803F807F80FFFFFFFFFFFFFFFFFFFFFFF8FFF0FFE0FFB0"               #@(16 9)))(defvar *left-hand-cursor* (make-left-hand-cursor))(defun make-right-hand-cursor ()   (make-cursor     "000000000000000000E0009800447FE280137FF1041903F7021101F300FE0000"     "00000000000001E001F801FC7FFEFFFFFFFFFFFF7FFF07FF07FF03FF01FF00FE"     #@(1 8)))(defvar *right-hand-cursor* (make-right-hand-cursor))(defun make-full-hand-cursor ()   (make-cursor     "01801A702648264A124D12496809980188024002200220041004080804080408"     "1BF03FF87FFE7FFF3FFF7FFFFFFFFFFFFFFFFFFF7FFF7FFE3FFE1FFC0FFC0FFC"     #@(8 0)))(defvar *full-hand-cursor* (make-full-hand-cursor))(defun make-pointer-hand-cursor ()   (make-cursor     "038004C004C004C004C004C074F89CAE4CAB240B240310030803080604060406"     "07C00FE00FE00FE00FE07FF8FFFEFFFFFFFF7FFF7FFF3FFF1FFF1FFF0FFF0FFF"     #@(7 0)))(defvar *pointer-hand-cursor* (make-pointer-hand-cursor))(defun make-splitter-cursor ()   (make-cursor     "008001C003E007F001C001C07FFF000000007FFF01C001C007F003E001C00080"     "01C003E007F00FF807F07FFF7FFF7FFF7FFF7FFF7FFF07F00FF807F003E001C0"     #@(9 8)))(defvar *splitter-cursor* (make-splitter-cursor))(defun make-cross-hair-cursor ()  (make-cursor "04000400040004000400FFE00400040004000400040004000000000000000000"               "0000000000000000000000000000000000000000000000000000000000000000"               #@(5 5)))(defvar *cross-hair-cursor* (make-cross-hair-cursor))(defun make-first-step-cursor ()   (make-cursor      "000000000000000000000000000000000000001C001C071C071F071F07C007C0"     "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"     #@(8 8)))(defvar *first-step-cursor* (make-first-step-cursor))(defun make-second-step-cursor ()   (make-cursor      "00000000000000000000000000000000000007000700071C07DC07DC001F001F"     "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"     #@(8 8)))(defvar *second-step-cursor* (make-second-step-cursor))(defun make-insert-cursor ()   (make-cursor      "63011401080108030802080408380FC008000800080008000800080014006300"     "0000000000000000000000000000000000000000000000000000000000000000"     #@(5 8)))(defvar *insert-cursor* (make-insert-cursor))