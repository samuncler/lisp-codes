 ;;; ********************************************************************;;; Layout *************************************************************;;; ********************************************************************;;; Written by Ralf Moeller;;; University of Hamburg, Computer-Science Department, December 1991.;;; Copyright (c) 1991 by Ralf Moeller. All rights reserved.;;; Use and copying of this software and preparation of derivative works;;; based upon this software are permitted, so long as the following;;; conditions are met:;;;      o no fees or compensation are charged for use, copies, or;;;        access to this software;;;      o this copyright notice is included intact.;;; This software is made available AS IS, and no warranty is made about ;;; the software or its performance. ;;; Please send bug reports, comments and suggestions to;;; moeller@informatik.uni-hamburg.de(defstruct (reference (:predicate nil))  position  view  description)(defun find-reference (description references)  (cond ((find-if #'(lambda (ref)                      (if (eq (reference-description ref) description)                        ref                        nil))                  references))        (t (error "no reference ~S found in ~S"                  description references))))(defvar *referencing-views-not-to-be-informed-of-translation* nil)(defclass reference-mixin   ()  ((views-referencing-this-view :accessor views-referencing-this-view                                :initform nil)   (references-of-this-view :accessor references-of-this-view                            :initform nil)   (left-offset :initarg :left-offset :accessor view-left-offset)   (top-offset :initarg :top-offset :accessor view-top-offset)   (right-offset :initarg :right-offset :accessor view-right-offset)   (bottom-offset :initarg :bottom-offset :accessor view-bottom-offset))  (:default-initargs    :left-offset 0    :top-offset 0    :right-offset 0    :bottom-offset 0))(defvar *without-side-effect* nil)(defun set-position-without-side-effect (view new-position)  (let ((*without-side-effect* t))    (set-view-position view new-position)))(defun set-size-without-side-effect (view new-size)  (let ((*without-side-effect* t))    (set-view-size view new-size)))(defmethod (setf references-of-this-view) :after (new-references                                                  (view reference-mixin))  (let* ((reference-points (mapcar #'reference-position                                   new-references))         (position-inner-rect (compute-position reference-points)))    (set-position-without-side-effect      view      (add-points position-inner-rect                 (make-point (- (view-left-offset view))                             (- (view-top-offset view)))))    (set-size-without-side-effect      view      (add-points (compute-size reference-points position-inner-rect)                 (make-point (+ (view-left-offset view)                                (view-right-offset view))                             (+ (view-top-offset view)                                (view-bottom-offset view))))))) (defmethod reference-view-changed-position ((view reference-mixin)                                             sender                                            old-position                                            pos-diff)  (declare (ignore old-position))  (let ((references (references-of-this-view view)))    (dolist (reference references)      (if (eq (reference-view reference) sender)        (progn (setf (reference-position reference)                     (add-points (reference-position reference)                                 pos-diff)))))    (let* ((reference-points (mapcar #'reference-position                                     references))           (position-inner-rect (compute-position reference-points)))            (set-position-without-side-effect       view       (add-points position-inner-rect                   (make-point (- (view-left-offset view))                               (- (view-top-offset view)))))      (set-size-without-side-effect        view        (add-points (compute-size reference-points position-inner-rect)                   (make-point (+ (view-left-offset view)                                  (view-right-offset view))                               (+ (view-top-offset view)                                  (view-bottom-offset view))))))))(defun compute-position (points)  (if (null points)    (error "At least one point expected.")    (make-point (point-h (reduce #'(lambda (p1 p2)                                     (if (> (point-h p1)                                            (point-h p2))                                       p2                                       p1))                                 points))                (point-v (reduce #'(lambda (p1 p2)                                     (if (> (point-v p1)                                            (point-v p2))                                       p2                                       p1))                                 points)))))(defun compute-size (points position)  (if (null points)    (error "At least one point expected.")    (subtract-points (make-point (point-h (reduce #'(lambda (p1 p2)                                                      (if (> (point-h p1)                                                             (point-h p2))                                                        p1                                                        p2))                                                  points))                                 (point-v (reduce #'(lambda (p1 p2)                                                      (if (> (point-v p1)                                                             (point-v p2))                                                        p1                                                        p2))                                                  points)))                     position)))(defmethod set-view-position ((view reference-mixin) h &optional v)  (let ((new-position (make-point h v)))    (cond ((or *without-side-effect*               (not (view-position view)))           (call-next-method))          (t           (let* ((old-position (view-position view))                  (pos-diff (subtract-points new-position                                             old-position)))             (set-position-without-side-effect view new-position)             (dolist (referencing-view (views-referencing-this-view view))               (unless (member referencing-view                               *referencing-views-not-to-be-informed-of-translation*)                 (reference-view-changed-position referencing-view                                                   view                                                  old-position                                                  pos-diff)))             (dolist (reference (references-of-this-view view))               (setf (reference-position reference)                     (add-points (reference-position reference)                                 pos-diff))))))))