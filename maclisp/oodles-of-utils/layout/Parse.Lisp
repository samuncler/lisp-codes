 ;;; ********************************************************************;;; Layout *************************************************************;;; ********************************************************************;;; Written by Ralf Moeller;;; University of Hamburg, Computer-Science Department, December 1991.;;; Copyright (c) 1991 by Ralf Moeller. All rights reserved.;;; Use and copying of this software and preparation of derivative works;;; based upon this software are permitted, so long as the following;;; conditions are met:;;;      o no fees or compensation are charged for use, copies, or;;;        access to this software;;;      o this copyright notice is included intact.;;; This software is made available AS IS, and no warranty is made about ;;; the software or its performance. ;;; Please send bug reports, comments and suggestions to;;; moeller@informatik.uni-hamburg.de(defun layout-spec-p (thing)  (and (consp thing)       (layout-spec-p-using-key (car thing))))(defgeneric layout-spec-p-using-key (thing))(defmethod layout-spec-p-using-key ((thing t))  nil)(defmethod layout-spec-p-using-key ((key (eql ':dag)))  t)(defmethod layout-spec-p-using-key ((key (eql ':rbox)))  t)(defmacro :dag (&rest forms)  `(:gbox (list ':dag . ,forms)))(defun parse-layout-spec (spec)  (if (layout-spec-p spec)    (parse-layout-spec-using-key (first spec) spec)    (error "can't parse non-layout-specification ~S."           spec)))(defun layout-description (spec)  (parse-layout-spec spec))(defgeneric parse-layout-spec-using-key (key                                          layout-spec); Remove comments when pcl supports options to defgenerics.;  (:documentation "This function may be augmented to provide a parser;for a new kind of layout specification. The result is expected to be;a list of created and/or modified view-items."))(defmethod parse-layout-spec-using-key ((key (eql ':dag))                                        layout-spec)    (parse-dag-layout-spec layout-spec 0 0))(defmethod parse-layout-spec-using-key ((key (eql ':rbox))                                        layout-spec)  (parse-rbox-layout-spec layout-spec))(defmacro deflayout (name layout-components &body forms)  `(progn     (defmacro ,name (&rest rest)       `(:gbox (list ',,name . ,rest)))     (defmethod layout-spec-p-using-key ((key (eql ',name)))       t)     (defmethod parse-layout-spec-using-key ((key (eql ',name)) pattern)      (apply #'(lambda ,layout-components                  ,@forms)              (rest pattern)))     ',name))