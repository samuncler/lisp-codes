 ;;; ********************************************************************;;; Layout *************************************************************;;; ********************************************************************;;; Written by Ralf Moeller;;; University of Hamburg, Computer-Science Department, December 1991.;;; Copyright (c) 1991 by Ralf Moeller. All rights reserved.;;; Use and copying of this software and preparation of derivative works;;; based upon this software are permitted, so long as the following;;; conditions are met:;;;      o no fees or compensation are charged for use, copies, or;;;        access to this software;;;      o this copyright notice is included intact.;;; This software is made available AS IS, and no warranty is made about ;;; the software or its performance. ;;; Please send bug reports, comments and suggestions to;;; moeller@informatik.uni-hamburg.de(defclass gbox  ()  ((pattern-parsed :initform nil :accessor gbox-pattern-parsed)   (items :accessor gbox-items)   (pattern :initarg :pattern :reader gbox-pattern)   (position :accessor gbox-position)   (size :accessor gbox-size)))(defun general-layout-spec-p (spec)  (typep spec 'gbox))(defmacro :gbox (pattern)  `(make-instance 'gbox :pattern ,pattern))(defun test-gbox-lazy-parsing (layout-spec)  "Parse gbox patterns relative to #@(0 0) to determine the gbox-size."  (unless (gbox-pattern-parsed layout-spec)    (let ((items (parse-layout-spec (gbox-pattern layout-spec))))      (setf (slot-value layout-spec 'size)            (compute-size (mapcar #'(lambda (item)                                      (add-points (box-item-position item)                                                  (box-item-size item)))                                                                    items)                          #@(0 0)))      (setf (gbox-items layout-spec) items)      (setf (gbox-pattern-parsed layout-spec) t))))(defmethod gbox-size :before ((layout-spec gbox))  (test-gbox-lazy-parsing layout-spec))(defmethod (setf gbox-position) :before (position (layout-spec gbox))  (declare (ignore position))  (test-gbox-lazy-parsing layout-spec))(defmethod (setf gbox-position) :after (position (layout-spec gbox))  (let ((*referencing-views-not-to-be-informed-of-translation*         (gbox-items layout-spec)))    (dolist (item (gbox-items layout-spec))      (setf (box-item-position item)            (add-points position                        (box-item-position item))))))(defmethod gbox-items :before ((layout-spec gbox))  (test-gbox-lazy-parsing layout-spec))