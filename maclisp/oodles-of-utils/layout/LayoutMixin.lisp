; Changes;; 4/17/95 Dieter (defmethod (setf layout) :before ...) removed ;;; ********************************************************************;;; Layout *************************************************************;;; ********************************************************************;;; Written by Ralf Moeller;;; Major suggestions and improvements by Gerd Kamp;;; University of Hamburg, Computer-Science Department, August 1992.;;; Copyright (c) 1992 by Ralf Moeller. All rights reserved.;;; Use and copying of this software and preparation of derivative works;;; based upon this software are permitted, so long as the following;;; conditions are met:;;;      o no fees or compensation are charged for use, copies, or;;;        access to this software;;;      o this copyright notice is included intact.;;; This software is made available AS IS, and no warranty is made about ;;; the software or its performance. ;;; Please send bug reports, comments and suggestions to;;; moeller@informatik.uni-hamburg.de;;; **************************************************************;;; Generic functions to be specialized for objects to be laid out;;; using the box-and-glue metaphor.;;; **************************************************************(defgeneric box-frame (layout-mixin)  (:documentation "Returns the rectangle of a box as four values: left, top,right, bottom."))(defgeneric set-box-frame (layout-mixin left top right bottom)  (:documentation "Set the position and size of a box item using thevalues of left, top, right, bottom."))(defgeneric finalize-box-frame-computation (thing)  (:documentation "This function is called after the box frame hasbeen computed."))(defgeneric box-item-p (layout-mixin)  (:documentation "Returns t if an item may be used as a box-item."))(defgeneric box-items (layout-mixin)  (:documentation "Returns the sub-items of a box-item."))(defgeneric (setf box-items) (new-items layout-mixin)  (:documentation "Sets the sub-items of a box-item."))(defgeneric box-item-position (layout-mixin)  (:documentation "Returns the position of a box item."))(defgeneric (setf box-item-position) (new-position layout-mixin)  (:documentation "Sets the position of a box item."))(defgeneric box-item-size (layout-mixin)  (:documentation "Returns the size of a box item."))(defgeneric (setf box-item-size) (new-size layout-mixin)  (:documentation "Sets the size of a box item."))(defgeneric box-position-correction (layout-mixin)  (:documentation "Provides an offset to the actual position."))(defgeneric box-size-correction (layout-mixin)  (:documentation "Adds an offset to the actual size."));;; ***************************************************************************;;; The class layout-mixin allows for subitems to be laid out using the;;; box and glue metaphor.;;; ***************************************************************************(defclass layout-mixin    ()    ((reparse-layout-p :accessor dialog-reparse-layout-p                       :initform nil)     (layout :initarg :layout             :accessor layout             :documentation "Initial layout description.")     (adapt-layout-to-size :initarg :adapt-layout-to-size                           :accessor adapt-layout-to-size                           :documentation                            "Adapt and reparse the layout when the size is changed?")     (adapt-size-to-layout :initarg :adapt-size-to-layout                           :accessor adapt-size-to-layout                           :documentation                            "Adapt the window size to the size needed by the layout.")     (suggested-size :initarg :suggested-size                     :reader suggested-size                     :documentation "Preferred size")     (chosen-size :accessor chosen-size                  :initform nil)     (own-window-grow-rect :accessor own-window-grow-rect                           :initform nil                           :documentation "This slot definition is not modular.We provide the slot for layout-mixin to be used with windows.Future versions will provide the notion of a plist for layout-mixins."))    (:default-initargs       :layout nil      :adapt-layout-to-size t      :adapt-size-to-layout nil      :suggested-size #@(0 0))    (:documentation "Mixin for objects to be laid out using thebox and glue metaphor."));;; **************;;; Initialization;;; **************;;; The initialization of layout-mixins is done via;;; initialize-instance-with-layout. Methods for ;;; initialize-instance-with-layout might decide to either first;;; initialize the instance and compute the layout afterwards;;; (see layout-mixin-with-initialization-first) or to first;;; compute the layout and then initialize the instance (default).(defmethod initialize-instance :around ((thing layout-mixin) &rest initargs)  (declare (dynamic-extent initargs))  (apply #'initialize-instance-with-layout          thing         #'call-next-method         initargs))(defmethod initialize-instance-with-layout ((thing layout-mixin)                                             initialization-method                                            &rest initargs)  (declare (dynamic-extent initargs))  (if (getf initargs ':adapt-size-to-layout nil)    (let* ((layout (getf initargs ':layout nil))           (suggested-size (getf initargs ':suggested-size #@(0 0)))           (suggested-width (point-h suggested-size))           (suggested-height (point-v suggested-size)))      (setf (chosen-size thing)             (cond ((null layout)                   (error "The frame of the box is determined by the layout.But, however, no layout has been provided."))                  ((hbox-p layout)                   (recommended-hbox-size (list layout)                                          suggested-width                                          suggested-height))                  ((vbox-p layout)                   (recommended-vbox-size (list layout)                                          suggested-width                                          suggested-height))                  ((fbox-p layout)                   (recommended-hbox-size                     (list `(:hbox () ,layout))                    ;; We do not deal with width restrictions                    ;; here, therefore we wrap another                    ;; unrestricted box around the                    ;; original layout to cope with                    ;; toplevel width restrictions                    suggested-width                    suggested-height))                  (t (error "A box frame cannot be computed for this kindof layout: ~S."                            layout))))      (funcall initialization-method)      (compute-layout thing)      (finalize-box-frame-computation thing))    (progn (funcall initialization-method)           (compute-layout thing))));;; *****;;; Misc.;;; *****(defmethod chosen-size (thing)  "Chosen-size might be called for non-layout-mixins!In this case, nil is returned."  (declare (ignore thing))  nil);;; ********************************************************************;;; The class layout-mixin-with-initialization-first first initializes the instance and computes;;; the layout afterwards. We handle windows in a special way because;;; the size of a window might change according to the layout.;;; ********************************************************************(defclass layout-mixin-with-initialization-first  (layout-mixin)  ())(defmethod initialize-instance-with-layout ((thing layout-mixin-with-initialization-first)                                             initialization-method                                            &rest initargs)  (apply #'initialize-instance-with-layout-1 thing initialization-method         initargs))(defgeneric initialize-layout (layout-mixin-with-initialization-first)  (:documentation "This function is called after the initialization of theinstance but before using the layout."))(defmethod initialize-layout ((thing t))  nil)(defmethod initialize-instance-with-layout-1 ((thing layout-mixin-with-initialization-first)                                               initialization-method                                              &rest initargs)  (apply initialization-method thing initargs)  (unless (layout thing)    (initialize-layout thing))  (when (layout thing)    (when (adapt-size-to-layout thing)      (let* ((layout (layout thing))              (suggested-size (suggested-size thing))             (suggested-width (point-h suggested-size))             (suggested-height (point-v suggested-size)))        (setf (chosen-size thing)               (cond ((null layout)                     (error "The frame of the box is determined by the layout.But, however, no layout has been provided."))                    ((hbox-p layout)                     (recommended-hbox-size (list layout)                                            suggested-width                                            suggested-height))                    ((vbox-p layout)                     (recommended-vbox-size (list layout)                                            suggested-width                                            suggested-height))                    ((fbox-p layout)                     (recommended-hbox-size                       (list `(:hbox () ,layout))                      ;; We do not deal with width restrictions                      ;; here, therefore we wrap another                      ;; unrestricted box around the                      ;; original layout to cope with                      ;; toplevel width restrictions                      suggested-width                      suggested-height))                    (t (error "A box frame cannot be computed for this kindof layout: ~S."                              layout))))         (finalize-box-frame-computation thing)))    (compute-layout thing)))(defmethod initialize-instance-with-layout-1 :around ((window window)                                                      initialization-method                                                      &rest initargs)  (let ((window-show (getf initargs ':window-show                           (not (getf initargs ':adapt-size-to-layout)))))    (prog1      (apply #'call-next-method             window initialization-method             :window-show window-show initargs)      (when (getf initargs ':window-show t)        (window-select window)))));;; ******************;;; Layout computation;;; ******************(defmethod compute-layout ((thing layout-mixin))  (when (layout thing)    (multiple-value-bind (left top right bottom)                         (box-frame thing)      (setf (box-items thing)             (items-positioned-in-box             `(:hbox () ,(layout thing))             ;; We do not deal with width restrictions             ;; here, therefore we wrap another             ;; unrestricted box around the             ;; original layout to cope with             ;; toplevel width restrictions             left top right bottom)))))#|This removes all subviews. Why?(defmethod (setf layout) :before (new-layout (thing layout-mixin))  (declare (ignore new-layout))  (setf (box-items thing) nil)  )|#(defmethod (setf layout) :after (new-layout (thing layout-mixin))  (declare (ignore new-layout))  (compute-layout thing))(defmethod recompute-layout ((thing layout-mixin))  (setf (dialog-reparse-layout-p thing) t))(defmethod recompute-layout :after ((view view))  (invalidate-view view nil)  );;; ***************;;; Default methods;;; ***************(defmethod box-item-p ((thing t))  "A thing may not normally be used as a box item."  (declare (ignore thing))  nil)(defmethod finalize-box-frame-computation (thing)  (declare (ignore thing))  nil);;;; The following will be inserted into another file.;;; ****************************************;;; Protocol specialization for simple-views;;; ****************************************(defmethod box-item-p ((item simple-view))  t)(defmethod box-frame ((view simple-view))  (let* ((origin (view-scroll-position view))         (h-origin (point-h origin))         (v-origin (point-v origin))         (size (view-size view)))    (values h-origin            v-origin            (+ h-origin (point-h size))            (+ v-origin (point-v size)))))(defmethod set-box-frame ((view simple-view) left top right bottom)  (setf (box-item-position view) (make-point left top))  (setf (box-item-size view) (make-point (- right left)                                         (- bottom top))))(defmethod box-items ((view simple-view))  nil)(defmethod (setf box-items) (new-items (view view))  (declare (ignore new-items))  (error "No sub-items allowed for simple view items."))(defmethod box-item-position ((item simple-view))  (or (view-position item)      (view-default-position item)))(defmethod (setf box-item-position) (new-pos (item simple-view))  (set-view-position item new-pos))(defmethod box-item-size ((item simple-view))  (or (view-size item)      (view-default-size item)))(defmethod (setf box-item-size) (new-size (item simple-view))  (set-view-size item new-size));;=============================================;; Here there was a problem from 4.0 to 4.2;;=============================================#|OLD 4.0 VERSION(defmethod view-default-size-1 ((item table-dialog-item))   (ccl::with-slot-values ((max-width ccl::table-max-width)                          (max-height ccl::table-max-height)                          (dimensions ccl::table-dimensions)                          (cell-size ccl::cell-size)                          table-hscrollp ccl::table-vscrollp)                         item    (let* ((cell-size (ccl::default-cell-size item))           (cell-width (point-h cell-size))           (cell-height (point-v cell-size))           (width (* cell-width (point-h dimensions)))           (height (* cell-height (point-v dimensions)))           (max-width (- max-width (mod max-width cell-width)))           (max-height (- max-height (mod max-height cell-height))))      (make-point (+ (min width max-width) (if table-vscrollp 15 0))                  (+ (min height max-height) (if table-hscrollp 15 0))))))|#;; modified sp 7-99;;;; (dimensions ccl::table-dimensions) was expanded to;; (DIMENSIONS (SLOT-VALUE #:G28704 'TABLE-DIMENSIONS));; but in MCL 4.2 the 'table-dimension is not a slot anymore, only  ;; an access method;; SLOT-VALUE should never be used#|;; from dialogs.lisp of MCL 4.2(defmethod table-dimensions ((item table-dialog-item))  (make-big-point (table-columns item) (table-rows item)))|#;;NEW VERSION FOR 4.2(defmethod view-default-size-1 ((item table-dialog-item))   (ccl::with-slot-values ((max-width ccl::table-max-width)                          (max-height ccl::table-max-height)                          ;;dimensions                          ;;(cell-size ccl::cell-size)                          table-hscrollp ccl::table-vscrollp)                         item    (let* ((dimensions (table-dimensions item))           (cell-size (ccl::default-cell-size item))           (cell-width (point-h cell-size))           (cell-height (point-v cell-size))           (width (* cell-width (point-h dimensions)))           (height (* cell-height (point-v dimensions)))           (max-width (- max-width (mod max-width cell-width)))           (max-height (- max-height (mod max-height cell-height))))      (make-point (+ (min width max-width) (if table-vscrollp 15 0))                  (+ (min height max-height) (if table-hscrollp 15 0))))));;=============================================(defmethod box-default-size ((view table-dialog-item))  (view-default-size-1 view))#|old version; replaced by a patch from Ralph 11/23/92(defmethod box-default-size ((thing layout-mixin))  (or (chosen-size thing)      (suggested-size thing)))|#(defmethod box-default-size ((view simple-view))  (view-default-size view))(defmethod box-position-correction ((view simple-view))  #@(0 0))(defmethod box-size-correction ((view simple-view))  ;; normally a view is centered in respect to its size correction and the box-position-correction is negative (or zero)  (make-point    (- (* 2 (point-h (box-position-correction view))))   (- (* 2 (point-v (box-position-correction view))))));;; *********************************;;; Protocol specialization for views;;; *********************************(defmethod finalize-box-frame-computation ((view view))  (set-view-size view (chosen-size view)))(defmethod box-items ((view view))  (subviews view))(defmethod (setf box-items) (new-items (view view))  (flet ((order-preserving-set-difference (set1 set2)           (remove-if #'(lambda (x) (member x set2)) set1)))    (unless (equal new-items (box-items view))      (let ((diff1 (order-preserving-set-difference new-items (box-items view)))            (diff2 (order-preserving-set-difference (box-items view) new-items)))        (without-interrupts         (apply #'remove-subviews view diff2)         (apply #'add-subviews view diff1))))))(defmethod view-default-size :around ((view layout-mixin))    (or (chosen-size view)        (call-next-method)))(defmethod set-view-size :around ((view layout-mixin) h &optional v)  (without-event-processing    (unless (= (make-point h v) (view-size view))      (when (adapt-layout-to-size view)        (recompute-layout view)))    (call-next-method)))(defmethod view-draw-contents :around ((view layout-mixin))  (without-event-processing    (when (dialog-reparse-layout-p view)      (setf (dialog-reparse-layout-p view) nil)      (multiple-value-bind (left top right bottom) (box-frame view)        (when (layout view)          (items-positioned-in-box (layout view) left top right bottom)          ;(validate-view view) ;sometimes this isn't correct; but when?          )))    (call-next-method)    ;(validate-view view) ;sometimes this isn't correct; but when?    ));;; ***********************************;;; Protocol specialization for windows;;; ***********************************(defmethod box-frame ((view window))  (let* ((origin (view-scroll-position view))         (h-origin (point-h origin))         (v-origin (point-v origin))         (size (view-size view)))    (values h-origin            v-origin            (+ 1 h-origin (point-h size))    ; adding 1 ensures a nicer border            (+ 1 v-origin (point-v size))))) ; dto.;;; Windows are handled in a somewhat special way since we provide a;;; slot own-window-grow-rect just for handling windows. This may change;;; in future versions.(defmethod window-grow-rect ((window layout-mixin))  (or (own-window-grow-rect window)      (call-next-method)))(defmethod finalize-box-frame-computation :after ((window window))  (if (null (own-window-grow-rect window))    (let ((chosen-size (chosen-size window)))      (setf (own-window-grow-rect window)            (make-record :rect                         :left (point-h chosen-size)                         :top (point-v chosen-size)                         :right 32767                         :bottom 32767)))))(defmethod window-close :after ((window layout-mixin))  "Deallocate the window-grow-rect object."  (unless (null (own-window-grow-rect window))    (dispose-record (own-window-grow-rect window))))(defmethod window-zoom-event-handler :around ((view layout-mixin) code)  (declare (ignore code))  (when (adapt-layout-to-size view)    (recompute-layout view))  (call-next-method));;; ****************************************;;; Protocol specialization for dialog-items;;; ****************************************(defmethod box-item-size ((view dialog-item))  (add-points   (box-size-correction view)   (view-default-size view)))(defmethod box-item-position ((view dialog-item))  (view-corners view))         (defmethod (setf box-item-position) (new (view dialog-item))  (funcall #'call-next-method            (subtract-points new                            (box-position-correction view))           view))(defmethod (setf box-item-size) (new (view dialog-item))  (funcall #'call-next-method            (subtract-points new                            (box-size-correction view))           view));;; **********************************************;;; Protocol specialization for table-dialog-items;;; **********************************************(defmethod box-position-correction ((view table-dialog-item))  #@(-1 -1))(defmethod set-box-frame ((view table-dialog-item) left top right bottom)  (declare (ignore left top right bottom))  (if (null (view-window view))      (call-next-method)      (without-interrupts       (let* ((view-container (view-container view))              (selected-cells (selected-cells view))              (first-cell (if (null selected-cells)                            (scroll-position view)                            (first selected-cells))))         (prog2          (remove-subviews view-container view)          (call-next-method)          (add-subviews view-container view)          (scroll-to-cell view first-cell)          (dolist (cell selected-cells)            (cell-select view cell)))))))(defmethod (setf box-item-size) :around (new-size                                         (item table-dialog-item))  (prog1     (call-next-method)    (unless (or (null (cell-size item))                (< (if (table-vscrollp item)                     (- (point-h new-size) 15)                     (point-h new-size))                   0))      (set-cell-size item                     (if (table-vscrollp item)                       (- (point-h new-size) 15)                       (point-h new-size))                     (point-v (cell-size item))))));;; ******************************************************;;; Protocol specialization for editable-text-dialog-items;;; ******************************************************(defmethod box-position-correction ((view editable-text-dialog-item))  (if (slot-value view 'ccl::draw-outline)    #@(-3 -3)    #@(0 0)));;; ***********************************************;;; Protocol specialization for button-dialog-items;;; ***********************************************(defmethod box-position-correction ((view button-dialog-item))  (if (cdr        (assoc 'default-button-p               (slot-value view 'ccl::view-alist)))    #@(-4 -4)     #@(0 0)))