 ;;; ********************************************************************;;; Layout *************************************************************;;; ********************************************************************;;; Written by Ralf Moeller;;; University of Hamburg, Computer-Science Department, December 1991.;;; Copyright (c) 1991 by Ralf Moeller. All rights reserved.;;; Use and copying of this software and preparation of derivative works;;; based upon this software are permitted, so long as the following;;; conditions are met:;;;      o no fees or compensation are charged for use, copies, or;;;        access to this software;;;      o this copyright notice is included intact.;;; This software is made available AS IS, and no warranty is made about ;;; the software or its performance. ;;; Please send bug reports, comments and suggestions to;;; moeller@informatik.uni-hamburg.de(locally  (declare (optimize (safety 0)                      (speed 3)                      (space 3)                     (compilation-speed 0)                     (debug 0)))(defmacro :vbox (&rest box-spec)  `(list ':vbox ,@box-spec))(defmacro :hbox (&rest box-spec)  `(list ':hbox ,@box-spec))(defmacro :fbox (&rest box-spec)  `(list ':fbox ,@box-spec))(defmacro :width (&rest size-spec)  `(list ':width ,@size-spec))(defmacro :height (&rest size-spec)  `(list ':height ,@size-spec))(defmacro :filler (&rest filler-spec)  `(list ':filler ,@filler-spec))(defmacro :splice (&rest filler-spec)  `(list ':splice ,@filler-spec))(defun box-kind (box-spec)  (first box-spec))(defun hbox-p (layout-specification)  (and (consp layout-specification)        (eq (first layout-specification) ':hbox)))(defun vbox-p (layout-specification)  (and (consp layout-specification)        (eq (first layout-specification) ':vbox)))(defun box-patterns (box-spec)  (rest (rest box-spec)))(defun box-size-spec (box-spec)  (second box-spec))(defun box-p (layout-specification)  (or (fbox-p layout-specification)      (hbox-p layout-specification)       (vbox-p layout-specification)))(defun fbox-p (layout-specification)   (and  (consp layout-specification)        (eq (first layout-specification) ':fbox)))(defun box-item (fbox-spec)  (third fbox-spec))(defun as-needed-spec-p (spec)  (and (symbolp spec)       (eq spec ':as-needed)))(defun splice-p (layout-specification)   (and  (consp layout-specification)        (eq (first layout-specification) ':splice)))(defun spliced-items (splice-spec)  (second splice-spec))(defun adapted-size-1 (size-spec filler-specs total-space)  (cond ((filler-p size-spec)         (filler-spec-value (first filler-specs)))        ((integerp size-spec)         size-spec)        ((or (rationalp size-spec) (floatp size-spec))         (round (* total-space size-spec)))        (t (error "Size specification must be <fixnum>, <float>, <rational>,or a <filler-specification> - found ~S" size-spec))))(defun adapted-size-2 (size-spec total-space)  (cond ((filler-spec-p size-spec)         (max (filler-spec-min size-spec)              (min (filler-spec-max size-spec); total-space)                   total-space)))        ((integerp size-spec)         size-spec)        ((or (rationalp size-spec) (floatp size-spec))         (round (* total-space size-spec)))        (t (error "Size specification must be <fixnum>, <float>, <rational>,or a <filler-specification> - found ~S" size-spec))))                    (defun box-height-spec (size-spec)  (labels ((box-height-spec-internal (&key (height '(:filler :min :as-needed))                                      &allow-other-keys)                                height))    (if (listp size-spec)      (apply #'box-height-spec-internal size-spec)      (error "error in box height spec"))))(defun box-width-spec (size-spec)  (labels ((box-width-spec-internal (&key (width '(:filler :min :as-needed))                                     &allow-other-keys)                               width))    (if (listp size-spec)      (apply #'box-width-spec-internal size-spec)      (error "error in box width spec"))))#|; patch from Ralph. Isn't necessary any more (another patch)  (defun box-height-spec (size-spec)  (labels ((box-height-spec-internal (&key (height ':filler)                                             &allow-other-keys)             height))    (if (listp size-spec)      (apply #'box-height-spec-internal size-spec)      (error "error in box height spec"))))(defun box-width-spec (size-spec)  (labels ((box-width-spec-internal (&key (width ':filler)                                          &allow-other-keys)             width))    (if (listp size-spec)      (apply #'box-width-spec-internal size-spec)      (error "error in box width spec"))))|#  (defun filler-p (layout-specification)  (or (and (symbolp layout-specification)           (eq layout-specification ':filler))      (and (consp layout-specification)           (eq (first layout-specification) ':filler))))(defun filler-pattern-min (filler-spec)  (labels ((filler-pattern-min-internal (filler &key (min 0)                                 &allow-other-keys)                                   (declare (ignore filler))                                min))    (if (listp filler-spec)      (apply #'filler-pattern-min-internal filler-spec)      0)))(defun filler-pattern-max (filler-spec default-max)  (labels ((filler-pattern-max-internal (filler &key (max default-max)                                 &allow-other-keys)                                   (declare (ignore filler))                                max))     (if (listp filler-spec)      (apply #'filler-pattern-max-internal filler-spec)      default-max)))(defun filler-pattern-weight (filler-spec)  (labels ((filler-pattern-weight-internal (filler &key (weight 1)                                    &allow-other-keys)                                   (declare (ignore filler))                                weight))     (if (listp filler-spec)      (apply #'filler-pattern-weight-internal filler-spec)      1)))(defstruct (filler-spec (:print-function print-filler-spec))  min  max  weight  value)(defun space-as-needed-filter (filler-value                               box-kind                               box-patterns                               coordinate-accessor)  (if (and box-kind (as-needed-spec-p filler-value))    (case box-kind      (:hbox (funcall coordinate-accessor                       (recommended-hbox-size box-patterns                                             0 0 nil)))      (:vbox (funcall coordinate-accessor                       (recommended-vbox-size box-patterns                                             0 0 nil)))      (:fbox (funcall coordinate-accessor                       (box-default-size (first box-patterns))))      (t (error ":as-needed sizes not yet supported for this kind of box: ~S"                box-kind)))    filler-value))       (defun print-filler-spec (spec stream depth)  (declare (ignore depth))  (format stream          "#<FILLER-SPEC (MIN: ~S, MAX: ~S, VALUE: ~S)>"          (filler-spec-min spec)          (filler-spec-max spec)          (filler-spec-value spec)))(defun distribution-of-filler-space (filler-specs total-space)  (let ((rounding-rest 0))    (labels ((ensure-min-value (filler-specs)               "Returns the used space for all min demands."               (if (endp filler-specs)                 0                 (let ((spec (first filler-specs)))                   (setf (filler-spec-value spec)                         (filler-spec-min spec))                   (+ (filler-spec-value spec)                      (ensure-min-value (rest filler-specs))))))             (minimum-filler-value (filler-specs)               (filler-spec-value                (reduce #'(lambda (spec-a spec-b)                            (if (<  (filler-spec-value spec-a)                                    (filler-spec-value spec-b))                              spec-a                              spec-b))                        filler-specs)))             (n-fillers (specs)               (if (endp specs)                 0                 (+ (filler-spec-weight (first specs))                    (n-fillers (rest specs)))))             (next-filler-space (filler-specs space)               (let ((n-fillers (n-fillers filler-specs)))                 (if (< space n-fillers)                   (progn (incf rounding-rest space)                          0)                   (multiple-value-bind (value rest)                                        (round (/ space n-fillers))                     (incf rounding-rest (* n-fillers rest))                     value))))             (distribution (specs                             rest-specs                            minimum-level                             filler-space                            unused-space)               (cond ((zerop filler-space)                      filler-specs)                     ((endp specs)                      (if (or (endp rest-specs) (= unused-space 0))                        filler-specs                        (distribution rest-specs                                      nil                                      (minimum-filler-value rest-specs)                                      (next-filler-space rest-specs                                                         unused-space)                                      0)))                     (t                      (let ((spec (first specs))                            (new-level (+ minimum-level                                           filler-space)))                        (setf (filler-spec-value spec)                              (min (filler-spec-max spec)                                   (max (filler-spec-min spec)                                        new-level)))                        (cond ((< new-level (filler-spec-min spec))                               ;; This filler has already enough,                               ;; the whole filler-space remains unused!                               ;; But there may be a chance to fill it later.                               (distribution (rest specs)                                             (cons spec rest-specs)                                             minimum-level                                             filler-space                                             (+ unused-space                                                filler-space)))                              ((> new-level (filler-spec-max spec))                               ;; This filler can take no more.                               ;; It must not be considered again.                               (distribution (rest specs)                                             rest-specs                                             minimum-level                                             filler-space                                             (+ unused-space                                                 ;; maximum overflow:                                                (- new-level                                                   (filler-spec-max spec))                                                ;; used rest from minimum:                                                (max 0                                                     (- (filler-spec-min spec)                                                        minimum-level)))))                              (t                                ;; new level is between min and max !                               (distribution (rest specs)                                             (cons spec rest-specs)                                             minimum-level                                             filler-space                                             (if (> minimum-level                                                    (filler-spec-min spec))                                               ;; all space used:                                               unused-space                                                                                              ;; used rest from minimum                                               (+ unused-space                                                  (max 0                                                       (- (filler-spec-min spec)                                                          minimum-level)))))))))))             (find-filler (filler-specs rest)               (if (endp filler-specs)                 nil                 (let ((filler (first filler-specs)))                   (if (< (+ (filler-spec-value filler) rest)                          (filler-spec-max filler))                     filler                     (find-filler (rest filler-specs) rest))))))      (let ((rest-space (max 0 (- total-space                                  (ensure-min-value filler-specs)))))        (cond ((and filler-specs (> rest-space 0))               (distribution filler-specs                             nil                             (minimum-filler-value filler-specs)                             (next-filler-space filler-specs rest-space)                             0)               (unless (null filler-specs)                 (let ((filler (find-filler filler-specs                                             (truncate rounding-rest))))                   (when filler                     (incf (filler-spec-value filler)                            (truncate rounding-rest)))))               filler-specs)              (t filler-specs))))))#|old version; replaced by a patch from Ralph 11/23/92(defun distribution-of-filler-space (filler-specs total-space)  (let ((rounding-rest 0))    (labels ((ensure-min-value (filler-specs)                               "Returns the used space for all min demands."                               (if (endp filler-specs)                                 0                                 (let ((spec (first filler-specs)))                                   (setf (filler-spec-value spec)                                         (filler-spec-min spec))                                   (+ (filler-spec-value spec)                                      (ensure-min-value (rest filler-specs))))))             (minimum-filler-value (filler-specs)                                   (filler-spec-value                                    (reduce #'(lambda (spec-a spec-b)                                                (if (<  (filler-spec-value spec-a)                                                        (filler-spec-value spec-b))                                                  spec-a                                                  spec-b))                                            filler-specs)))             (n-fillers (specs)                        (if (endp specs)                          0                          (+ (filler-spec-weight (first specs))                             (n-fillers (rest specs)))))             (next-filler-space (filler-specs space)                                (let ((n-fillers (n-fillers filler-specs)))                                  (multiple-value-bind (value rest)                                                       (round (/ space n-fillers))                                    (incf rounding-rest (* n-fillers rest))                                    value)))             (distribution (specs                             rest-specs                            minimum-level                             filler-space                            unused-space)                           (if (endp specs)                             (if (or (endp rest-specs) (= unused-space 0))                               filler-specs                               (distribution rest-specs                                             nil                                             (minimum-filler-value rest-specs)                                             (next-filler-space rest-specs unused-space)                                             0))                             (let ((spec (first specs))                                   (new-level (+ minimum-level                                                  filler-space)))                               (setf (filler-spec-value spec)                                     (min (filler-spec-max spec)                                          (max (filler-spec-min spec)                                               new-level)))                               (cond ((< new-level (filler-spec-min spec))                                      ;; This filler has already enough,                                      ;; the whole filler-space remains unused!                                      ;; But there may be a chance to fill it later.                                      (distribution (rest specs)                                                    (cons spec rest-specs)                                                    minimum-level                                                    filler-space                                                    (+ unused-space                                                       filler-space)))                                     ((> new-level (filler-spec-max spec))                                      ;; This filler can take no more.                                      ;; It must not be considered again.                                      (distribution (rest specs)                                                    rest-specs                                                    minimum-level                                                    filler-space                                                    (+ unused-space                                                        ;; maximum overflow:                                                       (- new-level                                                          (filler-spec-max spec))                                                       ;; used rest from minimum:                                                       (max 0                                                            (- (filler-spec-min spec)                                                               minimum-level)))))                                     (t                                       ;; new level is between min and max !                                      (distribution (rest specs)                                                    (cons spec rest-specs)                                                    minimum-level                                                    filler-space                                                    (if (> minimum-level                                                           (filler-spec-min spec))                                                      ;; all space used:                                                      unused-space                                                                                                            ;; used rest from minimum                                                      (+ unused-space                                                         (max 0                                                              (- (filler-spec-min spec)                                                                 minimum-level)))))))))))      (let ((rest-space (max 0 (- total-space                                  (ensure-min-value filler-specs)))))        (cond ((and filler-specs (> rest-space 0))               (distribution filler-specs                             nil                             (minimum-filler-value filler-specs)                             (next-filler-space filler-specs rest-space)                             0)               (unless (null filler-specs)                 (incf (filler-spec-value (first (last filler-specs)))                        (truncate rounding-rest)))               filler-specs)              (t filler-specs))))))|# (defconstant indent 3)(let ((layout-traced-p nil)      (trace-indent 0))    (defun trace-layout ()    "Start trace output during layout parsing."    (setf trace-indent 0)    (setf layout-traced-p t))    (defun untrace-layout ()    "Stop trace output during layout parsing."    (setf layout-traced-p nil))  (defun layout-traced-p ()    layout-traced-p)  (defun indentation ()    (make-string trace-indent :initial-element #\Space))  (defun start-hbox (left top right bottom)    (when layout-traced-p      (format *trace-output* "~%~?(HBOX [Position: ~A, Size: ~A]"               "~A" (list (indentation))              (point-string (make-point left top))              (point-string (make-point (- right left) (- bottom top))))      (incf trace-indent indent)))  (defun end-hbox ()    (when layout-traced-p      (decf trace-indent indent)      (format *trace-output* ")")))    (defun start-vbox (left top right bottom)    (when layout-traced-p      (format *trace-output* "~%~?(VBOX [Position: ~A, Size: ~A]"               "~A" (list (indentation))              (point-string (make-point left top))              (point-string (make-point (- right left) (- bottom top))))      (incf trace-indent indent)))  (defun end-vbox ()    (when layout-traced-p      (decf trace-indent indent)      (format *trace-output* ")")))  (defun trace-gbox (position size)    (when layout-traced-p      (format *trace-output* "~%~?(GBOX [Position: ~A, Size: ~A]"              "~A" (list (indentation))              (point-string position)              (point-string size))))  (defun trace-vertical-filler (spec length)    (when layout-traced-p      (format *trace-output* "~%~?FILLER (~D) [Height: ~S]"               "~A" (list (indentation)) spec length)))    (defun trace-horizontal-filler (spec length)    (when layout-traced-p      (format *trace-output* "~%~?FILLER (~D) [Width: ~S]"               "~A" (list (indentation)) spec length)))    (defun trace-vertical-absolute-distance (dist)    (when layout-traced-p      (format *trace-output* "~%~?ABSOLUTE DISTANCE [Height: ~D]"               "~A" (list (indentation)) dist)))    (defun trace-horizontal-absolute-distance (dist)    (when layout-traced-p      (format *trace-output* "~%~?ABSOLUTE DISTANCE [Width: ~D]"               "~A" (list (indentation)) dist)))    (defun trace-vertical-relative-distance (dist)    (when layout-traced-p      (format *trace-output* "~%~?RELATIVE DISTANCE [Height: ~S]"               "~A" (list (indentation)) dist)))    (defun trace-horizontal-relative-distance (dist)    (when layout-traced-p      (format *trace-output* "~%~?RELATIVE DISTANCE [Width: ~S]"               "~A" (list (indentation)) dist)))    (defun trace-fbox (item)    (when layout-traced-p      (format *trace-output* "~%~?(FBOX [Position: ~A, Size: ~A, Item: ~S])"              "~A" (list (indentation))              (point-string (box-item-position item))              (point-string (box-item-size item))              item)))    (defun trace-item (item)    (when layout-traced-p      (format *trace-output* "~%~?ITEM ~S [Position: ~A, Size: ~A]"              "~A" (list (indentation))              item              (point-string (box-item-position item))              (point-string (box-item-size item)))))    (defun items-positioned-in-box (box-spec left top right bottom)    "Returns all items of box-spec.The position of these items might be modified according to the enclosingrectangle and the layout-specification."    (let ((total-hspace (- right left))          (total-vspace (- bottom top)))      (cond ((hbox-p box-spec)              (multiple-value-bind (fixed-space filler-specs)                                  (preparse-box (box-patterns box-spec)                                                total-hspace #'point-h #'box-width-spec)               (start-hbox left top right bottom)               (prog1                 (items-placed-in-hbox (box-patterns box-spec)                                       (distribution-of-filler-space                                         filler-specs                                         (max 0 (- total-hspace fixed-space)))                                       total-hspace                                       left top right bottom)                 (end-hbox))))            ((vbox-p box-spec)              (multiple-value-bind (fixed-space filler-specs)                                  (preparse-box (box-patterns box-spec)                                                 total-vspace #'point-v #'box-height-spec)               (start-vbox left top right bottom)               (prog1                 (items-placed-in-vbox (box-patterns box-spec)                                       (distribution-of-filler-space                                         filler-specs                                         (max 0 (- total-vspace fixed-space)))                                       total-vspace                                       left top right bottom)                 (end-vbox))))            ((fbox-p box-spec)             (let ((item (box-item box-spec)))               (set-box-frame item left top right bottom)               (trace-fbox item)               (list item)))            ((general-layout-spec-p box-spec)             (setf (gbox-position box-spec) (make-point left top))             (trace-gbox (make-point left top) (gbox-size box-spec))             (gbox-items box-spec))            (t (error "Error in layout pattern. <box-pattern>, <vbox-pattern>, <hbox-pattern>, or <general-layout-pattern> expected - found ~S"                      box-spec)))))(defun preparse-box (box-specs total-space coordinate-accessor size-accessor)  "Returns the required space and the number of fillers."  (labels ((size-check-filter             (spec)            (if (box-p  spec)              (let ((size-spec (funcall size-accessor (box-size-spec spec))))                (if (or (filler-p size-spec)                        (integerp size-spec)                        (rationalp size-spec)                        (floatp size-spec))                  (values size-spec (box-kind spec))                  (error "Size specification error in box pattern.<fixnum>, <float>, <rational> or <filler-specification> expected - found ~S in ~S."                         size-spec box-specs)))              (values spec nil)))           (parse (box-specs fixed-space-acc filler-specs-acc)                  (if (endp box-specs)                    (values fixed-space-acc (reverse filler-specs-acc))                    (multiple-value-bind (spec box-kind)                                         (size-check-filter (first box-specs))                      (cond ((filler-p spec)                             (parse (rest box-specs)                                    fixed-space-acc                                    (cons (make-filler-spec                                           :min (space-as-needed-filter                                                 (filler-pattern-min spec)                                                 box-kind                                                 (if box-kind                                                    (box-patterns (first box-specs)))                                                 coordinate-accessor)                                           :max (space-as-needed-filter                                                 (filler-pattern-max spec total-space)                                                 box-kind                                                 (if box-kind                                                    (box-patterns (first box-specs)))                                                 coordinate-accessor)                                           :weight (filler-pattern-weight spec))                                          filler-specs-acc)))                            ((integerp spec)                             (parse (rest box-specs)                                    (+ fixed-space-acc spec)                                    filler-specs-acc))                            ((or (rationalp spec) (floatp spec))                             (if (and (> spec 0)                                      (<= spec 1))                               (parse (rest box-specs)                                      (+ fixed-space-acc                                          (round (* total-space spec)))                                      filler-specs-acc)                               (error "Specification for relative size ~S out of range (must be out of [0, 1])." spec)))                            ((splice-p spec)                             (multiple-value-bind (fixed-space filler-specs)                                                  (parse (spliced-items spec) 0 nil)                               (parse (rest box-specs)                                      (+ fixed-space-acc fixed-space)                                      (append (reverse filler-specs) filler-specs-acc))))                            ((general-layout-spec-p spec)                             (parse (rest box-specs)                                    (+ fixed-space-acc                                       (funcall coordinate-accessor                                                (gbox-size spec)))                                    filler-specs-acc))                            ((box-item-p spec)                             (parse (rest box-specs)                                    (+ fixed-space-acc                                       (funcall coordinate-accessor                                                (box-item-size spec)))                                    filler-specs-acc))                            (t (error "Error in layout-pattern.<layout specification> or <item> expected. - found: ~S" spec)))))))    (parse box-specs 0 nil)))(defun items-placed-in-hbox (box-specs filler-specs total-space                                       left top right bottom)  "Returns all items of box-spec.The position of these items might be modified."  (if (endp box-specs)    nil    (let ((spec (first box-specs)))      (cond ((general-layout-spec-p spec)             (let ((gbox-size (gbox-size spec)))               (setf (gbox-position spec) (make-point left top))               (trace-gbox (make-point left top)                           gbox-size)               (append (gbox-items spec)                       (items-placed-in-hbox (rest box-specs)                                             filler-specs                                             total-space                                             (+ left                                                 (point-h gbox-size))                                             top                                              right                                              bottom))))            ((box-p spec)             (let* (;; in this dimension a filler has to be adapted !                   (box-width (adapted-size-1 (box-width-spec (box-size-spec spec))                                              filler-specs                                              total-space))                                      (size-spec (box-height-spec (box-size-spec spec)))                   (box-kind (box-kind spec))                   (box-patterns (box-patterns spec))                  ;; in this dimension there can be only one filler !                   (box-height (adapted-size-2 (if (filler-p size-spec)                                                 (make-filler-spec                                                  :min (space-as-needed-filter                                                        (filler-pattern-min size-spec)                                                        box-kind                                                        box-patterns                                                        #'point-v)                                                  :max (space-as-needed-filter                                                        (filler-pattern-max size-spec (- bottom top))                                                        box-kind                                                        box-patterns                                                        #'point-v))                                                 size-spec)                                               (- bottom top))))               (append (items-positioned-in-box spec                                                left                                                 top                                                 (+ left                                                    box-width)                                                (+ top                                                    box-height))                       (items-placed-in-hbox (rest box-specs)                                             (if (filler-p (box-width-spec                                                             (box-size-spec spec)))                                               ;; adapted-size-1 (s.a.) may have used                                               ;; a filler !                                               (rest filler-specs)                                               filler-specs)                                             total-space                                             (+ left                                                 box-width)                                             top                                              right                                              bottom))))            ((filler-p spec)             (let ((filler-value (filler-spec-value (first filler-specs))))               (trace-horizontal-filler spec filler-value)               (items-placed-in-hbox (rest box-specs)                                      (rest filler-specs)                                     total-space                                     (+ left filler-value)                                     top right bottom)))            ((integerp spec)             (trace-horizontal-absolute-distance spec)             (items-placed-in-hbox (rest box-specs)                                    filler-specs                                   total-space                                   (+ left spec) top right bottom))            ((or (rationalp spec) (floatp spec))             (trace-horizontal-relative-distance spec)             (items-placed-in-hbox (rest box-specs)                                    filler-specs                                   total-space                                   (+ left (round (* total-space spec)))                                   top right bottom))            ((splice-p spec)             (items-placed-in-hbox (append (spliced-items spec)                                           (rest box-specs))                                    filler-specs                                     total-space                                   left                                   top right bottom))            (t (setf (box-item-position spec)                     (make-point left top))               (trace-item spec)               (cons spec (items-placed-in-hbox (rest box-specs)                                                filler-specs                                                total-space                                                (+ left (point-h (box-item-size spec)))                                                top right bottom)))))))(defun items-placed-in-vbox (box-specs filler-specs total-space                                       left top right bottom)  "Returns all items of box-spec.The position of these items might be modified."  (if (endp box-specs)    nil    (let ((spec (first box-specs)))      (cond ((general-layout-spec-p spec)             (let ((gbox-size (gbox-size spec)))               (setf (gbox-position spec) (make-point left top))               (trace-gbox (make-point left top)                           gbox-size)               (append (gbox-items spec)                       (items-placed-in-vbox (rest box-specs)                                             filler-specs                                             total-space                                             left                                              (+ top                                                 (point-v gbox-size))                                             right                                              bottom))))            ((box-p spec)             (let* (;; in this dimension there can be only one filler !                   (size-spec (box-width-spec (box-size-spec spec)))                   (box-kind (box-kind spec))                   (box-patterns (box-patterns spec))                   (box-width (adapted-size-2 (if (filler-p size-spec)                                                (make-filler-spec                                                 :min (space-as-needed-filter                                                       (filler-pattern-min size-spec)                                                       box-kind                                                       box-patterns                                                       #'point-h)                                                 :max (space-as-needed-filter                                                       (filler-pattern-max size-spec (- right left))                                                       box-kind                                                       box-patterns                                                       #'point-h))                                                size-spec)                                              (- right left)))                   ;; in this dimension a filler has to be adapted !                   (box-height (adapted-size-1 (box-height-spec (box-size-spec spec))                                                     filler-specs                                                     total-space)))               (append (items-positioned-in-box  spec                                                 left                                                  top                                                  (+ left box-width)                                                 (+ top                                                     box-height))                       (items-placed-in-vbox (rest box-specs)                                             (if (filler-p (box-height-spec                                                             (box-size-spec spec)))                                               ;; adapted-size-1 (s.a.) may have used                                               ;; a filler !                                               (rest filler-specs)                                               filler-specs)                                             total-space                                             left                                             (+ top                                                 box-height) right bottom))))            ((filler-p spec)             (let ((filler-value (filler-spec-value (first filler-specs))))               (trace-vertical-filler spec filler-value)               (items-placed-in-vbox (rest box-specs)                                      (rest filler-specs)                                     total-space                                     left                                     (+ top filler-value)                                     right bottom)))            ((integerp spec)             (trace-vertical-absolute-distance spec)             (items-placed-in-vbox (rest box-specs) filler-specs total-space                                   left (+ top spec) right bottom))            ((or (rationalp spec) (floatp spec))             (trace-vertical-relative-distance spec)             (items-placed-in-vbox (rest box-specs) filler-specs total-space                                   left                                   (+ top (round (* total-space spec)))                                   right bottom))            ((splice-p spec)             (items-placed-in-vbox (append (spliced-items spec)                                           (rest box-specs))                                   filler-specs                                   total-space                                   left                                   top                                   right bottom))            (t (setf (box-item-position spec)                     (make-point left top))               (trace-item spec)               (cons spec (items-placed-in-vbox (rest box-specs) filler-specs                                                total-space                                                left                                                (+ top                                                    (point-v (box-item-size spec)))                                                right bottom))))))))(let ((cache (make-hash-table)))  (defun recommended-hbox-size (box-specs suggested-width suggested-height                                          &optional (clear-cache t))    (when clear-cache      (setf cache (make-hash-table)))    (or (gethash box-specs cache)        (setf (gethash box-specs cache)              (let ((min-height (minimal-expansion-2 box-specs                                                     suggested-height                                                     #'point-v                                                     #'box-height-spec))                    (min-width (minimal-expansion-1 box-specs                                                    suggested-width                                                    #'point-h                                                    #'box-width-spec)))                (make-point min-width min-height))))))(let ((cache (make-hash-table)))  (defun recommended-vbox-size (box-specs suggested-width suggested-height                                          &optional (clear-cache t))    (when clear-cache      (setf cache (make-hash-table)))    (or (gethash box-specs cache))        (setf (gethash box-specs cache)              (let ((min-height (minimal-expansion-1 box-specs                                                     suggested-height                                                     #'point-v                                                     #'box-height-spec))                    (min-width (minimal-expansion-2 box-specs                                                    suggested-width                                                    #'point-h                                                    #'box-width-spec)))                (make-point min-width min-height)))))(defun minimal-expansion-1 (box-specs                             total-space                             coordinate-accessor                            size-accessor)  (labels ((size-check-filter             (spec)            (if (box-p spec)              (let ((size-spec (funcall size-accessor (box-size-spec spec))))                (if (or (filler-p size-spec)                        (integerp size-spec)                        (rationalp size-spec)                        (floatp size-spec))                  size-spec                  (error "Size specification error in box pattern.<fixnum>, <float>, <rational> or <filler-specification> expected - found ~S in ~S."                         size-spec box-specs)))              spec))           (parse (box-specs fixed-space-acc)                  (if (endp box-specs)                    fixed-space-acc                    (let* ((box-spec (first box-specs))                           (spec (size-check-filter box-spec)))                      (cond ((filler-p spec)                             (parse (rest box-specs)                                    (+ fixed-space-acc                                       (if (box-p box-spec)                                         (space-as-needed-filter                                          (filler-pattern-min spec)                                          (box-kind box-spec)                                          (box-patterns box-spec)                                          coordinate-accessor)                                         (filler-pattern-min spec)))))                            ((integerp spec)                             (parse (rest box-specs)                                    (+ fixed-space-acc                                       spec)))                            ((or (rationalp spec) (floatp spec))                             (if (and (> spec 0)                                      (<= spec 1))                               (parse (rest box-specs)                                      (+ fixed-space-acc                                          (round (* total-space spec))))                               (error "Specification for relative size ~S out of range (must be out of [0, 1])." spec)))                            ((splice-p spec)                             (let ((fixed-space (parse (spliced-items spec) 0)))                               (parse (rest box-specs)                                      (+ fixed-space-acc                                         fixed-space))))                            ((box-item-p spec)                             (parse (rest box-specs)                                    (+ fixed-space-acc                                       (funcall coordinate-accessor                                                (box-item-size spec)))))                            ((general-layout-spec-p spec)                             (parse (rest box-specs)                                    (+ fixed-space-acc                                       (funcall coordinate-accessor                                                (gbox-size spec)))))                            (t (error "Error in layout-pattern.<layout specification> or <item> expected. - found: ~S" spec)))))))    (max total-space (parse box-specs 0))))(defun minimal-expansion-2 (box-specs                             total-space                             coordinate-accessor                            size-accessor)  (labels ((size-check-filter             (spec)            (cond ((box-p spec)                   (let ((size-spec (funcall size-accessor (box-size-spec spec))))                     (if (or (filler-p size-spec)                             (integerp size-spec)                             (rationalp size-spec)                             (floatp size-spec))                       size-spec                       (error "Size specification error in box pattern.<fixnum>, <float>, <rational> or <filler-specification> expected - found ~S in ~S."                              size-spec box-specs))))                  ((general-layout-spec-p spec)                   spec)                  ((splice-p spec)                   spec)                  ((box-item-p spec)                   spec)                  ((filler-p spec)                   nil)                  ((integerp spec)                   nil)                  ((rationalp spec)                   nil)                  ((floatp spec)                   nil)                  (t (error "Error in layout-pattern.<layout specification> or <item> expected. - found: ~S" spec))))           (parse (box-specs fixed-space-acc)                  (if (endp box-specs)                    fixed-space-acc                    (let* ((box-spec (first box-specs))                           (spec (size-check-filter box-spec)))                      (cond ((filler-p spec)                             (parse (rest box-specs)                                    (max fixed-space-acc                                         (if (box-p box-spec)                                           (space-as-needed-filter                                            (filler-pattern-min spec)                                            (box-kind box-spec)                                            (box-patterns box-spec)                                            coordinate-accessor)                                           (filler-pattern-min spec)))))                            ((integerp spec)                             (parse (rest box-specs)                                    (max fixed-space-acc                                         spec)))                            ((or (rationalp spec) (floatp spec))                             (if (and (> spec 0)                                      (<= spec 1))                               (parse (rest box-specs)                                      (max fixed-space-acc                                          (round (* total-space spec))))                               (error "Specification for relative size ~S out of range (must be out of [0, 1])." spec)))                            ((splice-p spec)                             (let ((fixed-space (parse (spliced-items spec) 0)))                               (parse (rest box-specs)                                      (max fixed-space-acc                                           fixed-space))))                            ((box-item-p spec)                             (parse (rest box-specs)                                    (max fixed-space-acc                                         (funcall coordinate-accessor                                                  (box-item-size spec)))))                            ((general-layout-spec-p spec)                             (parse (rest box-specs)                                    (max fixed-space-acc                                         (funcall coordinate-accessor                                                  (gbox-size spec)))))                             (t (parse (rest box-specs)                                      fixed-space-acc)))))))    (max total-space (parse box-specs 0)))))