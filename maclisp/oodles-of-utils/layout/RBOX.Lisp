 ;;; ********************************************************************;;; Layout *************************************************************;;; ********************************************************************;;; Written by Ralf Moeller;;; University of Hamburg, Computer-Science Department, December 1991.;;; Copyright (c) 1991 by Ralf Moeller. All rights reserved.;;; Use and copying of this software and preparation of derivative works;;; based upon this software are permitted, so long as the following;;; conditions are met:;;;      o no fees or compensation are charged for use, copies, or;;;        access to this software;;;      o this copyright notice is included intact.;;; This software is made available AS IS, and no warranty is made about ;;; the software or its performance. ;;; Please send bug reports, comments and suggestions to;;; moeller@informatik.uni-hamburg.de(defun get-description (spec)  (if (= (length spec) 6)    (second spec)    nil))(defun get-laid-out-view (spec)  (if (= (length spec) 6)    (third spec)    (second spec)))(defun get-reference-view (spec)  (if (= (length spec) 6)    (fourth spec)    (third spec)))(defun get-dim1 (spec)  (if (= (length spec) 6)    (fifth spec)    (fourth spec)))(defun get-dim2 (spec)  (if (= (length spec) 6)    (nth 5 spec)    (fifth spec)))(defun reference-p (spec)  (and (symbolp spec)       (eq spec ':reference)))(defun parse-rbox-layout-spec (spec)  (let ((layout-view (get-laid-out-view spec))        (reference-view (get-reference-view spec)))    (push (make-reference :description (get-description spec)                          :position (rbox-reference-point spec)                          :view reference-view)          (references-of-this-view layout-view))    (push layout-view (views-referencing-this-view reference-view))))    (defmacro :rbox (&rest box-spec)  `(list ':rbox ,@box-spec))(defmacro :vertical (&rest layout-spec)  `(list ':vertical ,@layout-spec))(defmacro :horizontal (&rest layout-spec)  `(list ':horizontal ,@layout-spec))(defun rbox-reference-point (spec)  (let ((reference-view (get-reference-view spec))        (dim1 (get-dim1 spec))        (dim2 (get-dim2 spec)))    (let ((ref-position (box-item-position reference-view))          (ref-size (box-item-size reference-view))          (direction-1 (first dim1))          (direction-2 (first dim2)))      (cond ((eq direction-1 ':horizontal)             (if (eq direction-2 ':vertical)               (make-point (+ (point-h ref-position)                              (parse-one-dimensional-rbox-spec                               (rest dim1)                                (point-h ref-size)))                           (+ (point-v ref-position)                              (parse-one-dimensional-rbox-spec                                (rest dim2)                                (point-v ref-size))))               (error "Vertical :rbox layout specification expected, found ~S in ~S."                      dim1 spec)))            ((eq direction-1 ':vertical)             (if (eq direction-2 ':horizontal)               (make-point (+ (point-h ref-position)                              (parse-one-dimensional-rbox-spec                                (rest dim2)                                (point-h ref-size)))                           (+ (point-v ref-position)                              (parse-one-dimensional-rbox-spec                               (rest dim1)                                (point-v ref-size))))               (error "Horizontal :rbox layout specification expected, found ~S in ~S."                      dim1 spec)))            (t (error "Horizontal or vertical :rbox layout specification expected, found ~S in ~S."                      dim1 spec))))))(defun parse-one-dimensional-rbox-spec (reference-specs total-size)  "Returns a reference offset."  (labels ((n-fillers (specs)                      (cond ((endp specs) 0)                            ((filler-p (first specs))                             (1+ (n-fillers (rest specs))))                            (t (n-fillers (rest specs)))))           (fixed-space (specs)                      (if (endp specs)                        0                        (let ((spec (first specs)))                          (cond ((integerp spec)                                 (+ spec (fixed-space (rest specs))))                                ((or (rationalp spec)                                     (floatp spec))                                 (if (and (>= spec 0)                                          (<= spec 1))                                   (+ (truncate (* total-size spec))                                      (fixed-space (rest specs)))                                   (error "Specification for relative size ~S out of range (must be out of [0, 1])." spec)))                                (t (fixed-space (rest specs)))))))           (offset (specs filler-size)                  (if (endp specs)                    0                    (let ((spec (first specs)))                      (cond ((filler-p spec)                             (+ filler-size (offset (rest specs) filler-size)))                            ((integerp spec)                             (+ spec (offset (rest specs) filler-size)))                            ((or (rationalp spec)                                 (floatp spec))                             (if (and (>= spec 0)                                      (<= spec 1))                               (+ (truncate (* total-size spec))                                  (offset (rest specs) filler-size))                               (error "Specification for relative size ~S out of range (must be out of [0, 1])." spec)))                            ((reference-p spec)                             0)                            (t (error "Size specification error in rbox pattern.<fixnum>, <float>, <rational> or <filler-specification> expected - found ~S in ~S."                         spec reference-specs)))))))    (offset reference-specs (truncate (- total-size (fixed-space reference-specs))                                      (n-fillers reference-specs)))))(defun parse-one-dimensional-rbox-spec (reference-specs total-size)  "Returns a reference offset."  (labels ((n-fillers (specs)                      (cond ((endp specs) 0)                            ((filler-p (first specs))                             (1+ (n-fillers (rest specs))))                            (t (n-fillers (rest specs)))))           (fixed-space (specs)                        (if (endp specs)                          0                          (let ((spec (first specs)))                            (cond ((integerp spec)                                   (+ spec (fixed-space (rest specs))))                                  ((or (rationalp spec)                                       (floatp spec))                                   (if (and (>= spec 0)                                            (<= spec 1))                                     (+ (truncate (* total-size spec))                                        (fixed-space (rest specs)))                                     (error "Specification for relative size ~S out of range (must be out of [0, 1])." spec)))                                  (t (fixed-space (rest specs)))))))           (offset (specs filler-size)                   (if (endp specs)                     0                     (let ((spec (first specs)))                       (cond ((filler-p spec)                              (+ filler-size (offset (rest specs) filler-size)))                             ((integerp spec)                              (+ spec (offset (rest specs) filler-size)))                             ((or (rationalp spec)                                  (floatp spec))                              (if (and (>= spec 0)                                       (<= spec 1))                                (+ (truncate (* total-size spec))                                   (offset (rest specs) filler-size))                                (error "Specification for relative size ~S out of range (must be out of [0, 1])." spec)))                             ((reference-p spec)                              0)                             (t (error "Size specification error in rbox pattern.<fixnum>, <float>, <rational> or <filler-specification> expected - found ~S in ~S."                                       spec reference-specs)))))))    (let ((n-fillers (n-fillers reference-specs)))      (offset reference-specs (if (zerop n-fillers)                                nil ; no used then !                                (truncate (- total-size                                              (fixed-space reference-specs))                                          n-fillers))))))