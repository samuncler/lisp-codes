 ;;; ********************************************************************;;; Gcontexts **********************************************************;;; ********************************************************************;;; Written by Ralf Moeller;;; University of Hamburg, Computer-Science Department, December 1991.;;; Copyright (c) 1991 by Ralf Moeller. All rights reserved.;;; Use and copying of this software and preparation of derivative works;;; based upon this software are permitted, so long as the following;;; conditions are met:;;;      o no fees or compensation are charged for use, copies, or;;;        access to this software;;;      o this copyright notice is included intact.;;; This software is made available AS IS, and no warranty is made about ;;; the software or its performance. ;;; Please send bug reports, comments and suggestions to;;; moeller@informatik.uni-hamburg.de(in-package :oou)(eval-when (eval compile)  ;(require 'records)  ;(require 'traps)  (require 'quickdraw))(defmethod pen-normal ((view simple-view))  (with-focused-view view (#_PenNormal)))(defvar *standard-pen-state* (make-record :penstate))(defmethod pen-state ((view simple-view) &optional (save-state (clear-record *standard-pen-state* :pointer)))  (with-focused-view view    (#_GetPenState save-state))  save-state)(defmethod set-pen-state ((view simple-view) new-state)  (with-focused-view view    (#_SetPenState new-state))  new-state)(defconstant standard-pen-mode :patcopy)(defparameter standard-pen-pattern *black-pattern*)(defconstant standard-pen-size #@(1 1))(defparameter standard-fill-pattern *white-pattern*)(defstruct (gcontext (:constructor make-gcontext-instance))  (pen-mode nil)  (pen-size nil)  (pen-pattern nil)  (fill-pattern nil)  (font nil)  (installers '())  (deinstallers '()))(defparameter standard-gcontext  (make-gcontext-instance))(defun make-gcontext (&key (pen-mode nil pen-mode-supplied-p)                           (pen-pattern nil pen-pattern-supplied-p)                           (pen-size nil pen-size-supplied-p)                           (fill-pattern standard-fill-pattern)                           (font nil font-supplied-p))  (let ((installers '())        (deinstallers '()))    (when pen-mode-supplied-p      (push #'(lambda (view)                (with-port (wptr view) (#_PenMode (ccl::mode-arg pen-mode))))            installers)      (push #'(lambda (view)                (with-port (wptr view) (#_PenMode (ccl::mode-arg standard-pen-mode))))            deinstallers))    (when pen-pattern-supplied-p      (push #'(lambda (view)                (with-port (wptr view)                  (#_PenPat pen-pattern)))            installers)      (push #'(lambda (view)                (with-port (wptr view)                  (#_PenPat standard-pen-pattern)))            deinstallers))    (when pen-size-supplied-p      (push #'(lambda (view)                (with-port (wptr view) (#_PenSize :long pen-size)))            installers)      (push #'(lambda (view)                (with-port (wptr view) (#_PenSize :long standard-pen-size)))            deinstallers))    (when font-supplied-p      (let (standard-view-font)        (push #'(lambda (view)                  (setf standard-view-font (view-font view))                  (set-view-font view font))              installers)        (push #'(lambda (view)                  (set-view-font view standard-view-font))              deinstallers)))    (make-gcontext-instance     :pen-mode pen-mode     :pen-pattern pen-pattern     :pen-size pen-size     :font font     :fill-pattern fill-pattern     :installers installers     :deinstallers deinstallers)))(defun make-cache (n)  (if (= n 0)    nil    (cons (make-gcontext-instance)          (make-cache (- n 1)))))(defvar *gcontext-cache*)(setf *gcontext-cache* (make-cache 10))(defun get-gcontext (&key (pen-mode nil pen-mode-supplied-p)                          (pen-pattern nil pen-pattern-supplied-p)                          (pen-size nil pen-size-supplied-p)                          (fill-pattern standard-fill-pattern)                          (font nil font-supplied-p))  (labels ((re-order (cache previous)              (setf (rest previous) (rest cache))              (setf (rest cache) *gcontext-cache*)              (setf *gcontext-cache* cache))           (get-gcontext-internal (cache previous)              (if (endp cache)                (error "End of cache found.")                (let ((current-gcontext (first cache)))                  (cond ((and (eq (gcontext-pen-pattern current-gcontext)                                   pen-pattern)                              (eq (gcontext-pen-mode current-gcontext)                                  pen-mode)                              (eql (gcontext-pen-size current-gcontext)                                   pen-size)                              (eql (gcontext-fill-pattern current-gcontext)                                   fill-pattern)                              (equal (gcontext-font current-gcontext)                                     font))                         (if (not (null previous))                           (re-order cache previous))                         current-gcontext)                        ((endp (rest cache))                         (let ((installers nil)                               (deinstallers nil))                           (when pen-mode-supplied-p                             (push #'(lambda (view)                                       (with-port (wptr view) (#_PenMode (ccl::mode-arg pen-mode))))                                   installers)                             (push #'(lambda (view)                                       (with-port (wptr view) (#_PenMode (ccl::mode-arg standard-pen-mode))))                                   deinstallers))                           (when pen-pattern-supplied-p                             (push #'(lambda (view)                                       (with-port (wptr view)                                         (#_PenPat pen-pattern)))                                   installers)                             (push #'(lambda (view)                                       (with-port (wptr view)                                         (#_PenPat standard-pen-pattern)))                                   deinstallers))                           (when pen-size-supplied-p                             (push #'(lambda (view)                                       (with-port (wptr view) (#_PenSize :long pen-size)))                                   installers)                             (push #'(lambda (view)                                       (with-port (wptr view) (#_PenSize :long standard-pen-size)))                                   deinstallers))                           (when font-supplied-p                             (let (standard-view-font)                               (push #'(lambda (view)                                         (setf standard-view-font (view-font view))                                         (set-view-font view font))                                     installers)                               (push #'(lambda (view)                                         (set-view-font view standard-view-font))                                     deinstallers)))                           (let ((new-gcontext (make-gcontext-instance                                                :pen-mode pen-mode                                                :pen-pattern pen-pattern                                                :pen-size pen-size                                                :font font                                                :fill-pattern fill-pattern                                                :installers installers                                                :deinstallers deinstallers)))                             (setf (car cache)                                   new-gcontext)                             (if (not (null previous))                               (re-order cache previous))                             new-gcontext)))                        (t (get-gcontext-internal (rest cache) cache)))))))    (get-gcontext-internal *gcontext-cache* nil)))(defmacro using-gcontext (context-descriptions &body forms)  (labels ((gcontext-bindings (context-descriptions)                              (mapcar #'(lambda (context-descr)                                          `(,(first context-descr)                                            (get-gcontext . ,(rest context-descr))))                                      context-descriptions)))    `(let ,(gcontext-bindings context-descriptions)       . ,forms)))(defclass gcontext-mixin  ()  ((view-gcontext :accessor view-gcontext :initform standard-gcontext)))(defmethod window-draw-grow-icon :around ((window gcontext-mixin))  (let ((pen-state (pen-state window)))    (unwind-protect       (progn (pen-normal window)             (call-next-method))      (set-pen-state window pen-state))))(defmethod view-draw-contents :around ((view simple-view))  (let ((pen-state (pen-state view)))    (unwind-protect       (progn (pen-normal view)             (call-next-method))      (set-pen-state view pen-state))))  (defmacro gcontext-check (view gcontext)  `(let ((view-gcontext (view-gcontext ,view)))     (unless (eq view-gcontext ,gcontext)       (dolist (deinstaller (gcontext-deinstallers view-gcontext))         (funcall deinstaller ,view))       (dolist (installer (gcontext-installers ,gcontext))         (funcall installer ,view))       (setf (view-gcontext ,view) ,gcontext))))(defmethod draw-line-to ((view simple-view) gcontext h &optional v)  (gcontext-check view gcontext)  (with-focused-view view    (#_LineTo :long (setq h (make-point h v))))  h)(defmethod draw-line ((view simple-view) gcontext h &optional v)  (gcontext-check view gcontext)  (with-focused-view view (#_Line :long (setq h (make-point h v))))  h)(defmethod draw-framed-rect ((view simple-view) gcontext left &optional top right bot) (gcontext-check view gcontext) (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot) (#_FrameRect r))))(defmethod draw-painted-rect ((view simple-view) gcontext left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot) (#_PaintRect r))))(defmethod draw-erased-rect ((view simple-view) gcontext left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot) (#_EraseRect r))))(defmethod draw-inverted-rect ((view simple-view) gcontext left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot) (#_InvertRect r))))(defmethod draw-filled-rect ((view simple-view) gcontext left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot)       (#_FillRect r (gcontext-fill-pattern gcontext)))))(defmethod draw-framed-oval ((view simple-view) gcontext left &optional top right bot) (gcontext-check view gcontext)  (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot) (#_FrameOval r))))(defmethod draw-painted-oval ((view simple-view) gcontext left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot) (#_PaintOval r))))(defmethod draw-erased-oval ((view simple-view) gcontext left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot) (#_EraseOval r))))(defmethod draw-inverted-oval ((view simple-view) gcontext left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot) (#_InvertOval r))))(defmethod draw-filled-oval ((view simple-view) gcontext left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot)       (#_FillOval r (gcontext-fill-pattern gcontext)))))(defmethod draw-framed-round-rect ((view simple-view) gcontext oval-width oval-height                              left &optional top right bot) (gcontext-check view gcontext)  (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot)      (#_FrameRoundRect r oval-width oval-height))))(defmethod draw-painted-round-rect ((view simple-view) gcontext oval-width oval-height                              left &optional top right bot) (gcontext-check view gcontext)  (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot)      (#_PaintRoundRect r oval-width oval-height))))(defmethod draw-erased-round-rect ((view simple-view) gcontext oval-width oval-height                              left &optional top right bot) (gcontext-check view gcontext)  (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot)      (#_EraseRoundRect r oval-width oval-height))))(defmethod draw-inverted-round-rect ((view simple-view) gcontext oval-width oval-height                               left &optional top right bot) (gcontext-check view gcontext)  (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot)      (#_InvertRoundRect r oval-width oval-height))))(defmethod draw-filled-round-rect ((view simple-view) gcontext oval-width oval-height                             left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot)       (#_FillRoundRect r oval-width oval-height (gcontext-fill-pattern gcontext)))))(defmethod draw-framed-arc ((view simple-view) gcontext start-angle arc-angle                       left &optional top right bot) (gcontext-check view gcontext)  (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot)      (#_FrameArc r start-angle arc-angle))))(defmethod draw-painted-arc ((view simple-view) gcontext start-angle arc-angle                       left &optional top right bot) (gcontext-check view gcontext)  (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot)      (#_PaintArc r start-angle arc-angle))))(defmethod draw-erased-arc ((view simple-view) gcontext start-angle arc-angle                       left &optional top right bot) (gcontext-check view gcontext)  (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot)      (#_EraseArc r start-angle arc-angle))))(defmethod draw-inverted-arc ((view simple-view) gcontext start-angle arc-angle                        left &optional top right bot) (gcontext-check view gcontext)  (with-focused-view view   (ccl::with-rectangle-arg (r left top right bot)      (#_InvertArc r start-angle arc-angle))))(defmethod draw-filled-arc ((view simple-view) gcontext start-angle arc-angle                     left &optional top right bot)  (gcontext-check view gcontext)  (with-focused-view view    (ccl::with-rectangle-arg (r left top right bot)       (#_FillArc r start-angle arc-angle (gcontext-fill-pattern gcontext)))))(defmethod draw-framed-region ((view simple-view) gcontext region)  (gcontext-check view gcontext)  (with-focused-view view (#_FrameRgn region)))(defmethod draw-painted-region ((view simple-view) gcontext region)  (gcontext-check view gcontext)  (with-focused-view view (#_PaintRgn region)))(defmethod draw-erased-region ((view simple-view) gcontext region)  (gcontext-check view gcontext)  (with-focused-view view (#_EraseRgn region)))(defmethod draw-inverted-region ((view simple-view) gcontext region)  (gcontext-check view gcontext)  (with-focused-view view (#_InvertRgn region)))(defmethod draw-filled-region ((view simple-view) gcontext region)  (gcontext-check view gcontext)  (with-focused-view view     (#_FillRgn region (gcontext-fill-pattern gcontext))))(defmethod draw-framed-polygon ((view simple-view) gcontext polygon)  (gcontext-check view gcontext)  (with-focused-view view (#_FramePoly polygon)))(defmethod draw-painted-polygon ((view simple-view) gcontext polygon)  (gcontext-check view gcontext)  (with-focused-view view (#_PaintPoly polygon)))(defmethod draw-erased-polygon ((view simple-view) gcontext polygon)  (gcontext-check view gcontext)  (with-focused-view view (#_ErasePoly polygon)))(defmethod draw-inverted-polygon ((view simple-view) gcontext polygon)  (gcontext-check view gcontext)  (with-focused-view view (#_InvertPoly polygon)))(defmethod draw-filled-polygon ((view simple-view) gcontext polygon) (gcontext-check view gcontext)  (with-focused-view view   (#_FillPoly polygon (gcontext-fill-pattern gcontext))))(export '(draw-line-to draw-line          draw-framed-rect          draw-painted-rect draw-erased-rect draw-inverted-rect          draw-filled-rect draw-framed-oval draw-painted-oval          draw-erased-oval draw-inverted-oval draw-filled-oval           draw-framed-round-rect draw-painted-round-rect          draw-erased-round-rect draw-inverted-round-rect draw-filled-round-rect           draw-framed-arc          draw-painted-arc draw-erased-arc draw-inverted-arc draw-filled-arc          draw-framed-region draw-painted-region draw-erased-region          draw-inverted-region draw-filled-region          draw-framed-polygon draw-painted-polygon draw-erased-polygon           draw-inverted-polygon draw-filled-polygon                    gcontext-mixin           using-gcontext                    standard-gcontext          make-gcontext))