(in-package :oou)(oou-provide :layout-system)(require :cartiers-contribs "mcl:Environment;Cartier's Contribs;LOADME")(setf (logical-pathname-translations "layout")      (list (list "layout:**;*.*"                  (full-pathname                    (concatenate 'string                                 (directory-namestring                                   (truename *loading-file-source-file*))                                 "**:*.*")))))(cc::defunit "LAYOUT"  ;(:depends-on "MCL-EXTENSIONS")  (:source-pathname "layout:")  (:binary-pathname "layout:")  (:components "layoutmixin"               "references"               "gbox"               "boxlayout"               "rbox"               "dag"               "parse"               "layoutexports"               "rm-view-extensions"               "GContexts"))(cc::load-unit :layout)#|(defclass test-window (layout-mixin window)   ())(make-instance 'test-window   :layout (:fbox () (make-instance 'sequence-dialog-item)))(setf d1 (make-instance 'sequence-dialog-item))(setf d2 (make-instance 'sequence-dialog-item))(setf d3 (make-instance 'sequence-dialog-item))(setf d4 (make-instance 'sequence-dialog-item))(setf d5 (make-instance 'sequence-dialog-item))(setf d6 (make-instance 'sequence-dialog-item))(setf win (make-instance 'test-window            :view-size #@(450 350)            :layout (:vbox ()                           (:hbox (:height 70)                                  (:fbox () d1)                                  (:fbox () d2)                                  (:fbox () d3))                           (:hbox (:height 0.25)                                  (:fbox () d4)                                  (:fbox () d5))                           (:hbox ()                                  (:fbox () d6)))));---------------------------------------------------------------(setf (layout win)      (:hbox (:width :filler :height :filler)             (:vbox (:height :filler :width 70)                    (:fbox () d1)                    (:fbox () d2)                    (:fbox () d3))             (:vbox (:height :filler :width 0.25 )                    (:fbox () d4)                    (:fbox () d5))             (:vbox (:height :filler  :width :filler)                    (:fbox () d6))));------------------------------------------------------------------(setf (layout win)      (:vbox (:width :filler :height :filler)             (:hbox (:height 70 :width :filler)                    (:hbox ())                    (:hbox (:height :filler :width 200)                           (:fbox () d1)                           (:fbox () d2)                           (:fbox () d3))                    (:hbox ()))             (:hbox (:height 0.25 :width :filler )                    (:fbox () d4)                    (:fbox () d5))             (:fbox () d6)));---------------------------------------------------------------------------; example from Ralph(defclass test-dialog  (layout-mixin dialog)  ())(let ((item-1 (make-instance 'sequence-dialog-item                :view-font '("Monaco" 9)                :table-vscrollp t                :table-hscrollp nil                :table-sequence '(a b c d e f g)))      (item-1a (make-instance 'sequence-dialog-item                 :view-font '("Monaco" 9)                 :table-vscrollp t                 :table-hscrollp nil                 :table-sequence '(a b c d e f g)))      (item-2 (make-instance 'static-text-dialog-item                :dialog-item-text "Have a nice day.")))  (make-instance 'test-dialog    :window-type ':document-with-zoom    :adapt-size-to-layout t    :adapt-layout-to-size t    :layout (:vbox (:height (:filler :min :as-needed)                            :width (:filler :min :as-needed))                   (:fbox (:height (:filler :min :as-needed                                            :max :as-needed)                           :width (:filler :min :as-needed))                          item-1)                   (:fbox (:height (:filler :min :as-needed                                            :max :as-needed)                            :width (:filler :min :as-needed))                          item-1a)                   (:filler :min 10)                   (:hbox (:height (:filler :min :as-needed                                            :max :as-needed)                           :width (:filler :min :as-needed))                          item-2                          15))))|#