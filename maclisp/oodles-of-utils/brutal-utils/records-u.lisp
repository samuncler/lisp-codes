(in-package :oou)(oou-provide :records-u);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; records-u.Lisp;;;; Copyright © 1991 Northwestern University Institute for the Learning Sciences;; All Rights Reserved;;;; author: Michael S. Engber;;;; Utilities for working with MCL records ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(oou-dependencies )(export '(rlength rstorage rfields          ftype foffset flength));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(eval-when (:compile-toplevel :load-toplevel :execute)    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;; record/field attribute macros which attempt to NOT generate run-time code    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;; record attributes  (defmacro rlength (record-type)    (if (constantp record-type)      (record-descriptor-length (find-record-descriptor record-type))      `(record-descriptor-length (find-record-descriptor ,record-type))))    (defmacro rstorage (record-type)    (if (constantp record-type)      (record-descriptor-storage (find-record-descriptor record-type))      `(record-descriptor-storage (find-record-descriptor ,record-type))))    (defmacro rfields (record-type)    (if (constantp record-type)      `',(record-descriptor-fields (find-record-descriptor record-type))      `(record-descriptor-fields (find-record-descriptor ,record-type))))      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;; field attributes    (defmacro ftype (record-type field)    (if (and (constantp record-type) (constantp field))      (field-descriptor-type (find-field-descriptor record-type field))      `(field-descriptor-type (find-field-descriptor ,record-type ,field))))    (defmacro foffset (record-type field)    (if (and (constantp record-type) (constantp field))      (field-descriptor-offset (find-field-descriptor record-type field))      `(field-descriptor-offset (find-field-descriptor ,record-type ,field))))    (defmacro flength (record-type field)    (if (and (constantp record-type) (constantp field))      (field-descriptor-length (find-field-descriptor record-type field))      `(field-descriptor-length (find-field-descriptor ,record-type ,field))))    );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;#|(rlength :Rect)(flength :Rect :topLeft)(flength :Rect :top)|#