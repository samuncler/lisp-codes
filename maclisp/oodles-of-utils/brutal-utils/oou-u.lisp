(in-package :oou)(oou-provide :oou-u);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; oou-u.Lisp;;;; Copyright © 1991 Northwestern University Institute for the Learning Sciences;; All Rights Reserved;;;; author: Michael S. Engber;;;; utilities for oodles-of-utils;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(eval-when (:compile-toplevel :load-toplevel :execute))(export '(compile-oou           ));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;This really needs improvement. Dependancy handling, ...(defun compile-file-out-of-date (input-pathname &key                                                (output-file (merge-pathnames ".fasl" input-pathname))                                                (verbose *compile-verbose*)                                                (print *compile-print*))  (when (or (null (probe-file output-file))            (< (file-write-date output-file) (file-write-date input-pathname)))    (compile-file input-pathname :output-file output-file :verbose verbose :print print)))(defun compile-oou (&key (verbose *compile-verbose*)                         (print *compile-print*))  (dolist (file (oou-source-files))    (compile-file-out-of-date file :verbose verbose :print print)))(defun de-compile-oou ()  (dolist (file (oou-source-files))    (let ((fasl (merge-pathnames ".fasl" file)))      (when (and (probe-file fasl) (delete-file fasl))        (format t "deleted ~s~%" fasl)))));(compile-oou :verbose t);(de-compile-oou);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;