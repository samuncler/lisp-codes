(in-package :oou)(oou-provide :drag-and-drop-fred-window);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a fred window with a new copy/paste mechanism. Drag and Drop Version; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(require :QuickDraw)(oou-dependencies :droppable-dim                                :unibas-cursors                                :simple-view-ce                                :autoscrollable-dim                                :fred-mixin-ce                                ) (export '(drag-and-drop-fred-window                 ));---------------------------- -------------------------------------(defvar *copy-paste-buffer* nil)(defclass drag-and-drop-buffer (droppable-dim view)    ((offset :initform #@(10 0)                  :accessor offset))    (:default-initargs        :view-size #@(20 18)       :drop-target-class 'drag-and-drop-fred-window       :drag-bounds :none       :drag-start-tol #@(0 0)))(defmethod hilite-view ((self drag-and-drop-buffer) hilite-flag)    (declare (ignore hilite-flag))    nil);------------------------------------------------------------------(defclass drag-and-drop-fred-window (drop-target-dim autoscrollable-fred-window)    ((dummy-cursor-pos :initform nil                                          :accessor dummy-cursor-pos)))(defmethod view-cursor ((self drag-and-drop-fred-window) where)    (if (and (in-selection self where)                  (in-text-area self where))        *full-hand-cursor*        (call-next-method)))(defmethod draw-dummy-cursor ((self drag-and-drop-fred-window))    (with-slots (dummy-cursor-pos) self         (when dummy-cursor-pos              (with-pen-mode (:PatXOr self )                   (multiple-value-bind (ascent descent widmax leading)                                                          (font-info (view-font self))                         (declare (ignore leading widmax))                         (move-to self                                           (- (fred-hpos self dummy-cursor-pos) 2)                                          (+ (fred-vpos self dummy-cursor-pos)                                                descent))                         (line self 4 0)                         (move self -2 0)                         (line self 0 (- (+ ascent descent)))                         (move self -2 0)                         (line self 4 0))))))         (defmethod view-click-event-handler ((self drag-and-drop-fred-window) where)    (cond ((and (in-selection self where)                         (in-text-area self where))                (unless *copy-paste-buffer*                    (setf *copy-paste-buffer* (make-instance 'drag-and-drop-buffer)))                (let* ((offset (offset *copy-paste-buffer*))                            (real-where (subtract-points where offset)))                    (set-view-position *copy-paste-buffer* real-where)                    (set-view-size *copy-paste-buffer*                                                (view-width *copy-paste-buffer*)                                               (fred-line-height self))                    (setf (dummy-cursor-pos self) (fred-point-position self  real-where))                    (set-view-container *copy-paste-buffer* self)                    (view-click-event-handler *copy-paste-buffer*  offset)))                (set-view-container *copy-paste-buffer* nil))              (t (call-next-method))))(defmethod dropped ((self drag-and-drop-fred-window) (dropped-view drag-and-drop-buffer) offset where)    (declare (ignore offset))    (draw-dummy-cursor self)    (setf where (subtract-points where (offset dropped-view)))    (let* ((source (view-container dropped-view))                (destination self)                (destination-buffer (fred-buffer destination))                (new-pos (fred-point-position destination where)))        (cond ((and (in-selection destination where)                             (eq source destination))                    (collapse-selection self t)                    (set-mark destination-buffer (fred-point-position self where)))                  (t (copy source)                       (cond ((eq source destination)                                   (cond ((option-key-p)                                               (collapse-selection destination t)                                               (set-mark destination-buffer new-pos))                                             (t                                                (multiple-value-bind (source-sel-start source-sel-end) (selection-range source)                                                    (clear source)                                                    (set-mark destination-buffer                                                                        (if (< new-pos source-sel-start)                                                                           new-pos                                                                           (- new-pos (- source-sel-end source-sel-start))))))))                                 (t                                    (cond ((in-selection destination where)                                               (clear destination))                                             (t                                                (collapse-selection destination t)                                               (set-mark destination-buffer new-pos)))))                       (let ((start (buffer-position destination-buffer)))                           (paste destination)                           (set-selection-range destination start (buffer-position destination-buffer)))                       (set-mini-buffer  source " ")                       (set-mini-buffer  destination " ")                       (fred-update source)                       (fred-update destination)))))(defmethod draggable-dim-is-above ((self drag-and-drop-fred-window) (draggable-view draggable-dim) global-position)    (if (in-text-area self (global-to-view self global-position))        (adjust-dummy-cursor self draggable-view global-position)        (call-next-method)))(defmethod adjust-dummy-cursor ((self drag-and-drop-fred-window) (buffer drag-and-drop-buffer) global-position)    (with-slots (offset) buffer         (let* ((mouse-pos (global-to-view self global-position))                     (new-buffer-pos (fred-point-position self                                                                                       (subtract-points mouse-pos offset))))             (unless (eq new-buffer-pos (dummy-cursor-pos self))                 (draw-dummy-cursor self )                 (setf (dummy-cursor-pos self) new-buffer-pos)                 (draw-dummy-cursor self)))))(defmethod do-autoscroll :around ((self drag-and-drop-fred-window) scroll-direction dropped-view)    (declare (ignore dropped-view scroll-direction))    (draw-dummy-cursor self)    (call-next-method)    (draw-dummy-cursor self))(defmethod draggable-view-enters ((self drag-and-drop-fred-window) (copy-paste-buffer drag-and-drop-buffer) global-mouse-pos)    (declare (ignore global-mouse-pos))    (unless (eq (front-window) self)        (window-select self)        (when (last-real-target copy-paste-buffer)             (fred-update  (last-real-target copy-paste-buffer)))        (fred-update self))    (draw-dummy-cursor self))(defmethod draggable-view-leaves ((self drag-and-drop-fred-window) (copy-paste-buffer drag-and-drop-buffer) global-mouse-pos)    (declare (ignore copy-paste-buffer global-mouse-pos))    (draw-dummy-cursor self)    (setf (dummy-cursor-pos self) nil))#|(setf win (make-instance 'drag-and-drop-fred-window))|#