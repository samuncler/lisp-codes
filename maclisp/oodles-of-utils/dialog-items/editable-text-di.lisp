(in-package :oou)(oou-provide :editable-text-di);************************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a paned view with 3 subviews: a static text, a menu to insert specific strings and an e; editable text; ;; Changes (worth to be mentioned):; ------------------------------; 1/12/92 Dieter : The default editable-text now has a shade.;;************************************************************************;************************************************************************(export '(insertion-menu-item insertion-text editable-text-di                editable-text-di dialog-item-text editable-text-class menu-text                clear-text after-method items))(oou-dependencies :simple-view-ce                              :paned-view                              :shaded-editable-text-di                              :unibas-pop-up-menu-di                              :font-info                              );----------------------------------------------------------------------------------(defclass insertion-pop-up-menu (unibas-pop-up-menu)   ()   (:default-initargs    :auto-update-default nil    :default-item 0))(defmethod ccl::menu-display-v-offset ((menu insertion-pop-up-menu))  (1- (point-v (view-size menu))))(defmethod ccl::menu-display-h-offset ((menu insertion-pop-up-menu))  1)(defmethod point-in-click-region-p ((menu insertion-pop-up-menu) where)  (view-contains-point-p menu where))(defmethod view-click-event-handler ((menu insertion-pop-up-menu) where)  (declare (ignore where))  (with-focused-view (view-container menu)      (#_InvertRect :ptr (ccl::pop-up-menu-rect menu))      (#_FrameRect  :ptr (ccl::pop-up-menu-rect menu))      (menu-select menu 0)))(defmethod view-default-size ((menu insertion-pop-up-menu))   (multiple-value-bind (ff ms)(view-font-codes menu)    (multiple-value-bind (a d w l)(font-codes-info ff ms)         (declare (ignore a d l))         (subtract-points (call-next-method) (make-point (- w 8) 0)))))(defmethod view-draw-contents ((menu insertion-pop-up-menu) &aux (items (menu-items menu)))  (let* (;(pos (view-position menu))         (text (menu-title menu)) ;(dialog-item-text menu))         (ti-rect (ccl::pop-up-menu-title-rect menu))         (no-title (equal text ""))         (item-display (pop-up-menu-item-display menu))         (enabled (menu-enabled-p menu))         (colorp (ccl::color-or-gray-p menu))         (pull-down-p (ccl::pull-down-menu-p menu)))    (with-focused-dialog-item (menu)  ; take font from item, draw in containers coords - this is the other thing that dialog item gives us    (multiple-value-bind (a d w leading)(ccl::view-font-codes-info menu)      (declare (ignore a w))      (rlet ((a-rect :rect))        (copy-record (ccl::pop-up-menu-rect menu) :rect a-rect)        (let ((mi-title (cond ((eq item-display :selection)                                      (let ((selection (pop-up-menu-default-item menu)))                                        (cond ((null items) "<No Items>")                                              ((zerop selection) "<No selection>")                                              (t (menu-item-title                                                  (nth (- selection 1) items))))))                                     ((stringp item-display)                                      item-display)                                     (t                                       (format nil "~a" item-display)))))          (with-fore-color (if (and (not enabled) colorp)                             *gray-color*                             (part-color menu :menu-title)) ; 21-Jun-91 -wkf            (with-back-color (part-color menu :menu-body) ; 10-Nov-92 -straz              (unless no-title                (#_EraseRect :ptr ti-rect)                (#_MoveTo :word (+ (rref ti-rect rect.left) 3) ; (+ (point-h pos) 3)                 :word (- (rref ti-rect rect.bottom) (+ d leading)))                (with-pstrs ((di-title text))                  (#_DrawString :ptr di-title)))              ;  (#_OffsetRect :ptr a-rect :long #@(0 -1))              (#_FillRect :ptr a-rect :ptr *white-pattern*)              (cond ((not pull-down-p)                     (#_FrameRect :ptr a-rect)                     (#_MoveTo :word (+ (rref a-rect rect.left) 3)                      :word (rref a-rect rect.bottom))                     (#_LineTo :word (rref a-rect rect.right)                      :word (rref a-rect rect.bottom))                     (#_LineTo :word (rref a-rect rect.right)                      :word (+ (rref a-rect rect.top) 2)))                    ((ccl::crescent menu)                     (let ((tl (rref a-rect rect.topleft)))                       (#_moveto :long tl)                       (dolist (length '(5 3 2 1 0 0))                         (#_line :word length :word 0)                         (#_move :word (- length) :word 1)))))                                                     (#_InsetRect :ptr a-rect :long #@(1 1))              (let* ((left (+ (rref a-rect rect.left)                                     6 ; (if pull-down-p 6 (max 6 w))                              ))                     (right (rref a-rect rect.right))                     (bottom (rref a-rect rect.bottom)))                (#_MoveTo :word left :word  (- bottom (+ leading 1 d)))                (with-clip-rect-intersect a-rect                  (ccl::draw-string-crop mi-title (- right left (if pull-down-p 0 12)))                  (#_MoveTo :word (- right (+ 4 11))                   :word (- (ash (+ bottom (rref a-rect :rect.top)) -1)                            2)))                ; Draw the little triangle.                (unless pull-down-p                  (ccl::draw-triangle menu)))))))                       (unless (or enabled colorp)        (rlet ((ps :penstate))          (ccl::with-item-rect (rect menu)            (#_InsetRect :ptr rect :long #@(0 -1))            (#_GetPenState :ptr ps)            (#_PenPat :ptr *gray-pattern*)            (#_PenMode :word 11)            (#_PaintRect :ptr rect)            (unless no-title (#_PaintRect ti-rect)) ; ??            (#_SetPenState :ptr ps))))))))(defclass insertion-pop-up-menu-with-help (help-mixin insertion-pop-up-menu)   ());-----------------------------------------------------------------------------------(defclass insertion-menu-item (menu-item)   ((insertion-text :initform ""                             :accessor insertion-text                             :initarg :insertion-text)     (editable-text-di :initform nil                                 :initarg :editable-text-di                                 :accessor editable-text-di))   (:default-initargs      :menu-item-action     #'(lambda (menu-item)           (insert-new-text (editable-text-di menu-item) (insertion-text menu-item)))))(defmethod menu-item-action ((self insertion-menu-item))   (funcall (menu-item-action-function self) self));----------------------------------------------------------------------------------(defclass editable-text-di (unibas-paned-view)   ((dialog-item-text :initform ""                                  :accessor dialog-item-text                                  :initarg :dialog-item-text)     (editable-text-class :initform 'shaded-editable-text-di                                       :initarg :editable-text-class                                       :accessor editable-text-class)     (static-text-class :initform 'static-text-dialog-item                                   :initarg :static-text-class                                   :accessor static-text-class)     (menu-class :initform 'insertion-pop-up-menu                          :initarg :menu-class                          :accessor menu-class)     (menu-text :initform ""                        :accessor menu-text                        :initarg :menu-text)     (clear-text :initform nil                        :accessor clear-text                        :initarg :clear-text)     (before-method :initform nil                               :accessor before-method                               :initarg :before-method)     (after-method :initform nil                             :accessor after-method                             :initarg :after-method)     (menu-nick-name :initform :menu                                  :accessor menu-nick-name                                  :initarg :menu-nick-name)     (editable-text-nick-name :initform :editable-text                                               :accessor editable-text-nick-name                                               :initarg :editable-text-nick-name)     (static-text-nick-name :initform :static-text                                           :accessor static-text-nick-name                                           :initarg :static-text-nick-name)     (items :initform nil                 :accessor items                 :initarg :items)))(defmethod initialize-instance :after ((self editable-text-di) &rest initargs)   (declare (ignore initargs))   (let* ((menu (make-instance (menu-class self)                            :view-font (view-font self)                            :item-display (menu-text self)                            ;:view-position (make-point (- (point-h (view-size self))                            ;                                                (point-h menu-size))                            ;                                            0)                            ;:view-size menu-size                            :view-nick-name (menu-nick-name self)                            :menu-items (items self)))             (menu-size  (view-default-size menu))               ;(make-point (+ (string-width (menu-text self) (view-font self)) 8 34)               ;                                      (+ (font-line-height (view-font self)) 5)))                          (static-text (make-instance (static-text-class self)                                     :view-font (view-font self)                                     :view-position #@(0 1)                                     :view-size (make-point 100 (point-v menu-size))                                     :view-nick-name (static-text-nick-name self)                                     :dialog-item-text (dialog-item-text self)))             (editable-text (make-instance (editable-text-class self)                                         :view-nick-name (editable-text-nick-name self)                                         :view-position (make-point 3                                                                                      (+ (point-v menu-size) 5)))))      (set-view-position menu (make-point (- (point-h (view-size self))                                                                      (point-h menu-size))                                                                        0))      (set-view-size editable-text (make-point (- (point-h (view-size self)) 6)                                                                         (font-line-height (view-font editable-text))))      (labels ((set-action-function (menu)                      (dolist (menu-item (menu-items menu))                         (if (typep menu-item 'menu)                            (set-action-function menu-item)                            (setf (editable-text-di menu-item) self)))))         (set-action-function menu))      (set-view-size self                                (+ (view-right editable-text) 3)                               (+ (view-bottom editable-text) 3))      (setf (subview-description self)               (list                  (list static-text :constant :stick-on-topleft)                 (list menu :constant :stick-on-topright)                 (list editable-text :adjust-h :stick-on-topleft)))))(defmethod insert-new-text ((di editable-text-di) new-text)   (let* ((editable-text (view-named :editable-text di))             (fred-buffer (fred-buffer editable-text)))      (when (before-method di)          (funcall (before-method di) di new-text))      (when (clear-text di)          (buffer-delete fred-buffer 0 t))      (multiple-value-bind (start-pos end-pos) (selection-range editable-text)          (when (/= start-pos end-pos)              (buffer-delete fred-buffer  start-pos end-pos)              (set-mark fred-buffer start-pos)))      (buffer-insert fred-buffer new-text)      (when (after-method di)          (funcall (after-method di) di new-text))      (let ((old-buffer-position (buffer-position fred-buffer)))         (view-click-event-handler editable-text #@(10 10))         (set-mark fred-buffer old-buffer-position))      (fred-update editable-text)))(defmethod (setf items) :after (newvalue (self editable-text-di))   (let ((menu (view-named :menu self)))          (when (menu-items menu)              (apply #'remove-menu-items menu (menu-items menu)))          (apply  #'add-menu-items menu newvalue)))#|;the items should be of class 'insertion-menu-item(make-instance 'unibas-paned-window    :window-title "Insertion-di Demo"    :view-size #@(310 80)    :view-position :centered    :subview-description    (list      (list        (make-instance 'editable-text-di            :view-position #@(5 5)            :view-size #@(300 70)            :dialog-item-text "Insert text"            :menu-text "Default Strings"            :after-method #'(lambda (editable-text-di inserted-text)                                         (declare (ignore inserted-text))                                         (if (string= (dialog-item-text                                                              (view-named :editable-text editable-text-di))                                                            "Hello World")                                            (setf (clear-text editable-text-di) t)                                            (setf (clear-text editable-text-di) nil)))            :clear-text nil            :items (list (make-instance 'insertion-menu-item                                   :menu-item-title "insert 'Hello'"                                   :insertion-text "Hello ")                               (make-instance 'insertion-menu-item                                   :menu-item-title "insert 'World'"                                   :insertion-text "World")))        :adjust-h        :stick-on-topleft)))|#