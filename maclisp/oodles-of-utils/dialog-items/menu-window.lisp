(in-package :oou)(oou-provide :menu-window);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Menus on the desktop; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :menu-di                              )(export '(menu-window items item-print-function menu-item-action               windows-menu                ));---------------------------------------------------------------------------(defclass menu-window (window)   ((items :initform nil                :accessor items                :initarg :items)     (item-print-function :initform #'princ                                       :accessor item-print-function                                       :initarg :item-print-function)     (menu-item-action :initform nil                                    :accessor menu-item-action                                    :initarg :menu-item-action))   (:default-initargs  :window-show nil                                  :window-title "Menu"                                 :window-type :document))(defmethod initialize-instance :after ((self menu-window) &rest initargs)   (declare (ignore initargs))   (let ((table              (make-instance 'menu-di                 :view-nick-name :table                 :items (items self)                 :item-print-function (item-print-function self)                 :menu-item-action (menu-item-action self)                 :view-position #@(-1 -1))))      (set-view-container table self)      (adjust-size self)))(defmethod adjust-size ((self menu-window))   (let ((table (car (subviews self))))      (adjust-size table)      (set-view-size  self (subtract-points (view-size table) #@(2 2)))))(defmethod (setf items) :after (newvalue (self menu-window))   (setf (items (view-named :table self)) newvalue));---------------------------------------------------------------------------(defun windows-menu ()   (declare (special win))   (window-show     (make-instance 'menu-window         :window-title "Assigns to 'win'"         :items (windows)          :item-print-function #'(lambda (item stream)                                                 (princ (window-title item) stream))         :menu-item-action #'(lambda (menu-di window)                                              (declare (ignore menu-di))                                             (setf win window)                                              (window-select *top-listener*)))))#|(defun rmm (generic-function)   (when (fboundp generic-function)       (let ((remove-menu                  (make-instance 'visible-menu                      :items (generic-function-methods (symbol-function generic-function))                     :item-print-function                      #'(lambda (method stream)                            (format stream                                        "~A ~{~S~} (~{~A ~})  "                                        (method-name method)                                        (method-qualifiers method)                                        (mapcar #'(lambda (specializer)                                                           (if (listp specializer)                                                              specializer                                                              (class-name specializer)))                                                       (method-specializers method))))                     :window-title (format nil                                                         "Remove a method of '~A'"                                                         generic-function))))          (setf (menu-item-action remove-menu)                   (eval `(function (lambda (method)                                                (remove-method ,(symbol-function generic-function) method)                                               (if (memq method (generic-function-methods ,(symbol-function generic-function)))                                                  (format t "Can't remove ~A" method)                                                  (progn                                                     (delete-item ,remove-menu method)                                                     (format t "~A removed" method)))))))          (window-show remove-menu))))|#