(in-package :oou)(oou-provide :unibas-pop-up-menu-di);*****************************************************************                                    ; ; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; methods for the view class; ;; Changes (worth to be mentioned):; ------------------------------; 4/6/95 Dieter   : Completely changed for CCL 3.0. ;;; 8/1/92 Dieter   : view-draw-contents of the original pop-up-menu overwritten to;                            get the behavior of b3. (b4 draws the little arrows by itself); 20/2/92 Dieter : command-keys are now consumed by the pop-up-menus. For this;                            *eventhook* is modified when they are activated.;;*****************************************************************;*****************************************************************(oou-dependencies :command-key-pup-mixin                              :consistent-cursor-dim                              )(export '(unibas-pop-up-menu));---------------------------------------------------------------------------(defclass unibas-pop-up-menu (full-hand-cursor-dim command-key-pup-mixin pop-up-menu)   ()   (:default-initargs     :default-item 0))(defmethod install-view-in-window ((menu unibas-pop-up-menu) win)  (declare (ignore win))  (let ((default-item (pop-up-menu-default-item menu)))    (call-next-method)    (ccl::set-pop-up-menu-default-item menu default-item)));----------------------------------------------------------------------------#|(make-instance 'window    :view-size #@(200 60)    :view-position '(:top 40)    :window-title "Pop-up Menu Test"    :window-type :document    :view-subviews     (list (setf pup1 (make-instance 'unibas-pop-up-menu                :menu-items                (list                  (make-instance 'menu-item                      :command-key #\1                      :menu-item-title "item one"                      :menu-item-action #'(lambda ()                                                          (print 1)))                  (make-instance 'menu-item                      :command-key #\W                      :menu-item-title "item two"                      :menu-item-action #'(lambda ()                                                          (print 2)))                  (make-instance 'menu-item                      :menu-item-title "item three"                      :menu-item-action #'(lambda ()                                                          (print 3)))                  (make-instance 'menu-item                      :menu-item-title "item fourteen"                      :menu-item-action #'(lambda ()                                                          (print 14))))))            (setf pup2 (make-instance 'unibas-pop-up-menu                :menu-items                (list                  (make-instance 'menu-item                      :menu-item-title "item one"                      :menu-item-action #'(lambda ()                                                          (print 1)))                  (make-instance 'menu-item                      :command-key #\2                       :menu-item-title "item two"                      :menu-item-action #'(lambda ()                                                          (print 2)))                  (make-instance 'menu-item                      :menu-item-title "item three"                      :menu-item-action #'(lambda ()                                                          (print 3)))                  (make-instance 'menu-item                      :menu-item-title "item fourteen"                      :menu-item-action #'(lambda ()                                                          (print 14))))))))|#