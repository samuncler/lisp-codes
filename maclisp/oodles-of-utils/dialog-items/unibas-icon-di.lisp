(in-package :oou)(oou-provide :unibas-icon-di);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a unibas icon is dialog-item with a picture (from a file in PICT format) and button; behavior ; ;; Changes (worth to be mentioned):; ------------------------------; none ; ;*****************************************************************;*****************************************************************(oou-dependencies :QuickDraw-u                  :unibas-macros                  :unibas-cursors                  :simple-view-ce                  :picture-dim                  :highlight                  :with-running-watch                  )(export '(icon-di icon-text picture-file draw-text          ))(setf (logical-pathname-translations "icons")      `(("**;*.*" "oou-top:Icons;*.*")));---------------------------------------------------------------------------(defclass icon-di (docu-line-svm picture-dim dialog-item)  ((icon-text :initform ""              :accessor icon-text              :initarg :icon-text)   (draw-outline :initform nil                 :initarg :draw-outline                 :accessor draw-outline))  (:default-initargs :view-size (make-point 51 51)    :view-font  '("GoMan Helvetica" 14 :bold :outline)    :dialog-item-action     #'(lambda (icon)         (declare (ignore icon))        (ed-beep))    :PICT-file "icons:default-icon"))(defmethod view-draw-contents :after ((self icon-di))   (when (wptr self)    (draw-text self)    (when (draw-outline self)      (case (draw-outline self)        (:simple-frame (view-frame self))        (t (view-frame-with-shade self))))    (unless (dialog-item-enabled-p self)      (gray-out-item self))))(defmethod view-cursor ((self icon-di) point)  (declare (ignore point))  (if (dialog-item-enabled-p self)    *pointer-hand-cursor*    *arrow-cursor*))(defmethod in-click-loop ((self icon-di) where)  (declare (ignore where))  nil)(defmethod view-click-event-handler ((self icon-di) where)  (declare (ignore where))  (when (dialog-item-enabled-p self)    (hilite-view self t)    (do ((in-icon-p t))        ((not (mouse-down-p)))      (let ((mouse-pos (view-mouse-position (view-container self))))        (in-click-loop self (container-to-view self mouse-pos))        (unless (eq (view-contains-point-p self mouse-pos) in-icon-p)          (setf in-icon-p (not in-icon-p))          (if in-icon-p            (hilite-view self t)            (hilite-view self nil)))))    (when (and (dialog-item-action-function self)               (view-contains-point-p self (view-mouse-position (view-container self))))      (hilite-view self nil)      (icon-action self (view-mouse-position self))      )))(defmethod icon-action ((self icon-di) where)  (declare (ignore where))  (with-cursor *watch-cursor*    (funcall (dialog-item-action-function self) self))  )(defmethod set-view-size :around ((self icon-di) h &optional v)   (let* ((new-size (make-point h v))         (size-constant (and (zerop (- (point-h new-size) (view-width self)))                             (zerop (- (point-v new-size) (view-height self))))))    (unless size-constant      (view-erase self))    (call-next-method)    (unless size-constant      (view-draw-contents (view-container self)))))(defmethod set-view-font :after ((self icon-di) font-spec)  (declare (ignore font-spec))  (when (view-container self)    (view-draw-contents (view-container self))))(defmethod draw-text ((self icon-di))  (with-slots (icon-text) self    (when (and icon-text               (stringp icon-text)               (string/= "" icon-text))      (with-pen (:patxor *black-pattern* 1 1 self)        (let* ((view-font (view-font self))               (text-width (string-width icon-text view-font))               (text-ascent (multiple-value-bind (ascent descent widmax leading) (font-info view-font)                              (declare (ignore widmax leading descent))                              ascent))               (text-descent (multiple-value-bind (ascent descent widmax leading) (font-info view-font)                               (declare (ignore widmax ascent leading))                               descent))               (text-height (+ text-ascent text-descent))               (icon-width (view-width self))               (icon-height (view-height self)))          (move-to self                   (max (round (/ (- icon-width text-width)                                  2))                        0)                   (- (min (round (/ (+ text-height icon-height)                                     2))                           icon-height)                      text-descent))          (princ icon-text self))))))(defmethod (setf icon-text) :after (text (self icon-di))  (declare (ignore text))  (view-draw-contents self))(defmethod (setf dialog-item-enabled-p) :before (new-value (self icon-di))  (when (neq new-value (dialog-item-enabled-p self))    (invalidate-view self)))(defmethod graphic-margins ((self icon-di))  (if (draw-outline self)    (values #@(1 1) #@(2 2))    (values #@(0 0) #@(0 0))))#|(oou-dependencies :docu-line-svm)(make-instance 'window     :window-title "A window with an icon inside"    :window-type :document    :view-size #@(275 120)    :view-position :centered    :view-subviews    (list (make-instance 'icon-di                :view-size #@(44  31)                :view-position #@(10 10)                :rsrc-file "oou:resources stuff"                :rsrc-id 153                :draw-outline t                :PICT-scaling :center-in-view                :dialog-item-action #'(lambda (icon)                                        (setf (dialog-item-enabled-p icon) nil)))            (make-instance 'icon-di                :view-size #@(44  31)                :view-position #@(56 10)                :rsrc-file "oou:resources stuff"                :rsrc-id 155                :draw-outline t                :PICT-scaling :center-in-view                :dialog-item-action #'(lambda (icon)                                        (setf (dialog-item-enabled-p icon) nil)))            (make-instance 'icon-di                :view-size #@(26 21)                :view-position #@(10 70)                :rsrc-file "oou:resources stuff"                :rsrc-id 154                :draw-outline t                :PICT-scaling :center-in-view                :dialog-item-action #'(lambda (icon)                                        (setf (dialog-item-enabled-p icon) nil)))            (make-instance 'icon-di                :view-size #@(26 21)                :view-position #@(37 70)                :rsrc-file "oou:resources stuff"                :rsrc-id 152                :draw-outline t                :PICT-scaling :center-in-view                :dialog-item-action #'(lambda (icon)                                        (setf (dialog-item-enabled-p icon) nil)))))|#