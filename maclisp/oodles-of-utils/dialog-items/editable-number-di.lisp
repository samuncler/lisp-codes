(in-package :oou)(oou-provide :editable-number-di);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Dialog item for numerical input; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :picture-dim                              :highlight                              :unibas-cursors                              )(export '(editable-number-di                actual-number                max-number min-number precision                number-field-width text-field-width dialog-item-text                after-set-number-method ));--------------------------------------------------------------------------(defclass up-and-down-arrow (picture-dim simple-view)   ()   (:default-initargs     :PICT-scaling :scale-to-view     :view-position #@(0 0)     :detach-p nil     :view-size #@(11 18)     :view-nick-name :arrows     :rsrc-file "oou:Resources Stuff"     :rsrc-id 128))(defmethod view-cursor ((self up-and-down-arrow) where)   (declare (ignore where))   *pointer-hand-cursor*)(defmethod view-click-event-handler ((self up-and-down-arrow) point)    (let* ((container (view-container self))             (hilited nil)             (actual-position (container-to-view self point)))      (with-focused-view container          (labels ((new-number (where)                          (let ((number-field (view-named :number container)))                             (labels ((set-actual-number (number)                                             (with-slots (actual-number) container                                                 (unless (eq number actual-number)                                                    (setf actual-number number)                                                    (set-dialog-item-text number-field                                                                                         (format nil                                                                                                      (if (integerp actual-number)                                                                                                        "~A"                                                                                                        "~,2F")                                                                                                     actual-number))                                                    (view-draw-contents number-field)                                                    (sleep 0.015)))))                                (with-slots (actual-number min-number max-number precision) container                                    (let ((number-string (dialog-item-text number-field)))                                       (cond ((and (or (string= number-string "")                                                               (string= number-string "-"))                                                         (> (point-v where) 8))                                                  (set-actual-number max-number))                                                 ((and (or (string= number-string "")                                                               (string= number-string "-"))                                                          (< (point-v where) 9))                                                   (set-actual-number min-number))                                                 ((> (point-v where) 8)                                                   (set-actual-number (max min-number                                                                                            (- (read-from-string number-string)                                                                                                 precision))))                                                 ((< (point-v where) 9)                                                   (set-actual-number (min max-number                                                                                           (+ (read-from-string number-string)                                                                                               precision))))))))))                       (hilite (where)                          (let ((pict-id (if (> (point-v where) 8)                                                  130                                                  129)))                             (unless (eq hilited pict-id)                                (when (slot-boundp self 'rsrc-handle)                                    (when (resource-handlep (slot-value self 'rsrc-handle))                                       (#_ReleaseResource (slot-value self 'rsrc-handle)))                                    (#_DisposeHandle (slot-value self 'rsrc-handle))                                    (slot-makunbound self 'rsrc-handle))                                (set-view-pict self :PICT-id pict-id)                                (setf hilited pict-id)                                (invalidate-view self t)                                (view-draw-contents self))))                       (lowlite ()                          (when hilited                              (when (slot-boundp self 'rsrc-handle)                                  (when (resource-handlep (slot-value self 'rsrc-handle))                                     (#_ReleaseResource (slot-value self 'rsrc-handle)))                                  (#_DisposeHandle (slot-value self 'rsrc-handle))                                  (slot-makunbound self 'rsrc-handle))                              (set-view-pict self :PICT-id 128)                              (invalidate-view self)                              (view-draw-contents self)                              (setf hilited nil))))             (hilite actual-position)             (do ()                   ((not (mouse-down-p))                     (when (point-in-click-region-p self actual-position)                         (new-number actual-position))                     (when (after-set-number-method container)                         (funcall (after-set-number-method container) container))                     (lowlite))                (setf actual-position (view-mouse-position self))                (if (point-in-click-region-p self actual-position)                   (progn (hilite actual-position)                              (new-number actual-position))                   (lowlite)))))));--------------------------------------------------------------------------------------                          (defclass editable-number (editable-text-dialog-item)   ()   (:default-initargs     :view-position #@(17 3)     :view-size #@(50 12)     :view-nick-name :number     :allow-returns t))(defmethod view-key-event-handler ((self editable-number) char)   (cond  ((memq char '(#\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 #\0                                    #\delete #\backarrow #\ForwardArrow ))               (call-next-method))              ((and (eq char #\.)                       (not (buffer-char-pos (fred-buffer self) #\. :start 0)))                (call-next-method))              ((and (eq char #\-)                       (zerop (buffer-position (fred-buffer self)))                       (or (zerop (buffer-size (fred-buffer self)))                             (and (> (buffer-size (fred-buffer self)) 0)                                     (char/= (buffer-char (fred-buffer self) 0) #\-))))                (call-next-method))              ((eq char #\newline)                 (let ((container (view-container self))                        (number-string (dialog-item-text self)))                   (unless (or (string= number-string "")                                     (string= number-string "-"))                      (let ((number (read-from-string (dialog-item-text self))))                         (cond ((and (>= number (min-number container))                                           (<= number (max-number container)))                                    (setf (actual-number container) (read-from-string (dialog-item-text self)))                                    (when (after-set-number-method container)                                        (funcall (after-set-number-method container) container)))                                   ((< number (min-number container))                                     (flash self)                                     (set-dialog-item-text self                                                                         (format nil                                                                                       (if (integerp (min-number container))                                                                                         "~A"                                                                                         "~,2F")                                                                                      (min-number container)))                                     (setf (actual-number container) (min-number container)))                                   ((> number (max-number container))                                     (flash self)                                     (set-dialog-item-text self                                                                         (format nil                                                                                       (if (integerp (max-number container))                                                                                         "~A"                                                                                         "~,2F")                                                                                      (max-number container)))                                     (setf (actual-number container) (max-number container))))))))              (t (flash self))))(defmethod install-view-in-window :after ((self editable-number) window)   (declare (ignore window))   (collapse-selection self t));----------------------------------------------------------------------------------(defclass editable-number-di (view)   ((actual-number :initform nil                              :initarg :actual-number                              :accessor actual-number)     (max-number :initform 100                           :initarg :max-number                           :accessor max-number)     (min-number :initform 0                          :initarg :min-number                          :accessor min-number)     (precision :initform 1                      :initarg :precision                      :accessor precision)     (after-set-number-method :initform #'(lambda (self)                                                                     (declare (ignore self)))                                                :initarg :after-set-number-method                                                :accessor after-set-number-method)     (number-field-width :initform 50                                       :initarg :number-field-width                                       :accessor number-field-width)     (text-field-width :initform 20                                  :initarg :text-field-width                                  :accessor text-field-width)     (dialog-item-text :initform ""                                  :initarg :dialog-item-text                                  :accessor :dialog-item-text))   (:default-initargs     :view-size #@(100 20)     :view-subviews      (list (make-instance 'up-and-down-arrow)             (make-instance 'editable-number)             (make-instance 'static-text-dialog-item                 :view-size #@(20 14)                 :view-position #@(80 3)                 :view-font '("Chicago" 12)                 :view-nick-name :static-text))))(defmethod initialize-instance :after ((self editable-number-di) &rest initargs)   (declare (ignore initargs))   (with-slots (actual-number number-field-width text-field-width dialog-item-text) self       (let ((number-field (view-named :number self))               (text-field (view-named :static-text self)))          (when actual-number              (set-dialog-item-text number-field (format nil "~A" actual-number)))          (set-view-size number-field number-field-width (view-height number-field))          (set-view-position text-field (+ (view-right number-field) 5) (view-top text-field))          (set-view-size text-field text-field-width (view-height text-field))          (set-view-size self (view-right text-field) (view-height self))          (when dialog-item-text              (set-dialog-item-text text-field dialog-item-text)))))#|(make-instance 'window    :window-title "editable-number-dis"    :view-position '(:top 150)    :window-type :document    :view-size #@(200 120)    :view-subviews    (list (make-instance 'editable-number-di                :view-position #@(20 20))            (make-instance 'editable-number-di                :view-position #@(20 50)                :min-number -100                :max-number 100                :actual-number 50                :number-field-width 33                :text-field-width 100                :dialog-item-text "items"                :after-set-number-method                #'(lambda (self)                      (print (actual-number self))))            (make-instance 'editable-number-di                :view-position #@(20 80)                :min-number 0                :max-number 1                :precision 0.01                :actual-number 0.5                :dialog-item-text "tiny items"                :text-field-width 100                :after-set-number-method                #'(lambda (self)                      (print (actual-number self))))))|#                 