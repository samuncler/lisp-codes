(in-package :oou)(oou-provide :unibas-button-di);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; changes the cursor ; ;; Changes (worth to be mentioned):; ------------------------------;; 1/10/92 Dieter : 'shaded-button-di' added.;;;*****************************************************************;*****************************************************************(oou-dependencies :unibas-cursors                              :unibas-macros                              :simple-view-ce                              :static-text-dim                              )(export '(unibas-button-dialog-item unibas-default-button-dialog-item               shaded-button-di));---------------------------------------------------------------------------(defclass unibas-default-button-dialog-item (default-button-dialog-item)   ())(defmethod view-cursor ((self unibas-default-button-dialog-item) where)   (declare (ignore self where))   *pointer-hand-cursor*);---------------------------------------------------------------------------(defclass unibas-button-dialog-item (button-dialog-item)   ()   (:default-initargs      :dialog-item-enabled-p t))(defmethod view-cursor ((self unibas-button-dialog-item) where)   (declare (ignore self where))   *pointer-hand-cursor*)(defmethod view-click-event-handler ((self unibas-button-dialog-item) where)   (declare (ignore where))   (view-invert self)   (do ((in-view-p t))         ((not (mouse-down-p)))      (let ((mouse-inside (view-contains-point-p self (view-mouse-position (view-container self)))))         (unless (eq mouse-inside in-view-p)            (setf in-view-p (not in-view-p))            (view-invert self)            (unless mouse-inside               (view-draw-contents self)))))   (when (and (dialog-item-action-function self)                     (view-contains-point-p self (view-mouse-position (view-container self))))       (view-invert self)       (view-draw-contents self)       (without-interrupts          (with-cursor *watch-cursor*             (funcall (dialog-item-action-function self) self)))));--------------------------------------------------------------------------------(defclass shaded-button-di (unibas-button-dialog-item)   ((top-right-angle :initform 45                               :initarg :top-right-angle                               :accessor top-right-angle)     (bottom-left-angle :initform 30                                    :initarg :bottom-left-angle                                    :accessor bottom-left-angle)     (shade-width :initform 1                           :initarg :shade-width                           :accessor shade-width)))(defmethod button-shade ((self shaded-button-di) &optional (pen-pattern *black-pattern*))   (when (wptr self)       (with-slots (top-right-angle bottom-left-angle shade-width) self           (let* ((original-oval-width (/ (min (view-width self) (view-height self)) 2))                     (oval-width (- original-oval-width shade-width))                     (oval-width-half (round  oval-width 2))                     (container (view-container self)))              (setf original-oval-width (round original-oval-width))              (setf oval-width (round oval-width))              (with-pen-pattern (*black-pattern* self)                  (frame-round-rect self oval-width oval-width                                                 (make-point shade-width shade-width)                                                (subtract-points (view-size self) (make-point shade-width shade-width))))              (with-pen (:PatCopy pen-pattern shade-width shade-width container)                  (with-pen-size ((1+ shade-width) (1+ shade-width) container)                      (frame-arc container (- 90 top-right-angle) top-right-angle                                         (make-point (- (view-right self) original-oval-width shade-width)                                                             (view-top self))                                         (make-point (view-right self)                                                             (+ (view-top self) original-oval-width shade-width))))                  (move-to container (make-point (- (view-right self) shade-width)                                                                      (+ (view-top self) oval-width-half shade-width -1)))                  (line container  0 (- oval-width shade-width -1))                   (with-pen-size ((1+ shade-width) (1+ shade-width) container)                      (frame-arc container 90 90                                          (make-point (- (view-right self) original-oval-width shade-width)                                                             (- (view-bottom self) original-oval-width shade-width))                                         (make-point (view-right self)                                                              (view-bottom self))))                  (move-to container (make-point (+ (view-left self) oval-width-half shade-width -1)                                                                     (- (view-bottom self) shade-width)))                  (line container  (- (view-width self) oval-width (* shade-width 3) -1) 0)                  (with-pen-size ((1+ shade-width) (1+ shade-width) container)                      (frame-arc container 180 bottom-left-angle                                         (make-point (view-left self)                                                              (- (view-bottom self) oval-width (* shade-width 2)))                                         (make-point (+ (view-left self) oval-width (* shade-width 2))                                                             (view-bottom self)))))))))                                                                     (defmethod view-draw-contents  ((self shaded-button-di))    (with-focused-view self       (with-slots (dialog-item-text) self           (multiple-value-bind (ascent descent widmax leading) (font-info (view-font self))               (declare (ignore widmax leading))               (move-to self                                (round (- (view-width self) (string-width dialog-item-text (view-font self))) 2)                               (round (+ (/ (- (view-height self) ascent) 2) (- ascent descent)))                               ))           (princ dialog-item-text self)            (button-shade self))))(defmethod view-invert ((self shaded-button-di))   (with-slots (shade-width) self       (let ((oval-width (- (round (min (view-width self)  (view-height self)) 2) shade-width 2))               (container (view-container self)))          (invert-round-rect container  oval-width oval-width                                          (add-points (view-top-left self)                                                             (add-points (make-point shade-width shade-width)                                                                               #@(2 2)))                                         (subtract-points (view-bottom-right self)                                                                     (add-points (make-point shade-width shade-width)                                                                               #@(2 2))))          (button-shade self *white-pattern*)          (with-pen-pattern (*black-pattern* self)              (setf oval-width (- (round (min (view-width self)  (view-height self)) 2) shade-width))              (frame-round-rect self oval-width oval-width                                             (make-point shade-width shade-width)                                            (subtract-points (view-size self) (make-point shade-width shade-width)))))))#|(make-instance 'window    :view-size #@(200 100)    :view-position '(:top 80)    :window-title "a shaded button"    :window-type :document    :view-subviews (list (make-instance 'shaded-button-di                                          :view-size #@(150 22)                                          :view-position #@(20 20)                                          :dialog-item-text "see the shade"                                          :top-right-angle 45                                          :bottom-left-angle 30                                          :shade-width 1                                          :dialog-item-action #'(lambda (di)                                                                                 (declare (ignore di))                                                                                (ed-beep)))))|#