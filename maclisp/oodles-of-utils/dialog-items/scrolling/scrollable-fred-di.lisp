(in-package :oou)(oou-provide :scrollable-fred-di);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a scrollable fred-dialog-item; ;; Changes (worth to be mentioned):; ------------------------------;; March 1996  Dieter: go-back-to-last-edit-mark is now part of pm-embedded-fred-di; April 1995  Dieter: CCL 3.0 ;; June 1992   Dieter: Now drag-and-drop is supported.;;*****************************************************************;*****************************************************************(oou-dependencies :fred-mixin-ce                  :drag-and-drop-fred-mixin                  :wrap-fred-mixin                  :autosave-fred-mixin                  :text-mode-fred-mixin                  :fred-finder-mixin                  :go-back-fred-mixin                  :highlight                  :color-svm                  )(require 'toolequ)(export '(               ));---------------------------------------------------------------------------(defclass PM-embedded-fred-di (text-mode-fred-mixin go-back-fred-mixin fred-item)  ((scroll-direction :initform :in-thumb                     :accessor scroll-direction)   (last-buffer-modcnt :initform nil                       :accessor last-buffer-modcnt))  (:default-initargs    :buffer-chunk-size 4096    :copy-styles-p t    :view-font '("GoMan Helvetica" 12 :plain)    :allow-returns t    :allow-tabs t    :draw-outline nil    :comtab (make-comtab)))(defmethod h-scroller ((self pm-embedded-fred-di))  (ccl::h-scroller (view-container self)))(defmethod v-scroller ((self pm-embedded-fred-di))  (ccl::v-scroller (view-container self)))(defmethod set-current-key-handler :around ((win window) (view pm-embedded-fred-di) &optional (select-all nil))  (call-next-method win view select-all))(defmethod scroll-to-position ((view PM-embedded-fred-di) position)  (cond ((>= (buffer-size (fred-buffer view)) position)         (set-mark (fred-buffer view) position)         (set-mark (fred-display-start-mark view) position)         (fred-update view))        (t (flash view))));----------------------------------------------------------------------------------(defclass embedded-fred-di (wrap-fred-mixin drag-and-drop-fred-mixin fred-receive-finder-drags-mixin PM-embedded-fred-di)   ()  (:default-initargs    :autoscroll-area 30));--------------------------------------------------------------------------------(defclass window-embedded-fred-di (autosave-fred-mixin embedded-fred-di)   ())(defmethod fred-update :around ((fred window-embedded-fred-di))  (call-next-method)  (set-modified-marker fred))(defmethod set-modified-marker (w)  (declare (ignore w))  nil)(defmethod view-click-event-handler  ((self window-embedded-fred-di) where)  (declare (ignore where))  (with-autosave-off self    (call-next-method)))(defmethod dropped ((self window-embedded-fred-di) (dropped-view drag-and-drop-buffer) offset where)  (declare (ignore dropped-view offset where))  (with-autosave-off self    (call-next-method)))(defmethod ccl::view-restore-position ((w window-embedded-fred-di)                                            &optional (name (slot-value w 'ccl::my-file-name))                                            &aux (refnum -1) pos )  (without-interrupts   (unwind-protect     (with-macptrs (rsrc)       (with-pstrs ((np (mac-namestring name)))         (setq refnum (#_OpenResFile np)))       (when (neq -1 refnum)         (#_UseResFile refnum)         (%setf-macptr rsrc (#_Get1Resource "MPSR" 1005))         (unless (%null-ptr-p rsrc)           (#_LoadResource rsrc)           (with-dereferenced-handles ((rp rsrc))             (let ((b-size (buffer-size (fred-buffer w)))                   (win (view-window w)))               (when win                 (set-view-position win (setq pos (%get-long rp 38)))                 (set-view-size win (subtract-points (%get-long rp 42) pos)))               (set-mark (fred-buffer w) (ccl::%imin b-size (%get-long rp 58)))               (set-selection-range w (ccl::%imin b-size (%get-long rp 62)))               (set-mark (fred-display-start-mark w)                         (ccl::%imin b-size (%get-long rp 66)))               (when win                 (window-ensure-on-screen win #@(6 44))))))))     (unless (eq refnum -1)       (#_CloseResFile refnum)))))(defmethod set-modified-marker ((fred window-embedded-fred-di))  (let ((w (view-window fred))        wptr)    (when  (and w (setq wptr (wptr w)))      (unless (ccl::view-quieted-p w)        (without-interrupts              (let ((modified-marker (ccl::modified-marker w)))           (with-focused-view w                           (let* ((marker (if (ccl::window-buffer-read-only-p fred)                              #xA8                              (if (window-needs-saving-p fred)                                 (ccl::%char-code modified-marker)                                (ccl::%char-code #\Space)))))               (unless (eq marker                            (ccl::%hget-byte (%get-ptr wptr ccl::$wtitleHandle) 1))                 (let* ((buffer (fred-buffer fred))                        owner wptr                        (mapper #'(lambda (frec)                                    (let* ((buf2 (ccl::fr.buffer frec)))                                      (when (and (same-buffer-p buf2 buffer)                                                 (setq owner (ccl::fr.owner frec)))                                        (let ((w2 (view-window owner)))                                          (when (or (typep w2 'fred-window)                                                    (typep w2 'fred-window-mixin))                                            (when (neq marker                                                        (ccl::%hget-byte (%get-ptr (setq wptr (wptr w2))                                                                                  ccl::$wtitleHandle)                                                                        1))                                              (%stack-block ((sp 256))                                                (#_GetWTitle wptr sp)                                                (%put-byte sp marker 1)                                                (#_SetWTitle wptr sp))))))))))                   (declare (dynamic-extent mapper))                   (ccl::map-frecs mapper)))))))))))(defmethod set-mini-buffer ((view window-embedded-fred-di) string &rest args)  (declare (dynamic-extent args))  (apply #'set-mini-buffer (view-window view) string args));---------------------------------------------------------------------------(defclass scrollable-fred-di (color-svm scrolling-fred-view)  ()  (:default-initargs    :fred-item-class 'embedded-fred-di    :h-scroll-fraction 4    :back-color *white-color*    ))(defmethod initialize-instance :after ((view scrollable-fred-di) &rest initargs)  (declare (ignore initargs))  (let* ((h (view-width view))         (v (view-height view))         (mini-height 16)         (mouse-documentation-line          (make-instance 'fred-window-mixin-mini-buffer            :view-size (make-point (- h 10 (truncate h 4)) mini-height)            :view-position (make-point 0 (- v mini-height 0))            )))    (set-view-container mouse-documentation-line view)))(defmethod set-view-size :after ((view scrollable-fred-di) h &optional v)  (declare (ignore h v))  (let ((mini (view-named 'mini-buffer view))        (width (view-width view))        (height (view-height view))        (mini-height 16))    (set-view-size mini (make-point (- width 10 (truncate width 4)) mini-height))    (set-view-position mini (make-point 0 (- height mini-height)))))    (defclass window-scrollable-fred-di (scrollable-fred-di)  ()  (:default-initargs    :fred-item-class 'window-embedded-fred-di    ));---------------------------------------------------------------------------#|(defclass fred-item-container (window layout-mixin)  ())(defmethod view-mini-buffer ((view fred-item-container))    (view-named 'mini-buffer view))(make-instance 'window  :view-size #@(200 200)  :view-subviews  (list (make-instance 'scrollable-fred-di          :view-size #@(180 180)          :view-position #@(5 5))))(defclass receive-drags-window (window drag-&-drop-window-mixin)  ())(make-instance 'receive-drags-window  :view-size #@(200 200)  :view-subviews  (list (make-instance 'window-scrollable-fred-di          :view-size #@(180 180)          :view-position #@(5 5))))(defclass extended-fred-window (fred-window drag-&-drop-window-mixin)  ())(make-instance 'extended-fred-window  :view-size #@(200 200)  :fred-item-class 'window-embedded-fred-di)(make-instance 'fred-window  :filename "dieters hd:desktop folder:fred.lisp"  :fred-item-class 'window-embedded-fred-di)|#