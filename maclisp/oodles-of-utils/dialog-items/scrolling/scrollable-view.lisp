(in-package :oou)(oou-provide :scrollable-view);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; A view with a view and two scroll-bars as subviews  ;  ; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :unibas-macros                  :simple-view-ce                  :scroll-bar-di                  :paned-view                  :autoscrollable-dim                  )(export '( horizontal-vertical-scrollable-view            vertical-scrollable-view            horizontal-scrollable-view           view-extension view-class view-initargs            h-scroll-action v-scroll-action           embedded-view));---------------------------------------------------------------------------(defclass embedded-view (color-svm autoscrollable-dim view)  ()  (:default-initargs    :back-color *white-color*    ))(defmethod offset-view-scroll-position ((sv embedded-view) h &optional v)    "sv h &optional vOffsets the views's scroll position by the specified amount."  (let ((offset (make-point h v)))    (set-view-scroll-position sv                               (make-point (min (max 0                                                     (+ (point-h (view-scroll-position sv))                                                       (point-h offset)))                                               (- (point-h (view-extension (view-container sv)))                                                  (view-width sv)))                                          (min (max 0                                                     (+ (point-v (view-scroll-position sv))                                                       (point-v offset)))                                               (- (point-v (view-extension (view-container sv)))                                                  (view-height sv)))))    (setf (sb-setting (view-named :v-scroller (view-container sv)))           (point-v (view-scroll-position sv)))    (setf (sb-setting (view-named :h-scroller (view-container sv)))           (point-h (view-scroll-position sv)))    (window-update-event-handler (view-window sv))));----------------------------------------------------------------------------(defclass scrollable-view (autoscrollable-dim unibas-paned-view)   ((view-extension :initform (make-point *screen-width*                                          *screen-height*)                   :initarg :view-extension                   :accessor view-extension)   (view-class :initform 'embedded-view               :initarg :view-class               :accessor view-class)   (view-initargs :initform nil                  :initarg :view-initargs                  :accessor view-initargs)   (init-function :initform                   #'(lambda (view real-view h-scroller v-scroller)                      (when h-scroller                        (setf (sb-max h-scroller)                              (- (point-h (view-extension view))                                 (view-width real-view))))                      (when v-scroller                         (setf (sb-max v-scroller)                              (- (point-v (view-extension view))                                 (view-height real-view)))))                  :initarg :init-function                  :accessor init-function)   (h-scroll-action :initform                    #'(lambda (item part)                        (declare (ignore part))                        (set-real-view-scroll-position                          (view-container item)                          (sb-setting item)                         (point-v (view-scroll-position (sb-scrollee item)))))                    :initarg :h-scroll-action                    :accessor h-scroll-action)   (v-scroll-action :initform                    #'(lambda (item part)                        (declare (ignore part))                        (set-real-view-scroll-position                          (view-container item)                         (point-h (view-scroll-position (sb-scrollee item)))                         (sb-setting item)))                    :initarg :v-scroll-action                    :accessor v-scroll-action)   (h-scroller-class :initform 'scroll-bar-di                     :initarg :h-scroller-class                     :accessor h-scroller-class)   (v-scroller-class :initform 'scroll-bar-di                     :initarg :v-scroller-class                     :accessor v-scroller-class)))(defmethod view-draw-contents :around ((self scrollable-view))  (call-next-method)  (view-frame self))(defmethod set-view-size :around ((self scrollable-view) h &optional v)  (let* ((h-scroller (view-named :h-scroller self))         (v-scroller (view-named :v-scroller self))         (new-size (make-point h v))          (v-scroller-width (if v-scroller                             (sb-width v-scroller)                             0))         (h-scroller-width (if h-scroller                             (sb-width h-scroller)                             0)))    (invalidate-corners self                         (subtract-points (view-size self)                                         (make-point v-scroller-width                                                     h-scroller-width))                        (view-size self)                        t)    (when v-scroller      (setf (sb-max v-scroller)             (- (point-v (view-extension self))               (- (point-v new-size)                   h-scroller-width                  2))))    (when h-scroller      (setf (sb-max h-scroller)             (- (point-h (view-extension self))               (- (point-h new-size)                   v-scroller-width                   2))))     (call-next-method)))(defmethod set-real-view-scroll-position ((self scrollable-view) h &optional v)   (set-view-scroll-position (car (subviews self (view-class self))) h v)  (window-update-event-handler (view-window self)))(defmethod delta-scroll ((self scrollable-view) &key (delta-h 0) (delta-v 0))  (offset-view-scroll-position (car (subviews self (view-class self))) delta-h delta-v))(defmethod (setf h-scroll-action) :after (new-value (self scrollable-view))  (setf (dialog-item-action-function (view-named :h-scroller self)) new-value))(defmethod (setf v-scroll-action) :after (new-value (self scrollable-view))  (setf (dialog-item-action-function (view-named :v-scroller self)) new-value));-------------------------------------------------------------------------------(defclass  horizontal-vertical-scrollable-view (scrollable-view)  ())(defmethod initialize-instance :after ((self horizontal-vertical-scrollable-view) &rest initargs)  (declare (ignore initargs))  (let* ((scrollee (apply #'make-instance (view-class self)                          (nconc                           (list :view-size (subtract-points (view-size self)                                                             #@(17 17))                                 :view-position #@(1 1)                                 :view-nick-name :real-view)                           (view-initargs self))))         (h-scroller (make-instance (h-scroller-class self)                       :direction :horizontal                       :length (- (view-width self) 15)                       :scroll-size 25                       ;:page-size nil ;50                       :view-position (make-point 0                                                  (- (view-height self) 16))                       :view-nick-name :h-scroller                       :scrollee scrollee                       :dialog-item-action (h-scroll-action self)))         (v-scroller (make-instance (v-scroller-class self)                       :length (- (view-height self) 15)                       :view-position (make-point (- (view-width self) 16)                                                  0)                       :view-nick-name :v-scroller                       :scroll-size 25                       ;:page-size nil                       :scrollee scrollee                       :dialog-item-action (v-scroll-action self))))    (funcall (init-function self) self scrollee h-scroller v-scroller)    (setf (subview-description self)          (list (list h-scroller                      :adjust-h                      :stick-on-bottomright)                (list v-scroller                      :adjust-v                      :stick-on-bottomright)                (list scrollee                      :adjust-h-v                      :stick-on-topleft)))));-----------------------------------------------------------------------------(defclass vertical-scrollable-view (scrollable-view)  ()  (:default-initargs :h-scroll-action nil))(defmethod initialize-instance :after ((self vertical-scrollable-view) &rest initargs)  (declare (ignore initargs))  (let* ((scrollee (apply #'make-instance (view-class self)                          (nconc                           (list :view-size (subtract-points (view-size self)                                                             #@(17 2))                                 :view-position #@(1 1)                                 :view-nick-name :real-view)                           (view-initargs self))))         (v-scroller (make-instance (v-scroller-class self)                       :length (view-height self)                       :view-position (make-point (- (view-width self) 16)                                                  0)                       :view-nick-name :v-scroller                       :scroll-size 7                       :page-size 50                       :scrollee scrollee                       :dialog-item-action (v-scroll-action self))))    (funcall (init-function self) self scrollee nil v-scroller)    (setf (subview-description self)          (list (list v-scroller                      :adjust-v                      :stick-on-bottomright)                (list scrollee                      :adjust-h-v                      :stick-on-topleft)))));-------------------------------------------------------------------------------(defclass horizontal-scrollable-view (scrollable-view)  ()  (:default-initargs :v-scroll-action nil)) (defmethod initialize-instance :after ((self  horizontal-scrollable-view) &rest initargs)  (declare (ignore initargs))  (let* ((scrollee (apply #'make-instance (view-class self)                          (nconc                           (list :view-size (subtract-points (view-size self)                                                             #@(2 17))                                 :view-position #@(1 1)                                 :view-nick-name :real-view)                           (view-initargs self))))         (h-scroller (make-instance (h-scroller-class self)                       :direction :horizontal                       :length (view-width self)                       :scroll-size 7                       :page-size 50                       :view-position (make-point 0                                                  (- (view-height self) 16))                       :view-nick-name :h-scroller                       :scrollee scrollee                       :dialog-item-action (h-scroll-action self))))    (funcall (init-function self) self scrollee h-scroller nil)    (setf (subview-description self)          (list (list h-scroller                      :adjust-h                      :stick-on-bottomright)                (list scrollee                      :adjust-h-v                      :stick-on-topleft)))));------------------------------------------------------------------------------#|(defclass test-view (view)  ())(defmethod view-draw-contents :after ((self test-view))   (let ((view-extension (view-extension (view-container self))))    (paint-rect self 10 10 50 70)    (paint-rect self                 (- (point-h view-extension) 50)                1                (- (point-h view-extension) 1)                50)    (paint-rect self                 1                (- (point-v view-extension) 50)                50                (- (point-v view-extension) 1))    (paint-rect self                 (- (point-h view-extension) 30)                (- (point-v view-extension) 30)                (- (point-h view-extension) 1)                (- (point-v view-extension) 1))))(make-instance 'unibas-paned-window  :window-title "Scroll to the corners"  :view-size #@(250 150)  :view-position :centered  :subview-description  (list (list (setf *sv* (make-instance 'horizontal-vertical-scrollable-view                           :view-class 'test-view                           :view-size #@(200 100)                           :view-position #@(10 10)))              :adjust-h-v              :stick-on-topleft)));------------------------------------------------------------------------------; change the action of the horizontal scroller(setf (h-scroll-action *sv*)       #'(lambda (h-scroller part)           (print part)          (print h-scroller))); reset the default action(setf (h-scroll-action *sv*)       #'(lambda (item part)          (declare (ignore part))          (set-real-view-scroll-position            (view-container item)            (sb-setting item)           (point-v (view-scroll-position (sb-scrollee item))))));------------------------------------------------------------------------------(make-instance 'unibas-paned-window  :window-title "Scroll to the corners"  :view-size #@(250 150)  :view-position :centered  :subview-description  (list (list (make-instance 'vertical-scrollable-view                :view-class 'test-view                :view-size #@(200 100)                :view-position #@(10 10))              :adjust-h-v              :stick-on-topleft)))(make-instance 'unibas-paned-window  :window-title "Scroll to the corners"  :view-size #@(250 150)  :view-position :centered  :subview-description  (list (list (make-instance 'horizontal-scrollable-view                :view-class 'test-view                :view-size #@(200 100)                :view-position #@(10 10))              :adjust-h-v              :stick-on-topleft)))|#