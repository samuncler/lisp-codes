(in-package :oou)(oou-provide :scrollbar-di);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; A special scroll-bar; ; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :unibas-macros                              :unibas-cursors                              )(export '(scroll-bar-di sb-setting               sb-min sb-max sb-length sb-width               sb-page-size  sb-scroll-size sb-scrollee               sb-track-thumb-p));---------------------------------------------------------------------------(eval-when (:compile-toplevel :execute)  ;some constants for tracking the clicks in the scroll-bar  (defconstant $InUpButton 20)  (defconstant $InDownButton 21)  (defconstant $InPageUp 22)  (defconstant $InPageDown 23)  (defconstant $InThumb 129))(defconstant $sb-max 16384);---------------------------------------------------------------------------(defclass scroll-bar-di (ccl::control-dialog-item)  ((ccl::procid :allocation :class :initform #$scrollBarProc)    (direction :initform :vertical                    :initarg :direction                     :accessor sb-direction)     (min :initform 0           :initarg :min            :accessor sb-min)   (max :initform 100            :initarg :max             :accessor sb-max)   (setting :initform 0                 :initarg :setting                  :accessor sb-setting)   (track-thumb-p :initarg :track-thumb-p                              :initform t                             :accessor sb-track-thumb-p)   (page-size :initarg :page-size                     :initform nil                     :accessor sb-page-size)   (scroll-size :initarg :scroll-size                        :initform 1                        :accessor sb-scroll-size)   (scrollee :initarg :scrollee                   :initform nil                   :accessor sb-scrollee)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;initialize-instance;;;;initargs:;;   length;;   width;;   direction;;   setting;;   min;;   max;;   page-size;;   scroll-size;;   track-thumb-p(defmethod initialize-instance ((item scroll-bar-di) &rest initargs                                                        &key (width 16) (length 100) (direction :vertical))   (declare (dynamic-extent initargs))   (apply #'call-next-method              item              :length length              :view-size              (case direction                 (:vertical (make-point width length))                 (:horizontal (make-point length width))                 (t (error "illegal :direction ~a (must be :vertical or :horizontal)."                               direction)))              initargs))(defun sb-mac-sb-setting (setting min max)   (if (<= max min)      0      (max 0 (min $sb-max                          (round (* $sb-max (- setting min)) (- max min))))))(defmethod install-view-in-window :after ((item scroll-bar-di) view)   (declare (ignore view))   (let* ((window (view-window item))             (my-size (view-size item))             (my-position (view-position item))             (setting (sb-setting item))             (min (sb-min item))             (max (sb-max item))             (mac-setting (sb-mac-sb-setting setting min max)))      (when window          (rlet ((scroll-rect :rect))             (rset scroll-rect rect.topleft my-position)             (rset scroll-rect rect.bottomright (add-points my-position my-size))             (let ((handle (dialog-item-handle item)))                (setf (dialog-item-handle item) nil)          ; I'm paranoid                (when handle                    (#_DisposeControl handle)))             (setf (dialog-item-handle item)                      (#_NewControl                         (wptr item)            ;window                        scroll-rect            ;item rectangle                        (%null-ptr)            ;title                        nil                    ;visible-p: invisible initially.                        mac-setting            ;initial value                        0                ;min value                        $sb-max                ;max value                        16                     ;type of control                        0)))                   ;refcon          (unless (dialog-item-enabled-p item)             (#_HiliteControl (dialog-item-handle item) 255)))))(defmethod remove-view-from-window :before ((item scroll-bar-di))   (let ((handle (dialog-item-handle item)))      (when handle          (setf (dialog-item-handle item) nil)          (#_DisposeControl handle))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;dialog-item-enable;;;; Need to patch the system-supplied method for control-dialog-item;; scroll bars are not visibly enabled unless the window they're on;; is the top window.(defmethod dialog-item-enable ((item scroll-bar-di))    (unless (dialog-item-enabled-p item)      (setf (dialog-item-enabled-p item) t)      (view-activate-event-handler item)))(defmethod scroll-action ((item scroll-bar-di) part)   (let ((f (dialog-item-action-function item)))      (when f          (funcall f item part)          (validate-view (sb-scrollee item)))));---------------------------------------------------------------------------(defmethod view-cursor ((self scroll-bar-di) point)   (if (= (#_TestControl :ptr (dialog-item-handle self)               :long (convert-coordinates point self (view-container self))               :word)            $InThumb)      *full-hand-cursor*      *pointer-hand-cursor*))(defmethod view-draw-contents ((item scroll-bar-di))  (let ((handle (dialog-item-handle item)))    (when handle      (if (window-active-p (view-window item))        (if (neq 0 (href handle controlRecord.contrlvis))          (#_Draw1Control handle)          (#_ShowControl handle))        (multiple-value-bind (tl br) (view-corners item)                 (rlet ((rect :rect :topLeft tl :botRight br))                    (#_FrameRect rect)))))))(defmethod view-deactivate-event-handler ((item scroll-bar-di))   (with-focused-view (view-container item)       (let ((handle (dialog-item-handle item)))          (unless (window-active-p (view-window item))             (multiple-value-bind (tl br) (view-corners item)                 (rlet ((rect :rect                                    :topLeft (add-points tl #@(1 1))                                    :botRight (subtract-points br #@(1 1))))                    (with-clip-rect rect                        (#_HideControl handle)                        (#_EraseRect rect)))))          (#_hilitecontrol handle 255))))(defmethod view-activate-event-handler ((item scroll-bar-di))   (when (let ((w (view-window item)))                (and w (window-active-p w)))       (let ((handle (dialog-item-handle item)))          (with-focused-view (view-container item)              (if (dialog-item-enabled-p item)                 (#_hilitecontrol handle 0)                 (#_hilitecontrol handle 255))              ;(unless (rref handle :ControlRecord.contrlvis)                 (#_ShowControl handle)                 ))));--------------------------------------------------------------------------; methods for scrolling;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;scroll-bar-proc;;;;this is the hook function which is passed to _TrackControl.  The toolbox;; will call this function periodically as the control is clicked.;;;; It calls track-scroll-bar every time the ROM calls it.;; The default version of track-scroll-bat updates the;; scroll bar position according to the sb-scroll-size or;; sb-page-size and calls scroll-action.;; User's may shadow the default method if they need custom behavior.(defvar *scroll-bar-item* nil)(defpascal sb-scroll-bar-proc (:ptr sb-handle :word part)   "This procedure adjusts the control value, and calls scroll-action."   (let* ((item *scroll-bar-item*)             (outside-sb-setting                (+ (sb-min item)                   (round (* (- (sb-max item) (sb-min item)) (#_GetCtlValue sb-handle))                              $sb-max))))      (with-cursor (if (eq part #.$InThumb)                              *full-hand-cursor*                              *pointer-hand-cursor*)          (track-scroll-bar            item            (if (eq part #.$InThumb)               outside-sb-setting               (sb-setting item))            (case part               (#.$InUpButton :in-up-button)               (#.$InDownButton :in-down-button)               (#.$InPageUp :in-page-up)               (#.$InPageDown :in-page-down)               (#.$InThumb :in-thumb)               (t nil))))));; Unfortunately, the ROM is brain-damaged, so we have to do this ourselves.(defun sb-track-scroll-bar-thumb (item)  (let* ((old-setting (sb-setting item))         (min (sb-min item))         (max (sb-max item))         (horizontal? (eq (sb-direction item) :horizontal))         (position (view-position item))         (last-mouse (if (boundp '*current-event*)                       (rref *current-event* :eventRecord.where)                       #@(0 0)))         (size (view-size item))         (real-time-tracking (sb-track-thumb-p item))         width length old-mouse left right mouse setting)    (let ((view item))      (ccl::while view                       ; local-to-global        (setq last-mouse (subtract-points last-mouse (view-position view)))        (setq view (view-container view))))    (if horizontal?      (setq width (point-v size)            length (- (point-h size) width width width)            left (+ (round (* width 3) 2) (point-h position))            old-mouse (point-h last-mouse))      (setq width (point-h size)            length (- (point-v size) width width width)            left (+ (round (* width 3) 2) (point-v position))            old-mouse (point-v last-mouse)))    (setq right (+ left length))    (loop      (unless (mouse-down-p)        (unless (or real-time-tracking (not setting))          (track-scroll-bar item setting :in-thumb))        (return))      (setq mouse (view-mouse-position item))      (unless (eql mouse last-mouse)        (setq last-mouse mouse)        (setq mouse (if horizontal? (point-h mouse) (point-v mouse)))        (setq setting (min max                           (max min                                (+ old-setting                                   (round (* (- mouse old-mouse) (- max min))                                          (- right left))))))        (if real-time-tracking          (track-scroll-bar item setting :in-thumb)          (setf (sb-setting item) setting))))))(defmethod track-scroll-bar ((item scroll-bar-di) value part)   (setf (sb-setting item)            (case part               (:in-up-button (- value (sb-scroll-size item)))               (:in-down-button (+ value (sb-scroll-size item)))               (:in-page-up (- value (sb-page-size item)))               (:in-page-down (+ value (sb-page-size item)))               (t value)))   (scroll-action item part))(defmethod view-click-event-handler ((item scroll-bar-di) where)    (let* ((sb-handle (dialog-item-handle item))             (part (#_TestControl sb-handle where))             (*scroll-bar-item* item))      (cond ((eq part #.$InThumb)                 (sb-track-scroll-bar-thumb item))                ((memq part '(#.$InUpButton #.$InDownButton                                      #.$InPageUp #.$InPageDown))                  (#_TrackControl sb-handle where sb-scroll-bar-proc))))   (invalidate-view (view-window item)))  ;;sp 99, added to refresh the list fter scrolling;---------------------------------------------------------------------------(defmethod (setf sb-setting) :around (new-value (item scroll-bar-di))    (setq new-value (max (sb-min item) (min (sb-max item) new-value)))   (call-next-method)   (let ((handle (dialog-item-handle item)))      (when handle          (with-focused-view (view-container item)              (#_SetCtlValue                 handle                 (sb-mac-sb-setting                   new-value                   (sb-min item)                   (sb-max item)))))      (if (or (zerop (sb-max item))                 (and (sb-min item)                         (= (sb-max item) (sb-min item))))         (dialog-item-disable item)         (dialog-item-enable item))      (setf (slot-value item 'setting) new-value)))(defmethod (setf sb-min) :around (new-value (item scroll-bar-di))    (let ((unchanged (eq new-value (sb-min item))))      (call-next-method)      (unless unchanged                                   (setf (sb-setting item) (slot-value item 'setting)))))(defmethod (setf sb-max) :around (new-value (item scroll-bar-di))    (let ((unchanged (eq new-value (sb-max item))))      (call-next-method)      (unless unchanged                                   (setf (sb-setting item) (slot-value item 'setting)))))(defmethod sb-length ((item scroll-bar-di))   (let* ((size (view-size item)))      (if (eq (sb-direction item) :horizontal)         (point-h size)         (point-v size))))(defun (setf sb-length) (new-length item)   (let ((direction (sb-direction item)))       (set-view-size item (if (eq direction :horizontal)                                          (make-point new-length (sb-width item))                                          (make-point (sb-width item) new-length)))))(defmethod sb-width ((item scroll-bar-di))   (let ((size (view-size item)))      (if (eq (sb-direction item) :horizontal)         (point-v size)         (point-h size))))(defun (setf sb-width) (new-width item)   (let ((size (view-size item)))      (set-view-size item (if (eq (sb-direction item) :horizontal)                                          (make-point (point-h size) new-width)                                          (make-point new-width (point-v size))))))(defmethod sb-page-size ((self scroll-bar-di))   (or (slot-value self 'page-size)         (if (sb-scrollee self)            (if (eq (sb-direction self) :vertical)               (max (- (view-height (sb-scrollee self)) 10) 50)               (max (- (view-width (sb-scrollee self)) 10) 50))            50)));---------------------------------------------------------------------------#|(let* ((win (make-instance 'window                      :window-type :document                      :view-size #@(250 125)                      :view-position :centered                      :window-title "Scroll Bar Example"))          (text-di-1 (make-instance 'static-text-dialog-item                                :view-position #@(5 5)                                :dialog-item-text "0000"))          (text-di-2 (make-instance 'static-text-dialog-item                                :dialog-item-text "0000"                                :view-position #@(100 5)))          (h-scroll (make-instance 'scroll-bar-di                             :view-position #@(5 105)                             :direction :horizontal                             :length 200                             :min -150                             :max 150                             :page-size 10                             :scroll-size 2                             :scrollee text-di-1                             :track-thumb-p nil                             :dialog-item-action                             #'(lambda (item part)                                   (declare (ignore part))                                   (set-dialog-item-text                                     (sb-scrollee item)                                     (format nil "~A" (sb-setting item)))                                   (window-update-event-handler (view-window item)))))          (default-scroll (make-instance 'scroll-bar-di                                       :view-position #@(205 5)                                       :scrollee text-di-2                                       :dialog-item-action                                       #'(lambda (item part)                                             (declare (ignore part))                                             (set-dialog-item-text                                               (sb-scrollee item)                                               (format nil "~A" (sb-setting item)))                                             (window-update-event-handler (view-window item))))))   (add-subviews win text-di-1 text-di-2 h-scroll default-scroll))|#