(in-package :oou)(oou-provide :iconbar);*****************************************************************                                    ;; Copyright © 1996 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; an iconbar on a border of a window; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :layout-system                  :view-ce                  :consistent-cursor-dim                  :color-svm                  :3d-look-svm)(export '(          ));---------------------------------------------------------------------------(defclass iconbar (layout-mixin color-svm 3d-look-svm view)  ((icons :initform nil          :initarg :icons          :accessor icons)   (icon-distance :initform 2             :initarg :icon-distance             :accessor icon-distance)   (inner-margin :initform 3                 :initarg :inner-margin                 :accessor inner-margin)   (outer-margin :initform 2                 :initarg :outer-margin                 :accessor outer-margin)   (filler-layout-1 :initform 0                    :initarg :filler-layout-1                    :accessor filler-layout-1)   (filler-layout-2 :initform '(:hbox ())                    :initarg :filler-layout-2                    :accessor filler-layout-2)   (location :initform :right             :initarg :location             :accessor location)   (original-container-layout :initform nil                              :initarg :original-container-layout                              :accessor original-container-layout)   ))(defmethod icon-max-width ((view iconbar) &aux (maxwidth 0))  (dolist (icon (icons view))    (when (ccl::%i> (view-width icon) maxwidth)      (setf maxwidth (view-width icon))))  (if (ccl::%i> maxwidth 0)    maxwidth    22))(defmethod icon-max-height ((view iconbar) &aux (maxheight 0))  (dolist (icon (icons view))    (when (ccl::%i> (view-height icon) maxheight)      (setf maxheight (view-height icon))))  (if (ccl::%i> maxheight 0)    maxheight    22))(defmethod icon-total-height ((view iconbar) &aux (total 0))  (dolist (icon (icons view))    (setf total (ccl::%i+ (view-height icon) total)))  total)(defmethod icon-total-width ((view iconbar) &aux (total 0))  (dolist (icon (icons view))    (setf total (ccl::%i+ (view-width icon) total)))  total)(defmethod iconbar-width ((view iconbar))  (with-slots (location icon-distance icons 3d-effect inner-margin) view    (let ((contents-width            (case location             (:top (if icons                     (+ (* (1- (length icons)) icon-distance)                         (icon-total-width view)                         (* 2 inner-margin))                     100))             (:bottom (if icons                        (+ (* (1- (length icons)) icon-distance)                            (icon-total-width view)                            (* 2 inner-margin))                        100))             (:left (+ (icon-max-width view) (* 2 inner-margin)))             (:right (+ (icon-max-width view) (* 2 inner-margin))))))      (if 3d-effect        (+ contents-width 4)        contents-width))))(defmethod iconbar-height ((view iconbar))  (with-slots (location icon-distance icons 3d-effect inner-margin) view    (let ((contents-height            (case location             (:top (+ (icon-max-height view) (* 2 inner-margin)))             (:bottom (+ (icon-max-height view) (* 2 inner-margin)))             (:left (if icons                      (+ (* (1- (length icons)) icon-distance)                          (icon-total-height view)                         (* 2 inner-margin))                      100))             (:right (if icons                        (+ (* (1- (length icons)) icon-distance)                           (icon-total-height view)                          (* 2 inner-margin))                       100)))))      (if 3d-effect        (+ contents-height 4)        contents-height))))(defmethod required-width ((view iconbar))  (+ (* (outer-margin view) 2)     (iconbar-width view)))(defmethod required-height ((view iconbar))  (+ (* (outer-margin view) 2)     (iconbar-height view)))(defmethod scale-view-size ((view iconbar))  (set-view-size view (iconbar-width view) (iconbar-height view)))(defmethod reset-layout ((view iconbar))  (setf (layout view)        (case (location view)          (:top (horizontal-layout view))          (:bottom (horizontal-layout view))          (:left (vertical-layout view))          (:right (vertical-layout view)))))(defmethod vertical-layout ((view iconbar))  (with-slots (icons icon-distance 3d-effect inner-margin) view    `(:hbox (:width ,(view-width view) :height ,(view-height view))            ,(if 3d-effect 2 0)            ,inner-margin            (:vbox ()                   ,(if 3d-effect 2 0)                   ,inner-margin                   ,@(mapcan #'(lambda (icon)                                 (list (:hbox (:height (view-height icon))                                               icon)                                       icon-distance))                             icons)                   ,inner-margin                   ,(if 3d-effect 2 0))            ,inner-margin            ,(if 3d-effect 2 0))))(defmethod horizontal-layout ((view iconbar))  (with-slots (icons icon-distance 3d-effect inner-margin) view    `(:vbox (:width ,(view-width view) :height ,(view-height view))            ,(if 3d-effect 2 0)            ,inner-margin            (:hbox ()                   ,(if 3d-effect 2 0)                   ,inner-margin                   ,@(mapcan #'(lambda (icon)                                 (list (:hbox (:width (view-width icon))                                               icon)                                       icon-distance))                             icons)                   ,inner-margin                   ,(if 3d-effect 2 0))            ,inner-margin            ,(if 3d-effect 2 0))))(defmethod install-view-in-window :after ((view iconbar) w)  (declare (ignore w))   (dolist (icon (icons view))    (set-view-container icon view))  (scale-view-size view)  (reset-layout view));--------------------------------------------------------------------------------;for window with a iconbar (defclass iconbar-mixin (layout-mixin)   ((iconbars :initform nil              :initarg :iconbars              :accessor iconbars))  (:default-initargs     :layout '(:hbox ())))(defmethod initialize-instance ((win iconbar-mixin) &rest initargs &key (window-show t))  (declare (dynamic-extent initargs))  (apply #'call-next-method win :window-show nil initargs)  (dolist (iconbar (iconbars win))    (insert-iconbar win iconbar))  (when window-show    (window-show win)))(defmethod expand-layout ((win iconbar-mixin) (iconbar iconbar))  (with-slots (outer-margin filler-layout-1 filler-layout-2) iconbar    (setf (layout win)          (case (location iconbar)            (:top `(:vbox ()                          ,outer-margin                          (:hbox (:height ,(view-height iconbar))                                  ,filler-layout-1                                  ,outer-margin                                 ,iconbar                                 ,outer-margin                                 ,filler-layout-2)                          ,outer-margin                          ,(layout win)))            (:bottom `(:vbox ()                             ,(layout win)                             ,outer-margin                             (:hbox (:height ,(view-height iconbar))                                     ,filler-layout-1                                    ,outer-margin                                    ,iconbar                                    ,outer-margin                                    ,filler-layout-2                                    )                             ,outer-margin))            (:left `(:hbox ()                           ,outer-margin                           (:vbox (:width ,(view-width iconbar))                                   ,filler-layout-1                                   ,outer-margin                                  ,iconbar                                  ,outer-margin                                  ,filler-layout-2)                           ,outer-margin                           ,(layout win)))            (:right `(:hbox ()                            ,(layout win)                            ,outer-margin                            (:vbox (:width ,(view-width iconbar))                                    ,filler-layout-1                                   ,outer-margin                                   ,iconbar                                   ,outer-margin                                   ,filler-layout-2)                            ,outer-margin))))))(defmethod insert-iconbar ((win iconbar-mixin) iconbar)  ;(set-view-position iconbar #@(-1000 -1000))  (set-view-container iconbar win)   (setf (original-container-layout iconbar) (layout win))  (expand-layout win iconbar)  (pushnew iconbar (iconbars win)))(defmethod remove-last-inserted-iconbar ((win iconbar-mixin))  (setf (layout win)        (original-container-layout (car (iconbars win))))  (pop (iconbars win))) ;------------------------------------------------------------------------------#|(oou-dependencies :3d-tool-select-di)(defclass win-with-iconbars (iconbar-mixin window)  ())(defmethod insert-another-iconbar ((win win-with-iconbars))  (insert-iconbar win (make-instance 'iconbar                        :location :bottom                        :3d-effect nil                        :filler-layout-1 '(:hbox ())                        :filler-layout-2 '(:hbox ())                        :icon-distance 1                        :inner-margin 1                        :outer-margin 15                        :icons                        (list (make-instance '3d-tool-select-di                                :rsrc-id 183)                              (make-instance '3d-tool-select-di                                :rsrc-id 184)                              (make-instance '3d-tool-select-di                                :rsrc-id 185)                              (make-instance '3d-tool-select-di                                :rsrc-id 186)                              (make-instance '3d-tool-select-di                                :rsrc-id 187)))))(make-instance 'win-with-iconbars  :view-size #@(400 400)  :view-position :centered  :window-title "iconbar demo"  :back-color *tool-back-color*  :layout  ;layout WITHOUT the iconbars  (:hbox ()         20          (:vbox ()                20                (:fbox () (make-instance 'sequence-dialog-item))                20)         0)  :iconbars  (list    (make-instance 'iconbar     :location :right     :3d-effect *3d-down-effect*     :filler-layout-1 15     :filler-layout-2 '(:hbox ())     :icon-distance 1     :inner-margin 1     :outer-margin 5     :icons     (list (make-instance '3d-icon-di             :rsrc-id 183             :dialog-item-action #'(lambda (icon)                                     (insert-another-iconbar (view-window icon))))           (make-instance '3d-icon-di             :rsrc-id 184             :dialog-item-action #'(lambda (icon)                                     (remove-last-inserted-iconbar (view-window icon))))           (make-instance '3d-icon-di             :rsrc-id 185 )           (make-instance '3d-icon-di             :rsrc-id 186)           (make-instance '3d-icon-di             :rsrc-id 187)))   ))|#                   