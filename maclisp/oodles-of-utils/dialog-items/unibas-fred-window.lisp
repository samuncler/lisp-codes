(in-package :oou)(oou-provide :unibas-fred-window);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;;  a slightly changed fred-window; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :special-events-dim                                :autosave-fred-mixin                                :text-mode-fred-mixin                                :constant-styles-fred-mixin                                :drag-and-drop-fred-mixin                                :wrap-fred-mixin                                ) (export '(unibas-fred-window                 ));-----------------------------------------------------------------(defclass unibas-fred-window (autosave-fred-mixin text-mode-fred-mixin constant-styles-fred-mixin                                                                                                drag-and-drop-fred-mixin wrap-fred-mixin fred-window                                                                                                special-events-dim)    ()    (:default-initargs :comtab (make-comtab)))(defmethod view-cursor :around ((self unibas-fred-window) where)    (rlet ((scroller :ControlRecord))        (#_FindControl where (wptr self) scroller)        (%setf-macptr scroller (%get-ptr scroller))        (if (%null-ptr-p scroller)            (call-next-method)            (let ((scroller-part (#_TestControl scroller where)))                (cond ((or (= scroller-part  20)  ;in up arrow                                   (= scroller-part 21) ; in down arrow                                   (= scroller-part 22) ; in page up                                   (= scroller-part 23)); in page down                            *pointer-hand-cursor*)                          ((= scroller-part 129) ; in thumb                            *full-hand-cursor*)                          (t (call-next-method)))))))(defmethod view-click-event-handler :around ((self unibas-fred-window) where)      (rlet ((scroller :ControlRecord))        (#_FindControl where (wptr self) scroller)        (%setf-macptr scroller (%get-ptr scroller))	(if (%null-ptr-p scroller)            (call-next-method)            (let ((scroller-part (#_TestControl scroller where)))                (with-cursor (if (or (= scroller-part  20)  ;in up arrow                                                    (= scroller-part 21) ; in down arrow                                                    (= scroller-part 22) ; in page up                                                    (= scroller-part 23)); in page down                                            *pointer-hand-cursor*                                            *full-hand-cursor*)                          (call-next-method))))))(defmethod do-hscroll ((self unibas-fred-window) part)    (when part         (set-fred-hscroll self                                        (max 0                                                  (min (if (eq part :in-thumb)                                                               (sb-setting (hscroller self))                                                               (+ (fred-hscroll self)                                                                     (case part                                                                         (:in-up-button -8)                                                                         (:in-down-button  8)                                                                         (:in-page-up (- (ash (view-width self) -1)))                                                                         (:in-page-down (ash (view-width self) -1)))))                                                            (- (ccl::frec-hmax (frec self)) 20))))         (fred-update self)))(defmethod do-vscroll ((self unibas-fred-window) part)   (when part       (let* ((mark (fred-display-start-mark self))                 (buffer (fred-buffer self))                 (new-pos (if (eq part :in-thumb)                                   (buffer-line-start buffer (sb-setting (vscroller self)))                                   (buffer-line-start buffer mark                                     (case part                                        (:in-up-button -1)                                        (:in-down-button 1)                                        (:in-page-up (- 2 (ccl::frec-screen-lines (frec self))))                                        (:in-page-down (- (ccl::frec-screen-lines (frec self)) 2)))))))          (unless (= new-pos (buffer-position mark))             (set-mark mark new-pos)             (fred-update self)))))#|(defclass unibas-fred-application (application)   ())(defmethod open-documents-handler ((a unibas-fred-application) theAppleEvent reply handlerRefcon)   (declare (ignore reply handlerRefcon) (ccl::resident))   (with-aedescs (doclist)       (rlet ((items :signed-long)                 (aekeyword :ostype)                 (actual-type :ostype)                 (my-fsspec :fsspec)                 (actual-size :signed-long))          (ae-error-str "trying to get the doclist in odoc"             (#_AEGetParamDesc theAppleEvent #$keyDirectObject #$typeAEList doclist))          (check-required-params "unexpected parameters in odoc" theAppleEvent)          (ae-error-str "trying to count the items in odoc"              (#_AECountItems doclist items))          (dotimes (i (%get-signed-long items))             (ae-error-str "trying to get an item in odoc"                (#_AEGetNthPtr doclist (+ i 1) #$typeFSS aekeyword actual-type my-fsspec                   (record-length :fsspec) actual-size))             (let* ((path (%path-from-fsspec my-fsspec))                       (type (mac-file-type path)))                 (case type                    (:fasl (eval-enqueue (list 'load path :verbose t)))                   (:text (let ((window (make-instance 'unibas-fred-window :filename path)))                                 (unless ccl::*foreground*                                     (setf (slot-value window 'window-active-p) t)   ; funky work-around                                     (view-deactivate-event-handler window))))))))))(setf *application* (make-instance 'unibas-fred-application));(set-menu-item-action-function (find-menu-item (find-menu "File") "New");	                                                #'(lambda ();                                                                (make-instance 'unibas-fred-window;                                                                     :view-size #@(520 770);                                                                     :view-position :centered)));(setf ccl::*default-editor-class*  'fred-window)(setf ccl::*default-editor-class*  'unibas-fred-window)(setf *listener-window-position* #@(746 748))(setf *listener-window-size* #@(315 119)); (make-instance 'unibas-fred-window)|#