(in-package :oou)(oou-provide :trash-di);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; Dialog item with a behaviour analogous the Mac trashcan; ;; Changes (worth to be mentioned):; ------------------------------; none  ;;*****************************************************************;*****************************************************************(oou-dependencies :picture-dim                              :highlight                              :offscreen                              :unibas-cursors                              :movables-container-svm                              :PICT-archive                              :quickdraw-u                              )(export '());--------------------------------------------------------------------------(defclass trash-items-window (movables-container-svm window)   ((trash :initform nil                :initarg :trash                :accessor trash))   (:default-initargs     :window-title "Items in Trash"))(defmethod window-close-event-handler ((self trash-items-window))    (window-hide self)   (with-slots (trash) self       (when trash           (view-implode self                                    (view-to-global trash #@(0 0))                                   (view-to-global trash (view-size trash))                                   :delay 0.005)           (window-select (view-window trash))           (select-item trash :draw-now-p t))))(defmethod copy ((self trash-items-window))   (let* ((all-picts (subviews self 'picture-dim))             (pict (when all-picts                          (car (selected-items (car all-picts))))))      (if pict         (copy pict)         (flash self))));--------------------------------------------------------------------------(defclass trash-menu-item (menu-item)   ((trash :initarg :trash               :accessor trash)))(defmethod menu-item-action ((self trash-menu-item))   (funcall (menu-item-action-function self) self));-------------------------------------------------------------------------(defclass trash-di (selectable-dim drop-target-dim picture-dim simple-view)   ((items-in-trash :initform nil                               :initarg :items-in-trash                               :accessor items-in-trash)     (items-window :initform nil                              :accessor items-window)     (trash-pop-up-menu :initform nil                                      :accessor trash-pop-up-menu)     (current-mask-id :initform 132                                  :accessor current-mask-id)     (hilited :initform nil                  :accessor hilited))   (:default-initargs     :PICT-scaling :adjust-view-size     :view-position #@(0 0)     :view-nick-name :trash     :detach-p nil     :rsrc-file "oou:Resources Stuff"     :rsrc-id 131))(defmethod initialize-instance :after ((self trash-di) &rest initargs)   (declare (ignore initargs))   (setf (trash-pop-up-menu self)            (make-instance 'real-pop-up-menu                                :menu-items                                 (list (make-instance 'trash-menu-item                                            :menu-item-title "Show Contents"                                            :trash self                                            :menu-item-action                                             #'(lambda (menu-item)                                                  (show-items-in-trash (trash menu-item))))                                        (make-instance 'trash-menu-item                                            :menu-item-title "Empty Trash"                                            :trash self                                            :menu-item-action                                             #'(lambda (menu-item)                                                  (empty-trash (trash menu-item))))))))(defmethod dropped ((self trash-di) (expanded-pict expanded-pict) offset where)   (let ((shrinked-pict (shrinked-pict expanded-pict)))      (show-shrinked-PICT (view-named :pict-archive-view (archive (view-window expanded-pict)))                                         expanded-pict #@(0 0)                                         :make-visible nil                                         :implode nil)      (dropped self shrinked-pict offset where)))(defmethod dropped ((self trash-di) (dropped-view shrinked-pict) offset where)    (declare (ignore offset where))   (setf (changed-p (view-window dropped-view)) t)   (setf (drop-targets dropped-view) (list (view-nick-name (view-container dropped-view))))   (pushnew dropped-view (items-in-trash self))   (set-view-container  dropped-view nil)   (put-item-in-trash-window self dropped-view)   (with-focused-view self       (invalidate-view self)       (hilite-view self nil)))(defmethod put-item-in-trash-window ((self trash-di) item)   (with-slots (items-in-trash items-window) self       (unless items-window          (setf items-window (make-instance 'trash-items-window                                               :trash self                                               :window-show nil)))       (set-view-scroll-position items-window 0 0)       (let ((max-h 120)               (max-v 10))          (set-view-position item (next-free-position items-window :wrapped nil))          (set-view-container item items-window)          (deselect-item  item)          (setf max-h (max (view-right item) max-h))          (setf max-v (max (view-bottom item) max-v))          (set-view-size items-window (+ max-h 50) (+ max-v 50))          (view-draw-contents items-window))))(defmethod show-items-in-trash ((self trash-di))   (with-slots (items-in-trash items-window) self       (unless items-window          (setf items-window (make-instance 'trash-items-window                                               :view-size #@(170 60)                                               :trash self                                               :window-show nil)))       (let ((global-trash-position (view-to-global self #@(0 0))))          (set-view-position items-window                                          (min (max 0                                                           (- (point-h global-trash-position)                                                              (view-width items-window)                                                               20))                                                 (- *screen-width*                                                     (view-width items-window)                                                     10))                                         (min (max 0                                                          (- (+ (point-v global-trash-position)                                                                  (round (view-height self) 2))                                                              (round (view-height items-window) 2)))                                                 (- *screen-height*                                                     (view-height items-window)                                                     10)))          (view-explode self (view-top-left items-window) (view-bottom-right items-window) :delay 0.00))        (window-select items-window)))(defmethod empty-trash ((self trash-di))   (with-slots (items-in-trash items-window) self       (if items-window          (window-close items-window)          (mapcar #'(lambda (picture-dim)                              (when (slot-boundp picture-dim 'rsrc-handle)                                  (with-slots (rsrc-handle) picture-dim                                     (release-handle rsrc-handle)                                     (slot-makunbound picture-dim 'rsrc-handle))))                        items-in-trash))       (setf items-window nil)       (setf items-in-trash nil)       (hilite-view self nil)))(defmethod hilite-view ((self trash-di) hilite-flag)    (with-focused-view (view-container self)       (let ((pict-id (if (items-in-trash self)                               133                               131))               (old-hilite (hilited self)))          (if hilite-flag             (setf (hilited self) t)             (setf (hilited self) nil))          (unless (and (slot-boundp self 'rsrc-id)                              (eq (slot-value self 'rsrc-id) pict-id))             (when (slot-boundp self 'rsrc-handle)                 (release-handle (slot-value self 'rsrc-handle))                 (slot-makunbound self 'rsrc-handle))             (set-view-pict self  :PICT-id pict-id))          (unless (eq old-hilite hilite-flag)             (invalidate-view self t)             (view-draw-contents self)))))(defmethod draw-graphic ((self trash-di) PICT-handle rect)   (declare (ignore rect))   (rlet ((view-rect :rect                               :topleft (view-top-left self)                               :bottomright (view-bottom-right self))             (local-view-rect :rect                                         :topleft #@(0 0)                                         :bottomright (view-size self)))      (let ((dest-bitmap (make-bitmap local-view-rect))              (black-pict (get-resource "PICT" (if (items-in-trash self) 134 132))))         (with-focused-view (view-window self)             (multiple-value-bind (mask1 gworld1)                                                (make-pixmap ((view-width self)(view-height self))                                                   (Draw-PICT black-pict local-view-rect))                 (copy-bits mask1 dest-bitmap                                   local-view-rect                                   local-view-rect                                   :Patcopy)                 (release-resource black-pict)                 (#_DisposeGWorld gworld1))             (multiple-value-bind (mask2 gworld2)                                               (make-pixmap ((view-width self)(view-height self))                                                   (#_FillRect local-view-rect *gray-pattern*))                 (copy-bits mask2 dest-bitmap                                   local-view-rect                                   local-view-rect                                   (if (hilited self)                                      :NotPatOr                                      :PatOr))                 (#_DisposeGWorld gworld2))             (multiple-value-bind (original gworld3)                                               (make-pixmap ((view-width self)(view-height self))                                                   (Draw-PICT PICT-handle local-view-rect))                 (copy-bits original dest-bitmap                                   local-view-rect                                   local-view-rect                                   (if (hilited self)                                      :PatXOr                                      :notPatXOr))                 (#_DisposeGWorld gworld3))             (view-erase self)             (copy-bits dest-bitmap (rref (wptr self) :WindowRecord.portbits)                               local-view-rect                               view-rect                               :PatCopy)             (dispose-record dest-bitmap)))))(defmethod view-click-event-handler  :around ((self trash-di) where)    (declare (ignore where))   (if (selected-p self)      (menu-select (trash-pop-up-menu self) self)      (call-next-method)))(defmethod view-cursor ((self trash-di) where)   (declare (ignore where))   (if (selected-p self)      *full-hand-cursor*      *pointer-hand-cursor*))(defmethod view-deactivate-event-handler :after ((self trash-di))   (deselect-item self :draw-now-p nil)   (hilite-view self nil))#|(defclass trash-window (window)   ()   (:default-initargs     :window-title "Trash"     :view-position (make-point (- *screen-width* 104)                                                 (- *screen-height* 68))     :view-size #@(40 50)     :window-type :single-edge-box     :window-do-first-click t     :view-subviews (list (make-instance 'trash-di                                           :view-position #@(8 5)))))(defmethod view-draw-contents :after ((self trash-window))    (with-focused-view *Wmgr-view*       (with-pen-mode (:patCopy *Wmgr-view*)           (with-pen-pattern (*gray-pattern* *Wmgr-view*)               (frame-rect *Wmgr-view*                                    (subtract-points (view-top-left self) #@(1 1))                                   (add-points (view-bottom-right self) #@(1 1)))))))(defmethod initialize-instance :after ((self trash-window) &rest initargs)   (declare (ignore initargs))   (rset (wptr self) :WindowRecord.bkpat *gray-pattern*))(setf trash (make-instance 'trash-window))|#