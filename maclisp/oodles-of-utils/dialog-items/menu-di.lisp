(in-package :oou)(oou-provide :menu-di);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a kind of menu. a special sequence-dialog-item with a vertical scrollbar ; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :scrollable-sequence-di                              :unibas-cursors                              :color-svm)(export '(menu-di item-print-function menu-item-action                adjust-height adjust-width adjust-size));--------------------------------------------------------------------------(defclass embedded-visible-menu-di (embedded-sequence-di)   ((last-cell-under-mouse :initform nil                                           :accessor last-cell-under-mouse))   (:default-initargs     :view-font '("GoMan Helvetica" 12 :plain)     :dialog-item-action      #'(lambda (item)           (when (and (car (selected-cells item))                             (view-container item)                             (menu-item-action (view-container item)))               (funcall (if (and (double-click-p)                                         (menu-item-double-click-action (view-container item)))                               (menu-item-double-click-action (view-container item))                               (menu-item-action (view-container item)))                             (view-container item)                             (cell-contents item (car (selected-cells item))))))     ))  (defmethod view-mouse-leave-event-handler ((self embedded-visible-menu-di))    (when (wptr self)       (dolist (cell (selected-cells self))          (cell-deselect self cell))       (setf (last-cell-under-mouse self) nil)))(defmethod view-cursor ((self embedded-visible-menu-di) point)   (let ((where (convert-coordinates point self (view-container self))))      (with-slots (last-cell-under-mouse) self          (let ((cell-under-mouse (point-to-cell self where)))             (unless (eq cell-under-mouse                               last-cell-under-mouse)                (when last-cell-under-mouse                    (cell-deselect self last-cell-under-mouse))                (when cell-under-mouse                    (cell-select self cell-under-mouse))                (setf last-cell-under-mouse cell-under-mouse))))      (cond ((point-to-cell self where)                 *pointer-hand-cursor*)                (t                  *arrow-cursor*))));------------------------------------------------------------------------(defclass menu-di (scrollable-sequence-di)   ((items :initform nil                :accessor items                :initarg :items)     (item-print-function :initform #'princ                                       :accessor item-print-function                                       :initarg :item-print-function)     (menu-item-action :initform nil                                    :accessor menu-item-action                                    :initarg :menu-item-action)     (menu-item-double-click-action :initform nil                                                         :accessor menu-item-double-click-action                                                         :initarg :menu-item-double-click-action))   (:default-initargs      :view-class 'embedded-visible-menu-di     :init-function      #'(lambda (view real-view h-scroller v-scroller)           (declare (ignore h-scroller))           (setf (table-print-function real-view) (item-print-function view))           (setf (sb-max v-scroller) (length (items view)))           (setf (sb-scroll-size v-scroller) 1)           (set-table-sequence real-view (items view)))))(defmethod (setf items) :after (items (self menu-di))    (set-table-sequence (view-named :real-view self) items))(defmethod adjust-height ((self menu-di))   (let* ((table (view-named :real-view self))             (item-height (point-v (cell-size table)))             (new-v (+ (* item-height                                  (length (table-sequence table)))                             2)))      (set-view-size self                               (view-width self)                               (min (* 10 item-height) new-v))      (set-cell-size table                               (point-h (view-size table))                               item-height)      (scroll-to-cell table 0 0)      (view-draw-contents self)))(defmethod adjust-width ((self menu-di))   (let* ((table (view-named :real-view self))             (item-height (point-v (cell-size table)))             (output-stream (make-string-output-stream))             (max 0)             (new-h (+ (dotimes (cell (point-v (table-dimensions table)) max)                                (funcall (table-print-function table)                                               (cell-contents table 0 cell)                                               output-stream)                                (setf max (max (string-width                                                          (get-output-stream-string output-stream)                                                          (or (cell-font table 0 cell)                                                                (view-font table)))                                                         max)))                             23)))      (set-view-size self                               (max (min new-h 500) 200)                               (view-height self))      (set-cell-size table                               (view-width table)                              item-height)      (view-draw-contents self)))(defmethod adjust-size ((self menu-di))   (adjust-width self)   (adjust-height self));-------------------------------------------------------------------------#|(make-instance 'unibas-paned-window    :window-title "All Windows"    :view-size #@(400 130)    :view-position :centered    :subview-description    (list (list (setf *mm* (make-instance 'menu-di                                            :view-size #@(180 100)                                            :view-position #@(5 5)                                            :items (windows)                                            :item-print-function                                             #'(lambda (win stream)                                                  (princ (window-title win) stream))                                            :menu-item-action                                             #'(lambda (menu-di selected-item)                                                  (declare (ignore menu-di))                                                  (princ (window-title selected-item)))                                            :menu-item-double-click-action                                            #'(lambda (menu-di selected-item)                                                  (declare (ignore menu-di))                                                  (print "double click"))))                     :adjust-h-v                    :stick-on-topleft)))(adjust-width *mm*)(adjust-height *mm*)|#