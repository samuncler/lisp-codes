(in-package :oou)(oou-provide :search-di);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a dialog-item analogous to the standard search window. ; ;; Changes (worth to be mentioned):; ------------------------------;; 5/96 Dieter : Changed to layout-system ;;*****************************************************************;*****************************************************************(oou-dependencies :QuickDraw-u                  :unibas-macros                  :unibas-button-di                  :layout-system                  )(export '(          ));---------------------------------------------------------------------------(defclass extended-editable-text-dialog-item (drag-and-drop-fred-mixin fred-receive-finder-drags-mixin editable-text-dialog-item)  ()  (:default-initargs     :copy-styles-p nil    :autoscroll-area 15))(defmethod hide-drag-rect-p ((view extended-editable-text-dialog-item) (draggable-view draggable-dim) global-position)  (declare (ignore global-position))  (let ((part (call-next-method)))    (or (eq part :left)        (eq part :fast-left)        (eq part :right)        (eq part :fast-right))))(defmethod do-vscroll ((view extended-editable-text-dialog-item) part)  (declare (ignore part))  nil);----------------------------------------------------------------------------(defclass search-di (color-svm layout-mixin view)  ((search-start-position :initform 0                          :accessor search-start-position)   (button-size :initform #@(87 18)                :accessor button-size                :initarg :button-size))  (:default-initargs     :back-color *tool-back-color* ))(defmethod initialize-instance :after ((view search-di) &rest initargs)  (declare (ignore initargs))  (let ((button-width (point-h (button-size view)))        (button-height (point-v (button-size view))))    (let ((static-text           (make-instance 'static-text-dialog-item             :part-color-list `(:body ,*tool-back-color*)             :dialog-item-text "Search For"             :view-size (make-point button-width 16)             :view-nick-name :static-text))          (editable-text           (make-instance 'extended-editable-text-dialog-item             :view-nick-name :editable-text))          (search-button (make-instance 'unibas-default-button-dialog-item                           :dialog-item-text "Search"                           :view-size (button-size view)                           :view-nick-name :search-button                            :dialog-item-action 'button-search-forward))          (reverse-button (make-instance 'unibas-button-dialog-item                            :dialog-item-text "Reverse"                            :view-size (button-size view)                            :view-nick-name :reverse-button                            :dialog-item-action 'button-search-backward))          (from-top-button (make-instance 'unibas-button-dialog-item                             :dialog-item-text "From Top"                             :view-nick-name :from-top-button                             :view-size (button-size view)                             :dialog-item-action 'button-from-top))          )      (setf (layout view)            (:vbox ()                   5                   (:hbox (:height 22)                          9                          (:vbox (:width button-width)                                 3                                 static-text                                 3)                          10                          (:fbox () editable-text)                          5)                    5                   (:hbox (:height (+ button-height 8))                          5                          (:vbox (:width (+ button-width 8)) search-button)                          (:filler)                          (:vbox (:width button-width)                                 4                                 reverse-button                                 4)                          (:filler)                          (:vbox (:width button-width)                                 4                                 from-top-button                                 4)                          5                          )                   5)))))(defmethod view-draw-contents :after ((view search-di))  (view-frame view))(defmethod fred-item-searched-in ((view search-di))  (main-fred-item (view-window view)));------------------------------------------------------------------------------------------------           (defun button-search-forward (button)  (let* ((search-di (view-container button))         (search-string (dialog-item-text (view-named :editable-text search-di)))         (search-string-length (length search-string))         (fred-item (fred-item-searched-in search-di))         (buffer (fred-buffer fred-item))         (next-pos (buffer-string-pos buffer                                      search-string                                       :start (multiple-value-bind (start-selection end-selection)                                                                   (selection-range fred-item)                                               (if (= start-selection end-selection)                                                 (buffer-position buffer)                                                 (search-start-position search-di)))                                      :end t)))    (cond ((and next-pos                (> search-string-length 0))           (setf (search-start-position search-di) (min (1+ next-pos) (buffer-size buffer)))           (set-current-key-handler (view-window button) fred-item)           (set-selection-range fred-item next-pos (+ next-pos search-string-length))           (when (= (fred-vpos fred-item next-pos) -1)             (scroll-to-position fred-item next-pos))           (when (or (> (fred-hpos fred-item)                        (view-width fred-item))                     (< (fred-hpos fred-item) 0))             (set-fred-hscroll fred-item (max (- (+ (fred-hscroll fred-item) (fred-hpos fred-item))                                                   50)                                                0))             (setf (scroll-direction fred-item) :in-thumb))           (fred-update fred-item))          (t (ed-beep)))))(defun button-search-backward (button)  (let* ((search-di (view-container button))         (search-string (dialog-item-text (view-named :editable-text search-di)))         (search-string-length (length search-string))         (fred-item (fred-item-searched-in search-di))         (buffer (fred-buffer fred-item))         (next-pos (buffer-string-pos buffer                                      search-string                                       :end (multiple-value-bind (start-selection end-selection)                                                                 (selection-range fred-item)                                             (if (= start-selection end-selection)                                               (buffer-position buffer)                                               (search-start-position search-di)))                                      :start 0                                      :from-end t)))    (cond ((and next-pos                (> search-string-length 0))           (setf (search-start-position search-di) (max (1- (+ next-pos search-string-length)) 0))           (set-current-key-handler (view-window button) fred-item)           (set-selection-range fred-item next-pos (+ next-pos search-string-length))           (when (= (fred-vpos fred-item next-pos) -1)             (scroll-to-position fred-item next-pos))           (when (or (> (fred-hpos fred-item)                        (view-width fred-item))                     (< (fred-hpos fred-item) 0))             (set-fred-hscroll fred-item (max (- (+ (fred-hscroll fred-item) (fred-hpos fred-item))                                                   50)                                                0))             (setf (scroll-direction fred-item) :in-thumb))           (fred-update fred-item))          (t (ed-beep)))))(defun button-from-top (button)  (let ((fred-item (fred-item-searched-in (view-container button))))    (setf (search-start-position (view-container button)) 0)    (set-current-key-handler (view-window button) fred-item)    (collapse-selection fred-item nil)    (set-mark (fred-buffer fred-item) 0)    (scroll-to-position fred-item 0)    (set-fred-hscroll fred-item 0)    (setf (scroll-direction fred-item) :in-thumb)    (button-search-forward button)))#|(defclass fred-with-search-di (layout-mixin fred-window-mixin window)  ())(defmethod initialize-instance ((w fred-with-search-di) &rest initargs &key view-font filename)  (declare (dynamic-extent initargs))  (apply #'call-next-method w :window-show nil initargs)  (let ((scrolling-fred-view (make-instance (scrolling-fred-view-class w)                               :view-font view-font                               :filename filename)))    (setf (main-fred-item w) (fred-item scrolling-fred-view))    (setf (layout w)          (:vbox ()                 (:fbox (:height 63) (make-instance 'search-di))                 (:fbox () scrolling-fred-view)                 ))))(make-instance 'fred-with-search-di)|#                        