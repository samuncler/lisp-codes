(in-package :oou)(oou-provide :extended-fred-window);*****************************************************************                                    ;; Copyright © 1995-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; some modifications of the fred-window; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(export '())(in-package :oou)(oou-dependencies :with-running-watch                  :autosave-fred-mixin                  :drag-and-drop-fred-mixin                  :fred-finder-mixin                  :go-back-fred-mixin                  :special-events-dim)(require :mouse-copy);-----------------------------------------------------------------(defclass extended-window-fred-item (autosave-fred-mixin drag-and-drop-fred-mixin fred-receive-finder-drags-mixin update-when-changed-mixin go-back-fred-mixin ccl::window-fred-item)  ()) (setf ccl::*fred-track-thumb-p* t)(defclass extended-fred-window (special-events-dim fred-window drag-&-drop-window-mixin)  ()  (:default-initargs    :fred-item-class 'extended-window-fred-item))(defmethod view-cursor ((self ccl::fred-h-scroll-bar) point)   (if (= (#_TestControl :ptr (dialog-item-handle self)               :long (convert-coordinates point self (view-container self))               :word)            129)      *full-hand-cursor*      *pointer-hand-cursor*))(defmethod view-cursor ((self ccl::fred-v-scroll-bar) point)   (if (= (#_TestControl :ptr (dialog-item-handle self)               :long (convert-coordinates point self (view-container self))               :word)            129)      *full-hand-cursor*      *pointer-hand-cursor*))(let ((*warn-if-redefine* nil)      (*warn-if-redefine-kernel* nil))(defmethod view-cursor ((view ccl::bar-dragger) where)  (declare (ignore where))  *full-hand-cursor*)(defmethod view-cursor ((view ccl::poof-button) where)  (declare (ignore where))  *full-hand-cursor*)) (setf *default-editor-class* 'extended-fred-window)(defmethod ed-edit-methods ((w fred-mixin) &optional pos)  (let* ((sexp (ignore-errors (ed-current-sexp w pos)))         (class (when (and sexp                           (symbolp sexp))                  (find-class sexp nil))))    (if class      (with-running-watch        (let ((methods (specializer-direct-methods class))              win)          (setq methods (sort methods #'ccl::edit-definition-spec-lessp))          (setq win                (select-item-from-list                 methods                 :window-title (format nil "Methods on ~A" class)                 :table-print-function #'ccl::edit-callers-print                           :modeless t                 :default-button-text "Find It"                 :action-function                 #'(lambda (list)                     (if (option-key-p) (window-close win))                     (ccl::edit-definition-spec (car list)))))))      (progn (ed-beep) (set-mini-buffer w "~A is not a class" sexp)))))(def-fred-command  (:control #\m) 'ed-edit-methods)(def-fred-command  (:control #\.) 'ed-edit-definition)(def-fred-command  (:control #\i) 'ed-inspect-current-sexp);------------------------------------------------------------------------------------------------#|; this is not very handy. Use CTRL-m instead(oou-dependencies :real-pop-up-menu)(defclass method-menu-item (menu-item)  ((method-object :initarg :method-object                  :accessor method-object)))(defmethod menu-item-action ((item method-menu-item))  (ccl::edit-definition-spec (method-object item)))(defmethod ed-edit-methods-in-pop-up ((w fred-mixin) &optional pos)  (let* ((sexp (ignore-errors (ed-current-sexp w pos)))         (class (when sexp                  (find-class sexp nil))))    (if class      (menu-select (make-instance 'real-pop-up-menu                     :menu-items                     (mapcar #'(lambda (method)                                 (make-instance 'method-menu-item                                   :method-object method                                   :menu-item-title (ccl::edit-callers-print method nil)))                             (sort (specializer-direct-methods class)                                    #'ccl::edit-definition-spec-lessp)))                   w)      (progn (ed-beep) (set-mini-buffer w "~%~A is not a class" sexp)))))(defmethod view-click-event-handler ((self fred-item) where)  (set-mark (fred-buffer self) (fred-point-position self where))  (if (control-key-p)    (ed-edit-methods-in-pop-up self)    (call-next-method)))|#;----------------------------------------------------------------------------------------------#|class hierarchystyled definitionsall in standard fontinsertion fontbold/plainlist definitionsshow class(es) of methodcallers of methodmethods of classedit-definitionarglist |#      