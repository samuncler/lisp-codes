(in-package :oou)(oou-provide :twist-down-di);*****************************************************************                                    ;; Copyright © 1992 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a dialog-item to visualize a hierarchy; ;; Changes (worth to be mentioned):; ------------------------------; none ; ;*****************************************************************;***************************************************************** (oou-dependencies :simple-view-ce                              :layout-system                              :font-info                              :scroll-bar-di                              :unibas-cursors                              :with-running-watch)(export '(visualize-twist-down-node               twist-down-di twist-down-node twist-down-node-view-class twist-down-node-view triangle-view               children-function parent-function  children-views expanded twist-down-node-distance               complete-twist-down-di               nonterminal-twist-down-node-p               generate-children-views generate-child-node generate-root-node               expand-whole-subtree expand-path-to-twist-down-di));--------------------------------------------------------------------------(defmacro with-update-in-background ((ultimate-root immediate-refresh-p)  &body body)   `(with-running-watch        (let* ((restore-container (view-container ,ultimate-root))                  (result nil))           (set-view-container-to-nil ,ultimate-root)           (setf result (progn ,@body))           (when ,immediate-refresh-p               (invalidate-view restore-container t)               (set-view-container ,ultimate-root restore-container)               (when (and restore-container                                 (typep (view-container restore-container) 'complete-twist-down-di))                   (update-scrollers (view-container restore-container)))               result))));---------------------------------------------------------------------------(defclass default-twist-down-node-view-class (static-text-dialog-item)   ())(defmethod visualize-twist-down-node ((self default-twist-down-node-view-class) twist-down-node)   (set-dialog-item-text self (princ-to-string twist-down-node))   (set-view-size self                             (+ (string-width (dialog-item-text self) (view-font self)) 3)                            (font-line-height (view-font self))));----------------------------------------------------------------------------(defclass triangle-di (view)   ((down :initform nil               :accessor down               :initarg down)     (down-polygon :initform nil                             :accessor down-polygon)     (up-polygon :initform nil                           :accessor up-up-polygon))   (:default-initargs      :view-size #@(11 11)))(defmethod view-cursor ((self triangle-di) where)   (declare (ignore where))   (if (nonterminal-twist-down-node-p (view-container self))      *pointer-hand-cursor*      *arrow-cursor*))(defmethod view-draw-contents :after ((self triangle-di))   (with-slots (down-polygon up-polygon down) self       (when (nonterminal-twist-down-node-p (view-container self))           (with-pen-size (1 1 self)               (if down                  (progn (unless down-polygon                                (with-focused-view self                                    (start-polygon self)                                    (#_MoveTo 0 3)                                    (#_LineTo 10 3)                                    (#_LineTo 5 8)                                    (#_LineTo 0 3)                                    (setf down-polygon (get-polygon self))))                             (frame-polygon self down-polygon))                  (progn (unless up-polygon                                (with-focused-view self                                    (start-polygon self)                                    (#_MoveTo 2 0)                                    (#_LineTo 7 5)                                    (#_LineTo 2 11)                                    (#_LineTo 2 0)                                    (setf up-polygon (get-polygon self))))                             (frame-polygon self up-polygon)))))))(defmethod remove-view-from-window :after ((self triangle-di))   (with-slots (down-polygon up-polygon) self       (when down-polygon           (kill-polygon down-polygon)           (setf down-polygon nil))       (when up-polygon           (kill-polygon up-polygon)           (setf up-polygon nil))))(defmethod (setf down) :after (new-value (self triangle-di))   (invalidate-view self t)   (when (nonterminal-twist-down-node-p (view-container self))       (if new-value          (expand (view-container self))          (shrink (view-container self)))))(defmethod view-click-event-handler ((self triangle-di) where)   (declare (ignore where))   (with-slots (down-polygon up-polygon down) self       (let ((current-polygon (if down                                             down-polygon                                             up-polygon))               (in-triangle-p t))          (fill-polygon self *black-pattern* current-polygon)          (do ()                ((not (mouse-down-p)))             (unless (eq (view-contains-point-p self (view-mouse-position (view-container self)))                               in-triangle-p)                (setf in-triangle-p (not in-triangle-p))                (if in-triangle-p                   (fill-polygon self *black-pattern* current-polygon)                   (progn (erase-polygon self current-polygon)                              (frame-polygon self current-polygon)))))          (when in-triangle-p              (setf (down self) (not (down self)))))));-----------------------------------------------------------------------------(defclass twist-down-di (layout-mixin view)   ((twist-down-node :initarg :twist-down-node                                  :accessor twist-down-node                                  :initform nil)     (twist-down-di-class :initform 'twist-down-di                                         :accessor twist-down-di-class                                         :initarg :twist-down-di-class)     (twist-down-node-view-class :initform 'default-twist-down-node-view-class                                                      :accessor twist-down-node-view-class                                                      :initarg :twist-down-node-view-class)     (twist-down-node-view :initarg :twist-down-node-view                                            :initform nil                                            :accessor twist-down-node-view)     (triangle-view :initarg :triangle-view                             :initform nil                             :accessor triangle-view)     (children-function :initarg :children-function                                   :accessor children-function                                   :initform nil)     (parent-function :initform nil                                :initarg :parent-function                                :accessor parent-function)     (children-views :initarg :children-views                              :accessor children-views                              :initform nil)     (expanded :initarg :expanded                      :accessor expanded                      :initform nil)     (parent :initarg :parent                  :accessor parent                  :initform nil))) (defmethod nonterminal-twist-down-node-p ((self twist-down-di))   (with-slots (children-views children-function twist-down-node) self       (or children-views             (funcall children-function twist-down-node self))))(defmethod scroll-size ((self twist-down-di))   (view-height (twist-down-node-view self)))(defmethod page-size ((self twist-down-di))   (labels ((ultimate-container (twist-down)                   (cond ((null twist-down) nil)                             ((typep twist-down 'twist-down-di)                               (ultimate-container (view-container twist-down)))                             (t twist-down))))      (let ((container (ultimate-container self)))         (if container            (- (view-height container)                (* (view-height (twist-down-node-view self)) 2))            10))))   (defmethod initialize-instance :after ((self twist-down-di) &rest initargs)   (declare (ignore initargs))   (with-slots (twist-down-node twist-down-node-view-class twist-down-node-view triangle-view layout) self       (setf twist-down-node-view (make-instance twist-down-node-view-class))       (visualize-twist-down-node twist-down-node-view twist-down-node)       (setf triangle-view (make-instance 'triangle-di))        (set-shrinked-layout self)))(defmethod set-shrinked-layout ((self twist-down-di))   (with-slots (triangle-view twist-down-node-view) self       (let ((new-width (+ (view-width twist-down-node-view) 13))               (new-height (if (= (view-height twist-down-node-view) 0)                                       0                                      (max (view-height twist-down-node-view)                                               (+ (view-height triangle-view) 2)))))          (when (or (/= new-width (view-width self))                          (/= new-height (view-height self)))              (set-view-size self                                       new-width                                       new-height)              (setf (layout self)                       (:hbox ()                                 (:vbox (:width 13)                                           (:hbox ())                                           (:hbox (:height 11 :width 11) triangle-view)                                           (:hbox ()))                                 (:vbox ()                                           (:hbox ())                                           twist-down-node-view                                           (:hbox ()))))))))(defmethod set-expanded-layout ((self twist-down-di))   (with-slots (triangle-view twist-down-node-view children-views) self       (let* ((new-width (+ 13 (apply #'max                                                         (cons (view-width twist-down-node-view)                                                                  (mapcar #'(lambda (subview)                                                                                     (view-width subview))                                                                                children-views)))))                 (additional-height (apply #'+ (mapcar #'(lambda (subview)                                                                                  (view-height subview))                                                                             children-views)))                 (new-height (+ (max (view-height twist-down-node-view)                                                  (+ (view-height triangle-view) 2))                                         additional-height)))          (when (or (/= new-width (view-width self))                          (/= new-height (view-height self)))              (set-view-size self new-width new-height)              (setf (layout self)                       (:vbox ()                                 (:hbox (:height (max (view-height twist-down-node-view)                                                                 (+ (view-height triangle-view) 2)))                                           (:vbox (:width 13)                                                     (:hbox ())                                                     (:hbox (:height 11 :width 11) triangle-view)                                                     (:hbox ()))                                           (:vbox ()                                                     (:hbox ())                                                     twist-down-node-view                                                     (:hbox ())))                                 (:hbox ()                                           (:hbox (:width 13))                                           (:hbox ()                                                     `(:vbox () ,@children-views)                                                     ))))))))                                    (defmethod generate-children-views ((self twist-down-di))   (with-slots (children-function twist-down-node twist-down-node-distance) self       (when children-function           (do ((views nil)                  (children (funcall children-function twist-down-node self) (cdr children)))                 ((null children) (and views                                                 (nreverse views)))              (push (generate-child-node self (car children))                        views)))))(defmethod generate-child-node ((self twist-down-di) child)   (with-slots (twist-down-di-class twist-down-node-view-class children-function parent-function) self       (make-instance twist-down-di-class           :twist-down-node child           :twist-down-di-class twist-down-di-class           :twist-down-node-view-class twist-down-node-view-class           :children-function children-function           :parent-function parent-function           :parent self)))(defmethod shrink ((self twist-down-di))   (set-shrinked-layout self)   (setf (expanded self) nil)   (setf (slot-value (triangle-view self) 'down) nil))(defmethod shrink-whole-subtree ((self twist-down-di) &optional (immediate-refresh t))   (with-update-in-background ((ultimate-root self) immediate-refresh)       (shrink-whole-subtree (children-views self) immediate-refresh)       (shrink self)))(defmethod shrink-whole-subtree (list &optional (immediate-refresh t))   (when list       (shrink-whole-subtree (car list) immediate-refresh)       (shrink-whole-subtree (cdr list) immediate-refresh)))(defmethod expand ((self twist-down-di))   (with-slots (twist-down-node children-views expanded triangle-view) self       (unless children-views          (setf children-views (generate-children-views self)))       (set-expanded-layout self)       (setf expanded t)       (setf (slot-value triangle-view 'down) t)))(defmethod expand-whole-subtree (list &optional expand-path immediate-refresh)   (when list       (expand-whole-subtree (car list) expand-path immediate-refresh)       (expand-whole-subtree (cdr list) expand-path immediate-refresh)))(defmethod expand-whole-subtree ((self twist-down-di) &optional (expand-path t) (immediate-refresh t))   (with-update-in-background ((ultimate-root self) immediate-refresh)       (when expand-path           (expand-path-to-twist-down-di self immediate-refresh))       (when (nonterminal-twist-down-node-p self)           (expand self)           (expand-whole-subtree (children-views self) immediate-refresh))))(defmethod expand-path-to-twist-down-di ((self twist-down-di) &optional (immediate-refresh t))   (with-update-in-background ((ultimate-root self) immediate-refresh)       (dolist (twist-down-di  (twist-down-dis-to-root self))          (expand twist-down-di))))(defmethod twist-down-dis-to-root ((self twist-down-di))   (cond ((eq self (ultimate-root self))              nil)             (t (cons (parent self)                          (twist-down-dis-to-root (parent self))))))(defmethod ultimate-root ((self twist-down-di))   (if (parent self)      (ultimate-root (parent self))      self))(defmethod parent-node ((self twist-down-di) node)   (with-slots (twist-down-node parent-function) self       (when parent-function           (funcall parent-function                         node                         twist-down-node))))(defmethod all-parent-nodes ((self twist-down-di) node)   (cond ((eq (parent-node self node) (twist-down-node self))              (list (twist-down-node self)))             (t (let ((parent (parent-node self node)))                    (when parent                        (cons parent                                  (all-parent-nodes self parent)))))))(defmethod find-twist-down-di-containing-node ((self twist-down-di) node)   (if (eq (twist-down-node self) node)      self      (find-twist-down-di-containing-node (children-views self) node)))(defmethod find-twist-down-di-containing-node (list node)   (unless (null list)      (or (find-twist-down-di-containing-node (car list) node)            (find-twist-down-di-containing-node (cdr list)node))))   (defmethod make-node-visible ((self twist-down-di) node &optional (immediate-refresh t))   (with-update-in-background ((ultimate-root self) immediate-refresh)       (do ((parent-nodes (cdr (nreverse (cons node (all-parent-nodes self node))))                                      (cdr parent-nodes))              (twist-down-di self))             ((null parent-nodes) twist-down-di)          (expand twist-down-di)          (setf twist-down-di                   (find (car parent-nodes) (children-views twist-down-di)                            :key #'(lambda (child)                                         (twist-down-node child))                            :test #'eq)))))(defmethod set-view-size :before  ((self twist-down-di) h &optional v)    (let ((new-size (make-point h v))           (container (view-container self)))      (when (and container                        (typep container 'twist-down-di))          (set-view-size container                                   (apply #'max                                               (cons (view-width container)                                                        (mapcar #'(lambda (subview)                                                                           (view-right subview))                                                                      (subviews container))))                                   (+ (view-height container)                                       (- (point-v new-size)                                           (view-height self)))))))(defmethod set-view-size :after ((self twist-down-di) h &optional v)    (declare (ignore h v))   (let ((container (view-container self)))      (when container          (cond ((typep container 'twist-down-di)                     (set-view-size container                                              (apply #'max                                                          (cons (view-width container)                                                                   (mapcar #'(lambda (subview)                                                                                      (view-right subview))                                                                                 (subviews container))))                                              (view-height container)))                    ((and (view-container container)                             (typep (view-container container) 'complete-twist-down-di))                      (update-scrollers (view-container container))                      )))))(defmethod set-view-container-to-nil ((view simple-view) &aux (old-container (view-container view)))   (when  old-container       (without-interrupts         (when (eq view ccl::*current-view*)             (focus-view nil))         (setf (slot-value old-container 'view-subviews)                  (delete view (view-subviews old-container) :test #'eq))         (when (wptr view)             (remove-view-from-window view))         (ccl::set-view-container-slot view nil))));----------------------------------------------------------------------------(defclass special-vscroller (scroll-bar-di)   ())(defmethod set-view-size  ((self special-vscroller) h &optional v)   (let ((new-size (make-point h v)))      (call-next-method self (make-point (point-h new-size) (1+ (point-v new-size))))));-----------------------------------------------------------------------------(defclass complete-twist-down-di (layout-mixin view)   ((twist-down-di :initform nil                              :accessor twist-down-di)     (hscroller :initform t                      :accessor hscroller                      :initarg :hscroller)     (vscroller :initform t                      :accessor vscroller                      :initarg :vscroller)     (hscroll-action :initform #'(lambda (item part)                                                   (declare (ignore part))                                                   (set-view-scroll-position                                                      (view-container (sb-scrollee item))                                                     (sb-setting item)                                                     (point-v (view-scroll-position (view-container (sb-scrollee item)))))                                                   (when (view-window item)                                                       (window-update-event-handler (view-window item)))                                                   )                              :accessor hscroll-action                              :initarg :hscroll-action)     (vscroll-action :initform #'(lambda (item part)                                                   (declare (ignore part))                                                   (set-view-scroll-position                                                      (view-container (sb-scrollee item))                                                     (point-h (view-scroll-position (view-container (sb-scrollee item))))                                                     (sb-setting item))                                                   (when (view-window item)                                                       (window-update-event-handler (view-window item)))                                                   )                              :accessor vscroll-action                              :initarg :vscroll-action)     (twist-down-node :initarg :twist-down-node                                   :accessor twist-down-node                                   :initform nil)     (twist-down-di-class :initform 'twist-down-di                                                      :accessor twist-down-di-class                                                      :initarg :twist-down-di-class)     (twist-down-node-view-class :initform 'default-twist-down-node-view-class                                                      :accessor twist-down-node-view-class                                                      :initarg :twist-down-node-view-class)     (children-function :initarg :children-function                                   :accessor children-function                                   :initform nil)     (parent-function :initform nil                                :initarg :parent-function                                :accessor parent-function)     (draw-outline-p :initform t                                :initarg :draw-outline-p                                :accessor draw-outline-p)     (embedded-view-class :initform 'view                                          :initarg :embedded-view-class                                          :accessor embedded-view-class)))(defmethod initialize-instance :after ((self complete-twist-down-di) &rest initargs)   (declare (ignore initargs))   (with-slots (twist-down-di hscroller vscroller) self       (setf twist-down-di (generate-root-node self))       (setf hscroller (when hscroller                                   (make-instance 'scroll-bar-di                                       :direction :horizontal                                       :scrollee twist-down-di                                       :dialog-item-action (hscroll-action self)                                       :scroll-size 10                                       :page-size 30)))       (setf vscroller (when vscroller                                   (make-instance 'special-vscroller                                       :direction :vertical                                       :scrollee twist-down-di                                       :dialog-item-action (vscroll-action self)                                       :scroll-size (scroll-size twist-down-di)                                       :page-size (page-size twist-down-di))))       (setf (layout self)                 (if (print (draw-outline-p self))                   (:hbox ()                             (:hbox (:width 1))                             (:vbox ()                                       (:hbox (:height 1))                                       (:hbox ()                                                 (:fbox () (make-instance 'view                                                                    :view-subviews (list twist-down-di)))                                                 (:fbox (:width (view-width vscroller))                                                           vscroller))                                       (:hbox (:height (view-height hscroller))                                                 (:fbox () hscroller)                                                 (:hbox (:width (1- (view-width vscroller)))))                                       (:hbox (:height 1)))                             (:hbox (:width 1)))                   (:vbox ()                             (:hbox ()                                       (:fbox (:width :filler :height :filler) (make-instance (embedded-view-class self) :view-subviews (list twist-down-di)))                                       (:fbox (:width (view-width vscroller)) vscroller))                             (:hbox (:height (view-height hscroller))                                       (:fbox (:width :filler :height :filler) hscroller)                                       (:hbox (:width (1- (view-width vscroller))))))                             ))       (eval-enqueue `(update-scrollers ,self))))(defmethod generate-root-node ((self complete-twist-down-di))   (with-slots (twist-down-node twist-down-di-class twist-down-node-view-class                        children-function parent-function) self       (make-instance twist-down-di-class           :view-position #@(2 2)           :twist-down-node twist-down-node           :twist-down-di-class twist-down-di-class           :twist-down-node-view-class twist-down-node-view-class           :children-function children-function           :parent-function parent-function)))(defmethod update-scrollers ((self complete-twist-down-di))   (with-slots (hscroller vscroller twist-down-di) self       (let ((old-h-sb-max (sb-max hscroller))               (new-h-sb-max (max (- (view-width twist-down-di)                                                     (view-width (view-container twist-down-di)))                                                 0))               (old-v-sb-max (sb-max vscroller))               (new-v-sb-max (max (- (view-height twist-down-di)                                                     (view-height (view-container twist-down-di)))                                                 0))               (scroll-position (view-scroll-position (view-container twist-down-di))))          (setf (sb-max hscroller) new-h-sb-max)          (setf (sb-setting hscroller) (point-h scroll-position))          (setf (sb-max vscroller) new-v-sb-max)          (setf (sb-setting vscroller) (point-v scroll-position))          (when (and (/= old-v-sb-max (sb-max vscroller))                            (= (sb-max vscroller) 0)                            (/= (point-v scroll-position) 0))              (funcall (vscroll-action self) vscroller nil))           (when (and (/= old-h-sb-max (sb-max hscroller))                            (= (sb-max hscroller) 0)                            (/= (point-h scroll-position) 0))              (funcall (hscroll-action self) hscroller nil))          (setf (sb-page-size vscroller) (page-size twist-down-di)))))(defmethod view-draw-contents :after ((self complete-twist-down-di))    (when (draw-outline-p self)        (view-frame self)))(defmethod set-view-size :after ((self complete-twist-down-di) h &optional v)   (declare (ignore h v))   (eval-enqueue `(update-scrollers ,self)))#|(defclass test-window (layout-mixin window)   ())(let ((twist-down (make-instance 'complete-twist-down-di                                          :view-position #@(10 10)                                          :twist-down-node (find-class 'stream)                                          :children-function #'(lambda (class view)                                                                             (declare (ignore view))                                                                             (class-direct-subclasses class)))))   (make-instance 'test-window       :layout       (:vbox ()                20                 (:hbox ()                           20                           (:fbox () twist-down)                           20)                 20)))       |#