(in-package :oou)(oou-provide :unibas-pop-up-menu-di);*****************************************************************                                    ; ; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; methods for the view class; ;; Changes (worth to be mentioned):; ------------------------------;;*****************************************************************;*****************************************************************(require :pop-up-menu)(oou-dependencies :QuickDraw-u                              :unibas-cursors                              :simple-view-ce                              )(export '(real-pop-up-menu               ));---------------------------------------------------------------------------(defclass real-pop-up-menu (menu)   ())(defmethod menu-install ((menu real-pop-up-menu))  "Creates the actual Macintosh menu with all of the menu's current items."  (let* ((menu-items (menu-items menu)))    (apply #'remove-menu-items menu menu-items)    (ccl::init-menu-id menu)    (with-pstrs ((menu-title (menu-title menu)))      (let ((menu-handle (#_NewMenu :word (slot-value menu 'menu-id)                                   :ptr menu-title                                   :ptr)))        (#_InsertMenu :ptr menu-handle                     :word -1)        (setf (slot-value menu 'menu-handle) menu-handle)))    (let* ((colors (part-color-list menu)))      (loop        (unless colors (return))        (set-part-color menu (pop colors) (pop colors))))    (apply #'add-menu-items menu menu-items)))(defmethod menu-select ((menu real-pop-up-menu) view                        &aux selection                        selected-menu                        selected-menu-item                        (pos (subtract-points (local-to-global view (view-mouse-position view))                                                           #@(3 -1))))   (unless (menu-handle menu)      (menu-install menu))   (with-cursor *full-hand-cursor*       (menu-update menu)       (setf selection (#_PopUpMenuSelect                                 :ptr (slot-value menu 'menu-handle)                                 :word (point-v pos)                                 :word (- (point-h pos)                                               2)                                 :word 0                                 :long))       (setf selected-menu (ccl::menu-object (ash (logand #xFFFF0000 selection) -16)))       (setf selected-menu-item (logand #x0000FFFF selection))       (unless (eq selected-menu-item 0)          (menu-item-action            (nth (1- selected-menu-item) (menu-items selected-menu))))))       ;----------------------------------------------------------------------------#|(defclass real-pop-up-test-window (window)   ())(defmethod view-click-event-handler ((self real-pop-up-test-window) where)   (declare (ignore where))   (menu-select *pop-up-menu* self))(setf *pop-up-menu*          (make-instance 'real-pop-up-menu                                   :menu-items                                    (list (make-instance 'menu-item                                                                     :menu-item-title "first menu item"                                                                     :menu-item-action                                                                      #'(lambda ()                                                                           (print "first menu item")))                                           (make-instance 'menu-item                                                                     :menu-item-action                                                                      #'(lambda ()                                                                           (print "second menu item"))                                                                     :menu-item-title "second menu item"))))(make-instance 'real-pop-up-test-window                          :window-type :document                          :view-position :centered                          :view-size #@(300 100)                          :window-title "Click inside and hold button")|#