(in-package :oou)(oou-provide :special-paned-view);*****************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; paned view and paned window.; ; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :paned-view                              )(export '(unibas-constant-subview-collection direction constant-position distance items                unibas-paned-view-with-two-adjustables));--------------------------------------------------------------------------(defclass unibas-constant-subview-collection (unibas-paned-view)   ((direction :initform :horizontal                     :initarg :direction                     :accessor direction)     (constant-position :initform 0                                    :initarg :constant-position                                    :accessor constant-position)     (distance :initform 2                     :initarg :distance                     :accessor distance)     (items :initform nil                 :initarg :items                 :accessor items)))(defmethod initialize-instance :after ((self unibas-constant-subview-collection) &rest initargs)   (declare (ignore initargs))   (with-slots (items constant-position distance direction) self       (do ((subviews items (cdr subviews))              (last-subview nil (car subviews)))             ((null subviews))          (if (eq direction :horizontal)             (set-view-position (car subviews)                                            (make-point (if last-subview                                                                   (+ (view-right last-subview)                                                                       distance)                                                                   0)                                                                constant-position))             (set-view-position (car subviews)                                            (make-point constant-position                                                                (if last-subview                                                                   (+ (view-bottom last-subview)                                                                       distance)                                                                   0)))))       (setf (subview-description self)                (do ((subviews items (cdr subviews))                       (description nil))                      ((null subviews) description)                   (push (list (car subviews)                                     :constant                                     :stick-on-topleft)                             description)))));----------------------------------------------------------------------------(defclass unibas-paned-view-with-two-adjustables (view)   ((subview-description :initform nil                                       :initarg :subview-description                                       :accessor subview-description)     (distances :initform nil                    :accessor distances)     (percentages :initform nil                          :accessor percentages)     (direction :initform :horizontal                      :accessor direction                      :initarg :direction)))                      (defmethod initialize-instance :around ((self unibas-paned-view-with-two-adjustables) &rest initargs)    (declare (ignore initargs))   (call-next-method)   (dolist (subview (mapcar #'car (subview-description self)))      (set-view-container subview self))); an aquivalent method for 'window-zoom-event-handler' is still missing(defmethod set-view-size :around ((self unibas-paned-view-with-two-adjustables) h &optional v)   (with-slots (distances view-size direction percentages subview-description) self       (let ((subviews (mapcar #'car subview-description)))          (unless distances             (setf distances ;list of 'left margin' 'right margin' 'top margin' 'bottom margin' 'space between subviews'                      (list (point-h (view-position (car subviews)))                              (if (eq direction :horizontal)                                 (- (point-h view-size)                                     (point-h (view-position (cadr subviews)))                                     (point-h (view-size (cadr subviews))))                                 (- (point-h view-size)                                     (point-h (view-position (car subviews)))                                     (point-h (view-size (car subviews)))))                              (point-v (view-position (car subviews)))                              (if (eq direction :horizontal)                                 (- (point-v view-size)                                     (point-v (view-position (car subviews)))                                     (point-v (view-size (car subviews))))                                 (- (point-v view-size)                                     (point-v (view-position (cadr subviews)))                                     (point-v (view-size (cadr subviews)))))                              (if (eq direction :horizontal)                                 (- (point-h (view-position (cadr subviews)))                                     (+ (point-h (view-position (car subviews)))                                         (point-h (view-size (car subviews)))))                                 (- (point-v (view-position (cadr subviews)))                                     (+ (point-v (view-position (car subviews)))                                         (point-v (view-size (car subviews)))))))))          (unless percentages ; list of h-% v-% of first subview and h-% v-% of second subview             (let ((h-space (- (point-h view-size)                                        (+ (car distances)                                            (cadr distances)                                            (if (eq direction :horizontal)                                               (fifth distances)                                               0))))                     (v-space (- (point-v view-size)                                        (+ (third distances)                                            (fourth distances)                                            (if (eq direction :horizontal)                                               0                                               (fifth distances))))))                (setf percentages                         (list (/ (point-h (view-size (car subviews))) h-space)                                 (/ (point-v (view-size (car subviews))) v-space)                                 (/ (point-h (view-size (cadr subviews))) h-space)                                 (/ (point-v (view-size (cadr subviews))) v-space)))))          (let* ((first-subview (car subview-description))                    (second-subview (cadr subview-description))                    (new-h (if v h (point-h h)))                    (new-v (if v v (point-v h)))                    (new-size-first (with-slots (view-size) (car first-subview)                                                  (case (cadr first-subview)                                                     (:adjust-h-v (make-point (round (* (- new-h                                                                                                                (car distances)                                                                                                                (cadr distances)                                                                                                                (if (eq direction :horizontal)                                                                                                                   (fifth distances)                                                                                                                   0))                                                                                                            (car percentages)))                                                                                              (round (* (- new-v                                                                                                                (third distances)                                                                                                                (fourth distances)                                                                                                                (if (eq direction :horizontal)                                                                                                                   0                                                                                                                   (fifth distances)))                                                                                                            (cadr percentages)))))                                                     (:adjust-h (make-point (round (* (- new-h                                                                                                             (car distances)                                                                                                             (cadr distances)                                                                                                             (if (eq direction :horizontal)                                                                                                                (fifth distances)                                                                                                                0))                                                                                                         (car percentages)))                                                                                          (point-v view-size)))                                                     (:adjust-v (make-point (point-h view-size)                                                                                          (round (* (- new-v                                                                                                             (third distances)                                                                                                             (fourth distances)                                                                                                             (if (eq direction :horizontal)                                                                                                                0                                                                                                                (fifth distances)))                                                                                                         (cadr percentages))))))))                    (new-position-second (with-slots (view-position) (car second-subview)                                                            (if (eq direction :horizontal)                                                               (make-point (+ (car distances)                                                                                       (fifth distances)                                                                                       (point-h new-size-first))                                                                                   (point-v view-position))                                                               (make-point (point-h view-position)                                                                                   (+ (third distances)                                                                                       (fifth distances)                                                                                       (point-v new-size-first)))))))             (set-view-size (car first-subview) new-size-first)             (with-slots (view-size view-position) (car second-subview)                 (set-view-position (car second-subview) new-position-second)                 (set-view-size (car second-subview)                                          (case (cadr second-subview)                                             (:adjust-h-v (make-point (- new-h                                                                                         (point-h new-position-second)                                                                                         (cadr distances))                                                                                     (- new-v                                                                                         (point-v new-position-second)                                                                                         (fourth distances))))                                             (:adjust-h (make-point (- new-h                                                                                      (point-h new-position-second)                                                                                      (cadr distances))                                                                                  (point-v view-size)))                                             (:adjust-v (make-point (point-h view-size)                                                                                  (- new-v                                                                                      (point-v new-position-second)                                                                                      (cadr distances)))))))             (call-next-method)))))#|; there is a problem with the simple kind of descritiption, if you want two adjustable views in a row.; to solve this problem you have to build a cluster with these two views and put them as subviews in; a 'unibas-paned-view-with-two-adjustables'. With recursive application you can build pretty complex; windows (as far as resizing is concerned)(make-instance 'unibas-paned-window                          :window-title "Complex Resizable Window"                          :view-position (list :top 40)                          :view-size #@(300 500)                          :window-type :document-with-zoom                          :subview-description                          (list (list (make-instance 'unibas-paned-view-with-two-adjustables                                                                    :view-position #@(0 0)                                                                    :view-size #@(300 500)                                                                    :direction :vertical                                                          :subview-description                                                          (list                                                             (list (make-instance 'unibas-paned-view-with-two-adjustables                                                                                              :view-position #@(5 5)                                                                                              :view-size #@(290 230)                                                                                              :direction :horizontal                                                                                              :subview-description                                                                                              (list (list (make-instance 'editable-text-dialog-item                                                                                                                                        :view-position #@(5 5)                                                                                                                                        :view-size #@(120 220))                                                                                                               :adjust-h-v                                                                                                              :stick-on-topleft)                                                                                                      (list (make-instance 'editable-text-dialog-item                                                                                                                                        :view-position #@(150 5)                                                                                                                                        :view-size #@(120 220))                                                                                                               :adjust-h-v                                                                                                              :stick-on-topright)))                                                                    :adjust-h-v                                                                    :stick-on-topleft)                                                            (list (make-instance 'unibas-paned-view-with-two-adjustables                                                                                              :view-position #@(5 255)                                                                                              :view-size #@(290 230)                                                                                              :direction :horizontal                                                                                              :subview-description                                                                                              (list (list (make-instance 'editable-text-dialog-item                                                                                                                                        :view-position #@(5 5)                                                                                                                                        :view-size #@(120 220))                                                                                                               :adjust-h-v                                                                                                              :stick-on-topleft)                                                                                                      (list (make-instance 'editable-text-dialog-item                                                                                                                                        :view-position #@(150 5)                                                                                                                                        :view-size #@(120 220))                                                                                                               :adjust-h-v                                                                                                              :stick-on-topright)))                                                                    :adjust-h-v                                                                    :stick-on-bottomleft)))                                :adjust-h-v                                :stick-on-topleft)))|#