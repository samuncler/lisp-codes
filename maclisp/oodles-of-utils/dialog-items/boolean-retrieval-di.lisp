(in-package :oou)(oou-provide :boolean-retrieval-di);************************************************************************                                    ;; Copyright © 1991 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; the source window (the author's view) of GoMan; ;; Changes (worth to be mentioned):; ------------------------------; none ;;************************************************************************;************************************************************************(export '())(oou-dependencies :adjust-size-mixin                  :select-rectangle                  :draggable-dim                  :droppable-dim                  :selectable-dim                  :drag-and-drop-fred-mixin                  :scrollable-fred-di                  :adjust-size-mixin                  :layout-system                  :hilite-svm                  :unibas-icon-di);----------------------------------------------------------------------------------(defclass movable-embedded-fred-di (drag-and-drop-fred-mixin adjust-size-mixin PM-embedded-fred-di)   ((not-line :initform 1             :accessor not-line)   (last-lines-in-buffer :initform 0                         :accessor last-lines-in-buffer))  (:default-initargs     :draw-outline nil    :view-font '("Geneva" 12 :plain)))(defmethod adjust-size-to-content ((self movable-embedded-fred-di) &key (redraw-p t))  (declare (ignore redraw-p))  (when (wptr self)    (let* ((buff (fred-buffer self))           (lines (lines-in-buffer buff))           (max-width 0))      (unless (= lines (last-lines-in-buffer self))        (setf (not-line self)              (cond ((and (< lines (last-lines-in-buffer self))                          (< (buffer-position buff) (buffer-line-start buff 0 (not-line self))))                     (max (1- (not-line self)) 1))                    ((and (< lines (last-lines-in-buffer self))                          (> (buffer-position buff) (buffer-line-start buff 0 (not-line self))))                     (not-line self))                    ((and (> lines (last-lines-in-buffer self))                          (<= (print (buffer-position buff)) (print (buffer-line-start buff 0 (not-line self)))))                     (1+ (not-line self)))                    ((and (> lines (last-lines-in-buffer self))                          (> (buffer-position buff) (buffer-line-start buff 0 (not-line self))))                     (not-line self))                    (t (not-line self)))))      (setf (last-lines-in-buffer self) lines)                      (dotimes (i lines)        (setf max-width (max (fred-hpos self (buffer-line-end buff 0 i)) max-width)))      (let ((delta-width (- (view-width self)                             (+ max-width                                    (fred-hscroll self)                                    (ccl::fr.margin (frec self)))))            (delta-height (- (view-height self)                             (total-height self)))            (container (view-container self)))        (set-view-size container                       (max (- (view-width container) delta-width)                            80)                       (max (- (view-height container) delta-height)                            (* 3 (fr-line-height self 0))))))))(defmethod dropped :after ((self movable-embedded-fred-di) (dropped-view drag-and-drop-buffer) offset where)  (declare (ignore offset where))  (deselect-all (view-container self) :draw-now-p nil)  (select-item (view-container self) :draw-now-p nil)  (set-current-key-handler (view-window self) self))(defmethod hilite-view ((self movable-embedded-fred-di) hilite-flag)   (declare (ignore hilite-flag))   nil)(defmethod in-auto-scroll-part ((self movable-embedded-fred-di) global-position)  (declare (ignore global-position))  nil)(defmethod fred-update :after ((self movable-embedded-fred-di))  (draw-line-at-line self (not-line self)))(defmethod view-draw-contents :after ((self movable-embedded-fred-di))  (draw-line-at-line self (not-line self)))(defmethod draw-line-at-line ((self movable-embedded-fred-di) line)  (let ((v-pos (total-line-vpos self line)               ;(fred-line-vpos self line)               ))    (unless (= v-pos -1)      (with-focused-view self        (#_MoveTo 0 v-pos)        (#_Line (view-width self) 0)))));--------------------------------------------------------------------------------------------(defclass movable-fred-di (layout-mixin selectable-dim droppable-dim view)  ((fred-di :initform nil            :accessor fred-di)   (fred-class :initform 'movable-embedded-fred-di               :accessor fred-class               :initarg :fred-class)))(defmethod initialize-instance :after ((self movable-fred-di) &rest initargs)  (declare (ignore initargs))  (setf (fred-di self) (make-instance (fred-class self)))  (setf (layout self)        (:vbox ()               (:hbox (:height 11))               (:hbox (:width :filler :height :filler)                      (:vbox (:width 3 :height :filler))                      (:fbox (:width :filler :height :filler) (fred-di self))                      (:vbox (:width 3 :height :filler)))               (:hbox (:height 3))))  (eval-enqueue `(view-click-event-handler ,self #@(5 10))))(defmethod view-draw-contents ((self movable-fred-di))   (with-focused-view self    (with-pen-mode (:PatCopy self)      (Fill-Rect self *white-pattern* #@(0 0) (view-size self)))    (call-next-method)    (rlet ((close-rect :rect                       :topleft (make-point 6 3)                                               :bottomright (make-point 11 8))                              (erase-rect :rect                       :topleft (make-point 4 1)                                               :bottomright (make-point 13 9))                               (title-rect :rect                       :topleft #@(1 1)                       :bottomright (make-point (view-width self) 9)))      (when (oou::selected-p self)        (#_FillRect title-rect *25%-gray-pattern*))      (#_EraseRect erase-rect)      (#_FrameRect close-rect)      (#_MoveTo 1 9)      (#_Line (view-width self) 0)      (frame-rect-with-shade self #@(1 1) (view-size self)))))                      (defmethod hilite-view ((self movable-fred-di) hilite-flag)   (declare (ignore hilite-flag))   nil)(defmethod view-cursor ((self movable-fred-di) where)  (rlet ((close-rect :rect                     :topleft (make-point 4 1)                                             :bottomright (make-point 13 9))                             (title-rect :rect                     :topleft #@(1 1)                     :bottomright (make-point (view-width self) 11)))    (cond ((point-in-rect-p close-rect where)            *pointer-hand-cursor*)          ((and (point-in-rect-p title-rect where)                (selected-p self))           *full-hand-cursor*)          ((point-in-rect-p title-rect where)           *pointer-hand-cursor*)          (t *arrow-cursor*))))(defmethod view-click-event-handler :around ((self movable-fred-di) where)   (view-bring-to-front self)  (when (view-window self)    (set-current-key-handler (view-window self) (fred-di self)))  (rlet ((close-rect :rect                     :topleft (make-point 4 1)                                             :bottomright (make-point 13 9))                             (title-rect :rect                     :topleft #@(1 1)                     :bottomright (make-point (view-width self) 11)))    (cond ((and (point-in-rect-p close-rect where)                (selected-p self))           (set-view-container self nil))          ((point-in-rect-p title-rect where)           (let ((selected-p (selected-p self)))             (call-next-method)             (with-focused-view (view-container self)               (if selected-p                 (when (shift-key-p)                    (deselect-item self :draw-now-p nil)                   (invalidate-view self))                 (progn                    (unless (shift-key-p) (deselect-all self :draw-now-p nil))                   (select-item self :draw-now-p nil)                   (invalidate-view self))))))          ((eq (find-view-containing-point self where) (fred-di self))           (with-focused-view (view-container self)             (if (selected-p self)               (when (shift-key-p)                  (deselect-item self :draw-now-p nil))               (progn                  (unless (shift-key-p) (deselect-all self :draw-now-p nil))                 (select-item self :draw-now-p nil))))           (unless (shift-key-p)             (view-click-event-handler (fred-di self) (container-to-view (fred-di self) where))))          (t (call-next-method)))))(defmethod drop-action ((di  movable-fred-di) (target movable-embedded-fred-di) drag-offset dest-point)  (declare (ignore dest-point))  (set-view-at-grid-position (view-container di) di drag-offset)  (setf (last-target di) nil)  (setf (current-target di) nil)  (setf (last-real-target di) nil))(defmethod in-auto-scroll-part :around ((self movable-fred-di) global-position)  (declare (ignore global-position))  (print (call-next-method)))  ;----------------------------------------------------------------------------------------------(defclass container-view (embedded-view)  ())(defmethod new-article-view ((self container-view) &optional (where #@(10 10)) (text ""))  (let ((article-view (make-instance 'movable-fred-di                        :view-position where)))    (when text      (buffer-insert (fred-buffer (fred-di article-view)) text))    (add-subviews self article-view)    (if text      (adjust-size-to-content (fred-di article-view))      (set-view-size article-view #@(80 45)))    article-view))(defmethod some-article-view ((self container-view))  (car (subviews self 'movable-fred-di)))(defmethod view-click-event-handler :around ((self container-view) where)  (cond ((and (double-click-p)              (eq (find-view-containing-point self where) self))         (new-article-view self where))        ((eq (find-view-containing-point self where) self)         (multiple-value-bind (topleft bottomright)(select-rectangle self)           (with-focused-view self             (rlet ((rect :rect                          :topleft topleft                          :bottomright bottomright))               (dolist (article-view (subviews self 'movable-fred-di))                 (if (#_PtInRect (view-top-left article-view) rect)                   (oou::select-item article-view)                   (oou::deselect-item article-view)))))))        (t (call-next-method))))(defmethod droppable-p ((self movable-fred-di) (target container-view))  t)(defmethod dropped ((self container-view) (dropped-view movable-fred-di) offset where)  (declare (ignore  where))   (set-view-at-grid-position self dropped-view offset))(defmethod droppable-p ((self drag-and-drop-buffer) (target container-view))  t)  (defmethod dropped ((self container-view) (dropped-view drag-and-drop-buffer) offset where)  (declare (ignore offset where))   (let ((fred (source-fred dropped-view)))    (when (eq (view-window fred) (view-window self))      (deselect-all (view-container fred) :draw-now-p nil))    (new-article-view self                       (view-mouse-position self)                       (multiple-value-bind (start-sel end-sel) (selection-range fred)                        (buffer-substring (fred-buffer fred) start-sel end-sel)))))(defmethod draggable-view-enters ((self container-view) (copy-paste-buffer drag-and-drop-buffer) global-mouse-pos)  (declare (ignore global-mouse-pos))  (unless (eq (front-window) (view-window self))        (window-select (view-window self))        (view-draw-contents (view-window self))))(defmethod hilite-view ((self container-view) hilite-flag)  (declare (ignore hilite-flag))  nil)(defmethod in-auto-scroll-part :around ((self container-view) global-position)  (declare (ignore global-position))  (call-next-method));------------------------------------------------------------------------------------------------(defclass scrollable-container (horizontal-vertical-scrollable-view)  ()  (:default-initargs :view-class 'container-view));-------------------------------------------------------------------------------------------------(defclass retrieval-agent (hilite-svm icon-di)  ()  (:default-initargs    :dialog-item-action #'(lambda (icon)                            (process-the-click icon))    :view-size #@(40  40)    :rsrc-file "oou:resources stuff"    :rsrc-id 176    :draw-outline :simple-frame    :PICT-scaling :center-in-view))(defmethod selected-article-views ((self retrieval-agent))  (let ((some-article-view (some-article-view (view-named :real-view (car (subviews (view-window self) 'scrollable-container))))))    (when some-article-view      (selected-items some-article-view))))(defmethod retrieval-strings ((self retrieval-agent))  (mapcar #'(lambda (item)              (buffer-substring (fred-buffer (fred-di item)) 0 t))          (selected-article-views self)))                 (defmethod call-drop-action ((di movable-fred-di) (target retrieval-agent) drag-offset dest-point)  (drop-action di target drag-offset dest-point))(defmethod droppable-p ((self movable-fred-di) (target retrieval-agent))   t)(defmethod process-the-click ((self retrieval-agent))  (declare (ignore where))  (print (retrieval-strings self)))(defmethod dropped ((self retrieval-agent) (droppable-view movable-fred-di) offset where)  (declare (ignore offset where))  (print (retrieval-strings self)))#|(make-instance 'window  :view-subviews (list (make-instance 'scrollable-container                         :view-size #@(300 300)                         :view-position #@(10 10))                       (make-instance 'retrieval-agent                         :view-position #@(150 315)))  :view-size #@(320 360))|#                    