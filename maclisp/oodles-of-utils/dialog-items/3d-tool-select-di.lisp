(in-package :oou)(oou-provide :3d-tool-select-di);*****************************************************************                                    ;; Copyright © 1996 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; an icon with a 3d-look; ;; Changes (worth to be mentioned):; ------------------------------; none ; ;*****************************************************************;***************************************************************** (oou-dependencies :3d-icon-di)(export '( ));---------------------------------------------------------------------------(defclass 3d-tool-select-di (3d-icon-di)  ((selected-p :initform nil               :accessor selected-p               :initarg :selected-p)))(defmethod initialize-instance :after ((view 3d-tool-select-di) &rest initargs)  (declare (ignore initargs))  (when (selected-p view)    (setf (3d-effect view) (icon-down-effect view))))(defmethod view-click-event-handler ((view 3d-tool-select-di) where)  (declare (ignore where))  (when (dialog-item-enabled-p view)    (hilite-view view t)    (do ((in-icon-p t))        ((not (mouse-down-p)))      (let ((mouse-pos (view-mouse-position (view-container view))))        (in-click-loop view (container-to-view view mouse-pos))        (unless (eq (view-contains-point-p view mouse-pos) in-icon-p)          (setf in-icon-p (not in-icon-p))          (if in-icon-p            (hilite-view view t)            (hilite-view view nil)))))    (when (and (dialog-item-action-function view)               (view-contains-point-p view (view-mouse-position (view-container view))))      (with-cursor *watch-cursor*        (icon-action view (view-mouse-position view)))       (setf (selected-p view) (not (selected-p view)))      )))(defmethod selected-di ((container view))  (dolist (di (subviews container '3d-tool-select-di))    (when (selected-p di)      (return di))))      (defmethod (setf selected-p) :around (new-value (view 3d-tool-select-di))  (let ((old-selected-di (when (view-container view)                           (selected-di (view-container view)))))    (call-next-method)    (if new-value      (progn (setf (3d-effect view) (icon-down-effect view))             (when (and old-selected-di                        (not (eq old-selected-di view)))               (setf (slot-value old-selected-di 'selected-p) nil)))      (setf (3d-effect view) *3d-up-effect-powerbook*)      )))(defmethod draw-graphic ((view 3d-tool-select-di) rsrc-handle rect)  (if (selected-p view)    (progn       (#_OffsetRect rect 1 1)      (call-next-method view rsrc-handle rect))    (call-next-method)))(defmethod hilite-view ((view 3d-tool-select-di) hilite-flag)  (when (wptr view)    (let ((selected-di (selected-di (view-container view))))      (cond (hilite-flag             (with-focused-view view               (rlet ((rect :rect                            :topleft (if (selected-p view)                                       #@(4 4)                                       #@(5 5))                            :bottomright (add-points (view-size view) (if (selected-p view)                                                                        #@(-2 -2)                                                                        #@(-1 -1)))))                 (draw-graphic view (slot-value view 'rsrc-handle) rect))               (with-fore-color (back (icon-down-effect view))                 (#_MoveTo 3 (- (view-height view) 2))                 (#_Line 0 (- (- (view-height view) 5)))                 (#_Line (- (view-width view) 6) 0)                 (#_MoveTo 4 (- (view-height view) 2))                 (#_Line 0 (- (- (view-height view) 6)))                 (#_Line (- (view-width view) 7) 0))               (draw-3d-effect (icon-down-effect view) view))             (when (and selected-di                        (not (eq view selected-di)))               (setf (slot-value selected-di 'selected-p) nil)               (setf (3d-effect selected-di) *3d-up-effect-powerbook*)))            (t             (ccl::force-view-draw-contents view)             (when (and selected-di                        (not (eq view selected-di)))               (setf (slot-value selected-di 'selected-p) t)               (setf (3d-effect selected-di) (icon-down-effect view)))))      (when (and selected-di                 (not (eq view selected-di)))        (setf (slot-value selected-di 'selected-p) t)))))#|(make-instance 'window   :window-title "3D-tool-select-di"  :window-type :document  :back-color *light-gray-color*  :view-size #@(180 80)  :view-position :centered  :view-subviews  (list (make-instance '3d-tool-select-di          :view-position #@(20 20)          :rsrc-id 183)        (make-instance '3d-tool-select-di          :selected-p t          :view-position #@(65 20)          :rsrc-id 184          )        (make-instance '3d-tool-select-di          :view-position #@(110 20)          :rsrc-id 185          )))(defclass multiple-select-win (window)  ())(defmethod selected-di ((win multiple-select-win))  nil)(make-instance 'multiple-select-win  :window-title "3D-tool-select-di"  :window-type :document  :back-color *light-gray-color*  :view-size #@(180 80)  :view-position :centered  :view-subviews  (list (make-instance '3d-tool-select-di          :view-position #@(20 20)          :rsrc-id 183)        (make-instance '3d-tool-select-di          :selected-p t          :view-position #@(65 20)          :rsrc-id 184          )        (make-instance '3d-tool-select-di          :view-position #@(110 20)          :rsrc-id 185          )))|#