(in-package :oou)(oou-provide :local-menubar);*****************************************************************                                    ;; Copyright © 1995 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; a local menubar on top of a window; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(oou-dependencies :layout-system                  :view-ce                  :command-key-pup-mixin                  :consistent-cursor-dim                  :special-events-dim                  :color-svm)(export '(          ));---------------------------------------------------------------------------(defclass local-menubar (color-svm layout-mixin view)  ((menus :initform nil          :initarg :menus          :accessor menus))  (:default-initargs    :draw-outline-p nil    :back-color *white-color*    :frame-color *Dark-Gray-Color*))(defmethod view-draw-contents :after ((view local-menubar))   (with-focused-view view    (#_moveto 0 0)    (dolist (length '(3 1 0 0))      (#_line length 0)      (#_move (- length) 1))    (with-fore-color (frame-color view)      (let* ((size (view-size view))             (h (- (point-h size) 2))             (v (1- (point-v size))))        (#_moveto :word 0 :word v)        (#_line :word h :word 0)        ;(#_MoveTo :word (- h 2) :word 0)        ;(#_Line :word 0 :word v)        ))))(defmethod view-default-size ((view local-menubar))  (let ((container (view-container view)))            (when container             (make-point (view-width container)                  (+ (ccl::view-font-line-height view) 4)))))(defmethod install-view-in-window :before ((view local-menubar) w)  (declare (ignore w))  (with-slots (menus) view    (multiple-value-bind (ff ms)(view-font-codes view)      (let ((container (view-container view)))        (when ff          (dolist (menu menus)            (set-view-font-codes menu ff ms)))        (ccl::set-default-size-and-position view container)        (setf (layout view)              `(:hbox () ,@menus)))      )));------------------------------------------------------------------------------(defclass local-menu (full-hand-cursor-dim command-key-pup-mixin pull-down-menu)  ());------------------------------------------------------------------------------;for windows with a local menubar(defclass local-menubar-mixin (layout-mixin)   ((local-menubar :initform nil                  :initarg :local-menubar                  :accessor local-menubar))  (:default-initargs    :back-color *tool-back-color*    :layout '(:hbox ())))(defmethod initialize-instance ((win local-menubar-mixin) &rest initargs &key (window-show t))  (declare (dynamic-extent initargs))  (apply #'call-next-method win :window-show nil initargs)  (when (local-menubar win)    (insert-local-menubar win (local-menubar win)))  (when window-show    (window-show win)))(defmethod expand-layout ((win local-menubar-mixin) (menubar local-menubar))  (setf (layout win)        `(:vbox ()                (:fbox (:height ,(view-height menubar)) ,menubar)                ,(layout win))))(defmethod insert-local-menubar ((win local-menubar-mixin) menubar)  (set-view-position menubar #@(-1000 -1000))   (set-view-container menubar win)   (expand-layout win menubar)  (setf (slot-value win 'local-menubar) menubar)  (when (own-window-grow-rect win)    (dispose-record (own-window-grow-rect win)))  (setf (own-window-grow-rect win)        (make-record :rect                     :topleft (make-point (reduce #'(lambda (x y)                                                      (max                                                        (if (numberp x) x (view-right x))                                                       (view-right y)))                                                  (subviews (local-menubar win)))                                          120)                     :bottomright (make-point *screen-width*                                               *screen-height*))))(defmethod remove-local-menubar ((win local-menubar-mixin))  (when (local-menubar win)    (setf (layout win)          (fourth (layout win))))  (setf (slot-value win 'local-menubar) nil))(defmethod (setf local-menubar) :around (new-value (win local-menubar-mixin))  (remove-local-menubar win)  (call-next-method)  (insert-local-menubar win new-value));------------------------------------------------------------------------------#|(defclass win-with-menubar (local-menubar-mixin window)  ())(defclass my-fred-view (color-svm scrolling-fred-view)  ()  (:default-initargs     :back-color *white-color*))(make-instance 'win-with-menubar  :view-position :centered  :window-title "Menubar demo"  :local-menubar (make-instance 'local-menubar                   :view-font '("Chicago" 10 :plain)  ; try this                   :menus                   (list                     (make-instance 'local-menu                      :item-display "File"                      :menu-items                      (list (make-instance 'menu-item                              :menu-item-title "New"                              :command-key #\N                              :menu-item-action #'(lambda ()(print "A local New command")))                            (make-instance 'menu-item                              :menu-item-title "Open…"                              :command-key #\O                              :menu-item-action #'(lambda () (print "A local Open command")))                            (make-instance 'menu-item                              :menu-item-title "Close"                              :command-key #\W                              :menu-item-action #'(lambda () (print "A local Quit command")))))                    (make-instance 'local-menu                      :item-display "Edit"                      :menu-items                      (list (make-instance 'menu-item                              :menu-item-title "Cut"                              :command-key #\X                              :menu-item-action #'(lambda ()(print "Cut")))                            (make-instance 'menu-item                              :menu-item-title "Copy"                              :command-key #\C                              :menu-item-action #'(lambda ()(print "Copy")))                            (make-instance 'menu-item                              :menu-item-title "Paste"                              :command-key #\V                              :menu-item-action #'(lambda ()(print "Paste")))))                    (make-instance 'local-menu                      :item-display "Lisp"                      :menu-items                      (list (make-instance 'menu-item                              :menu-item-title "Execute"                              :command-key #\E                              :menu-item-action #'(lambda ()(print "Execute")))                            (make-instance 'menu-item                              :menu-item-title "Abort"                              :menu-item-action #'(lambda ()(print "Abort")))))                    ))   :layout (:hbox ()                 20                  (:vbox ()                  20                  (:fbox () (make-instance 'my-fred-view))                  20)                 20))|#                   