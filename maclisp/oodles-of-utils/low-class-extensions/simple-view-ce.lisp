(in-package :oou)(oou-provide :simple-view-ce);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; methods for the view class;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(require :QuickDraw)(oou-dependencies :unibas-macros                  :WMgr-view)(export '(offset-view-position offset-view-scroll-position          erase-corners           erase-view          view-to-global global-to-view view-to-window view-to-container view-global-corners focused-corners          window-to-view           point-in-right-side-p point-in-left-side-p point-in-bottomright-p           View-In-Rect View-partly-In-Rect view-erase           view-frame view-frame-with-shade view-frame-outside frame-rect-with-shade          view-draw-vertical-line view-draw-horizontal-line view-invert           view-draw-corner-handles           view-draw-top-left-handle view-draw-top-right-handle           view-draw-bottom-left-handle view-draw-bottom-right-handle           view-draw-top-handle view-draw-right-handle view-draw-left-handle           view-draw-bottom-handle center-view view-overlapped-p view-visible-rect          view-visible-p view-completely-visible-p view-cutted-borders          view-correct-position view-explode view-implode implode-to-origin          ));----------------------------------------------------------------------(eval-when (:compile-toplevel :load-toplevel :execute)    (defconstant $di-hidden-const  8192)  (defconstant $di-hide-h-offset 16384)    );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod view-portBits ((sv simple-view))  (pref (wptr sv) :GrafPort.portBits))(defmethod offset-view-position ((sv simple-view) h &optional v)  "Offsets the views's position by the specified amount."  (let ((old-position (view-position sv)))    (set-view-position sv (add-points (view-position sv) (make-point h v)))    (validate-view (view-window sv))    (invalidate-corners (view-container sv) old-position (add-points old-position (view-size sv)) t)    (invalidate-view sv)))(defmethod offset-view-scroll-position ((sv simple-view) h &optional v)  "sv h &optional vOffsets the views's scroll position by the specified amount."  (set-view-scroll-position sv (add-points (view-scroll-position sv) (make-point h v)))  (window-update-event-handler (view-window sv)))#|(defmethod erase-corners ((sv simple-view) topLeft botRight)  (let ((container (view-container sv)))    (when container      (rlet ((r :Rect                 :topLeft (view-to-window container topLeft)                :botRight (view-to-window container  botRight))             (container-rect :Rect ))        (with-focused-view (view-window sv)          (#_SectRect r             (offset-rect (view-visible-rect sv container-rect)                        (view-to-window container                                        (view-scroll-position container)))           r)          (with-macptrs ((rgn (#_NewRgn)))            (#_RectRgn rgn r)            (let ((erase-rgn (window-erase-region (view-window sv))))              (#_UnionRgn rgn erase-rgn erase-rgn))            (#_DisposeRgn rgn)))))))|#(defmethod erase-corners ((sv simple-view) topLeft botRight)  (when (view-window sv)    (rlet ((r :Rect :topLeft topLeft :botRight botRight))      (with-macptrs ((rgn (#_NewRgn)))        (#_RectRgn rgn r)        (let ((erase-rgn (window-erase-region (view-window sv))))          (#_UnionRgn rgn erase-rgn erase-rgn))        (#_DisposeRgn rgn)))))(defmethod erase-view ((sv simple-view))  (multiple-value-call #'erase-corners sv (view-corners sv)));; These are special purpose functions for use in designing new;; classes. They were designed with efficiency in mind, rather;; than robustness.;;Note: they do not focus the current view. They're intended;;to be used in specializing methods (like view-draw-contents);;which take care of focussing the current view. For simple views;;it be focused to view's container. For views it should be focused;;to the view.;; Hiliting an already hilited view or un-hiliting a view that's;; not hilited will not work with these default fns.;;#| Mike's version(defmethod hilite-view ((sv simple-view) hilite-flag)  "sv hilite-flagHilites the specified view. Specializations may use hilite-flagto tell whether to hilite or un-hilite the item (t/nil). It isnot used here because InvertRect is reversable."   (declare (ignore hilite-flag))  (multiple-value-bind (topLeft botRight) (view-corners sv)    (rlet ((r :Rect :topLeft topLeft :botRight botRight))      (#_BitClr (%int-to-ptr #$hiliteMode) #.#$pHiliteBit)      (#_InvertRect r))))(defmethod hilite-view ((v view) hilite-flag)  "v hilite-flag"   (declare (ignore hilite-flag))  (rlet ((r :Rect :topLeft #@(0 0) :botRight (view-size v)))    (#_BitClr (%int-to-ptr #$hiliteMode) #.#$pHiliteBit)    (#_InvertRect r)))|#(defmethod hilite-view ((sv simple-view) hilite-flag)  "sv hilite-flagHilites the specified view. Specializations may use hilite-flagto tell whether to hilite or un-hilite the item (t/nil). It isnot used here because InvertRect is reversable."   (declare (ignore hilite-flag))  (view-invert sv))(defmethod hilite-view ((v view) hilite-flag)  "v hilite-flag"   (declare (ignore hilite-flag))  (view-invert v));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; coordinate conversions(defmethod view-to-global ((sv simple-view) point)  (add-points (view-position (view-window sv)) (subtract-points point (view-origin sv))))(defmethod view-to-global ((sv window) point)  (add-points (view-position sv) (subtract-points point (view-origin sv))))(defmethod view-to-container ((sv simple-view) point)   (convert-coordinates point sv (view-container sv)))(defmethod view-to-window ((sv simple-view) point)   (convert-coordinates point sv (view-window sv)))(defmethod container-to-view ((sv simple-view) point)  (subtract-points point (view-position sv)))(defmethod global-to-view ((sv simple-view) point)  (subtract-points  (add-points point (view-origin sv)) (view-position (view-window sv))))(defmethod window-to-view ((sv simple-view) point)   (convert-coordinates point (view-window sv) sv))(defmethod global-to-view ((sv window) point)  (subtract-points  (add-points point (view-origin sv)) (view-position sv)))(defmethod view-global-corners ((sv simple-view))  (let ((offset (subtract-points (view-position (view-window sv)) (view-origin sv))))    (values offset (add-points (view-size sv) offset))))(defmethod view-global-corners ((sv window))  (let ((offset (subtract-points (view-position sv) (view-origin sv))))    (values offset (add-points (view-size sv) offset))))(defmethod focused-corners ((sv simple-view)) (view-corners sv))(defmethod focused-corners ((v view))         (values #@(0 0) (view-size v)));-------------------------------------------------------------------------------------------------(defmethod global-view-position ((win window))  (view-position win))(defmethod global-view-position ((sv simple-view))  (view-to-global sv #@(0 0)))(defmethod global-bottom-right ((win window))  (view-bottom-right win))(defmethod global-bottom-right ((sv simple-view))  (add-points (global-view-position sv)              (view-size sv)));-------------------------------------------------------------------------------------------------(defmethod point-in-right-side-p ((self simple-view) p)  (let ((dp (view-position self))           (s (view-size self)))      (rlet ((r :rect                     :left (+ (point-h dp) (round (point-h s) 2))                    :top (point-v dp)                    :right (+ (point-h dp) (point-h s))                    :bottom (+ (point-v dp) (point-v s))))         (point-in-rect-p r p))))(defmethod point-in-left-side-p ((self simple-view) p)  (let ((dp (view-position self))          (s (view-size self)))     (rlet ((r :rect                    :left (point-h dp)                    :top (point-v dp)                   :right (+ (point-h dp) (round (point-h s) 2))                   :bottom (+ (point-v dp) (point-v s))))        (point-in-rect-p r p))))          (defmethod point-in-bottomright-p ((self simple-view) p &optional (offset #@(10 10)))  "Returns t if p of container is in bottomright of this view"  (rlet ((r  :rect                  :topleft (subtract-points                                (view-size self)                               offset)                 :bottomright (view-size self)))     (point-in-rect-p r (subtract-points p (view-position self)))))(defmethod View-In-Rect ((self simple-view) rect)   (and (point-in-rect-p rect (view-position self))           (point-in-rect-p rect (add-points (view-position self)                                                                 (view-size self)))))(defmethod View-partly-In-Rect ((self simple-view) rect)   (or (point-in-rect-p rect (view-position self))         (point-in-rect-p rect (view-top-right self))         (point-in-rect-p rect (view-bottom-right self))         (point-in-rect-p rect (view-bottom-left self))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; ;;; some simple graphic methods;;; (defmethod view-erase ((view simple-view))  (erase-rect view               (view-scroll-position view)              (add-points (view-scroll-position view)                          (view-size view))))(defmethod view-frame ((view simple-view) &key (offset #@(0 0)))  (when (wptr view)    (frame-rect view                 (add-points (view-scroll-position view) offset)                (subtract-points (view-size view) offset))))(defmethod frame-rect-with-shade ((self simple-view) top-left bottom-right)  (when (wptr self)    (let ((top-right (make-point (point-h bottom-right) (point-v top-left)))          (bottom-left (make-point (point-h top-left) (point-v bottom-right))))      (frame-rect self top-left (subtract-points bottom-right #@(1 1)))      (with-pen-pattern (*white-pattern* self)        (move-to self (add-points top-right #@(-1 0)))        (line-to self (add-points top-right #@(-1 0))))      (move-to self (add-points top-right #@(-1 1)))      (line-to self (add-points bottom-right #@(-1 -1)))      (line-to self (add-points bottom-left #@(1 -1)))      (with-pen-pattern (*white-pattern* self)        (line-to self (add-points bottom-left #@(0 -1)))))))(defmethod view-frame-with-shade ((view simple-view))  (when (wptr view)    (frame-rect-with-shade view #@(0 0) (view-size view))))(defmethod view-frame-outside ((view simple-view))  (when (wptr view)    (frame-rect (view-container view)                 (subtract-points (view-top-left view) #@(1 1))                (add-points (view-bottom-right view) #@(1 1)))))(defmethod view-draw-vertical-line ((view simple-view) h)  (move-to view (make-point h 0))  (line-to view (make-point h (view-height view))))(defmethod view-draw-horizontal-line ((view simple-view) v)  (move-to view (make-point 0 v))  (line-to view (make-point (view-width view) v)))(defmethod view-invert ((self simple-view))   (when (wptr self)       (invert-rect  self                             (view-scroll-position self)                            (add-points (view-scroll-position self) (view-size self)))))(defvar *handle-size* 4)(defmethod view-draw-corner-handles ((self simple-view))  (view-draw-top-left-handle self)  (view-draw-top-right-handle self)   (view-draw-bottom-left-handle self)  (view-draw-bottom-right-handle self))(defmethod view-draw-top-left-handle ((self simple-view) &optional (handle-size *handle-size*))  (ccl::paint-rect self #@(0 0) (make-point handle-size handle-size)))(defmethod view-draw-top-right-handle ((self simple-view) &optional (handle-size *handle-size*))  (let ((r (point-h (view-size self))))    (ccl::paint-rect self (make-point (- r handle-size) 0)                      (make-point r handle-size))))(defmethod view-draw-bottom-left-handle ((self simple-view) &optional (handle-size *handle-size*))  (let ((h (point-v (view-size self))))    (ccl::paint-rect self (make-point 0 (- h handle-size))                     (make-point handle-size h))))(defmethod view-draw-bottom-right-handle ((self simple-view) &optional (handle-size *handle-size*))  (let ((r (point-h (view-size self)))        (h (point-v (view-size self))))    (ccl::paint-rect self (make-point (- r handle-size) (- h handle-size))                      (make-point r h))))(defmethod view-draw-top-handle ((self simple-view) &optional (handle-size *handle-size*))  (let ((r (point-h (view-size self))))    (ccl::paint-rect self (make-point 0 0)                      (make-point r handle-size))))(defmethod view-draw-right-handle ((self simple-view) &optional (handle-size *handle-size*))  (let ((r (point-h (view-size self)))        (h (point-v (view-size self))))    (ccl::paint-rect self (make-point (- r handle-size) 0)                      (make-point r h))))(defmethod view-draw-left-handle ((self simple-view) &optional (handle-size *handle-size*))  (let ((h (point-v (view-size self))))    (ccl::paint-rect self (make-point 0 0)                     (make-point handle-size h))))(defmethod view-draw-bottom-handle ((self simple-view) &optional (handle-size *handle-size*))  (let ((r (point-h (view-size self)))        (h (point-v (view-size self))))    (ccl::paint-rect self (make-point 0 (- h handle-size))                      (make-point r h))))          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod center-view ((self simple-view))  (when (view-container self)    (cond ((> (view-width self) (view-width (view-container self)))           (ed-beep) nil)          (t            (set-view-position self                              (make-point (floor (- (view-width (view-container self))                                                    (view-width self))                                                 2)                                          (point-v (view-position self))))           (invalidate-view self)           (view-draw-contents self)))))(defmethod view-overlapped-p ((self simple-view))   (when (wptr self)       (let ((overlapped nil))          (rlet ((own-rect :rect                                     :topleft (view-top-left self)                                     :bottomright (view-bottom-right self)))             (dolist (compared-view (cdr (member self (subviews (view-container self)))) overlapped)                (rlet ((compared-rect :rect                                                   :topleft (view-top-left compared-view)                                                   :bottomright (view-bottom-right compared-view)))                   (intersect-rect own-rect compared-rect compared-rect)                   (unless (empty-rect-p compared-rect)                      (setf overlapped t))))))))(defmethod view-overlapped-p ((self window))   nil)(defmethod view-visible-rect ((self simple-view) view-rect)   (when (wptr self)       (let* ((container (view-container self))                 (container-scroll-position (view-scroll-position container)))          (rlet ((dummy-rect :rect                                         :topleft container-scroll-position                                         :bottomright (add-points container-scroll-position                                                                                 (view-size container))))             (points-to-rect (view-top-left self) (view-bottom-right self) view-rect)             (intersect-rect dummy-rect view-rect view-rect)             (when (view-container container)                 (intersect-rect (view-visible-rect container dummy-rect)                                           (offset-rect view-rect (subtract-points (view-top-left container)                                                                                                  (view-scroll-position container)))                                          view-rect)                 (offset-rect view-rect (* (view-left container) -1) (* (view-top container) -1)))             view-rect))))(defmethod view-visible-p ((self simple-view))   (rlet ((view-visible-rect :rect))      (not (empty-rect-p (view-visible-rect self view-visible-rect)))))(defmethod view-completely-visible-p ((self simple-view))   (rlet ((view-rect :rect                                :TopLeft (view-top-left self)                               :BottomRight (view-bottom-right self))             (visible-rect :rect))      (equal-rect view-rect (view-visible-rect self visible-rect))))(defmethod view-cutted-borders ((self simple-view))   (rlet ((visible-rect :rect))      (view-visible-rect self visible-rect)      (if (empty-rect-p visible-rect)         '(top bottom left right)         (let ((cutted-borders nil)                 (container (view-container self)))            (rlet ((container-visible-rect :rect))               (view-visible-rect container container-visible-rect)               (offset-rect visible-rect (view-top-left container))               (when (= (rref visible-rect :rect.top)                               (rref container-visible-rect :rect.top))                   (push 'top cutted-borders))               (when (= (rref visible-rect :rect.left)                               (rref container-visible-rect :rect.left))                   (push 'left cutted-borders))               (when (= (rref visible-rect :rect.bottom)                               (rref container-visible-rect :rect.bottom))                   (push 'bottom cutted-borders))               (when (= (rref visible-rect :rect.right)                              (rref container-visible-rect :rect.right))                   (push 'right cutted-borders))               cutted-borders)))))(defmethod make-view-completely-visible ((self simple-view))   (when (wptr self)       (let ((cutted-borders (view-cutted-borders self))               (container (view-container self))               (margin 3))          (rlet ((visible-rect :rect))             (view-visible-rect self visible-rect)             (cond ((empty-rect-p visible-rect)                        (set-view-scroll-position container (subtract-points (view-top-left self)                                                                                                              (make-point margin margin)))                        (invalidate-view container))                       ((and (member 'top cutted-borders)                                (member 'left cutted-borders))                         (offset-view-scroll-position container                                                              (- (rref visible-rect :rect.right)                                                                 (rref visible-rect :rect.left)                                                                 (view-width self)                                                                 margin)                                                             (- (rref visible-rect :rect.bottom)                                                                 (rref visible-rect :rect.top)                                                                 (view-height self)                                                                 margin)))                       ((and (member 'top cutted-borders)                                (member 'right cutted-borders))                         (offset-view-scroll-position container                                                                         (+ (- (view-width self)                                                                                (- (rref visible-rect :rect.right)                                                                                    (rref visible-rect :rect.left)))                                                                            margin)                                                                        (- (rref visible-rect :rect.bottom)                                                                            (rref visible-rect :rect.top)                                                                            (view-height self)                                                                            margin)))                       ((and (member 'bottom cutted-borders)                                (member 'right cutted-borders))                         (offset-view-scroll-position container                                                              (+ (- (view-width self)                                                                     (- (rref visible-rect :rect.right)                                                                         (rref visible-rect :rect.left)))                                                                 margin)                                                             (+ (- (view-height self)                                                                     (- (rref visible-rect :rect.bottom)                                                                         (rref visible-rect :rect.top)))                                                                 margin)))                       ((and (member 'bottom cutted-borders)                                (member 'left cutted-borders))                         (offset-view-scroll-position container                                                                         (- (rref visible-rect :rect.right)                                                                            (rref visible-rect :rect.left)                                                                            (view-width self)                                                                            margin)                                                                        (+ (- (view-height self)                                                                                (- (rref visible-rect :rect.bottom)                                                                                    (rref visible-rect :rect.top)))                                                                            margin)))                       ((member 'bottom cutted-borders)                         (offset-view-scroll-position container                                                              0                                                             (+ (- (view-height self)                                                                     (- (rref visible-rect :rect.bottom)                                                                         (rref visible-rect :rect.top)))                                                                 margin)))                       ((member 'right cutted-borders)                         (offset-view-scroll-position container                                                              (+ (- (view-width self)                                                                     (- (rref visible-rect :rect.right)                                                                         (rref visible-rect :rect.left)))                                                                 margin)                                                             0))                       ((member 'top cutted-borders)                         (offset-view-scroll-position container                                                              0                                                             (- (rref visible-rect :rect.bottom)                                                                 (rref visible-rect :rect.top)                                                                 (view-height self)                                                                 margin)))                       ((member 'left cutted-borders)                         (offset-view-scroll-position container                                                              (- (rref visible-rect :rect.right)                                                                 (rref visible-rect :rect.left)                                                                 (view-width self)                                                                 margin)                                                             0)))))));------------------------------------------------------------------------------------(defmethod view-correct-position ((window simple-view) (reference-window simple-view) &optional (correction 0))   (let* ((reference-position (view-position reference-window))             (reference-size (view-size reference-window))             (reference-left (1- (point-h reference-position)))             (reference-right (+ (point-h reference-position) (point-h reference-size) 2))             (reference-top (- (point-v reference-position) 18))             (reference-bottom  (+ (point-v reference-position) (point-v reference-size) 2))             (space-left reference-left)             (space-right (- *screen-width* reference-right))             (space-top (- reference-top 21))             (space-bottom (- *screen-height* reference-bottom))             (own-size (view-size window))             (needed-space-width (+ (point-h own-size) 3))             (needed-space-height (+ (point-v own-size) 21)))  ; title-height and bottom-margin      (cond ((and (<= needed-space-width (+ (- *screen-width* reference-left) correction))                        (<= needed-space-height space-top))                 (make-point (+ 1 reference-left correction)                                     (- reference-top needed-space-height -18)))                ((and (<= needed-space-width space-right)                         (<= needed-space-height (- *screen-height* reference-top correction)))                  (make-point (1+ reference-right)                                      (+ reference-top 18 correction)))                ((and (<= needed-space-width space-left)                         (<= needed-space-height (- *screen-height* reference-top correction)))                  (make-point (- reference-left needed-space-width -1)                                      (+ reference-top 18 correction)))                ((and (<= needed-space-height space-bottom)                         (<= needed-space-width (+ (- *screen-width* reference-left) correction)))                  (make-point (+ 1 reference-left correction)                                      (+ reference-bottom 19)))                (t                   (make-point (1+ (round (/ (- *screen-width* needed-space-width)                                                           2)))                                      (round (+ (/ (- *screen-height* 21 needed-space-height)                                                         2)                                                     39)))))))(defmethod view-needs-update ((self simple-view))   (when (view-window self)       (rlet ((view-rect :rect                                   :topleft (view-to-window self #@(0 0))                                   :bottomright (view-to-window self (view-size self))))          (with-focused-view (view-window self)              (#_RectInRgn  view-rect (rref (wptr self) :WindowRecord.visrgn))))))(defmethod view-outline-rect ((self simple-view))   (values (view-to-global self #@(0 0))                (view-to-global self (view-size self))))(defmethod view-outline-rect ((self window))   (values (subtract-points (view-to-global self #@(0 0)) #@(1 19))                (add-points (view-to-global self (view-size self)) #@(2 2))));-----------------------------------------------------------------------------(defmethod view-frame-rect ((self simple-view)  left &optional top right bot)    (with-focused-view self         (with-pen (:PatXor *black-pattern* 1 1 self)              (ccl::with-rectangle-arg (rect left top right bot) (#_FrameRect rect)))))(defun explode (start-tl start-br end-tl end-br &key (delay 0.05))   (let ((top-explode-distance-h (- (point-h end-tl) (point-h start-tl)))           (top-explode-distance-v (- (point-v end-tl) (point-v start-tl)))           (bottom-explode-distance-h (- (point-h end-br) (point-h start-br)))           (bottom-explode-distance-v (- (point-v end-br) (point-v start-br))))      (do ((top-add-h 0 (round top-explode-distance-h step))             (top-add-v 0 (round top-explode-distance-v step))             (bottom-add-h 0 (round bottom-explode-distance-h step))             (bottom-add-v 0 (round bottom-explode-distance-v step))             (step 128 (/ step 2)))            ((< step 0.5))         (with-focused-view *WMgr-view*             (view-frame-rect *WMgr-view*                                           (+ (point-h start-tl) top-add-h)                                          (+ (point-v start-tl) top-add-v)                                          (+ (point-h start-br) bottom-add-h)                                          (+ (point-v start-br) bottom-add-v))             (sleep delay)             (view-frame-rect *WMgr-view*                                           (+ (point-h start-tl) top-add-h)                                          (+ (point-v start-tl) top-add-v)                                          (+ (point-h start-br) bottom-add-h)                                          (+ (point-v start-br) bottom-add-v))))))(defun implode (start-tl start-br end-tl end-br &key (delay 0.05))   (let ((top-explode-distance-h (- (point-h start-tl) (point-h end-tl)))           (top-explode-distance-v (- (point-v start-tl) (point-v end-tl)))           (bottom-explode-distance-h (- (point-h start-br) (point-h end-br)))           (bottom-explode-distance-v (- (point-v start-br) (point-v end-br))))      (do ((top-add-h top-explode-distance-h                                (round top-explode-distance-h step))             (top-add-v top-explode-distance-v                               (round top-explode-distance-v step))             (bottom-add-h bottom-explode-distance-h                                     (round bottom-explode-distance-h step))             (bottom-add-v bottom-explode-distance-v                                     (round bottom-explode-distance-v step))             (step 2 (* step 2)))            ((> step 128))         (with-focused-view *WMgr-view*             (view-frame-rect *WMgr-view*                                           (+ (point-h end-tl) top-add-h)                                          (+ (point-v end-tl) top-add-v)                                          (+ (point-h end-br) bottom-add-h)                                          (+ (point-v end-br) bottom-add-v))             (sleep delay)             (view-frame-rect *WMgr-view*                                           (+ (point-h end-tl) top-add-h)                                          (+ (point-v end-tl) top-add-v)                                          (+ (point-h end-br) bottom-add-h)                                          (+ (point-v end-br) bottom-add-v))))))             (defmethod view-explode ((self simple-view) topleft bottomright &key (delay 0.05))   (explode (view-to-global self #@(0 0)) (view-to-global self (view-size self))                 topleft bottomright                 :delay delay))(defmethod view-implode ((self simple-view) topleft bottomright &key (delay 0.05))   (implode (view-to-global self #@(0 0)) (view-to-global self (view-size self))                  topleft bottomright                  :delay delay))(defmethod implode-to-origin ((di simple-view) delta)   (let ((new-pos (view-to-global di delta)))      (window-select (view-window di))      (implode new-pos                     (add-points new-pos (view-size di))                     (view-to-global di #@(0 0))                     (view-to-global di (view-size di))                     :delay 0.01)));---------------------------------------------------------------------------------------                 (defmethod focusing-view ((sv simple-view)) (view-container sv))(defmethod focusing-view ((v view)) v)(defmethod focused-corners ((sv simple-view)) (view-corners sv))(defmethod focused-corners ((v view))         (values #@(0 0) (view-size v)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; hiding views (as per HideDItem & ShowDItem IM IV p.59)(defmethod view-hide ((sv simple-view))  (when (view-shown-p sv)    (offset-view-position sv #.(make-point $di-hide-h-offset 0))))(defmethod view-show ((sv simple-view))  (unless (view-shown-p sv)    (offset-view-position sv #.(make-point (- $di-hide-h-offset) 0))))(defmethod view-shown-p ((sv simple-view))  (< (point-h (view-position sv)) #.$di-hidden-const))(defmethod view-shown-position ((sv simple-view))  (if (view-shown-p sv)    (view-position sv)    (subtract-points (view-position sv) #.(make-point $di-hide-h-offset 0))));--------------------------------------------------------------------------(defmethod get-back-color ((sv simple-view))  *white-color*)