(in-package :oou)(oou-provide :view-ce);*****************************************************************                                    ;; Copyright © 1991-96 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;; methods for the view class; ;; Changes (worth to be mentioned):; ------------------------------; 11/96  dieter: add-view-splitter enhanced ;;*****************************************************************;*****************************************************************(oou-dependencies :QuickDraw-u                  :unibas-macros                  :splitter-di)(export '(hide-subview show-subview add-view-splitter          all-subviews));---------------------------------------------------------------------------(defmethod hide-subview ((self view) subview)  (when (memq subview (subviews self))    (set-view-container subview nil)))(defmethod show-subview ((self view) subview &optional position)  (set-view-container subview self)  (when position    (set-view-position subview position)))(defmethod add-view-splitter ((self view) splitter-description)  (let* ((direction (car splitter-description))         (splitted-views (cadr splitter-description))         (splitter (make-instance  (or (fifth splitter-description)                                       'view-splitter)                     :direction direction                     :splitted-views splitted-views                     :view-container self                     :view-size (or (fourth splitter-description)                                    (if (eq direction :vertical)                                      #@(16 5)                                      #@(5 16)))                     :after-split-function (sixth splitter-description)                     :min-size (or (third splitter-description)                                   40))))    splitter))(defmethod insert-view-splitter ((first-view simple-view) (second-view simple-view) &key (direction :horizontal)                                 (splitter-class 'view-splitter) splitter-size after-split-function                                 (view-min-size 40))                                   (make-instance splitter-class    :direction direction    :splitted-views (list first-view second-view)    :view-container (view-window first-view)    :view-size (or splitter-size                   (if (eq direction :vertical)                     #@(16 5)                     #@(5 16)))    :after-split-function after-split-function    :min-size view-min-size))                                 (defmethod container-window ((self view))  (do ((item self (view-container item)))      ((or (null item)           (typep item 'window))       item)))(defmethod all-subviews ((self view) &optional subview-type)  (labels ((all-subs (list-of-views)             (cond ((null list-of-views) nil)                   ((listp list-of-views)                    (append  (all-subs (car list-of-views))                             (all-subs (cdr list-of-views))))                   ((typep list-of-views 'view)                    (cons list-of-views                          (all-subs (subviews list-of-views))))                   (t (list list-of-views)))))    (let ((result (all-subs (subviews self))))      (if subview-type        (delete-if-not #'(lambda (view)                           (if (listp subview-type)                             (dolist (type subview-type)                               (when (typep view type)                                 (return t)))                             (typep view subview-type)))                       result)        result))))(defmethod set-view-at-grid-position ((self view) subview delta)  (let* ((new-pos (add-points (view-top-left subview) delta))         (origin (view-origin self))         (bottomright (add-points (view-bottom-right self)                                  origin)))    (if (and (point<= origin new-pos)             (point<= new-pos bottomright))      (set-view-position subview new-pos)      (implode-to-origin subview delta))))(defmethod set-view-at-grid-position ((self window) (subview window) delta)  (let* ((new-pos (add-points (view-top-left subview) delta)))    (set-view-position subview                        (point-h new-pos)                       (min (max (point-v new-pos)                                 *menubar-bottom*)                            *screen-height*))))         