(in-package :oou)(oou-provide :fred-mixin-ce);*****************************************************************                                    ;; Copyright © 1991-97 Institut fuer Informatik, University of Basel, Switzerland ; All Rights Reserved;; Author: Dieter Holz;;  some methods concering fred; ;; Changes (worth to be mentioned):; ------------------------------; none ;;*****************************************************************;*****************************************************************(in-package :ccl)(require 'fredenv)(in-package :oou)(oou-dependencies :simple-view-ce                                ) (export '(in-selection in-text-area                 ));---------------------------- -------------------------------------(defconstant *wsp&cr* #.(let ((str (make-string 7)))                                                       (setf (schar str 0) #\Space)                                                       (setf (schar str 1) #\^I)                                                       (setf (schar str 2) #\^L)                                                       (setf (schar str 3) #\^@)                                                       (setf (schar str 4) #\^J)                                                       (setf (schar str 5) (code-char #xCA))                                                       (setf (schar str 6) #\newline)                                                       str))(defconstant *wsp&cr2* #.(let ((str (make-string 7)))                                                         (setf (schar str 0) #\Space)                                                         (setf (schar str 1) #\^M)                                                         (setf (schar str 2) #\^I)                                                         (setf (schar str 3) #\^L)                                                         (setf (schar str 4) #\^@)                                                         (setf (schar str 5) #\^J)                                                         (setf (schar str 6) (code-char #xCA))                                                         str))(defconstant *wsp* #.(let ((str (make-string 6)))                                                (setf (schar str 0) #\Space)                                                (setf (schar str 1) #\^I)                                                (setf (schar str 2) #\^L)                                                (setf (schar str 3) #\^@)                                                (setf (schar str 4) #\^J)                                                (setf (schar str 5) (code-char #xCA))                                                str))                                                ;-------------------------------------------------------------------(defmethod in-selection ((self fred-mixin) where)  (point-in-region-p (ccl::fr.selrgn (frec self)) where))(defmethod in-text-area ((self fred-mixin) where)  (and (>= (point-h where) 0)       (>= (point-v where) 0)       (< (point-h where) (- (view-width self) (* 2 (ccl::fr.margin (frec self)))))       (< (point-v where) (view-height self))))(defmethod wrap-start-position ((self fred-mixin) start-pos &key (consider-indent t))   (declare (optimize (speed 3)                      (safety 0)                      (compilation-speed 0)                      (space 0)))  (let* ((buff (fred-buffer self))         (line-start-pos (buffer-line-start buff start-pos))         (first-real-char-pos (ccl::buffer-forward-find-not-char buff *wsp&cr* line-start-pos (buffer-line-end buff start-pos)))         (indent-string (when (and consider-indent                                   first-real-char-pos)                          (buffer-substring buff line-start-pos (1- first-real-char-pos))))         (indent-string-length (length indent-string)))    (do* ((i -1 (1- i))          (line-start (buffer-line-start buff start-pos i)                      (buffer-line-start buff start-pos i)))         ((or (= line-start 0)              (if (and consider-indent                       indent-string)                (let ((same-indent-begin (buffer-substring-p buff indent-string line-start)))                  (or (not same-indent-begin)                      (and same-indent-begin                           (find (buffer-char buff (+ line-start indent-string-length)) *wsp&cr*))))                (null (ccl::buffer-forward-find-not-char buff                                                          *wsp&cr*                                                         line-start                                                         (buffer-line-end buff start-pos i)))))          (if  (and (= line-start 0)                    indent-string                    (let ((same-indent-begin (buffer-substring-p buff indent-string line-start)))                      (and same-indent-begin                           (not (find (buffer-char buff (+ line-start indent-string-length)) *wsp&cr*)))))            0            (buffer-line-start buff start-pos (1+ i)))))))(defmethod wrap-end-position ((self fred-mixin) start-pos &key (consider-indent t) (consider-next-indent nil))   "The position before a indented or empty line"  (declare (optimize (speed 3)                      (safety 0)                      (compilation-speed 0)                      (space 0)))  (let* ((buff (fred-buffer self))         (size (buffer-size buff))         (considered-line (if consider-next-indent 1 0))         (line-start-pos (buffer-line-start buff start-pos considered-line))         (first-real-char-pos (ccl::buffer-forward-find-not-char buff *wsp&cr* line-start-pos                                                                  (buffer-line-end buff start-pos considered-line)))         (indent-string (when (and first-real-char-pos                                   consider-indent)                          (buffer-substring buff line-start-pos (1- first-real-char-pos))))         (indent-string-length (length indent-string)))    (do* ((i 1  (1+ i))          (line-start (buffer-line-start buff start-pos i)                      (buffer-line-start buff start-pos i)))         ((or (= line-start size)              (if (and consider-indent                       indent-string)                (let ((same-indent-begin (buffer-substring-p buff indent-string line-start)))                  (or (not same-indent-begin)                      (and same-indent-begin                           (find (buffer-char buff (+ line-start indent-string-length)) *wsp&cr*))))                (null (ccl::buffer-forward-find-not-char buff                                                          *wsp&cr*                                                         line-start                                                         (buffer-line-end buff start-pos i)))))          (if (= line-start size)            line-start            (- line-start 1))))))(defmethod paragraph-bounds ((w fred-mixin))  (declare (optimize (speed 3)                      (safety 0)                      (compilation-speed 0)                      (space 0)))  (multiple-value-bind (b e) (selection-range w)    (when (eq b e)      (let* ((buf (fred-buffer w)))        (setf b (1- (or (ccl::buffer-forward-find-not-char buf *wsp&cr* (wrap-start-position w (buffer-position buf)))                        (buffer-size buf))))        (setf e (wrap-end-position w (buffer-position buf)))))    (values b e)))(defmethod fred-line-height ((self fred-mixin))  (multiple-value-bind (ascent descent widmax leading) (font-info (view-font self))    (declare (ignore widmax))    (+ ascent descent leading)))(defmethod line-number ((self fred-mixin) &optional (buffer-position (buffer-position (fred-buffer self))))  (do ((buffer (fred-buffer self))       (buffer-size (1- (buffer-size (fred-buffer self))))       (compare-position (buffer-line-end (fred-buffer self) 0)                         (when (< compare-position buffer-size)                           (buffer-line-end buffer (1+ compare-position))))       (line-number 0 (1+ line-number)))      ((or (null compare-position)           (>= compare-position buffer-position)) line-number)))(defmethod total-height ((fred fred-mixin) &aux (sum 0))  (dovector (height (ccl::fr.lineheights (frec fred)))    (setf sum (+ height sum)))  sum)(defmethod fr-line-width ((fred fred-mixin) &optional (pos (buffer-position (fred-buffer fred))))  (+ (fred-hpos fred (buffer-line-end (fred-buffer fred) pos))     (fred-hscroll fred)     (* 2 (ccl::fr.margin (frec fred)))))(defmethod fr-line-height ((fred fred-mixin) &optional (line-number (buffer-line (fred-buffer fred))))  (aref (ccl::fr.lineheights (frec fred)) line-number))(defmethod fr-line-ascent ((fred fred-mixin) &optional (line-number (buffer-line (fred-buffer fred))))  (aref (ccl::fr.lineascents (frec fred)) line-number))(defmethod fr-line-descent ((fred fred-mixin) &optional (line-number (buffer-line (fred-buffer fred))))  (aref (ccl::fr.linedescents (frec fred)) line-number))(defmethod total-line-vpos ((fred fred-mixin) &optional (line-number (buffer-line (fred-buffer fred))) &aux (sum 0))  (dotimes (i line-number)    (setf sum (+ (fr-line-height fred i))))  sum)(defmethod fr-cursor-hpos ((fred fred-mixin))  (+ (point-h (ccl::fr.curpoint (frec fred)))     (fred-hscroll fred)))(defmethod find-all-string-pos ((fred fred-mixin) string &key (start 0) (end t))  (let ((buff (fred-buffer fred))        (string-length (length string)))    (when (< start (buffer-size buff))      (do ((string-pos (buffer-string-pos buff string :start start :end end)                       (buffer-string-pos buff string :start (+ string-pos string-length) :end end))           (positions nil))          ((null string-pos) (nreverse positions))        (push string-pos positions)))))(defmethod get-substring ((fred fred-mixin) start &key stop-char (max-chars 80) (ignore-strings (list *wsp&cr* "{\"")))  (when (< start (buffer-size (fred-buffer fred)))    (let* ((buf (fred-buffer fred))           (last-stop (min (buffer-size buf) (+ start max-chars)))           (first-char-pos (or (ccl::buffer-forward-find-not-char buf                                                                   (format nil "~{~A~}" ignore-strings)                                                                  start last-stop)                               start))           (last-char-pos (or (when stop-char                                (ccl::buffer-forward-find-char buf stop-char (1- first-char-pos) last-stop))                              last-stop)))      (values (buffer-substring buf (max (1- first-char-pos) start) (1- last-char-pos))              (1- last-char-pos)))))     