(in-package :oou)(oou-provide :WMgr-view);-----------------------------------------------------------; WMgr-view.Lisp;;  Copyright © 1991 Northwestern University Institute for the Learning Sciences;  Copyright © 1992-96 University of Basel Institut fuer Informatik; All Rights Reserved;; authors: Michael S. Engber;          Dieter Holz;; Provides a view based on the Window Manager port;; ; Changes (worth to be mentioned):;------------------------;; August 1992 Dieter: Added some functions from menu-enhancements;;-----------------------------------------------------------(export '(*WMgr-view* push-after with-wmgr-view));------------------------------------------------------------(defclass WMgr-view (simple-view) ())(defmethod view-origin ((sv  WMgr-view)) (declare (ignore sv)) #@(0 0))(defmethod view-clip-region ((sv WMgr-view))  (pref (wptr sv) :CGrafPort.visRgn))(defmethod wptr ((sv WMgr-view))  (if (pointerp (slot-value sv 'wptr))    (slot-value sv 'wptr)    (setf (slot-value sv 'wptr)          (rlet ((pp :pointer))            (if *color-available*               (#_GetCWMgrPort pp)              (#_GetWMgrPort pp))            (%get-ptr pp)))))(defvar *WMgr-view*);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;#|; from menu-enhancements(defmethod view-clip-region ((sv WMgr-view))    (declare (ignore sv))    (#_SetRectRgn :ptr ccl::*simple-view-clip-region*       :signed-integer -32768 :signed-integer -32768       :signed-integer 32767 :signed-integer 32767)    ccl::*simple-view-clip-region*);; Routine added to get the appropriate window manager port Markt(defun get-wmgrport ()    (%get-ptr (%int-to-ptr (if *color-available*                                                   #$WMgrCPort   ; colorQd window-manager                                                  #$WMgrPort    ; old Qd window manager                                                  ))))(defmethod wptr ((sv WMgr-view))    (if (pointerp (slot-value sv 'wptr))        (slot-value sv 'wptr)        (setf (slot-value sv 'wptr) (get-wmgrPort))))|#(defun init-wmgr ()  (setq *WMGR-view* (make-instance 'WMgr-view))  (wptr *wmgr-view*)                    ; access the window pointer field  *wmgr-view*)(defun remove-wmgr ()  (makunbound '*WMGR-view*))(defun get-wmgr ()  (unless (and (boundp '*WMGR-view*)               *wmgr-view*)    (init-wmgr))  *WMGR-view*)(defmacro with-wmgr-view (&body body)  `(progn (get-wmgr)          (with-focused-view *WMGR-view*            ,@body            )))(defmacro push-after (el list)  ;; add the element to the end of the list   `(setf ,list (nconc ,list (list ,el))))(defun check-wmgr ()  ;; remove and then add #'init-wmgr to end of *lisp-startup-functions*  (setq *restore-lisp-functions*        (remove 'init-wmgr *restore-lisp-functions* :key #'function-name))  (push-after #'init-wmgr *restore-lisp-functions*)    ; remove and then add #'remove-wmgr to the front of the *save-exit-functions*  (setq *save-exit-functions*         (remove 'remove-wmgr *save-exit-functions* :key #'function-name))  (push  #'remove-wmgr *save-exit-functions*))(check-wmgr)                            ; fix the startup and exit functions(init-wmgr)                               ; initialize the *wmgr-view*