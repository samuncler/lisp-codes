; -*- Mode:Lisp; Package:CCL; -*-;;	Change History (most recent first):;;  6 2/6/96   akh  change call to _drawchar;;  2 10/12/95 akh  no lap;;  5 4/25/95  akh  make it work when more than one page;;  4 4/24/95  akh  Use frec functions to print thereby getting all the new features such as word wrap;;  3 4/4/95   akh  file got mashed somehow;;  2 4/4/95   akh  get tabwidth from frec, indentation;;  3 3/2/95   akh  surely must be something about base-character;;  (do not edit before this line!!);; EdHardcopy.lisp - hardcopy for Fred windows;; Copyright 1987-1988 Coral Software Corp.;; Copyright 1989-1994 Apple Computer, Inc.;; Copyright 1995 Digitool, Inc.; Modification History;;  9/04/96 slh   window-hardcopy: _SetCursor -> with-cursor;  7/03/96 slh   hc-current-date-str: (ptime 4) -> (ptime); 03/26/96  gb   lowmem accessors.; 03/21/96 bill  (errchk (#_DisposeHandle ...)) => (#_DisposeHandle :errchk ...); 12/05/95 slh   update trap names; 12/3/95 bill   really fix #_DrawChar call for PPC; 11/29/95 bill  (#_GetFInfo :errchk pb) -> (errchk (#_PBGetFInfoSync pb)); 11/30/95 slh   fix _DrawChar call for PPC;  4/17/95 alice draw-hardcopy uses frec code to do the work so we get all the features; fix draw-hardcopy for n.w.o;---------------;03/16/93 bill  *hc-page-header-p*;12/03/92 bill  GB's patch to window-hardcopy makes it work correctly;               for Imagewriter printers.;07/31/92 bill  window-hardcopy now handles fred-dialog-item's as well;               as fred-window's.;-------------- 2.0;01/08/92 gb    A whole month later: use new records.;12/08/91 alice gotta draw the string when font changes;--------------- 2.0b4;10/29/91 alice def-load-pointers => def-ccl-pointers;10/21/91 gb   no more #_PB.;------------- 2.0b3;09/05/91 bill %setport -> set-gworld;08/24/91 gb   new trap syntax.;07/21/91 gb   declaim;------------- 2.0b2;02/14/91 alice draw-hardcopy use draw-text instead of draw-char (about twice the speed);------------- 2.0b1;02/04/91 bill def-load-pointers *hc-pRec*;01/01/91 gb  resident decl in draw-hardcopy.;11/09/90 bill Obey form-feed (#\page) requests.;06/12/90 bill window-buffer -> fred-buffer.;5/7/90   gz Preserve port over _PrOpenPage calls.;02/13/90 gz removed redundant $err-xxx defs.;12/03/89 gz Make it work.;12/16/88 gz New buffers.;11/16/88 gz new fred windows;9/1/88  gz  %signal-error -> %err-disp;6/21/88 jaj catch :error -> catch-error;5/31/88 as  %error -> :error;5/25/88 jaj keywordified rlets;4/12/88 gz  new macptr scheme.;7/25/87 gz  name -> window-title;7/12/87 gb  Provide thyself.;6/22/87 gz  lock pRec around draw-hardcopy.  Get margins from prec, not port.;6/8/87  gz  made window-hardcopy return T if printed, nil if cancelled.;5/21/87 gb  %(h)get-signed-word.;4/19/87 gz  no mac-records.;4/10/87 jaj changed to new records; 3/30/87 gz Load fredenv rather than edlow. title -> name.; 3/1/87  gz New(eval-when (eval compile)   (require 'backquote)   (require 'sysequ)   (require 'toolequ)   (require 'defrecord)   (require 'fredenv)   (defconstant $boldStyle #x100)   (defconstant $italicStyle #x200)   (defconstant $ulineStyle #x400)   (defconstant $outlineStyle #x800)   (defconstant $shadowStyle #x1000)   (defconstant $condenseStyle #x2000)   (defconstant $extendStyle #x4000)   (defconstant $PrintErr #x944)   (defconstant $iPrintSize 120)   (defconstant $prJob.bJDocLoop (%i+ 62 6))   (defconstant $iPrStatSize 26)   (defconstant $bSpoolLoop 1)   (defmacro $pnLoc.h (port &optional (val () val-p))     (if val-p `(%put-word ,port ,val 50) `(%get-signed-word ,port 50)))   (defmacro $pnLoc.v (port &optional (val () val-p))     (if val-p `(%put-word ,port ,val 48) `(%get-signed-word ,port 48))))(declaim (special *hc-left-header* *hc-middle-header* *hc-line-ht*                    *hc-header-font-spec* *hc-left-margin* *hc-right-margin*                     *hc-bottom-margin* *hc-page-hpos* *hc-middle-hpos*                    *hc-header-baseline* *hc-top-margin* *hc-page-number*                    *hc-page-open-p*));(defvar *tab-char-width* 8)(defun print-style-dialog ()  (unwind-protect    (progn       (#_PrOpen)       (prchk $err-printer-load)       (#_SetCursor *ARROW-CURSOR*)       (#_PrStlDialog (get-print-record)))    (#_PrClose)))(defvar *hc-pRec* nil)(def-ccl-pointers *hc-pRec* ()  (setq *hc-pRec* nil))(defun get-print-record (&aux pRec)  (if (null *hc-pRec*)      (unwind-protect        (progn         (setq pRec (#_NewHandle :errchk $iPrintSize))         (#_PrintDefault pRec)         (prchk $err-printer-params)         (setq *hc-pRec* pRec pRec nil))        (when pRec          (setq *hc-pRec* nil)          (#_DisposeHandle :errchk pRec)))      (progn       (#_PrValidate *hc-pRec*)       (prchk $err-printer-params)))  *hc-pRec*); The logic here should be inverted, so that we have a hardcopy stream anybody; could create and write to... Can't do it until the system can handle random; external windows.(defmethod window-hardcopy ((w fred-mixin) &optional (show-dialog t))  (unwind-protect    (progn      (#_PrOpen)      (prchk $err-printer-load)      (let ((pRec (get-print-record)))        (when (or (and (not show-dialog)                       (with-cursor *ARROW-CURSOR*                         (#_prjobmerge pRec pRec)                         t))                  (with-cursor *ARROW-CURSOR*                    (#_PrJobDialog pRec))                  (throw :cancel :cancel))          ;_PrOpenDoc puts up a dialog window which causes the event system          ;to get confused.  So we do the whole thing without interrupts, and          ;make sure to clean up before handling errors.          (handler-case            (let ((*hc-page-open-p* nil) (*break-on-errors* nil))              (with-macptrs (saved-port saved-device)                (get-gworld saved-port saved-device)                (without-interrupts                 (unwind-protect                   (progn                     (with-macptrs ((port (#_PrOpenDoc pRec (%null-ptr) (%null-ptr))))                       (set-gworld port)                       (unwind-protect                         (with-dereferenced-handle (ppRec pRec)                           ppRec                           (prchk $err-printer-start)                           (draw-hardcopy w))                         (when *hc-page-open-p* (hc-close-page))                         (#_PrCloseDoc (%getport)))))                   (set-gworld saved-port saved-device)))                (when (eq (%hget-byte pRec $prJob.bJDocLoop) $bSpoolLoop)                  (prchk)                  (%stack-block ((StRec $iPrStatSize))                    (#_PrPicFile pRec (%null-ptr) (%null-ptr) (%null-ptr) StRec)                    (set-gworld saved-port saved-device))                  (prchk))))            (error (c) (error c)))          t)))    (#_PrClose)))#|(defmethod draw-hardcopy ((w fred-mixin) &aux (port (%getport))                          (buffer (fred-buffer w))                          (window (view-window w))                          (frec (frec w))                          (file-modcnt (slot-value w 'file-modcnt)))  (declare (resident))  (if (setq *hc-left-header* (window-filename w))    (progn      (setq *hc-left-header* (namestring *hc-left-header*))      (if (and (fixnump file-modcnt)               (not (eql file-modcnt (buffer-modcnt buffer))))        (setq *hc-left-header* (%str-cat (string (slot-value window 'modified-marker))                                         *hc-left-header*)              *hc-middle-header* (hc-current-date-str))        (setq *hc-middle-header* (hc-file-date-str (window-filename w)))))    (setq *hc-left-header*           (if (typep window 'window)            (%str-cat "Window: " (window-title window))            "")          *hc-middle-header* (hc-current-date-str)))  (setq *hc-line-ht* (+ (%buffer-maxasc buffer)                        (%buffer-maxdsc buffer)                        (fr.lead frec)))  (multiple-value-bind (ff ms) (buffer-font-codes buffer)  ; this is a random font today    (setq *hc-header-font-spec*          (list (point-v ff) (%ilogior (point-h ff) $italicStyle) (point-h ms))))  (hc-compute-margins)  (setq *hc-page-number* 0)  (let ((string (make-string 255 :element-type 'base-character))(idx 0)(str-loc 0))    (macrolet ((dumpstring ()                 `(progn (when (> idx 0)                           (with-pstrs ((sp string))                             (#_DrawText sp 1 idx))                           (setq idx 0))                         (setq str-loc ($pnLoc.h port)))))            (let* ((pos 0) (end (buffer-size buffer)) tabwidth maxloc fidx llen char-width)        (hc-start-page)        (tagbody          start-line          (setq str-loc ($pnLoc.h port))          (setq llen (- *hc-left-margin*))          draw-line          (if (eq pos end) (go next-line))          (unless (eq fidx (setq fidx (buffer-char-font-index buffer pos)))            (multiple-value-bind (ff ms) (buffer-font-index-codes buffer fidx)              (dumpstring)              (%put-point port ff $txFont)              (%put-point port ms $txMode)              (rlet ((finfo :fontinfo))                (#_GetFontInfo finfo)                (setq char-width (rref finfo fontinfo.widMax))                (setq maxloc (%i- *hc-right-margin* char-width))                (setq tabwidth (* char-width (fred-tabcount w))))))                  (let ((c (buffer-char buffer pos)))                    (setq pos (%i+ pos 1))            (case c              ((#\Newline #\page #\tab)  ; fred doesnt heed #\page               (dumpstring)               (case c                 (#\Newline (go next-line))                 (#\page                   (setf ($pnLoc.v port) *hc-bottom-margin*)                  (go next-line))                 (T ;#\tab                  (let ((loc (%i+ llen (%i+ ($pnLoc.h port) tabwidth))))                    (setq loc (- loc (mod loc tabwidth) llen))                    (when (%i> loc *hc-right-margin*)                      (hc-continue-next-line)                      (setq llen (+ llen (- *hc-right-margin* *hc-left-margin*)))                      (setq loc (- loc *hc-right-margin*)))                    ($pnLoc.h port loc)                    (setq str-loc loc)))))              (T (cond ((neq idx -1)                         (setf (aref string idx) c)                        (setq idx (%i+ idx 1))                        (setq str-loc (%i+ str-loc char-width))                        ; getting near maxloc - be accurate                        (when (%i> str-loc maxloc)                          (dumpstring)                          (setq idx -1)))                       (t (when (%i> ($pnLoc.h port) maxloc)                            (setq llen (%i+ llen                                            (%i- ($pnLoc.h port) *hc-left-margin*)))                            (hc-continue-next-line)                            (setq str-loc ($pnLoc.h port))                            (setq idx 0))                          (#_DrawChar c))))))          (go draw-line)          next-line          (unless (eq pos end)            (hc-next-line)            (go start-line)))        (dumpstring)        (hc-close-page)))))|#    (defparameter *hc-page-header-p* t)(defun hc-compute-margins ()  (hc-put-font *hc-header-font-spec*)  (rlet ((finfo :fontinfo))    (#_GetFontInfo finfo)    (setq *hc-left-margin* (+ (%hget-word *hc-prec* 10) 7) ;bounds.left          *hc-right-margin* (- (%hget-word *hc-prec* 14) 7) ;bounds.right          *hc-bottom-margin* (- (%hget-word *hc-prec* 12) *hc-line-ht*) ;bounds.bottom          *hc-page-hpos* (- *hc-right-margin* (hc-width "Page 00000"))          *hc-middle-hpos* (ash (- (+ *hc-left-margin*                                      (hc-width *hc-left-header*)                                      *hc-page-hpos*)                                   (hc-width *hc-middle-header*)) -1)          *hc-header-baseline* (+ (%hget-word *hc-prec* 8) ;bounds.top                                  (rref finfo fontinfo.ascent))          *hc-top-margin* (+ (if *hc-page-header-p* *hc-header-baseline* 0)                             (rref finfo fontinfo.descent)                             *hc-line-ht*                             *hc-line-ht*))))(defun hc-continue-next-line ()   (hc-continuation t)   (hc-next-line)   (hc-continuation nil))(defun hc-next-line (&aux v)  (with-macptrs ((port (%getport)))    (setq v (%i+ *hc-line-ht* ($pnLoc.v port)))    (if (%i> v *hc-bottom-margin*)      (let* ((fnum (rref port grafport.txfont))             (fstyle (rref port grafport.txface))             (fsize (rref port grafport.txsize)))        (hc-close-page)        (hc-start-page)        (rset port grafport.txfont fnum)        (rset port grafport.txface fstyle)        (rset port grafport.txsize fsize))      (progn        ($pnLoc.v port v)        ($pnLoc.h port *hc-left-margin*)))))(defun hc-start-page ()  (with-macptrs ((port (%getport)))    (hc-open-page)    (setq *hc-page-number* (+ *hc-page-number* 1))    (when *hc-page-header-p*      (hc-put-font *hc-header-font-spec*)      ($pnLoc.v port *hc-header-baseline*)      ($pnLoc.h port *hc-left-margin*)      (hc-string *hc-left-header*)      ($pnLoc.h port *hc-middle-hpos*)      (hc-string *hc-middle-header*)      ($pnLoc.h port *hc-page-hpos*)      (hc-string "Page ")      (hc-positive-int *hc-page-number*))    ($pnLoc.v port *hc-top-margin*)    ($pnLoc.h port *hc-left-margin*)))(defun hc-close-page ()  (without-interrupts   (#_PrClosePage (%getport))   (setq *hc-page-open-p* nil))  (prchk))(defun hc-open-page ()  (without-interrupts   (with-macptrs ((port (%getport)))     (#_PrOpenPage port (%null-ptr))     (set-gworld port))   (setq *hc-page-open-p* t))  (prchk))#|(defun end-hardcopy ()   (when *hc-port*     (when *hc-page-open-p* (hc-close-page *hc-port*))     (without-interrupts        (set-gworld *hc-port*)        (_PrCloseDoc *hc-port*)        (setq *hc-port* nil)))   (set-gworld *hc-lisp-port*))|#(defun prchk (&optional (errnum $err-printer))  (let* ((error-result (#_LMGetPrintErr)))    (unless (%izerop error-result)      ;      (end-hardcopy)      (%err-disp errnum error-result))))(defun hc-put-font (spec)  (with-macptrs ((port (%getport)))    (rset port grafport.txfont (pop spec))    (rset port grafport.txface (pop spec))    (rset port grafport.txsize (car spec))))(defun hc-string (s)  (with-pstrs ((sp s))    (#_DrawString  sp)))(defun hc-text (s start count)  (with-pstrs ((sp s))    (#_DrawText sp start count)))(defun hc-width (s)  (with-pstrs ((sp s))    (#_StringWidth sp)))(defun hc-positive-int (n)  (multiple-value-bind (q r) (floor n 10)    (unless (eql q 0) (hc-positive-int q))    (#_DrawChar :character (code-char (%i+ r (%char-code #\0))))))(defun hc-continuation (end-p &aux (h (if end-p (+ *hc-right-margin* 1)                                          (- *hc-left-margin* 5)))                                   (v ($pnLoc.v (%getport))))   (unless end-p (setq v (%i- v 2)))   (%stack-block ((srcrect 8) (dstrect 8) (srcbits 14) (data 14))      (%put-word data #x4200 0)      (%put-word data #x2400 2)      (%put-word data #x1800 4)      (%put-word data #x1800 6)      (%put-word data #xA500 8)      (%put-word data #xC300 10)      (%put-word data #xE700 12)      (%put-ptr srcbits data)      (%put-word srcbits 2 4)      (%put-ptr srcbits (%null-ptr) 6)      (%put-word srcbits 7 10)      (%put-word srcbits 8 12)      (%put-word srcrect 0 0)      (%put-word srcrect (if end-p 0 4) 2)      (%put-word srcrect 7 4)      (%put-word srcrect (if end-p 4 8) 6)      (%put-word dstrect (- v 5) 0)      (%put-word dstrect h 2)      (%put-word dstrect (+ v 2) 4)      (%put-word dstrect (+ h 4) 6)      (#_CopyBits srcbits (rref (%getport) grafport.portbits)                 srcrect dstrect 1 (%null-ptr))))(defun hc-file-date-str (file-name)  (with-pstr (s (mac-namestring file-name))    (%stack-block ((pb 80))      (%put-ptr pb s $ioFileName)      (%put-word pb 0 $ioVRefNum)      (%put-byte pb 0 $ioFileType)      (%put-word pb 0 $ioFDirIndex)      (errchk (#_PBGetFInfoSync pb))      (hc-date-to-str (%inc-ptr pb $ioFlMdDat)))))(defun hc-current-date-str ()  (let ((time (#_LMGettime)))    (with-macptrs ((ptime))      (%put-long ptime time)      (hc-date-to-str ptime))))#|;    (%put-word time (%get-word (%int-to-ptr $Time)));    (%put-word time (%get-word (%int-to-ptr $Time) 2) 2)    (lap-inline ()      (:variable time)      (move.l (varg time) atemp0)      (move.l (atemp0 $macptr.ptr) atemp0)      (move.l (@ $Time) (atemp0)))    (hc-date-to-str time)))|#(defun hc-date-to-str (dateptr &aux timeptr n)  (%stack-block ((str 120))    (#_IUDateString (%get-long dateptr) 2 str)    (setq timeptr (%inc-ptr str (setq n (%i+ (%get-byte str) 2))))    (#_IUTimeString (%get-long dateptr)  t timeptr)    (setq n (%i+ n (%get-byte timeptr)))    (%put-byte timeptr (%char-code #\space))    (%put-byte timeptr (%char-code #\space) -1)    (%str-from-ptr (%inc-ptr str 1) n)))(defmethod draw-hardcopy ((w fred-mixin) &aux                          (buffer (fred-buffer w))                          (window (view-window w))                          (file-modcnt (slot-value w 'file-modcnt)))  (declare (resident))    (if (setq *hc-left-header* (window-filename w))    (progn      (setq *hc-left-header* (namestring *hc-left-header*))      (if (and (fixnump file-modcnt)               (not (eql file-modcnt (buffer-modcnt buffer))))        (setq *hc-left-header* (%str-cat (string (slot-value window 'modified-marker))                                         *hc-left-header*)              *hc-middle-header* (hc-current-date-str))        (setq *hc-middle-header* (hc-file-date-str (window-filename w)))))    (setq *hc-left-header*           (if (typep window 'window)            (%str-cat "Window: " (window-title window))            "")          *hc-middle-header* (hc-current-date-str)))  (setq *hc-line-ht* (+ (%buffer-maxasc buffer)                        (%buffer-maxdsc buffer)                        (fr.lead (frec w))))  (multiple-value-bind (ff ms) (buffer-font-codes buffer)    (setq *hc-header-font-spec*          (list (point-v ff) (%ilogior (point-h ff) $italicStyle) (point-h ms))))  (hc-compute-margins)  (let* ((height *hc-bottom-margin*)         (ivpos *hc-top-margin*)         (frec (make-frec buffer nil (make-point (- *hc-right-margin* *hc-left-margin*)                                                 height)))         (pos 0))    (setq *hc-page-number* 0)    (loop            (setf (fr.nodrawing-p frec) t)      (setf (fr.printing-p frec) t)      (setf (fr.bmod frec) pos)  ; added these      (setf (fr.zmod frec) 0)      (%update-lines-maybe frec pos)      (setf (fr.nodrawing-p frec) nil)      (hc-start-page)      (let* ((numlines (fr.numlines frec))             (linevec (fr.linevec frec))             (lineheights (fr.lineheights frec))             (end-pos pos)             (real-numlines 0)             (vpos ivpos))        (dotimes (i numlines) ; get rid of partial last line if exists          (incf vpos (linevec-ref lineheights i))                    (when (> vpos height)            (return))          (incf end-pos (linevec-ref linevec i))          (incf real-numlines))        (%redraw-screen-lines frec pos 0 (1- real-numlines) ivpos)        (setq pos end-pos)        (set-mark (fr.wposm frec) pos)        (hc-close-page)        (when (>= pos (buffer-size buffer))(return))))))(provide 'edhardcopy)#|	Change History (most recent last):	2	12/29/94	akh	merge with d13|# ;(do not edit past this line!!)