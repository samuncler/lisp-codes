;-*- Mode: Lisp; Package: CCL -*-;;	Change History (most recent first):;;  2 9/4/96   akh  make it work for ppc;;  (do not edit before this line!!); fast-slot-value.lisp;; Optimizing slot value when you know at compile time the class of; the instance whose slot you want.;; Copyright 1989-1994 Apple Computer, Inc.; Copyright 1995-1996 Digitool, Inc.(in-package :ccl); Modification History;; 11/03/96 bill  stop calling %maybe-forwarded-instance so that it is faster than slot-value;(eval-when (:compile-toplevel :execute :load-toplevel)  (export 'fast-slot-value))(eval-when (:compile-toplevel :execute)  (require "LISPEQU"))(in-package :ccl); Redefine these so that they will be inlined.; An MCL bug caused it to forget their lambda expressions.(let ((*warn-if-redefine* nil)      (*warn-if-redefine-kernel* nil))#-ppc-target(defun standard-instance-p (i)  (and (uvectorp i) (eq (%vect-subtype i) $v_instance)))#+ppc-target(defun standard-instance-p (i)  (eq (ppc-typecode i) ppc::subtag-instance)))(declaim (inline %fast-forwarded-instance))(defun %fast-forwarded-instance (instance)  (unless (standard-instance-p instance)    (setq instance (require-type instance 'standard-instance)))  (let ((wrapper (%instance-class-wrapper instance)))    (if (and (eql 0 (%wrapper-instance-slots wrapper))             (%forwarding-forwarded-p (%wrapper-forwarding-info wrapper)))      (%forwarded-instance instance)      instance))); Note that SLOT-NAME, CLASS-NAME, & NO-TYPE-CHECK-OR-FORWARDING are not evaluated.; Pass true for no-type-check-or-forwarding to eliminate type checking and forwarding; of the instance arg. This makes it as fast as possible.; Forwarding is necessary if you have redefined the class or one of its superclasses; and added or removed a slot.(defmacro fast-slot-value (instance slot-name class-name &optional no-type-check-or-forwarding &environment env)  (let* ((slotds (class-instance-slots (find-class class-name)))         (index (position slot-name slotds :key #'slot-definition-name))         (instance-form          (if no-type-check-or-forwarding            instance            `(%fast-forwarded-instance ,instance))))    (unless index      (error "Class ~s has no instance slot named ~s" class-name slot-name))    #-ppc-target    `(ccl::%typed-uvref       #.$v_instance      ,instance-form      ,(1+ index))    #+ppc-target    `(%typed-miscref ppc::subtag-instance                     ,instance-form                      ,(1+ index))))#|; Blindingly fast way of getting the WPTR of a LISTENER instance.(defmacro %listener-wptr (listener)  `(locally (declare (optimize (speed 3) (safety 0)))     (fast-slot-value ,listener wptr listener)))(%listener-wptr (current-listener))|#