; -*- Mode: Lisp; Package: CCL; -*-;; config.lisp - a function to report machine configuration information.;; Copyright 1995 Digitool, Inc.;; This file defines the function ccl::config-info, which prints various;; kinds of information about the current machine, software, and Lisp;; environment. Use it to generate a report of your configuration to send;; along with bug reports, by typing (ccl:config-info).; Change History:; ; 10/09/96 slh   #-ppc-target for swapping info; move export to inside eval-when(in-package :ccl)(eval-when (:execute :compile-toplevel :load-toplevel)  (export 'config-info)  (let ((*warn-if-redefine-kernel* nil))    #-ppc-target (defconstant $slfuns_start #x-16E)    #-ppc-target (defconstant $slfuns_end   #x-172)    (require "COLOR")))(defun config-info (&optional (stream *standard-output*))  (format stream "~&~A~%~%~A~%~%System Version: ~X(hex)~%~%"          (lisp-implementation-version)          (software-version)          (gestalt #$gestaltSystemVersion))  (let ((*standard-output* stream))    (room t))  (terpri)  (terpri)  (flet ((show-ruler ()           (format stream "Gestalt Bits:~16T10987654321098765432109876543210~%"))         (show-rules (c)           (format stream "~16T~c|||||||~c|||||||~c|||||||~c|||||||~%" c c c c))         (show-gestalt (label attr &optional (radix-idx 0))     ; dec, hex, bin           (format stream "~A~16T~[~12D~;~12X(hex)~;~32,'0B~]~%" label radix-idx (gestalt attr))))    (show-ruler)    (show-rules #\v)    (show-gestalt "AddressingMode" #$gestaltAddressingModeAttr 2)    (show-gestalt "FPUType"        #$gestaltFPUType 2)    (show-gestalt "MMUType"        #$gestaltMMUType 2)    (show-gestalt "Hardware"       #$gestaltHardwareAttr 2)    (show-gestalt "OSAttributes"   #$gestaltOSAttr 2)    (show-rules #\^)    (show-ruler)    (terpri stream)    (show-gestalt "MachineType"    #$gestaltMachineType)    (show-gestalt "Processor"      #$gestaltProcessorType)    (show-gestalt "LogRAMSize"     #$gestaltLogicalRAMSize)    (show-gestalt "QDVersion"      #$gestaltQuickdrawVersion 1)    (show-gestalt "ScriptMgrVers"  #$gestaltScriptMgrVersion 1)    (show-gestalt "ScriptCount"    #$gestaltScriptCount))  #-ppc-target  (format stream "~%Swapping: ~A~%EGC:      ~A/~A (available/active)~%PTable:   ~:[not ~;~]in Extensions~%"          (neq (%get-long (%currenta5) $slfuns_start)               (%get-long (%currenta5) $slfuns_end))          (egc-mmu-support-available-p)          (egc-active-p)          (not (null (probe-file (merge-pathnames                                  (findfolder -1 #$kextensionfoldertype)                                  "PTable")))))  (let ((num 0))    (do-screens (screen)      (format t "~&Screen ~D: ~D bits, ~:[B/W~;color~]~%"              (incf num)              (screen-bits screen)              (screen-color-p screen))))  (format stream "~&Windows:  ~D~%" (length (windows)))  (let ((run-ticks (get-internal-run-time)))    (format stream "~&Run time: ~D ticks (~D secs)~%"            run-ticks (round run-ticks 60)))  (values)); End of config.lisp