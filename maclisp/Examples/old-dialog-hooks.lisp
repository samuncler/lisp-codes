;;-*- Mode: Lisp; Package: CCL -*-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; old-dialog-hooks.lisp;; Copyright 1990-1994, Apple Computer, Inc.;; Copyright 1995 Digitool, Inc.;;;;;; Hooks to make the new dialog package a little more compatible with the old one.;; Although this code will run, it is intended more as documentation of;; what changed.;;;;;;;;;;;;;;;;;;; Modification history;;;; 03/20/92 bill support :view-subviews & :dialog-items in the patched;;               initialize-instance for the dialog class;; ------------- 2.0f3;; 11/22/91 bill Fix buffer-set-font definition;; 10/15/91 bill add window-font, set-window-font;;(in-package :ccl);;         Old                             New;  --------------------------------   ------------------------------------;  dialog-item-size                   view-size;  set-dialog-item-size               set-view-size;  dialog-item-position               view-position;  set-dialog-item-position           set-view-position;  dialog-item-nick-name              view-nick-name;  add-dialog-items                   add-subviews;  remove-dialog-items                remove-subviews;  find-named-dialog-items            view-named, find-named-sibling;  item-named                         view-named;  dialog-item-dialog                 view-container;  window-(de)activate-event-handler  view-(de)activate-event-handler;  window-click-event-handler         view-click-event-handler;  window-mouse-position              view-mouse-position;  (set-)window-position              (set-)view-position;  (set-)window-size                  (set-)view-size;  dialog-item-font                   view-font;  (set-)window-font                  (set-)view-font;  :dialog-item-colors initarg        :part-color-list;  markp                              buffer-mark-p;  buffer-char-font                   buffer-char-font-spec;  buffer-current-font                buffer-current-font-spec;  buffer-replace-font                buffer-replace-font-spec;  buffer-set-font                    buffer-set-font-spec;  ed-skip-fwd-wsp&comments           buffer-skip-fwd-wsp&comments;  dialog-item-default-size           view-default-size;  window-vpos                        fred-vpos;  window-line-vpos                   fred-line-vpos;  window-hpos                        fred-hpos;  window-update                      fred-update;  window-start-mark                  fred-display-start-mark;  window-buffer                      fred-buffer;  catch-abort                        use restart-case;  catch-error                        use handler-case;  catch-error-quietly                ignore-errors;  color-window-mixin                 :color-p initarg;  :parent keyword to windows, etc.   :class keyword ;  add-self-to-dialog                 install-view-in-window;  remove-self-from-dialog            remove-view-from-window(defmacro maybe-push-initarg (var keyword &optional (initargs 'initargs))  `(if ,var     (setq ,initargs (cons ,keyword (cons ,var ,initargs))))); Support old keywords for size and position(defmethod initialize-instance ((item dialog-item) &rest initargs &key                                dialog-item-size dialog-item-position                                dialog-item-nick-name dialog-item-font                                dialog-item-colors)  (maybe-push-initarg dialog-item-size :view-size)  (maybe-push-initarg dialog-item-position :view-position)  (maybe-push-initarg dialog-item-nick-name :view-nick-name)  (maybe-push-initarg dialog-item-font :view-font)  (maybe-push-initarg dialog-item-colors :part-color-list)  (apply #'call-next-method item initargs))(defmethod dialog-item-size ((item dialog-item))  (view-size item))(defmethod set-dialog-item-size ((item dialog-item) h &optional v)  (set-view-size item h v))(defmethod dialog-item-position ((item dialog-item))  (view-position item))(defmethod set-dialog-item-position ((item dialog-item) h &optional v)  (set-view-position item h v))(defmethod dialog-item-nick-name ((item dialog-item))  (view-nick-name item))(defmethod item-named (name &optional (in-dialog-or-item (front-window)))  (find-named-dialog-item in-dialog-or-item name))(defmethod find-named-dialog-item (dialog name)  (view-named name dialog)); Can't be an :after method because some users change the args.(defmethod initialize-instance ((dialog dialog) &rest init-options                                &key dialog-items view-subviews)  (apply #'call-next-method         dialog         :view-subviews (append view-subviews dialog-items)         init-options))(defmethod add-dialog-items ((dialog dialog) &rest items)  (declare (dynamic-extent items))  (apply 'add-subviews dialog items))(defmethod remove-dialog-items ((dialog dialog) &rest items)  (declare (dynamic-extent items))  (apply 'remove-subviews dialog items))(defmethod dialog-item-dialog ((item dialog-item))  (view-container item))(defmethod dialog-find-vacant-position ((dialog dialog) d-item)  (view-find-vacant-position dialog d-item))(defmethod window-activate-event-handler ((w window))  (view-activate-event-handler w))(defmethod window-deactivate-event-handler ((w window))  (view-deactivate-event-handler w))(defmethod window-click-event-handler ((w window) where)  (view-click-event-handler w where))(defmethod window-mouse-position ((w window))  (view-mouse-position w))(defmethod window-size ((w window)) (view-size w))(defmethod window-position ((w window)) (view-position w))(defmethod set-window-size ((w window) h &optional v)  (set-view-size w h v))(defmethod set-window-position ((w window) h &optional v)  (set-view-position w h v))(defmethod window-font ((w window))  (view-font w))(defmethod set-window-font ((w window) font-spec)  (set-view-font w font-spec))(defmethod initialize-instance ((w window) &rest initargs                                &key window-size window-position window-font)  (let ((initargs initargs))    (maybe-push-initarg window-size :view-size)    (maybe-push-initarg window-position :view-position)    (maybe-push-initarg window-font :view-font)    (apply #'call-next-method w initargs)))(defun markp (m) (buffer-mark-p m))(defun buffer-char-font (b) (buffer-char-font-spec b))(defun buffer-current-font (b) (buffer-current-font-spec b))(defun buffer-replace-font (b old new) (buffer-replace-font-spec b old new))(defun buffer-set-font (b font-spec &optional start end)  (buffer-set-font-spec b font-spec start end))(defmethod ed-skip-fwd-wsp&comments ((w fred-mixin) start end)  (buffer-skip-fwd-wsp&comments (fred-buffer w) start end))(defmethod dialog-item-default-size ((view simple-view))  (view-default-size view))(defmethod window-vpos ((w fred-mixin) &optional pos)  (fred-vpos w pos))(defmethod window-line-vpos ((w fred-mixin) line)  (fred-line-vpos w line))(defmethod window-hpos ((w fred-mixin) &optional pos)  (fred-hpos w pos))(defmethod window-update ((w fred-mixin))  (fred-update w))(defmethod window-start-mark ((w fred-mixin))  (fred-display-start-mark w))(defmethod window-buffer ((w fred-mixin))  (fred-buffer w)) (defmacro catch-abort (&body body)  `(restart-case     (progn ,@body)     (abort () :abort)))(defmacro catch-error (&body body)  `(handler-case     (progn ,@body)     (error (condition)        (fresh-line *error-output*)        (report-condition condition *error-output*)	(values nil condition))))(defmacro catch-error-quietly (&body body)  `(ignore-errors ,@body))(defclass color-window-mixin () ()  (:default-initargs :color-p t))(defmethod add-self-to-dialog ((item dialog-item) dialog)  (install-view-in-window item dialog))(defmethod remove-self-from-dialog ((item dialog-item))  (remove-view-from-window item))