;;;-*-Mode: LISP; Package: CCL -*-;;	Change History (most recent first):;;  3 8/25/97  akh  no change;;  2 6/9/97   akh  see below;;  10 2/17/95 akh  no change;;  8 2/3/95   slh  copyright thang;;  7 2/2/95   akh  no change;;  5 1/13/95  akh  none really;;  (do not edit before this line!!); Level-1.lisp; Copyright 1985-1988 Coral Software Corp.; Copyright 1989-1994 Apple Computer, Inc.; Copyright 1995 Digitool, Inc. The 'tool rules!;; **** There must be NO lisp package or nilreg-rel immediates in this file ****(eval-when (:execute :compile-toplevel)  (load "ccl:l1;68K;level-1-defs.lisp"))(%include "ccl:l1;68K;level-1-com.lisp")(%fasload ":L1-fasls:L1-utils.fasl")(%fasload ":l1-fasls:68k-misc.fasl")(%fasload ":L1-fasls:L1-init.fasl")(%fasload ":L1-fasls:L1-symhash.fasl")(%fasload ":L1-fasls:L1-numbers.fasl");(%fasload ":l1-fasls:68k-misc.fasl")(%fasload ":L1-fasls:L1-aprims.fasl")(%fasload ":L1-fasls:L1-sort.fasl")(%fasload ":L1-fasls:L1-dcode.fasl")(%fasload ":L1-fasls:L1-clos.fasl")(%fasload ":L1-fasls:L1-streams.fasl")(%fasload ":L1-fasls:L1-traps.fasl")    ; must go before any ff-call trap is called(%fasload ":L1-fasls:L1-files.fasl")(%fasload ":L1-fasls:L1-stack-groups.fasl")(%fasload ":L1-fasls:L1-processes.fasl")(%fasload ":L1-fasls:L1-io.fasl")(%fasload ":l1-fasls:l0-cfm-support.fasl")(%fasload ":L1-fasls:L1-menus.fasl")(%fasload ":L1-fasls:L1-windows.fasl")(%fasload ":L1-fasls:L1-edbuf.fasl")(%fasload ":L1-fasls:L1-edcmd.fasl")(%fasload ":L1-fasls:script-manager.fasl")(%fasload ":L1-fasls:L1-edfrec.fasl")(%fasload ":L1-fasls:L1-edwin.fasl")(%fasload ":L1-fasls:L1-ed-lds.fasl")(%fasload ":Bin:dialogs.fasl")(%fasload ":Bin:views.fasl")(%fasload ":library:scroll-bar-dialog-items.fasl")(%fasload ":library:scrolling-fred-view.fasl")(%fasload ":L1-fasls:new-fred-window.fasl")(%fasload ":L1-fasls:L1-listener.fasl")(%fasload ":L1-fasls:L1-readloop.fasl")(%fasload ":L1-fasls:L1-readloop-lds.fasl")#|; handy when we dont do windows yet(defun %error (condition args error-pointer)  (setq condition (condition-arg condition args 'simple-error))  (let ((str (format nil "error: ~a" condition)))    (when (> (length str) 255)(setq str (%substr str 0 255)))    (with-pstrs ((pstr str)) (#_DebugStr pstr))    (signal condition)    (with-pstrs ((pstr str))  (#_DebugStr pstr))    (application-error *application* condition error-pointer)    (application-error     *application*     (condition-arg "~s returned. It shouldn't.~%If it returns again, I'll throw to toplevel."                    '(application-error) 'simple-error)     error-pointer)    (toplevel)))|#;; for reasons known only to god we can only call dbg once today(%fasload ":L1-fasls:L1-events.fasl"); (%fasload ":L1-fasls:L1-highlevel-events.fasl")(%fasload ":L1-fasls:L1-format.fasl")(%fasload ":L1-fasls:L1-initmenus.fasl")(%fasload ":L1-fasls:L1-initmenus-lds.fasl")(%fasload ":L1-fasls:L1-sysio.fasl")(%fasload ":L1-fasls:L1-pathnames.fasl")(%fasload ":L1-fasls:L1-boot-lds.fasl") ; load before l1-boot;(%fasload ":L1-fasls:L1-boot.fasl")(%fasload ":L1-fasls:L1-boot-1.fasl")(%fasload ":L1-fasls:L1-boot-2.fasl")(%fasload ":L1-fasls:L1-boot-3.fasl");; once level-1 is happy we say (require :init-ccl) to load rest#|	Change History (most recent last):	2	12/27/94	akh	merge with d13	3	1/2/95	akh	actually no change  4   1/6/95   akh   no change|# ;(do not edit past this line!!)